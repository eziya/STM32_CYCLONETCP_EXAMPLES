
ftp_client_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019c68  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08019e68  08019e68  0001ae68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801ad18  0801ad18  0001bd18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0801ad20  0801ad20  0001bd20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801ad28  0801ad28  0001bd28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000006f8  20000000  0801ad2c  0001c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000038ac  200006f8  0801b424  0001c6f8  2**2
                  ALLOC
  8 ._user_heap_stack 00020800  20003fa4  0801b424  0001cfa4  2**0
                  ALLOC
  9 .ram_no_cache 00003720  2007c000  2007c000  0001d000  2**2
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  0001c6f8  2**0
                  CONTENTS, READONLY
 11 .debug_info   000dcb74  00000000  00000000  0001c726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ff25  00000000  00000000  000f929a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_loclists 0001e6be  00000000  00000000  001091bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002890  00000000  00000000  00127880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000204e  00000000  00000000  0012a110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000452ad  00000000  00000000  0012c15e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00079c91  00000000  00000000  0017140b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00154fc5  00000000  00000000  001eb09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00340061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008bbc  00000000  00000000  003400a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000b0  00000000  00000000  00348c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006f8 	.word	0x200006f8
 800021c:	00000000 	.word	0x00000000
 8000220:	08019e50 	.word	0x08019e50

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006fc 	.word	0x200006fc
 800023c:	08019e50 	.word	0x08019e50

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b988 	b.w	8000618 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	468e      	mov	lr, r1
 8000328:	4604      	mov	r4, r0
 800032a:	4688      	mov	r8, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d962      	bls.n	80003fc <__udivmoddi4+0xdc>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	b14e      	cbz	r6, 8000350 <__udivmoddi4+0x30>
 800033c:	f1c6 0320 	rsb	r3, r6, #32
 8000340:	fa01 f806 	lsl.w	r8, r1, r6
 8000344:	fa20 f303 	lsr.w	r3, r0, r3
 8000348:	40b7      	lsls	r7, r6
 800034a:	ea43 0808 	orr.w	r8, r3, r8
 800034e:	40b4      	lsls	r4, r6
 8000350:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000354:	fa1f fc87 	uxth.w	ip, r7
 8000358:	fbb8 f1fe 	udiv	r1, r8, lr
 800035c:	0c23      	lsrs	r3, r4, #16
 800035e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000362:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000366:	fb01 f20c 	mul.w	r2, r1, ip
 800036a:	429a      	cmp	r2, r3
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0x62>
 800036e:	18fb      	adds	r3, r7, r3
 8000370:	f101 30ff 	add.w	r0, r1, #4294967295
 8000374:	f080 80ea 	bcs.w	800054c <__udivmoddi4+0x22c>
 8000378:	429a      	cmp	r2, r3
 800037a:	f240 80e7 	bls.w	800054c <__udivmoddi4+0x22c>
 800037e:	3902      	subs	r1, #2
 8000380:	443b      	add	r3, r7
 8000382:	1a9a      	subs	r2, r3, r2
 8000384:	b2a3      	uxth	r3, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000392:	fb00 fc0c 	mul.w	ip, r0, ip
 8000396:	459c      	cmp	ip, r3
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0x8e>
 800039a:	18fb      	adds	r3, r7, r3
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	f080 80d6 	bcs.w	8000550 <__udivmoddi4+0x230>
 80003a4:	459c      	cmp	ip, r3
 80003a6:	f240 80d3 	bls.w	8000550 <__udivmoddi4+0x230>
 80003aa:	443b      	add	r3, r7
 80003ac:	3802      	subs	r0, #2
 80003ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b2:	eba3 030c 	sub.w	r3, r3, ip
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11d      	cbz	r5, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40f3      	lsrs	r3, r6
 80003bc:	2200      	movs	r2, #0
 80003be:	e9c5 3200 	strd	r3, r2, [r5]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d905      	bls.n	80003d6 <__udivmoddi4+0xb6>
 80003ca:	b10d      	cbz	r5, 80003d0 <__udivmoddi4+0xb0>
 80003cc:	e9c5 0100 	strd	r0, r1, [r5]
 80003d0:	2100      	movs	r1, #0
 80003d2:	4608      	mov	r0, r1
 80003d4:	e7f5      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003d6:	fab3 f183 	clz	r1, r3
 80003da:	2900      	cmp	r1, #0
 80003dc:	d146      	bne.n	800046c <__udivmoddi4+0x14c>
 80003de:	4573      	cmp	r3, lr
 80003e0:	d302      	bcc.n	80003e8 <__udivmoddi4+0xc8>
 80003e2:	4282      	cmp	r2, r0
 80003e4:	f200 8105 	bhi.w	80005f2 <__udivmoddi4+0x2d2>
 80003e8:	1a84      	subs	r4, r0, r2
 80003ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ee:	2001      	movs	r0, #1
 80003f0:	4690      	mov	r8, r2
 80003f2:	2d00      	cmp	r5, #0
 80003f4:	d0e5      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003f6:	e9c5 4800 	strd	r4, r8, [r5]
 80003fa:	e7e2      	b.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f000 8090 	beq.w	8000522 <__udivmoddi4+0x202>
 8000402:	fab2 f682 	clz	r6, r2
 8000406:	2e00      	cmp	r6, #0
 8000408:	f040 80a4 	bne.w	8000554 <__udivmoddi4+0x234>
 800040c:	1a8a      	subs	r2, r1, r2
 800040e:	0c03      	lsrs	r3, r0, #16
 8000410:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000414:	b280      	uxth	r0, r0
 8000416:	b2bc      	uxth	r4, r7
 8000418:	2101      	movs	r1, #1
 800041a:	fbb2 fcfe 	udiv	ip, r2, lr
 800041e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000422:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000426:	fb04 f20c 	mul.w	r2, r4, ip
 800042a:	429a      	cmp	r2, r3
 800042c:	d907      	bls.n	800043e <__udivmoddi4+0x11e>
 800042e:	18fb      	adds	r3, r7, r3
 8000430:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x11c>
 8000436:	429a      	cmp	r2, r3
 8000438:	f200 80e0 	bhi.w	80005fc <__udivmoddi4+0x2dc>
 800043c:	46c4      	mov	ip, r8
 800043e:	1a9b      	subs	r3, r3, r2
 8000440:	fbb3 f2fe 	udiv	r2, r3, lr
 8000444:	fb0e 3312 	mls	r3, lr, r2, r3
 8000448:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800044c:	fb02 f404 	mul.w	r4, r2, r4
 8000450:	429c      	cmp	r4, r3
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x144>
 8000454:	18fb      	adds	r3, r7, r3
 8000456:	f102 30ff 	add.w	r0, r2, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x142>
 800045c:	429c      	cmp	r4, r3
 800045e:	f200 80ca 	bhi.w	80005f6 <__udivmoddi4+0x2d6>
 8000462:	4602      	mov	r2, r0
 8000464:	1b1b      	subs	r3, r3, r4
 8000466:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800046a:	e7a5      	b.n	80003b8 <__udivmoddi4+0x98>
 800046c:	f1c1 0620 	rsb	r6, r1, #32
 8000470:	408b      	lsls	r3, r1
 8000472:	fa22 f706 	lsr.w	r7, r2, r6
 8000476:	431f      	orrs	r7, r3
 8000478:	fa0e f401 	lsl.w	r4, lr, r1
 800047c:	fa20 f306 	lsr.w	r3, r0, r6
 8000480:	fa2e fe06 	lsr.w	lr, lr, r6
 8000484:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000488:	4323      	orrs	r3, r4
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	fa1f fc87 	uxth.w	ip, r7
 8000492:	fbbe f0f9 	udiv	r0, lr, r9
 8000496:	0c1c      	lsrs	r4, r3, #16
 8000498:	fb09 ee10 	mls	lr, r9, r0, lr
 800049c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	fa02 f201 	lsl.w	r2, r2, r1
 80004aa:	d909      	bls.n	80004c0 <__udivmoddi4+0x1a0>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80004b2:	f080 809c 	bcs.w	80005ee <__udivmoddi4+0x2ce>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f240 8099 	bls.w	80005ee <__udivmoddi4+0x2ce>
 80004bc:	3802      	subs	r0, #2
 80004be:	443c      	add	r4, r7
 80004c0:	eba4 040e 	sub.w	r4, r4, lr
 80004c4:	fa1f fe83 	uxth.w	lr, r3
 80004c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004cc:	fb09 4413 	mls	r4, r9, r3, r4
 80004d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d8:	45a4      	cmp	ip, r4
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x1ce>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f103 3eff 	add.w	lr, r3, #4294967295
 80004e2:	f080 8082 	bcs.w	80005ea <__udivmoddi4+0x2ca>
 80004e6:	45a4      	cmp	ip, r4
 80004e8:	d97f      	bls.n	80005ea <__udivmoddi4+0x2ca>
 80004ea:	3b02      	subs	r3, #2
 80004ec:	443c      	add	r4, r7
 80004ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004f2:	eba4 040c 	sub.w	r4, r4, ip
 80004f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004fa:	4564      	cmp	r4, ip
 80004fc:	4673      	mov	r3, lr
 80004fe:	46e1      	mov	r9, ip
 8000500:	d362      	bcc.n	80005c8 <__udivmoddi4+0x2a8>
 8000502:	d05f      	beq.n	80005c4 <__udivmoddi4+0x2a4>
 8000504:	b15d      	cbz	r5, 800051e <__udivmoddi4+0x1fe>
 8000506:	ebb8 0203 	subs.w	r2, r8, r3
 800050a:	eb64 0409 	sbc.w	r4, r4, r9
 800050e:	fa04 f606 	lsl.w	r6, r4, r6
 8000512:	fa22 f301 	lsr.w	r3, r2, r1
 8000516:	431e      	orrs	r6, r3
 8000518:	40cc      	lsrs	r4, r1
 800051a:	e9c5 6400 	strd	r6, r4, [r5]
 800051e:	2100      	movs	r1, #0
 8000520:	e74f      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000522:	fbb1 fcf2 	udiv	ip, r1, r2
 8000526:	0c01      	lsrs	r1, r0, #16
 8000528:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800052c:	b280      	uxth	r0, r0
 800052e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000532:	463b      	mov	r3, r7
 8000534:	4638      	mov	r0, r7
 8000536:	463c      	mov	r4, r7
 8000538:	46b8      	mov	r8, r7
 800053a:	46be      	mov	lr, r7
 800053c:	2620      	movs	r6, #32
 800053e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000542:	eba2 0208 	sub.w	r2, r2, r8
 8000546:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800054a:	e766      	b.n	800041a <__udivmoddi4+0xfa>
 800054c:	4601      	mov	r1, r0
 800054e:	e718      	b.n	8000382 <__udivmoddi4+0x62>
 8000550:	4610      	mov	r0, r2
 8000552:	e72c      	b.n	80003ae <__udivmoddi4+0x8e>
 8000554:	f1c6 0220 	rsb	r2, r6, #32
 8000558:	fa2e f302 	lsr.w	r3, lr, r2
 800055c:	40b7      	lsls	r7, r6
 800055e:	40b1      	lsls	r1, r6
 8000560:	fa20 f202 	lsr.w	r2, r0, r2
 8000564:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000568:	430a      	orrs	r2, r1
 800056a:	fbb3 f8fe 	udiv	r8, r3, lr
 800056e:	b2bc      	uxth	r4, r7
 8000570:	fb0e 3318 	mls	r3, lr, r8, r3
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800057a:	fb08 f904 	mul.w	r9, r8, r4
 800057e:	40b0      	lsls	r0, r6
 8000580:	4589      	cmp	r9, r1
 8000582:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000586:	b280      	uxth	r0, r0
 8000588:	d93e      	bls.n	8000608 <__udivmoddi4+0x2e8>
 800058a:	1879      	adds	r1, r7, r1
 800058c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000590:	d201      	bcs.n	8000596 <__udivmoddi4+0x276>
 8000592:	4589      	cmp	r9, r1
 8000594:	d81f      	bhi.n	80005d6 <__udivmoddi4+0x2b6>
 8000596:	eba1 0109 	sub.w	r1, r1, r9
 800059a:	fbb1 f9fe 	udiv	r9, r1, lr
 800059e:	fb09 f804 	mul.w	r8, r9, r4
 80005a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80005a6:	b292      	uxth	r2, r2
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	4542      	cmp	r2, r8
 80005ae:	d229      	bcs.n	8000604 <__udivmoddi4+0x2e4>
 80005b0:	18ba      	adds	r2, r7, r2
 80005b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005b6:	d2c4      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d2c2      	bcs.n	8000542 <__udivmoddi4+0x222>
 80005bc:	f1a9 0102 	sub.w	r1, r9, #2
 80005c0:	443a      	add	r2, r7
 80005c2:	e7be      	b.n	8000542 <__udivmoddi4+0x222>
 80005c4:	45f0      	cmp	r8, lr
 80005c6:	d29d      	bcs.n	8000504 <__udivmoddi4+0x1e4>
 80005c8:	ebbe 0302 	subs.w	r3, lr, r2
 80005cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005d0:	3801      	subs	r0, #1
 80005d2:	46e1      	mov	r9, ip
 80005d4:	e796      	b.n	8000504 <__udivmoddi4+0x1e4>
 80005d6:	eba7 0909 	sub.w	r9, r7, r9
 80005da:	4449      	add	r1, r9
 80005dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e4:	fb09 f804 	mul.w	r8, r9, r4
 80005e8:	e7db      	b.n	80005a2 <__udivmoddi4+0x282>
 80005ea:	4673      	mov	r3, lr
 80005ec:	e77f      	b.n	80004ee <__udivmoddi4+0x1ce>
 80005ee:	4650      	mov	r0, sl
 80005f0:	e766      	b.n	80004c0 <__udivmoddi4+0x1a0>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e6fd      	b.n	80003f2 <__udivmoddi4+0xd2>
 80005f6:	443b      	add	r3, r7
 80005f8:	3a02      	subs	r2, #2
 80005fa:	e733      	b.n	8000464 <__udivmoddi4+0x144>
 80005fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000600:	443b      	add	r3, r7
 8000602:	e71c      	b.n	800043e <__udivmoddi4+0x11e>
 8000604:	4649      	mov	r1, r9
 8000606:	e79c      	b.n	8000542 <__udivmoddi4+0x222>
 8000608:	eba1 0109 	sub.w	r1, r1, r9
 800060c:	46c4      	mov	ip, r8
 800060e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000612:	fb09 f804 	mul.w	r8, r9, r4
 8000616:	e7c4      	b.n	80005a2 <__udivmoddi4+0x282>

08000618 <__aeabi_idiv0>:
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop

0800061c <swapInt16>:
 * @return 16-bit value with byte order swapped
 **/

uint16_t swapInt16(uint16_t value)
{
   return SWAPINT16(value);
 800061c:	ba40      	rev16	r0, r0
}
 800061e:	b280      	uxth	r0, r0
 8000620:	4770      	bx	lr

08000622 <swapInt32>:
 * @return 32-bit value with byte order swapped
 **/

uint32_t swapInt32(uint32_t value)
{
   return SWAPINT32(value);
 8000622:	0203      	lsls	r3, r0, #8
 8000624:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000628:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800062c:	0a02      	lsrs	r2, r0, #8
 800062e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8000632:	4313      	orrs	r3, r2
}
 8000634:	ea43 6010 	orr.w	r0, r3, r0, lsr #24
 8000638:	4770      	bx	lr
	...

0800063c <formatSystemTime>:
 * @param[out] str NULL-terminated string representing the specified time
 * @return Pointer to the formatted string
 **/

const char_t *formatSystemTime(systime_t time, char_t *str)
{
 800063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800063e:	b083      	sub	sp, #12
   uint8_t seconds;
   uint16_t milliseconds;
   static char_t buffer[24];

   //Retrieve milliseconds
   milliseconds = time % 1000;
 8000640:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <formatSystemTime+0x9c>)
 8000642:	fba3 3c00 	umull	r3, ip, r3, r0
 8000646:	ea4f 139c 	mov.w	r3, ip, lsr #6
 800064a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800064e:	fb02 0313 	mls	r3, r2, r3, r0
   time /= 1000;
 8000652:	ea4f 109c 	mov.w	r0, ip, lsr #6
   //Retrieve seconds
   seconds = time % 60;
 8000656:	4c21      	ldr	r4, [pc, #132]	@ (80006dc <formatSystemTime+0xa0>)
 8000658:	fba4 2500 	umull	r2, r5, r4, r0
 800065c:	096d      	lsrs	r5, r5, #5
 800065e:	46ae      	mov	lr, r5
 8000660:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8000664:	eba0 0585 	sub.w	r5, r0, r5, lsl #2
 8000668:	b2ef      	uxtb	r7, r5
   time /= 60;
   //Retrieve minutes
   minutes = time % 60;
 800066a:	fba4 2c0e 	umull	r2, ip, r4, lr
 800066e:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8000672:	4662      	mov	r2, ip
 8000674:	ebcc 1c0c 	rsb	ip, ip, ip, lsl #4
 8000678:	ebae 0c8c 	sub.w	ip, lr, ip, lsl #2
 800067c:	fa5f f08c 	uxtb.w	r0, ip
   time /= 60;
   //Retrieve hours
   hours = time;
 8000680:	b294      	uxth	r4, r2

   //The parameter is optional
   if(str == NULL)
 8000682:	460e      	mov	r6, r1
 8000684:	b149      	cbz	r1, 800069a <formatSystemTime+0x5e>
   {
      str = buffer;
   }

   //Format system time
   if(hours > 0)
 8000686:	b954      	cbnz	r4, 800069e <formatSystemTime+0x62>
   {
      osSprintf(str, "%" PRIu16 "h %02" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
         hours, minutes, seconds, milliseconds);
   }
   else if(minutes > 0)
 8000688:	b9b0      	cbnz	r0, 80006b8 <formatSystemTime+0x7c>
   {
      osSprintf(str, "%" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
         minutes, seconds, milliseconds);
   }
   else if(seconds > 0)
 800068a:	b1ff      	cbz	r7, 80006cc <formatSystemTime+0x90>
   {
      osSprintf(str, "%" PRIu8 "s %03" PRIu16 "ms", seconds, milliseconds);
 800068c:	b29b      	uxth	r3, r3
 800068e:	b2ea      	uxtb	r2, r5
 8000690:	4913      	ldr	r1, [pc, #76]	@ (80006e0 <formatSystemTime+0xa4>)
 8000692:	4630      	mov	r0, r6
 8000694:	f014 fa10 	bl	8014ab8 <sprintf>
 8000698:	e00b      	b.n	80006b2 <formatSystemTime+0x76>
      str = buffer;
 800069a:	4e12      	ldr	r6, [pc, #72]	@ (80006e4 <formatSystemTime+0xa8>)
 800069c:	e7f3      	b.n	8000686 <formatSystemTime+0x4a>
      osSprintf(str, "%" PRIu16 "h %02" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 800069e:	b29b      	uxth	r3, r3
 80006a0:	9301      	str	r3, [sp, #4]
 80006a2:	b2ed      	uxtb	r5, r5
 80006a4:	9500      	str	r5, [sp, #0]
 80006a6:	fa5f f38c 	uxtb.w	r3, ip
 80006aa:	490f      	ldr	r1, [pc, #60]	@ (80006e8 <formatSystemTime+0xac>)
 80006ac:	4630      	mov	r0, r6
 80006ae:	f014 fa03 	bl	8014ab8 <sprintf>
      osSprintf(str, "%" PRIu16 "ms", milliseconds);
   }

   //Return a pointer to the formatted string
   return str;
}
 80006b2:	4630      	mov	r0, r6
 80006b4:	b003      	add	sp, #12
 80006b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      osSprintf(str, "%" PRIu8 "min %02" PRIu8 "s %03" PRIu16 "ms",
 80006b8:	b29b      	uxth	r3, r3
 80006ba:	9300      	str	r3, [sp, #0]
 80006bc:	b2eb      	uxtb	r3, r5
 80006be:	fa5f f28c 	uxtb.w	r2, ip
 80006c2:	490a      	ldr	r1, [pc, #40]	@ (80006ec <formatSystemTime+0xb0>)
 80006c4:	4630      	mov	r0, r6
 80006c6:	f014 f9f7 	bl	8014ab8 <sprintf>
 80006ca:	e7f2      	b.n	80006b2 <formatSystemTime+0x76>
      osSprintf(str, "%" PRIu16 "ms", milliseconds);
 80006cc:	b29a      	uxth	r2, r3
 80006ce:	4908      	ldr	r1, [pc, #32]	@ (80006f0 <formatSystemTime+0xb4>)
 80006d0:	4630      	mov	r0, r6
 80006d2:	f014 f9f1 	bl	8014ab8 <sprintf>
   return str;
 80006d6:	e7ec      	b.n	80006b2 <formatSystemTime+0x76>
 80006d8:	10624dd3 	.word	0x10624dd3
 80006dc:	88888889 	.word	0x88888889
 80006e0:	0801a088 	.word	0x0801a088
 80006e4:	20000714 	.word	0x20000714
 80006e8:	0801a050 	.word	0x0801a050
 80006ec:	0801a070 	.word	0x0801a070
 80006f0:	0801a098 	.word	0x0801a098

080006f4 <osInitKernel>:
 * @brief Kernel initialization
 **/

void osInitKernel(void)
{
}
 80006f4:	4770      	bx	lr

080006f6 <osStartKernel>:
/**
 * @brief Start kernel
 **/

void osStartKernel(void)
{
 80006f6:	b508      	push	{r3, lr}
   //Start the scheduler
   vTaskStartScheduler();
 80006f8:	f011 fe6e 	bl	80123d8 <vTaskStartScheduler>
}
 80006fc:	bd08      	pop	{r3, pc}

080006fe <osCreateTask>:
 * @return Task identifier referencing the newly created task
 **/

OsTaskId osCreateTask(const char_t *name, OsTaskCode taskCode, void *arg,
   const OsTaskParameters *params)
{
 80006fe:	b510      	push	{r4, lr}
 8000700:	b084      	sub	sp, #16
 8000702:	4684      	mov	ip, r0
 8000704:	4608      	mov	r0, r1
 8000706:	4619      	mov	r1, r3
#endif
   //Dynamic allocation?
   {
      //Create a new task
      status = xTaskCreate((TaskFunction_t) taskCode, name, stackSize, arg,
         params->priority, &handle);
 8000708:	685b      	ldr	r3, [r3, #4]
      status = xTaskCreate((TaskFunction_t) taskCode, name, stackSize, arg,
 800070a:	ac03      	add	r4, sp, #12
 800070c:	9401      	str	r4, [sp, #4]
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	4613      	mov	r3, r2
 8000712:	880a      	ldrh	r2, [r1, #0]
 8000714:	4661      	mov	r1, ip
 8000716:	f011 fe2b 	bl	8012370 <xTaskCreate>

      //Failed to create task?
      if(status != pdPASS)
 800071a:	2801      	cmp	r0, #1
 800071c:	d001      	beq.n	8000722 <osCreateTask+0x24>
      {
         handle = OS_INVALID_TASK_ID;
 800071e:	2300      	movs	r3, #0
 8000720:	9303      	str	r3, [sp, #12]
      }
   }

   //Return the handle referencing the newly created task
   return (OsTaskId) handle;
}
 8000722:	9803      	ldr	r0, [sp, #12]
 8000724:	b004      	add	sp, #16
 8000726:	bd10      	pop	{r4, pc}

08000728 <osDelayTask>:
 * @brief Delay routine
 * @param[in] delay Amount of time for which the calling task should block
 **/

void osDelayTask(systime_t delay)
{
 8000728:	b508      	push	{r3, lr}
   //Delay the task for the specified duration
   vTaskDelay(OS_MS_TO_SYSTICKS(delay));
 800072a:	f011 ffe3 	bl	80126f4 <vTaskDelay>
}
 800072e:	bd08      	pop	{r3, pc}

08000730 <osSuspendAllTasks>:
/**
 * @brief Suspend scheduler activity
 **/

void osSuspendAllTasks(void)
{
 8000730:	b508      	push	{r3, lr}
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000732:	f012 f8f1 	bl	8012918 <xTaskGetSchedulerState>
 8000736:	2801      	cmp	r0, #1
 8000738:	d100      	bne.n	800073c <osSuspendAllTasks+0xc>
   {
      //Suspend all tasks
      vTaskSuspendAll();
   }
}
 800073a:	bd08      	pop	{r3, pc}
      vTaskSuspendAll();
 800073c:	f011 fe80 	bl	8012440 <vTaskSuspendAll>
}
 8000740:	e7fb      	b.n	800073a <osSuspendAllTasks+0xa>

08000742 <osResumeAllTasks>:
/**
 * @brief Resume scheduler activity
 **/

void osResumeAllTasks(void)
{
 8000742:	b508      	push	{r3, lr}
   //Make sure the operating system is running
   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000744:	f012 f8e8 	bl	8012918 <xTaskGetSchedulerState>
 8000748:	2801      	cmp	r0, #1
 800074a:	d100      	bne.n	800074e <osResumeAllTasks+0xc>
   {
      //Resume all tasks
      xTaskResumeAll();
   }
}
 800074c:	bd08      	pop	{r3, pc}
      xTaskResumeAll();
 800074e:	f011 ff35 	bl	80125bc <xTaskResumeAll>
}
 8000752:	e7fb      	b.n	800074c <osResumeAllTasks+0xa>

08000754 <osCreateEvent>:
 * @return The function returns TRUE if the event object was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateEvent(OsEvent *event)
{
 8000754:	b510      	push	{r4, lr}
 8000756:	4604      	mov	r4, r0
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinaryStatic(&event->buffer);
#else
   //Create a binary semaphore
   event->handle = xSemaphoreCreateBinary();
 8000758:	2203      	movs	r2, #3
 800075a:	2100      	movs	r1, #0
 800075c:	2001      	movs	r0, #1
 800075e:	f011 fad2 	bl	8011d06 <xQueueGenericCreate>
 8000762:	6020      	str	r0, [r4, #0]
#endif

   //Check whether the returned handle is valid
   if(event->handle != NULL)
 8000764:	b108      	cbz	r0, 800076a <osCreateEvent+0x16>
   {
      return TRUE;
 8000766:	2001      	movs	r0, #1
   }
   else
   {
      return FALSE;
   }
}
 8000768:	bd10      	pop	{r4, pc}
      return FALSE;
 800076a:	2000      	movs	r0, #0
 800076c:	e7fc      	b.n	8000768 <osCreateEvent+0x14>

0800076e <osDeleteEvent>:
 **/

void osDeleteEvent(OsEvent *event)
{
   //Make sure the handle is valid
   if(event->handle != NULL)
 800076e:	6800      	ldr	r0, [r0, #0]
 8000770:	b118      	cbz	r0, 800077a <osDeleteEvent+0xc>
{
 8000772:	b508      	push	{r3, lr}
   {
      //Properly dispose the event object
      vSemaphoreDelete(event->handle);
 8000774:	f011 fc73 	bl	801205e <vQueueDelete>
   }
}
 8000778:	bd08      	pop	{r3, pc}
 800077a:	4770      	bx	lr

0800077c <osSetEvent>:
 * @brief Set the specified event object to the signaled state
 * @param[in] event Pointer to the event object
 **/

void osSetEvent(OsEvent *event)
{
 800077c:	b508      	push	{r3, lr}
   //Set the specified event to the signaled state
   xSemaphoreGive(event->handle);
 800077e:	2300      	movs	r3, #0
 8000780:	461a      	mov	r2, r3
 8000782:	4619      	mov	r1, r3
 8000784:	6800      	ldr	r0, [r0, #0]
 8000786:	f011 fae6 	bl	8011d56 <xQueueGenericSend>
}
 800078a:	bd08      	pop	{r3, pc}

0800078c <osResetEvent>:
 * @brief Set the specified event object to the nonsignaled state
 * @param[in] event Pointer to the event object
 **/

void osResetEvent(OsEvent *event)
{
 800078c:	b508      	push	{r3, lr}
   //Force the specified event to the nonsignaled state
   xSemaphoreTake(event->handle, 0);
 800078e:	2100      	movs	r1, #0
 8000790:	6800      	ldr	r0, [r0, #0]
 8000792:	f011 fbc1 	bl	8011f18 <xQueueSemaphoreTake>
}
 8000796:	bd08      	pop	{r3, pc}

08000798 <osWaitForEvent>:
 * @return The function returns TRUE if the state of the specified object is
 *   signaled. FALSE is returned if the timeout interval elapsed
 **/

bool_t osWaitForEvent(OsEvent *event, systime_t timeout)
{
 8000798:	b508      	push	{r3, lr}
   portBASE_TYPE ret;

   //Wait until the specified event is in the signaled state or the timeout
   //interval elapses
   if(timeout == INFINITE_DELAY)
 800079a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800079e:	d003      	beq.n	80007a8 <osWaitForEvent+0x10>
      ret = xSemaphoreTake(event->handle, portMAX_DELAY);
   }
   else
   {
      //Wait for the specified time interval
      ret = xSemaphoreTake(event->handle, OS_MS_TO_SYSTICKS(timeout));
 80007a0:	6800      	ldr	r0, [r0, #0]
 80007a2:	f011 fbb9 	bl	8011f18 <xQueueSemaphoreTake>
   }

   //The return value tells whether the event is set
   return ret;
}
 80007a6:	bd08      	pop	{r3, pc}
      ret = xSemaphoreTake(event->handle, portMAX_DELAY);
 80007a8:	6800      	ldr	r0, [r0, #0]
 80007aa:	f011 fbb5 	bl	8011f18 <xQueueSemaphoreTake>
 80007ae:	e7fa      	b.n	80007a6 <osWaitForEvent+0xe>

080007b0 <osSetEventFromIsr>:
 * @return TRUE if setting the event to signaled state caused a task to unblock
 *   and the unblocked task has a priority higher than the currently running task
 **/

bool_t osSetEventFromIsr(OsEvent *event)
{
 80007b0:	b500      	push	{lr}
 80007b2:	b083      	sub	sp, #12
   portBASE_TYPE flag = FALSE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	9301      	str	r3, [sp, #4]

   //Set the specified event to the signaled state
   xSemaphoreGiveFromISR(event->handle, &flag);
 80007b8:	a901      	add	r1, sp, #4
 80007ba:	6800      	ldr	r0, [r0, #0]
 80007bc:	f011 fb71 	bl	8011ea2 <xQueueGiveFromISR>

   //A higher priority task has been woken?
   return flag;
}
 80007c0:	9801      	ldr	r0, [sp, #4]
 80007c2:	b003      	add	sp, #12
 80007c4:	f85d fb04 	ldr.w	pc, [sp], #4

080007c8 <osCreateMutex>:
 * @return The function returns TRUE if the mutex was successfully
 *   created. Otherwise, FALSE is returned
 **/

bool_t osCreateMutex(OsMutex *mutex)
{
 80007c8:	b510      	push	{r4, lr}
 80007ca:	4604      	mov	r4, r0
#if (configSUPPORT_STATIC_ALLOCATION == 1)
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutexStatic(&mutex->buffer);
#else
   //Create a mutex object
   mutex->handle = xSemaphoreCreateMutex();
 80007cc:	2001      	movs	r0, #1
 80007ce:	f011 fb5d 	bl	8011e8c <xQueueCreateMutex>
 80007d2:	6020      	str	r0, [r4, #0]
#endif

   //Check whether the returned handle is valid
   if(mutex->handle != NULL)
 80007d4:	b108      	cbz	r0, 80007da <osCreateMutex+0x12>
   {
      return TRUE;
 80007d6:	2001      	movs	r0, #1
   }
   else
   {
      return FALSE;
   }
}
 80007d8:	bd10      	pop	{r4, pc}
      return FALSE;
 80007da:	2000      	movs	r0, #0
 80007dc:	e7fc      	b.n	80007d8 <osCreateMutex+0x10>

080007de <osAcquireMutex>:
 * @brief Acquire ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osAcquireMutex(OsMutex *mutex)
{
 80007de:	b508      	push	{r3, lr}
   //Obtain ownership of the mutex object
   xSemaphoreTake(mutex->handle, portMAX_DELAY);
 80007e0:	f04f 31ff 	mov.w	r1, #4294967295
 80007e4:	6800      	ldr	r0, [r0, #0]
 80007e6:	f011 fb97 	bl	8011f18 <xQueueSemaphoreTake>
}
 80007ea:	bd08      	pop	{r3, pc}

080007ec <osReleaseMutex>:
 * @brief Release ownership of the specified mutex object
 * @param[in] mutex Pointer to the mutex object
 **/

void osReleaseMutex(OsMutex *mutex)
{
 80007ec:	b508      	push	{r3, lr}
   //Release ownership of the mutex object
   xSemaphoreGive(mutex->handle);
 80007ee:	2300      	movs	r3, #0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4619      	mov	r1, r3
 80007f4:	6800      	ldr	r0, [r0, #0]
 80007f6:	f011 faae 	bl	8011d56 <xQueueGenericSend>
}
 80007fa:	bd08      	pop	{r3, pc}

080007fc <osGetSystemTime>:
 * @brief Retrieve system time
 * @return Number of milliseconds elapsed since the system was last started
 **/

systime_t osGetSystemTime(void)
{
 80007fc:	b508      	push	{r3, lr}
   systime_t time;

   //Get current tick count
   time = xTaskGetTickCount();
 80007fe:	f011 fe29 	bl	8012454 <xTaskGetTickCount>

   //Convert system ticks to milliseconds
   return OS_SYSTICKS_TO_MS(time);
}
 8000802:	bd08      	pop	{r3, pc}

08000804 <osAllocMem>:
 * @return A pointer to the allocated memory block or NULL if
 *   there is insufficient memory available
 **/

__weak_func void *osAllocMem(size_t size)
{
 8000804:	b508      	push	{r3, lr}
   void *p;

   //Allocate a memory block
   p = pvPortMalloc(size);
 8000806:	f011 f83d 	bl	8011884 <pvPortMalloc>
   TRACE_DEBUG("Allocating %" PRIuSIZE " bytes at 0x%08" PRIXPTR "\r\n",
      size, (uintptr_t) p);

   //Return a pointer to the newly allocated memory block
   return p;
}
 800080a:	bd08      	pop	{r3, pc}

0800080c <osFreeMem>:
 **/

__weak_func void osFreeMem(void *p)
{
   //Make sure the pointer is valid
   if(p != NULL)
 800080c:	b118      	cbz	r0, 8000816 <osFreeMem+0xa>
{
 800080e:	b508      	push	{r3, lr}
   {
      //Debug message
      TRACE_DEBUG("Freeing memory at 0x%08" PRIXPTR "\r\n", (uintptr_t) p);

      //Free memory block
      vPortFree(p);
 8000810:	f011 f844 	bl	801189c <vPortFree>
   }
}
 8000814:	bd08      	pop	{r3, pc}
 8000816:	4770      	bx	lr

08000818 <strRemoveTrailingSpace>:
void strRemoveTrailingSpace(char_t *s)
{
   char_t *end;

   //Search for the first whitespace to remove at the end of the string
   for(end = NULL; *s != '\0'; s++)
 8000818:	2100      	movs	r1, #0
 800081a:	e001      	b.n	8000820 <strRemoveTrailingSpace+0x8>
   {
      if(!osIsspace(*s))
      {
         end = NULL;
 800081c:	2100      	movs	r1, #0
   for(end = NULL; *s != '\0'; s++)
 800081e:	3001      	adds	r0, #1
 8000820:	7803      	ldrb	r3, [r0, #0]
 8000822:	b143      	cbz	r3, 8000836 <strRemoveTrailingSpace+0x1e>
      if(!osIsspace(*s))
 8000824:	4a05      	ldr	r2, [pc, #20]	@ (800083c <strRemoveTrailingSpace+0x24>)
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	f013 0f08 	tst.w	r3, #8
 800082c:	d0f6      	beq.n	800081c <strRemoveTrailingSpace+0x4>
      }
      else if(!end)
 800082e:	2900      	cmp	r1, #0
 8000830:	d1f5      	bne.n	800081e <strRemoveTrailingSpace+0x6>
      {
         end = s;
 8000832:	4601      	mov	r1, r0
 8000834:	e7f3      	b.n	800081e <strRemoveTrailingSpace+0x6>
      }
   }

   //Trim whitespace from the end
   if(end)
 8000836:	b101      	cbz	r1, 800083a <strRemoveTrailingSpace+0x22>
      *end = '\0';
 8000838:	700b      	strb	r3, [r1, #0]
}
 800083a:	4770      	bx	lr
 800083c:	0801a972 	.word	0x0801a972

08000840 <strReplaceChar>:
 **/

void strReplaceChar(char_t *s, char_t oldChar, char_t newChar)
{
   //Parse the specified string
   while(*s != '\0')
 8000840:	e000      	b.n	8000844 <strReplaceChar+0x4>
      //Remplace all occurrences of the specified character
      if(*s == oldChar)
         *s = newChar;

      //Next character
      s++;
 8000842:	3001      	adds	r0, #1
   while(*s != '\0')
 8000844:	7803      	ldrb	r3, [r0, #0]
 8000846:	b11b      	cbz	r3, 8000850 <strReplaceChar+0x10>
      if(*s == oldChar)
 8000848:	428b      	cmp	r3, r1
 800084a:	d1fa      	bne.n	8000842 <strReplaceChar+0x2>
         *s = newChar;
 800084c:	7002      	strb	r2, [r0, #0]
 800084e:	e7f8      	b.n	8000842 <strReplaceChar+0x2>
   }
}
 8000850:	4770      	bx	lr

08000852 <arpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t arpInit(NetInterface *interface)
{
 8000852:	b508      	push	{r3, lr}
   //Enable ARP protocol
   interface->enableArp = TRUE;
 8000854:	2301      	movs	r3, #1
 8000856:	f8c0 334c 	str.w	r3, [r0, #844]	@ 0x34c
   //Set ARP reachable time
   interface->arpReachableTime = ARP_REACHABLE_TIME;
 800085a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800085e:	f8c0 3350 	str.w	r3, [r0, #848]	@ 0x350
   //Set ARP probe timeout
   interface->arpProbeTimeout = ARP_PROBE_TIMEOUT;
 8000862:	f8c0 3354 	str.w	r3, [r0, #852]	@ 0x354

   //Initialize the ARP cache
   osMemset(interface->arpCache, 0, sizeof(interface->arpCache));
 8000866:	f44f 7260 	mov.w	r2, #896	@ 0x380
 800086a:	2100      	movs	r1, #0
 800086c:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8000870:	f014 fa08 	bl	8014c84 <memset>

   //Successful initialization
   return NO_ERROR;
}
 8000874:	2000      	movs	r0, #0
 8000876:	bd08      	pop	{r3, pc}

08000878 <arpEnqueuePacket>:
 * @return Error code
 **/

error_t arpEnqueuePacket(NetInterface *interface, Ipv4Addr ipAddr,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8000878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800087c:	b082      	sub	sp, #8
 800087e:	4604      	mov	r4, r0
 8000880:	460d      	mov	r5, r1
 8000882:	4616      	mov	r6, r2
 8000884:	4698      	mov	r8, r3
   uint_t i;
   size_t length;
   ArpCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 8000886:	4610      	mov	r0, r2
 8000888:	f00b fbf6 	bl	800c078 <netBufferGetLength>
 800088c:	4607      	mov	r7, r0

   //Search the ARP cache for the specified IPv4 address
   entry = arpFindEntry(interface, ipAddr);
 800088e:	4629      	mov	r1, r5
 8000890:	4620      	mov	r0, r4
 8000892:	f000 fba3 	bl	8000fdc <arpFindEntry>

   //Check whether a matching entry exists
   if(entry != NULL)
 8000896:	2800      	cmp	r0, #0
 8000898:	d056      	beq.n	8000948 <arpEnqueuePacket+0xd0>
 800089a:	4605      	mov	r5, r0
   {
      //Check the state of the ARP entry
      if(entry->state == ARP_STATE_INCOMPLETE)
 800089c:	7803      	ldrb	r3, [r0, #0]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d003      	beq.n	80008aa <arpEnqueuePacket+0x32>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 80008a2:	20e0      	movs	r0, #224	@ 0xe0
      error = ERROR_NOT_FOUND;
   }

   //Return status code
   return error;
}
 80008a4:	b002      	add	sp, #8
 80008a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         if(entry->queueSize >= ARP_MAX_PENDING_PACKETS)
 80008aa:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d825      	bhi.n	80008fc <arpEnqueuePacket+0x84>
         i = entry->queueSize;
 80008b0:	6eec      	ldr	r4, [r5, #108]	@ 0x6c
         entry->queue[i].buffer = netBufferAlloc(length);
 80008b2:	4638      	mov	r0, r7
 80008b4:	f00b fc61 	bl	800c17a <netBufferAlloc>
 80008b8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80008bc:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80008c0:	61d8      	str	r0, [r3, #28]
         if(entry->queue[i].buffer != NULL)
 80008c2:	2800      	cmp	r0, #0
 80008c4:	d043      	beq.n	800094e <arpEnqueuePacket+0xd6>
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 80008c6:	9700      	str	r7, [sp, #0]
 80008c8:	2300      	movs	r3, #0
 80008ca:	4632      	mov	r2, r6
 80008cc:	4619      	mov	r1, r3
 80008ce:	f00b fcda 	bl	800c286 <netBufferCopy>
            entry->queue[i].offset = offset;
 80008d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80008d6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 80008da:	f8c3 8020 	str.w	r8, [r3, #32]
            entry->queue[i].ancillary = *ancillary;
 80008de:	f103 0c24 	add.w	ip, r3, #36	@ 0x24
 80008e2:	9c08      	ldr	r4, [sp, #32]
 80008e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80008ea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ee:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            entry->queueSize++;
 80008f2:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80008f4:	3301      	adds	r3, #1
 80008f6:	66eb      	str	r3, [r5, #108]	@ 0x6c
            error = NO_ERROR;
 80008f8:	2000      	movs	r0, #0
 80008fa:	e7d3      	b.n	80008a4 <arpEnqueuePacket+0x2c>
            netBufferFree(entry->queue[0].buffer);
 80008fc:	69c0      	ldr	r0, [r0, #28]
 80008fe:	f00b fc33 	bl	800c168 <netBufferFree>
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8000902:	f04f 0e01 	mov.w	lr, #1
 8000906:	f1be 0f01 	cmp.w	lr, #1
 800090a:	d903      	bls.n	8000914 <arpEnqueuePacket+0x9c>
            entry->queueSize--;
 800090c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 800090e:	3b01      	subs	r3, #1
 8000910:	66eb      	str	r3, [r5, #108]	@ 0x6c
 8000912:	e7cd      	b.n	80008b0 <arpEnqueuePacket+0x38>
               entry->queue[i - 1] = entry->queue[i];
 8000914:	f10e 34ff 	add.w	r4, lr, #4294967295
 8000918:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800091c:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
 8000920:	eb0e 0c8e 	add.w	ip, lr, lr, lsl #2
 8000924:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
 8000928:	341c      	adds	r4, #28
 800092a:	f10c 0c1c 	add.w	ip, ip, #28
 800092e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000932:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000934:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800093a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800093e:	e884 0003 	stmia.w	r4, {r0, r1}
            for(i = 1; i < ARP_MAX_PENDING_PACKETS; i++)
 8000942:	f10e 0e01 	add.w	lr, lr, #1
 8000946:	e7de      	b.n	8000906 <arpEnqueuePacket+0x8e>
      error = ERROR_NOT_FOUND;
 8000948:	f240 100f 	movw	r0, #271	@ 0x10f
 800094c:	e7aa      	b.n	80008a4 <arpEnqueuePacket+0x2c>
            error = ERROR_OUT_OF_MEMORY;
 800094e:	2064      	movs	r0, #100	@ 0x64
 8000950:	e7a8      	b.n	80008a4 <arpEnqueuePacket+0x2c>
	...

08000954 <arpProcessReply>:
 * @param[in] interface Underlying network interface
 * @param[in] arpReply Incoming ARP reply
 **/

void arpProcessReply(NetInterface *interface, ArpPacket *arpReply)
{
 8000954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000956:	460c      	mov	r4, r1

   //Debug message
   TRACE_INFO("ARP Reply received...\r\n");

   //Check sender protocol address
   if(arpReply->spa == IPV4_UNSPECIFIED_ADDR ||
 8000958:	f8d1 100e 	ldr.w	r1, [r1, #14]
 800095c:	b901      	cbnz	r1, 8000960 <arpProcessReply+0xc>
      else
      {
         //Static ARP entries are never updated
      }
   }
}
 800095e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000960:	4605      	mov	r5, r0
      ipv4IsBroadcastAddr(interface, arpReply->spa) ||
 8000962:	f005 fc16 	bl	8006192 <ipv4IsBroadcastAddr>
   if(arpReply->spa == IPV4_UNSPECIFIED_ADDR ||
 8000966:	2800      	cmp	r0, #0
 8000968:	d1f9      	bne.n	800095e <arpProcessReply+0xa>
      ipv4IsMulticastAddr(arpReply->spa))
 800096a:	f8d4 300e 	ldr.w	r3, [r4, #14]
 800096e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ipv4IsBroadcastAddr(interface, arpReply->spa) ||
 8000972:	2be0      	cmp	r3, #224	@ 0xe0
 8000974:	d0f3      	beq.n	800095e <arpProcessReply+0xa>
   if(macCompAddr(&arpReply->sha, &MAC_UNSPECIFIED_ADDR) ||
 8000976:	f104 0608 	add.w	r6, r4, #8
 800097a:	2206      	movs	r2, #6
 800097c:	4928      	ldr	r1, [pc, #160]	@ (8000a20 <arpProcessReply+0xcc>)
 800097e:	4630      	mov	r0, r6
 8000980:	f014 f956 	bl	8014c30 <memcmp>
 8000984:	2800      	cmp	r0, #0
 8000986:	d0ea      	beq.n	800095e <arpProcessReply+0xa>
      macCompAddr(&arpReply->sha, &MAC_BROADCAST_ADDR) ||
 8000988:	2206      	movs	r2, #6
 800098a:	4926      	ldr	r1, [pc, #152]	@ (8000a24 <arpProcessReply+0xd0>)
 800098c:	4630      	mov	r0, r6
 800098e:	f014 f94f 	bl	8014c30 <memcmp>
   if(macCompAddr(&arpReply->sha, &MAC_UNSPECIFIED_ADDR) ||
 8000992:	2800      	cmp	r0, #0
 8000994:	d0e3      	beq.n	800095e <arpProcessReply+0xa>
      macIsMulticastAddr(&arpReply->sha))
 8000996:	7a23      	ldrb	r3, [r4, #8]
      macCompAddr(&arpReply->sha, &MAC_BROADCAST_ADDR) ||
 8000998:	f013 0f01 	tst.w	r3, #1
 800099c:	d1df      	bne.n	800095e <arpProcessReply+0xa>
   if(ipv4IsTentativeAddr(interface, arpReply->tpa))
 800099e:	69a1      	ldr	r1, [r4, #24]
 80009a0:	4628      	mov	r0, r5
 80009a2:	f005 fc5c 	bl	800625e <ipv4IsTentativeAddr>
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d1d9      	bne.n	800095e <arpProcessReply+0xa>
   entry = arpFindEntry(interface, arpReply->spa);
 80009aa:	f8d4 100e 	ldr.w	r1, [r4, #14]
 80009ae:	4628      	mov	r0, r5
 80009b0:	f000 fb14 	bl	8000fdc <arpFindEntry>
   if(entry != NULL)
 80009b4:	4607      	mov	r7, r0
 80009b6:	2800      	cmp	r0, #0
 80009b8:	d0d1      	beq.n	800095e <arpProcessReply+0xa>
      if(entry->state == ARP_STATE_INCOMPLETE)
 80009ba:	7803      	ldrb	r3, [r0, #0]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d012      	beq.n	80009e6 <arpProcessReply+0x92>
      else if(entry->state == ARP_STATE_REACHABLE)
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d020      	beq.n	8000a06 <arpProcessReply+0xb2>
      else if(entry->state == ARP_STATE_PROBE)
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d1ca      	bne.n	800095e <arpProcessReply+0xa>
         entry->ipAddr = arpReply->spa;
 80009c8:	f8d4 300e 	ldr.w	r3, [r4, #14]
 80009cc:	6043      	str	r3, [r0, #4]
         entry->macAddr = arpReply->sha;
 80009ce:	68a0      	ldr	r0, [r4, #8]
 80009d0:	60b8      	str	r0, [r7, #8]
 80009d2:	89a3      	ldrh	r3, [r4, #12]
 80009d4:	81bb      	strh	r3, [r7, #12]
         entry->timeout = interface->arpReachableTime;
 80009d6:	f8d5 3350 	ldr.w	r3, [r5, #848]	@ 0x350
 80009da:	617b      	str	r3, [r7, #20]
         arpChangeState(entry, ARP_STATE_REACHABLE);
 80009dc:	2102      	movs	r1, #2
 80009de:	4638      	mov	r0, r7
 80009e0:	f000 faf4 	bl	8000fcc <arpChangeState>
      }
 80009e4:	e7bb      	b.n	800095e <arpProcessReply+0xa>
         entry->macAddr = arpReply->sha;
 80009e6:	68a0      	ldr	r0, [r4, #8]
 80009e8:	60b8      	str	r0, [r7, #8]
 80009ea:	89a3      	ldrh	r3, [r4, #12]
 80009ec:	81bb      	strh	r3, [r7, #12]
         arpSendQueuedPackets(interface, entry);
 80009ee:	4639      	mov	r1, r7
 80009f0:	4628      	mov	r0, r5
 80009f2:	f000 fb12 	bl	800101a <arpSendQueuedPackets>
         entry->timeout = interface->arpReachableTime;
 80009f6:	f8d5 3350 	ldr.w	r3, [r5, #848]	@ 0x350
 80009fa:	617b      	str	r3, [r7, #20]
         arpChangeState(entry, ARP_STATE_REACHABLE);
 80009fc:	2102      	movs	r1, #2
 80009fe:	4638      	mov	r0, r7
 8000a00:	f000 fae4 	bl	8000fcc <arpChangeState>
 8000a04:	e7ab      	b.n	800095e <arpProcessReply+0xa>
         if(!macCompAddr(&arpReply->sha, &entry->macAddr))
 8000a06:	2206      	movs	r2, #6
 8000a08:	f100 0108 	add.w	r1, r0, #8
 8000a0c:	4630      	mov	r0, r6
 8000a0e:	f014 f90f 	bl	8014c30 <memcmp>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d0a3      	beq.n	800095e <arpProcessReply+0xa>
            arpChangeState(entry, ARP_STATE_STALE);
 8000a16:	2103      	movs	r1, #3
 8000a18:	4638      	mov	r0, r7
 8000a1a:	f000 fad7 	bl	8000fcc <arpChangeState>
 8000a1e:	e79e      	b.n	800095e <arpProcessReply+0xa>
 8000a20:	08019ea0 	.word	0x08019ea0
 8000a24:	08019eb0 	.word	0x08019eb0

08000a28 <arpSendProbe>:
 * @param[in] targetIpAddr Target IPv4 address
 * @return Error code
 **/

error_t arpSendProbe(NetInterface *interface, Ipv4Addr targetIpAddr)
{
 8000a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a2c:	b08c      	sub	sp, #48	@ 0x30
 8000a2e:	4606      	mov	r6, r0
 8000a30:	460f      	mov	r7, r1
   ArpPacket *arpRequest;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8000a32:	f00c f860 	bl	800caf6 <nicGetLogicalInterface>
 8000a36:	4605      	mov	r5, r0

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 8000a38:	a90b      	add	r1, sp, #44	@ 0x2c
 8000a3a:	201c      	movs	r0, #28
 8000a3c:	f002 fb26 	bl	800308c <ethAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 8000a40:	2800      	cmp	r0, #0
 8000a42:	d043      	beq.n	8000acc <arpSendProbe+0xa4>
 8000a44:	4680      	mov	r8, r0
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the ARP packet
   arpRequest = netBufferAt(buffer, offset, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000a4a:	f00b fbb5 	bl	800c1b8 <netBufferAt>
 8000a4e:	4604      	mov	r4, r0

   //Format ARP request
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f7ff fde3 	bl	800061c <swapInt16>
 8000a56:	8020      	strh	r0, [r4, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 8000a58:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000a5c:	f7ff fdde 	bl	800061c <swapInt16>
 8000a60:	8060      	strh	r0, [r4, #2]
   arpRequest->hln = sizeof(MacAddr);
 8000a62:	2306      	movs	r3, #6
 8000a64:	7123      	strb	r3, [r4, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 8000a66:	2304      	movs	r3, #4
 8000a68:	7163      	strb	r3, [r4, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 8000a6a:	2001      	movs	r0, #1
 8000a6c:	f7ff fdd6 	bl	800061c <swapInt16>
 8000a70:	80e0      	strh	r0, [r4, #6]
   arpRequest->sha = logicalInterface->macAddr;
 8000a72:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8000a76:	60a0      	str	r0, [r4, #8]
 8000a78:	f8b5 308c 	ldrh.w	r3, [r5, #140]	@ 0x8c
 8000a7c:	81a3      	strh	r3, [r4, #12]
   arpRequest->spa = IPV4_UNSPECIFIED_ADDR;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	73a3      	strb	r3, [r4, #14]
 8000a82:	73e3      	strb	r3, [r4, #15]
 8000a84:	7423      	strb	r3, [r4, #16]
 8000a86:	7463      	strb	r3, [r4, #17]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 8000a88:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <arpSendProbe+0xa8>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	f8c4 2012 	str.w	r2, [r4, #18]
 8000a90:	889b      	ldrh	r3, [r3, #4]
 8000a92:	82e3      	strh	r3, [r4, #22]
   arpRequest->tpa = targetIpAddr;
 8000a94:	61a7      	str	r7, [r4, #24]
   TRACE_INFO("Sending ARP Probe (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpRequest);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8000a96:	ac03      	add	r4, sp, #12
 8000a98:	4d0e      	ldr	r5, [pc, #56]	@ (8000ad4 <arpSendProbe+0xac>)
 8000a9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a9e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aa2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //Send ARP request
   error = ethSendFrame(interface, &MAC_BROADCAST_ADDR, ETH_TYPE_ARP, buffer,
 8000aa6:	ab03      	add	r3, sp, #12
 8000aa8:	9301      	str	r3, [sp, #4]
 8000aaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	4643      	mov	r3, r8
 8000ab0:	f640 0206 	movw	r2, #2054	@ 0x806
 8000ab4:	4908      	ldr	r1, [pc, #32]	@ (8000ad8 <arpSendProbe+0xb0>)
 8000ab6:	4630      	mov	r0, r6
 8000ab8:	f002 fa02 	bl	8002ec0 <ethSendFrame>
 8000abc:	4604      	mov	r4, r0
      offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8000abe:	4640      	mov	r0, r8
 8000ac0:	f00b fb52 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 8000ac4:	4620      	mov	r0, r4
 8000ac6:	b00c      	add	sp, #48	@ 0x30
 8000ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_OUT_OF_MEMORY;
 8000acc:	2464      	movs	r4, #100	@ 0x64
 8000ace:	e7f9      	b.n	8000ac4 <arpSendProbe+0x9c>
 8000ad0:	08019ea0 	.word	0x08019ea0
 8000ad4:	08019fc4 	.word	0x08019fc4
 8000ad8:	08019eb0 	.word	0x08019eb0

08000adc <arpSendRequest>:
 * @return Error code
 **/

error_t arpSendRequest(NetInterface *interface, Ipv4Addr targetIpAddr,
   const MacAddr *destMacAddr)
{
 8000adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ae0:	b08e      	sub	sp, #56	@ 0x38
 8000ae2:	9003      	str	r0, [sp, #12]
 8000ae4:	460d      	mov	r5, r1
 8000ae6:	4616      	mov	r6, r2
   Ipv4Addr senderIpAddr;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8000ae8:	f00c f805 	bl	800caf6 <nicGetLogicalInterface>
 8000aec:	4680      	mov	r8, r0

   //Select the most appropriate sender IP address to be used
   error = ipv4SelectSourceAddr(&interface, targetIpAddr, &senderIpAddr);
 8000aee:	aa0c      	add	r2, sp, #48	@ 0x30
 8000af0:	4629      	mov	r1, r5
 8000af2:	a803      	add	r0, sp, #12
 8000af4:	f005 fc32 	bl	800635c <ipv4SelectSourceAddr>
   //No address assigned to the interface?
   if(error)
 8000af8:	4604      	mov	r4, r0
 8000afa:	b118      	cbz	r0, 8000b04 <arpSendRequest+0x28>
   //Free previously allocated memory
   netBufferFree(buffer);

   //Return status code
   return error;
}
 8000afc:	4620      	mov	r0, r4
 8000afe:	b00e      	add	sp, #56	@ 0x38
 8000b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 8000b04:	a90d      	add	r1, sp, #52	@ 0x34
 8000b06:	201c      	movs	r0, #28
 8000b08:	f002 fac0 	bl	800308c <ethAllocBuffer>
   if(buffer == NULL)
 8000b0c:	4607      	mov	r7, r0
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	d03d      	beq.n	8000b8e <arpSendRequest+0xb2>
   arpRequest = netBufferAt(buffer, offset, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000b16:	f00b fb4f 	bl	800c1b8 <netBufferAt>
 8000b1a:	4604      	mov	r4, r0
   arpRequest->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f7ff fd7d 	bl	800061c <swapInt16>
 8000b22:	8020      	strh	r0, [r4, #0]
   arpRequest->pro = htons(ARP_PROTOCOL_TYPE_IPV4);
 8000b24:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000b28:	f7ff fd78 	bl	800061c <swapInt16>
 8000b2c:	8060      	strh	r0, [r4, #2]
   arpRequest->hln = sizeof(MacAddr);
 8000b2e:	2306      	movs	r3, #6
 8000b30:	7123      	strb	r3, [r4, #4]
   arpRequest->pln = sizeof(Ipv4Addr);
 8000b32:	2304      	movs	r3, #4
 8000b34:	7163      	strb	r3, [r4, #5]
   arpRequest->op = htons(ARP_OPCODE_ARP_REQUEST);
 8000b36:	2001      	movs	r0, #1
 8000b38:	f7ff fd70 	bl	800061c <swapInt16>
 8000b3c:	80e0      	strh	r0, [r4, #6]
   arpRequest->sha = logicalInterface->macAddr;
 8000b3e:	f8d8 0088 	ldr.w	r0, [r8, #136]	@ 0x88
 8000b42:	60a0      	str	r0, [r4, #8]
 8000b44:	f8b8 308c 	ldrh.w	r3, [r8, #140]	@ 0x8c
 8000b48:	81a3      	strh	r3, [r4, #12]
   arpRequest->spa = senderIpAddr;
 8000b4a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000b4c:	f8c4 300e 	str.w	r3, [r4, #14]
   arpRequest->tha = MAC_UNSPECIFIED_ADDR;
 8000b50:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <arpSendRequest+0xb8>)
 8000b52:	681a      	ldr	r2, [r3, #0]
 8000b54:	f8c4 2012 	str.w	r2, [r4, #18]
 8000b58:	889b      	ldrh	r3, [r3, #4]
 8000b5a:	82e3      	strh	r3, [r4, #22]
   arpRequest->tpa = targetIpAddr;
 8000b5c:	61a5      	str	r5, [r4, #24]
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8000b5e:	ac04      	add	r4, sp, #16
 8000b60:	4d0d      	ldr	r5, [pc, #52]	@ (8000b98 <arpSendRequest+0xbc>)
 8000b62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   error = ethSendFrame(interface, destMacAddr, ETH_TYPE_ARP, buffer, offset,
 8000b6e:	ab04      	add	r3, sp, #16
 8000b70:	9301      	str	r3, [sp, #4]
 8000b72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	463b      	mov	r3, r7
 8000b78:	f640 0206 	movw	r2, #2054	@ 0x806
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	9803      	ldr	r0, [sp, #12]
 8000b80:	f002 f99e 	bl	8002ec0 <ethSendFrame>
 8000b84:	4604      	mov	r4, r0
   netBufferFree(buffer);
 8000b86:	4638      	mov	r0, r7
 8000b88:	f00b faee 	bl	800c168 <netBufferFree>
   return error;
 8000b8c:	e7b6      	b.n	8000afc <arpSendRequest+0x20>
      return ERROR_OUT_OF_MEMORY;
 8000b8e:	2464      	movs	r4, #100	@ 0x64
 8000b90:	e7b4      	b.n	8000afc <arpSendRequest+0x20>
 8000b92:	bf00      	nop
 8000b94:	08019ea0 	.word	0x08019ea0
 8000b98:	08019fc4 	.word	0x08019fc4

08000b9c <arpResolve>:
{
 8000b9c:	b570      	push	{r4, r5, r6, lr}
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460d      	mov	r5, r1
 8000ba2:	4614      	mov	r4, r2
   entry = arpFindEntry(interface, ipAddr);
 8000ba4:	f000 fa1a 	bl	8000fdc <arpFindEntry>
   if(entry != NULL)
 8000ba8:	b1c0      	cbz	r0, 8000bdc <arpResolve+0x40>
 8000baa:	4603      	mov	r3, r0
      if(entry->state == ARP_STATE_INCOMPLETE)
 8000bac:	7802      	ldrb	r2, [r0, #0]
 8000bae:	2a01      	cmp	r2, #1
 8000bb0:	d031      	beq.n	8000c16 <arpResolve+0x7a>
      else if(entry->state == ARP_STATE_STALE)
 8000bb2:	2a03      	cmp	r2, #3
 8000bb4:	d005      	beq.n	8000bc2 <arpResolve+0x26>
         *macAddr = entry->macAddr;
 8000bb6:	6880      	ldr	r0, [r0, #8]
 8000bb8:	6020      	str	r0, [r4, #0]
 8000bba:	899b      	ldrh	r3, [r3, #12]
 8000bbc:	80a3      	strh	r3, [r4, #4]
         error = NO_ERROR;
 8000bbe:	2000      	movs	r0, #0
}
 8000bc0:	bd70      	pop	{r4, r5, r6, pc}
         *macAddr = entry->macAddr;
 8000bc2:	6880      	ldr	r0, [r0, #8]
 8000bc4:	6020      	str	r0, [r4, #0]
 8000bc6:	899a      	ldrh	r2, [r3, #12]
 8000bc8:	80a2      	strh	r2, [r4, #4]
         entry->timeout = ARP_DELAY_FIRST_PROBE_TIME;
 8000bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000bce:	615a      	str	r2, [r3, #20]
         arpChangeState(entry, ARP_STATE_DELAY);
 8000bd0:	2104      	movs	r1, #4
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f9fa 	bl	8000fcc <arpChangeState>
         error = NO_ERROR;
 8000bd8:	2000      	movs	r0, #0
 8000bda:	e7f1      	b.n	8000bc0 <arpResolve+0x24>
      if(interface->enableArp)
 8000bdc:	f8d6 334c 	ldr.w	r3, [r6, #844]	@ 0x34c
 8000be0:	b90b      	cbnz	r3, 8000be6 <arpResolve+0x4a>
         error = ERROR_INVALID_ADDRESS;
 8000be2:	20e4      	movs	r0, #228	@ 0xe4
 8000be4:	e7ec      	b.n	8000bc0 <arpResolve+0x24>
         entry = arpCreateEntry(interface);
 8000be6:	4630      	mov	r0, r6
 8000be8:	f000 fa62 	bl	80010b0 <arpCreateEntry>
         if(entry != NULL)
 8000bec:	4604      	mov	r4, r0
 8000bee:	b1a8      	cbz	r0, 8000c1c <arpResolve+0x80>
            entry->ipAddr = ipAddr;
 8000bf0:	6045      	str	r5, [r0, #4]
            entry->retransmitCount = 0;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	6183      	str	r3, [r0, #24]
            entry->queueSize = 0;
 8000bf6:	66c3      	str	r3, [r0, #108]	@ 0x6c
            arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 8000bf8:	4a09      	ldr	r2, [pc, #36]	@ (8000c20 <arpResolve+0x84>)
 8000bfa:	4629      	mov	r1, r5
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	f7ff ff6d 	bl	8000adc <arpSendRequest>
            entry->timeout = ARP_REQUEST_TIMEOUT;
 8000c02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c06:	6163      	str	r3, [r4, #20]
            arpChangeState(entry, ARP_STATE_INCOMPLETE);
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	f000 f9de 	bl	8000fcc <arpChangeState>
            error = ERROR_IN_PROGRESS;
 8000c10:	f240 2003 	movw	r0, #515	@ 0x203
 8000c14:	e7d4      	b.n	8000bc0 <arpResolve+0x24>
         error = ERROR_IN_PROGRESS;
 8000c16:	f240 2003 	movw	r0, #515	@ 0x203
 8000c1a:	e7d1      	b.n	8000bc0 <arpResolve+0x24>
            error = ERROR_OUT_OF_RESOURCES;
 8000c1c:	2065      	movs	r0, #101	@ 0x65
 8000c1e:	e7cf      	b.n	8000bc0 <arpResolve+0x24>
 8000c20:	08019eb0 	.word	0x08019eb0

08000c24 <arpTick>:
{
 8000c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c28:	4606      	mov	r6, r0
   time = osGetSystemTime();
 8000c2a:	f7ff fde7 	bl	80007fc <osGetSystemTime>
 8000c2e:	4607      	mov	r7, r0
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8000c30:	2400      	movs	r4, #0
 8000c32:	e03a      	b.n	8000caa <arpTick+0x86>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8000c34:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000c38:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000c3c:	f8d2 3368 	ldr.w	r3, [r2, #872]	@ 0x368
 8000c40:	f8d2 236c 	ldr.w	r2, [r2, #876]	@ 0x36c
 8000c44:	4413      	add	r3, r2
 8000c46:	1afb      	subs	r3, r7, r3
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	db2d      	blt.n	8000ca8 <arpTick+0x84>
            entry->retransmitCount++;
 8000c4c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000c50:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000c54:	f8d2 3370 	ldr.w	r3, [r2, #880]	@ 0x370
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f8c2 3370 	str.w	r3, [r2, #880]	@ 0x370
            if(entry->retransmitCount < ARP_MAX_REQUESTS)
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d80d      	bhi.n	8000c7e <arpTick+0x5a>
               arpSendRequest(interface, entry->ipAddr, &MAC_BROADCAST_ADDR);
 8000c62:	4615      	mov	r5, r2
 8000c64:	4a54      	ldr	r2, [pc, #336]	@ (8000db8 <arpTick+0x194>)
 8000c66:	f8d5 135c 	ldr.w	r1, [r5, #860]	@ 0x35c
 8000c6a:	4630      	mov	r0, r6
 8000c6c:	f7ff ff36 	bl	8000adc <arpSendRequest>
               entry->timestamp = time;
 8000c70:	f8c5 7368 	str.w	r7, [r5, #872]	@ 0x368
               entry->timeout = ARP_REQUEST_TIMEOUT;
 8000c74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c78:	f8c5 336c 	str.w	r3, [r5, #876]	@ 0x36c
 8000c7c:	e014      	b.n	8000ca8 <arpTick+0x84>
               arpFlushQueuedPackets(interface, entry);
 8000c7e:	4629      	mov	r1, r5
 8000c80:	4630      	mov	r0, r6
 8000c82:	f000 f9ff 	bl	8001084 <arpFlushQueuedPackets>
               arpChangeState(entry, ARP_STATE_NONE);
 8000c86:	2100      	movs	r1, #0
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f000 f99f 	bl	8000fcc <arpChangeState>
 8000c8e:	e00b      	b.n	8000ca8 <arpTick+0x84>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8000c90:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000c94:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000c98:	f8d2 3368 	ldr.w	r3, [r2, #872]	@ 0x368
 8000c9c:	f8d2 236c 	ldr.w	r2, [r2, #876]	@ 0x36c
 8000ca0:	4413      	add	r3, r2
 8000ca2:	1afb      	subs	r3, r7, r3
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da21      	bge.n	8000cec <arpTick+0xc8>
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8000ca8:	3401      	adds	r4, #1
 8000caa:	2c07      	cmp	r4, #7
 8000cac:	f200 8081 	bhi.w	8000db2 <arpTick+0x18e>
      entry = &interface->arpCache[i];
 8000cb0:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
 8000cb4:	0109      	lsls	r1, r1, #4
 8000cb6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8000cba:	1875      	adds	r5, r6, r1
      if(entry->state == ARP_STATE_PERMANENT)
 8000cbc:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
 8000cc0:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8000cc4:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8000cc8:	3b01      	subs	r3, #1
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d86c      	bhi.n	8000da8 <arpTick+0x184>
 8000cce:	a201      	add	r2, pc, #4	@ (adr r2, 8000cd4 <arpTick+0xb0>)
 8000cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cd4:	08000c35 	.word	0x08000c35
 8000cd8:	08000c91 	.word	0x08000c91
 8000cdc:	08000ca9 	.word	0x08000ca9
 8000ce0:	08000cf7 	.word	0x08000cf7
 8000ce4:	08000d45 	.word	0x08000d45
 8000ce8:	08000ca9 	.word	0x08000ca9
            arpChangeState(entry, ARP_STATE_STALE);
 8000cec:	2103      	movs	r1, #3
 8000cee:	4628      	mov	r0, r5
 8000cf0:	f000 f96c 	bl	8000fcc <arpChangeState>
 8000cf4:	e7d8      	b.n	8000ca8 <arpTick+0x84>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8000cf6:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000cfa:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000cfe:	f8d2 3368 	ldr.w	r3, [r2, #872]	@ 0x368
 8000d02:	f8d2 236c 	ldr.w	r2, [r2, #876]	@ 0x36c
 8000d06:	4413      	add	r3, r2
 8000d08:	1afb      	subs	r3, r7, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	dbcc      	blt.n	8000ca8 <arpTick+0x84>
            entry->retransmitCount = 0;
 8000d0e:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
 8000d12:	eb06 1808 	add.w	r8, r6, r8, lsl #4
 8000d16:	2300      	movs	r3, #0
 8000d18:	f8c8 3370 	str.w	r3, [r8, #880]	@ 0x370
            arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 8000d1c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	f502 7258 	add.w	r2, r2, #864	@ 0x360
 8000d26:	4432      	add	r2, r6
 8000d28:	f8d8 135c 	ldr.w	r1, [r8, #860]	@ 0x35c
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	f7ff fed5 	bl	8000adc <arpSendRequest>
            entry->timeout = interface->arpProbeTimeout;
 8000d32:	f8d6 3354 	ldr.w	r3, [r6, #852]	@ 0x354
 8000d36:	f8c8 336c 	str.w	r3, [r8, #876]	@ 0x36c
            arpChangeState(entry, ARP_STATE_PROBE);
 8000d3a:	2105      	movs	r1, #5
 8000d3c:	4628      	mov	r0, r5
 8000d3e:	f000 f945 	bl	8000fcc <arpChangeState>
 8000d42:	e7b1      	b.n	8000ca8 <arpTick+0x84>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8000d44:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000d48:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000d4c:	f8d2 3368 	ldr.w	r3, [r2, #872]	@ 0x368
 8000d50:	f8d2 236c 	ldr.w	r2, [r2, #876]	@ 0x36c
 8000d54:	4413      	add	r3, r2
 8000d56:	1afb      	subs	r3, r7, r3
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dba5      	blt.n	8000ca8 <arpTick+0x84>
            entry->retransmitCount++;
 8000d5c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000d60:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8000d64:	f8d2 3370 	ldr.w	r3, [r2, #880]	@ 0x370
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f8c2 3370 	str.w	r3, [r2, #880]	@ 0x370
            if(entry->retransmitCount < ARP_MAX_PROBES)
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d904      	bls.n	8000d7c <arpTick+0x158>
               arpChangeState(entry, ARP_STATE_NONE);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4628      	mov	r0, r5
 8000d76:	f000 f929 	bl	8000fcc <arpChangeState>
 8000d7a:	e795      	b.n	8000ca8 <arpTick+0x84>
               arpSendRequest(interface, entry->ipAddr, &entry->macAddr);
 8000d7c:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
 8000d80:	0112      	lsls	r2, r2, #4
 8000d82:	f502 7258 	add.w	r2, r2, #864	@ 0x360
 8000d86:	ebc4 05c4 	rsb	r5, r4, r4, lsl #3
 8000d8a:	eb06 1505 	add.w	r5, r6, r5, lsl #4
 8000d8e:	4432      	add	r2, r6
 8000d90:	f8d5 135c 	ldr.w	r1, [r5, #860]	@ 0x35c
 8000d94:	4630      	mov	r0, r6
 8000d96:	f7ff fea1 	bl	8000adc <arpSendRequest>
               entry->timestamp = time;
 8000d9a:	f8c5 7368 	str.w	r7, [r5, #872]	@ 0x368
               entry->timeout = interface->arpProbeTimeout;
 8000d9e:	f8d6 3354 	ldr.w	r3, [r6, #852]	@ 0x354
 8000da2:	f8c5 336c 	str.w	r3, [r5, #876]	@ 0x36c
 8000da6:	e77f      	b.n	8000ca8 <arpTick+0x84>
         arpChangeState(entry, ARP_STATE_NONE);
 8000da8:	2100      	movs	r1, #0
 8000daa:	4628      	mov	r0, r5
 8000dac:	f000 f90e 	bl	8000fcc <arpChangeState>
 8000db0:	e77a      	b.n	8000ca8 <arpTick+0x84>
}
 8000db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db6:	bf00      	nop
 8000db8:	08019eb0 	.word	0x08019eb0

08000dbc <arpSendReply>:
 * @return Error code
 **/

error_t arpSendReply(NetInterface *interface, Ipv4Addr senderIpAddr,
   Ipv4Addr targetIpAddr, const MacAddr *targetMacAddr)
{
 8000dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc0:	b08c      	sub	sp, #48	@ 0x30
 8000dc2:	4607      	mov	r7, r0
 8000dc4:	468a      	mov	sl, r1
 8000dc6:	4690      	mov	r8, r2
 8000dc8:	461e      	mov	r6, r3
   ArpPacket *arpReply;
   NetInterface *logicalInterface;
   NetTxAncillary ancillary;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8000dca:	f00b fe94 	bl	800caf6 <nicGetLogicalInterface>
 8000dce:	4605      	mov	r5, r0

   //Allocate a memory buffer to hold an ARP packet
   buffer = ethAllocBuffer(sizeof(ArpPacket), &offset);
 8000dd0:	a90b      	add	r1, sp, #44	@ 0x2c
 8000dd2:	201c      	movs	r0, #28
 8000dd4:	f002 f95a 	bl	800308c <ethAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d040      	beq.n	8000e5e <arpSendReply+0xa2>
 8000ddc:	4681      	mov	r9, r0
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the ARP packet
   arpReply = netBufferAt(buffer, offset, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8000de2:	f00b f9e9 	bl	800c1b8 <netBufferAt>
 8000de6:	4604      	mov	r4, r0

   //Format ARP reply
   arpReply->hrd = htons(ARP_HARDWARE_TYPE_ETH);
 8000de8:	2001      	movs	r0, #1
 8000dea:	f7ff fc17 	bl	800061c <swapInt16>
 8000dee:	8020      	strh	r0, [r4, #0]
   arpReply->pro = htons(ETH_TYPE_IPV4);
 8000df0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000df4:	f7ff fc12 	bl	800061c <swapInt16>
 8000df8:	8060      	strh	r0, [r4, #2]
   arpReply->hln = sizeof(MacAddr);
 8000dfa:	2306      	movs	r3, #6
 8000dfc:	7123      	strb	r3, [r4, #4]
   arpReply->pln = sizeof(Ipv4Addr);
 8000dfe:	2304      	movs	r3, #4
 8000e00:	7163      	strb	r3, [r4, #5]
   arpReply->op = htons(ARP_OPCODE_ARP_REPLY);
 8000e02:	2002      	movs	r0, #2
 8000e04:	f7ff fc0a 	bl	800061c <swapInt16>
 8000e08:	80e0      	strh	r0, [r4, #6]
   arpReply->sha = logicalInterface->macAddr;
 8000e0a:	f8d5 0088 	ldr.w	r0, [r5, #136]	@ 0x88
 8000e0e:	60a0      	str	r0, [r4, #8]
 8000e10:	f8b5 308c 	ldrh.w	r3, [r5, #140]	@ 0x8c
 8000e14:	81a3      	strh	r3, [r4, #12]
   arpReply->spa = senderIpAddr;
 8000e16:	f8c4 a00e 	str.w	sl, [r4, #14]
   arpReply->tha = *targetMacAddr;
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	f8c4 3012 	str.w	r3, [r4, #18]
 8000e20:	88b3      	ldrh	r3, [r6, #4]
 8000e22:	82e3      	strh	r3, [r4, #22]
   arpReply->tpa = targetIpAddr;
 8000e24:	f8c4 8018 	str.w	r8, [r4, #24]
   TRACE_INFO("Sending ARP Reply (%" PRIuSIZE " bytes)...\r\n", sizeof(ArpPacket));
   //Dump ARP packet contents for debugging purpose
   arpDumpPacket(arpReply);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8000e28:	ac03      	add	r4, sp, #12
 8000e2a:	4d0e      	ldr	r5, [pc, #56]	@ (8000e64 <arpSendReply+0xa8>)
 8000e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000e34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //Send ARP reply
   error = ethSendFrame(interface, targetMacAddr, ETH_TYPE_ARP, buffer, offset,
 8000e38:	ab03      	add	r3, sp, #12
 8000e3a:	9301      	str	r3, [sp, #4]
 8000e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	464b      	mov	r3, r9
 8000e42:	f640 0206 	movw	r2, #2054	@ 0x806
 8000e46:	4631      	mov	r1, r6
 8000e48:	4638      	mov	r0, r7
 8000e4a:	f002 f839 	bl	8002ec0 <ethSendFrame>
 8000e4e:	4604      	mov	r4, r0
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8000e50:	4648      	mov	r0, r9
 8000e52:	f00b f989 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 8000e56:	4620      	mov	r0, r4
 8000e58:	b00c      	add	sp, #48	@ 0x30
 8000e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ERROR_OUT_OF_MEMORY;
 8000e5e:	2464      	movs	r4, #100	@ 0x64
 8000e60:	e7f9      	b.n	8000e56 <arpSendReply+0x9a>
 8000e62:	bf00      	nop
 8000e64:	08019fc4 	.word	0x08019fc4

08000e68 <arpProcessRequest>:
{
 8000e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6a:	4605      	mov	r5, r0
 8000e6c:	460c      	mov	r4, r1
   if(ipv4IsBroadcastAddr(interface, arpRequest->spa) ||
 8000e6e:	f8d1 100e 	ldr.w	r1, [r1, #14]
 8000e72:	f005 f98e 	bl	8006192 <ipv4IsBroadcastAddr>
 8000e76:	b9c0      	cbnz	r0, 8000eaa <arpProcessRequest+0x42>
 8000e78:	4607      	mov	r7, r0
      ipv4IsMulticastAddr(arpRequest->spa))
 8000e7a:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8000e7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
   if(ipv4IsBroadcastAddr(interface, arpRequest->spa) ||
 8000e82:	2be0      	cmp	r3, #224	@ 0xe0
 8000e84:	d011      	beq.n	8000eaa <arpProcessRequest+0x42>
   validTarget = TRUE;
 8000e86:	2201      	movs	r2, #1
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8000e88:	2600      	movs	r6, #0
 8000e8a:	e008      	b.n	8000e9e <arpProcessRequest+0x36>
      if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 8000e8c:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000e90:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000e94:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d007      	beq.n	8000eac <arpProcessRequest+0x44>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8000e9c:	3601      	adds	r6, #1
 8000e9e:	2e00      	cmp	r6, #0
 8000ea0:	d0f4      	beq.n	8000e8c <arpProcessRequest+0x24>
   if(validTarget && interface->enableArp)
 8000ea2:	b112      	cbz	r2, 8000eaa <arpProcessRequest+0x42>
 8000ea4:	f8d5 334c 	ldr.w	r3, [r5, #844]	@ 0x34c
 8000ea8:	bb23      	cbnz	r3, 8000ef4 <arpProcessRequest+0x8c>
}
 8000eaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         if(addrEntry->addr == arpRequest->tpa)
 8000eac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000eb0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000eb4:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
 8000eb8:	69a3      	ldr	r3, [r4, #24]
 8000eba:	4299      	cmp	r1, r3
 8000ebc:	d1ee      	bne.n	8000e9c <arpProcessRequest+0x34>
            if(arpRequest->spa == IPV4_UNSPECIFIED_ADDR)
 8000ebe:	f8d4 300e 	ldr.w	r3, [r4, #14]
 8000ec2:	b10b      	cbz	r3, 8000ec8 <arpProcessRequest+0x60>
            validTarget = FALSE;
 8000ec4:	463a      	mov	r2, r7
 8000ec6:	e7e9      	b.n	8000e9c <arpProcessRequest+0x34>
               logicalInterface = nicGetLogicalInterface(interface);
 8000ec8:	4628      	mov	r0, r5
 8000eca:	f00b fe14 	bl	800caf6 <nicGetLogicalInterface>
               if(!macCompAddr(&arpRequest->sha, &logicalInterface->macAddr))
 8000ece:	2206      	movs	r2, #6
 8000ed0:	f100 0188 	add.w	r1, r0, #136	@ 0x88
 8000ed4:	f104 0008 	add.w	r0, r4, #8
 8000ed8:	f013 feaa 	bl	8014c30 <memcmp>
 8000edc:	4602      	mov	r2, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d0dc      	beq.n	8000e9c <arpProcessRequest+0x34>
                  addrEntry->conflict = TRUE;
 8000ee2:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000ee6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000eea:	2201      	movs	r2, #1
 8000eec:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
            validTarget = FALSE;
 8000ef0:	463a      	mov	r2, r7
 8000ef2:	e7d3      	b.n	8000e9c <arpProcessRequest+0x34>
      arpSendReply(interface, arpRequest->tpa, arpRequest->spa,
 8000ef4:	f104 0308 	add.w	r3, r4, #8
 8000ef8:	f8d4 200e 	ldr.w	r2, [r4, #14]
 8000efc:	69a1      	ldr	r1, [r4, #24]
 8000efe:	4628      	mov	r0, r5
 8000f00:	f7ff ff5c 	bl	8000dbc <arpSendReply>
 8000f04:	e7d1      	b.n	8000eaa <arpProcessRequest+0x42>

08000f06 <arpProcessPacket>:
   if(length < sizeof(ArpPacket))
 8000f06:	2a1b      	cmp	r2, #27
 8000f08:	d95f      	bls.n	8000fca <arpProcessPacket+0xc4>
{
 8000f0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0c:	4605      	mov	r5, r0
 8000f0e:	460c      	mov	r4, r1
   if(arpPacket->hrd != HTONS(ARP_HARDWARE_TYPE_ETH))
 8000f10:	880b      	ldrh	r3, [r1, #0]
 8000f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000f16:	d10c      	bne.n	8000f32 <arpProcessPacket+0x2c>
   if(arpPacket->pro != HTONS(ARP_PROTOCOL_TYPE_IPV4))
 8000f18:	884b      	ldrh	r3, [r1, #2]
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d109      	bne.n	8000f32 <arpProcessPacket+0x2c>
   if(arpPacket->hln != sizeof(MacAddr))
 8000f1e:	790b      	ldrb	r3, [r1, #4]
 8000f20:	2b06      	cmp	r3, #6
 8000f22:	d106      	bne.n	8000f32 <arpProcessPacket+0x2c>
   if(arpPacket->pln != sizeof(Ipv4Addr))
 8000f24:	794b      	ldrb	r3, [r1, #5]
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d103      	bne.n	8000f32 <arpProcessPacket+0x2c>
   validTarget = FALSE;
 8000f2a:	2700      	movs	r7, #0
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8000f2c:	463e      	mov	r6, r7
 8000f2e:	b10e      	cbz	r6, 8000f34 <arpProcessPacket+0x2e>
   if(validTarget)
 8000f30:	bbd7      	cbnz	r7, 8000fa8 <arpProcessPacket+0xa2>
}
 8000f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(addrEntry->state != IPV4_ADDR_STATE_INVALID)
 8000f34:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000f38:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000f3c:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 8000f40:	b193      	cbz	r3, 8000f68 <arpProcessPacket+0x62>
         if(addrEntry->addr == arpPacket->spa)
 8000f42:	eb06 0286 	add.w	r2, r6, r6, lsl #2
 8000f46:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8000f4a:	f8d2 11a0 	ldr.w	r1, [r2, #416]	@ 0x1a0
 8000f4e:	f8d4 200e 	ldr.w	r2, [r4, #14]
 8000f52:	4291      	cmp	r1, r2
 8000f54:	d00a      	beq.n	8000f6c <arpProcessPacket+0x66>
         if(addrEntry->addr == arpPacket->tpa)
 8000f56:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8000f5a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8000f5e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 8000f62:	69a3      	ldr	r3, [r4, #24]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d01d      	beq.n	8000fa4 <arpProcessPacket+0x9e>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8000f68:	3601      	adds	r6, #1
 8000f6a:	e7e0      	b.n	8000f2e <arpProcessPacket+0x28>
            if(addrEntry->state == IPV4_ADDR_STATE_TENTATIVE)
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d012      	beq.n	8000f96 <arpProcessPacket+0x90>
               logicalInterface = nicGetLogicalInterface(interface);
 8000f70:	4628      	mov	r0, r5
 8000f72:	f00b fdc0 	bl	800caf6 <nicGetLogicalInterface>
               if(!macCompAddr(&arpPacket->sha, &logicalInterface->macAddr))
 8000f76:	2206      	movs	r2, #6
 8000f78:	f100 0188 	add.w	r1, r0, #136	@ 0x88
 8000f7c:	f104 0008 	add.w	r0, r4, #8
 8000f80:	f013 fe56 	bl	8014c30 <memcmp>
 8000f84:	2800      	cmp	r0, #0
 8000f86:	d0e6      	beq.n	8000f56 <arpProcessPacket+0x50>
                  addrEntry->conflict = TRUE;
 8000f88:	2314      	movs	r3, #20
 8000f8a:	fb03 5606 	mla	r6, r3, r6, r5
 8000f8e:	2301      	movs	r3, #1
 8000f90:	f8c6 31a8 	str.w	r3, [r6, #424]	@ 0x1a8
                  return;
 8000f94:	e7cd      	b.n	8000f32 <arpProcessPacket+0x2c>
               addrEntry->conflict = TRUE;
 8000f96:	2314      	movs	r3, #20
 8000f98:	fb03 5306 	mla	r3, r3, r6, r5
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
               return;
 8000fa2:	e7c6      	b.n	8000f32 <arpProcessPacket+0x2c>
            validTarget = TRUE;
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	e7df      	b.n	8000f68 <arpProcessPacket+0x62>
      switch(ntohs(arpPacket->op))
 8000fa8:	88e0      	ldrh	r0, [r4, #6]
 8000faa:	f7ff fb37 	bl	800061c <swapInt16>
 8000fae:	2801      	cmp	r0, #1
 8000fb0:	d006      	beq.n	8000fc0 <arpProcessPacket+0xba>
 8000fb2:	2802      	cmp	r0, #2
 8000fb4:	d1bd      	bne.n	8000f32 <arpProcessPacket+0x2c>
         arpProcessReply(interface, arpPacket);
 8000fb6:	4621      	mov	r1, r4
 8000fb8:	4628      	mov	r0, r5
 8000fba:	f7ff fccb 	bl	8000954 <arpProcessReply>
         break;
 8000fbe:	e7b8      	b.n	8000f32 <arpProcessPacket+0x2c>
         arpProcessRequest(interface, arpPacket);
 8000fc0:	4621      	mov	r1, r4
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f7ff ff50 	bl	8000e68 <arpProcessRequest>
         break;
 8000fc8:	e7b3      	b.n	8000f32 <arpProcessPacket+0x2c>
 8000fca:	4770      	bx	lr

08000fcc <arpChangeState>:
 * @param[in] entry Pointer to a ARP cache entry
 * @param[in] newState New state to switch to
 **/

void arpChangeState(ArpCacheEntry *entry, ArpState newState)
{
 8000fcc:	b538      	push	{r3, r4, r5, lr}
 8000fce:	4604      	mov	r4, r0
 8000fd0:	460d      	mov	r5, r1
#if defined(ARP_CHANGE_STATE_HOOK)
   ARP_CHANGE_STATE_HOOK(entry, newState);
#endif

   //Save current time
   entry->timestamp = osGetSystemTime();
 8000fd2:	f7ff fc13 	bl	80007fc <osGetSystemTime>
 8000fd6:	6120      	str	r0, [r4, #16]
   //Switch to the new state
   entry->state = newState;
 8000fd8:	7025      	strb	r5, [r4, #0]
}
 8000fda:	bd38      	pop	{r3, r4, r5, pc}

08000fdc <arpFindEntry>:
 * @return A pointer to the matching ARP entry is returned. NULL is returned
 *   if the specified IPv4 address could not be found in ARP cache
 **/

ArpCacheEntry *arpFindEntry(NetInterface *interface, Ipv4Addr ipAddr)
{
 8000fdc:	4684      	mov	ip, r0
   uint_t i;
   ArpCacheEntry *entry;

   //Loop through ARP cache entries
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 8000fde:	2300      	movs	r3, #0
 8000fe0:	e000      	b.n	8000fe4 <arpFindEntry+0x8>
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	2b07      	cmp	r3, #7
 8000fe6:	d816      	bhi.n	8001016 <arpFindEntry+0x3a>
   {
      //Point to the current entry
      entry = &interface->arpCache[i];
 8000fe8:	ebc3 00c3 	rsb	r0, r3, r3, lsl #3
 8000fec:	0100      	lsls	r0, r0, #4
 8000fee:	f500 7056 	add.w	r0, r0, #856	@ 0x358
 8000ff2:	4460      	add	r0, ip

      //Check whether the entry is currently in use
      if(entry->state != ARP_STATE_NONE)
 8000ff4:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8000ff8:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 8000ffc:	f892 2358 	ldrb.w	r2, [r2, #856]	@ 0x358
 8001000:	2a00      	cmp	r2, #0
 8001002:	d0ee      	beq.n	8000fe2 <arpFindEntry+0x6>
      {
         //Current entry matches the specified address?
         if(entry->ipAddr == ipAddr)
 8001004:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001008:	eb0c 1202 	add.w	r2, ip, r2, lsl #4
 800100c:	f8d2 235c 	ldr.w	r2, [r2, #860]	@ 0x35c
 8001010:	428a      	cmp	r2, r1
 8001012:	d1e6      	bne.n	8000fe2 <arpFindEntry+0x6>
 8001014:	e000      	b.n	8001018 <arpFindEntry+0x3c>
         }
      }
   }

   //No matching entry in ARP cache
   return NULL;
 8001016:	2000      	movs	r0, #0
}
 8001018:	4770      	bx	lr

0800101a <arpSendQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpSendQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 800101a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	460c      	mov	r4, r1
   uint_t i;
   size_t length;
   ArpQueueItem *item;

   //Check the state of the ARP entry
   if(entry->state == ARP_STATE_INCOMPLETE)
 8001022:	780b      	ldrb	r3, [r1, #0]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d02a      	beq.n	800107e <arpSendQueuedPackets+0x64>
         netBufferFree(item->buffer);
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 800102c:	b002      	add	sp, #8
 800102e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         length = netBufferGetLength(item->buffer) - item->offset;
 8001032:	00b5      	lsls	r5, r6, #2
 8001034:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8001038:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
 800103c:	69f8      	ldr	r0, [r7, #28]
 800103e:	f00b f81b 	bl	800c078 <netBufferGetLength>
 8001042:	6a3a      	ldr	r2, [r7, #32]
         ipv4UpdateOutStats(interface, entry->ipAddr, length);
 8001044:	1a82      	subs	r2, r0, r2
 8001046:	6861      	ldr	r1, [r4, #4]
 8001048:	4640      	mov	r0, r8
 800104a:	f005 fa8c 	bl	8006566 <ipv4UpdateOutStats>
         ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV4, item->buffer,
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	19aa      	adds	r2, r5, r6
 8001052:	00d2      	lsls	r2, r2, #3
 8001054:	3220      	adds	r2, #32
 8001056:	4422      	add	r2, r4
 8001058:	3204      	adds	r2, #4
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	6a3a      	ldr	r2, [r7, #32]
 800105e:	9200      	str	r2, [sp, #0]
 8001060:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001064:	f104 0108 	add.w	r1, r4, #8
 8001068:	4640      	mov	r0, r8
 800106a:	f001 ff29 	bl	8002ec0 <ethSendFrame>
         netBufferFree(item->buffer);
 800106e:	69f8      	ldr	r0, [r7, #28]
 8001070:	f00b f87a 	bl	800c168 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 8001074:	3601      	adds	r6, #1
 8001076:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8001078:	42b3      	cmp	r3, r6
 800107a:	d8da      	bhi.n	8001032 <arpSendQueuedPackets+0x18>
 800107c:	e7d4      	b.n	8001028 <arpSendQueuedPackets+0xe>
 800107e:	4680      	mov	r8, r0
 8001080:	2600      	movs	r6, #0
 8001082:	e7f8      	b.n	8001076 <arpSendQueuedPackets+0x5c>

08001084 <arpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a ARP cache entry
 **/

void arpFlushQueuedPackets(NetInterface *interface, ArpCacheEntry *entry)
{
 8001084:	b538      	push	{r3, r4, r5, lr}
 8001086:	460c      	mov	r4, r1
   uint_t i;

   //Check the state of the ARP entry
   if(entry->state == ARP_STATE_INCOMPLETE)
 8001088:	780b      	ldrb	r3, [r1, #0]
 800108a:	2b01      	cmp	r3, #1
 800108c:	d00e      	beq.n	80010ac <arpFlushQueuedPackets+0x28>
         netBufferFree(entry->queue[i].buffer);
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	66e3      	str	r3, [r4, #108]	@ 0x6c
}
 8001092:	bd38      	pop	{r3, r4, r5, pc}
         netBufferFree(entry->queue[i].buffer);
 8001094:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8001098:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 800109c:	69d8      	ldr	r0, [r3, #28]
 800109e:	f00b f863 	bl	800c168 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 80010a2:	3501      	adds	r5, #1
 80010a4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 80010a6:	42ab      	cmp	r3, r5
 80010a8:	d8f4      	bhi.n	8001094 <arpFlushQueuedPackets+0x10>
 80010aa:	e7f0      	b.n	800108e <arpFlushQueuedPackets+0xa>
 80010ac:	2500      	movs	r5, #0
 80010ae:	e7f9      	b.n	80010a4 <arpFlushQueuedPackets+0x20>

080010b0 <arpCreateEntry>:
{
 80010b0:	b570      	push	{r4, r5, r6, lr}
 80010b2:	4605      	mov	r5, r0
   time = osGetSystemTime();
 80010b4:	f7ff fba2 	bl	80007fc <osGetSystemTime>
   oldestEntry = NULL;
 80010b8:	2600      	movs	r6, #0
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 80010ba:	4633      	mov	r3, r6
 80010bc:	e00d      	b.n	80010da <arpCreateEntry+0x2a>
         osMemset(entry, 0, sizeof(ArpCacheEntry));
 80010be:	2270      	movs	r2, #112	@ 0x70
 80010c0:	2100      	movs	r1, #0
 80010c2:	4620      	mov	r0, r4
 80010c4:	f013 fdde 	bl	8014c84 <memset>
         return entry;
 80010c8:	4626      	mov	r6, r4
 80010ca:	e03c      	b.n	8001146 <arpCreateEntry+0x96>
            oldestEntry->state != ARP_STATE_STALE)
 80010cc:	7831      	ldrb	r1, [r6, #0]
         else if(entry->state == ARP_STATE_STALE &&
 80010ce:	2903      	cmp	r1, #3
 80010d0:	d019      	beq.n	8001106 <arpCreateEntry+0x56>
            oldestEntry = entry;
 80010d2:	4626      	mov	r6, r4
 80010d4:	e000      	b.n	80010d8 <arpCreateEntry+0x28>
            oldestEntry = entry;
 80010d6:	4626      	mov	r6, r4
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 80010d8:	3301      	adds	r3, #1
 80010da:	2b07      	cmp	r3, #7
 80010dc:	d825      	bhi.n	800112a <arpCreateEntry+0x7a>
      entry = &interface->arpCache[i];
 80010de:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 80010e8:	18ac      	adds	r4, r5, r2
      if(entry->state == ARP_STATE_NONE)
 80010ea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 80010ee:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 80010f2:	f892 2358 	ldrb.w	r2, [r2, #856]	@ 0x358
 80010f6:	2a00      	cmp	r2, #0
 80010f8:	d0e1      	beq.n	80010be <arpCreateEntry+0xe>
      else if(entry->state == ARP_STATE_PERMANENT)
 80010fa:	2a06      	cmp	r2, #6
 80010fc:	d0ec      	beq.n	80010d8 <arpCreateEntry+0x28>
         if(oldestEntry == NULL)
 80010fe:	2e00      	cmp	r6, #0
 8001100:	d0e9      	beq.n	80010d6 <arpCreateEntry+0x26>
         else if(entry->state == ARP_STATE_STALE &&
 8001102:	2a03      	cmp	r2, #3
 8001104:	d0e2      	beq.n	80010cc <arpCreateEntry+0x1c>
         else if(entry->state != ARP_STATE_STALE &&
 8001106:	2a03      	cmp	r2, #3
 8001108:	d002      	beq.n	8001110 <arpCreateEntry+0x60>
            oldestEntry->state == ARP_STATE_STALE)
 800110a:	7832      	ldrb	r2, [r6, #0]
         else if(entry->state != ARP_STATE_STALE &&
 800110c:	2a03      	cmp	r2, #3
 800110e:	d0e3      	beq.n	80010d8 <arpCreateEntry+0x28>
         else if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 8001110:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 8001114:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8001118:	f8d2 1368 	ldr.w	r1, [r2, #872]	@ 0x368
 800111c:	1a41      	subs	r1, r0, r1
 800111e:	6932      	ldr	r2, [r6, #16]
 8001120:	1a82      	subs	r2, r0, r2
 8001122:	4291      	cmp	r1, r2
 8001124:	d9d8      	bls.n	80010d8 <arpCreateEntry+0x28>
            oldestEntry = entry;
 8001126:	4626      	mov	r6, r4
 8001128:	e7d6      	b.n	80010d8 <arpCreateEntry+0x28>
   if(oldestEntry != NULL)
 800112a:	b166      	cbz	r6, 8001146 <arpCreateEntry+0x96>
      arpFlushQueuedPackets(interface, oldestEntry);
 800112c:	4631      	mov	r1, r6
 800112e:	4628      	mov	r0, r5
 8001130:	f7ff ffa8 	bl	8001084 <arpFlushQueuedPackets>
      arpChangeState(oldestEntry, ARP_STATE_NONE);
 8001134:	2100      	movs	r1, #0
 8001136:	4630      	mov	r0, r6
 8001138:	f7ff ff48 	bl	8000fcc <arpChangeState>
      osMemset(oldestEntry, 0, sizeof(ArpCacheEntry));
 800113c:	2270      	movs	r2, #112	@ 0x70
 800113e:	2100      	movs	r1, #0
 8001140:	4630      	mov	r0, r6
 8001142:	f013 fd9f 	bl	8014c84 <memset>
}
 8001146:	4630      	mov	r0, r6
 8001148:	bd70      	pop	{r4, r5, r6, pc}

0800114a <arpFlushCache>:
{
 800114a:	b570      	push	{r4, r5, r6, lr}
 800114c:	4606      	mov	r6, r0
   for(i = 0; i < ARP_CACHE_SIZE; i++)
 800114e:	2500      	movs	r5, #0
 8001150:	e000      	b.n	8001154 <arpFlushCache+0xa>
 8001152:	3501      	adds	r5, #1
 8001154:	2d07      	cmp	r5, #7
 8001156:	d816      	bhi.n	8001186 <arpFlushCache+0x3c>
      entry = &interface->arpCache[i];
 8001158:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 800115c:	0109      	lsls	r1, r1, #4
 800115e:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8001162:	1874      	adds	r4, r6, r1
      if(entry->state == ARP_STATE_PERMANENT)
 8001164:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 8001168:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800116c:	f893 3358 	ldrb.w	r3, [r3, #856]	@ 0x358
 8001170:	2b06      	cmp	r3, #6
 8001172:	d0ee      	beq.n	8001152 <arpFlushCache+0x8>
         arpFlushQueuedPackets(interface, entry);
 8001174:	4621      	mov	r1, r4
 8001176:	4630      	mov	r0, r6
 8001178:	f7ff ff84 	bl	8001084 <arpFlushQueuedPackets>
         arpChangeState(entry, ARP_STATE_NONE);
 800117c:	2100      	movs	r1, #0
 800117e:	4620      	mov	r0, r4
 8001180:	f7ff ff24 	bl	8000fcc <arpChangeState>
 8001184:	e7e5      	b.n	8001152 <arpFlushCache+0x8>
}
 8001186:	bd70      	pop	{r4, r5, r6, pc}

08001188 <dhcpClientGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains DHCP client settings
 **/

void dhcpClientGetDefaultSettings(DhcpClientSettings *settings)
{
 8001188:	b510      	push	{r4, lr}
 800118a:	4604      	mov	r4, r0
   //Use default interface
   settings->interface = netGetDefaultInterface();
 800118c:	f00a fe64 	bl	800be58 <netGetDefaultInterface>
 8001190:	6020      	str	r0, [r4, #0]
   //Index of the IP address to be configured
   settings->ipAddrIndex = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	6063      	str	r3, [r4, #4]

   //Support for quick configuration using rapid commit
   settings->rapidCommit = FALSE;
 8001196:	60a3      	str	r3, [r4, #8]
   //Use the DNS servers provided by the DHCP server
   settings->manualDnsConfig = FALSE;
 8001198:	60e3      	str	r3, [r4, #12]
   //DHCP configuration timeout
   settings->timeout = 0;
 800119a:	6123      	str	r3, [r4, #16]

   //DHCP configuration timeout event
   settings->timeoutEvent = NULL;
 800119c:	6163      	str	r3, [r4, #20]
   //Link state change event
   settings->linkChangeEvent = NULL;
 800119e:	61a3      	str	r3, [r4, #24]
   //FSM state change event
   settings->stateChangeEvent = NULL;
 80011a0:	61e3      	str	r3, [r4, #28]

   //Add DHCP options callback
   settings->addOptionsCallback = NULL;
 80011a2:	6223      	str	r3, [r4, #32]
   //Parse DHCP options callback
   settings->parseOptionsCallback = NULL;
 80011a4:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80011a6:	bd10      	pop	{r4, pc}

080011a8 <dhcpClientInit>:
 * @return Error code
 **/

error_t dhcpClientInit(DhcpClientContext *context,
   const DhcpClientSettings *settings)
{
 80011a8:	b570      	push	{r4, r5, r6, lr}
 80011aa:	4605      	mov	r5, r0
 80011ac:	460c      	mov	r4, r1
   NetInterface *interface;

   //Debug message
   TRACE_INFO("Initializing DHCP client...\r\n");
 80011ae:	f7ff fabf 	bl	8000730 <osSuspendAllTasks>
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <dhcpClientInit+0x60>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	221d      	movs	r2, #29
 80011ba:	2101      	movs	r1, #1
 80011bc:	4813      	ldr	r0, [pc, #76]	@ (800120c <dhcpClientInit+0x64>)
 80011be:	f013 fc6d 	bl	8014a9c <fwrite>
 80011c2:	f7ff fabe 	bl	8000742 <osResumeAllTasks>

   //Ensure the parameters are valid
   if(context == NULL || settings == NULL)
 80011c6:	2c00      	cmp	r4, #0
 80011c8:	bf18      	it	ne
 80011ca:	2d00      	cmpne	r5, #0
 80011cc:	d018      	beq.n	8001200 <dhcpClientInit+0x58>
      return ERROR_INVALID_PARAMETER;

   //The DHCP client must be bound to a valid interface
   if(settings->interface == NULL)
 80011ce:	6826      	ldr	r6, [r4, #0]
 80011d0:	b1c6      	cbz	r6, 8001204 <dhcpClientInit+0x5c>

   //Point to the underlying network interface
   interface = settings->interface;

   //Clear the DHCP client context
   osMemset(context, 0, sizeof(DhcpClientContext));
 80011d2:	2264      	movs	r2, #100	@ 0x64
 80011d4:	2100      	movs	r1, #0
 80011d6:	4628      	mov	r0, r5
 80011d8:	f013 fd54 	bl	8014c84 <memset>
   //Save user settings
   context->settings = *settings;
 80011dc:	46ae      	mov	lr, r5
 80011de:	46a4      	mov	ip, r4
 80011e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011e4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011e8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80011ec:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80011f0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80011f4:	e88e 0003 	stmia.w	lr, {r0, r1}
   context->running = FALSE;
   //Initialize state machine
   context->state = DHCP_STATE_INIT;

   //Attach the DHCP client context to the network interface
   interface->dhcpClientContext = context;
 80011f8:	f8c6 57a0 	str.w	r5, [r6, #1952]	@ 0x7a0

   //Successful initialization
   return NO_ERROR;
 80011fc:	2000      	movs	r0, #0
}
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 8001200:	2002      	movs	r0, #2
 8001202:	e7fc      	b.n	80011fe <dhcpClientInit+0x56>
      return ERROR_INVALID_PARAMETER;
 8001204:	2002      	movs	r0, #2
 8001206:	e7fa      	b.n	80011fe <dhcpClientInit+0x56>
 8001208:	20000440 	.word	0x20000440
 800120c:	0801a0c8 	.word	0x0801a0c8

08001210 <dhcpClientStart>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientStart(DhcpClientContext *context)
{
 8001210:	b538      	push	{r3, r4, r5, lr}
   error_t error;
   NetInterface *interface;

   //Make sure the DHCP client context is valid
   if(context == NULL)
 8001212:	b358      	cbz	r0, 800126c <dhcpClientStart+0x5c>
 8001214:	4604      	mov	r4, r0
      return ERROR_INVALID_PARAMETER;

   //Debug message
   TRACE_INFO("Starting DHCP client...\r\n");
 8001216:	f7ff fa8b 	bl	8000730 <osSuspendAllTasks>
 800121a:	4b15      	ldr	r3, [pc, #84]	@ (8001270 <dhcpClientStart+0x60>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2219      	movs	r2, #25
 8001222:	2101      	movs	r1, #1
 8001224:	4813      	ldr	r0, [pc, #76]	@ (8001274 <dhcpClientStart+0x64>)
 8001226:	f013 fc39 	bl	8014a9c <fwrite>
 800122a:	f7ff fa8a 	bl	8000742 <osResumeAllTasks>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800122e:	4812      	ldr	r0, [pc, #72]	@ (8001278 <dhcpClientStart+0x68>)
 8001230:	f7ff fad5 	bl	80007de <osAcquireMutex>

   //Point to the underlying network interface
   interface = context->settings.interface;
 8001234:	6825      	ldr	r5, [r4, #0]

   //Check the operational state of the DHCP client
   if(!context->running)
 8001236:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001238:	b133      	cbz	r3, 8001248 <dhcpClientStart+0x38>
      }
   }
   else
   {
      //The DHCP client is already running
      error = ERROR_ALREADY_RUNNING;
 800123a:	f240 2545 	movw	r5, #581	@ 0x245
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800123e:	480e      	ldr	r0, [pc, #56]	@ (8001278 <dhcpClientStart+0x68>)
 8001240:	f7ff fad4 	bl	80007ec <osReleaseMutex>

   //Return status code
   return error;
}
 8001244:	4628      	mov	r0, r5
 8001246:	bd38      	pop	{r3, r4, r5, pc}
      dhcpClientResetConfig(context);
 8001248:	4620      	mov	r0, r4
 800124a:	f000 fe81 	bl	8001f50 <dhcpClientResetConfig>
      context->state = DHCP_STATE_INIT;
 800124e:	2300      	movs	r3, #0
 8001250:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
      error = udpAttachRxCallback(interface, DHCP_CLIENT_PORT,
 8001254:	4623      	mov	r3, r4
 8001256:	4a09      	ldr	r2, [pc, #36]	@ (800127c <dhcpClientStart+0x6c>)
 8001258:	2144      	movs	r1, #68	@ 0x44
 800125a:	4628      	mov	r0, r5
 800125c:	f00f fcec 	bl	8010c38 <udpAttachRxCallback>
      if(!error)
 8001260:	4605      	mov	r5, r0
 8001262:	2800      	cmp	r0, #0
 8001264:	d1eb      	bne.n	800123e <dhcpClientStart+0x2e>
         context->running = TRUE;
 8001266:	2301      	movs	r3, #1
 8001268:	62a3      	str	r3, [r4, #40]	@ 0x28
 800126a:	e7e8      	b.n	800123e <dhcpClientStart+0x2e>
      return ERROR_INVALID_PARAMETER;
 800126c:	2502      	movs	r5, #2
 800126e:	e7e9      	b.n	8001244 <dhcpClientStart+0x34>
 8001270:	20000440 	.word	0x20000440
 8001274:	0801a0e8 	.word	0x0801a0e8
 8001278:	20000b50 	.word	0x20000b50
 800127c:	08002089 	.word	0x08002089

08001280 <dhcpClientStateInit>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInit(DhcpClientContext *context)
{
 8001280:	b538      	push	{r3, r4, r5, lr}
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8001282:	6802      	ldr	r2, [r0, #0]

   //Check whether the DHCP client is running
   if(context->running)
 8001284:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001286:	b113      	cbz	r3, 800128e <dhcpClientStateInit+0xe>
 8001288:	4604      	mov	r4, r0
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 800128a:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800128c:	b903      	cbnz	r3, 8001290 <dhcpClientStateInit+0x10>

         //Switch to the SELECTING state
         dhcpClientChangeState(context, DHCP_STATE_SELECTING, delay);
      }
   }
}
 800128e:	bd38      	pop	{r3, r4, r5, pc}
         delay = netGenerateRandRange(0, DHCP_CLIENT_INIT_DELAY);
 8001290:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8001294:	2000      	movs	r0, #0
 8001296:	f00b fc1d 	bl	800cad4 <netGenerateRandRange>
 800129a:	4605      	mov	r5, r0
         context->configStartTime = osGetSystemTime();
 800129c:	f7ff faae 	bl	80007fc <osGetSystemTime>
 80012a0:	6520      	str	r0, [r4, #80]	@ 0x50
         context->timeoutEventDone = FALSE;
 80012a2:	2300      	movs	r3, #0
 80012a4:	6323      	str	r3, [r4, #48]	@ 0x30
         dhcpClientChangeState(context, DHCP_STATE_SELECTING, delay);
 80012a6:	462a      	mov	r2, r5
 80012a8:	2101      	movs	r1, #1
 80012aa:	4620      	mov	r0, r4
 80012ac:	f000 fc74 	bl	8001b98 <dhcpClientChangeState>
}
 80012b0:	e7ed      	b.n	800128e <dhcpClientStateInit+0xe>

080012b2 <dhcpClientStateSelecting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateSelecting(DhcpClientContext *context)
{
 80012b2:	b538      	push	{r3, r4, r5, lr}
 80012b4:	4604      	mov	r4, r0
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 80012b6:	f7ff faa1 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 80012ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80012bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80012be:	4413      	add	r3, r2
 80012c0:	1ac3      	subs	r3, r0, r3
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	db17      	blt.n	80012f6 <dhcpClientStateSelecting+0x44>
 80012c6:	4605      	mov	r5, r0
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 80012c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012ca:	b9c3      	cbnz	r3, 80012fe <dhcpClientStateSelecting+0x4c>
      {
         //The client generates and records a random transaction identifier
         //(refer to RFC 2131, section 4.4.1)
         context->transactionId = netGenerateRand();
 80012cc:	f00b fbee 	bl	800caac <netGenerateRand>
 80012d0:	64e0      	str	r0, [r4, #76]	@ 0x4c

         //Send a DHCPDISCOVER message
         dhcpClientSendDiscover(context);
 80012d2:	4620      	mov	r0, r4
 80012d4:	f000 fad8 	bl	8001888 <dhcpClientSendDiscover>

         //Initial timeout value
         context->retransmitTimeout = DHCP_CLIENT_DISCOVER_INIT_RT;
 80012d8:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 80012dc:	63e3      	str	r3, [r4, #60]	@ 0x3c
            context->retransmitTimeout = DHCP_CLIENT_DISCOVER_MAX_RT;
         }
      }

      //Save the time at which the message was sent
      context->timestamp = time;
 80012de:	6365      	str	r5, [r4, #52]	@ 0x34

      //The timeout value should be randomized by the value of a uniform
      //number chosen from the range -1 to +1
      context->timeout = netGenerateRandRange(
         context->retransmitTimeout - DHCP_CLIENT_RAND_FACTOR,
 80012e0:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
      context->timeout = netGenerateRandRange(
 80012e2:	f500 717a 	add.w	r1, r0, #1000	@ 0x3e8
 80012e6:	f5a0 707a 	sub.w	r0, r0, #1000	@ 0x3e8
 80012ea:	f00b fbf3 	bl	800cad4 <netGenerateRandRange>
 80012ee:	63a0      	str	r0, [r4, #56]	@ 0x38
         context->retransmitTimeout + DHCP_CLIENT_RAND_FACTOR);

      //Increment retransmission counter
      context->retransmitCount++;
 80012f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012f2:	3301      	adds	r3, #1
 80012f4:	6423      	str	r3, [r4, #64]	@ 0x40
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 80012f6:	4620      	mov	r0, r4
 80012f8:	f000 fa90 	bl	800181c <dhcpClientCheckTimeout>
}
 80012fc:	bd38      	pop	{r3, r4, r5, pc}
         dhcpClientSendDiscover(context);
 80012fe:	4620      	mov	r0, r4
 8001300:	f000 fac2 	bl	8001888 <dhcpClientSendDiscover>
         context->retransmitTimeout *= 2;
 8001304:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	63e3      	str	r3, [r4, #60]	@ 0x3c
         if(context->retransmitTimeout > DHCP_CLIENT_DISCOVER_MAX_RT)
 800130a:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800130e:	d9e6      	bls.n	80012de <dhcpClientStateSelecting+0x2c>
            context->retransmitTimeout = DHCP_CLIENT_DISCOVER_MAX_RT;
 8001310:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 8001314:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001316:	e7e2      	b.n	80012de <dhcpClientStateSelecting+0x2c>

08001318 <dhcpClientStateRequesting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRequesting(DhcpClientContext *context)
{
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4604      	mov	r4, r0
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 800131c:	f7ff fa6e 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8001320:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001322:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001324:	4413      	add	r3, r2
 8001326:	1ac3      	subs	r3, r0, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	db1c      	blt.n	8001366 <dhcpClientStateRequesting+0x4e>
 800132c:	4605      	mov	r5, r0
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 800132e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001330:	b1eb      	cbz	r3, 800136e <dhcpClientStateRequesting+0x56>
            context->retransmitTimeout + DHCP_CLIENT_RAND_FACTOR);

         //Increment retransmission counter
         context->retransmitCount++;
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 8001332:	2b03      	cmp	r3, #3
 8001334:	d82d      	bhi.n	8001392 <dhcpClientStateRequesting+0x7a>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 8001336:	4620      	mov	r0, r4
 8001338:	f000 fb46 	bl	80019c8 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 800133c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	63e3      	str	r3, [r4, #60]	@ 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 8001342:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 8001346:	d902      	bls.n	800134e <dhcpClientStateRequesting+0x36>
         {
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8001348:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 800134c:	63e3      	str	r3, [r4, #60]	@ 0x3c
         }

         //Save the time at which the message was sent
         context->timestamp = time;
 800134e:	6365      	str	r5, [r4, #52]	@ 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = netGenerateRandRange(
            context->retransmitTimeout - DHCP_CLIENT_RAND_FACTOR,
 8001350:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
         context->timeout = netGenerateRandRange(
 8001352:	f500 717a 	add.w	r1, r0, #1000	@ 0x3e8
 8001356:	f5a0 707a 	sub.w	r0, r0, #1000	@ 0x3e8
 800135a:	f00b fbbb 	bl	800cad4 <netGenerateRandRange>
 800135e:	63a0      	str	r0, [r4, #56]	@ 0x38
            context->retransmitTimeout + DHCP_CLIENT_RAND_FACTOR);

         //Increment retransmission counter
         context->retransmitCount++;
 8001360:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001362:	3301      	adds	r3, #1
 8001364:	6423      	str	r3, [r4, #64]	@ 0x40
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 8001366:	4620      	mov	r0, r4
 8001368:	f000 fa58 	bl	800181c <dhcpClientCheckTimeout>
}
 800136c:	bd38      	pop	{r3, r4, r5, pc}
         dhcpClientSendRequest(context);
 800136e:	4620      	mov	r0, r4
 8001370:	f000 fb2a 	bl	80019c8 <dhcpClientSendRequest>
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8001374:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001378:	63e3      	str	r3, [r4, #60]	@ 0x3c
         context->timestamp = time;
 800137a:	6365      	str	r5, [r4, #52]	@ 0x34
         context->timeout = netGenerateRandRange(
 800137c:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001380:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001384:	f00b fba6 	bl	800cad4 <netGenerateRandRange>
 8001388:	63a0      	str	r0, [r4, #56]	@ 0x38
         context->retransmitCount++;
 800138a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800138c:	3301      	adds	r3, #1
 800138e:	6423      	str	r3, [r4, #64]	@ 0x40
 8001390:	e7e9      	b.n	8001366 <dhcpClientStateRequesting+0x4e>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	4611      	mov	r1, r2
 8001396:	4620      	mov	r0, r4
 8001398:	f000 fbfe 	bl	8001b98 <dhcpClientChangeState>
 800139c:	e7e3      	b.n	8001366 <dhcpClientStateRequesting+0x4e>

0800139e <dhcpClientStateInitReboot>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateInitReboot(DhcpClientContext *context)
{
 800139e:	b538      	push	{r3, r4, r5, lr}
   systime_t delay;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80013a0:	6802      	ldr	r2, [r0, #0]

   //Check whether the DHCP client is running
   if(context->running)
 80013a2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80013a4:	b113      	cbz	r3, 80013ac <dhcpClientStateInitReboot+0xe>
 80013a6:	4604      	mov	r4, r0
   {
      //Wait for the link to be up before starting DHCP configuration
      if(interface->linkState)
 80013a8:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80013aa:	b903      	cbnz	r3, 80013ae <dhcpClientStateInitReboot+0x10>

         //Switch to the REBOOTING state
         dhcpClientChangeState(context, DHCP_STATE_REBOOTING, delay);
      }
   }
}
 80013ac:	bd38      	pop	{r3, r4, r5, pc}
         delay = netGenerateRandRange(0, DHCP_CLIENT_INIT_DELAY);
 80013ae:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 80013b2:	2000      	movs	r0, #0
 80013b4:	f00b fb8e 	bl	800cad4 <netGenerateRandRange>
 80013b8:	4605      	mov	r5, r0
         context->configStartTime = osGetSystemTime();
 80013ba:	f7ff fa1f 	bl	80007fc <osGetSystemTime>
 80013be:	6520      	str	r0, [r4, #80]	@ 0x50
         context->timeoutEventDone = FALSE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	6323      	str	r3, [r4, #48]	@ 0x30
         dhcpClientChangeState(context, DHCP_STATE_REBOOTING, delay);
 80013c4:	462a      	mov	r2, r5
 80013c6:	2104      	movs	r1, #4
 80013c8:	4620      	mov	r0, r4
 80013ca:	f000 fbe5 	bl	8001b98 <dhcpClientChangeState>
}
 80013ce:	e7ed      	b.n	80013ac <dhcpClientStateInitReboot+0xe>

080013d0 <dhcpClientStateRebooting>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebooting(DhcpClientContext *context)
{
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4604      	mov	r4, r0
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 80013d4:	f7ff fa12 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 80013d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80013da:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80013dc:	4413      	add	r3, r2
 80013de:	1ac3      	subs	r3, r0, r3
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db1c      	blt.n	800141e <dhcpClientStateRebooting+0x4e>
 80013e4:	4605      	mov	r5, r0
   {
      //Check retransmission counter
      if(context->retransmitCount == 0)
 80013e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013e8:	b1eb      	cbz	r3, 8001426 <dhcpClientStateRebooting+0x56>
            context->retransmitTimeout + DHCP_CLIENT_RAND_FACTOR);

         //Increment retransmission counter
         context->retransmitCount++;
      }
      else if(context->retransmitCount < DHCP_CLIENT_REQUEST_MAX_RC)
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d830      	bhi.n	8001450 <dhcpClientStateRebooting+0x80>
      {
         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 faea 	bl	80019c8 <dhcpClientSendRequest>

         //The timeout value is doubled for each subsequent retransmission
         context->retransmitTimeout *= 2;
 80013f4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	63e3      	str	r3, [r4, #60]	@ 0x3c

         //Limit the timeout value to a maximum of 64 seconds
         if(context->retransmitTimeout > DHCP_CLIENT_REQUEST_MAX_RT)
 80013fa:	f5b3 4f7a 	cmp.w	r3, #64000	@ 0xfa00
 80013fe:	d902      	bls.n	8001406 <dhcpClientStateRebooting+0x36>
         {
            context->retransmitTimeout = DHCP_CLIENT_REQUEST_MAX_RT;
 8001400:	f44f 437a 	mov.w	r3, #64000	@ 0xfa00
 8001404:	63e3      	str	r3, [r4, #60]	@ 0x3c
         }

         //Save the time at which the message was sent
         context->timestamp = time;
 8001406:	6365      	str	r5, [r4, #52]	@ 0x34

         //The timeout value should be randomized by the value of a uniform
         //number chosen from the range -1 to +1
         context->timeout = netGenerateRandRange(
            context->retransmitTimeout - DHCP_CLIENT_RAND_FACTOR,
 8001408:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
         context->timeout = netGenerateRandRange(
 800140a:	f500 717a 	add.w	r1, r0, #1000	@ 0x3e8
 800140e:	f5a0 707a 	sub.w	r0, r0, #1000	@ 0x3e8
 8001412:	f00b fb5f 	bl	800cad4 <netGenerateRandRange>
 8001416:	63a0      	str	r0, [r4, #56]	@ 0x38
            context->retransmitTimeout + DHCP_CLIENT_RAND_FACTOR);

         //Increment retransmission counter
         context->retransmitCount++;
 8001418:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800141a:	3301      	adds	r3, #1
 800141c:	6423      	str	r3, [r4, #64]	@ 0x40
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }

   //Manage DHCP configuration timeout
   dhcpClientCheckTimeout(context);
 800141e:	4620      	mov	r0, r4
 8001420:	f000 f9fc 	bl	800181c <dhcpClientCheckTimeout>
}
 8001424:	bd38      	pop	{r3, r4, r5, pc}
         context->transactionId = netGenerateRand();
 8001426:	f00b fb41 	bl	800caac <netGenerateRand>
 800142a:	64e0      	str	r0, [r4, #76]	@ 0x4c
         dhcpClientSendRequest(context);
 800142c:	4620      	mov	r0, r4
 800142e:	f000 facb 	bl	80019c8 <dhcpClientSendRequest>
         context->retransmitTimeout = DHCP_CLIENT_REQUEST_INIT_RT;
 8001432:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8001436:	63e3      	str	r3, [r4, #60]	@ 0x3c
         context->timestamp = time;
 8001438:	6365      	str	r5, [r4, #52]	@ 0x34
         context->timeout = netGenerateRandRange(
 800143a:	f241 3188 	movw	r1, #5000	@ 0x1388
 800143e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001442:	f00b fb47 	bl	800cad4 <netGenerateRandRange>
 8001446:	63a0      	str	r0, [r4, #56]	@ 0x38
         context->retransmitCount++;
 8001448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800144a:	3301      	adds	r3, #1
 800144c:	6423      	str	r3, [r4, #64]	@ 0x40
 800144e:	e7e6      	b.n	800141e <dhcpClientStateRebooting+0x4e>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8001450:	2200      	movs	r2, #0
 8001452:	4611      	mov	r1, r2
 8001454:	4620      	mov	r0, r4
 8001456:	f000 fb9f 	bl	8001b98 <dhcpClientChangeState>
 800145a:	e7e0      	b.n	800141e <dhcpClientStateRebooting+0x4e>

0800145c <dhcpClientStateProbing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateProbing(DhcpClientContext *context)
{
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	4604      	mov	r4, r0
   uint_t i;
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8001460:	6807      	ldr	r7, [r0, #0]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8001462:	6846      	ldr	r6, [r0, #4]

   //Get current time
   time = osGetSystemTime();
 8001464:	f7ff f9ca 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8001468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800146a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800146c:	4413      	add	r3, r2
 800146e:	1ac3      	subs	r3, r0, r3
 8001470:	2b00      	cmp	r3, #0
 8001472:	db19      	blt.n	80014a8 <dhcpClientStateProbing+0x4c>
 8001474:	4605      	mov	r5, r0
   {
      //The address is already in use?
      if(interface->ipv4Context.addrList[i].conflict)
 8001476:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 800147a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800147e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 8001482:	b993      	cbnz	r3, 80014aa <dhcpClientStateProbing+0x4e>
         //restarting the configuration process to avoid excessive
         //network traffic in case of looping
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
      //Probing is on-going?
      else if(context->retransmitCount < DHCP_CLIENT_PROBE_NUM)
 8001484:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001486:	b9e3      	cbnz	r3, 80014c2 <dhcpClientStateProbing+0x66>
      {
         //Conflict detection is done using ARP probes
         arpSendProbe(interface, interface->ipv4Context.addrList[i].addr);
 8001488:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800148c:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8001490:	f8d6 11a0 	ldr.w	r1, [r6, #416]	@ 0x1a0
 8001494:	4638      	mov	r0, r7
 8001496:	f7ff fac7 	bl	8000a28 <arpSendProbe>

         //Save the time at which the packet was sent
         context->timestamp = time;
 800149a:	6365      	str	r5, [r4, #52]	@ 0x34
         //Delay until repeated probe
         context->timeout = DHCP_CLIENT_PROBE_DELAY;
 800149c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014a0:	63a3      	str	r3, [r4, #56]	@ 0x38
         //Increment retransmission counter
         context->retransmitCount++;
 80014a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014a4:	3301      	adds	r3, #1
 80014a6:	6423      	str	r3, [r4, #64]	@ 0x40

         //The client transitions to the ANNOUNCING state
         dhcpClientChangeState(context, DHCP_STATE_ANNOUNCING, 0);
      }
   }
}
 80014a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         context->transactionId = netGenerateRand();
 80014aa:	f00b faff 	bl	800caac <netGenerateRand>
 80014ae:	64e0      	str	r0, [r4, #76]	@ 0x4c
         dhcpClientSendDecline(context);
 80014b0:	4620      	mov	r0, r4
 80014b2:	f000 f911 	bl	80016d8 <dhcpClientSendDecline>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	4611      	mov	r1, r2
 80014ba:	4620      	mov	r0, r4
 80014bc:	f000 fb6c 	bl	8001b98 <dhcpClientChangeState>
 80014c0:	e7f2      	b.n	80014a8 <dhcpClientStateProbing+0x4c>
         interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 80014c2:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 80014c6:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 80014ca:	2302      	movs	r3, #2
 80014cc:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
         dhcpClientChangeState(context, DHCP_STATE_ANNOUNCING, 0);
 80014d0:	2200      	movs	r2, #0
 80014d2:	2106      	movs	r1, #6
 80014d4:	4620      	mov	r0, r4
 80014d6:	f000 fb5f 	bl	8001b98 <dhcpClientChangeState>
}
 80014da:	e7e5      	b.n	80014a8 <dhcpClientStateProbing+0x4c>

080014dc <dhcpClientStateAnnouncing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateAnnouncing(DhcpClientContext *context)
{
 80014dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014de:	4604      	mov	r4, r0
   uint_t i;
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 80014e0:	6807      	ldr	r7, [r0, #0]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 80014e2:	6846      	ldr	r6, [r0, #4]

   //Get current time
   time = osGetSystemTime();
 80014e4:	f7ff f98a 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 80014e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80014ea:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80014ec:	4413      	add	r3, r2
 80014ee:	1ac3      	subs	r3, r0, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db04      	blt.n	80014fe <dhcpClientStateAnnouncing+0x22>
 80014f4:	4605      	mov	r5, r0
   {
      //Announcement is on-going?
      if(context->retransmitCount < DHCP_CLIENT_ANNOUNCE_NUM)
 80014f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014f8:	b113      	cbz	r3, 8001500 <dhcpClientStateAnnouncing+0x24>
         //Increment retransmission counter
         context->retransmitCount++;
      }

      //Announcing is complete?
      if(context->retransmitCount >= DHCP_CLIENT_ANNOUNCE_NUM)
 80014fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80014fc:	b993      	cbnz	r3, 8001524 <dhcpClientStateAnnouncing+0x48>

         //The client transitions to the BOUND state
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
      }
   }
}
 80014fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         arpSendRequest(interface, interface->ipv4Context.addrList[i].addr,
 8001500:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8001504:	eb07 0686 	add.w	r6, r7, r6, lsl #2
 8001508:	4a0b      	ldr	r2, [pc, #44]	@ (8001538 <dhcpClientStateAnnouncing+0x5c>)
 800150a:	f8d6 11a0 	ldr.w	r1, [r6, #416]	@ 0x1a0
 800150e:	4638      	mov	r0, r7
 8001510:	f7ff fae4 	bl	8000adc <arpSendRequest>
         context->timestamp = time;
 8001514:	6365      	str	r5, [r4, #52]	@ 0x34
         context->timeout = DHCP_CLIENT_ANNOUNCE_INTERVAL;
 8001516:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151a:	63a3      	str	r3, [r4, #56]	@ 0x38
         context->retransmitCount++;
 800151c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800151e:	3301      	adds	r3, #1
 8001520:	6423      	str	r3, [r4, #64]	@ 0x40
 8001522:	e7ea      	b.n	80014fa <dhcpClientStateAnnouncing+0x1e>
         dhcpClientDumpConfig(context);
 8001524:	4620      	mov	r0, r4
 8001526:	f000 fdf7 	bl	8002118 <dhcpClientDumpConfig>
         dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2107      	movs	r1, #7
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fb32 	bl	8001b98 <dhcpClientChangeState>
}
 8001534:	e7e3      	b.n	80014fe <dhcpClientStateAnnouncing+0x22>
 8001536:	bf00      	nop
 8001538:	08019eb0 	.word	0x08019eb0

0800153c <dhcpClientStateBound>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateBound(DhcpClientContext *context)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	4604      	mov	r4, r0
   systime_t t1;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8001540:	f7ff f95c 	bl	80007fc <osGetSystemTime>

   //A client will never attempt to extend the lifetime of the address when
   //T1 set to 0xFFFFFFFF
   if(context->t1 != DHCP_INFINITE_TIME)
 8001544:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001546:	f1b3 3fff 	cmp.w	r3, #4294967295
 800154a:	d00b      	beq.n	8001564 <dhcpClientStateBound+0x28>
   {
      //Convert T1 to milliseconds
      if(context->t1 < (MAX_DELAY / 1000))
 800154c:	4a0b      	ldr	r2, [pc, #44]	@ (800157c <dhcpClientStateBound+0x40>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d809      	bhi.n	8001566 <dhcpClientStateBound+0x2a>
      {
         t1 = context->t1 * 1000;
 8001552:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001556:	fb02 f303 	mul.w	r3, r2, r3
      {
         t1 = MAX_DELAY;
      }

      //Check the time elapsed since the lease was obtained
      if(timeCompare(time, context->leaseStartTime + t1) >= 0)
 800155a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800155c:	441a      	add	r2, r3
 800155e:	1a82      	subs	r2, r0, r2
 8001560:	2a00      	cmp	r2, #0
 8001562:	da03      	bge.n	800156c <dhcpClientStateBound+0x30>

         //Enter the RENEWING state
         dhcpClientChangeState(context, DHCP_STATE_RENEWING, 0);
      }
   }
}
 8001564:	bd10      	pop	{r4, pc}
         t1 = MAX_DELAY;
 8001566:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800156a:	e7f6      	b.n	800155a <dhcpClientStateBound+0x1e>
         context->configStartTime = time;
 800156c:	6520      	str	r0, [r4, #80]	@ 0x50
         dhcpClientChangeState(context, DHCP_STATE_RENEWING, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2108      	movs	r1, #8
 8001572:	4620      	mov	r0, r4
 8001574:	f000 fb10 	bl	8001b98 <dhcpClientChangeState>
}
 8001578:	e7f4      	b.n	8001564 <dhcpClientStateBound+0x28>
 800157a:	bf00      	nop
 800157c:	0020c49a 	.word	0x0020c49a

08001580 <dhcpClientStateRenewing>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRenewing(DhcpClientContext *context)
{
 8001580:	b570      	push	{r4, r5, r6, lr}
 8001582:	4604      	mov	r4, r0
   systime_t t2;
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8001584:	f7ff f93a 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8001588:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800158a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800158c:	4413      	add	r3, r2
 800158e:	1ac3      	subs	r3, r0, r3
 8001590:	2b00      	cmp	r3, #0
 8001592:	db1f      	blt.n	80015d4 <dhcpClientStateRenewing+0x54>
 8001594:	4605      	mov	r5, r0
   {
      //Convert T2 to milliseconds
      if(context->t2 < (MAX_DELAY / 1000))
 8001596:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8001598:	4b15      	ldr	r3, [pc, #84]	@ (80015f0 <dhcpClientStateRenewing+0x70>)
 800159a:	429e      	cmp	r6, r3
 800159c:	d81b      	bhi.n	80015d6 <dhcpClientStateRenewing+0x56>
      {
         t2 = context->t2 * 1000;
 800159e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a2:	fb03 f606 	mul.w	r6, r3, r6
      {
         t2 = MAX_DELAY;
      }

      //Check whether T2 timer has expired
      if(timeCompare(time, context->leaseStartTime + t2) < 0)
 80015a6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80015a8:	4433      	add	r3, r6
 80015aa:	1aeb      	subs	r3, r5, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	da19      	bge.n	80015e4 <dhcpClientStateRenewing+0x64>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 80015b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015b2:	b19b      	cbz	r3, 80015dc <dhcpClientStateRenewing+0x5c>
            //DHCP messages with pending requests
            context->transactionId = netGenerateRand();
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 80015b4:	4620      	mov	r0, r4
 80015b6:	f000 fa07 	bl	80019c8 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 80015ba:	6365      	str	r5, [r4, #52]	@ 0x34

         //Compute the remaining time until T2 expires
         context->timeout = context->leaseStartTime + t2 - time;
 80015bc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80015be:	4433      	add	r3, r6
 80015c0:	1b5b      	subs	r3, r3, r5
 80015c2:	63a3      	str	r3, [r4, #56]	@ 0x38

         //The client should wait one-half of the remaining time until T2, down to
         //a minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 80015c4:	4a0b      	ldr	r2, [pc, #44]	@ (80015f4 <dhcpClientStateRenewing+0x74>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d901      	bls.n	80015ce <dhcpClientStateRenewing+0x4e>
         {
            context->timeout /= 2;
 80015ca:	085b      	lsrs	r3, r3, #1
 80015cc:	63a3      	str	r3, [r4, #56]	@ 0x38
         }

         //Increment retransmission counter
         context->retransmitCount++;
 80015ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015d0:	3301      	adds	r3, #1
 80015d2:	6423      	str	r3, [r4, #64]	@ 0x40
      {
         //If no DHCPACK arrives before time T2, the client moves to REBINDING
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
      }
   }
}
 80015d4:	bd70      	pop	{r4, r5, r6, pc}
         t2 = MAX_DELAY;
 80015d6:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 80015da:	e7e4      	b.n	80015a6 <dhcpClientStateRenewing+0x26>
            context->transactionId = netGenerateRand();
 80015dc:	f00b fa66 	bl	800caac <netGenerateRand>
 80015e0:	64e0      	str	r0, [r4, #76]	@ 0x4c
 80015e2:	e7e7      	b.n	80015b4 <dhcpClientStateRenewing+0x34>
         dhcpClientChangeState(context, DHCP_STATE_REBINDING, 0);
 80015e4:	2200      	movs	r2, #0
 80015e6:	2109      	movs	r1, #9
 80015e8:	4620      	mov	r0, r4
 80015ea:	f000 fad5 	bl	8001b98 <dhcpClientChangeState>
}
 80015ee:	e7f1      	b.n	80015d4 <dhcpClientStateRenewing+0x54>
 80015f0:	0020c49a 	.word	0x0020c49a
 80015f4:	0001d4c0 	.word	0x0001d4c0

080015f8 <dhcpClientStateRebinding>:
 *
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientStateRebinding(DhcpClientContext *context)
{
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4604      	mov	r4, r0
   //Point to the underlying network interface
   interface = context->settings.interface;
#endif

   //Get current time
   time = osGetSystemTime();
 80015fc:	f7ff f8fe 	bl	80007fc <osGetSystemTime>

   //Check current time
   if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 8001600:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001602:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8001604:	4413      	add	r3, r2
 8001606:	1ac3      	subs	r3, r0, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	db1f      	blt.n	800164c <dhcpClientStateRebinding+0x54>
 800160c:	4605      	mov	r5, r0
   {
      //Convert the lease time to milliseconds
      if(context->leaseTime < (MAX_DELAY / 1000))
 800160e:	6da6      	ldr	r6, [r4, #88]	@ 0x58
 8001610:	4b17      	ldr	r3, [pc, #92]	@ (8001670 <dhcpClientStateRebinding+0x78>)
 8001612:	429e      	cmp	r6, r3
 8001614:	d81b      	bhi.n	800164e <dhcpClientStateRebinding+0x56>
      {
         leaseTime = context->leaseTime * 1000;
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	fb03 f606 	mul.w	r6, r3, r6
      {
         leaseTime = MAX_DELAY;
      }

      //Check whether the lease has expired
      if(timeCompare(time, context->leaseStartTime + leaseTime) < 0)
 800161e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001620:	4433      	add	r3, r6
 8001622:	1aeb      	subs	r3, r5, r3
 8001624:	2b00      	cmp	r3, #0
 8001626:	da19      	bge.n	800165c <dhcpClientStateRebinding+0x64>
      {
         //First DHCPREQUEST message?
         if(context->retransmitCount == 0)
 8001628:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800162a:	b19b      	cbz	r3, 8001654 <dhcpClientStateRebinding+0x5c>
            //DHCP messages with pending requests
            context->transactionId = netGenerateRand();
         }

         //Send a DHCPREQUEST message
         dhcpClientSendRequest(context);
 800162c:	4620      	mov	r0, r4
 800162e:	f000 f9cb 	bl	80019c8 <dhcpClientSendRequest>

         //Save the time at which the message was sent
         context->timestamp = time;
 8001632:	6365      	str	r5, [r4, #52]	@ 0x34

         //Compute the remaining time until the lease expires
         context->timeout = context->leaseStartTime + leaseTime - time;
 8001634:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001636:	4433      	add	r3, r6
 8001638:	1b5b      	subs	r3, r3, r5
 800163a:	63a3      	str	r3, [r4, #56]	@ 0x38

         //The client should wait one-half of the remaining lease time, down to a
         //minimum of 60 seconds, before retransmitting the DHCPREQUEST message
         if(context->timeout > (2 * DHCP_CLIENT_REQUEST_MIN_DELAY))
 800163c:	4a0d      	ldr	r2, [pc, #52]	@ (8001674 <dhcpClientStateRebinding+0x7c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d901      	bls.n	8001646 <dhcpClientStateRebinding+0x4e>
         {
            context->timeout /= 2;
 8001642:	085b      	lsrs	r3, r3, #1
 8001644:	63a3      	str	r3, [r4, #56]	@ 0x38
         }

         //Increment retransmission counter
         context->retransmitCount++;
 8001646:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001648:	3301      	adds	r3, #1
 800164a:	6423      	str	r3, [r4, #64]	@ 0x40
         //If the lease expires before the client receives a DHCPACK, the client
         //moves to INIT state
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
      }
   }
}
 800164c:	bd70      	pop	{r4, r5, r6, pc}
         leaseTime = MAX_DELAY;
 800164e:	f06f 4600 	mvn.w	r6, #2147483648	@ 0x80000000
 8001652:	e7e4      	b.n	800161e <dhcpClientStateRebinding+0x26>
            context->transactionId = netGenerateRand();
 8001654:	f00b fa2a 	bl	800caac <netGenerateRand>
 8001658:	64e0      	str	r0, [r4, #76]	@ 0x4c
 800165a:	e7e7      	b.n	800162c <dhcpClientStateRebinding+0x34>
         dhcpClientResetConfig(context);
 800165c:	4620      	mov	r0, r4
 800165e:	f000 fc77 	bl	8001f50 <dhcpClientResetConfig>
         dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 8001662:	2200      	movs	r2, #0
 8001664:	4611      	mov	r1, r2
 8001666:	4620      	mov	r0, r4
 8001668:	f000 fa96 	bl	8001b98 <dhcpClientChangeState>
}
 800166c:	e7ee      	b.n	800164c <dhcpClientStateRebinding+0x54>
 800166e:	bf00      	nop
 8001670:	0020c49a 	.word	0x0020c49a
 8001674:	0001d4c0 	.word	0x0001d4c0

08001678 <dhcpClientTick>:
 **/

void dhcpClientTick(DhcpClientContext *context)
{
   //Make sure the DHCP client has been properly instantiated
   if(context != NULL)
 8001678:	b368      	cbz	r0, 80016d6 <dhcpClientTick+0x5e>
{
 800167a:	b508      	push	{r3, lr}
   {
      //DHCP client finite state machine
      switch(context->state)
 800167c:	f890 202c 	ldrb.w	r2, [r0, #44]	@ 0x2c
 8001680:	2a09      	cmp	r2, #9
 8001682:	d824      	bhi.n	80016ce <dhcpClientTick+0x56>
 8001684:	e8df f002 	tbb	[pc, r2]
 8001688:	0e0b0805 	.word	0x0e0b0805
 800168c:	1a171411 	.word	0x1a171411
 8001690:	201d      	.short	0x201d
      //INIT state?
      case DHCP_STATE_INIT:
         //This is the initialization state, where a client begins the process
         //of acquiring a lease. It also returns here when a lease ends, or
         //when a lease negotiation fails
         dhcpClientStateInit(context);
 8001692:	f7ff fdf5 	bl	8001280 <dhcpClientStateInit>
         //Switch to the default state
         context->state = DHCP_STATE_INIT;
         break;
      }
   }
}
 8001696:	bd08      	pop	{r3, pc}
         dhcpClientStateSelecting(context);
 8001698:	f7ff fe0b 	bl	80012b2 <dhcpClientStateSelecting>
         break;
 800169c:	e7fb      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateRequesting(context);
 800169e:	f7ff fe3b 	bl	8001318 <dhcpClientStateRequesting>
         break;
 80016a2:	e7f8      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateInitReboot(context);
 80016a4:	f7ff fe7b 	bl	800139e <dhcpClientStateInitReboot>
         break;
 80016a8:	e7f5      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateRebooting(context);
 80016aa:	f7ff fe91 	bl	80013d0 <dhcpClientStateRebooting>
         break;
 80016ae:	e7f2      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateProbing(context);
 80016b0:	f7ff fed4 	bl	800145c <dhcpClientStateProbing>
         break;
 80016b4:	e7ef      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateAnnouncing(context);
 80016b6:	f7ff ff11 	bl	80014dc <dhcpClientStateAnnouncing>
         break;
 80016ba:	e7ec      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateBound(context);
 80016bc:	f7ff ff3e 	bl	800153c <dhcpClientStateBound>
         break;
 80016c0:	e7e9      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateRenewing(context);
 80016c2:	f7ff ff5d 	bl	8001580 <dhcpClientStateRenewing>
         break;
 80016c6:	e7e6      	b.n	8001696 <dhcpClientTick+0x1e>
         dhcpClientStateRebinding(context);
 80016c8:	f7ff ff96 	bl	80015f8 <dhcpClientStateRebinding>
         break;
 80016cc:	e7e3      	b.n	8001696 <dhcpClientTick+0x1e>
         context->state = DHCP_STATE_INIT;
 80016ce:	2200      	movs	r2, #0
 80016d0:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
}
 80016d4:	e7df      	b.n	8001696 <dhcpClientTick+0x1e>
 80016d6:	4770      	bx	lr

080016d8 <dhcpClientSendDecline>:
 * @param[in] context Pointer to the DHCP client context
 * @return Error code
 **/

error_t dhcpClientSendDecline(DhcpClientContext *context)
{
 80016d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016dc:	b09b      	sub	sp, #108	@ 0x6c
 80016de:	4605      	mov	r5, r0
   IpAddr srcIpAddr;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //DHCP message type
   const uint8_t type = DHCP_MSG_TYPE_DECLINE;
 80016e0:	2304      	movs	r3, #4
 80016e2:	f88d 3017 	strb.w	r3, [sp, #23]

   //Point to the underlying network interface
   interface = context->settings.interface;
 80016e6:	f8d0 8000 	ldr.w	r8, [r0]
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 80016ea:	4640      	mov	r0, r8
 80016ec:	f00b fa03 	bl	800caf6 <nicGetLogicalInterface>
 80016f0:	4606      	mov	r6, r0

   //Allocate a memory buffer to hold the DHCP message
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 80016f2:	a919      	add	r1, sp, #100	@ 0x64
 80016f4:	f44f 7009 	mov.w	r0, #548	@ 0x224
 80016f8:	f00f f96c 	bl	80109d4 <udpAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 80016fc:	2800      	cmp	r0, #0
 80016fe:	f000 8089 	beq.w	8001814 <dhcpClientSendDecline+0x13c>
 8001702:	4607      	mov	r7, r0
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the DHCP message
   message = netBufferAt(buffer, offset, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8001708:	f00a fd56 	bl	800c1b8 <netBufferAt>
 800170c:	4604      	mov	r4, r0

   //Clear memory buffer contents
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 800170e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001712:	2100      	movs	r1, #0
 8001714:	f013 fab6 	bl	8014c84 <memset>

   //Format DHCPDECLINE message
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8001718:	f04f 0901 	mov.w	r9, #1
 800171c:	f884 9000 	strb.w	r9, [r4]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8001720:	f884 9001 	strb.w	r9, [r4, #1]
   message->hlen = sizeof(MacAddr);
 8001724:	2306      	movs	r3, #6
 8001726:	70a3      	strb	r3, [r4, #2]
   message->xid = htonl(context->transactionId);
 8001728:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800172a:	f7fe ff7a 	bl	8000622 <swapInt32>
 800172e:	6060      	str	r0, [r4, #4]
   message->secs = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	7223      	strb	r3, [r4, #8]
 8001734:	7263      	strb	r3, [r4, #9]
   message->flags = 0;
 8001736:	72a3      	strb	r3, [r4, #10]
 8001738:	72e3      	strb	r3, [r4, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 800173a:	7323      	strb	r3, [r4, #12]
 800173c:	7363      	strb	r3, [r4, #13]
 800173e:	73a3      	strb	r3, [r4, #14]
 8001740:	73e3      	strb	r3, [r4, #15]
   message->chaddr = logicalInterface->macAddr;
 8001742:	f8d6 0088 	ldr.w	r0, [r6, #136]	@ 0x88
 8001746:	61e0      	str	r0, [r4, #28]
 8001748:	f8b6 308c 	ldrh.w	r3, [r6, #140]	@ 0x8c
 800174c:	8423      	strh	r3, [r4, #32]

   //Write magic cookie before setting any option
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 800174e:	2363      	movs	r3, #99	@ 0x63
 8001750:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8001754:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8001758:	f884 20ed 	strb.w	r2, [r4, #237]	@ 0xed
 800175c:	2253      	movs	r2, #83	@ 0x53
 800175e:	f884 20ee 	strb.w	r2, [r4, #238]	@ 0xee
 8001762:	f884 30ef 	strb.w	r3, [r4, #239]	@ 0xef
   //Properly terminate the options field
   message->options[0] = DHCP_OPT_END;
 8001766:	23ff      	movs	r3, #255	@ 0xff
 8001768:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0

   //Total length of the DHCP message
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 800176c:	23f1      	movs	r3, #241	@ 0xf1
 800176e:	9318      	str	r3, [sp, #96]	@ 0x60

   //DHCP Message Type option
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8001770:	f8cd 9000 	str.w	r9, [sp]
 8001774:	f10d 0317 	add.w	r3, sp, #23
 8001778:	2235      	movs	r2, #53	@ 0x35
 800177a:	a918      	add	r1, sp, #96	@ 0x60
 800177c:	4620      	mov	r0, r4
 800177e:	f000 fd97 	bl	80022b0 <dhcpAddOption>
      &type, sizeof(type));

   //Server Identifier option
   dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 8001782:	2604      	movs	r6, #4
 8001784:	9600      	str	r6, [sp, #0]
 8001786:	f105 0344 	add.w	r3, r5, #68	@ 0x44
 800178a:	2236      	movs	r2, #54	@ 0x36
 800178c:	a918      	add	r1, sp, #96	@ 0x60
 800178e:	4620      	mov	r0, r4
 8001790:	f000 fd8e 	bl	80022b0 <dhcpAddOption>
      &context->serverIpAddr, sizeof(Ipv4Addr));

   //Requested IP Address option
   dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 8001794:	9600      	str	r6, [sp, #0]
 8001796:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 800179a:	2232      	movs	r2, #50	@ 0x32
 800179c:	a918      	add	r1, sp, #96	@ 0x60
 800179e:	4620      	mov	r0, r4
 80017a0:	f000 fd86 	bl	80022b0 <dhcpAddOption>
      &context->requestedIpAddr, sizeof(Ipv4Addr));

   //Any registered callback?
   if(context->settings.addOptionsCallback != NULL)
 80017a4:	6a2e      	ldr	r6, [r5, #32]
 80017a6:	b126      	cbz	r6, 80017b2 <dhcpClientSendDecline+0xda>
   {
      //Invoke user callback function
      context->settings.addOptionsCallback(context, message, &length,
 80017a8:	2304      	movs	r3, #4
 80017aa:	aa18      	add	r2, sp, #96	@ 0x60
 80017ac:	4621      	mov	r1, r4
 80017ae:	4628      	mov	r0, r5
 80017b0:	47b0      	blx	r6
         DHCP_MSG_TYPE_DECLINE);
   }

   //The minimum length of BOOTP frames is 300 octets (refer to RFC 951,
   //section 3)
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 80017b2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80017b4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017b8:	bf38      	it	cc
 80017ba:	f44f 7396 	movcc.w	r3, #300	@ 0x12c
 80017be:	9318      	str	r3, [sp, #96]	@ 0x60

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 80017c0:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80017c2:	4419      	add	r1, r3
 80017c4:	4638      	mov	r0, r7
 80017c6:	f00a fc64 	bl	800c092 <netBufferSetLength>

   //Use the unspecified address as source address
   srcIpAddr.length = sizeof(Ipv4Addr);
 80017ca:	2304      	movs	r3, #4
 80017cc:	9313      	str	r3, [sp, #76]	@ 0x4c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 80017ce:	2200      	movs	r2, #0
 80017d0:	9214      	str	r2, [sp, #80]	@ 0x50

   //Set destination IP address
   destIpAddr.length = sizeof(Ipv4Addr);
 80017d2:	930e      	str	r3, [sp, #56]	@ 0x38
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
 80017d8:	930f      	str	r3, [sp, #60]	@ 0x3c

   //Dump the contents of the message for debugging purpose
   dhcpDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80017da:	ac06      	add	r4, sp, #24
 80017dc:	4d0e      	ldr	r5, [pc, #56]	@ (8001818 <dhcpClientSendDecline+0x140>)
 80017de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80017e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //Broadcast DHCPDECLINE message
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 80017ea:	ab06      	add	r3, sp, #24
 80017ec:	9303      	str	r3, [sp, #12]
 80017ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	9701      	str	r7, [sp, #4]
 80017f4:	2343      	movs	r3, #67	@ 0x43
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	ab0e      	add	r3, sp, #56	@ 0x38
 80017fa:	2244      	movs	r2, #68	@ 0x44
 80017fc:	a913      	add	r1, sp, #76	@ 0x4c
 80017fe:	4640      	mov	r0, r8
 8001800:	f00f f818 	bl	8010834 <udpSendBuffer>
 8001804:	4604      	mov	r4, r0
      DHCP_SERVER_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 8001806:	4638      	mov	r0, r7
 8001808:	f00a fcae 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 800180c:	4620      	mov	r0, r4
 800180e:	b01b      	add	sp, #108	@ 0x6c
 8001810:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return ERROR_OUT_OF_MEMORY;
 8001814:	2464      	movs	r4, #100	@ 0x64
 8001816:	e7f9      	b.n	800180c <dhcpClientSendDecline+0x134>
 8001818:	08019fc4 	.word	0x08019fc4

0800181c <dhcpClientCheckTimeout>:
 * @brief Manage DHCP configuration timeout
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientCheckTimeout(DhcpClientContext *context)
{
 800181c:	b570      	push	{r4, r5, r6, lr}
 800181e:	4604      	mov	r4, r0
   systime_t time;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8001820:	6805      	ldr	r5, [r0, #0]

   //Get current time
   time = osGetSystemTime();
 8001822:	f7fe ffeb 	bl	80007fc <osGetSystemTime>

   //Any registered callback?
   if(context->settings.timeoutEvent != NULL)
 8001826:	6963      	ldr	r3, [r4, #20]
 8001828:	b13b      	cbz	r3, 800183a <dhcpClientCheckTimeout+0x1e>
   {
      //DHCP configuration timeout?
      if(timeCompare(time, context->configStartTime + context->settings.timeout) >= 0)
 800182a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800182c:	6922      	ldr	r2, [r4, #16]
 800182e:	4413      	add	r3, r2
 8001830:	1ac0      	subs	r0, r0, r3
 8001832:	2800      	cmp	r0, #0
 8001834:	db01      	blt.n	800183a <dhcpClientCheckTimeout+0x1e>
      {
         //Ensure the callback function is only called once
         if(!context->timeoutEventDone)
 8001836:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001838:	b103      	cbz	r3, 800183c <dhcpClientCheckTimeout+0x20>
            //Set flag
            context->timeoutEventDone = TRUE;
         }
      }
   }
}
 800183a:	bd70      	pop	{r4, r5, r6, pc}
            osReleaseMutex(&netMutex);
 800183c:	4e06      	ldr	r6, [pc, #24]	@ (8001858 <dhcpClientCheckTimeout+0x3c>)
 800183e:	4630      	mov	r0, r6
 8001840:	f7fe ffd4 	bl	80007ec <osReleaseMutex>
            context->settings.timeoutEvent(context, interface);
 8001844:	6963      	ldr	r3, [r4, #20]
 8001846:	4629      	mov	r1, r5
 8001848:	4620      	mov	r0, r4
 800184a:	4798      	blx	r3
            osAcquireMutex(&netMutex);
 800184c:	4630      	mov	r0, r6
 800184e:	f7fe ffc6 	bl	80007de <osAcquireMutex>
            context->timeoutEventDone = TRUE;
 8001852:	2301      	movs	r3, #1
 8001854:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8001856:	e7f0      	b.n	800183a <dhcpClientCheckTimeout+0x1e>
 8001858:	20000b50 	.word	0x20000b50

0800185c <dhcpClientComputeElapsedTime>:
 * @param[in] context Pointer to the DHCP client context
 * @return The elapsed time expressed in seconds
 **/

uint16_t dhcpClientComputeElapsedTime(DhcpClientContext *context)
{
 800185c:	b510      	push	{r4, lr}
 800185e:	4604      	mov	r4, r0
   systime_t time;

   //Compute the time elapsed since the DHCP configuration process started
   time = (osGetSystemTime() - context->configStartTime) / 1000;
 8001860:	f7fe ffcc 	bl	80007fc <osGetSystemTime>
 8001864:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001866:	1ac0      	subs	r0, r0, r3
 8001868:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <dhcpClientComputeElapsedTime+0x28>)
 800186a:	fba3 3000 	umull	r3, r0, r3, r0
 800186e:	0980      	lsrs	r0, r0, #6

   //The value 0xFFFF is used to represent any elapsed time values
   //greater than the largest time value that can be represented
   time = MIN(time, 0xFFFF);
 8001870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001874:	4298      	cmp	r0, r3
 8001876:	bf28      	it	cs
 8001878:	4618      	movcs	r0, r3

   //Convert the 16-bit value to network byte order
   return htons(time);
 800187a:	b280      	uxth	r0, r0
 800187c:	f7fe fece 	bl	800061c <swapInt16>
}
 8001880:	bd10      	pop	{r4, pc}
 8001882:	bf00      	nop
 8001884:	10624dd3 	.word	0x10624dd3

08001888 <dhcpClientSendDiscover>:
{
 8001888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800188c:	b09b      	sub	sp, #108	@ 0x6c
 800188e:	4605      	mov	r5, r0
   const uint8_t type = DHCP_MSG_TYPE_DISCOVER;
 8001890:	2301      	movs	r3, #1
 8001892:	f88d 3017 	strb.w	r3, [sp, #23]
   interface = context->settings.interface;
 8001896:	f8d0 8000 	ldr.w	r8, [r0]
   logicalInterface = nicGetLogicalInterface(interface);
 800189a:	4640      	mov	r0, r8
 800189c:	f00b f92b 	bl	800caf6 <nicGetLogicalInterface>
 80018a0:	4606      	mov	r6, r0
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 80018a2:	a919      	add	r1, sp, #100	@ 0x64
 80018a4:	f44f 7009 	mov.w	r0, #548	@ 0x224
 80018a8:	f00f f894 	bl	80109d4 <udpAllocBuffer>
   if(buffer == NULL)
 80018ac:	2800      	cmp	r0, #0
 80018ae:	f000 8087 	beq.w	80019c0 <dhcpClientSendDiscover+0x138>
 80018b2:	4607      	mov	r7, r0
   message = netBufferAt(buffer, offset, 0);
 80018b4:	2200      	movs	r2, #0
 80018b6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80018b8:	f00a fc7e 	bl	800c1b8 <netBufferAt>
 80018bc:	4604      	mov	r4, r0
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 80018be:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80018c2:	2100      	movs	r1, #0
 80018c4:	f013 f9de 	bl	8014c84 <memset>
   message->op = DHCP_OPCODE_BOOTREQUEST;
 80018c8:	f04f 0901 	mov.w	r9, #1
 80018cc:	f884 9000 	strb.w	r9, [r4]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 80018d0:	f884 9001 	strb.w	r9, [r4, #1]
   message->hlen = sizeof(MacAddr);
 80018d4:	2306      	movs	r3, #6
 80018d6:	70a3      	strb	r3, [r4, #2]
   message->xid = htonl(context->transactionId);
 80018d8:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 80018da:	f7fe fea2 	bl	8000622 <swapInt32>
 80018de:	6060      	str	r0, [r4, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 80018e0:	4628      	mov	r0, r5
 80018e2:	f7ff ffbb 	bl	800185c <dhcpClientComputeElapsedTime>
 80018e6:	8120      	strh	r0, [r4, #8]
   message->flags = HTONS(DHCP_FLAG_BROADCAST);
 80018e8:	2300      	movs	r3, #0
 80018ea:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 80018ee:	72a2      	strb	r2, [r4, #10]
 80018f0:	72e3      	strb	r3, [r4, #11]
   message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 80018f2:	7323      	strb	r3, [r4, #12]
 80018f4:	7363      	strb	r3, [r4, #13]
 80018f6:	73a3      	strb	r3, [r4, #14]
 80018f8:	73e3      	strb	r3, [r4, #15]
   message->chaddr = logicalInterface->macAddr;
 80018fa:	f8d6 0088 	ldr.w	r0, [r6, #136]	@ 0x88
 80018fe:	61e0      	str	r0, [r4, #28]
 8001900:	f8b6 308c 	ldrh.w	r3, [r6, #140]	@ 0x8c
 8001904:	8423      	strh	r3, [r4, #32]
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8001906:	2363      	movs	r3, #99	@ 0x63
 8001908:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 800190c:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8001910:	f884 20ed 	strb.w	r2, [r4, #237]	@ 0xed
 8001914:	2253      	movs	r2, #83	@ 0x53
 8001916:	f884 20ee 	strb.w	r2, [r4, #238]	@ 0xee
 800191a:	f884 30ef 	strb.w	r3, [r4, #239]	@ 0xef
   message->options[0] = DHCP_OPT_END;
 800191e:	23ff      	movs	r3, #255	@ 0xff
 8001920:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 8001924:	23f1      	movs	r3, #241	@ 0xf1
 8001926:	9318      	str	r3, [sp, #96]	@ 0x60
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8001928:	f8cd 9000 	str.w	r9, [sp]
 800192c:	f10d 0317 	add.w	r3, sp, #23
 8001930:	2235      	movs	r2, #53	@ 0x35
 8001932:	a918      	add	r1, sp, #96	@ 0x60
 8001934:	4620      	mov	r0, r4
 8001936:	f000 fcbb 	bl	80022b0 <dhcpAddOption>
   if(context->settings.rapidCommit)
 800193a:	68ab      	ldr	r3, [r5, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d137      	bne.n	80019b0 <dhcpClientSendDiscover+0x128>
   if(context->settings.addOptionsCallback != NULL)
 8001940:	6a2e      	ldr	r6, [r5, #32]
 8001942:	b126      	cbz	r6, 800194e <dhcpClientSendDiscover+0xc6>
      context->settings.addOptionsCallback(context, message, &length,
 8001944:	2301      	movs	r3, #1
 8001946:	aa18      	add	r2, sp, #96	@ 0x60
 8001948:	4621      	mov	r1, r4
 800194a:	4628      	mov	r0, r5
 800194c:	47b0      	blx	r6
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 800194e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8001950:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001954:	bf38      	it	cc
 8001956:	f44f 7396 	movcc.w	r3, #300	@ 0x12c
 800195a:	9318      	str	r3, [sp, #96]	@ 0x60
   netBufferSetLength(buffer, offset + length);
 800195c:	9919      	ldr	r1, [sp, #100]	@ 0x64
 800195e:	4419      	add	r1, r3
 8001960:	4638      	mov	r0, r7
 8001962:	f00a fb96 	bl	800c092 <netBufferSetLength>
   srcIpAddr.length = sizeof(Ipv4Addr);
 8001966:	2304      	movs	r3, #4
 8001968:	9313      	str	r3, [sp, #76]	@ 0x4c
   srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 800196a:	2200      	movs	r2, #0
 800196c:	9214      	str	r2, [sp, #80]	@ 0x50
   destIpAddr.length = sizeof(Ipv4Addr);
 800196e:	930e      	str	r3, [sp, #56]	@ 0x38
   destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
 8001974:	930f      	str	r3, [sp, #60]	@ 0x3c
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8001976:	ac06      	add	r4, sp, #24
 8001978:	4d12      	ldr	r5, [pc, #72]	@ (80019c4 <dhcpClientSendDiscover+0x13c>)
 800197a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800197c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800197e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001982:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8001986:	ab06      	add	r3, sp, #24
 8001988:	9303      	str	r3, [sp, #12]
 800198a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800198c:	9302      	str	r3, [sp, #8]
 800198e:	9701      	str	r7, [sp, #4]
 8001990:	2343      	movs	r3, #67	@ 0x43
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	ab0e      	add	r3, sp, #56	@ 0x38
 8001996:	2244      	movs	r2, #68	@ 0x44
 8001998:	a913      	add	r1, sp, #76	@ 0x4c
 800199a:	4640      	mov	r0, r8
 800199c:	f00e ff4a 	bl	8010834 <udpSendBuffer>
 80019a0:	4604      	mov	r4, r0
   netBufferFree(buffer);
 80019a2:	4638      	mov	r0, r7
 80019a4:	f00a fbe0 	bl	800c168 <netBufferFree>
}
 80019a8:	4620      	mov	r0, r4
 80019aa:	b01b      	add	sp, #108	@ 0x6c
 80019ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      dhcpAddOption(message, &length, DHCP_OPT_RAPID_COMMIT, NULL, 0);
 80019b0:	2300      	movs	r3, #0
 80019b2:	9300      	str	r3, [sp, #0]
 80019b4:	2250      	movs	r2, #80	@ 0x50
 80019b6:	a918      	add	r1, sp, #96	@ 0x60
 80019b8:	4620      	mov	r0, r4
 80019ba:	f000 fc79 	bl	80022b0 <dhcpAddOption>
 80019be:	e7bf      	b.n	8001940 <dhcpClientSendDiscover+0xb8>
      return ERROR_OUT_OF_MEMORY;
 80019c0:	2464      	movs	r4, #100	@ 0x64
 80019c2:	e7f1      	b.n	80019a8 <dhcpClientSendDiscover+0x120>
 80019c4:	08019fc4 	.word	0x08019fc4

080019c8 <dhcpClientSendRequest>:
{
 80019c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019cc:	b09b      	sub	sp, #108	@ 0x6c
 80019ce:	4605      	mov	r5, r0
   const uint8_t type = DHCP_MSG_TYPE_REQUEST;
 80019d0:	2303      	movs	r3, #3
 80019d2:	f88d 3017 	strb.w	r3, [sp, #23]
   interface = context->settings.interface;
 80019d6:	6807      	ldr	r7, [r0, #0]
   logicalInterface = nicGetLogicalInterface(interface);
 80019d8:	4638      	mov	r0, r7
 80019da:	f00b f88c 	bl	800caf6 <nicGetLogicalInterface>
 80019de:	4680      	mov	r8, r0
   i = context->settings.ipAddrIndex;
 80019e0:	f8d5 9004 	ldr.w	r9, [r5, #4]
   buffer = udpAllocBuffer(DHCP_MAX_MSG_SIZE, &offset);
 80019e4:	a919      	add	r1, sp, #100	@ 0x64
 80019e6:	f44f 7009 	mov.w	r0, #548	@ 0x224
 80019ea:	f00e fff3 	bl	80109d4 <udpAllocBuffer>
   if(buffer == NULL)
 80019ee:	2800      	cmp	r0, #0
 80019f0:	f000 80cc 	beq.w	8001b8c <dhcpClientSendRequest+0x1c4>
 80019f4:	4606      	mov	r6, r0
   message = netBufferAt(buffer, offset, 0);
 80019f6:	2200      	movs	r2, #0
 80019f8:	9919      	ldr	r1, [sp, #100]	@ 0x64
 80019fa:	f00a fbdd 	bl	800c1b8 <netBufferAt>
 80019fe:	4604      	mov	r4, r0
   osMemset(message, 0, DHCP_MAX_MSG_SIZE);
 8001a00:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001a04:	2100      	movs	r1, #0
 8001a06:	f013 f93d 	bl	8014c84 <memset>
   message->op = DHCP_OPCODE_BOOTREQUEST;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	7023      	strb	r3, [r4, #0]
   message->htype = DHCP_HARDWARE_TYPE_ETH;
 8001a0e:	7063      	strb	r3, [r4, #1]
   message->hlen = sizeof(MacAddr);
 8001a10:	2306      	movs	r3, #6
 8001a12:	70a3      	strb	r3, [r4, #2]
   message->xid = htonl(context->transactionId);
 8001a14:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8001a16:	f7fe fe04 	bl	8000622 <swapInt32>
 8001a1a:	6060      	str	r0, [r4, #4]
   message->secs = dhcpClientComputeElapsedTime(context);
 8001a1c:	4628      	mov	r0, r5
 8001a1e:	f7ff ff1d 	bl	800185c <dhcpClientComputeElapsedTime>
 8001a22:	8120      	strh	r0, [r4, #8]
   if(context->state == DHCP_STATE_RENEWING ||
 8001a24:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8001a28:	3b08      	subs	r3, #8
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d978      	bls.n	8001b22 <dhcpClientSendRequest+0x15a>
      message->flags = HTONS(DHCP_FLAG_BROADCAST);
 8001a30:	2300      	movs	r3, #0
 8001a32:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8001a36:	72a2      	strb	r2, [r4, #10]
 8001a38:	72e3      	strb	r3, [r4, #11]
      message->ciaddr = IPV4_UNSPECIFIED_ADDR;
 8001a3a:	7323      	strb	r3, [r4, #12]
 8001a3c:	7363      	strb	r3, [r4, #13]
 8001a3e:	73a3      	strb	r3, [r4, #14]
 8001a40:	73e3      	strb	r3, [r4, #15]
   message->chaddr = logicalInterface->macAddr;
 8001a42:	f8d8 0088 	ldr.w	r0, [r8, #136]	@ 0x88
 8001a46:	61e0      	str	r0, [r4, #28]
 8001a48:	f8b8 308c 	ldrh.w	r3, [r8, #140]	@ 0x8c
 8001a4c:	8423      	strh	r3, [r4, #32]
   message->magicCookie = HTONL(DHCP_MAGIC_COOKIE);
 8001a4e:	2363      	movs	r3, #99	@ 0x63
 8001a50:	f884 30ec 	strb.w	r3, [r4, #236]	@ 0xec
 8001a54:	f06f 027d 	mvn.w	r2, #125	@ 0x7d
 8001a58:	f884 20ed 	strb.w	r2, [r4, #237]	@ 0xed
 8001a5c:	2253      	movs	r2, #83	@ 0x53
 8001a5e:	f884 20ee 	strb.w	r2, [r4, #238]	@ 0xee
 8001a62:	f884 30ef 	strb.w	r3, [r4, #239]	@ 0xef
   message->options[0] = DHCP_OPT_END;
 8001a66:	23ff      	movs	r3, #255	@ 0xff
 8001a68:	f884 30f0 	strb.w	r3, [r4, #240]	@ 0xf0
   length = sizeof(DhcpMessage) + sizeof(uint8_t);
 8001a6c:	23f1      	movs	r3, #241	@ 0xf1
 8001a6e:	9318      	str	r3, [sp, #96]	@ 0x60
   dhcpAddOption(message, &length, DHCP_OPT_DHCP_MESSAGE_TYPE,
 8001a70:	2301      	movs	r3, #1
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	f10d 0317 	add.w	r3, sp, #23
 8001a78:	2235      	movs	r2, #53	@ 0x35
 8001a7a:	a918      	add	r1, sp, #96	@ 0x60
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	f000 fc17 	bl	80022b0 <dhcpAddOption>
   if(context->state == DHCP_STATE_REQUESTING)
 8001a82:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d056      	beq.n	8001b38 <dhcpClientSendRequest+0x170>
   if(context->state == DHCP_STATE_REQUESTING ||
 8001a8a:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	bf18      	it	ne
 8001a92:	2b02      	cmpne	r3, #2
 8001a94:	d05a      	beq.n	8001b4c <dhcpClientSendRequest+0x184>
   if(context->settings.addOptionsCallback != NULL)
 8001a96:	f8d5 8020 	ldr.w	r8, [r5, #32]
 8001a9a:	f1b8 0f00 	cmp.w	r8, #0
 8001a9e:	d004      	beq.n	8001aaa <dhcpClientSendRequest+0xe2>
      context->settings.addOptionsCallback(context, message, &length,
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	aa18      	add	r2, sp, #96	@ 0x60
 8001aa4:	4621      	mov	r1, r4
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	47c0      	blx	r8
   if(dhcpGetOption(message, length, DHCP_OPT_PARAM_REQUEST_LIST) == NULL)
 8001aaa:	2237      	movs	r2, #55	@ 0x37
 8001aac:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8001aae:	4620      	mov	r0, r4
 8001ab0:	f000 fc39 	bl	8002326 <dhcpGetOption>
 8001ab4:	2800      	cmp	r0, #0
 8001ab6:	d053      	beq.n	8001b60 <dhcpClientSendRequest+0x198>
   length = MAX(length, DHCP_MIN_MSG_SIZE);
 8001ab8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8001aba:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 8001abe:	bf38      	it	cc
 8001ac0:	f44f 7396 	movcc.w	r3, #300	@ 0x12c
 8001ac4:	9318      	str	r3, [sp, #96]	@ 0x60
   netBufferSetLength(buffer, offset + length);
 8001ac6:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8001ac8:	4419      	add	r1, r3
 8001aca:	4630      	mov	r0, r6
 8001acc:	f00a fae1 	bl	800c092 <netBufferSetLength>
   if(context->state == DHCP_STATE_RENEWING)
 8001ad0:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d04c      	beq.n	8001b72 <dhcpClientSendRequest+0x1aa>
      srcIpAddr.length = sizeof(Ipv4Addr);
 8001ad8:	2304      	movs	r3, #4
 8001ada:	9313      	str	r3, [sp, #76]	@ 0x4c
      srcIpAddr.ipv4Addr = IPV4_UNSPECIFIED_ADDR;
 8001adc:	2200      	movs	r2, #0
 8001ade:	9214      	str	r2, [sp, #80]	@ 0x50
      destIpAddr.length = sizeof(Ipv4Addr);
 8001ae0:	930e      	str	r3, [sp, #56]	@ 0x38
      destIpAddr.ipv4Addr = IPV4_BROADCAST_ADDR;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	930f      	str	r3, [sp, #60]	@ 0x3c
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8001ae8:	ac06      	add	r4, sp, #24
 8001aea:	4d29      	ldr	r5, [pc, #164]	@ (8001b90 <dhcpClientSendRequest+0x1c8>)
 8001aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   error = udpSendBuffer(interface, &srcIpAddr, DHCP_CLIENT_PORT, &destIpAddr,
 8001af8:	ab06      	add	r3, sp, #24
 8001afa:	9303      	str	r3, [sp, #12]
 8001afc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001afe:	9302      	str	r3, [sp, #8]
 8001b00:	9601      	str	r6, [sp, #4]
 8001b02:	2343      	movs	r3, #67	@ 0x43
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	ab0e      	add	r3, sp, #56	@ 0x38
 8001b08:	2244      	movs	r2, #68	@ 0x44
 8001b0a:	a913      	add	r1, sp, #76	@ 0x4c
 8001b0c:	4638      	mov	r0, r7
 8001b0e:	f00e fe91 	bl	8010834 <udpSendBuffer>
 8001b12:	4604      	mov	r4, r0
   netBufferFree(buffer);
 8001b14:	4630      	mov	r0, r6
 8001b16:	f00a fb27 	bl	800c168 <netBufferFree>
}
 8001b1a:	4620      	mov	r0, r4
 8001b1c:	b01b      	add	sp, #108	@ 0x6c
 8001b1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      message->flags = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	72a3      	strb	r3, [r4, #10]
 8001b26:	72e3      	strb	r3, [r4, #11]
      message->ciaddr = interface->ipv4Context.addrList[i].addr;
 8001b28:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001b2c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001b30:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8001b34:	60e3      	str	r3, [r4, #12]
 8001b36:	e784      	b.n	8001a42 <dhcpClientSendRequest+0x7a>
      dhcpAddOption(message, &length, DHCP_OPT_SERVER_ID,
 8001b38:	2304      	movs	r3, #4
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f105 0344 	add.w	r3, r5, #68	@ 0x44
 8001b40:	2236      	movs	r2, #54	@ 0x36
 8001b42:	a918      	add	r1, sp, #96	@ 0x60
 8001b44:	4620      	mov	r0, r4
 8001b46:	f000 fbb3 	bl	80022b0 <dhcpAddOption>
 8001b4a:	e79e      	b.n	8001a8a <dhcpClientSendRequest+0xc2>
      dhcpAddOption(message, &length, DHCP_OPT_REQUESTED_IP_ADDR,
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	f105 0348 	add.w	r3, r5, #72	@ 0x48
 8001b54:	2232      	movs	r2, #50	@ 0x32
 8001b56:	a918      	add	r1, sp, #96	@ 0x60
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f000 fba9 	bl	80022b0 <dhcpAddOption>
 8001b5e:	e79a      	b.n	8001a96 <dhcpClientSendRequest+0xce>
      dhcpAddOption(message, &length, DHCP_OPT_PARAM_REQUEST_LIST,
 8001b60:	2307      	movs	r3, #7
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <dhcpClientSendRequest+0x1cc>)
 8001b66:	2237      	movs	r2, #55	@ 0x37
 8001b68:	a918      	add	r1, sp, #96	@ 0x60
 8001b6a:	4620      	mov	r0, r4
 8001b6c:	f000 fba0 	bl	80022b0 <dhcpAddOption>
 8001b70:	e7a2      	b.n	8001ab8 <dhcpClientSendRequest+0xf0>
      srcIpAddr.length = sizeof(Ipv4Addr);
 8001b72:	2304      	movs	r3, #4
 8001b74:	9313      	str	r3, [sp, #76]	@ 0x4c
      srcIpAddr.ipv4Addr = interface->ipv4Context.addrList[i].addr;
 8001b76:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8001b7a:	eb07 0989 	add.w	r9, r7, r9, lsl #2
 8001b7e:	f8d9 21a0 	ldr.w	r2, [r9, #416]	@ 0x1a0
 8001b82:	9214      	str	r2, [sp, #80]	@ 0x50
      destIpAddr.length = sizeof(Ipv4Addr);
 8001b84:	930e      	str	r3, [sp, #56]	@ 0x38
      destIpAddr.ipv4Addr = context->serverIpAddr;
 8001b86:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8001b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001b8a:	e7ad      	b.n	8001ae8 <dhcpClientSendRequest+0x120>
      return ERROR_OUT_OF_MEMORY;
 8001b8c:	2464      	movs	r4, #100	@ 0x64
 8001b8e:	e7c4      	b.n	8001b1a <dhcpClientSendRequest+0x152>
 8001b90:	08019fc4 	.word	0x08019fc4
 8001b94:	08019e70 	.word	0x08019e70

08001b98 <dhcpClientChangeState>:
 * @param[in] delay Initial delay
 **/

void dhcpClientChangeState(DhcpClientContext *context,
   DhcpState newState, systime_t delay)
{
 8001b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b9c:	4604      	mov	r4, r0
 8001b9e:	460d      	mov	r5, r1
 8001ba0:	4617      	mov	r7, r2
   systime_t time;

   //Get current time
   time = osGetSystemTime();
 8001ba2:	f7fe fe2b 	bl	80007fc <osGetSystemTime>
 8001ba6:	4606      	mov	r6, r0

#if (DHCP_TRACE_LEVEL >= TRACE_LEVEL_INFO)
   //Sanity check
   if(newState <= DHCP_STATE_REBINDING)
 8001ba8:	2d09      	cmp	r5, #9
 8001baa:	d916      	bls.n	8001bda <dhcpClientChangeState+0x42>
         formatSystemTime(time, NULL), stateLabel[newState]);
   }
#endif

   //Set time stamp
   context->timestamp = time;
 8001bac:	6366      	str	r6, [r4, #52]	@ 0x34
   //Set initial delay
   context->timeout = delay;
 8001bae:	63a7      	str	r7, [r4, #56]	@ 0x38
   //Reset retransmission counter
   context->retransmitCount = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	6423      	str	r3, [r4, #64]	@ 0x40
   //Switch to the new state
   context->state = newState;
 8001bb4:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c

   //Any registered callback?
   if(context->settings.stateChangeEvent != NULL)
 8001bb8:	69e3      	ldr	r3, [r4, #28]
 8001bba:	b163      	cbz	r3, 8001bd6 <dhcpClientChangeState+0x3e>
   {
      NetInterface *interface;

      //Point to the underlying network interface
      interface = context->settings.interface;
 8001bbc:	6827      	ldr	r7, [r4, #0]

      //Release exclusive access
      osReleaseMutex(&netMutex);
 8001bbe:	4e12      	ldr	r6, [pc, #72]	@ (8001c08 <dhcpClientChangeState+0x70>)
 8001bc0:	4630      	mov	r0, r6
 8001bc2:	f7fe fe13 	bl	80007ec <osReleaseMutex>
      //Invoke user callback function
      context->settings.stateChangeEvent(context, interface, newState);
 8001bc6:	69e3      	ldr	r3, [r4, #28]
 8001bc8:	462a      	mov	r2, r5
 8001bca:	4639      	mov	r1, r7
 8001bcc:	4620      	mov	r0, r4
 8001bce:	4798      	blx	r3
      //Get exclusive access
      osAcquireMutex(&netMutex);
 8001bd0:	4630      	mov	r0, r6
 8001bd2:	f7fe fe04 	bl	80007de <osAcquireMutex>
   }
}
 8001bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      TRACE_INFO("%s: DHCP client %s state\r\n",
 8001bda:	f7fe fda9 	bl	8000730 <osSuspendAllTasks>
 8001bde:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <dhcpClientChangeState+0x74>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001be6:	2100      	movs	r1, #0
 8001be8:	4630      	mov	r0, r6
 8001bea:	f7fe fd27 	bl	800063c <formatSystemTime>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	4b07      	ldr	r3, [pc, #28]	@ (8001c10 <dhcpClientChangeState+0x78>)
 8001bf2:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	4906      	ldr	r1, [pc, #24]	@ (8001c14 <dhcpClientChangeState+0x7c>)
 8001bfa:	4640      	mov	r0, r8
 8001bfc:	f012 fd34 	bl	8014668 <fprintf>
 8001c00:	f7fe fd9f 	bl	8000742 <osResumeAllTasks>
 8001c04:	e7d2      	b.n	8001bac <dhcpClientChangeState+0x14>
 8001c06:	bf00      	nop
 8001c08:	20000b50 	.word	0x20000b50
 8001c0c:	20000440 	.word	0x20000440
 8001c10:	08019e70 	.word	0x08019e70
 8001c14:	0801a13c 	.word	0x0801a13c

08001c18 <dhcpClientParseOffer>:
{
 8001c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1c:	4604      	mov	r4, r0
 8001c1e:	460d      	mov	r5, r1
 8001c20:	4617      	mov	r7, r2
   logicalInterface = nicGetLogicalInterface(interface);
 8001c22:	6800      	ldr	r0, [r0, #0]
 8001c24:	f00a ff67 	bl	800caf6 <nicGetLogicalInterface>
 8001c28:	4606      	mov	r6, r0
   if(ntohl(message->xid) != context->transactionId)
 8001c2a:	6868      	ldr	r0, [r5, #4]
 8001c2c:	f7fe fcf9 	bl	8000622 <swapInt32>
 8001c30:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001c32:	4298      	cmp	r0, r3
 8001c34:	d10d      	bne.n	8001c52 <dhcpClientParseOffer+0x3a>
   if(message->yiaddr == IPV4_UNSPECIFIED_ADDR)
 8001c36:	692b      	ldr	r3, [r5, #16]
 8001c38:	b15b      	cbz	r3, 8001c52 <dhcpClientParseOffer+0x3a>
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 8001c3a:	2206      	movs	r2, #6
 8001c3c:	f106 0188 	add.w	r1, r6, #136	@ 0x88
 8001c40:	f105 001c 	add.w	r0, r5, #28
 8001c44:	f012 fff4 	bl	8014c30 <memcmp>
 8001c48:	b918      	cbnz	r0, 8001c52 <dhcpClientParseOffer+0x3a>
   if(context->state != DHCP_STATE_SELECTING)
 8001c4a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d001      	beq.n	8001c56 <dhcpClientParseOffer+0x3e>
}
 8001c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_ID);
 8001c56:	2236      	movs	r2, #54	@ 0x36
 8001c58:	4639      	mov	r1, r7
 8001c5a:	4628      	mov	r0, r5
 8001c5c:	f000 fb63 	bl	8002326 <dhcpGetOption>
   if(serverIdOption == NULL || serverIdOption->length != 4)
 8001c60:	4606      	mov	r6, r0
 8001c62:	2800      	cmp	r0, #0
 8001c64:	d0f5      	beq.n	8001c52 <dhcpClientParseOffer+0x3a>
 8001c66:	7843      	ldrb	r3, [r0, #1]
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d1f2      	bne.n	8001c52 <dhcpClientParseOffer+0x3a>
   if(context->settings.parseOptionsCallback != NULL)
 8001c6c:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8001c70:	f1b8 0f00 	cmp.w	r8, #0
 8001c74:	d006      	beq.n	8001c84 <dhcpClientParseOffer+0x6c>
      error = context->settings.parseOptionsCallback(context, message, length,
 8001c76:	2302      	movs	r3, #2
 8001c78:	463a      	mov	r2, r7
 8001c7a:	4629      	mov	r1, r5
 8001c7c:	4620      	mov	r0, r4
 8001c7e:	47c0      	blx	r8
      if(error)
 8001c80:	2800      	cmp	r0, #0
 8001c82:	d1e6      	bne.n	8001c52 <dhcpClientParseOffer+0x3a>
   ipv4CopyAddr(&context->serverIpAddr, serverIdOption->value);
 8001c84:	f8d6 3002 	ldr.w	r3, [r6, #2]
 8001c88:	6463      	str	r3, [r4, #68]	@ 0x44
   context->requestedIpAddr = message->yiaddr;
 8001c8a:	692b      	ldr	r3, [r5, #16]
 8001c8c:	64a3      	str	r3, [r4, #72]	@ 0x48
   dhcpClientChangeState(context, DHCP_STATE_REQUESTING, 0);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2102      	movs	r1, #2
 8001c92:	4620      	mov	r0, r4
 8001c94:	f7ff ff80 	bl	8001b98 <dhcpClientChangeState>
 8001c98:	e7db      	b.n	8001c52 <dhcpClientParseOffer+0x3a>
	...

08001c9c <dhcpClientParseAck>:
{
 8001c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	9201      	str	r2, [sp, #4]
   interface = context->settings.interface;
 8001ca8:	6807      	ldr	r7, [r0, #0]
   logicalInterface = nicGetLogicalInterface(interface);
 8001caa:	4638      	mov	r0, r7
 8001cac:	f00a ff23 	bl	800caf6 <nicGetLogicalInterface>
 8001cb0:	4682      	mov	sl, r0
   physicalInterface = nicGetPhysicalInterface(interface);
 8001cb2:	4638      	mov	r0, r7
 8001cb4:	f00a ff20 	bl	800caf8 <nicGetPhysicalInterface>
 8001cb8:	4680      	mov	r8, r0
   i = context->settings.ipAddrIndex;
 8001cba:	f8d4 9004 	ldr.w	r9, [r4, #4]
   if(ntohl(message->xid) != context->transactionId)
 8001cbe:	6868      	ldr	r0, [r5, #4]
 8001cc0:	f7fe fcaf 	bl	8000622 <swapInt32>
 8001cc4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001cc6:	4298      	cmp	r0, r3
 8001cc8:	d109      	bne.n	8001cde <dhcpClientParseAck+0x42>
   if(message->yiaddr == IPV4_UNSPECIFIED_ADDR)
 8001cca:	692b      	ldr	r3, [r5, #16]
 8001ccc:	b13b      	cbz	r3, 8001cde <dhcpClientParseAck+0x42>
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 8001cce:	2206      	movs	r2, #6
 8001cd0:	f10a 0188 	add.w	r1, sl, #136	@ 0x88
 8001cd4:	f105 001c 	add.w	r0, r5, #28
 8001cd8:	f012 ffaa 	bl	8014c30 <memcmp>
 8001cdc:	b110      	cbz	r0, 8001ce4 <dhcpClientParseAck+0x48>
}
 8001cde:	b003      	add	sp, #12
 8001ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_ID);
 8001ce4:	2236      	movs	r2, #54	@ 0x36
 8001ce6:	9901      	ldr	r1, [sp, #4]
 8001ce8:	4628      	mov	r0, r5
 8001cea:	f000 fb1c 	bl	8002326 <dhcpGetOption>
   if(serverIdOption == NULL || serverIdOption->length != 4)
 8001cee:	4682      	mov	sl, r0
 8001cf0:	2800      	cmp	r0, #0
 8001cf2:	d0f4      	beq.n	8001cde <dhcpClientParseAck+0x42>
 8001cf4:	7843      	ldrb	r3, [r0, #1]
 8001cf6:	2b04      	cmp	r3, #4
 8001cf8:	d1f1      	bne.n	8001cde <dhcpClientParseAck+0x42>
   if(context->state == DHCP_STATE_SELECTING)
 8001cfa:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d8ec      	bhi.n	8001cde <dhcpClientParseAck+0x42>
 8001d04:	a201      	add	r2, pc, #4	@ (adr r2, 8001d0c <dhcpClientParseAck+0x70>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d31 	.word	0x08001d31
 8001d10:	08001d4b 	.word	0x08001d4b
 8001d14:	08001cdf 	.word	0x08001cdf
 8001d18:	08001d5b 	.word	0x08001d5b
 8001d1c:	08001cdf 	.word	0x08001cdf
 8001d20:	08001cdf 	.word	0x08001cdf
 8001d24:	08001cdf 	.word	0x08001cdf
 8001d28:	08001d4b 	.word	0x08001d4b
 8001d2c:	08001d5b 	.word	0x08001d5b
      if(!context->settings.rapidCommit)
 8001d30:	68a3      	ldr	r3, [r4, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d0d3      	beq.n	8001cde <dhcpClientParseAck+0x42>
      option = dhcpGetOption(message, length, DHCP_OPT_RAPID_COMMIT);
 8001d36:	2250      	movs	r2, #80	@ 0x50
 8001d38:	9901      	ldr	r1, [sp, #4]
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f000 faf3 	bl	8002326 <dhcpGetOption>
      if(option == NULL || option->length != 0)
 8001d40:	2800      	cmp	r0, #0
 8001d42:	d0cc      	beq.n	8001cde <dhcpClientParseAck+0x42>
 8001d44:	7843      	ldrb	r3, [r0, #1]
 8001d46:	b143      	cbz	r3, 8001d5a <dhcpClientParseAck+0xbe>
 8001d48:	e7c9      	b.n	8001cde <dhcpClientParseAck+0x42>
      if(!ipv4CompAddr(serverIdOption->value, &context->serverIpAddr))
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 8001d50:	3002      	adds	r0, #2
 8001d52:	f012 ff6d 	bl	8014c30 <memcmp>
 8001d56:	2800      	cmp	r0, #0
 8001d58:	d1c1      	bne.n	8001cde <dhcpClientParseAck+0x42>
   option = dhcpGetOption(message, length, DHCP_OPT_IP_ADDRESS_LEASE_TIME);
 8001d5a:	2233      	movs	r2, #51	@ 0x33
 8001d5c:	9901      	ldr	r1, [sp, #4]
 8001d5e:	4628      	mov	r0, r5
 8001d60:	f000 fae1 	bl	8002326 <dhcpGetOption>
   if(option == NULL || option->length != 4)
 8001d64:	4683      	mov	fp, r0
 8001d66:	2800      	cmp	r0, #0
 8001d68:	d0b9      	beq.n	8001cde <dhcpClientParseAck+0x42>
 8001d6a:	7843      	ldrb	r3, [r0, #1]
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d1b6      	bne.n	8001cde <dhcpClientParseAck+0x42>
   if(context->settings.parseOptionsCallback != NULL)
 8001d70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001d72:	461e      	mov	r6, r3
 8001d74:	b133      	cbz	r3, 8001d84 <dhcpClientParseAck+0xe8>
      error = context->settings.parseOptionsCallback(context, message, length,
 8001d76:	2305      	movs	r3, #5
 8001d78:	9a01      	ldr	r2, [sp, #4]
 8001d7a:	4629      	mov	r1, r5
 8001d7c:	4620      	mov	r0, r4
 8001d7e:	47b0      	blx	r6
      if(error)
 8001d80:	2800      	cmp	r0, #0
 8001d82:	d1ac      	bne.n	8001cde <dhcpClientParseAck+0x42>
   context->leaseTime = LOAD32BE(option->value);
 8001d84:	f89b 2002 	ldrb.w	r2, [fp, #2]
 8001d88:	f89b 3003 	ldrb.w	r3, [fp, #3]
 8001d8c:	041b      	lsls	r3, r3, #16
 8001d8e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001d92:	f89b 2004 	ldrb.w	r2, [fp, #4]
 8001d96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d9a:	f89b 2005 	ldrb.w	r2, [fp, #5]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	65a3      	str	r3, [r4, #88]	@ 0x58
   option = dhcpGetOption(message, length, DHCP_OPT_RENEWAL_TIME_VALUE);
 8001da2:	223a      	movs	r2, #58	@ 0x3a
 8001da4:	9901      	ldr	r1, [sp, #4]
 8001da6:	4628      	mov	r0, r5
 8001da8:	f000 fabd 	bl	8002326 <dhcpGetOption>
   if(option != NULL && option->length == 4)
 8001dac:	b110      	cbz	r0, 8001db4 <dhcpClientParseAck+0x118>
 8001dae:	7842      	ldrb	r2, [r0, #1]
 8001db0:	2a04      	cmp	r2, #4
 8001db2:	d05f      	beq.n	8001e74 <dhcpClientParseAck+0x1d8>
   else if(context->leaseTime != DHCP_INFINITE_TIME)
 8001db4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dba:	d067      	beq.n	8001e8c <dhcpClientParseAck+0x1f0>
      context->t1 = context->leaseTime / 2;
 8001dbc:	085b      	lsrs	r3, r3, #1
 8001dbe:	65e3      	str	r3, [r4, #92]	@ 0x5c
   option = dhcpGetOption(message, length, DHCP_OPT_REBINDING_TIME_VALUE);
 8001dc0:	223b      	movs	r2, #59	@ 0x3b
 8001dc2:	9901      	ldr	r1, [sp, #4]
 8001dc4:	4628      	mov	r0, r5
 8001dc6:	f000 faae 	bl	8002326 <dhcpGetOption>
   if(option != NULL && option->length == 4)
 8001dca:	b110      	cbz	r0, 8001dd2 <dhcpClientParseAck+0x136>
 8001dcc:	7842      	ldrb	r2, [r0, #1]
 8001dce:	2a04      	cmp	r2, #4
 8001dd0:	d060      	beq.n	8001e94 <dhcpClientParseAck+0x1f8>
   else if(context->leaseTime != DHCP_INFINITE_TIME)
 8001dd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dd8:	d068      	beq.n	8001eac <dhcpClientParseAck+0x210>
      context->t2 = context->leaseTime * 7 / 8;
 8001dda:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	6623      	str	r3, [r4, #96]	@ 0x60
   option = dhcpGetOption(message, length, DHCP_OPT_SUBNET_MASK);
 8001de2:	2201      	movs	r2, #1
 8001de4:	9901      	ldr	r1, [sp, #4]
 8001de6:	4628      	mov	r0, r5
 8001de8:	f000 fa9d 	bl	8002326 <dhcpGetOption>
   if(option != NULL && option->length == sizeof(Ipv4Addr))
 8001dec:	b110      	cbz	r0, 8001df4 <dhcpClientParseAck+0x158>
 8001dee:	7842      	ldrb	r2, [r0, #1]
 8001df0:	2a04      	cmp	r2, #4
 8001df2:	d05f      	beq.n	8001eb4 <dhcpClientParseAck+0x218>
   option = dhcpGetOption(message, length, DHCP_OPT_ROUTER);
 8001df4:	2203      	movs	r2, #3
 8001df6:	9901      	ldr	r1, [sp, #4]
 8001df8:	4628      	mov	r0, r5
 8001dfa:	f000 fa94 	bl	8002326 <dhcpGetOption>
   if(option != NULL && !(option->length % sizeof(Ipv4Addr)))
 8001dfe:	b168      	cbz	r0, 8001e1c <dhcpClientParseAck+0x180>
 8001e00:	7842      	ldrb	r2, [r0, #1]
 8001e02:	f012 0f03 	tst.w	r2, #3
 8001e06:	d109      	bne.n	8001e1c <dhcpClientParseAck+0x180>
      if(option->length >= sizeof(Ipv4Addr))
 8001e08:	2a03      	cmp	r2, #3
 8001e0a:	d907      	bls.n	8001e1c <dhcpClientParseAck+0x180>
         ipv4CopyAddr(&interface->ipv4Context.addrList[i].defaultGateway,
 8001e0c:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8001e10:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001e14:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001e18:	f8c3 21b0 	str.w	r2, [r3, #432]	@ 0x1b0
   if(!context->settings.manualDnsConfig)
 8001e1c:	68e3      	ldr	r3, [r4, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d051      	beq.n	8001ec6 <dhcpClientParseAck+0x22a>
   option = dhcpGetOption(message, length, DHCP_OPT_INTERFACE_MTU);
 8001e22:	221a      	movs	r2, #26
 8001e24:	9901      	ldr	r1, [sp, #4]
 8001e26:	4628      	mov	r0, r5
 8001e28:	f000 fa7d 	bl	8002326 <dhcpGetOption>
   if(option != NULL && option->length == 2)
 8001e2c:	b110      	cbz	r0, 8001e34 <dhcpClientParseAck+0x198>
 8001e2e:	7842      	ldrb	r2, [r0, #1]
 8001e30:	2a02      	cmp	r2, #2
 8001e32:	d06e      	beq.n	8001f12 <dhcpClientParseAck+0x276>
   ipv4CopyAddr(&context->serverIpAddr, serverIdOption->value);
 8001e34:	f8da 3002 	ldr.w	r3, [sl, #2]
 8001e38:	6463      	str	r3, [r4, #68]	@ 0x44
   context->requestedIpAddr = message->yiaddr;
 8001e3a:	692b      	ldr	r3, [r5, #16]
 8001e3c:	64a3      	str	r3, [r4, #72]	@ 0x48
   context->leaseStartTime = osGetSystemTime();
 8001e3e:	f7fe fcdd 	bl	80007fc <osGetSystemTime>
 8001e42:	6560      	str	r0, [r4, #84]	@ 0x54
   if(context->state == DHCP_STATE_REQUESTING ||
 8001e44:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001e48:	2b04      	cmp	r3, #4
 8001e4a:	bf18      	it	ne
 8001e4c:	2b02      	cmpne	r3, #2
 8001e4e:	d16e      	bne.n	8001f2e <dhcpClientParseAck+0x292>
      interface->ipv4Context.addrList[i].addr = message->yiaddr;
 8001e50:	692a      	ldr	r2, [r5, #16]
 8001e52:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001e56:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001e5a:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
      interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_TENTATIVE;
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 21a4 	strb.w	r2, [r3, #420]	@ 0x1a4
      interface->ipv4Context.addrList[i].conflict = FALSE;
 8001e64:	2200      	movs	r2, #0
 8001e66:	f8c3 21a8 	str.w	r2, [r3, #424]	@ 0x1a8
      dhcpClientChangeState(context, DHCP_STATE_PROBING, 0);
 8001e6a:	2105      	movs	r1, #5
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff fe93 	bl	8001b98 <dhcpClientChangeState>
 8001e72:	e734      	b.n	8001cde <dhcpClientParseAck+0x42>
      context->t1 = LOAD32BE(option->value);
 8001e74:	7881      	ldrb	r1, [r0, #2]
 8001e76:	78c2      	ldrb	r2, [r0, #3]
 8001e78:	0412      	lsls	r2, r2, #16
 8001e7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e7e:	7901      	ldrb	r1, [r0, #4]
 8001e80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001e84:	7943      	ldrb	r3, [r0, #5]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8001e8a:	e799      	b.n	8001dc0 <dhcpClientParseAck+0x124>
      context->t1 = DHCP_INFINITE_TIME;
 8001e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8001e90:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8001e92:	e795      	b.n	8001dc0 <dhcpClientParseAck+0x124>
      context->t2 = LOAD32BE(option->value);
 8001e94:	7881      	ldrb	r1, [r0, #2]
 8001e96:	78c2      	ldrb	r2, [r0, #3]
 8001e98:	0412      	lsls	r2, r2, #16
 8001e9a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001e9e:	7901      	ldrb	r1, [r0, #4]
 8001ea0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001ea4:	7943      	ldrb	r3, [r0, #5]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	6623      	str	r3, [r4, #96]	@ 0x60
 8001eaa:	e79a      	b.n	8001de2 <dhcpClientParseAck+0x146>
      context->t2 = DHCP_INFINITE_TIME;
 8001eac:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb0:	6623      	str	r3, [r4, #96]	@ 0x60
 8001eb2:	e796      	b.n	8001de2 <dhcpClientParseAck+0x146>
      ipv4CopyAddr(&interface->ipv4Context.addrList[i].subnetMask,
 8001eb4:	f8d0 2002 	ldr.w	r2, [r0, #2]
 8001eb8:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001ebc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001ec0:	f8c3 21ac 	str.w	r2, [r3, #428]	@ 0x1ac
 8001ec4:	e796      	b.n	8001df4 <dhcpClientParseAck+0x158>
      option = dhcpGetOption(message, length, DHCP_OPT_DNS_SERVER);
 8001ec6:	2206      	movs	r2, #6
 8001ec8:	9901      	ldr	r1, [sp, #4]
 8001eca:	4628      	mov	r0, r5
 8001ecc:	f000 fa2b 	bl	8002326 <dhcpGetOption>
      if(option != NULL && !(option->length % sizeof(Ipv4Addr)))
 8001ed0:	4684      	mov	ip, r0
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d0a5      	beq.n	8001e22 <dhcpClientParseAck+0x186>
 8001ed6:	7843      	ldrb	r3, [r0, #1]
 8001ed8:	f013 0f03 	tst.w	r3, #3
 8001edc:	d1a1      	bne.n	8001e22 <dhcpClientParseAck+0x186>
         n = option->length / sizeof(Ipv4Addr);
 8001ede:	0899      	lsrs	r1, r3, #2
         for(j = 0; j < n && j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9e01      	ldr	r6, [sp, #4]
 8001ee4:	e009      	b.n	8001efa <dhcpClientParseAck+0x25e>
            ipv4CopyAddr(&interface->ipv4Context.dnsServerList[j],
 8001ee6:	f10c 0202 	add.w	r2, ip, #2
 8001eea:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001eee:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001ef2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 8001ef6:	6050      	str	r0, [r2, #4]
         for(j = 0; j < n && j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8001ef8:	3301      	adds	r3, #1
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	bf8c      	ite	hi
 8001efe:	2200      	movhi	r2, #0
 8001f00:	2201      	movls	r2, #1
 8001f02:	428b      	cmp	r3, r1
 8001f04:	d203      	bcs.n	8001f0e <dhcpClientParseAck+0x272>
 8001f06:	2a00      	cmp	r2, #0
 8001f08:	d1ed      	bne.n	8001ee6 <dhcpClientParseAck+0x24a>
 8001f0a:	9601      	str	r6, [sp, #4]
 8001f0c:	e789      	b.n	8001e22 <dhcpClientParseAck+0x186>
 8001f0e:	9601      	str	r6, [sp, #4]
 8001f10:	e787      	b.n	8001e22 <dhcpClientParseAck+0x186>
      n = LOAD16BE(option->value);
 8001f12:	7882      	ldrb	r2, [r0, #2]
 8001f14:	78c3      	ldrb	r3, [r0, #3]
 8001f16:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
      if(n >= IPV4_MINIMUM_MTU && n <= physicalInterface->nicDriver->mtu)
 8001f1a:	2b43      	cmp	r3, #67	@ 0x43
 8001f1c:	d98a      	bls.n	8001e34 <dhcpClientParseAck+0x198>
 8001f1e:	f8d8 2034 	ldr.w	r2, [r8, #52]	@ 0x34
 8001f22:	6852      	ldr	r2, [r2, #4]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d385      	bcc.n	8001e34 <dhcpClientParseAck+0x198>
         interface->ipv4Context.linkMtu = n;
 8001f28:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8001f2c:	e782      	b.n	8001e34 <dhcpClientParseAck+0x198>
      interface->ipv4Context.addrList[i].addr = message->yiaddr;
 8001f2e:	692a      	ldr	r2, [r5, #16]
 8001f30:	eb09 0389 	add.w	r3, r9, r9, lsl #2
 8001f34:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8001f38:	f8c3 21a0 	str.w	r2, [r3, #416]	@ 0x1a0
      interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_VALID;
 8001f3c:	461f      	mov	r7, r3
 8001f3e:	2302      	movs	r3, #2
 8001f40:	f887 31a4 	strb.w	r3, [r7, #420]	@ 0x1a4
      dhcpClientChangeState(context, DHCP_STATE_BOUND, 0);
 8001f44:	2200      	movs	r2, #0
 8001f46:	2107      	movs	r1, #7
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff fe25 	bl	8001b98 <dhcpClientChangeState>
 8001f4e:	e6c6      	b.n	8001cde <dhcpClientParseAck+0x42>

08001f50 <dhcpClientResetConfig>:
 * @brief Reset DHCP configuration
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientResetConfig(DhcpClientContext *context)
{
 8001f50:	b410      	push	{r4}
   uint_t i;
   uint_t j;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->settings.interface;
 8001f52:	6804      	ldr	r4, [r0, #0]
   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8001f54:	6843      	ldr	r3, [r0, #4]

   //The host address is not longer valid
   interface->ipv4Context.addrList[i].addr = IPV4_UNSPECIFIED_ADDR;
 8001f56:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8001f5a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f5e:	2100      	movs	r1, #0
 8001f60:	f8c2 11a0 	str.w	r1, [r2, #416]	@ 0x1a0
   interface->ipv4Context.addrList[i].state = IPV4_ADDR_STATE_INVALID;
 8001f64:	f882 11a4 	strb.w	r1, [r2, #420]	@ 0x1a4

   //Clear subnet mask
   interface->ipv4Context.addrList[i].subnetMask = IPV4_UNSPECIFIED_ADDR;
 8001f68:	f8c2 11ac 	str.w	r1, [r2, #428]	@ 0x1ac

   //The default gateway is no longer valid
   interface->ipv4Context.addrList[i].defaultGateway = IPV4_UNSPECIFIED_ADDR;
 8001f6c:	f8c2 11b0 	str.w	r1, [r2, #432]	@ 0x1b0

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 8001f70:	68c3      	ldr	r3, [r0, #12]
 8001f72:	b163      	cbz	r3, 8001f8e <dhcpClientResetConfig+0x3e>
      {
         //The DNS server is no longer valid
         interface->ipv4Context.dnsServerList[j] = IPV4_UNSPECIFIED_ADDR;
      }
   }
}
 8001f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f78:	4770      	bx	lr
         interface->ipv4Context.dnsServerList[j] = IPV4_UNSPECIFIED_ADDR;
 8001f7a:	f103 026c 	add.w	r2, r3, #108	@ 0x6c
 8001f7e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001f82:	2100      	movs	r1, #0
 8001f84:	6051      	str	r1, [r2, #4]
      for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8001f86:	3301      	adds	r3, #1
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d9f6      	bls.n	8001f7a <dhcpClientResetConfig+0x2a>
 8001f8c:	e7f2      	b.n	8001f74 <dhcpClientResetConfig+0x24>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e7fa      	b.n	8001f88 <dhcpClientResetConfig+0x38>
	...

08001f94 <dhcpClientLinkChangeEvent>:
   if(context == NULL)
 8001f94:	b308      	cbz	r0, 8001fda <dhcpClientLinkChangeEvent+0x46>
{
 8001f96:	b570      	push	{r4, r5, r6, lr}
 8001f98:	4604      	mov	r4, r0
   interface = context->settings.interface;
 8001f9a:	6805      	ldr	r5, [r0, #0]
   if(context->running)
 8001f9c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001f9e:	b9ab      	cbnz	r3, 8001fcc <dhcpClientLinkChangeEvent+0x38>
   if(context->state >= DHCP_STATE_INIT_REBOOT)
 8001fa0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d914      	bls.n	8001fd2 <dhcpClientLinkChangeEvent+0x3e>
      context->state = DHCP_STATE_INIT_REBOOT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
   if(context->settings.linkChangeEvent != NULL)
 8001fae:	69a3      	ldr	r3, [r4, #24]
 8001fb0:	b15b      	cbz	r3, 8001fca <dhcpClientLinkChangeEvent+0x36>
      osReleaseMutex(&netMutex);
 8001fb2:	4e0a      	ldr	r6, [pc, #40]	@ (8001fdc <dhcpClientLinkChangeEvent+0x48>)
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f7fe fc19 	bl	80007ec <osReleaseMutex>
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 8001fba:	69a3      	ldr	r3, [r4, #24]
 8001fbc:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	4798      	blx	r3
      osAcquireMutex(&netMutex);
 8001fc4:	4630      	mov	r0, r6
 8001fc6:	f7fe fc0a 	bl	80007de <osAcquireMutex>
}
 8001fca:	bd70      	pop	{r4, r5, r6, pc}
      dhcpClientResetConfig(context);
 8001fcc:	f7ff ffc0 	bl	8001f50 <dhcpClientResetConfig>
 8001fd0:	e7e6      	b.n	8001fa0 <dhcpClientLinkChangeEvent+0xc>
      context->state = DHCP_STATE_INIT;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8001fd8:	e7e9      	b.n	8001fae <dhcpClientLinkChangeEvent+0x1a>
 8001fda:	4770      	bx	lr
 8001fdc:	20000b50 	.word	0x20000b50

08001fe0 <dhcpClientParseNak>:
{
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	460d      	mov	r5, r1
 8001fe6:	4617      	mov	r7, r2
   logicalInterface = nicGetLogicalInterface(interface);
 8001fe8:	6800      	ldr	r0, [r0, #0]
 8001fea:	f00a fd84 	bl	800caf6 <nicGetLogicalInterface>
 8001fee:	4606      	mov	r6, r0
   if(ntohl(message->xid) != context->transactionId)
 8001ff0:	6868      	ldr	r0, [r5, #4]
 8001ff2:	f7fe fb16 	bl	8000622 <swapInt32>
 8001ff6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8001ff8:	4298      	cmp	r0, r3
 8001ffa:	d107      	bne.n	800200c <dhcpClientParseNak+0x2c>
   if(!macCompAddr(&message->chaddr, &logicalInterface->macAddr))
 8001ffc:	2206      	movs	r2, #6
 8001ffe:	f106 0188 	add.w	r1, r6, #136	@ 0x88
 8002002:	f105 001c 	add.w	r0, r5, #28
 8002006:	f012 fe13 	bl	8014c30 <memcmp>
 800200a:	b100      	cbz	r0, 800200e <dhcpClientParseNak+0x2e>
}
 800200c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   serverIdOption = dhcpGetOption(message, length, DHCP_OPT_SERVER_ID);
 800200e:	2236      	movs	r2, #54	@ 0x36
 8002010:	4639      	mov	r1, r7
 8002012:	4628      	mov	r0, r5
 8002014:	f000 f987 	bl	8002326 <dhcpGetOption>
   if(serverIdOption == NULL || serverIdOption->length != 4)
 8002018:	2800      	cmp	r0, #0
 800201a:	d0f7      	beq.n	800200c <dhcpClientParseNak+0x2c>
 800201c:	7843      	ldrb	r3, [r0, #1]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d1f4      	bne.n	800200c <dhcpClientParseNak+0x2c>
   if(context->state == DHCP_STATE_REQUESTING ||
 8002022:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8002026:	3b02      	subs	r3, #2
 8002028:	2b07      	cmp	r3, #7
 800202a:	d8ef      	bhi.n	800200c <dhcpClientParseNak+0x2c>
 800202c:	a201      	add	r2, pc, #4	@ (adr r2, 8002034 <dhcpClientParseNak+0x54>)
 800202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002032:	bf00      	nop
 8002034:	08002055 	.word	0x08002055
 8002038:	0800200d 	.word	0x0800200d
 800203c:	08002065 	.word	0x08002065
 8002040:	0800200d 	.word	0x0800200d
 8002044:	0800200d 	.word	0x0800200d
 8002048:	0800200d 	.word	0x0800200d
 800204c:	08002055 	.word	0x08002055
 8002050:	08002065 	.word	0x08002065
      if(!ipv4CompAddr(serverIdOption->value, &context->serverIpAddr))
 8002054:	2204      	movs	r2, #4
 8002056:	f104 0144 	add.w	r1, r4, #68	@ 0x44
 800205a:	3002      	adds	r0, #2
 800205c:	f012 fde8 	bl	8014c30 <memcmp>
 8002060:	2800      	cmp	r0, #0
 8002062:	d1d3      	bne.n	800200c <dhcpClientParseNak+0x2c>
   if(context->settings.parseOptionsCallback != NULL)
 8002064:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8002066:	b136      	cbz	r6, 8002076 <dhcpClientParseNak+0x96>
      error = context->settings.parseOptionsCallback(context, message, length,
 8002068:	2306      	movs	r3, #6
 800206a:	463a      	mov	r2, r7
 800206c:	4629      	mov	r1, r5
 800206e:	4620      	mov	r0, r4
 8002070:	47b0      	blx	r6
      if(error)
 8002072:	2800      	cmp	r0, #0
 8002074:	d1ca      	bne.n	800200c <dhcpClientParseNak+0x2c>
   dhcpClientResetConfig(context);
 8002076:	4620      	mov	r0, r4
 8002078:	f7ff ff6a 	bl	8001f50 <dhcpClientResetConfig>
   dhcpClientChangeState(context, DHCP_STATE_INIT, 0);
 800207c:	2200      	movs	r2, #0
 800207e:	4611      	mov	r1, r2
 8002080:	4620      	mov	r0, r4
 8002082:	f7ff fd89 	bl	8001b98 <dhcpClientChangeState>
 8002086:	e7c1      	b.n	800200c <dhcpClientParseNak+0x2c>

08002088 <dhcpClientProcessMessage>:
{
 8002088:	b570      	push	{r4, r5, r6, lr}
 800208a:	461d      	mov	r5, r3
 800208c:	9e04      	ldr	r6, [sp, #16]
   length = netBufferGetLength(buffer) - offset;
 800208e:	4618      	mov	r0, r3
 8002090:	f009 fff2 	bl	800c078 <netBufferGetLength>
 8002094:	1b84      	subs	r4, r0, r6
   if(length < sizeof(DhcpMessage) || length > DHCP_MAX_MSG_SIZE)
 8002096:	f1a4 03f0 	sub.w	r3, r4, #240	@ 0xf0
 800209a:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800209e:	d900      	bls.n	80020a2 <dhcpClientProcessMessage+0x1a>
}
 80020a0:	bd70      	pop	{r4, r5, r6, pc}
   message = netBufferAt(buffer, offset, length);
 80020a2:	4622      	mov	r2, r4
 80020a4:	4631      	mov	r1, r6
 80020a6:	4628      	mov	r0, r5
 80020a8:	f00a f886 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 80020ac:	4605      	mov	r5, r0
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d0f6      	beq.n	80020a0 <dhcpClientProcessMessage+0x18>
   if(message->op != DHCP_OPCODE_BOOTREPLY)
 80020b2:	7803      	ldrb	r3, [r0, #0]
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d1f3      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
   if(message->htype != DHCP_HARDWARE_TYPE_ETH)
 80020b8:	7843      	ldrb	r3, [r0, #1]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d1f0      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
   if(message->hlen != sizeof(MacAddr))
 80020be:	7883      	ldrb	r3, [r0, #2]
 80020c0:	2b06      	cmp	r3, #6
 80020c2:	d1ed      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
   if(message->magicCookie != HTONL(DHCP_MAGIC_COOKIE))
 80020c4:	f8d0 20ec 	ldr.w	r2, [r0, #236]	@ 0xec
 80020c8:	4b12      	ldr	r3, [pc, #72]	@ (8002114 <dhcpClientProcessMessage+0x8c>)
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d1e8      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
   option = dhcpGetOption(message, length, DHCP_OPT_DHCP_MESSAGE_TYPE);
 80020ce:	2235      	movs	r2, #53	@ 0x35
 80020d0:	4621      	mov	r1, r4
 80020d2:	f000 f928 	bl	8002326 <dhcpGetOption>
   if(option == NULL || option->length != 1)
 80020d6:	2800      	cmp	r0, #0
 80020d8:	d0e2      	beq.n	80020a0 <dhcpClientProcessMessage+0x18>
 80020da:	7842      	ldrb	r2, [r0, #1]
 80020dc:	2a01      	cmp	r2, #1
 80020de:	d1df      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
   switch(option->value[0])
 80020e0:	7883      	ldrb	r3, [r0, #2]
 80020e2:	2b05      	cmp	r3, #5
 80020e4:	d009      	beq.n	80020fa <dhcpClientProcessMessage+0x72>
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d00d      	beq.n	8002106 <dhcpClientProcessMessage+0x7e>
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d1d8      	bne.n	80020a0 <dhcpClientProcessMessage+0x18>
      dhcpClientParseOffer(context, message, length);
 80020ee:	4622      	mov	r2, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	9806      	ldr	r0, [sp, #24]
 80020f4:	f7ff fd90 	bl	8001c18 <dhcpClientParseOffer>
      break;
 80020f8:	e7d2      	b.n	80020a0 <dhcpClientProcessMessage+0x18>
      dhcpClientParseAck(context, message, length);
 80020fa:	4622      	mov	r2, r4
 80020fc:	4629      	mov	r1, r5
 80020fe:	9806      	ldr	r0, [sp, #24]
 8002100:	f7ff fdcc 	bl	8001c9c <dhcpClientParseAck>
      break;
 8002104:	e7cc      	b.n	80020a0 <dhcpClientProcessMessage+0x18>
      dhcpClientParseNak(context, message, length);
 8002106:	4622      	mov	r2, r4
 8002108:	4629      	mov	r1, r5
 800210a:	9806      	ldr	r0, [sp, #24]
 800210c:	f7ff ff68 	bl	8001fe0 <dhcpClientParseNak>
      break;
 8002110:	e7c6      	b.n	80020a0 <dhcpClientProcessMessage+0x18>
 8002112:	bf00      	nop
 8002114:	63538263 	.word	0x63538263

08002118 <dhcpClientDumpConfig>:
 * @brief Dump DHCP configuration for debugging purpose
 * @param[in] context Pointer to the DHCP client context
 **/

void dhcpClientDumpConfig(DhcpClientContext *context)
{
 8002118:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800211c:	4605      	mov	r5, r0
   uint_t j;
   NetInterface *interface;
   Ipv4Context *ipv4Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800211e:	6806      	ldr	r6, [r0, #0]
   //Point to the IPv4 context
   ipv4Context = &interface->ipv4Context;

   //Index of the IP address in the list of addresses assigned to the interface
   i = context->settings.ipAddrIndex;
 8002120:	6847      	ldr	r7, [r0, #4]

   //Debug message
   TRACE_INFO("\r\n");
 8002122:	f7fe fb05 	bl	8000730 <osSuspendAllTasks>
 8002126:	4c56      	ldr	r4, [pc, #344]	@ (8002280 <dhcpClientDumpConfig+0x168>)
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	2202      	movs	r2, #2
 800212e:	2101      	movs	r1, #1
 8002130:	4854      	ldr	r0, [pc, #336]	@ (8002284 <dhcpClientDumpConfig+0x16c>)
 8002132:	f012 fcb3 	bl	8014a9c <fwrite>
 8002136:	f7fe fb04 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("DHCP configuration:\r\n");
 800213a:	f7fe faf9 	bl	8000730 <osSuspendAllTasks>
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2215      	movs	r2, #21
 8002144:	2101      	movs	r1, #1
 8002146:	4850      	ldr	r0, [pc, #320]	@ (8002288 <dhcpClientDumpConfig+0x170>)
 8002148:	f012 fca8 	bl	8014a9c <fwrite>
 800214c:	f7fe faf9 	bl	8000742 <osResumeAllTasks>

   //Lease start time
   TRACE_INFO("  Lease Start Time = %s\r\n",
 8002150:	f7fe faee 	bl	8000730 <osSuspendAllTasks>
 8002154:	6823      	ldr	r3, [r4, #0]
 8002156:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800215a:	2100      	movs	r1, #0
 800215c:	6d68      	ldr	r0, [r5, #84]	@ 0x54
 800215e:	f7fe fa6d 	bl	800063c <formatSystemTime>
 8002162:	4602      	mov	r2, r0
 8002164:	4949      	ldr	r1, [pc, #292]	@ (800228c <dhcpClientDumpConfig+0x174>)
 8002166:	4640      	mov	r0, r8
 8002168:	f012 fa7e 	bl	8014668 <fprintf>
 800216c:	f7fe fae9 	bl	8000742 <osResumeAllTasks>
      formatSystemTime(context->leaseStartTime, NULL));

   //Lease time
   TRACE_INFO("  Lease Time = %" PRIu32 "s\r\n", context->leaseTime);
 8002170:	f7fe fade 	bl	8000730 <osSuspendAllTasks>
 8002174:	6823      	ldr	r3, [r4, #0]
 8002176:	6daa      	ldr	r2, [r5, #88]	@ 0x58
 8002178:	4945      	ldr	r1, [pc, #276]	@ (8002290 <dhcpClientDumpConfig+0x178>)
 800217a:	68d8      	ldr	r0, [r3, #12]
 800217c:	f012 fa74 	bl	8014668 <fprintf>
 8002180:	f7fe fadf 	bl	8000742 <osResumeAllTasks>
   //Renewal time
   TRACE_INFO("  T1 = %" PRIu32 "s\r\n", context->t1);
 8002184:	f7fe fad4 	bl	8000730 <osSuspendAllTasks>
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
 800218c:	4941      	ldr	r1, [pc, #260]	@ (8002294 <dhcpClientDumpConfig+0x17c>)
 800218e:	68d8      	ldr	r0, [r3, #12]
 8002190:	f012 fa6a 	bl	8014668 <fprintf>
 8002194:	f7fe fad5 	bl	8000742 <osResumeAllTasks>
   //Rebinding time
   TRACE_INFO("  T2 = %" PRIu32 "s\r\n", context->t2);
 8002198:	f7fe faca 	bl	8000730 <osSuspendAllTasks>
 800219c:	6823      	ldr	r3, [r4, #0]
 800219e:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 80021a0:	493d      	ldr	r1, [pc, #244]	@ (8002298 <dhcpClientDumpConfig+0x180>)
 80021a2:	68d8      	ldr	r0, [r3, #12]
 80021a4:	f012 fa60 	bl	8014668 <fprintf>
 80021a8:	f7fe facb 	bl	8000742 <osResumeAllTasks>

   //Host address
   TRACE_INFO("  IPv4 Address = %s\r\n",
 80021ac:	f7fe fac0 	bl	8000730 <osSuspendAllTasks>
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80021b6:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 80021ba:	eb06 0888 	add.w	r8, r6, r8, lsl #2
 80021be:	2100      	movs	r1, #0
 80021c0:	f8d8 01a0 	ldr.w	r0, [r8, #416]	@ 0x1a0
 80021c4:	f003 fcfa 	bl	8005bbc <ipv4AddrToString>
 80021c8:	4602      	mov	r2, r0
 80021ca:	4934      	ldr	r1, [pc, #208]	@ (800229c <dhcpClientDumpConfig+0x184>)
 80021cc:	4648      	mov	r0, r9
 80021ce:	f012 fa4b 	bl	8014668 <fprintf>
 80021d2:	f7fe fab6 	bl	8000742 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].addr, NULL));

   //Subnet mask
   TRACE_INFO("  Subnet Mask = %s\r\n",
 80021d6:	f7fe faab 	bl	8000730 <osSuspendAllTasks>
 80021da:	6823      	ldr	r3, [r4, #0]
 80021dc:	f8d3 900c 	ldr.w	r9, [r3, #12]
 80021e0:	2100      	movs	r1, #0
 80021e2:	f8d8 01ac 	ldr.w	r0, [r8, #428]	@ 0x1ac
 80021e6:	f003 fce9 	bl	8005bbc <ipv4AddrToString>
 80021ea:	4602      	mov	r2, r0
 80021ec:	492c      	ldr	r1, [pc, #176]	@ (80022a0 <dhcpClientDumpConfig+0x188>)
 80021ee:	4648      	mov	r0, r9
 80021f0:	f012 fa3a 	bl	8014668 <fprintf>
 80021f4:	f7fe faa5 	bl	8000742 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].subnetMask, NULL));

   //Default gateway
   TRACE_INFO("  Default Gateway = %s\r\n",
 80021f8:	f7fe fa9a 	bl	8000730 <osSuspendAllTasks>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	68dc      	ldr	r4, [r3, #12]
 8002200:	2100      	movs	r1, #0
 8002202:	f8d8 01b0 	ldr.w	r0, [r8, #432]	@ 0x1b0
 8002206:	f003 fcd9 	bl	8005bbc <ipv4AddrToString>
 800220a:	4602      	mov	r2, r0
 800220c:	4925      	ldr	r1, [pc, #148]	@ (80022a4 <dhcpClientDumpConfig+0x18c>)
 800220e:	4620      	mov	r0, r4
 8002210:	f012 fa2a 	bl	8014668 <fprintf>
 8002214:	f7fe fa95 	bl	8000742 <osResumeAllTasks>
      ipv4AddrToString(ipv4Context->addrList[i].defaultGateway, NULL));

   //DNS servers
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8002218:	2400      	movs	r4, #0
 800221a:	e016      	b.n	800224a <dhcpClientDumpConfig+0x132>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", j + 1,
 800221c:	f7fe fa88 	bl	8000730 <osSuspendAllTasks>
 8002220:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <dhcpClientDumpConfig+0x168>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68df      	ldr	r7, [r3, #12]
 8002226:	1c65      	adds	r5, r4, #1
 8002228:	340a      	adds	r4, #10
 800222a:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800222e:	2100      	movs	r1, #0
 8002230:	f8d4 018c 	ldr.w	r0, [r4, #396]	@ 0x18c
 8002234:	f003 fcc2 	bl	8005bbc <ipv4AddrToString>
 8002238:	4603      	mov	r3, r0
 800223a:	462a      	mov	r2, r5
 800223c:	491a      	ldr	r1, [pc, #104]	@ (80022a8 <dhcpClientDumpConfig+0x190>)
 800223e:	4638      	mov	r0, r7
 8002240:	f012 fa12 	bl	8014668 <fprintf>
 8002244:	f7fe fa7d 	bl	8000742 <osResumeAllTasks>
   for(j = 0; j < IPV4_DNS_SERVER_LIST_SIZE; j++)
 8002248:	462c      	mov	r4, r5
 800224a:	2c01      	cmp	r4, #1
 800224c:	d9e6      	bls.n	800221c <dhcpClientDumpConfig+0x104>
         ipv4AddrToString(ipv4Context->dnsServerList[j], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", interface->ipv4Context.linkMtu);
 800224e:	f7fe fa6f 	bl	8000730 <osSuspendAllTasks>
 8002252:	4c0b      	ldr	r4, [pc, #44]	@ (8002280 <dhcpClientDumpConfig+0x168>)
 8002254:	6823      	ldr	r3, [r4, #0]
 8002256:	f8d6 2188 	ldr.w	r2, [r6, #392]	@ 0x188
 800225a:	4914      	ldr	r1, [pc, #80]	@ (80022ac <dhcpClientDumpConfig+0x194>)
 800225c:	68d8      	ldr	r0, [r3, #12]
 800225e:	f012 fa03 	bl	8014668 <fprintf>
 8002262:	f7fe fa6e 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 8002266:	f7fe fa63 	bl	8000730 <osSuspendAllTasks>
 800226a:	6823      	ldr	r3, [r4, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	2202      	movs	r2, #2
 8002270:	2101      	movs	r1, #1
 8002272:	4804      	ldr	r0, [pc, #16]	@ (8002284 <dhcpClientDumpConfig+0x16c>)
 8002274:	f012 fc12 	bl	8014a9c <fwrite>
 8002278:	f7fe fa63 	bl	8000742 <osResumeAllTasks>
#endif
}
 800227c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002280:	20000440 	.word	0x20000440
 8002284:	0801a310 	.word	0x0801a310
 8002288:	0801a158 	.word	0x0801a158
 800228c:	0801a170 	.word	0x0801a170
 8002290:	0801a18c 	.word	0x0801a18c
 8002294:	0801a1a4 	.word	0x0801a1a4
 8002298:	0801a1b4 	.word	0x0801a1b4
 800229c:	0801a1c4 	.word	0x0801a1c4
 80022a0:	0801a1dc 	.word	0x0801a1dc
 80022a4:	0801a1f4 	.word	0x0801a1f4
 80022a8:	0801a210 	.word	0x0801a210
 80022ac:	0801a228 	.word	0x0801a228

080022b0 <dhcpAddOption>:
 * @return Error code
 **/

error_t dhcpAddOption(DhcpMessage *message, size_t *messageLen,
   uint8_t optionCode, const void *optionValue, size_t optionLen)
{
 80022b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022b2:	4694      	mov	ip, r2
 80022b4:	9a06      	ldr	r2, [sp, #24]
   size_t n;
   DhcpOption *option;

   //Check parameters
   if(message == NULL || messageLen == NULL)
 80022b6:	2900      	cmp	r1, #0
 80022b8:	bf18      	it	ne
 80022ba:	2800      	cmpne	r0, #0
 80022bc:	d028      	beq.n	8002310 <dhcpAddOption+0x60>
 80022be:	4606      	mov	r6, r0
 80022c0:	460d      	mov	r5, r1
      return ERROR_INVALID_PARAMETER;

   //Check the length of the DHCP message
   if(*messageLen < (sizeof(DhcpMessage) + sizeof(uint8_t)))
 80022c2:	680c      	ldr	r4, [r1, #0]
 80022c4:	2cf0      	cmp	r4, #240	@ 0xf0
 80022c6:	d925      	bls.n	8002314 <dhcpAddOption+0x64>
      return ERROR_INVALID_LENGTH;

   //Check the length of the option
   if(optionLen > 0 && optionValue == NULL)
 80022c8:	1e11      	subs	r1, r2, #0
 80022ca:	bf18      	it	ne
 80022cc:	2101      	movne	r1, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf18      	it	ne
 80022d2:	2100      	movne	r1, #0
 80022d4:	bb01      	cbnz	r1, 8002318 <dhcpAddOption+0x68>
      return ERROR_INVALID_PARAMETER;

   if(optionLen > UINT8_MAX)
 80022d6:	2aff      	cmp	r2, #255	@ 0xff
 80022d8:	d820      	bhi.n	800231c <dhcpAddOption+0x6c>
      return ERROR_INVALID_LENGTH;

   //Ensure that the length of the resulting message will not exceed the
   //maximum DHCP message size
   if((*messageLen + sizeof(DhcpOption) + optionLen) > DHCP_MAX_MSG_SIZE)
 80022da:	18a1      	adds	r1, r4, r2
 80022dc:	3102      	adds	r1, #2
 80022de:	f5b1 7f09 	cmp.w	r1, #548	@ 0x224
 80022e2:	d81d      	bhi.n	8002320 <dhcpAddOption+0x70>
      return ERROR_BUFFER_OVERFLOW;

   //Retrieve the total length of the options field, excluding the end option
   n = *messageLen - sizeof(DhcpMessage) - sizeof(uint8_t);
 80022e4:	3cf1      	subs	r4, #241	@ 0xf1

   //Point to the buffer where to format the option
   option = (DhcpOption *) (message->options + n);
 80022e6:	f100 01f0 	add.w	r1, r0, #240	@ 0xf0
 80022ea:	1908      	adds	r0, r1, r4

   //Set option code
   option->code = optionCode;
 80022ec:	f801 c004 	strb.w	ip, [r1, r4]
   //Set option length
   option->length = (uint8_t) optionLen;
 80022f0:	b2d7      	uxtb	r7, r2
 80022f2:	7047      	strb	r7, [r0, #1]
   //Copy option value
   osMemcpy(option->value, optionValue, optionLen);
 80022f4:	4619      	mov	r1, r3
 80022f6:	3002      	adds	r0, #2
 80022f8:	f012 fdd0 	bl	8014e9c <memcpy>

   //Determine the length of the options field
   n += sizeof(DhcpOption) + option->length;
 80022fc:	4427      	add	r7, r4
 80022fe:	1cbb      	adds	r3, r7, #2

   //Always terminate the options field with 255
   message->options[n++] = DHCP_OPT_END;
 8002300:	441e      	add	r6, r3
 8002302:	23ff      	movs	r3, #255	@ 0xff
 8002304:	f886 30f0 	strb.w	r3, [r6, #240]	@ 0xf0

   //Update the length of the DHCPv6 message
   *messageLen = sizeof(DhcpMessage) + n;
 8002308:	37f3      	adds	r7, #243	@ 0xf3
 800230a:	602f      	str	r7, [r5, #0]

   //Successful processing
   return NO_ERROR;
 800230c:	2000      	movs	r0, #0
}
 800230e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return ERROR_INVALID_PARAMETER;
 8002310:	2002      	movs	r0, #2
 8002312:	e7fc      	b.n	800230e <dhcpAddOption+0x5e>
      return ERROR_INVALID_LENGTH;
 8002314:	20ec      	movs	r0, #236	@ 0xec
 8002316:	e7fa      	b.n	800230e <dhcpAddOption+0x5e>
      return ERROR_INVALID_PARAMETER;
 8002318:	2002      	movs	r0, #2
 800231a:	e7f8      	b.n	800230e <dhcpAddOption+0x5e>
      return ERROR_INVALID_LENGTH;
 800231c:	20ec      	movs	r0, #236	@ 0xec
 800231e:	e7f6      	b.n	800230e <dhcpAddOption+0x5e>
      return ERROR_BUFFER_OVERFLOW;
 8002320:	f240 100b 	movw	r0, #267	@ 0x10b
 8002324:	e7f3      	b.n	800230e <dhcpAddOption+0x5e>

08002326 <dhcpGetOption>:
{
   size_t i;
   DhcpOption *option;

   //Make sure the DHCP header is valid
   if(length >= sizeof(DhcpMessage))
 8002326:	29ef      	cmp	r1, #239	@ 0xef
 8002328:	d91e      	bls.n	8002368 <dhcpGetOption+0x42>
{
 800232a:	b510      	push	{r4, lr}
 800232c:	4686      	mov	lr, r0
   {
      //Get the length of the options field
      length -= sizeof(DhcpMessage);
 800232e:	f1a1 0cf0 	sub.w	ip, r1, #240	@ 0xf0

      //Loop through the list of options
      for(i = 0; i < length; i++)
 8002332:	2300      	movs	r3, #0
 8002334:	e000      	b.n	8002338 <dhcpGetOption+0x12>
 8002336:	3301      	adds	r3, #1
 8002338:	4563      	cmp	r3, ip
 800233a:	d213      	bcs.n	8002364 <dhcpGetOption+0x3e>
      {
         //Point to the current option
         option = (DhcpOption *) (message->options + i);
 800233c:	f10e 01f0 	add.w	r1, lr, #240	@ 0xf0
 8002340:	18c8      	adds	r0, r1, r3

         //Check option code
         if(option->code == DHCP_OPT_PAD)
 8002342:	5cc9      	ldrb	r1, [r1, r3]
 8002344:	2900      	cmp	r1, #0
 8002346:	d0f6      	beq.n	8002336 <dhcpGetOption+0x10>
         {
            //The pad option can be used to cause subsequent fields to align
            //on word boundaries
         }
         else if(option->code == DHCP_OPT_END)
 8002348:	29ff      	cmp	r1, #255	@ 0xff
 800234a:	d00f      	beq.n	800236c <dhcpGetOption+0x46>
            break;
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 800234c:	1c5c      	adds	r4, r3, #1
 800234e:	4564      	cmp	r4, ip
 8002350:	d20e      	bcs.n	8002370 <dhcpGetOption+0x4a>
            {
               break;
            }

            //Check the length of the option
            if((i + sizeof(DhcpOption) + option->length) > length)
 8002352:	7844      	ldrb	r4, [r0, #1]
 8002354:	4423      	add	r3, r4
 8002356:	1c9c      	adds	r4, r3, #2
 8002358:	4564      	cmp	r4, ip
 800235a:	d80b      	bhi.n	8002374 <dhcpGetOption+0x4e>
            {
               break;
            }

            //Matching option code?
            if(option->code == optionCode)
 800235c:	4291      	cmp	r1, r2
 800235e:	d002      	beq.n	8002366 <dhcpGetOption+0x40>
            {
               return option;
            }

            //Jump to the next option
            i += option->length + 1;
 8002360:	3301      	adds	r3, #1
 8002362:	e7e8      	b.n	8002336 <dhcpGetOption+0x10>
         }
      }
   }

   //The specified option code was not found
   return NULL;
 8002364:	2000      	movs	r0, #0
}
 8002366:	bd10      	pop	{r4, pc}
   return NULL;
 8002368:	2000      	movs	r0, #0
}
 800236a:	4770      	bx	lr
   return NULL;
 800236c:	2000      	movs	r0, #0
 800236e:	e7fa      	b.n	8002366 <dhcpGetOption+0x40>
 8002370:	2000      	movs	r0, #0
 8002372:	e7f8      	b.n	8002366 <dhcpGetOption+0x40>
 8002374:	2000      	movs	r0, #0
 8002376:	e7f6      	b.n	8002366 <dhcpGetOption+0x40>

08002378 <dnsInit>:
 * @brief DNS cache initialization
 * @return Error code
 **/

error_t dnsInit(void)
{
 8002378:	b508      	push	{r3, lr}
   //Initialize DNS cache
   osMemset(dnsCache, 0, sizeof(dnsCache));
 800237a:	f44f 7268 	mov.w	r2, #928	@ 0x3a0
 800237e:	2100      	movs	r1, #0
 8002380:	4802      	ldr	r0, [pc, #8]	@ (800238c <dnsInit+0x14>)
 8002382:	f012 fc7f 	bl	8014c84 <memset>

   //Successful initialization
   return NO_ERROR;
}
 8002386:	2000      	movs	r0, #0
 8002388:	bd08      	pop	{r3, pc}
 800238a:	bf00      	nop
 800238c:	2000075c 	.word	0x2000075c

08002390 <dnsDeleteEntry>:
 **/

void dnsDeleteEntry(DnsCacheEntry *entry)
{
   //Make sure the specified entry is valid
   if(entry != NULL)
 8002390:	b188      	cbz	r0, 80023b6 <dnsDeleteEntry+0x26>
{
 8002392:	b510      	push	{r4, lr}
 8002394:	4604      	mov	r4, r0
   {
#if (DNS_CLIENT_SUPPORT == ENABLED || LLMNR_CLIENT_SUPPORT == ENABLED)
      //DNS or LLMNR resolver?
      if(entry->protocol == HOST_NAME_RESOLVER_DNS ||
 8002396:	7883      	ldrb	r3, [r0, #2]
 8002398:	2b08      	cmp	r3, #8
 800239a:	bf18      	it	ne
 800239c:	2b01      	cmpne	r3, #1
 800239e:	d102      	bne.n	80023a6 <dnsDeleteEntry+0x16>
         entry->protocol == HOST_NAME_RESOLVER_LLMNR)
      {
         //Name resolution in progress?
         if(entry->state == DNS_STATE_IN_PROGRESS)
 80023a0:	7803      	ldrb	r3, [r0, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d002      	beq.n	80023ac <dnsDeleteEntry+0x1c>
            udpDetachRxCallback(entry->interface, entry->port);
         }
      }
#endif
      //Delete DNS cache entry
      entry->state = DNS_STATE_NONE;
 80023a6:	2300      	movs	r3, #0
 80023a8:	7023      	strb	r3, [r4, #0]
   }
}
 80023aa:	bd10      	pop	{r4, pc}
            udpDetachRxCallback(entry->interface, entry->port);
 80023ac:	8981      	ldrh	r1, [r0, #12]
 80023ae:	6840      	ldr	r0, [r0, #4]
 80023b0:	f00e fc6c 	bl	8010c8c <udpDetachRxCallback>
 80023b4:	e7f7      	b.n	80023a6 <dnsDeleteEntry+0x16>
 80023b6:	4770      	bx	lr

080023b8 <dnsFlushCache>:
{
 80023b8:	b538      	push	{r3, r4, r5, lr}
 80023ba:	4605      	mov	r5, r0
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80023bc:	2400      	movs	r4, #0
 80023be:	e000      	b.n	80023c2 <dnsFlushCache+0xa>
 80023c0:	3401      	adds	r4, #1
 80023c2:	2c07      	cmp	r4, #7
 80023c4:	d80d      	bhi.n	80023e2 <dnsFlushCache+0x2a>
      entry = &dnsCache[i];
 80023c6:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <dnsFlushCache+0x2c>)
 80023c8:	2374      	movs	r3, #116	@ 0x74
 80023ca:	fb04 f303 	mul.w	r3, r4, r3
 80023ce:	18d0      	adds	r0, r2, r3
      if(entry->state != DNS_STATE_NONE)
 80023d0:	5cd3      	ldrb	r3, [r2, r3]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f4      	beq.n	80023c0 <dnsFlushCache+0x8>
         if(entry->interface == interface)
 80023d6:	6843      	ldr	r3, [r0, #4]
 80023d8:	42ab      	cmp	r3, r5
 80023da:	d1f1      	bne.n	80023c0 <dnsFlushCache+0x8>
            dnsDeleteEntry(entry);
 80023dc:	f7ff ffd8 	bl	8002390 <dnsDeleteEntry>
 80023e0:	e7ee      	b.n	80023c0 <dnsFlushCache+0x8>
}
 80023e2:	bd38      	pop	{r3, r4, r5, pc}
 80023e4:	2000075c 	.word	0x2000075c

080023e8 <dnsCreateEntry>:
{
 80023e8:	b538      	push	{r3, r4, r5, lr}
   time = osGetSystemTime();
 80023ea:	f7fe fa07 	bl	80007fc <osGetSystemTime>
   oldestEntry = &dnsCache[0];
 80023ee:	4c15      	ldr	r4, [pc, #84]	@ (8002444 <dnsCreateEntry+0x5c>)
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80023f0:	2300      	movs	r3, #0
 80023f2:	e007      	b.n	8002404 <dnsCreateEntry+0x1c>
         osMemset(entry, 0, sizeof(DnsCacheEntry));
 80023f4:	2274      	movs	r2, #116	@ 0x74
 80023f6:	2100      	movs	r1, #0
 80023f8:	4628      	mov	r0, r5
 80023fa:	f012 fc43 	bl	8014c84 <memset>
         return entry;
 80023fe:	462c      	mov	r4, r5
 8002400:	e01e      	b.n	8002440 <dnsCreateEntry+0x58>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8002402:	3301      	adds	r3, #1
 8002404:	2b07      	cmp	r3, #7
 8002406:	d813      	bhi.n	8002430 <dnsCreateEntry+0x48>
      entry = &dnsCache[i];
 8002408:	490e      	ldr	r1, [pc, #56]	@ (8002444 <dnsCreateEntry+0x5c>)
 800240a:	2274      	movs	r2, #116	@ 0x74
 800240c:	fb03 f202 	mul.w	r2, r3, r2
 8002410:	188d      	adds	r5, r1, r2
      if(entry->state == DNS_STATE_NONE)
 8002412:	5c8a      	ldrb	r2, [r1, r2]
 8002414:	2a00      	cmp	r2, #0
 8002416:	d0ed      	beq.n	80023f4 <dnsCreateEntry+0xc>
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <dnsCreateEntry+0x5c>)
 800241a:	2174      	movs	r1, #116	@ 0x74
 800241c:	fb01 2203 	mla	r2, r1, r3, r2
 8002420:	6e51      	ldr	r1, [r2, #100]	@ 0x64
 8002422:	1a41      	subs	r1, r0, r1
 8002424:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002426:	1a82      	subs	r2, r0, r2
 8002428:	4291      	cmp	r1, r2
 800242a:	d9ea      	bls.n	8002402 <dnsCreateEntry+0x1a>
         oldestEntry = entry;
 800242c:	462c      	mov	r4, r5
 800242e:	e7e8      	b.n	8002402 <dnsCreateEntry+0x1a>
   dnsDeleteEntry(oldestEntry);
 8002430:	4620      	mov	r0, r4
 8002432:	f7ff ffad 	bl	8002390 <dnsDeleteEntry>
   osMemset(oldestEntry, 0, sizeof(DnsCacheEntry));
 8002436:	2274      	movs	r2, #116	@ 0x74
 8002438:	2100      	movs	r1, #0
 800243a:	4620      	mov	r0, r4
 800243c:	f012 fc22 	bl	8014c84 <memset>
}
 8002440:	4620      	mov	r0, r4
 8002442:	bd38      	pop	{r3, r4, r5, pc}
 8002444:	2000075c 	.word	0x2000075c

08002448 <dnsFindEntry>:
 *   if the specified domain name could not be found in the DNS cache
 **/

DnsCacheEntry *dnsFindEntry(NetInterface *interface,
   const char_t *name, HostType type, HostnameResolver protocol)
{
 8002448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800244c:	4606      	mov	r6, r0
 800244e:	4689      	mov	r9, r1
 8002450:	4617      	mov	r7, r2
 8002452:	4698      	mov	r8, r3
   uint_t i;
   DnsCacheEntry *entry;

   //Loop through DNS cache entries
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8002454:	2400      	movs	r4, #0
 8002456:	e00d      	b.n	8002474 <dnsFindEntry+0x2c>
         continue;
      if(entry->protocol != protocol && protocol != HOST_NAME_RESOLVER_ANY)
         continue;

      //Does the entry match the specified domain name?
      if(name == NULL || osStrcasecmp(entry->name, name) == 0)
 8002458:	f1b9 0f00 	cmp.w	r9, #0
 800245c:	d02e      	beq.n	80024bc <dnsFindEntry+0x74>
 800245e:	2374      	movs	r3, #116	@ 0x74
 8002460:	fb04 f303 	mul.w	r3, r4, r3
 8002464:	3310      	adds	r3, #16
 8002466:	4649      	mov	r1, r9
 8002468:	4816      	ldr	r0, [pc, #88]	@ (80024c4 <dnsFindEntry+0x7c>)
 800246a:	4418      	add	r0, r3
 800246c:	f012 fc12 	bl	8014c94 <strcasecmp>
 8002470:	b320      	cbz	r0, 80024bc <dnsFindEntry+0x74>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8002472:	3401      	adds	r4, #1
 8002474:	2c07      	cmp	r4, #7
 8002476:	d81f      	bhi.n	80024b8 <dnsFindEntry+0x70>
      entry = &dnsCache[i];
 8002478:	4d12      	ldr	r5, [pc, #72]	@ (80024c4 <dnsFindEntry+0x7c>)
 800247a:	f04f 0c74 	mov.w	ip, #116	@ 0x74
 800247e:	fb0c fc04 	mul.w	ip, ip, r4
 8002482:	eb05 0a0c 	add.w	sl, r5, ip
      if(entry->state == DNS_STATE_NONE)
 8002486:	f815 300c 	ldrb.w	r3, [r5, ip]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f1      	beq.n	8002472 <dnsFindEntry+0x2a>
      if(entry->interface != interface)
 800248e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8002492:	42b3      	cmp	r3, r6
 8002494:	d1ed      	bne.n	8002472 <dnsFindEntry+0x2a>
      if(entry->type != type && type != HOST_TYPE_ANY)
 8002496:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800249a:	42bb      	cmp	r3, r7
 800249c:	d001      	beq.n	80024a2 <dnsFindEntry+0x5a>
 800249e:	2f00      	cmp	r7, #0
 80024a0:	d1e7      	bne.n	8002472 <dnsFindEntry+0x2a>
      if(entry->protocol != protocol && protocol != HOST_NAME_RESOLVER_ANY)
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <dnsFindEntry+0x7c>)
 80024a4:	2274      	movs	r2, #116	@ 0x74
 80024a6:	fb02 3304 	mla	r3, r2, r4, r3
 80024aa:	789b      	ldrb	r3, [r3, #2]
 80024ac:	4543      	cmp	r3, r8
 80024ae:	d0d3      	beq.n	8002458 <dnsFindEntry+0x10>
 80024b0:	f1b8 0f00 	cmp.w	r8, #0
 80024b4:	d0d0      	beq.n	8002458 <dnsFindEntry+0x10>
 80024b6:	e7dc      	b.n	8002472 <dnsFindEntry+0x2a>
         return entry;
   }

   //No matching entry in the DNS cache
   return NULL;
 80024b8:	f04f 0a00 	mov.w	sl, #0
}
 80024bc:	4650      	mov	r0, sl
 80024be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024c2:	bf00      	nop
 80024c4:	2000075c 	.word	0x2000075c

080024c8 <dnsTick>:
 * manage DNS cache
 *
 **/

void dnsTick(void)
{
 80024c8:	b570      	push	{r4, r5, r6, lr}
   uint_t i;
   systime_t time;
   DnsCacheEntry *entry;

   //Get current time
   time = osGetSystemTime();
 80024ca:	f7fe f997 	bl	80007fc <osGetSystemTime>
 80024ce:	4605      	mov	r5, r0

   //Go through DNS cache
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80024d0:	2400      	movs	r4, #0
 80024d2:	e011      	b.n	80024f8 <dnsTick+0x30>

      //Name resolution in progress?
      if(entry->state == DNS_STATE_IN_PROGRESS)
      {
         //The request timed out?
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 80024d4:	6e73      	ldr	r3, [r6, #100]	@ 0x64
 80024d6:	6eb2      	ldr	r2, [r6, #104]	@ 0x68
 80024d8:	4413      	add	r3, r2
 80024da:	1aeb      	subs	r3, r5, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	db0a      	blt.n	80024f6 <dnsTick+0x2e>
         {
            //Check whether the maximum number of retransmissions has been exceeded
            if(entry->retransmitCount > 0)
 80024e0:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d03b      	beq.n	800255e <dnsTick+0x96>
            {
#if (DNS_CLIENT_SUPPORT == ENABLED)
               //DNS resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 80024e6:	78b3      	ldrb	r3, [r6, #2]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d01f      	beq.n	800252c <dnsTick+0x64>
               }
               else
#endif
#if (NBNS_CLIENT_SUPPORT == ENABLED && IPV4_SUPPORT == ENABLED)
               //NetBIOS Name Service resolver?
               if(entry->protocol == HOST_NAME_RESOLVER_NBNS)
 80024ec:	2b04      	cmp	r3, #4
 80024ee:	d032      	beq.n	8002556 <dnsTick+0x8e>
                  entry->retransmitCount--;
               }
               else
               {
                  //The entry should be deleted since name resolution has failed
                  dnsDeleteEntry(entry);
 80024f0:	4630      	mov	r0, r6
 80024f2:	f7ff ff4d 	bl	8002390 <dnsDeleteEntry>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 80024f6:	3401      	adds	r4, #1
 80024f8:	2c07      	cmp	r4, #7
 80024fa:	d83f      	bhi.n	800257c <dnsTick+0xb4>
      entry = &dnsCache[i];
 80024fc:	4a20      	ldr	r2, [pc, #128]	@ (8002580 <dnsTick+0xb8>)
 80024fe:	2374      	movs	r3, #116	@ 0x74
 8002500:	fb04 f303 	mul.w	r3, r4, r3
 8002504:	18d6      	adds	r6, r2, r3
      if(entry->state == DNS_STATE_IN_PROGRESS)
 8002506:	5cd3      	ldrb	r3, [r2, r3]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d0e3      	beq.n	80024d4 <dnsTick+0xc>
               dnsDeleteEntry(entry);
            }
         }
      }
      //Name successfully resolved?
      else if(entry->state == DNS_STATE_RESOLVED)
 800250c:	2b02      	cmp	r3, #2
 800250e:	d1f2      	bne.n	80024f6 <dnsTick+0x2e>
      {
         //Check the lifetime of the current DNS cache entry
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 8002510:	4a1b      	ldr	r2, [pc, #108]	@ (8002580 <dnsTick+0xb8>)
 8002512:	2374      	movs	r3, #116	@ 0x74
 8002514:	fb03 2204 	mla	r2, r3, r4, r2
 8002518:	6e53      	ldr	r3, [r2, #100]	@ 0x64
 800251a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800251c:	4413      	add	r3, r2
 800251e:	1aeb      	subs	r3, r5, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	dbe8      	blt.n	80024f6 <dnsTick+0x2e>
         {
            //Periodically time out DNS cache entries
            dnsDeleteEntry(entry);
 8002524:	4630      	mov	r0, r6
 8002526:	f7ff ff33 	bl	8002390 <dnsDeleteEntry>
 800252a:	e7e4      	b.n	80024f6 <dnsTick+0x2e>
                  error = dnsSendQuery(entry);
 800252c:	4630      	mov	r0, r6
 800252e:	f000 f829 	bl	8002584 <dnsSendQuery>
               if(!error)
 8002532:	2800      	cmp	r0, #0
 8002534:	d1dc      	bne.n	80024f0 <dnsTick+0x28>
                  entry->timestamp = time;
 8002536:	4b12      	ldr	r3, [pc, #72]	@ (8002580 <dnsTick+0xb8>)
 8002538:	2274      	movs	r2, #116	@ 0x74
 800253a:	fb02 3304 	mla	r3, r2, r4, r3
 800253e:	665d      	str	r5, [r3, #100]	@ 0x64
                  entry->timeout = MIN(entry->timeout * 2, entry->maxTimeout);
 8002540:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8002542:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002544:	0052      	lsls	r2, r2, #1
 8002546:	428a      	cmp	r2, r1
 8002548:	bf28      	it	cs
 800254a:	460a      	movcs	r2, r1
 800254c:	669a      	str	r2, [r3, #104]	@ 0x68
                  entry->retransmitCount--;
 800254e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002550:	3a01      	subs	r2, #1
 8002552:	671a      	str	r2, [r3, #112]	@ 0x70
 8002554:	e7cf      	b.n	80024f6 <dnsTick+0x2e>
                  error = nbnsSendQuery(entry);
 8002556:	4630      	mov	r0, r6
 8002558:	f007 facc 	bl	8009af4 <nbnsSendQuery>
 800255c:	e7e9      	b.n	8002532 <dnsTick+0x6a>
            else if(entry->protocol == HOST_NAME_RESOLVER_DNS)
 800255e:	4b08      	ldr	r3, [pc, #32]	@ (8002580 <dnsTick+0xb8>)
 8002560:	2274      	movs	r2, #116	@ 0x74
 8002562:	fb02 3304 	mla	r3, r2, r4, r3
 8002566:	789b      	ldrb	r3, [r3, #2]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d003      	beq.n	8002574 <dnsTick+0xac>
               dnsDeleteEntry(entry);
 800256c:	4630      	mov	r0, r6
 800256e:	f7ff ff0f 	bl	8002390 <dnsDeleteEntry>
 8002572:	e7c0      	b.n	80024f6 <dnsTick+0x2e>
               dnsSelectNextServer(entry);
 8002574:	4630      	mov	r0, r6
 8002576:	f000 f9a1 	bl	80028bc <dnsSelectNextServer>
 800257a:	e7bc      	b.n	80024f6 <dnsTick+0x2e>
         }
      }
   }
}
 800257c:	bd70      	pop	{r4, r5, r6, pc}
 800257e:	bf00      	nop
 8002580:	2000075c 	.word	0x2000075c

08002584 <dnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t dnsSendQuery(DnsCacheEntry *entry)
{
 8002584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002586:	b093      	sub	sp, #76	@ 0x4c
 8002588:	4604      	mov	r4, r0
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 800258a:	7843      	ldrb	r3, [r0, #1]
 800258c:	2b10      	cmp	r3, #16
 800258e:	d01c      	beq.n	80025ca <dnsSendQuery+0x46>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //An IPv6 address is expected?
   if(entry->type == HOST_TYPE_IPV6)
 8002590:	2b20      	cmp	r3, #32
 8002592:	f040 80b7 	bne.w	8002704 <dnsSendQuery+0x180>
   {
      //Point to the IPv6 context
      Ipv6Context *ipv6Context = &entry->interface->ipv6Context;
 8002596:	6845      	ldr	r5, [r0, #4]

      //Select the relevant DNS server
      while(1)
      {
         //Out of range index?
         if(entry->dnsServerIndex >= IPV6_DNS_SERVER_LIST_SIZE)
 8002598:	68a3      	ldr	r3, [r4, #8]
 800259a:	2b01      	cmp	r3, #1
 800259c:	f200 80b4 	bhi.w	8002708 <dnsSendQuery+0x184>
            return ERROR_NO_DNS_SERVER;

         //Copy the address of the DNS server
         destIpAddr.length = sizeof(Ipv6Addr);
 80025a0:	2610      	movs	r6, #16
 80025a2:	960c      	str	r6, [sp, #48]	@ 0x30
         destIpAddr.ipv6Addr = ipv6Context->dnsServerList[entry->dnsServerIndex];
 80025a4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80025a8:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 80025ac:	f503 630f 	add.w	r3, r3, #2288	@ 0x8f0
 80025b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025b2:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

         //Make sure the IP address is valid
         if(!ipv6CompAddr(&destIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR))
 80025b6:	4632      	mov	r2, r6
 80025b8:	4956      	ldr	r1, [pc, #344]	@ (8002714 <dnsSendQuery+0x190>)
 80025ba:	4660      	mov	r0, ip
 80025bc:	f012 fb38 	bl	8014c30 <memcmp>
 80025c0:	b9a8      	cbnz	r0, 80025ee <dnsSendQuery+0x6a>
            break;

         //Select the next DNS server in the list
         entry->dnsServerIndex++;
 80025c2:	68a3      	ldr	r3, [r4, #8]
 80025c4:	3301      	adds	r3, #1
 80025c6:	60a3      	str	r3, [r4, #8]
         if(entry->dnsServerIndex >= IPV6_DNS_SERVER_LIST_SIZE)
 80025c8:	e7e6      	b.n	8002598 <dnsSendQuery+0x14>
      Ipv4Context *ipv4Context = &entry->interface->ipv4Context;
 80025ca:	6841      	ldr	r1, [r0, #4]
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 80025cc:	68a3      	ldr	r3, [r4, #8]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	f200 8095 	bhi.w	80026fe <dnsSendQuery+0x17a>
         destIpAddr.length = sizeof(Ipv4Addr);
 80025d4:	2204      	movs	r2, #4
 80025d6:	920c      	str	r2, [sp, #48]	@ 0x30
         destIpAddr.ipv4Addr = ipv4Context->dnsServerList[entry->dnsServerIndex];
 80025d8:	f103 020a 	add.w	r2, r3, #10
 80025dc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80025e0:	f8d2 218c 	ldr.w	r2, [r2, #396]	@ 0x18c
 80025e4:	920d      	str	r2, [sp, #52]	@ 0x34
         if(destIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR)
 80025e6:	b912      	cbnz	r2, 80025ee <dnsSendQuery+0x6a>
         entry->dnsServerIndex++;
 80025e8:	3301      	adds	r3, #1
 80025ea:	60a3      	str	r3, [r4, #8]
         if(entry->dnsServerIndex >= IPV4_DNS_SERVER_LIST_SIZE)
 80025ec:	e7ee      	b.n	80025cc <dnsSendQuery+0x48>
      //Report an error
      return ERROR_INVALID_PARAMETER;
   }

   //Allocate a memory buffer to hold the DNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 80025ee:	a911      	add	r1, sp, #68	@ 0x44
 80025f0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80025f4:	f00e f9ee 	bl	80109d4 <udpAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 80025f8:	4607      	mov	r7, r0
 80025fa:	2800      	cmp	r0, #0
 80025fc:	f000 8087 	beq.w	800270e <dnsSendQuery+0x18a>
      return ERROR_OUT_OF_MEMORY;

   //Point to the DNS header
   message = netBufferAt(buffer, offset, 0);
 8002600:	2200      	movs	r2, #0
 8002602:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8002604:	f009 fdd8 	bl	800c1b8 <netBufferAt>
 8002608:	4605      	mov	r5, r0

   //Format DNS query message
   message->id = htons(entry->id);
 800260a:	89e0      	ldrh	r0, [r4, #14]
 800260c:	f7fe f806 	bl	800061c <swapInt16>
 8002610:	8028      	strh	r0, [r5, #0]
   message->qr = 0;
 8002612:	78ab      	ldrb	r3, [r5, #2]
 8002614:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002618:	70ab      	strb	r3, [r5, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8002620:	70ab      	strb	r3, [r5, #2]
   message->aa = 0;
 8002622:	b2db      	uxtb	r3, r3
 8002624:	f023 0304 	bic.w	r3, r3, #4
 8002628:	70ab      	strb	r3, [r5, #2]
   message->tc = 0;
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f023 0302 	bic.w	r3, r3, #2
 8002630:	70ab      	strb	r3, [r5, #2]
   message->rd = 1;
 8002632:	b2db      	uxtb	r3, r3
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	70ab      	strb	r3, [r5, #2]
   message->ra = 0;
 800263a:	78eb      	ldrb	r3, [r5, #3]
 800263c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002640:	70eb      	strb	r3, [r5, #3]
   message->z = 0;
 8002642:	b2db      	uxtb	r3, r3
 8002644:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002648:	70eb      	strb	r3, [r5, #3]
   message->rcode = DNS_RCODE_NOERROR;
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f023 030f 	bic.w	r3, r3, #15
 8002650:	70eb      	strb	r3, [r5, #3]

   //The DNS query contains one question
   message->qdcount = HTONS(1);
 8002652:	2300      	movs	r3, #0
 8002654:	712b      	strb	r3, [r5, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	716a      	strb	r2, [r5, #5]
   message->ancount = 0;
 800265a:	71ab      	strb	r3, [r5, #6]
 800265c:	71eb      	strb	r3, [r5, #7]
   message->nscount = 0;
 800265e:	722b      	strb	r3, [r5, #8]
 8002660:	726b      	strb	r3, [r5, #9]
   message->arcount = 0;
 8002662:	72ab      	strb	r3, [r5, #10]
 8002664:	72eb      	strb	r3, [r5, #11]

   //Length of the DNS query message
   length = sizeof(DnsHeader);

   //Encode the host name using the DNS name notation
   length += dnsEncodeName(entry->name, message->questions);
 8002666:	f105 010c 	add.w	r1, r5, #12
 800266a:	f104 0010 	add.w	r0, r4, #16
 800266e:	f000 faa5 	bl	8002bbc <dnsEncodeName>
 8002672:	f100 020c 	add.w	r2, r0, #12

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8002676:	18ab      	adds	r3, r5, r2

#if (IPV4_SUPPORT == ENABLED)
   //An IPv4 address is expected?
   if(entry->type == HOST_TYPE_IPV4)
 8002678:	7861      	ldrb	r1, [r4, #1]
 800267a:	2910      	cmp	r1, #16
 800267c:	d030      	beq.n	80026e0 <dnsSendQuery+0x15c>
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif
#if (IPV6_SUPPORT == ENABLED)
   //An IPv6 address is expected?
   if(entry->type == HOST_TYPE_IPV6)
 800267e:	7861      	ldrb	r1, [r4, #1]
 8002680:	2920      	cmp	r1, #32
 8002682:	d034      	beq.n	80026ee <dnsSendQuery+0x16a>
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
   }
#endif

   //Update the length of the DNS query message
   length += sizeof(DnsQuestion);
 8002684:	f100 0510 	add.w	r5, r0, #16

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8002688:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800268a:	4429      	add	r1, r5
 800268c:	4638      	mov	r0, r7
 800268e:	f009 fd00 	bl	800c092 <netBufferSetLength>

   //Debug message
   TRACE_INFO("Sending DNS message (%" PRIuSIZE " bytes)...\r\n", length);
 8002692:	f7fe f84d 	bl	8000730 <osSuspendAllTasks>
 8002696:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <dnsSendQuery+0x194>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	462a      	mov	r2, r5
 800269c:	491f      	ldr	r1, [pc, #124]	@ (800271c <dnsSendQuery+0x198>)
 800269e:	68d8      	ldr	r0, [r3, #12]
 80026a0:	f011 ffe2 	bl	8014668 <fprintf>
 80026a4:	f7fe f84d 	bl	8000742 <osResumeAllTasks>
   //Dump message
   dnsDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 80026a8:	ad04      	add	r5, sp, #16
 80026aa:	4e1d      	ldr	r6, [pc, #116]	@ (8002720 <dnsSendQuery+0x19c>)
 80026ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80026b4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}

   //Send DNS query message
   error = udpSendBuffer(entry->interface, NULL, entry->port, &destIpAddr,
 80026b8:	ab04      	add	r3, sp, #16
 80026ba:	9303      	str	r3, [sp, #12]
 80026bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	9701      	str	r7, [sp, #4]
 80026c2:	2335      	movs	r3, #53	@ 0x35
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80026c8:	89a2      	ldrh	r2, [r4, #12]
 80026ca:	2100      	movs	r1, #0
 80026cc:	6860      	ldr	r0, [r4, #4]
 80026ce:	f00e f8b1 	bl	8010834 <udpSendBuffer>
 80026d2:	4604      	mov	r4, r0
      DNS_PORT, buffer, offset, &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 80026d4:	4638      	mov	r0, r7
 80026d6:	f009 fd47 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 80026da:	4620      	mov	r0, r4
 80026dc:	b013      	add	sp, #76	@ 0x4c
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_A);
 80026e0:	2600      	movs	r6, #0
 80026e2:	54ae      	strb	r6, [r5, r2]
 80026e4:	2101      	movs	r1, #1
 80026e6:	7059      	strb	r1, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 80026e8:	709e      	strb	r6, [r3, #2]
 80026ea:	70d9      	strb	r1, [r3, #3]
 80026ec:	e7c7      	b.n	800267e <dnsSendQuery+0xfa>
      dnsQuestion->qtype = HTONS(DNS_RR_TYPE_AAAA);
 80026ee:	2100      	movs	r1, #0
 80026f0:	54a9      	strb	r1, [r5, r2]
 80026f2:	221c      	movs	r2, #28
 80026f4:	705a      	strb	r2, [r3, #1]
      dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 80026f6:	7099      	strb	r1, [r3, #2]
 80026f8:	2201      	movs	r2, #1
 80026fa:	70da      	strb	r2, [r3, #3]
 80026fc:	e7c2      	b.n	8002684 <dnsSendQuery+0x100>
            return ERROR_NO_DNS_SERVER;
 80026fe:	f240 2427 	movw	r4, #551	@ 0x227
 8002702:	e7ea      	b.n	80026da <dnsSendQuery+0x156>
      return ERROR_INVALID_PARAMETER;
 8002704:	2402      	movs	r4, #2
 8002706:	e7e8      	b.n	80026da <dnsSendQuery+0x156>
            return ERROR_NO_DNS_SERVER;
 8002708:	f240 2427 	movw	r4, #551	@ 0x227
 800270c:	e7e5      	b.n	80026da <dnsSendQuery+0x156>
      return ERROR_OUT_OF_MEMORY;
 800270e:	2464      	movs	r4, #100	@ 0x64
 8002710:	e7e3      	b.n	80026da <dnsSendQuery+0x156>
 8002712:	bf00      	nop
 8002714:	08019f20 	.word	0x08019f20
 8002718:	20000440 	.word	0x20000440
 800271c:	0801a2a4 	.word	0x0801a2a4
 8002720:	08019fc4 	.word	0x08019fc4

08002724 <dnsResolve>:
{
 8002724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002728:	4606      	mov	r6, r0
 800272a:	460d      	mov	r5, r1
 800272c:	4617      	mov	r7, r2
 800272e:	4698      	mov	r8, r3
   TRACE_INFO("Resolving host name %s (DNS resolver)...\r\n", name);
 8002730:	f7fd fffe 	bl	8000730 <osSuspendAllTasks>
 8002734:	4b5b      	ldr	r3, [pc, #364]	@ (80028a4 <dnsResolve+0x180>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	462a      	mov	r2, r5
 800273a:	495b      	ldr	r1, [pc, #364]	@ (80028a8 <dnsResolve+0x184>)
 800273c:	68d8      	ldr	r0, [r3, #12]
 800273e:	f011 ff93 	bl	8014668 <fprintf>
 8002742:	f7fd fffe 	bl	8000742 <osResumeAllTasks>
   osAcquireMutex(&netMutex);
 8002746:	4859      	ldr	r0, [pc, #356]	@ (80028ac <dnsResolve+0x188>)
 8002748:	f7fe f849 	bl	80007de <osAcquireMutex>
   entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 800274c:	2301      	movs	r3, #1
 800274e:	463a      	mov	r2, r7
 8002750:	4629      	mov	r1, r5
 8002752:	4630      	mov	r0, r6
 8002754:	f7ff fe78 	bl	8002448 <dnsFindEntry>
   if(entry != NULL)
 8002758:	b1b8      	cbz	r0, 800278a <dnsResolve+0x66>
 800275a:	4604      	mov	r4, r0
      if(entry->state == DNS_STATE_RESOLVED ||
 800275c:	7803      	ldrb	r3, [r0, #0]
 800275e:	3b02      	subs	r3, #2
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d906      	bls.n	8002774 <dnsResolve+0x50>
         error = ERROR_IN_PROGRESS;
 8002766:	f240 2903 	movw	r9, #515	@ 0x203
   osReleaseMutex(&netMutex);
 800276a:	4850      	ldr	r0, [pc, #320]	@ (80028ac <dnsResolve+0x188>)
 800276c:	f7fe f83e 	bl	80007ec <osReleaseMutex>
   delay = DNS_CACHE_INIT_POLLING_INTERVAL;
 8002770:	240a      	movs	r4, #10
   while(error == ERROR_IN_PROGRESS)
 8002772:	e050      	b.n	8002816 <dnsResolve+0xf2>
         *ipAddr = entry->ipAddr;
 8002774:	46c4      	mov	ip, r8
 8002776:	3450      	adds	r4, #80	@ 0x50
 8002778:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800277e:	6823      	ldr	r3, [r4, #0]
 8002780:	f8cc 3000 	str.w	r3, [ip]
         error = NO_ERROR;
 8002784:	f04f 0900 	mov.w	r9, #0
 8002788:	e7ef      	b.n	800276a <dnsResolve+0x46>
      entry = dnsCreateEntry();
 800278a:	f7ff fe2d 	bl	80023e8 <dnsCreateEntry>
 800278e:	4604      	mov	r4, r0
      osStrcpy(entry->name, name);
 8002790:	4629      	mov	r1, r5
 8002792:	3010      	adds	r0, #16
 8002794:	f012 fb7a 	bl	8014e8c <strcpy>
      entry->type = type;
 8002798:	7067      	strb	r7, [r4, #1]
      entry->protocol = HOST_NAME_RESOLVER_DNS;
 800279a:	2301      	movs	r3, #1
 800279c:	70a3      	strb	r3, [r4, #2]
      entry->interface = interface;
 800279e:	6066      	str	r6, [r4, #4]
      entry->dnsServerIndex = 0;
 80027a0:	f04f 0900 	mov.w	r9, #0
 80027a4:	f8c4 9008 	str.w	r9, [r4, #8]
      entry->port = udpGetDynamicPort();
 80027a8:	f00e f824 	bl	80107f4 <udpGetDynamicPort>
 80027ac:	81a0      	strh	r0, [r4, #12]
      entry->id = (uint16_t) netGenerateRand();
 80027ae:	f00a f97d 	bl	800caac <netGenerateRand>
 80027b2:	81e0      	strh	r0, [r4, #14]
      error = udpAttachRxCallback(interface, entry->port, dnsProcessResponse,
 80027b4:	464b      	mov	r3, r9
 80027b6:	4a3e      	ldr	r2, [pc, #248]	@ (80028b0 <dnsResolve+0x18c>)
 80027b8:	89a1      	ldrh	r1, [r4, #12]
 80027ba:	4630      	mov	r0, r6
 80027bc:	f00e fa3c 	bl	8010c38 <udpAttachRxCallback>
      if(!error)
 80027c0:	4681      	mov	r9, r0
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d1d1      	bne.n	800276a <dnsResolve+0x46>
         entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 80027c6:	2303      	movs	r3, #3
 80027c8:	6723      	str	r3, [r4, #112]	@ 0x70
         error = dnsSendQuery(entry);
 80027ca:	4620      	mov	r0, r4
 80027cc:	f7ff feda 	bl	8002584 <dnsSendQuery>
         if(!error)
 80027d0:	4681      	mov	r9, r0
 80027d2:	b980      	cbnz	r0, 80027f6 <dnsResolve+0xd2>
            entry->timestamp = osGetSystemTime();
 80027d4:	f7fe f812 	bl	80007fc <osGetSystemTime>
 80027d8:	6660      	str	r0, [r4, #100]	@ 0x64
            entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 80027da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80027de:	66a3      	str	r3, [r4, #104]	@ 0x68
            entry->maxTimeout = DNS_CLIENT_MAX_TIMEOUT;
 80027e0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80027e4:	66e3      	str	r3, [r4, #108]	@ 0x6c
            entry->retransmitCount--;
 80027e6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80027e8:	3b01      	subs	r3, #1
 80027ea:	6723      	str	r3, [r4, #112]	@ 0x70
            entry->state = DNS_STATE_IN_PROGRESS;
 80027ec:	2301      	movs	r3, #1
 80027ee:	7023      	strb	r3, [r4, #0]
            error = ERROR_IN_PROGRESS;
 80027f0:	f240 2903 	movw	r9, #515	@ 0x203
 80027f4:	e7b9      	b.n	800276a <dnsResolve+0x46>
            udpDetachRxCallback(interface, entry->port);
 80027f6:	89a1      	ldrh	r1, [r4, #12]
 80027f8:	4630      	mov	r0, r6
 80027fa:	f00e fa47 	bl	8010c8c <udpDetachRxCallback>
 80027fe:	e7b4      	b.n	800276a <dnsResolve+0x46>
         error = ERROR_FAILURE;
 8002800:	f04f 0901 	mov.w	r9, #1
      osReleaseMutex(&netMutex);
 8002804:	4829      	ldr	r0, [pc, #164]	@ (80028ac <dnsResolve+0x188>)
 8002806:	f7fd fff1 	bl	80007ec <osReleaseMutex>
      delay = MIN(delay * 2, DNS_CACHE_MAX_POLLING_INTERVAL);
 800280a:	0064      	lsls	r4, r4, #1
 800280c:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8002810:	bf28      	it	cs
 8002812:	f44f 747a 	movcs.w	r4, #1000	@ 0x3e8
   while(error == ERROR_IN_PROGRESS)
 8002816:	f240 2303 	movw	r3, #515	@ 0x203
 800281a:	4599      	cmp	r9, r3
 800281c:	d11e      	bne.n	800285c <dnsResolve+0x138>
      osDelayTask(delay);
 800281e:	4620      	mov	r0, r4
 8002820:	f7fd ff82 	bl	8000728 <osDelayTask>
      osAcquireMutex(&netMutex);
 8002824:	4821      	ldr	r0, [pc, #132]	@ (80028ac <dnsResolve+0x188>)
 8002826:	f7fd ffda 	bl	80007de <osAcquireMutex>
      entry = dnsFindEntry(interface, name, type, HOST_NAME_RESOLVER_DNS);
 800282a:	2301      	movs	r3, #1
 800282c:	463a      	mov	r2, r7
 800282e:	4629      	mov	r1, r5
 8002830:	4630      	mov	r0, r6
 8002832:	f7ff fe09 	bl	8002448 <dnsFindEntry>
      if(entry != NULL)
 8002836:	2800      	cmp	r0, #0
 8002838:	d0e2      	beq.n	8002800 <dnsResolve+0xdc>
         if(entry->state == DNS_STATE_RESOLVED)
 800283a:	7803      	ldrb	r3, [r0, #0]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d1e1      	bne.n	8002804 <dnsResolve+0xe0>
            *ipAddr = entry->ipAddr;
 8002840:	46c6      	mov	lr, r8
 8002842:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8002846:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800284a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800284e:	f8dc 3000 	ldr.w	r3, [ip]
 8002852:	f8ce 3000 	str.w	r3, [lr]
            error = NO_ERROR;
 8002856:	f04f 0900 	mov.w	r9, #0
 800285a:	e7d3      	b.n	8002804 <dnsResolve+0xe0>
   if(error)
 800285c:	f1b9 0f00 	cmp.w	r9, #0
 8002860:	d00e      	beq.n	8002880 <dnsResolve+0x15c>
      TRACE_INFO("Host name resolution failed!\r\n");
 8002862:	f7fd ff65 	bl	8000730 <osSuspendAllTasks>
 8002866:	4b0f      	ldr	r3, [pc, #60]	@ (80028a4 <dnsResolve+0x180>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	221e      	movs	r2, #30
 800286e:	2101      	movs	r1, #1
 8002870:	4810      	ldr	r0, [pc, #64]	@ (80028b4 <dnsResolve+0x190>)
 8002872:	f012 f913 	bl	8014a9c <fwrite>
 8002876:	f7fd ff64 	bl	8000742 <osResumeAllTasks>
}
 800287a:	4648      	mov	r0, r9
 800287c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TRACE_INFO("Host name resolved to %s...\r\n", ipAddrToString(ipAddr, NULL));
 8002880:	f7fd ff56 	bl	8000730 <osSuspendAllTasks>
 8002884:	4b07      	ldr	r3, [pc, #28]	@ (80028a4 <dnsResolve+0x180>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68dc      	ldr	r4, [r3, #12]
 800288a:	2100      	movs	r1, #0
 800288c:	4640      	mov	r0, r8
 800288e:	f002 feb9 	bl	8005604 <ipAddrToString>
 8002892:	4602      	mov	r2, r0
 8002894:	4908      	ldr	r1, [pc, #32]	@ (80028b8 <dnsResolve+0x194>)
 8002896:	4620      	mov	r0, r4
 8002898:	f011 fee6 	bl	8014668 <fprintf>
 800289c:	f7fd ff51 	bl	8000742 <osResumeAllTasks>
 80028a0:	e7eb      	b.n	800287a <dnsResolve+0x156>
 80028a2:	bf00      	nop
 80028a4:	20000440 	.word	0x20000440
 80028a8:	0801a2c8 	.word	0x0801a2c8
 80028ac:	20000b50 	.word	0x20000b50
 80028b0:	080028f5 	.word	0x080028f5
 80028b4:	0801a2f4 	.word	0x0801a2f4
 80028b8:	0801a314 	.word	0x0801a314

080028bc <dnsSelectNextServer>:
 * @brief Select the next DNS server
 * @param[in] entry Pointer to a valid DNS cache entry
 **/

void dnsSelectNextServer(DnsCacheEntry *entry)
{
 80028bc:	b510      	push	{r4, lr}
 80028be:	4604      	mov	r4, r0
#if defined(DNS_SELECT_NEXT_SERVER_HOOK)
   DNS_SELECT_NEXT_SERVER_HOOK(entry);
#endif

   //Select the next DNS server
   entry->dnsServerIndex++;
 80028c0:	6883      	ldr	r3, [r0, #8]
 80028c2:	3301      	adds	r3, #1
 80028c4:	6083      	str	r3, [r0, #8]

   //An identifier is used by the DNS client to match replies with
   //corresponding requests
   entry->id = (uint16_t) netGenerateRand();
 80028c6:	f00a f8f1 	bl	800caac <netGenerateRand>
 80028ca:	81e0      	strh	r0, [r4, #14]

   //Initialize retransmission counter
   entry->retransmitCount = DNS_CLIENT_MAX_RETRIES;
 80028cc:	2303      	movs	r3, #3
 80028ce:	6723      	str	r3, [r4, #112]	@ 0x70
   //Send DNS query
   error = dnsSendQuery(entry);
 80028d0:	4620      	mov	r0, r4
 80028d2:	f7ff fe57 	bl	8002584 <dnsSendQuery>

   //DNS message successfully sent?
   if(!error)
 80028d6:	b948      	cbnz	r0, 80028ec <dnsSelectNextServer+0x30>
   {
      //Save the time at which the query message was sent
      entry->timestamp = osGetSystemTime();
 80028d8:	f7fd ff90 	bl	80007fc <osGetSystemTime>
 80028dc:	6660      	str	r0, [r4, #100]	@ 0x64
      //Set timeout value
      entry->timeout = DNS_CLIENT_INIT_TIMEOUT;
 80028de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028e2:	66a3      	str	r3, [r4, #104]	@ 0x68
      //Decrement retransmission counter
      entry->retransmitCount--;
 80028e4:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80028e6:	3b01      	subs	r3, #1
 80028e8:	6723      	str	r3, [r4, #112]	@ 0x70
   else
   {
      //The entry should be deleted since name resolution has failed
      dnsDeleteEntry(entry);
   }
}
 80028ea:	bd10      	pop	{r4, pc}
      dnsDeleteEntry(entry);
 80028ec:	4620      	mov	r0, r4
 80028ee:	f7ff fd4f 	bl	8002390 <dnsDeleteEntry>
}
 80028f2:	e7fa      	b.n	80028ea <dnsSelectNextServer+0x2e>

080028f4 <dnsProcessResponse>:
{
 80028f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028f8:	b085      	sub	sp, #20
 80028fa:	9003      	str	r0, [sp, #12]
 80028fc:	4616      	mov	r6, r2
 80028fe:	461d      	mov	r5, r3
 8002900:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
   length = netBufferGetLength(buffer) - offset;
 8002902:	4618      	mov	r0, r3
 8002904:	f009 fbb8 	bl	800c078 <netBufferGetLength>
 8002908:	1bc4      	subs	r4, r0, r7
   if(length < sizeof(DnsHeader))
 800290a:	2c0b      	cmp	r4, #11
 800290c:	d802      	bhi.n	8002914 <dnsProcessResponse+0x20>
}
 800290e:	b005      	add	sp, #20
 8002910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   message = netBufferAt(buffer, offset, length);
 8002914:	4622      	mov	r2, r4
 8002916:	4639      	mov	r1, r7
 8002918:	4628      	mov	r0, r5
 800291a:	f009 fc4d 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 800291e:	4680      	mov	r8, r0
 8002920:	2800      	cmp	r0, #0
 8002922:	d0f4      	beq.n	800290e <dnsProcessResponse+0x1a>
   TRACE_INFO("DNS message received (%" PRIuSIZE " bytes)...\r\n", length);
 8002924:	f7fd ff04 	bl	8000730 <osSuspendAllTasks>
 8002928:	4ba0      	ldr	r3, [pc, #640]	@ (8002bac <dnsProcessResponse+0x2b8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4622      	mov	r2, r4
 800292e:	49a0      	ldr	r1, [pc, #640]	@ (8002bb0 <dnsProcessResponse+0x2bc>)
 8002930:	68d8      	ldr	r0, [r3, #12]
 8002932:	f011 fe99 	bl	8014668 <fprintf>
 8002936:	f7fd ff04 	bl	8000742 <osResumeAllTasks>
   if(!message->qr)
 800293a:	f998 3002 	ldrsb.w	r3, [r8, #2]
 800293e:	2b00      	cmp	r3, #0
 8002940:	dae5      	bge.n	800290e <dnsProcessResponse+0x1a>
   if(ntohs(message->qdcount) != 1)
 8002942:	f8b8 0004 	ldrh.w	r0, [r8, #4]
 8002946:	f7fd fe69 	bl	800061c <swapInt16>
 800294a:	2801      	cmp	r0, #1
 800294c:	d1df      	bne.n	800290e <dnsProcessResponse+0x1a>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 800294e:	2500      	movs	r5, #0
 8002950:	e0cf      	b.n	8002af2 <dnsProcessResponse+0x1fe>
               ntohs(question->qtype) != DNS_RR_TYPE_A)
 8002952:	f838 000a 	ldrh.w	r0, [r8, sl]
 8002956:	f7fd fe61 	bl	800061c <swapInt16>
            if(entry->type == HOST_TYPE_IPV4 &&
 800295a:	2801      	cmp	r0, #1
 800295c:	d1d7      	bne.n	800290e <dnsProcessResponse+0x1a>
 800295e:	e114      	b.n	8002b8a <dnsProcessResponse+0x296>
               ntohs(question->qtype) != DNS_RR_TYPE_AAAA)
 8002960:	f838 000a 	ldrh.w	r0, [r8, sl]
 8002964:	f7fd fe5a 	bl	800061c <swapInt16>
            if(entry->type == HOST_TYPE_IPV6 &&
 8002968:	281c      	cmp	r0, #28
 800296a:	d1d0      	bne.n	800290e <dnsProcessResponse+0x1a>
 800296c:	e115      	b.n	8002b9a <dnsProcessResponse+0x2a6>
               dnsSelectNextServer(entry);
 800296e:	4648      	mov	r0, r9
 8002970:	f7ff ffa4 	bl	80028bc <dnsSelectNextServer>
               break;
 8002974:	e7cb      	b.n	800290e <dnsProcessResponse+0x1a>
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 8002976:	f838 0009 	ldrh.w	r0, [r8, r9]
 800297a:	f7fd fe4f 	bl	800061c <swapInt16>
 800297e:	2801      	cmp	r0, #1
 8002980:	d164      	bne.n	8002a4c <dnsProcessResponse+0x158>
                     ntohs(record->rdlength) == sizeof(Ipv4Addr))
 8002982:	8930      	ldrh	r0, [r6, #8]
 8002984:	f7fd fe4a 	bl	800061c <swapInt16>
                  if(ntohs(record->rtype) == DNS_RR_TYPE_A &&
 8002988:	2804      	cmp	r0, #4
 800298a:	d15f      	bne.n	8002a4c <dnsProcessResponse+0x158>
                     entry->ipAddr.length = sizeof(Ipv4Addr);
 800298c:	4c89      	ldr	r4, [pc, #548]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 800298e:	2374      	movs	r3, #116	@ 0x74
 8002990:	fb03 4405 	mla	r4, r3, r5, r4
 8002994:	2304      	movs	r3, #4
 8002996:	6523      	str	r3, [r4, #80]	@ 0x50
                     ipv4CopyAddr(&entry->ipAddr.ipv4Addr, record->rdata);
 8002998:	f8d6 300a 	ldr.w	r3, [r6, #10]
 800299c:	6563      	str	r3, [r4, #84]	@ 0x54
                     entry->timestamp = osGetSystemTime();
 800299e:	f7fd ff2d 	bl	80007fc <osGetSystemTime>
 80029a2:	6660      	str	r0, [r4, #100]	@ 0x64
                     entry->timeout = ntohl(record->ttl) * 1000;
 80029a4:	6870      	ldr	r0, [r6, #4]
 80029a6:	f7fd fe3c 	bl	8000622 <swapInt32>
 80029aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029ae:	fb00 f303 	mul.w	r3, r0, r3
 80029b2:	66a3      	str	r3, [r4, #104]	@ 0x68
                     if(entry->timeout >= DNS_MAX_LIFETIME)
 80029b4:	4a80      	ldr	r2, [pc, #512]	@ (8002bb8 <dnsProcessResponse+0x2c4>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d301      	bcc.n	80029be <dnsProcessResponse+0xca>
                        entry->timeout = DNS_MAX_LIFETIME;
 80029ba:	4a7f      	ldr	r2, [pc, #508]	@ (8002bb8 <dnsProcessResponse+0x2c4>)
 80029bc:	66a2      	str	r2, [r4, #104]	@ 0x68
                     if(entry->timeout <= DNS_MIN_LIFETIME)
 80029be:	4b7d      	ldr	r3, [pc, #500]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 80029c0:	2274      	movs	r2, #116	@ 0x74
 80029c2:	fb02 3305 	mla	r3, r2, r5, r3
 80029c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80029cc:	d805      	bhi.n	80029da <dnsProcessResponse+0xe6>
                        entry->timeout = DNS_MIN_LIFETIME;
 80029ce:	4b79      	ldr	r3, [pc, #484]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 80029d0:	fb02 3305 	mla	r3, r2, r5, r3
 80029d4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80029d8:	669a      	str	r2, [r3, #104]	@ 0x68
                     udpDetachRxCallback(interface, entry->port);
 80029da:	4e76      	ldr	r6, [pc, #472]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 80029dc:	2474      	movs	r4, #116	@ 0x74
 80029de:	fb05 f404 	mul.w	r4, r5, r4
 80029e2:	1933      	adds	r3, r6, r4
 80029e4:	8999      	ldrh	r1, [r3, #12]
 80029e6:	9803      	ldr	r0, [sp, #12]
 80029e8:	f00e f950 	bl	8010c8c <udpDetachRxCallback>
                     entry->state = DNS_STATE_RESOLVED;
 80029ec:	2302      	movs	r3, #2
 80029ee:	5533      	strb	r3, [r6, r4]
                     break;
 80029f0:	e78d      	b.n	800290e <dnsProcessResponse+0x1a>
               pos += ntohs(record->rdlength);
 80029f2:	8930      	ldrh	r0, [r6, #8]
 80029f4:	f7fd fe12 	bl	800061c <swapInt16>
 80029f8:	4483      	add	fp, r0
            for(j = 0; j < ntohs(message->ancount); j++)
 80029fa:	f10a 0a01 	add.w	sl, sl, #1
 80029fe:	f8b8 0006 	ldrh.w	r0, [r8, #6]
 8002a02:	f7fd fe0b 	bl	800061c <swapInt16>
 8002a06:	4550      	cmp	r0, sl
 8002a08:	d981      	bls.n	800290e <dnsProcessResponse+0x1a>
               pos = dnsParseName(message, length, pos, NULL, 0);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	465a      	mov	r2, fp
 8002a10:	4621      	mov	r1, r4
 8002a12:	4640      	mov	r0, r8
 8002a14:	f000 f92a 	bl	8002c6c <dnsParseName>
               if(!pos)
 8002a18:	4681      	mov	r9, r0
 8002a1a:	2800      	cmp	r0, #0
 8002a1c:	f43f af77 	beq.w	800290e <dnsProcessResponse+0x1a>
               record = DNS_GET_RESOURCE_RECORD(message, pos);
 8002a20:	eb08 0600 	add.w	r6, r8, r0
               pos += sizeof(DnsResourceRecord);
 8002a24:	f100 0b0a 	add.w	fp, r0, #10
               if(pos > length)
 8002a28:	455c      	cmp	r4, fp
 8002a2a:	f4ff af70 	bcc.w	800290e <dnsProcessResponse+0x1a>
               if((pos + ntohs(record->rdlength)) > length)
 8002a2e:	8930      	ldrh	r0, [r6, #8]
 8002a30:	f7fd fdf4 	bl	800061c <swapInt16>
 8002a34:	eb00 030b 	add.w	r3, r0, fp
 8002a38:	42a3      	cmp	r3, r4
 8002a3a:	f63f af68 	bhi.w	800290e <dnsProcessResponse+0x1a>
               if(entry->type == HOST_TYPE_IPV4)
 8002a3e:	4b5d      	ldr	r3, [pc, #372]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002a40:	2274      	movs	r2, #116	@ 0x74
 8002a42:	fb02 3305 	mla	r3, r2, r5, r3
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b10      	cmp	r3, #16
 8002a4a:	d094      	beq.n	8002976 <dnsProcessResponse+0x82>
               if(entry->type == HOST_TYPE_IPV6)
 8002a4c:	4b59      	ldr	r3, [pc, #356]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002a4e:	2274      	movs	r2, #116	@ 0x74
 8002a50:	fb02 3305 	mla	r3, r2, r5, r3
 8002a54:	785b      	ldrb	r3, [r3, #1]
 8002a56:	2b20      	cmp	r3, #32
 8002a58:	d1cb      	bne.n	80029f2 <dnsProcessResponse+0xfe>
                  if(ntohs(record->rtype) == DNS_RR_TYPE_AAAA &&
 8002a5a:	f838 0009 	ldrh.w	r0, [r8, r9]
 8002a5e:	f7fd fddd 	bl	800061c <swapInt16>
 8002a62:	281c      	cmp	r0, #28
 8002a64:	d1c5      	bne.n	80029f2 <dnsProcessResponse+0xfe>
                     ntohs(record->rdlength) == sizeof(Ipv6Addr))
 8002a66:	8930      	ldrh	r0, [r6, #8]
 8002a68:	f7fd fdd8 	bl	800061c <swapInt16>
                  if(ntohs(record->rtype) == DNS_RR_TYPE_AAAA &&
 8002a6c:	2810      	cmp	r0, #16
 8002a6e:	d1c0      	bne.n	80029f2 <dnsProcessResponse+0xfe>
                     entry->ipAddr.length = sizeof(Ipv6Addr);
 8002a70:	4a50      	ldr	r2, [pc, #320]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002a72:	2374      	movs	r3, #116	@ 0x74
 8002a74:	fb05 f303 	mul.w	r3, r5, r3
 8002a78:	18d4      	adds	r4, r2, r3
 8002a7a:	2110      	movs	r1, #16
 8002a7c:	6521      	str	r1, [r4, #80]	@ 0x50
                     ipv6CopyAddr(&entry->ipAddr.ipv6Addr, record->rdata);
 8002a7e:	3350      	adds	r3, #80	@ 0x50
 8002a80:	4413      	add	r3, r2
 8002a82:	f8d6 c00a 	ldr.w	ip, [r6, #10]
 8002a86:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8002a8a:	f8d6 1012 	ldr.w	r1, [r6, #18]
 8002a8e:	f8d6 2016 	ldr.w	r2, [r6, #22]
 8002a92:	f8c3 c004 	str.w	ip, [r3, #4]
 8002a96:	6098      	str	r0, [r3, #8]
 8002a98:	60d9      	str	r1, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
                     entry->timestamp = osGetSystemTime();
 8002a9c:	f7fd feae 	bl	80007fc <osGetSystemTime>
 8002aa0:	6660      	str	r0, [r4, #100]	@ 0x64
                     entry->timeout = ntohl(record->ttl) * 1000;
 8002aa2:	6870      	ldr	r0, [r6, #4]
 8002aa4:	f7fd fdbd 	bl	8000622 <swapInt32>
 8002aa8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aac:	fb00 f303 	mul.w	r3, r0, r3
 8002ab0:	66a3      	str	r3, [r4, #104]	@ 0x68
                     if(entry->timeout >= DNS_MAX_LIFETIME)
 8002ab2:	4a41      	ldr	r2, [pc, #260]	@ (8002bb8 <dnsProcessResponse+0x2c4>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d301      	bcc.n	8002abc <dnsProcessResponse+0x1c8>
                        entry->timeout = DNS_MAX_LIFETIME;
 8002ab8:	4a3f      	ldr	r2, [pc, #252]	@ (8002bb8 <dnsProcessResponse+0x2c4>)
 8002aba:	66a2      	str	r2, [r4, #104]	@ 0x68
                     if(entry->timeout <= DNS_MIN_LIFETIME)
 8002abc:	4b3d      	ldr	r3, [pc, #244]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002abe:	2274      	movs	r2, #116	@ 0x74
 8002ac0:	fb02 3305 	mla	r3, r2, r5, r3
 8002ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ac6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002aca:	d805      	bhi.n	8002ad8 <dnsProcessResponse+0x1e4>
                        entry->timeout = DNS_MIN_LIFETIME;
 8002acc:	4b39      	ldr	r3, [pc, #228]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002ace:	fb02 3305 	mla	r3, r2, r5, r3
 8002ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ad6:	669a      	str	r2, [r3, #104]	@ 0x68
                     udpDetachRxCallback(interface, entry->port);
 8002ad8:	4e36      	ldr	r6, [pc, #216]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002ada:	2474      	movs	r4, #116	@ 0x74
 8002adc:	fb05 f404 	mul.w	r4, r5, r4
 8002ae0:	1933      	adds	r3, r6, r4
 8002ae2:	8999      	ldrh	r1, [r3, #12]
 8002ae4:	9803      	ldr	r0, [sp, #12]
 8002ae6:	f00e f8d1 	bl	8010c8c <udpDetachRxCallback>
                     entry->state = DNS_STATE_RESOLVED;
 8002aea:	2302      	movs	r3, #2
 8002aec:	5533      	strb	r3, [r6, r4]
                     break;
 8002aee:	e70e      	b.n	800290e <dnsProcessResponse+0x1a>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8002af0:	3501      	adds	r5, #1
 8002af2:	2d07      	cmp	r5, #7
 8002af4:	f63f af0b 	bhi.w	800290e <dnsProcessResponse+0x1a>
      entry = &dnsCache[i];
 8002af8:	2374      	movs	r3, #116	@ 0x74
 8002afa:	fb05 f303 	mul.w	r3, r5, r3
 8002afe:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002b00:	eb03 0902 	add.w	r9, r3, r2
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 8002b04:	58d3      	ldr	r3, [r2, r3]
 8002b06:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8002b0a:	f1b3 1f01 	cmp.w	r3, #65537	@ 0x10001
 8002b0e:	d1ef      	bne.n	8002af0 <dnsProcessResponse+0x1fc>
         if(entry->port == ntohs(udpHeader->destPort))
 8002b10:	f8b9 a00c 	ldrh.w	sl, [r9, #12]
 8002b14:	8870      	ldrh	r0, [r6, #2]
 8002b16:	f7fd fd81 	bl	800061c <swapInt16>
 8002b1a:	4582      	cmp	sl, r0
 8002b1c:	d1e8      	bne.n	8002af0 <dnsProcessResponse+0x1fc>
            if(ntohs(message->id) != entry->id)
 8002b1e:	f8b8 0000 	ldrh.w	r0, [r8]
 8002b22:	f7fd fd7b 	bl	800061c <swapInt16>
 8002b26:	f8b9 300e 	ldrh.w	r3, [r9, #14]
 8002b2a:	4298      	cmp	r0, r3
 8002b2c:	f47f aeef 	bne.w	800290e <dnsProcessResponse+0x1a>
            pos = dnsParseName(message, length, pos, NULL, 0);
 8002b30:	2300      	movs	r3, #0
 8002b32:	9300      	str	r3, [sp, #0]
 8002b34:	220c      	movs	r2, #12
 8002b36:	4621      	mov	r1, r4
 8002b38:	4640      	mov	r0, r8
 8002b3a:	f000 f897 	bl	8002c6c <dnsParseName>
            if(!pos)
 8002b3e:	4682      	mov	sl, r0
 8002b40:	2800      	cmp	r0, #0
 8002b42:	f43f aee4 	beq.w	800290e <dnsProcessResponse+0x1a>
            if((pos + sizeof(DnsQuestion)) > length)
 8002b46:	f100 0b04 	add.w	fp, r0, #4
 8002b4a:	45a3      	cmp	fp, r4
 8002b4c:	f63f aedf 	bhi.w	800290e <dnsProcessResponse+0x1a>
            if(dnsCompareName(message, length, sizeof(DnsHeader), entry->name, 0))
 8002b50:	2374      	movs	r3, #116	@ 0x74
 8002b52:	fb05 f303 	mul.w	r3, r5, r3
 8002b56:	3310      	adds	r3, #16
 8002b58:	2200      	movs	r2, #0
 8002b5a:	9200      	str	r2, [sp, #0]
 8002b5c:	4a15      	ldr	r2, [pc, #84]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002b5e:	4413      	add	r3, r2
 8002b60:	220c      	movs	r2, #12
 8002b62:	4621      	mov	r1, r4
 8002b64:	4640      	mov	r0, r8
 8002b66:	f000 f8d3 	bl	8002d10 <dnsCompareName>
 8002b6a:	2800      	cmp	r0, #0
 8002b6c:	f47f aecf 	bne.w	800290e <dnsProcessResponse+0x1a>
            question = DNS_GET_QUESTION(message, pos);
 8002b70:	eb08 030a 	add.w	r3, r8, sl
            if(ntohs(question->qclass) != DNS_RR_CLASS_IN)
 8002b74:	8858      	ldrh	r0, [r3, #2]
 8002b76:	f7fd fd51 	bl	800061c <swapInt16>
 8002b7a:	2801      	cmp	r0, #1
 8002b7c:	f47f aec7 	bne.w	800290e <dnsProcessResponse+0x1a>
            if(entry->type == HOST_TYPE_IPV4 &&
 8002b80:	f899 3001 	ldrb.w	r3, [r9, #1]
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	f43f aee4 	beq.w	8002952 <dnsProcessResponse+0x5e>
            if(entry->type == HOST_TYPE_IPV6 &&
 8002b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <dnsProcessResponse+0x2c0>)
 8002b8c:	2274      	movs	r2, #116	@ 0x74
 8002b8e:	fb02 3305 	mla	r3, r2, r5, r3
 8002b92:	785b      	ldrb	r3, [r3, #1]
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	f43f aee3 	beq.w	8002960 <dnsProcessResponse+0x6c>
            if(message->rcode != DNS_RCODE_NOERROR)
 8002b9a:	f898 3003 	ldrb.w	r3, [r8, #3]
 8002b9e:	f013 0f0f 	tst.w	r3, #15
 8002ba2:	f47f aee4 	bne.w	800296e <dnsProcessResponse+0x7a>
            for(j = 0; j < ntohs(message->ancount); j++)
 8002ba6:	f04f 0a00 	mov.w	sl, #0
 8002baa:	e728      	b.n	80029fe <dnsProcessResponse+0x10a>
 8002bac:	20000440 	.word	0x20000440
 8002bb0:	0801a334 	.word	0x0801a334
 8002bb4:	2000075c 	.word	0x2000075c
 8002bb8:	0036ee80 	.word	0x0036ee80

08002bbc <dnsEncodeName>:
 **/

size_t dnsEncodeName(const char_t *src, uint8_t *dest)
{
   uint_t i = 0;
   size_t length = 0;
 8002bbc:	f04f 0c00 	mov.w	ip, #0
   uint_t i = 0;
 8002bc0:	4663      	mov	r3, ip
 8002bc2:	e039      	b.n	8002c38 <dnsEncodeName+0x7c>
   {
      //End of string detected?
      if(src[i] == '\0')
      {
         //Check label length
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8002bc4:	1e5a      	subs	r2, r3, #1
 8002bc6:	2a3e      	cmp	r2, #62	@ 0x3e
 8002bc8:	d817      	bhi.n	8002bfa <dnsEncodeName+0x3e>
            return 0;

         //Save label length
         if(dest != NULL)
 8002bca:	b119      	cbz	r1, 8002bd4 <dnsEncodeName+0x18>
         {
            dest[0] = i;
 8002bcc:	700b      	strb	r3, [r1, #0]
            dest[i + 1] = 0;
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	5488      	strb	r0, [r1, r2]
         }

         //Adjust the length of the resulting string
         length += i + 2;
 8002bd4:	4463      	add	r3, ip
 8002bd6:	1c98      	adds	r0, r3, #2

         //Point to the next character
         i++;
      }
   }
}
 8002bd8:	f85d fb04 	ldr.w	pc, [sp], #4
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8002bdc:	1e5a      	subs	r2, r3, #1
 8002bde:	2a3e      	cmp	r2, #62	@ 0x3e
 8002be0:	d80d      	bhi.n	8002bfe <dnsEncodeName+0x42>
         if(dest != NULL)
 8002be2:	b101      	cbz	r1, 8002be6 <dnsEncodeName+0x2a>
            dest[0] = i;
 8002be4:	700b      	strb	r3, [r1, #0]
         length += i + 1;
 8002be6:	449c      	add	ip, r3
 8002be8:	f10c 0c01 	add.w	ip, ip, #1
         if(dest != NULL)
 8002bec:	b109      	cbz	r1, 8002bf2 <dnsEncodeName+0x36>
            dest += i + 1;
 8002bee:	1c5a      	adds	r2, r3, #1
 8002bf0:	4411      	add	r1, r2
         src += i + 1;
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	4418      	add	r0, r3
         i = 0;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	e02b      	b.n	8002c52 <dnsEncodeName+0x96>
            return 0;
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	e7ec      	b.n	8002bd8 <dnsEncodeName+0x1c>
            return 0;
 8002bfe:	2000      	movs	r0, #0
 8002c00:	e7ea      	b.n	8002bd8 <dnsEncodeName+0x1c>
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8002c02:	1e5a      	subs	r2, r3, #1
 8002c04:	2a3e      	cmp	r2, #62	@ 0x3e
 8002c06:	d82c      	bhi.n	8002c62 <dnsEncodeName+0xa6>
         if(dest != NULL)
 8002c08:	b119      	cbz	r1, 8002c12 <dnsEncodeName+0x56>
            dest[0] = i;
 8002c0a:	700b      	strb	r3, [r1, #0]
            dest[i + 1] = 0;
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	2000      	movs	r0, #0
 8002c10:	5488      	strb	r0, [r1, r2]
         length += i + 2;
 8002c12:	4463      	add	r3, ip
 8002c14:	1c98      	adds	r0, r3, #2
         return length;
 8002c16:	4770      	bx	lr
         if(i < 1 || i > DNS_LABEL_MAX_SIZE)
 8002c18:	1e5a      	subs	r2, r3, #1
 8002c1a:	2a3e      	cmp	r2, #62	@ 0x3e
 8002c1c:	d823      	bhi.n	8002c66 <dnsEncodeName+0xaa>
         if(dest != NULL)
 8002c1e:	b101      	cbz	r1, 8002c22 <dnsEncodeName+0x66>
            dest[0] = i;
 8002c20:	700b      	strb	r3, [r1, #0]
         length += i + 1;
 8002c22:	449c      	add	ip, r3
 8002c24:	f10c 0c01 	add.w	ip, ip, #1
         if(dest != NULL)
 8002c28:	b109      	cbz	r1, 8002c2e <dnsEncodeName+0x72>
            dest += i + 1;
 8002c2a:	1c5a      	adds	r2, r3, #1
 8002c2c:	4411      	add	r1, r2
         src += i + 1;
 8002c2e:	3301      	adds	r3, #1
 8002c30:	4418      	add	r0, r3
         i = 0;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e000      	b.n	8002c38 <dnsEncodeName+0x7c>
         i++;
 8002c36:	3301      	adds	r3, #1
      if(src[i] == '\0')
 8002c38:	5cc2      	ldrb	r2, [r0, r3]
 8002c3a:	2a00      	cmp	r2, #0
 8002c3c:	d0e1      	beq.n	8002c02 <dnsEncodeName+0x46>
      else if(src[i] == '.')
 8002c3e:	2a2e      	cmp	r2, #46	@ 0x2e
 8002c40:	d0ea      	beq.n	8002c18 <dnsEncodeName+0x5c>
         if(dest != NULL)
 8002c42:	2900      	cmp	r1, #0
 8002c44:	d0f7      	beq.n	8002c36 <dnsEncodeName+0x7a>
{
 8002c46:	b500      	push	{lr}
            dest[i + 1] = src[i];
 8002c48:	f103 0e01 	add.w	lr, r3, #1
 8002c4c:	f801 200e 	strb.w	r2, [r1, lr]
         i++;
 8002c50:	3301      	adds	r3, #1
      if(src[i] == '\0')
 8002c52:	5cc2      	ldrb	r2, [r0, r3]
 8002c54:	2a00      	cmp	r2, #0
 8002c56:	d0b5      	beq.n	8002bc4 <dnsEncodeName+0x8>
      else if(src[i] == '.')
 8002c58:	2a2e      	cmp	r2, #46	@ 0x2e
 8002c5a:	d0bf      	beq.n	8002bdc <dnsEncodeName+0x20>
         if(dest != NULL)
 8002c5c:	2900      	cmp	r1, #0
 8002c5e:	d1f3      	bne.n	8002c48 <dnsEncodeName+0x8c>
 8002c60:	e7f6      	b.n	8002c50 <dnsEncodeName+0x94>
            return 0;
 8002c62:	2000      	movs	r0, #0
 8002c64:	4770      	bx	lr
            return 0;
 8002c66:	2000      	movs	r0, #0
}
 8002c68:	4770      	bx	lr
	...

08002c6c <dnsParseName>:
 * @return The position of the resource record that immediately follows the domain name
 **/

size_t dnsParseName(const DnsHeader *message, size_t length, size_t pos,
   char_t *dest, uint_t level)
{
 8002c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c70:	b083      	sub	sp, #12
 8002c72:	4681      	mov	r9, r0
 8002c74:	4688      	mov	r8, r1
 8002c76:	4614      	mov	r4, r2
 8002c78:	461e      	mov	r6, r3
 8002c7a:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
   size_t n;
   size_t pointer;
   uint8_t *src;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8002c7c:	2f03      	cmp	r7, #3
 8002c7e:	d83f      	bhi.n	8002d00 <dnsParseName+0x94>

   //Cast the input DNS message to byte array
   src = (uint8_t *) message;

   //Parse encoded domain name
   while(pos < length)
 8002c80:	4544      	cmp	r4, r8
 8002c82:	d23b      	bcs.n	8002cfc <dnsParseName+0x90>
   {
      //End marker found?
      if(src[pos] == 0)
 8002c84:	f819 5004 	ldrb.w	r5, [r9, r4]
 8002c88:	b1cd      	cbz	r5, 8002cbe <dnsParseName+0x52>
         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 1);
      }
      //Compression tag found?
      else if(src[pos] >= DNS_COMPRESSION_TAG)
 8002c8a:	2dbf      	cmp	r5, #191	@ 0xbf
 8002c8c:	d81c      	bhi.n	8002cc8 <dnsParseName+0x5c>
         //Return the position of the resource record that
         //is immediately following the domain name
         return (pos + 2);
      }
      //Valid label length?
      else if(src[pos] < DNS_LABEL_MAX_SIZE)
 8002c8e:	2d3e      	cmp	r5, #62	@ 0x3e
 8002c90:	d82f      	bhi.n	8002cf2 <dnsParseName+0x86>
      {
         //Get the length of the current label
         n = src[pos++];
 8002c92:	1c61      	adds	r1, r4, #1

         //Malformed DNS message?
         if((pos + n) > length)
 8002c94:	194c      	adds	r4, r1, r5
 8002c96:	4544      	cmp	r4, r8
 8002c98:	d836      	bhi.n	8002d08 <dnsParseName+0x9c>
            return 0;

         //The last parameter is optional
         if(dest != NULL)
 8002c9a:	2e00      	cmp	r6, #0
 8002c9c:	d0f0      	beq.n	8002c80 <dnsParseName+0x14>
         {
            //Copy current label
            osMemcpy(dest, src + pos, n);
 8002c9e:	462a      	mov	r2, r5
 8002ca0:	4449      	add	r1, r9
 8002ca2:	4630      	mov	r0, r6
 8002ca4:	f012 f8fa 	bl	8014e9c <memcpy>

            //Advance read pointer
            pos += n;
            //Advance write pointer
            dest += n;
 8002ca8:	442e      	add	r6, r5

            //Append a separator if necessary
            if(pos < length && src[pos] != '\0')
 8002caa:	4544      	cmp	r4, r8
 8002cac:	d2e8      	bcs.n	8002c80 <dnsParseName+0x14>
 8002cae:	f819 3004 	ldrb.w	r3, [r9, r4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0e4      	beq.n	8002c80 <dnsParseName+0x14>
               *(dest++) = '.';
 8002cb6:	232e      	movs	r3, #46	@ 0x2e
 8002cb8:	f806 3b01 	strb.w	r3, [r6], #1
 8002cbc:	e7e0      	b.n	8002c80 <dnsParseName+0x14>
         if(dest != NULL)
 8002cbe:	b10e      	cbz	r6, 8002cc4 <dnsParseName+0x58>
            *dest = '\0';
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	7033      	strb	r3, [r6, #0]
         return (pos + 1);
 8002cc4:	1c60      	adds	r0, r4, #1
 8002cc6:	e01c      	b.n	8002d02 <dnsParseName+0x96>
         if((pos + 1) >= length)
 8002cc8:	1c63      	adds	r3, r4, #1
 8002cca:	4543      	cmp	r3, r8
 8002ccc:	d301      	bcc.n	8002cd2 <dnsParseName+0x66>
            return 0;
 8002cce:	2000      	movs	r0, #0
 8002cd0:	e017      	b.n	8002d02 <dnsParseName+0x96>
         pointer = (src[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	@ (8002d0c <dnsParseName+0xa0>)
 8002cd4:	ea02 2205 	and.w	r2, r2, r5, lsl #8
         pointer |= src[pos + 1];
 8002cd8:	f819 1003 	ldrb.w	r1, [r9, r3]
         if(!dnsParseName(message, length, pointer, dest, level + 1))
 8002cdc:	3701      	adds	r7, #1
 8002cde:	9700      	str	r7, [sp, #0]
 8002ce0:	4633      	mov	r3, r6
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	4648      	mov	r0, r9
 8002ce8:	f7ff ffc0 	bl	8002c6c <dnsParseName>
 8002cec:	b148      	cbz	r0, 8002d02 <dnsParseName+0x96>
         return (pos + 2);
 8002cee:	1ca0      	adds	r0, r4, #2
 8002cf0:	e007      	b.n	8002d02 <dnsParseName+0x96>
      }
      //Invalid label length?
      else
      {
         //Properly terminate the string
         if(dest != NULL)
 8002cf2:	b10e      	cbz	r6, 8002cf8 <dnsParseName+0x8c>
            *dest = '\0';
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	7033      	strb	r3, [r6, #0]
         //Domain name decoding failed
         return 0;
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	e002      	b.n	8002d02 <dnsParseName+0x96>
      }
   }

   //Domain name decoding failed
   return 0;
 8002cfc:	2000      	movs	r0, #0
 8002cfe:	e000      	b.n	8002d02 <dnsParseName+0x96>
      return 0;
 8002d00:	2000      	movs	r0, #0
}
 8002d02:	b003      	add	sp, #12
 8002d04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            return 0;
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e7fa      	b.n	8002d02 <dnsParseName+0x96>
 8002d0c:	ffff3f00 	.word	0xffff3f00

08002d10 <dnsCompareName>:
 *   second domain name lexicographically precedes the first name
 **/

int_t dnsCompareName(const DnsHeader *message, size_t length, size_t pos,
   const char_t *name, uint_t level)
{
 8002d10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d14:	b083      	sub	sp, #12
 8002d16:	4681      	mov	r9, r0
 8002d18:	4688      	mov	r8, r1
 8002d1a:	4615      	mov	r5, r2
 8002d1c:	461f      	mov	r7, r3
 8002d1e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
   size_t n;
   size_t pointer;
   uint8_t *p;

   //Recursion limit exceeded?
   if(level >= DNS_NAME_MAX_RECURSION)
 8002d20:	2e03      	cmp	r6, #3
 8002d22:	d83c      	bhi.n	8002d9e <dnsCompareName+0x8e>

   //Cast the DNS message to byte array
   p = (uint8_t *) message;

   //Parse encoded domain name
   while(pos < length)
 8002d24:	4545      	cmp	r5, r8
 8002d26:	d234      	bcs.n	8002d92 <dnsCompareName+0x82>
   {
      //Retrieve the length of the current label
      n = p[pos];
 8002d28:	f819 4005 	ldrb.w	r4, [r9, r5]

      //End marker found?
      if(n == 0)
 8002d2c:	b1b4      	cbz	r4, 8002d5c <dnsCompareName+0x4c>

         //The domain names match each other
         return 0;
      }
      //Compression tag found?
      else if(n >= DNS_COMPRESSION_TAG)
 8002d2e:	2cbf      	cmp	r4, #191	@ 0xbf
 8002d30:	d81b      	bhi.n	8002d6a <dnsCompareName+0x5a>
         return res;
      }
      else
      {
         //Advance data pointer
         pos++;
 8002d32:	1c68      	adds	r0, r5, #1

         //Malformed DNS message?
         if((pos + n) > length)
 8002d34:	1825      	adds	r5, r4, r0
 8002d36:	4545      	cmp	r5, r8
 8002d38:	d834      	bhi.n	8002da4 <dnsCompareName+0x94>
            return -2;

         //Compare current label
         res = osStrncasecmp((char_t *) p + pos, name, n);
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	4639      	mov	r1, r7
 8002d3e:	4448      	add	r0, r9
 8002d40:	f011 ffd2 	bl	8014ce8 <strncasecmp>
         //Any mismatch?
         if(res)
 8002d44:	4603      	mov	r3, r0
 8002d46:	bb30      	cbnz	r0, 8002d96 <dnsCompareName+0x86>
            return res;

         //Advance data pointer
         pos += n;
         name += n;
 8002d48:	4427      	add	r7, r4

         //The domain name which still has remaining data is deemed
         //lexicographically later
         if(*name != '\0' && *name != '.')
 8002d4a:	783b      	ldrb	r3, [r7, #0]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf18      	it	ne
 8002d50:	2b2e      	cmpne	r3, #46	@ 0x2e
 8002d52:	d12a      	bne.n	8002daa <dnsCompareName+0x9a>
            return -1;

         //Skip the separator character, if any
         if(*name == '.')
 8002d54:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d56:	d1e5      	bne.n	8002d24 <dnsCompareName+0x14>
            name++;
 8002d58:	3701      	adds	r7, #1
 8002d5a:	e7e3      	b.n	8002d24 <dnsCompareName+0x14>
         if(*name != '\0')
 8002d5c:	783b      	ldrb	r3, [r7, #0]
 8002d5e:	b90b      	cbnz	r3, 8002d64 <dnsCompareName+0x54>
         return 0;
 8002d60:	2300      	movs	r3, #0
 8002d62:	e018      	b.n	8002d96 <dnsCompareName+0x86>
            return -1;
 8002d64:	f04f 33ff 	mov.w	r3, #4294967295
 8002d68:	e015      	b.n	8002d96 <dnsCompareName+0x86>
         if((pos + 1) >= length)
 8002d6a:	3501      	adds	r5, #1
 8002d6c:	4545      	cmp	r5, r8
 8002d6e:	d301      	bcc.n	8002d74 <dnsCompareName+0x64>
            return FALSE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e010      	b.n	8002d96 <dnsCompareName+0x86>
         pointer = (p[pos] & ~DNS_COMPRESSION_TAG) << 8;
 8002d74:	4a0e      	ldr	r2, [pc, #56]	@ (8002db0 <dnsCompareName+0xa0>)
 8002d76:	ea02 2204 	and.w	r2, r2, r4, lsl #8
         pointer |= p[pos + 1];
 8002d7a:	f819 1005 	ldrb.w	r1, [r9, r5]
         res = dnsCompareName(message, length, pointer, name, level + 1);
 8002d7e:	3601      	adds	r6, #1
 8002d80:	9600      	str	r6, [sp, #0]
 8002d82:	463b      	mov	r3, r7
 8002d84:	430a      	orrs	r2, r1
 8002d86:	4641      	mov	r1, r8
 8002d88:	4648      	mov	r0, r9
 8002d8a:	f7ff ffc1 	bl	8002d10 <dnsCompareName>
 8002d8e:	4603      	mov	r3, r0
         return res;
 8002d90:	e001      	b.n	8002d96 <dnsCompareName+0x86>
      }
   }

   //Malformed DNS message
   return -2;
 8002d92:	f06f 0301 	mvn.w	r3, #1
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	b003      	add	sp, #12
 8002d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return -2;
 8002d9e:	f06f 0301 	mvn.w	r3, #1
 8002da2:	e7f8      	b.n	8002d96 <dnsCompareName+0x86>
            return -2;
 8002da4:	f06f 0301 	mvn.w	r3, #1
 8002da8:	e7f5      	b.n	8002d96 <dnsCompareName+0x86>
            return -1;
 8002daa:	f04f 33ff 	mov.w	r3, #4294967295
 8002dae:	e7f2      	b.n	8002d96 <dnsCompareName+0x86>
 8002db0:	ffff3f00 	.word	0xffff3f00

08002db4 <ethInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ethInit(NetInterface *interface)
{
 8002db4:	b508      	push	{r3, lr}
   //Clear the MAC filter table contents
   osMemset(interface->macAddrFilter, 0,
 8002db6:	22f0      	movs	r2, #240	@ 0xf0
 8002db8:	2100      	movs	r1, #0
 8002dba:	3090      	adds	r0, #144	@ 0x90
 8002dbc:	f011 ff62 	bl	8014c84 <memset>
      sizeof(interface->macAddrFilter));

   //Successful initialization
   return NO_ERROR;
}
 8002dc0:	2000      	movs	r0, #0
 8002dc2:	bd08      	pop	{r3, pc}

08002dc4 <ethProcessFrame>:
 *   the packet
 **/

void ethProcessFrame(NetInterface *interface, uint8_t *frame, size_t length,
   NetRxAncillary *ancillary)
{
 8002dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dc8:	b085      	sub	sp, #20
 8002dca:	4605      	mov	r5, r0
 8002dcc:	460e      	mov	r6, r1
 8002dce:	4614      	mov	r4, r2
 8002dd0:	4698      	mov	r8, r3

   //Start of exception handling block
   do
   {
      //Check whether the CRC is included in the received frame
      if(!interface->nicDriver->autoCrcStrip)
 8002dd2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dd6:	b143      	cbz	r3, 8002dea <ethProcessFrame+0x26>
      MIB2_IF_INC_COUNTER32(ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInOctets, length);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInOctets, length);

      //Malformed Ethernet frame?
      if(length < sizeof(EthHeader))
 8002dd8:	2c0d      	cmp	r4, #13
 8002dda:	d80d      	bhi.n	8002df8 <ethProcessFrame+0x34>
      {
         //Drop the received frame
         error = ERROR_INVALID_LENGTH;
 8002ddc:	21ec      	movs	r1, #236	@ 0xec

   //Invalid frame received?
   if(error)
   {
      //Update Ethernet statistics
      ethUpdateErrorStats(interface, error);
 8002dde:	4628      	mov	r0, r5
 8002de0:	f000 fa12 	bl	8003208 <ethUpdateErrorStats>
      {
         //Update Ethernet statistics
         ethUpdateErrorStats(virtualInterface, error);
      }
   }
}
 8002de4:	b005      	add	sp, #20
 8002de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         error = ethCheckCrc(interface, frame, length);
 8002dea:	f000 fa6f 	bl	80032cc <ethCheckCrc>
         if(error)
 8002dee:	4601      	mov	r1, r0
 8002df0:	2800      	cmp	r0, #0
 8002df2:	d1f4      	bne.n	8002dde <ethProcessFrame+0x1a>
         length -= ETH_CRC_SIZE;
 8002df4:	3c04      	subs	r4, #4
 8002df6:	e7ef      	b.n	8002dd8 <ethProcessFrame+0x14>
      type = ntohs(header->type);
 8002df8:	89b0      	ldrh	r0, [r6, #12]
 8002dfa:	f7fd fc0f 	bl	800061c <swapInt16>
 8002dfe:	4681      	mov	r9, r0
      data = header->data;
 8002e00:	f106 0a0e 	add.w	sl, r6, #14
      length -= sizeof(EthHeader);
 8002e04:	3c0e      	subs	r4, #14
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	f1bb 0f00 	cmp.w	fp, #0
 8002e0e:	d1e9      	bne.n	8002de4 <ethProcessFrame+0x20>
      virtualInterface = &netInterface[i];
 8002e10:	f241 27a4 	movw	r7, #4772	@ 0x12a4
 8002e14:	fb07 f70b 	mul.w	r7, r7, fp
 8002e18:	3758      	adds	r7, #88	@ 0x58
 8002e1a:	4b28      	ldr	r3, [pc, #160]	@ (8002ebc <ethProcessFrame+0xf8>)
 8002e1c:	441f      	add	r7, r3
      if(nicGetPhysicalInterface(virtualInterface) != interface)
 8002e1e:	4638      	mov	r0, r7
 8002e20:	f009 fe6a 	bl	800caf8 <nicGetPhysicalInterface>
 8002e24:	4285      	cmp	r5, r0
 8002e26:	d002      	beq.n	8002e2e <ethProcessFrame+0x6a>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8002e28:	f10b 0b01 	add.w	fp, fp, #1
 8002e2c:	e7ed      	b.n	8002e0a <ethProcessFrame+0x46>
         error = ethCheckDestAddr(virtualInterface, &header->destAddr);
 8002e2e:	4631      	mov	r1, r6
 8002e30:	4638      	mov	r0, r7
 8002e32:	f000 f9ad 	bl	8003190 <ethCheckDestAddr>
      if(!error)
 8002e36:	4601      	mov	r1, r0
 8002e38:	b9f0      	cbnz	r0, 8002e78 <ethProcessFrame+0xb4>
         ancillary->srcMacAddr = header->srcAddr;
 8002e3a:	f8d6 3006 	ldr.w	r3, [r6, #6]
 8002e3e:	f8c8 3002 	str.w	r3, [r8, #2]
 8002e42:	8973      	ldrh	r3, [r6, #10]
 8002e44:	f8a8 3006 	strh.w	r3, [r8, #6]
         ancillary->destMacAddr = header->destAddr;
 8002e48:	6833      	ldr	r3, [r6, #0]
 8002e4a:	f8c8 3008 	str.w	r3, [r8, #8]
 8002e4e:	88b3      	ldrh	r3, [r6, #4]
 8002e50:	f8a8 300c 	strh.w	r3, [r8, #12]
         ancillary->ethType = type;
 8002e54:	f8a8 900e 	strh.w	r9, [r8, #14]
         ethUpdateInStats(virtualInterface, &header->destAddr);
 8002e58:	4631      	mov	r1, r6
 8002e5a:	4638      	mov	r0, r7
 8002e5c:	f000 f9d2 	bl	8003204 <ethUpdateInStats>
         switch(type)
 8002e60:	f640 0306 	movw	r3, #2054	@ 0x806
 8002e64:	4599      	cmp	r9, r3
 8002e66:	d00b      	beq.n	8002e80 <ethProcessFrame+0xbc>
 8002e68:	f248 63dd 	movw	r3, #34525	@ 0x86dd
 8002e6c:	4599      	cmp	r9, r3
 8002e6e:	d014      	beq.n	8002e9a <ethProcessFrame+0xd6>
 8002e70:	f5b9 6f00 	cmp.w	r9, #2048	@ 0x800
 8002e74:	d00a      	beq.n	8002e8c <ethProcessFrame+0xc8>
 8002e76:	21e2      	movs	r1, #226	@ 0xe2
         ethUpdateErrorStats(virtualInterface, error);
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f000 f9c5 	bl	8003208 <ethUpdateErrorStats>
 8002e7e:	e7d3      	b.n	8002e28 <ethProcessFrame+0x64>
            arpProcessPacket(virtualInterface, (ArpPacket *) data, length);
 8002e80:	4622      	mov	r2, r4
 8002e82:	4651      	mov	r1, sl
 8002e84:	4638      	mov	r0, r7
 8002e86:	f7fe f83e 	bl	8000f06 <arpProcessPacket>
            break;
 8002e8a:	e7cd      	b.n	8002e28 <ethProcessFrame+0x64>
            ipv4ProcessPacket(virtualInterface, (Ipv4Header *) data, length,
 8002e8c:	4643      	mov	r3, r8
 8002e8e:	4622      	mov	r2, r4
 8002e90:	4651      	mov	r1, sl
 8002e92:	4638      	mov	r0, r7
 8002e94:	f002 fc97 	bl	80057c6 <ipv4ProcessPacket>
            break;
 8002e98:	e7c6      	b.n	8002e28 <ethProcessFrame+0x64>
            buffer.chunkCount = 1;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	9300      	str	r3, [sp, #0]
            buffer.maxChunkCount = 1;
 8002e9e:	9301      	str	r3, [sp, #4]
            buffer.chunk[0].address = data;
 8002ea0:	f8cd a008 	str.w	sl, [sp, #8]
            buffer.chunk[0].length = (uint16_t) length;
 8002ea4:	f8ad 400c 	strh.w	r4, [sp, #12]
            buffer.chunk[0].size = 0;
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f8ad 200e 	strh.w	r2, [sp, #14]
            ipv6ProcessPacket(virtualInterface, (NetBuffer *) &buffer, 0,
 8002eae:	4643      	mov	r3, r8
 8002eb0:	4669      	mov	r1, sp
 8002eb2:	4638      	mov	r0, r7
 8002eb4:	f003 fedc 	bl	8006c70 <ipv6ProcessPacket>
            break;
 8002eb8:	e7b6      	b.n	8002e28 <ethProcessFrame+0x64>
 8002eba:	bf00      	nop
 8002ebc:	20000b50 	.word	0x20000b50

08002ec0 <ethSendFrame>:
 * @return Error code
 **/

error_t ethSendFrame(NetInterface *interface, const MacAddr *destAddr,
   uint16_t type, NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8002ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	4607      	mov	r7, r0
 8002ec8:	4689      	mov	r9, r1
 8002eca:	4692      	mov	sl, r2
 8002ecc:	461d      	mov	r5, r3
 8002ece:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8002ed0:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
   }
#endif

   //If the source address is not specified, then use the MAC address of the
   //interface as source address
   if(macCompAddr(&ancillary->srcMacAddr, &MAC_UNSPECIFIED_ADDR))
 8002ed4:	2206      	movs	r2, #6
 8002ed6:	4931      	ldr	r1, [pc, #196]	@ (8002f9c <ethSendFrame+0xdc>)
 8002ed8:	f108 0014 	add.w	r0, r8, #20
 8002edc:	f011 fea8 	bl	8014c30 <memcmp>
 8002ee0:	b3b8      	cbz	r0, 8002f52 <ethSendFrame+0x92>
      //Get the MAC address of the interface
      ancillary->srcMacAddr = logicalInterface->macAddr;
   }

   //Sanity check
   if(offset < sizeof(EthHeader))
 8002ee2:	2e0d      	cmp	r6, #13
 8002ee4:	d958      	bls.n	8002f98 <ethSendFrame+0xd8>
      return ERROR_INVALID_PARAMETER;

   //Make room for the Ethernet header
   offset -= sizeof(EthHeader);
 8002ee6:	3e0e      	subs	r6, #14
   //Calculate the length of the frame
   length = netBufferGetLength(buffer) - offset;
 8002ee8:	4628      	mov	r0, r5
 8002eea:	f009 f8c5 	bl	800c078 <netBufferGetLength>
 8002eee:	1b80      	subs	r0, r0, r6
 8002ef0:	9000      	str	r0, [sp, #0]

   //Point to the beginning of the frame
   header = netBufferAt(buffer, offset, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	4631      	mov	r1, r6
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	f009 f95e 	bl	800c1b8 <netBufferAt>
 8002efc:	4604      	mov	r4, r0

   //Format Ethernet header
   header->destAddr = *destAddr;
 8002efe:	f8d9 3000 	ldr.w	r3, [r9]
 8002f02:	6003      	str	r3, [r0, #0]
 8002f04:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8002f08:	8083      	strh	r3, [r0, #4]
   header->srcAddr = ancillary->srcMacAddr;
 8002f0a:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8002f0e:	f8c4 0006 	str.w	r0, [r4, #6]
 8002f12:	f8b8 3018 	ldrh.w	r3, [r8, #24]
 8002f16:	8163      	strh	r3, [r4, #10]
   header->type = htons(type);
 8002f18:	4650      	mov	r0, sl
 8002f1a:	f7fd fb7f 	bl	800061c <swapInt16>
 8002f1e:	81a0      	strh	r0, [r4, #12]

   //Update Ethernet statistics
   ethUpdateOutStats(interface, &header->destAddr, length);
 8002f20:	9a00      	ldr	r2, [sp, #0]
 8002f22:	4621      	mov	r1, r4
 8002f24:	4638      	mov	r0, r7
 8002f26:	f000 f96e 	bl	8003206 <ethUpdateOutStats>
      TRACE_DEBUG("  Switch Port = %" PRIu8 "\r\n", ancillary->port);
   }
#endif

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8002f2a:	4638      	mov	r0, r7
 8002f2c:	f009 fde4 	bl	800caf8 <nicGetPhysicalInterface>
 8002f30:	4604      	mov	r4, r0
      length = netBufferGetLength(buffer) - offset;
   }
#endif

   //Valid NIC driver?
   if(physicalInterface->nicDriver != NULL)
 8002f32:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002f34:	b123      	cbz	r3, 8002f40 <ethSendFrame+0x80>
   {
      //Automatic padding not supported by hardware?
      if(!physicalInterface->nicDriver->autoPadding)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f38:	b1ab      	cbz	r3, 8002f66 <ethSendFrame+0xa6>
         if(error)
            return error;
      }

      //CRC calculation not supported by hardware?
      if(!physicalInterface->nicDriver->autoCrcCalc)
 8002f3a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3e:	b1cb      	cbz	r3, 8002f74 <ethSendFrame+0xb4>
         length += sizeof(crc);
      }
   }

   //Forward the frame to the physical interface
   error = nicSendPacket(physicalInterface, buffer, offset, ancillary);
 8002f40:	4643      	mov	r3, r8
 8002f42:	4632      	mov	r2, r6
 8002f44:	4629      	mov	r1, r5
 8002f46:	4620      	mov	r0, r4
 8002f48:	f009 fdf0 	bl	800cb2c <nicSendPacket>

   //Return status code
   return error;
}
 8002f4c:	b002      	add	sp, #8
 8002f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      logicalInterface = nicGetLogicalInterface(interface);
 8002f52:	4638      	mov	r0, r7
 8002f54:	f009 fdcf 	bl	800caf6 <nicGetLogicalInterface>
      ancillary->srcMacAddr = logicalInterface->macAddr;
 8002f58:	3088      	adds	r0, #136	@ 0x88
 8002f5a:	c803      	ldmia	r0, {r0, r1}
 8002f5c:	f8c8 0014 	str.w	r0, [r8, #20]
 8002f60:	f8a8 1018 	strh.w	r1, [r8, #24]
 8002f64:	e7bd      	b.n	8002ee2 <ethSendFrame+0x22>
         error = ethPadFrame(buffer, &length);
 8002f66:	4669      	mov	r1, sp
 8002f68:	4628      	mov	r0, r5
 8002f6a:	f000 f8fb 	bl	8003164 <ethPadFrame>
         if(error)
 8002f6e:	2800      	cmp	r0, #0
 8002f70:	d0e3      	beq.n	8002f3a <ethSendFrame+0x7a>
 8002f72:	e7eb      	b.n	8002f4c <ethSendFrame+0x8c>
         crc = ethCalcCrcEx(buffer, offset, length);
 8002f74:	9a00      	ldr	r2, [sp, #0]
 8002f76:	4631      	mov	r1, r6
 8002f78:	4628      	mov	r0, r5
 8002f7a:	f000 f967 	bl	800324c <ethCalcCrcEx>
 8002f7e:	9001      	str	r0, [sp, #4]
         error = netBufferAppend(buffer, &crc, sizeof(crc));
 8002f80:	2204      	movs	r2, #4
 8002f82:	eb0d 0102 	add.w	r1, sp, r2
 8002f86:	4628      	mov	r0, r5
 8002f88:	f009 f9eb 	bl	800c362 <netBufferAppend>
         if(error)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d1dd      	bne.n	8002f4c <ethSendFrame+0x8c>
         length += sizeof(crc);
 8002f90:	9b00      	ldr	r3, [sp, #0]
 8002f92:	3304      	adds	r3, #4
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	e7d3      	b.n	8002f40 <ethSendFrame+0x80>
      return ERROR_INVALID_PARAMETER;
 8002f98:	2002      	movs	r0, #2
 8002f9a:	e7d7      	b.n	8002f4c <ethSendFrame+0x8c>
 8002f9c:	08019ea0 	.word	0x08019ea0

08002fa0 <ethAcceptMacAddr>:
 * @param[in] macAddr MAC address to accept
 * @return Error code
 **/

error_t ethAcceptMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8002fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fa4:	4605      	mov	r5, r0
 8002fa6:	460f      	mov	r7, r1
   uint_t i;
   MacFilterEntry *entry;
   MacFilterEntry *firstFreeEntry;

   //Keep track of the first free entry
   firstFreeEntry = NULL;
 8002fa8:	2600      	movs	r6, #0

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8002faa:	4634      	mov	r4, r6
 8002fac:	e001      	b.n	8002fb2 <ethAcceptMacAddr+0x12>
         }
      }
      else
      {
         //Keep track of the first free entry
         if(firstFreeEntry == NULL)
 8002fae:	b306      	cbz	r6, 8002ff2 <ethAcceptMacAddr+0x52>
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8002fb0:	3401      	adds	r4, #1
 8002fb2:	2c0b      	cmp	r4, #11
 8002fb4:	d81f      	bhi.n	8002ff6 <ethAcceptMacAddr+0x56>
      entry = &interface->macAddrFilter[i];
 8002fb6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	3390      	adds	r3, #144	@ 0x90
 8002fbe:	442b      	add	r3, r5
      if(entry->refCount > 0)
 8002fc0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8002fc4:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8002fc8:	f8d2 8098 	ldr.w	r8, [r2, #152]	@ 0x98
 8002fcc:	f1b8 0f00 	cmp.w	r8, #0
 8002fd0:	d0ed      	beq.n	8002fae <ethAcceptMacAddr+0xe>
         if(macCompAddr(&entry->addr, macAddr))
 8002fd2:	2206      	movs	r2, #6
 8002fd4:	4639      	mov	r1, r7
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f011 fe2a 	bl	8014c30 <memcmp>
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d1e7      	bne.n	8002fb0 <ethAcceptMacAddr+0x10>
            entry->refCount++;
 8002fe0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8002fe4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 8002fe8:	f108 0301 	add.w	r3, r8, #1
 8002fec:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
            return NO_ERROR;
 8002ff0:	e010      	b.n	8003014 <ethAcceptMacAddr+0x74>
         {
            firstFreeEntry = entry;
 8002ff2:	461e      	mov	r6, r3
 8002ff4:	e7dc      	b.n	8002fb0 <ethAcceptMacAddr+0x10>
         }
      }
   }

   //Check whether the multicast filter table is full
   if(firstFreeEntry == NULL)
 8002ff6:	b17e      	cbz	r6, 8003018 <ethAcceptMacAddr+0x78>
      //A new entry cannot be added
      return ERROR_FAILURE;
   }

   //Add a new entry to the table
   firstFreeEntry->addr = *macAddr;
 8002ff8:	6838      	ldr	r0, [r7, #0]
 8002ffa:	6030      	str	r0, [r6, #0]
 8002ffc:	88bb      	ldrh	r3, [r7, #4]
 8002ffe:	80b3      	strh	r3, [r6, #4]
   //Initialize the reference count
   firstFreeEntry->refCount = 1;
 8003000:	2301      	movs	r3, #1
 8003002:	60b3      	str	r3, [r6, #8]

   //Force the network interface controller to add the current
   //entry to its MAC filter table
   firstFreeEntry->addFlag = TRUE;
 8003004:	60f3      	str	r3, [r6, #12]
   firstFreeEntry->deleteFlag = FALSE;
 8003006:	2400      	movs	r4, #0
 8003008:	6134      	str	r4, [r6, #16]

   //Update the MAC filter table
   nicUpdateMacAddrFilter(interface);
 800300a:	4628      	mov	r0, r5
 800300c:	f009 fdc8 	bl	800cba0 <nicUpdateMacAddrFilter>

   //Clear the flag
   firstFreeEntry->addFlag = FALSE;
 8003010:	60f4      	str	r4, [r6, #12]

   //No error to report
   return NO_ERROR;
 8003012:	4620      	mov	r0, r4
}
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_FAILURE;
 8003018:	2001      	movs	r0, #1
 800301a:	e7fb      	b.n	8003014 <ethAcceptMacAddr+0x74>

0800301c <ethDropMacAddr>:
 * @param[in] macAddr MAC address to drop
 * @return Error code
 **/

error_t ethDropMacAddr(NetInterface *interface, const MacAddr *macAddr)
{
 800301c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301e:	4605      	mov	r5, r0
 8003020:	460e      	mov	r6, r1
   uint_t i;
   MacFilterEntry *entry;

   //Go through the MAC filter table
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8003022:	2400      	movs	r4, #0
 8003024:	e00f      	b.n	8003046 <ethDropMacAddr+0x2a>
            //Remove the entry if the reference count drops to zero
            if(entry->refCount == 0)
            {
               //Force the network interface controller to remove the current
               //entry from its MAC filter table
               entry->deleteFlag = TRUE;
 8003026:	461e      	mov	r6, r3
 8003028:	2301      	movs	r3, #1
 800302a:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0

               //Update the MAC filter table
               nicUpdateMacAddrFilter(interface);
 800302e:	4628      	mov	r0, r5
 8003030:	f009 fdb6 	bl	800cba0 <nicUpdateMacAddrFilter>

               //Clear the flag
               entry->deleteFlag = FALSE;
 8003034:	2300      	movs	r3, #0
 8003036:	f8c6 30a0 	str.w	r3, [r6, #160]	@ 0xa0
               //Remove the multicast address from the list
               entry->addr = MAC_UNSPECIFIED_ADDR;
 800303a:	f8c6 3090 	str.w	r3, [r6, #144]	@ 0x90
 800303e:	f8a6 3094 	strh.w	r3, [r6, #148]	@ 0x94
 8003042:	e01e      	b.n	8003082 <ethDropMacAddr+0x66>
   for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 8003044:	3401      	adds	r4, #1
 8003046:	2c0b      	cmp	r4, #11
 8003048:	d81d      	bhi.n	8003086 <ethDropMacAddr+0x6a>
      if(entry->refCount > 0)
 800304a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800304e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8003052:	f8d3 7098 	ldr.w	r7, [r3, #152]	@ 0x98
 8003056:	2f00      	cmp	r7, #0
 8003058:	d0f4      	beq.n	8003044 <ethDropMacAddr+0x28>
         if(macCompAddr(&entry->addr, macAddr))
 800305a:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800305e:	0080      	lsls	r0, r0, #2
 8003060:	3090      	adds	r0, #144	@ 0x90
 8003062:	2206      	movs	r2, #6
 8003064:	4631      	mov	r1, r6
 8003066:	4428      	add	r0, r5
 8003068:	f011 fde2 	bl	8014c30 <memcmp>
 800306c:	2800      	cmp	r0, #0
 800306e:	d1e9      	bne.n	8003044 <ethDropMacAddr+0x28>
            entry->refCount--;
 8003070:	3f01      	subs	r7, #1
 8003072:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8003076:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800307a:	f8c3 7098 	str.w	r7, [r3, #152]	@ 0x98
            if(entry->refCount == 0)
 800307e:	2f00      	cmp	r7, #0
 8003080:	d0d1      	beq.n	8003026 <ethDropMacAddr+0xa>
            }

            //No error to report
            return NO_ERROR;
 8003082:	2000      	movs	r0, #0
 8003084:	e001      	b.n	800308a <ethDropMacAddr+0x6e>
         }
      }
   }

   //The specified MAC address does not exist
   return ERROR_ADDRESS_NOT_FOUND;
 8003086:	f240 202a 	movw	r0, #554	@ 0x22a
}
 800308a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800308c <ethAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ethAllocBuffer(size_t length, size_t *offset)
{
 800308c:	b510      	push	{r4, lr}
 800308e:	460c      	mov	r4, r1
   //Switch port tagging overhead
   n += ETH_PORT_TAG_SIZE;
#endif

   //Allocate a buffer to hold the Ethernet header and the payload
   buffer = netBufferAlloc(length + n);
 8003090:	300e      	adds	r0, #14
 8003092:	f009 f872 	bl	800c17a <netBufferAlloc>
   //Failed to allocate buffer?
   if(buffer == NULL)
 8003096:	b108      	cbz	r0, 800309c <ethAllocBuffer+0x10>
      return NULL;

   //Offset to the first byte of the payload
   *offset = n;
 8003098:	230e      	movs	r3, #14
 800309a:	6023      	str	r3, [r4, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
}
 800309c:	bd10      	pop	{r4, pc}
	...

080030a0 <macStringToAddr>:
 * @param[out] macAddr Binary representation of the MAC address
 * @return Error code
 **/

error_t macStringToAddr(const char_t *str, MacAddr *macAddr)
{
 80030a0:	b510      	push	{r4, lr}
   error_t error;
   int_t i = 0;
   int_t value = -1;
 80030a2:	f04f 32ff 	mov.w	r2, #4294967295
   int_t i = 0;
 80030a6:	f04f 0e00 	mov.w	lr, #0
 80030aa:	e00c      	b.n	80030c6 <macStringToAddr+0x26>
      //Hexadecimal digit found?
      if(isxdigit((uint8_t) *str))
      {
         //First digit to be decoded?
         if(value < 0)
            value = 0;
 80030ac:	2200      	movs	r2, #0
 80030ae:	e013      	b.n	80030d8 <macStringToAddr+0x38>
         //Update the value of the current byte
         if(osIsdigit(*str))
         {
            value = (value * 16) + (*str - '0');
         }
         else if(osIsupper(*str))
 80030b0:	f00c 0c03 	and.w	ip, ip, #3
 80030b4:	f1bc 0f01 	cmp.w	ip, #1
 80030b8:	d015      	beq.n	80030e6 <macStringToAddr+0x46>
         {
            value = (value * 16) + (*str - 'A' + 10);
         }
         else
         {
            value = (value * 16) + (*str - 'a' + 10);
 80030ba:	3b57      	subs	r3, #87	@ 0x57
 80030bc:	eb03 1202 	add.w	r2, r3, r2, lsl #4
         }

         //Check resulting value
         if(value > 0xFF)
 80030c0:	2aff      	cmp	r2, #255	@ 0xff
 80030c2:	dc30      	bgt.n	8003126 <macStringToAddr+0x86>
         error = ERROR_INVALID_SYNTAX;
         break;
      }

      //Point to the next character
      str++;
 80030c4:	3001      	adds	r0, #1
      if(isxdigit((uint8_t) *str))
 80030c6:	7803      	ldrb	r3, [r0, #0]
 80030c8:	4c1b      	ldr	r4, [pc, #108]	@ (8003138 <macStringToAddr+0x98>)
 80030ca:	f814 c003 	ldrb.w	ip, [r4, r3]
 80030ce:	f01c 0f44 	tst.w	ip, #68	@ 0x44
 80030d2:	d00c      	beq.n	80030ee <macStringToAddr+0x4e>
         if(value < 0)
 80030d4:	2a00      	cmp	r2, #0
 80030d6:	dbe9      	blt.n	80030ac <macStringToAddr+0xc>
         if(osIsdigit(*str))
 80030d8:	f01c 0f04 	tst.w	ip, #4
 80030dc:	d0e8      	beq.n	80030b0 <macStringToAddr+0x10>
            value = (value * 16) + (*str - '0');
 80030de:	3b30      	subs	r3, #48	@ 0x30
 80030e0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80030e4:	e7ec      	b.n	80030c0 <macStringToAddr+0x20>
            value = (value * 16) + (*str - 'A' + 10);
 80030e6:	3b37      	subs	r3, #55	@ 0x37
 80030e8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80030ec:	e7e8      	b.n	80030c0 <macStringToAddr+0x20>
      else if((*str == '-' || *str == ':') && i < 6)
 80030ee:	2b3a      	cmp	r3, #58	@ 0x3a
 80030f0:	bf18      	it	ne
 80030f2:	2b2d      	cmpne	r3, #45	@ 0x2d
 80030f4:	d10b      	bne.n	800310e <macStringToAddr+0x6e>
 80030f6:	f1be 0f05 	cmp.w	lr, #5
 80030fa:	dc08      	bgt.n	800310e <macStringToAddr+0x6e>
         if(value < 0)
 80030fc:	2a00      	cmp	r2, #0
 80030fe:	db14      	blt.n	800312a <macStringToAddr+0x8a>
         macAddr->b[i++] = value;
 8003100:	f801 200e 	strb.w	r2, [r1, lr]
 8003104:	f10e 0e01 	add.w	lr, lr, #1
         value = -1;
 8003108:	f04f 32ff 	mov.w	r2, #4294967295
 800310c:	e7da      	b.n	80030c4 <macStringToAddr+0x24>
      else if(*str == '\0' && i == 5)
 800310e:	b973      	cbnz	r3, 800312e <macStringToAddr+0x8e>
 8003110:	f1be 0f05 	cmp.w	lr, #5
 8003114:	d001      	beq.n	800311a <macStringToAddr+0x7a>
         error = ERROR_INVALID_SYNTAX;
 8003116:	2069      	movs	r0, #105	@ 0x69
 8003118:	e006      	b.n	8003128 <macStringToAddr+0x88>
         if(value < 0)
 800311a:	2a00      	cmp	r2, #0
 800311c:	db09      	blt.n	8003132 <macStringToAddr+0x92>
            macAddr->b[i] = value;
 800311e:	f801 200e 	strb.w	r2, [r1, lr]
            error = NO_ERROR;
 8003122:	2000      	movs	r0, #0
 8003124:	e000      	b.n	8003128 <macStringToAddr+0x88>
            error = ERROR_INVALID_SYNTAX;
 8003126:	2069      	movs	r0, #105	@ 0x69
   }

   //Return status code
   return error;
}
 8003128:	bd10      	pop	{r4, pc}
            error = ERROR_INVALID_SYNTAX;
 800312a:	2069      	movs	r0, #105	@ 0x69
 800312c:	e7fc      	b.n	8003128 <macStringToAddr+0x88>
         error = ERROR_INVALID_SYNTAX;
 800312e:	2069      	movs	r0, #105	@ 0x69
 8003130:	e7fa      	b.n	8003128 <macStringToAddr+0x88>
            error = ERROR_INVALID_SYNTAX;
 8003132:	2069      	movs	r0, #105	@ 0x69
 8003134:	e7f8      	b.n	8003128 <macStringToAddr+0x88>
 8003136:	bf00      	nop
 8003138:	0801a972 	.word	0x0801a972

0800313c <macAddrToEui64>:
 **/

void macAddrToEui64(const MacAddr *macAddr, Eui64 *interfaceId)
{
   //Copy the Organization Unique Identifier (OUI)
   interfaceId->b[0] = macAddr->b[0];
 800313c:	7803      	ldrb	r3, [r0, #0]
 800313e:	700b      	strb	r3, [r1, #0]
   interfaceId->b[1] = macAddr->b[1];
 8003140:	7842      	ldrb	r2, [r0, #1]
 8003142:	704a      	strb	r2, [r1, #1]
   interfaceId->b[2] = macAddr->b[2];
 8003144:	7882      	ldrb	r2, [r0, #2]
 8003146:	708a      	strb	r2, [r1, #2]

   //The middle 16 bits are given the value 0xFFFE
   interfaceId->b[3] = 0xFF;
 8003148:	22ff      	movs	r2, #255	@ 0xff
 800314a:	70ca      	strb	r2, [r1, #3]
   interfaceId->b[4] = 0xFE;
 800314c:	22fe      	movs	r2, #254	@ 0xfe
 800314e:	710a      	strb	r2, [r1, #4]

   //Copy the right-most 24 bits of the MAC address
   interfaceId->b[5] = macAddr->b[3];
 8003150:	78c2      	ldrb	r2, [r0, #3]
 8003152:	714a      	strb	r2, [r1, #5]
   interfaceId->b[6] = macAddr->b[4];
 8003154:	7902      	ldrb	r2, [r0, #4]
 8003156:	718a      	strb	r2, [r1, #6]
   interfaceId->b[7] = macAddr->b[5];
 8003158:	7942      	ldrb	r2, [r0, #5]
 800315a:	71ca      	strb	r2, [r1, #7]

   //Modified EUI-64 format interface identifiers are
   //formed by inverting the Universal/Local bit
   interfaceId->b[0] ^= MAC_ADDR_FLAG_LOCAL;
 800315c:	f083 0302 	eor.w	r3, r3, #2
 8003160:	700b      	strb	r3, [r1, #0]
}
 8003162:	4770      	bx	lr

08003164 <ethPadFrame>:
 * @param[in,out] length Length of the Ethernet frame, in bytes
 * @return Error code
 **/

error_t ethPadFrame(NetBuffer *buffer, size_t *length)
{
 8003164:	b538      	push	{r3, r4, r5, lr}
   error_t error;
   size_t n;

   //Ethernet frames have a minimum length of 64 byte
   if(*length < (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE))
 8003166:	680d      	ldr	r5, [r1, #0]
 8003168:	2d3b      	cmp	r5, #59	@ 0x3b
 800316a:	d901      	bls.n	8003170 <ethPadFrame+0xc>
      }
   }
   else
   {
      //No padding needed
      error = NO_ERROR;
 800316c:	2000      	movs	r0, #0
   }

   //Return status code
   return error;
}
 800316e:	bd38      	pop	{r3, r4, r5, pc}
 8003170:	460c      	mov	r4, r1
      n = (ETH_MIN_FRAME_SIZE - ETH_CRC_SIZE) - *length;
 8003172:	f1c5 053c 	rsb	r5, r5, #60	@ 0x3c
      error = netBufferAppend(buffer, ethPadding, n);
 8003176:	462a      	mov	r2, r5
 8003178:	4904      	ldr	r1, [pc, #16]	@ (800318c <ethPadFrame+0x28>)
 800317a:	f009 f8f2 	bl	800c362 <netBufferAppend>
      if(!error)
 800317e:	2800      	cmp	r0, #0
 8003180:	d1f5      	bne.n	800316e <ethPadFrame+0xa>
         *length += n;
 8003182:	6823      	ldr	r3, [r4, #0]
 8003184:	442b      	add	r3, r5
 8003186:	6023      	str	r3, [r4, #0]
 8003188:	e7f1      	b.n	800316e <ethPadFrame+0xa>
 800318a:	bf00      	nop
 800318c:	08019eb8 	.word	0x08019eb8

08003190 <ethCheckDestAddr>:
 * @param[in] macAddr Destination MAC address to be checked
 * @return Error code
 **/

error_t ethCheckDestAddr(NetInterface *interface, const MacAddr *macAddr)
{
 8003190:	b570      	push	{r4, r5, r6, lr}
 8003192:	4606      	mov	r6, r0
 8003194:	460d      	mov	r5, r1

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 8003196:	f009 fcae 	bl	800caf6 <nicGetLogicalInterface>

   //Interface MAC address?
   if(macCompAddr(macAddr, &logicalInterface->macAddr))
 800319a:	2206      	movs	r2, #6
 800319c:	f100 0188 	add.w	r1, r0, #136	@ 0x88
 80031a0:	4628      	mov	r0, r5
 80031a2:	f011 fd45 	bl	8014c30 <memcmp>
 80031a6:	b338      	cbz	r0, 80031f8 <ethCheckDestAddr+0x68>
   {
      error = NO_ERROR;
   }
   //Broadcast address?
   else if(macCompAddr(macAddr, &MAC_BROADCAST_ADDR))
 80031a8:	2206      	movs	r2, #6
 80031aa:	4915      	ldr	r1, [pc, #84]	@ (8003200 <ethCheckDestAddr+0x70>)
 80031ac:	4628      	mov	r0, r5
 80031ae:	f011 fd3f 	bl	8014c30 <memcmp>
 80031b2:	b318      	cbz	r0, 80031fc <ethCheckDestAddr+0x6c>
   {
      error = NO_ERROR;
   }
   //Multicast address?
   else if(macIsMulticastAddr(macAddr))
 80031b4:	782b      	ldrb	r3, [r5, #0]
 80031b6:	f013 0f01 	tst.w	r3, #1
 80031ba:	d001      	beq.n	80031c0 <ethCheckDestAddr+0x30>
      }
      else
#endif
      {
         //Go through the MAC filter table
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80031bc:	2400      	movs	r4, #0
 80031be:	e002      	b.n	80031c6 <ethCheckDestAddr+0x36>
   error = ERROR_INVALID_ADDRESS;
 80031c0:	20e4      	movs	r0, #228	@ 0xe4
 80031c2:	e01a      	b.n	80031fa <ethCheckDestAddr+0x6a>
         for(i = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 80031c4:	3401      	adds	r4, #1
 80031c6:	2c0b      	cmp	r4, #11
 80031c8:	d814      	bhi.n	80031f4 <ethCheckDestAddr+0x64>
         {
            //Point to the current entry
            entry = &interface->macAddrFilter[i];

            //Valid entry?
            if(entry->refCount > 0)
 80031ca:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80031ce:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80031d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0f4      	beq.n	80031c4 <ethCheckDestAddr+0x34>
            {
               //Check whether the destination MAC address matches
               //a relevant multicast address
               if(macCompAddr(&entry->addr, macAddr))
 80031da:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 80031de:	0080      	lsls	r0, r0, #2
 80031e0:	3090      	adds	r0, #144	@ 0x90
 80031e2:	2206      	movs	r2, #6
 80031e4:	4629      	mov	r1, r5
 80031e6:	4430      	add	r0, r6
 80031e8:	f011 fd22 	bl	8014c30 <memcmp>
 80031ec:	2800      	cmp	r0, #0
 80031ee:	d1e9      	bne.n	80031c4 <ethCheckDestAddr+0x34>
               {
                  //The MAC address is acceptable
                  error = NO_ERROR;
 80031f0:	2000      	movs	r0, #0
 80031f2:	e002      	b.n	80031fa <ethCheckDestAddr+0x6a>
   error = ERROR_INVALID_ADDRESS;
 80031f4:	20e4      	movs	r0, #228	@ 0xe4
 80031f6:	e000      	b.n	80031fa <ethCheckDestAddr+0x6a>
      error = NO_ERROR;
 80031f8:	2000      	movs	r0, #0
      }
   }

   //Return status code
   return error;
}
 80031fa:	bd70      	pop	{r4, r5, r6, pc}
      error = NO_ERROR;
 80031fc:	2000      	movs	r0, #0
 80031fe:	e7fc      	b.n	80031fa <ethCheckDestAddr+0x6a>
 8003200:	08019eb0 	.word	0x08019eb0

08003204 <ethUpdateInStats>:
      //Number of unicast packets delivered to a higher-layer protocol
      MIB2_IF_INC_COUNTER32(ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifInUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCInUcastPkts, 1);
   }
}
 8003204:	4770      	bx	lr

08003206 <ethUpdateOutStats>:
      //Number of unicast packets that higher-level protocols requested be transmitted
      MIB2_IF_INC_COUNTER32(ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER32(ifTable[interface->index].ifOutUcastPkts, 1);
      IF_MIB_INC_COUNTER64(ifXTable[interface->index].ifHCOutUcastPkts, 1);
   }
}
 8003206:	4770      	bx	lr

08003208 <ethUpdateErrorStats>:
      break;
   default:
      //Just for sanity
      break;
   }
}
 8003208:	4770      	bx	lr
	...

0800320c <ethCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrc(const void *data, size_t length)
{
 800320c:	b500      	push	{lr}
 800320e:	468e      	mov	lr, r1
   uint_t j;

   //Point to the data over which to calculate the CRC
   const uint8_t *p = (uint8_t *) data;
   //CRC preset value
   uint32_t crc = 0xFFFFFFFF;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295

   //Loop through data
   for(i = 0; i < length; i++)
 8003214:	f04f 0c00 	mov.w	ip, #0
 8003218:	e00c      	b.n	8003234 <ethCalcCrc+0x28>
         {
            crc = (crc >> 1) ^ 0xEDB88320;
         }
         else
         {
            crc = crc >> 1;
 800321a:	085b      	lsrs	r3, r3, #1
      for(j = 0; j < 8; j++)
 800321c:	3201      	adds	r2, #1
 800321e:	2a07      	cmp	r2, #7
 8003220:	d806      	bhi.n	8003230 <ethCalcCrc+0x24>
         if(crc & 0x00000001)
 8003222:	f013 0f01 	tst.w	r3, #1
 8003226:	d0f8      	beq.n	800321a <ethCalcCrc+0xe>
            crc = (crc >> 1) ^ 0xEDB88320;
 8003228:	4907      	ldr	r1, [pc, #28]	@ (8003248 <ethCalcCrc+0x3c>)
 800322a:	ea81 0353 	eor.w	r3, r1, r3, lsr #1
 800322e:	e7f5      	b.n	800321c <ethCalcCrc+0x10>
   for(i = 0; i < length; i++)
 8003230:	f10c 0c01 	add.w	ip, ip, #1
 8003234:	45f4      	cmp	ip, lr
 8003236:	d204      	bcs.n	8003242 <ethCalcCrc+0x36>
      crc ^= p[i];
 8003238:	f810 200c 	ldrb.w	r2, [r0, ip]
 800323c:	4053      	eors	r3, r2
      for(j = 0; j < 8; j++)
 800323e:	2200      	movs	r2, #0
 8003240:	e7ed      	b.n	800321e <ethCalcCrc+0x12>
   }

   //Return 1's complement value
   return ~crc;
#endif
}
 8003242:	43d8      	mvns	r0, r3
 8003244:	f85d fb04 	ldr.w	pc, [sp], #4
 8003248:	edb88320 	.word	0xedb88320

0800324c <ethCalcCrcEx>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t ethCalcCrcEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800324c:	b530      	push	{r4, r5, lr}
 800324e:	4604      	mov	r4, r0
 8003250:	4615      	mov	r5, r2
#if (ETH_FAST_CRC_SUPPORT == DISABLED)
   uint_t k;
#endif

   //CRC preset value
   crc = 0xFFFFFFFF;
 8003252:	f04f 33ff 	mov.w	r3, #4294967295

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 8003256:	2000      	movs	r0, #0
 8003258:	e025      	b.n	80032a6 <ethCalcCrcEx+0x5a>
   {
      //Is there any data to process in the current chunk?
      if(offset < buffer->chunk[i].length)
      {
         //Point to the first data byte
         p = (uint8_t *) buffer->chunk[i].address + offset;
 800325a:	1c42      	adds	r2, r0, #1
 800325c:	f854 2032 	ldr.w	r2, [r4, r2, lsl #3]
 8003260:	eb02 0e01 	add.w	lr, r2, r1
         //Compute the number of bytes to process
         n = MIN(buffer->chunk[i].length - offset, length);
 8003264:	ebac 0c01 	sub.w	ip, ip, r1
 8003268:	4661      	mov	r1, ip
 800326a:	45ac      	cmp	ip, r5
 800326c:	bf28      	it	cs
 800326e:	4629      	movcs	r1, r5
         //Adjust byte counter
         length -= n;
 8003270:	1a6d      	subs	r5, r5, r1

         //Process current chunk
         while(n > 0)
 8003272:	e00f      	b.n	8003294 <ethCalcCrcEx+0x48>
               {
                  crc = (crc >> 1) ^ 0xEDB88320;
               }
               else
               {
                  crc = crc >> 1;
 8003274:	085b      	lsrs	r3, r3, #1
            for(k = 0; k < 8; k++)
 8003276:	f10c 0c01 	add.w	ip, ip, #1
 800327a:	f1bc 0f07 	cmp.w	ip, #7
 800327e:	d806      	bhi.n	800328e <ethCalcCrcEx+0x42>
               if(crc & 0x00000001)
 8003280:	f013 0f01 	tst.w	r3, #1
 8003284:	d0f6      	beq.n	8003274 <ethCalcCrcEx+0x28>
                  crc = (crc >> 1) ^ 0xEDB88320;
 8003286:	4a10      	ldr	r2, [pc, #64]	@ (80032c8 <ethCalcCrcEx+0x7c>)
 8003288:	ea82 0353 	eor.w	r3, r2, r3, lsr #1
 800328c:	e7f3      	b.n	8003276 <ethCalcCrcEx+0x2a>
               }
            }
#endif
            //Next byte
            p++;
 800328e:	f10e 0e01 	add.w	lr, lr, #1
            n--;
 8003292:	3901      	subs	r1, #1
         while(n > 0)
 8003294:	b131      	cbz	r1, 80032a4 <ethCalcCrcEx+0x58>
            crc ^= *p;
 8003296:	f89e c000 	ldrb.w	ip, [lr]
 800329a:	ea83 030c 	eor.w	r3, r3, ip
            for(k = 0; k < 8; k++)
 800329e:	f04f 0c00 	mov.w	ip, #0
 80032a2:	e7ea      	b.n	800327a <ethCalcCrcEx+0x2e>
   for(i = 0; i < buffer->chunkCount && length > 0; i++)
 80032a4:	3001      	adds	r0, #1
 80032a6:	6822      	ldr	r2, [r4, #0]
 80032a8:	4282      	cmp	r2, r0
 80032aa:	d90b      	bls.n	80032c4 <ethCalcCrcEx+0x78>
 80032ac:	b155      	cbz	r5, 80032c4 <ethCalcCrcEx+0x78>
      if(offset < buffer->chunk[i].length)
 80032ae:	f100 0c01 	add.w	ip, r0, #1
 80032b2:	eb04 0ccc 	add.w	ip, r4, ip, lsl #3
 80032b6:	f8bc c004 	ldrh.w	ip, [ip, #4]
 80032ba:	458c      	cmp	ip, r1
 80032bc:	d8cd      	bhi.n	800325a <ethCalcCrcEx+0xe>
         offset = 0;
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 80032be:	eba1 010c 	sub.w	r1, r1, ip
 80032c2:	e7ef      	b.n	80032a4 <ethCalcCrcEx+0x58>
      }
   }

   //Return 1's complement value
   return ~crc;
}
 80032c4:	43d8      	mvns	r0, r3
 80032c6:	bd30      	pop	{r4, r5, pc}
 80032c8:	edb88320 	.word	0xedb88320

080032cc <ethCheckCrc>:
   size_t length)
{
   uint32_t crc;

   //Malformed Ethernet frame?
   if(length < (sizeof(EthHeader) + ETH_CRC_SIZE))
 80032cc:	2a11      	cmp	r2, #17
 80032ce:	d921      	bls.n	8003314 <ethCheckCrc+0x48>
{
 80032d0:	b538      	push	{r3, r4, r5, lr}
 80032d2:	460c      	mov	r4, r1
 80032d4:	4615      	mov	r5, r2
      //Drop the received frame
      return ERROR_INVALID_LENGTH;
   }

   //CRC verification not supported by hardware?
   if(!interface->nicDriver->autoCrcVerif)
 80032d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	b933      	cbnz	r3, 80032ea <ethCheckCrc+0x1e>
   {
      //The value of the residue is 0x2144DF1C when no CRC errors
      //are detected
      if(ethCalcCrc(frame, length) != 0x2144DF1C)
 80032dc:	4611      	mov	r1, r2
 80032de:	4620      	mov	r0, r4
 80032e0:	f7ff ff94 	bl	800320c <ethCalcCrc>
 80032e4:	4b0d      	ldr	r3, [pc, #52]	@ (800331c <ethCheckCrc+0x50>)
 80032e6:	4298      	cmp	r0, r3
 80032e8:	d116      	bne.n	8003318 <ethCheckCrc+0x4c>
         return ERROR_WRONG_CHECKSUM;
      }
   }

   //Retrieve CRC value
   crc = LOAD32BE(frame + length - ETH_CRC_SIZE);
 80032ea:	1f2b      	subs	r3, r5, #4
 80032ec:	5ce2      	ldrb	r2, [r4, r3]
 80032ee:	442c      	add	r4, r5
 80032f0:	f814 3c03 	ldrb.w	r3, [r4, #-3]
 80032f4:	041b      	lsls	r3, r3, #16
 80032f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80032fa:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 80032fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003302:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8003306:	4313      	orrs	r3, r2

   //Gather entropy
   netContext.entropy += crc;
 8003308:	4905      	ldr	r1, [pc, #20]	@ (8003320 <ethCheckCrc+0x54>)
 800330a:	698a      	ldr	r2, [r1, #24]
 800330c:	441a      	add	r2, r3
 800330e:	618a      	str	r2, [r1, #24]

   //Successful CRC verification
   return NO_ERROR;
 8003310:	2000      	movs	r0, #0
}
 8003312:	bd38      	pop	{r3, r4, r5, pc}
      return ERROR_INVALID_LENGTH;
 8003314:	20ec      	movs	r0, #236	@ 0xec
}
 8003316:	4770      	bx	lr
         return ERROR_WRONG_CHECKSUM;
 8003318:	20d5      	movs	r0, #213	@ 0xd5
 800331a:	e7fa      	b.n	8003312 <ethCheckCrc+0x46>
 800331c:	2144df1c 	.word	0x2144df1c
 8003320:	20000b50 	.word	0x20000b50

08003324 <ftpClientInit>:
#if (FTP_CLIENT_TLS_SUPPORT == ENABLED)
   error_t error;
#endif

   //Make sure the FTP client context is valid
   if(context == NULL)
 8003324:	b158      	cbz	r0, 800333e <ftpClientInit+0x1a>
{
 8003326:	b510      	push	{r4, lr}
 8003328:	4604      	mov	r4, r0
      return ERROR_INVALID_PARAMETER;

   //Clear FTP client context
   osMemset(context, 0, sizeof(FtpClientContext));
 800332a:	f44f 7211 	mov.w	r2, #580	@ 0x244
 800332e:	2100      	movs	r1, #0
 8003330:	f011 fca8 	bl	8014c84 <memset>
#endif

   //Initialize FTP client state
   context->state = FTP_CLIENT_STATE_DISCONNECTED;
   //Default timeout
   context->timeout = FTP_CLIENT_DEFAULT_TIMEOUT;
 8003334:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8003338:	60a3      	str	r3, [r4, #8]

   //Successful initialization
   return NO_ERROR;
 800333a:	2000      	movs	r0, #0
}
 800333c:	bd10      	pop	{r4, pc}
      return ERROR_INVALID_PARAMETER;
 800333e:	2002      	movs	r0, #2
}
 8003340:	4770      	bx	lr

08003342 <ftpClientSetTimeout>:
 **/

error_t ftpClientSetTimeout(FtpClientContext *context, systime_t timeout)
{
   //Make sure the FTP client context is valid
   if(context == NULL)
 8003342:	b110      	cbz	r0, 800334a <ftpClientSetTimeout+0x8>
      return ERROR_INVALID_PARAMETER;

   //Save timeout value
   context->timeout = timeout;
 8003344:	6081      	str	r1, [r0, #8]

   //Successful processing
   return NO_ERROR;
 8003346:	2000      	movs	r0, #0
 8003348:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800334a:	2002      	movs	r0, #2
}
 800334c:	4770      	bx	lr
	...

08003350 <ftpClientConnect>:
 * @return Error code
 **/

error_t ftpClientConnect(FtpClientContext *context,
   const IpAddr *serverIpAddr, uint16_t serverPort, uint_t mode)
{
 8003350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   error_t error;

   //Check parameters
   if(context == NULL || serverIpAddr == NULL)
 8003354:	2900      	cmp	r1, #0
 8003356:	bf18      	it	ne
 8003358:	2800      	cmpne	r0, #0
 800335a:	f000 80cf 	beq.w	80034fc <ftpClientConnect+0x1ac>
 800335e:	4617      	mov	r7, r2
 8003360:	461e      	mov	r6, r3
 8003362:	4604      	mov	r4, r0
 8003364:	4688      	mov	r8, r1
      return ERROR_INVALID_PARAMETER;

   //Initialize status code
   error = NO_ERROR;
 8003366:	2500      	movs	r5, #0

   //Establish connection with the FTP server
   while(!error)
 8003368:	b955      	cbnz	r5, 8003380 <ftpClientConnect+0x30>
   {
      //Check current state
      if(context->state == FTP_CLIENT_STATE_DISCONNECTED)
 800336a:	7821      	ldrb	r1, [r4, #0]
 800336c:	2906      	cmp	r1, #6
 800336e:	d805      	bhi.n	800337c <ftpClientConnect+0x2c>
 8003370:	e8df f001 	tbb	[pc, r1]
 8003374:	58300414 	.word	0x58300414
 8003378:	7306      	.short	0x7306
 800337a:	94          	.byte	0x94
 800337b:	00          	.byte	0x00
 800337c:	f240 15ff 	movw	r5, #511	@ 0x1ff
         error = ERROR_WRONG_STATE;
      }
   }

   //Check status code
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8003380:	f1a5 03dc 	sub.w	r3, r5, #220	@ 0xdc
 8003384:	b29b      	uxth	r3, r3
 8003386:	2b01      	cmp	r3, #1
 8003388:	f240 80aa 	bls.w	80034e0 <ftpClientConnect+0x190>
      //Check whether the timeout has elapsed
      error = ftpClientCheckTimeout(context);
   }

   //Failed to establish connection with the FTP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 800338c:	2d00      	cmp	r5, #0
 800338e:	bf18      	it	ne
 8003390:	2ddd      	cmpne	r5, #221	@ 0xdd
 8003392:	f040 80aa 	bne.w	80034ea <ftpClientConnect+0x19a>
      ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTED);
   }

   //Return status code
   return error;
}
 8003396:	4628      	mov	r0, r5
 8003398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         context->serverIpAddr = *serverIpAddr;
 800339c:	f104 0510 	add.w	r5, r4, #16
 80033a0:	46c4      	mov	ip, r8
 80033a2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80033a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033a8:	f8dc 3000 	ldr.w	r3, [ip]
 80033ac:	602b      	str	r3, [r5, #0]
         context->passiveMode = (mode & FTP_MODE_PASSIVE) ? TRUE : FALSE;
 80033ae:	f3c6 0380 	ubfx	r3, r6, #2, #1
 80033b2:	62a3      	str	r3, [r4, #40]	@ 0x28
         error = ftpClientOpenChannel(context, &context->controlChannel,
 80033b4:	f240 5396 	movw	r3, #1430	@ 0x596
 80033b8:	461a      	mov	r2, r3
 80033ba:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 80033be:	4620      	mov	r0, r4
 80033c0:	f000 fd9e 	bl	8003f00 <ftpClientOpenChannel>
         if(!error)
 80033c4:	4605      	mov	r5, r0
 80033c6:	2800      	cmp	r0, #0
 80033c8:	d1da      	bne.n	8003380 <ftpClientConnect+0x30>
            ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTING_TCP);
 80033ca:	2102      	movs	r1, #2
 80033cc:	4620      	mov	r0, r4
 80033ce:	f000 fa8a 	bl	80038e6 <ftpClientChangeState>
 80033d2:	e7c9      	b.n	8003368 <ftpClientConnect+0x18>
         error = socketConnect(context->controlChannel.socket, serverIpAddr,
 80033d4:	463a      	mov	r2, r7
 80033d6:	4641      	mov	r1, r8
 80033d8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80033da:	f00a f809 	bl	800d3f0 <socketConnect>
         if(!error)
 80033de:	4605      	mov	r5, r0
 80033e0:	2800      	cmp	r0, #0
 80033e2:	d1cd      	bne.n	8003380 <ftpClientConnect+0x30>
            if((mode & FTP_MODE_IMPLICIT_TLS) != 0)
 80033e4:	f016 0f01 	tst.w	r6, #1
 80033e8:	d010      	beq.n	800340c <ftpClientConnect+0xbc>
               error = ftpClientOpenSecureChannel(context,
 80033ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80033ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80033f2:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 80033f6:	4620      	mov	r0, r4
 80033f8:	f000 fdaa 	bl	8003f50 <ftpClientOpenSecureChannel>
               if(!error)
 80033fc:	4605      	mov	r5, r0
 80033fe:	2800      	cmp	r0, #0
 8003400:	d1be      	bne.n	8003380 <ftpClientConnect+0x30>
                  ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTING_TLS);
 8003402:	2103      	movs	r1, #3
 8003404:	4620      	mov	r0, r4
 8003406:	f000 fa6e 	bl	80038e6 <ftpClientChangeState>
 800340a:	e7ad      	b.n	8003368 <ftpClientConnect+0x18>
               context->bufferPos = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
               context->commandLen = 0;
 8003412:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
               context->replyLen = 0;
 8003416:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_1);
 800341a:	2105      	movs	r1, #5
 800341c:	4620      	mov	r0, r4
 800341e:	f000 fa62 	bl	80038e6 <ftpClientChangeState>
 8003422:	e7a1      	b.n	8003368 <ftpClientConnect+0x18>
         error = ftpClientEstablishSecureChannel(&context->controlChannel);
 8003424:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003428:	f000 fd94 	bl	8003f54 <ftpClientEstablishSecureChannel>
         if(!error)
 800342c:	4605      	mov	r5, r0
 800342e:	2800      	cmp	r0, #0
 8003430:	d1a6      	bne.n	8003380 <ftpClientConnect+0x30>
            if((mode & FTP_MODE_IMPLICIT_TLS) != 0)
 8003432:	f016 0f01 	tst.w	r6, #1
 8003436:	d00b      	beq.n	8003450 <ftpClientConnect+0x100>
               context->bufferPos = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
               context->commandLen = 0;
 800343e:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
               context->replyLen = 0;
 8003442:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_1);
 8003446:	2105      	movs	r1, #5
 8003448:	4620      	mov	r0, r4
 800344a:	f000 fa4c 	bl	80038e6 <ftpClientChangeState>
 800344e:	e78b      	b.n	8003368 <ftpClientConnect+0x18>
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003450:	2104      	movs	r1, #4
 8003452:	4620      	mov	r0, r4
 8003454:	f000 fa47 	bl	80038e6 <ftpClientChangeState>
 8003458:	e786      	b.n	8003368 <ftpClientConnect+0x18>
         error = ftpClientSendCommand(context);
 800345a:	4620      	mov	r0, r4
 800345c:	f000 fa4a 	bl	80038f4 <ftpClientSendCommand>
         if(!error)
 8003460:	4605      	mov	r5, r0
 8003462:	2800      	cmp	r0, #0
 8003464:	d18c      	bne.n	8003380 <ftpClientConnect+0x30>
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003466:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 800346a:	3bc8      	subs	r3, #200	@ 0xc8
 800346c:	2b63      	cmp	r3, #99	@ 0x63
 800346e:	d833      	bhi.n	80034d8 <ftpClientConnect+0x188>
               if((mode & FTP_MODE_EXPLICIT_TLS) != 0)
 8003470:	f016 0f02 	tst.w	r6, #2
 8003474:	d00d      	beq.n	8003492 <ftpClientConnect+0x142>
                  error = ftpClientFormatCommand(context, "AUTH TLS", NULL);
 8003476:	2200      	movs	r2, #0
 8003478:	4921      	ldr	r1, [pc, #132]	@ (8003500 <ftpClientConnect+0x1b0>)
 800347a:	4620      	mov	r0, r4
 800347c:	f000 fac0 	bl	8003a00 <ftpClientFormatCommand>
                  if(!error)
 8003480:	4605      	mov	r5, r0
 8003482:	2800      	cmp	r0, #0
 8003484:	f47f af7c 	bne.w	8003380 <ftpClientConnect+0x30>
                     ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_2);
 8003488:	2106      	movs	r1, #6
 800348a:	4620      	mov	r0, r4
 800348c:	f000 fa2b 	bl	80038e6 <ftpClientChangeState>
 8003490:	e76a      	b.n	8003368 <ftpClientConnect+0x18>
                  ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003492:	2104      	movs	r1, #4
 8003494:	4620      	mov	r0, r4
 8003496:	f000 fa26 	bl	80038e6 <ftpClientChangeState>
 800349a:	e765      	b.n	8003368 <ftpClientConnect+0x18>
         error = ftpClientSendCommand(context);
 800349c:	4620      	mov	r0, r4
 800349e:	f000 fa29 	bl	80038f4 <ftpClientSendCommand>
         if(!error)
 80034a2:	4605      	mov	r5, r0
 80034a4:	2800      	cmp	r0, #0
 80034a6:	f47f af6b 	bne.w	8003380 <ftpClientConnect+0x30>
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 80034aa:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 80034ae:	3bc8      	subs	r3, #200	@ 0xc8
 80034b0:	2b63      	cmp	r3, #99	@ 0x63
 80034b2:	d813      	bhi.n	80034dc <ftpClientConnect+0x18c>
               error = ftpClientOpenSecureChannel(context,
 80034b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034bc:	f104 012c 	add.w	r1, r4, #44	@ 0x2c
 80034c0:	4620      	mov	r0, r4
 80034c2:	f000 fd45 	bl	8003f50 <ftpClientOpenSecureChannel>
               if(!error)
 80034c6:	4605      	mov	r5, r0
 80034c8:	2800      	cmp	r0, #0
 80034ca:	f47f af59 	bne.w	8003380 <ftpClientConnect+0x30>
                  ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTING_TLS);
 80034ce:	2103      	movs	r1, #3
 80034d0:	4620      	mov	r0, r4
 80034d2:	f000 fa08 	bl	80038e6 <ftpClientChangeState>
 80034d6:	e747      	b.n	8003368 <ftpClientConnect+0x18>
               error = ERROR_UNEXPECTED_RESPONSE;
 80034d8:	256b      	movs	r5, #107	@ 0x6b
 80034da:	e751      	b.n	8003380 <ftpClientConnect+0x30>
               error = ERROR_UNEXPECTED_RESPONSE;
 80034dc:	256b      	movs	r5, #107	@ 0x6b
 80034de:	e74f      	b.n	8003380 <ftpClientConnect+0x30>
      error = ftpClientCheckTimeout(context);
 80034e0:	4620      	mov	r0, r4
 80034e2:	f000 fcb1 	bl	8003e48 <ftpClientCheckTimeout>
 80034e6:	4605      	mov	r5, r0
 80034e8:	e750      	b.n	800338c <ftpClientConnect+0x3c>
      ftpClientCloseChannel(&context->controlChannel);
 80034ea:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80034ee:	f000 fd3c 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTED);
 80034f2:	2100      	movs	r1, #0
 80034f4:	4620      	mov	r0, r4
 80034f6:	f000 f9f6 	bl	80038e6 <ftpClientChangeState>
 80034fa:	e74c      	b.n	8003396 <ftpClientConnect+0x46>
      return ERROR_INVALID_PARAMETER;
 80034fc:	2502      	movs	r5, #2
 80034fe:	e74a      	b.n	8003396 <ftpClientConnect+0x46>
 8003500:	0801a35c 	.word	0x0801a35c

08003504 <ftpClientLoginEx>:
 * @return Error code
 **/

error_t ftpClientLoginEx(FtpClientContext *context, const char_t *username,
   const char_t *password, const char_t *account)
{
 8003504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   error_t error;

   //Check parameters
   if(context == NULL || username == NULL || password == NULL || account == NULL)
 8003508:	2900      	cmp	r1, #0
 800350a:	bf18      	it	ne
 800350c:	2800      	cmpne	r0, #0
 800350e:	f000 8092 	beq.w	8003636 <ftpClientLoginEx+0x132>
 8003512:	4616      	mov	r6, r2
 8003514:	461f      	mov	r7, r3
 8003516:	4605      	mov	r5, r0
 8003518:	4688      	mov	r8, r1
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2a00      	cmp	r2, #0
 8003522:	f000 808a 	beq.w	800363a <ftpClientLoginEx+0x136>
 8003526:	2b00      	cmp	r3, #0
 8003528:	f040 8087 	bne.w	800363a <ftpClientLoginEx+0x136>
      return ERROR_INVALID_PARAMETER;

   //Initialize status code
   error = NO_ERROR;
 800352c:	2400      	movs	r4, #0

   //Execute FTP command sequence
   while(!error)
 800352e:	2c00      	cmp	r4, #0
 8003530:	d171      	bne.n	8003616 <ftpClientLoginEx+0x112>
   {
      //Check current state
      if(context->state == FTP_CLIENT_STATE_CONNECTED)
 8003532:	7829      	ldrb	r1, [r5, #0]
 8003534:	3904      	subs	r1, #4
 8003536:	2903      	cmp	r1, #3
 8003538:	d875      	bhi.n	8003626 <ftpClientLoginEx+0x122>
 800353a:	e8df f001 	tbb	[pc, r1]
 800353e:	0f02      	.short	0x0f02
 8003540:	5d37      	.short	0x5d37
      {
         //Format USER command
         error = ftpClientFormatCommand(context, "USER", username);
 8003542:	4642      	mov	r2, r8
 8003544:	493e      	ldr	r1, [pc, #248]	@ (8003640 <ftpClientLoginEx+0x13c>)
 8003546:	4628      	mov	r0, r5
 8003548:	f000 fa5a 	bl	8003a00 <ftpClientFormatCommand>

         //Check status code
         if(!error)
 800354c:	4604      	mov	r4, r0
 800354e:	2800      	cmp	r0, #0
 8003550:	d161      	bne.n	8003616 <ftpClientLoginEx+0x112>
         {
            //Send USER command and wait for the server's response
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_1);
 8003552:	2105      	movs	r1, #5
 8003554:	4628      	mov	r0, r5
 8003556:	f000 f9c6 	bl	80038e6 <ftpClientChangeState>
 800355a:	e7e8      	b.n	800352e <ftpClientLoginEx+0x2a>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_1)
      {
         //Send USER command and wait for the server's response
         error = ftpClientSendCommand(context);
 800355c:	4628      	mov	r0, r5
 800355e:	f000 f9c9 	bl	80038f4 <ftpClientSendCommand>

         //Check status code
         if(!error)
 8003562:	4604      	mov	r4, r0
 8003564:	2800      	cmp	r0, #0
 8003566:	d156      	bne.n	8003616 <ftpClientLoginEx+0x112>
         {
            //Check FTP response code
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003568:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
 800356c:	f1a3 02c8 	sub.w	r2, r3, #200	@ 0xc8
 8003570:	2a63      	cmp	r2, #99	@ 0x63
 8003572:	d910      	bls.n	8003596 <ftpClientLoginEx+0x92>
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
               //Successful user identification
               break;
            }
            else if(FTP_REPLY_CODE_3YZ(context->replyCode))
 8003574:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003578:	2b63      	cmp	r3, #99	@ 0x63
 800357a:	d811      	bhi.n	80035a0 <ftpClientLoginEx+0x9c>
            {
               //Format PASS command
               error = ftpClientFormatCommand(context, "PASS", password);
 800357c:	4632      	mov	r2, r6
 800357e:	4931      	ldr	r1, [pc, #196]	@ (8003644 <ftpClientLoginEx+0x140>)
 8003580:	4628      	mov	r0, r5
 8003582:	f000 fa3d 	bl	8003a00 <ftpClientFormatCommand>

               //Check status code
               if(!error)
 8003586:	4604      	mov	r4, r0
 8003588:	2800      	cmp	r0, #0
 800358a:	d144      	bne.n	8003616 <ftpClientLoginEx+0x112>
               {
                  //Send PASS command and wait for the server's response
                  ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_2);
 800358c:	2106      	movs	r1, #6
 800358e:	4628      	mov	r0, r5
 8003590:	f000 f9a9 	bl	80038e6 <ftpClientChangeState>
 8003594:	e7cb      	b.n	800352e <ftpClientLoginEx+0x2a>
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003596:	2104      	movs	r1, #4
 8003598:	4628      	mov	r0, r5
 800359a:	f000 f9a4 	bl	80038e6 <ftpClientChangeState>
               break;
 800359e:	e03a      	b.n	8003616 <ftpClientLoginEx+0x112>
               }
            }
            else
            {
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 80035a0:	2104      	movs	r1, #4
 80035a2:	4628      	mov	r0, r5
 80035a4:	f000 f99f 	bl	80038e6 <ftpClientChangeState>
               //Report an error
               error = ERROR_UNEXPECTED_RESPONSE;
 80035a8:	246b      	movs	r4, #107	@ 0x6b
 80035aa:	e034      	b.n	8003616 <ftpClientLoginEx+0x112>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_2)
      {
         //Send PASS command and wait for the server's response
         error = ftpClientSendCommand(context);
 80035ac:	4628      	mov	r0, r5
 80035ae:	f000 f9a1 	bl	80038f4 <ftpClientSendCommand>

         //Check status code
         if(!error)
 80035b2:	4604      	mov	r4, r0
 80035b4:	bb78      	cbnz	r0, 8003616 <ftpClientLoginEx+0x112>
         {
            //Check FTP response code
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 80035b6:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
 80035ba:	f1a3 02c8 	sub.w	r2, r3, #200	@ 0xc8
 80035be:	2a63      	cmp	r2, #99	@ 0x63
 80035c0:	d90f      	bls.n	80035e2 <ftpClientLoginEx+0xde>
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
               //Successful user identification
               break;
            }
            else if(FTP_REPLY_CODE_3YZ(context->replyCode))
 80035c2:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80035c6:	2b63      	cmp	r3, #99	@ 0x63
 80035c8:	d810      	bhi.n	80035ec <ftpClientLoginEx+0xe8>
            {
               //Format ACCT command
               error = ftpClientFormatCommand(context, "ACCT", account);
 80035ca:	463a      	mov	r2, r7
 80035cc:	491e      	ldr	r1, [pc, #120]	@ (8003648 <ftpClientLoginEx+0x144>)
 80035ce:	4628      	mov	r0, r5
 80035d0:	f000 fa16 	bl	8003a00 <ftpClientFormatCommand>

               //Check status code
               if(!error)
 80035d4:	4604      	mov	r4, r0
 80035d6:	b9f0      	cbnz	r0, 8003616 <ftpClientLoginEx+0x112>
               {
                  //Send ACCT command and wait for the server's response
                  ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_3);
 80035d8:	2107      	movs	r1, #7
 80035da:	4628      	mov	r0, r5
 80035dc:	f000 f983 	bl	80038e6 <ftpClientChangeState>
 80035e0:	e7a5      	b.n	800352e <ftpClientLoginEx+0x2a>
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 80035e2:	2104      	movs	r1, #4
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 f97e 	bl	80038e6 <ftpClientChangeState>
               break;
 80035ea:	e014      	b.n	8003616 <ftpClientLoginEx+0x112>
               }
            }
            else
            {
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 80035ec:	2104      	movs	r1, #4
 80035ee:	4628      	mov	r0, r5
 80035f0:	f000 f979 	bl	80038e6 <ftpClientChangeState>
               //Report an error
               error = ERROR_UNEXPECTED_RESPONSE;
 80035f4:	246b      	movs	r4, #107	@ 0x6b
 80035f6:	e00e      	b.n	8003616 <ftpClientLoginEx+0x112>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_3)
      {
         //Send ACCT command and wait for the server's response
         error = ftpClientSendCommand(context);
 80035f8:	4628      	mov	r0, r5
 80035fa:	f000 f97b 	bl	80038f4 <ftpClientSendCommand>

         //Check status code
         if(!error)
 80035fe:	4604      	mov	r4, r0
 8003600:	b948      	cbnz	r0, 8003616 <ftpClientLoginEx+0x112>
         {
            //Check FTP response code
            if(!FTP_REPLY_CODE_2YZ(context->replyCode))
 8003602:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
 8003606:	3bc8      	subs	r3, #200	@ 0xc8
 8003608:	2b63      	cmp	r3, #99	@ 0x63
 800360a:	d900      	bls.n	800360e <ftpClientLoginEx+0x10a>
            {
               //Report an error
               error = ERROR_UNEXPECTED_RESPONSE;
 800360c:	246b      	movs	r4, #107	@ 0x6b
            }

            //Update FTP client state
            ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 800360e:	2104      	movs	r1, #4
 8003610:	4628      	mov	r0, r5
 8003612:	f000 f968 	bl	80038e6 <ftpClientChangeState>
         error = ERROR_WRONG_STATE;
      }
   }

   //Check status code
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8003616:	f1a4 03dc 	sub.w	r3, r4, #220	@ 0xdc
 800361a:	b29b      	uxth	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d905      	bls.n	800362c <ftpClientLoginEx+0x128>
      error = ftpClientCheckTimeout(context);
   }

   //Return status code
   return error;
}
 8003620:	4620      	mov	r0, r4
 8003622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(context->state == FTP_CLIENT_STATE_CONNECTED)
 8003626:	f240 14ff 	movw	r4, #511	@ 0x1ff
 800362a:	e7f4      	b.n	8003616 <ftpClientLoginEx+0x112>
      error = ftpClientCheckTimeout(context);
 800362c:	4628      	mov	r0, r5
 800362e:	f000 fc0b 	bl	8003e48 <ftpClientCheckTimeout>
 8003632:	4604      	mov	r4, r0
 8003634:	e7f4      	b.n	8003620 <ftpClientLoginEx+0x11c>
      return ERROR_INVALID_PARAMETER;
 8003636:	2402      	movs	r4, #2
 8003638:	e7f2      	b.n	8003620 <ftpClientLoginEx+0x11c>
 800363a:	2402      	movs	r4, #2
 800363c:	e7f0      	b.n	8003620 <ftpClientLoginEx+0x11c>
 800363e:	bf00      	nop
 8003640:	0801a368 	.word	0x0801a368
 8003644:	0801a370 	.word	0x0801a370
 8003648:	0801a378 	.word	0x0801a378

0800364c <ftpClientLogin>:
{
 800364c:	b508      	push	{r3, lr}
   return ftpClientLoginEx(context, username, password, "");
 800364e:	4b02      	ldr	r3, [pc, #8]	@ (8003658 <ftpClientLogin+0xc>)
 8003650:	f7ff ff58 	bl	8003504 <ftpClientLoginEx>
}
 8003654:	bd08      	pop	{r3, pc}
 8003656:	bf00      	nop
 8003658:	0801a940 	.word	0x0801a940

0800365c <ftpClientOpenFile>:
 * @return Error code
 **/

error_t ftpClientOpenFile(FtpClientContext *context, const char_t *path,
   uint_t mode)
{
 800365c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   error_t error;

   //Check parameters
   if(context == NULL || path == NULL)
 800365e:	2900      	cmp	r1, #0
 8003660:	bf18      	it	ne
 8003662:	2800      	cmpne	r0, #0
 8003664:	f000 8091 	beq.w	800378a <ftpClientOpenFile+0x12e>
 8003668:	4616      	mov	r6, r2
 800366a:	4605      	mov	r5, r0
 800366c:	460f      	mov	r7, r1
      return ERROR_INVALID_PARAMETER;

   //Initialize status code
   error = NO_ERROR;
 800366e:	2400      	movs	r4, #0

   //Execute FTP command sequence
   while(!error)
 8003670:	2c00      	cmp	r4, #0
 8003672:	d167      	bne.n	8003744 <ftpClientOpenFile+0xe8>
   {
      //Check current state
      if(context->state == FTP_CLIENT_STATE_CONNECTED)
 8003674:	782b      	ldrb	r3, [r5, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	2b0c      	cmp	r3, #12
 800367a:	d873      	bhi.n	8003764 <ftpClientOpenFile+0x108>
 800367c:	e8df f003 	tbb	[pc, r3]
 8003680:	072e2e2e 	.word	0x072e2e2e
 8003684:	2e2e2e1e 	.word	0x2e2e2e1e
 8003688:	2e3d2e2e 	.word	0x2e3d2e2e
 800368c:	5b          	.byte	0x5b
 800368d:	00          	.byte	0x00
      {
         //Set representation type
         if((mode & FTP_FILE_MODE_TEXT) != 0)
 800368e:	f016 0f04 	tst.w	r6, #4
 8003692:	d00c      	beq.n	80036ae <ftpClientOpenFile+0x52>
         {
            //Use ASCII type
            error = ftpClientFormatCommand(context, "TYPE", "A");
 8003694:	4a3e      	ldr	r2, [pc, #248]	@ (8003790 <ftpClientOpenFile+0x134>)
 8003696:	493f      	ldr	r1, [pc, #252]	@ (8003794 <ftpClientOpenFile+0x138>)
 8003698:	4628      	mov	r0, r5
 800369a:	f000 f9b1 	bl	8003a00 <ftpClientFormatCommand>
 800369e:	4604      	mov	r4, r0
            //Use image type
            error = ftpClientFormatCommand(context, "TYPE", "I");
         }

         //Check status code
         if(!error)
 80036a0:	2c00      	cmp	r4, #0
 80036a2:	d14f      	bne.n	8003744 <ftpClientOpenFile+0xe8>
         {
            //Send TYPE command and wait for the server's response
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_1);
 80036a4:	2105      	movs	r1, #5
 80036a6:	4628      	mov	r0, r5
 80036a8:	f000 f91d 	bl	80038e6 <ftpClientChangeState>
 80036ac:	e7e0      	b.n	8003670 <ftpClientOpenFile+0x14>
            error = ftpClientFormatCommand(context, "TYPE", "I");
 80036ae:	4a3a      	ldr	r2, [pc, #232]	@ (8003798 <ftpClientOpenFile+0x13c>)
 80036b0:	4938      	ldr	r1, [pc, #224]	@ (8003794 <ftpClientOpenFile+0x138>)
 80036b2:	4628      	mov	r0, r5
 80036b4:	f000 f9a4 	bl	8003a00 <ftpClientFormatCommand>
 80036b8:	4604      	mov	r4, r0
 80036ba:	e7f1      	b.n	80036a0 <ftpClientOpenFile+0x44>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_1)
      {
         //Send TYPE command and wait for the server's response
         error = ftpClientSendCommand(context);
 80036bc:	4628      	mov	r0, r5
 80036be:	f000 f919 	bl	80038f4 <ftpClientSendCommand>

         //Check status code
         if(!error)
 80036c2:	4604      	mov	r4, r0
 80036c4:	2800      	cmp	r0, #0
 80036c6:	d13d      	bne.n	8003744 <ftpClientOpenFile+0xe8>
         {
            //Check FTP response code
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 80036c8:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
 80036cc:	3bc8      	subs	r3, #200	@ 0xc8
 80036ce:	2b63      	cmp	r3, #99	@ 0x63
 80036d0:	d84b      	bhi.n	800376a <ftpClientOpenFile+0x10e>
            {
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_2);
 80036d2:	2106      	movs	r1, #6
 80036d4:	4628      	mov	r0, r5
 80036d6:	f000 f906 	bl	80038e6 <ftpClientChangeState>
 80036da:	e7c9      	b.n	8003670 <ftpClientOpenFile+0x14>
         context->state == FTP_CLIENT_STATE_SUB_COMMAND_8 ||
         context->state == FTP_CLIENT_STATE_ACCEPTING_TCP ||
         context->state == FTP_CLIENT_STATE_CONNECTING_TLS)
      {
         //Initiate data transfer
         if((mode & FTP_FILE_MODE_WRITE) != 0 ||
 80036dc:	f016 0f03 	tst.w	r6, #3
 80036e0:	d005      	beq.n	80036ee <ftpClientOpenFile+0x92>
            (mode & FTP_FILE_MODE_APPEND) != 0)
         {
            error = ftpClientInitDataTransfer(context, TRUE);
 80036e2:	2101      	movs	r1, #1
 80036e4:	4628      	mov	r0, r5
 80036e6:	f000 faad 	bl	8003c44 <ftpClientInitDataTransfer>
 80036ea:	4604      	mov	r4, r0
 80036ec:	e7c0      	b.n	8003670 <ftpClientOpenFile+0x14>
         }
         else
         {
            error = ftpClientInitDataTransfer(context, FALSE);
 80036ee:	2100      	movs	r1, #0
 80036f0:	4628      	mov	r0, r5
 80036f2:	f000 faa7 	bl	8003c44 <ftpClientInitDataTransfer>
 80036f6:	4604      	mov	r4, r0
 80036f8:	e7ba      	b.n	8003670 <ftpClientOpenFile+0x14>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_7)
      {
         //Format STOR/APPE/RETR command
         if((mode & FTP_FILE_MODE_WRITE) != 0)
 80036fa:	f016 0f01 	tst.w	r6, #1
 80036fe:	d10e      	bne.n	800371e <ftpClientOpenFile+0xc2>
         {
            ftpClientFormatCommand(context, "STOR", path);
         }
         else if((mode & FTP_FILE_MODE_APPEND) != 0)
 8003700:	f016 0f02 	tst.w	r6, #2
 8003704:	d011      	beq.n	800372a <ftpClientOpenFile+0xce>
         {
            ftpClientFormatCommand(context, "APPE", path);
 8003706:	463a      	mov	r2, r7
 8003708:	4924      	ldr	r1, [pc, #144]	@ (800379c <ftpClientOpenFile+0x140>)
 800370a:	4628      	mov	r0, r5
 800370c:	f000 f978 	bl	8003a00 <ftpClientFormatCommand>
         {
            ftpClientFormatCommand(context, "RETR", path);
         }

         //Check status code
         if(!error)
 8003710:	2c00      	cmp	r4, #0
 8003712:	d1ad      	bne.n	8003670 <ftpClientOpenFile+0x14>
         {
            //Send STOR/APPE/RETR command and wait for the server's response
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_8);
 8003714:	210c      	movs	r1, #12
 8003716:	4628      	mov	r0, r5
 8003718:	f000 f8e5 	bl	80038e6 <ftpClientChangeState>
 800371c:	e7a8      	b.n	8003670 <ftpClientOpenFile+0x14>
            ftpClientFormatCommand(context, "STOR", path);
 800371e:	463a      	mov	r2, r7
 8003720:	491f      	ldr	r1, [pc, #124]	@ (80037a0 <ftpClientOpenFile+0x144>)
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f96c 	bl	8003a00 <ftpClientFormatCommand>
 8003728:	e7f2      	b.n	8003710 <ftpClientOpenFile+0xb4>
            ftpClientFormatCommand(context, "RETR", path);
 800372a:	463a      	mov	r2, r7
 800372c:	491d      	ldr	r1, [pc, #116]	@ (80037a4 <ftpClientOpenFile+0x148>)
 800372e:	4628      	mov	r0, r5
 8003730:	f000 f966 	bl	8003a00 <ftpClientFormatCommand>
 8003734:	e7ec      	b.n	8003710 <ftpClientOpenFile+0xb4>
         }
      }
      else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_9)
      {
         //Check data transfer direction
         if((mode & FTP_FILE_MODE_WRITE) != 0 ||
 8003736:	f016 0f03 	tst.w	r6, #3
 800373a:	d00e      	beq.n	800375a <ftpClientOpenFile+0xfe>
            (mode & FTP_FILE_MODE_APPEND) != 0)
         {
            //The content of the file can be written via the data connection
            ftpClientChangeState(context, FTP_CLIENT_STATE_WRITING_DATA);
 800373c:	210e      	movs	r1, #14
 800373e:	4628      	mov	r0, r5
 8003740:	f000 f8d1 	bl	80038e6 <ftpClientChangeState>
         error = ERROR_WRONG_STATE;
      }
   }

   //Check status code
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8003744:	f1a4 03dc 	sub.w	r3, r4, #220	@ 0xdc
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d90f      	bls.n	800376e <ftpClientOpenFile+0x112>
      //Check whether the timeout has elapsed
      error = ftpClientCheckTimeout(context);
   }

   //Failed to open file?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 800374e:	2c00      	cmp	r4, #0
 8003750:	bf18      	it	ne
 8003752:	2cdd      	cmpne	r4, #221	@ 0xdd
 8003754:	d110      	bne.n	8003778 <ftpClientOpenFile+0x11c>
      ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
   }

   //Return status code
   return error;
}
 8003756:	4620      	mov	r0, r4
 8003758:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ftpClientChangeState(context, FTP_CLIENT_STATE_READING_DATA);
 800375a:	210f      	movs	r1, #15
 800375c:	4628      	mov	r0, r5
 800375e:	f000 f8c2 	bl	80038e6 <ftpClientChangeState>
 8003762:	e7ef      	b.n	8003744 <ftpClientOpenFile+0xe8>
      if(context->state == FTP_CLIENT_STATE_CONNECTED)
 8003764:	f240 14ff 	movw	r4, #511	@ 0x1ff
 8003768:	e7ec      	b.n	8003744 <ftpClientOpenFile+0xe8>
               error = ERROR_UNEXPECTED_RESPONSE;
 800376a:	246b      	movs	r4, #107	@ 0x6b
 800376c:	e7ea      	b.n	8003744 <ftpClientOpenFile+0xe8>
      error = ftpClientCheckTimeout(context);
 800376e:	4628      	mov	r0, r5
 8003770:	f000 fb6a 	bl	8003e48 <ftpClientCheckTimeout>
 8003774:	4604      	mov	r4, r0
 8003776:	e7ea      	b.n	800374e <ftpClientOpenFile+0xf2>
      ftpClientCloseChannel(&context->dataChannel);
 8003778:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 800377c:	f000 fbf5 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003780:	2104      	movs	r1, #4
 8003782:	4628      	mov	r0, r5
 8003784:	f000 f8af 	bl	80038e6 <ftpClientChangeState>
 8003788:	e7e5      	b.n	8003756 <ftpClientOpenFile+0xfa>
      return ERROR_INVALID_PARAMETER;
 800378a:	2402      	movs	r4, #2
 800378c:	e7e3      	b.n	8003756 <ftpClientOpenFile+0xfa>
 800378e:	bf00      	nop
 8003790:	0801a390 	.word	0x0801a390
 8003794:	0801a394 	.word	0x0801a394
 8003798:	0801a3b0 	.word	0x0801a3b0
 800379c:	0801a3bc 	.word	0x0801a3bc
 80037a0:	0801a3b4 	.word	0x0801a3b4
 80037a4:	0801a3c4 	.word	0x0801a3c4

080037a8 <ftpClientReadFile>:
 * @return Error code
 **/

error_t ftpClientReadFile(FtpClientContext *context, void *data, size_t size,
   size_t *received, uint_t flags)
{
 80037a8:	b530      	push	{r4, r5, lr}
 80037aa:	b083      	sub	sp, #12
   error_t error;

   //Check parameters
   if(context == NULL || data == NULL || received == NULL)
 80037ac:	2900      	cmp	r1, #0
 80037ae:	bf18      	it	ne
 80037b0:	2800      	cmpne	r0, #0
 80037b2:	d021      	beq.n	80037f8 <ftpClientReadFile+0x50>
 80037b4:	4605      	mov	r5, r0
 80037b6:	460c      	mov	r4, r1
 80037b8:	b303      	cbz	r3, 80037fc <ftpClientReadFile+0x54>
      return ERROR_INVALID_PARAMETER;

   //Check current state
   if(context->state == FTP_CLIENT_STATE_READING_DATA)
 80037ba:	7800      	ldrb	r0, [r0, #0]
 80037bc:	280f      	cmp	r0, #15
 80037be:	d004      	beq.n	80037ca <ftpClientReadFile+0x22>
      }
   }
   else
   {
      //Invalid state
      error = ERROR_WRONG_STATE;
 80037c0:	f240 14ff 	movw	r4, #511	@ 0x1ff
   }

   //Return status code
   return error;
}
 80037c4:	4620      	mov	r0, r4
 80037c6:	b003      	add	sp, #12
 80037c8:	bd30      	pop	{r4, r5, pc}
      error = ftpClientReadChannel(&context->dataChannel, data, size,
 80037ca:	9906      	ldr	r1, [sp, #24]
 80037cc:	9100      	str	r1, [sp, #0]
 80037ce:	4621      	mov	r1, r4
 80037d0:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80037d4:	f000 fbdb 	bl	8003f8e <ftpClientReadChannel>
      if(error == NO_ERROR)
 80037d8:	4604      	mov	r4, r0
 80037da:	b148      	cbz	r0, 80037f0 <ftpClientReadFile+0x48>
      else if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 80037dc:	f1a0 03dc 	sub.w	r3, r0, #220	@ 0xdc
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d8ee      	bhi.n	80037c4 <ftpClientReadFile+0x1c>
         error = ftpClientCheckTimeout(context);
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fb2e 	bl	8003e48 <ftpClientCheckTimeout>
 80037ec:	4604      	mov	r4, r0
 80037ee:	e7e9      	b.n	80037c4 <ftpClientReadFile+0x1c>
         context->timestamp = osGetSystemTime();
 80037f0:	f7fd f804 	bl	80007fc <osGetSystemTime>
 80037f4:	60e8      	str	r0, [r5, #12]
 80037f6:	e7e5      	b.n	80037c4 <ftpClientReadFile+0x1c>
      return ERROR_INVALID_PARAMETER;
 80037f8:	2402      	movs	r4, #2
 80037fa:	e7e3      	b.n	80037c4 <ftpClientReadFile+0x1c>
 80037fc:	2402      	movs	r4, #2
 80037fe:	e7e1      	b.n	80037c4 <ftpClientReadFile+0x1c>

08003800 <ftpClientCloseFile>:
 **/

error_t ftpClientCloseFile(FtpClientContext *context)
{
   //Make sure the FTP client context is valid
   if(context == NULL)
 8003800:	b118      	cbz	r0, 800380a <ftpClientCloseFile+0xa>
{
 8003802:	b508      	push	{r3, lr}
      return ERROR_INVALID_PARAMETER;

   //Close data connection and get transfer status
   return ftpClientTerminateDataTransfer(context);
 8003804:	f000 fb22 	bl	8003e4c <ftpClientTerminateDataTransfer>
}
 8003808:	bd08      	pop	{r3, pc}
      return ERROR_INVALID_PARAMETER;
 800380a:	2002      	movs	r0, #2
}
 800380c:	4770      	bx	lr

0800380e <ftpClientDisconnect>:
 * @param[in] context Pointer to the FTP client context
 * @return Error code
 **/

error_t ftpClientDisconnect(FtpClientContext *context)
{
 800380e:	b570      	push	{r4, r5, r6, lr}
   error_t error;

   //Make sure the FTP client context is valid
   if(context == NULL)
 8003810:	2800      	cmp	r0, #0
 8003812:	d054      	beq.n	80038be <ftpClientDisconnect+0xb0>
 8003814:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //Initialize status code
   error = NO_ERROR;
 8003816:	2400      	movs	r4, #0

   //Execute FTP command sequence
   while(!error)
 8003818:	b97c      	cbnz	r4, 800383a <ftpClientDisconnect+0x2c>
   {
      //Check current state
      if(context->state == FTP_CLIENT_STATE_CONNECTED)
 800381a:	782b      	ldrb	r3, [r5, #0]
 800381c:	2b11      	cmp	r3, #17
 800381e:	d80a      	bhi.n	8003836 <ftpClientDisconnect+0x28>
 8003820:	e8df f003 	tbb	[pc, r3]
 8003824:	0909090b 	.word	0x0909090b
 8003828:	09090916 	.word	0x09090916
 800382c:	09090909 	.word	0x09090909
 8003830:	09090909 	.word	0x09090909
 8003834:	2b1b      	.short	0x2b1b
 8003836:	f240 14ff 	movw	r4, #511	@ 0x1ff
         error = ERROR_WRONG_STATE;
      }
   }

   //Check status code
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 800383a:	f1a4 03dc 	sub.w	r3, r4, #220	@ 0xdc
 800383e:	b29b      	uxth	r3, r3
 8003840:	2b01      	cmp	r3, #1
 8003842:	d92a      	bls.n	800389a <ftpClientDisconnect+0x8c>
      //Check whether the timeout has elapsed
      error = ftpClientCheckTimeout(context);
   }

   //Failed to gracefully disconnect from the FTP server?
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 8003844:	2c00      	cmp	r4, #0
 8003846:	bf18      	it	ne
 8003848:	2cdd      	cmpne	r4, #221	@ 0xdd
 800384a:	d12b      	bne.n	80038a4 <ftpClientDisconnect+0x96>
      ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTED);
   }

   //Return status code
   return error;
}
 800384c:	4620      	mov	r0, r4
 800384e:	bd70      	pop	{r4, r5, r6, pc}
         ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTING_1);
 8003850:	2110      	movs	r1, #16
 8003852:	4628      	mov	r0, r5
 8003854:	f000 f847 	bl	80038e6 <ftpClientChangeState>
 8003858:	e7de      	b.n	8003818 <ftpClientDisconnect+0xa>
         error = ftpClientShutdownChannel(&context->dataChannel);
 800385a:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 800385e:	4630      	mov	r0, r6
 8003860:	f000 fb7a 	bl	8003f58 <ftpClientShutdownChannel>
         if(!error)
 8003864:	4604      	mov	r4, r0
 8003866:	2800      	cmp	r0, #0
 8003868:	d1e7      	bne.n	800383a <ftpClientDisconnect+0x2c>
            ftpClientCloseChannel(&context->dataChannel);
 800386a:	4630      	mov	r0, r6
 800386c:	f000 fb7d 	bl	8003f6a <ftpClientCloseChannel>
            ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTING_2);
 8003870:	2111      	movs	r1, #17
 8003872:	4628      	mov	r0, r5
 8003874:	f000 f837 	bl	80038e6 <ftpClientChangeState>
 8003878:	e7ce      	b.n	8003818 <ftpClientDisconnect+0xa>
         error = ftpClientShutdownChannel(&context->controlChannel);
 800387a:	f105 062c 	add.w	r6, r5, #44	@ 0x2c
 800387e:	4630      	mov	r0, r6
 8003880:	f000 fb6a 	bl	8003f58 <ftpClientShutdownChannel>
         if(!error)
 8003884:	4604      	mov	r4, r0
 8003886:	2800      	cmp	r0, #0
 8003888:	d1d7      	bne.n	800383a <ftpClientDisconnect+0x2c>
            ftpClientCloseChannel(&context->controlChannel);
 800388a:	4630      	mov	r0, r6
 800388c:	f000 fb6d 	bl	8003f6a <ftpClientCloseChannel>
            ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTED);
 8003890:	2100      	movs	r1, #0
 8003892:	4628      	mov	r0, r5
 8003894:	f000 f827 	bl	80038e6 <ftpClientChangeState>
 8003898:	e7be      	b.n	8003818 <ftpClientDisconnect+0xa>
      error = ftpClientCheckTimeout(context);
 800389a:	4628      	mov	r0, r5
 800389c:	f000 fad4 	bl	8003e48 <ftpClientCheckTimeout>
 80038a0:	4604      	mov	r4, r0
 80038a2:	e7cf      	b.n	8003844 <ftpClientDisconnect+0x36>
      ftpClientCloseChannel(&context->dataChannel);
 80038a4:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 80038a8:	f000 fb5f 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientCloseChannel(&context->controlChannel);
 80038ac:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 80038b0:	f000 fb5b 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTED);
 80038b4:	2100      	movs	r1, #0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 f815 	bl	80038e6 <ftpClientChangeState>
 80038bc:	e7c6      	b.n	800384c <ftpClientDisconnect+0x3e>
      return ERROR_INVALID_PARAMETER;
 80038be:	2402      	movs	r4, #2
 80038c0:	e7c4      	b.n	800384c <ftpClientDisconnect+0x3e>

080038c2 <ftpClientDeinit>:
 **/

void ftpClientDeinit(FtpClientContext *context)
{
   //Make sure the FTP client context is valid
   if(context != NULL)
 80038c2:	b178      	cbz	r0, 80038e4 <ftpClientDeinit+0x22>
{
 80038c4:	b510      	push	{r4, lr}
 80038c6:	4604      	mov	r4, r0
   {
      //Close data and control connections
      ftpClientCloseChannel(&context->dataChannel);
 80038c8:	3030      	adds	r0, #48	@ 0x30
 80038ca:	f000 fb4e 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientCloseChannel(&context->controlChannel);
 80038ce:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80038d2:	f000 fb4a 	bl	8003f6a <ftpClientCloseChannel>
      //Release TLS session state
      tlsFreeSessionState(&context->tlsSession);
#endif

      //Clear FTP client context
      osMemset(context, 0, sizeof(FtpClientContext));
 80038d6:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80038da:	2100      	movs	r1, #0
 80038dc:	4620      	mov	r0, r4
 80038de:	f011 f9d1 	bl	8014c84 <memset>
   }
}
 80038e2:	bd10      	pop	{r4, pc}
 80038e4:	4770      	bx	lr

080038e6 <ftpClientChangeState>:
 * @param[in] context Pointer to the FTP client context
 * @param[in] newState New state to switch to
 **/

void ftpClientChangeState(FtpClientContext *context, FtpClientState newState)
{
 80038e6:	b510      	push	{r4, lr}
 80038e8:	4604      	mov	r4, r0
   //Switch to the new state
   context->state = newState;
 80038ea:	7001      	strb	r1, [r0, #0]

   //Save current time
   context->timestamp = osGetSystemTime();
 80038ec:	f7fc ff86 	bl	80007fc <osGetSystemTime>
 80038f0:	60e0      	str	r0, [r4, #12]
}
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <ftpClientSendCommand>:
 * @param[in] context Pointer to the FTP client context
 * @return Error code
 **/

error_t ftpClientSendCommand(FtpClientContext *context)
{
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	4604      	mov	r4, r0

   //Initialize status code
   error = NO_ERROR;

   //Point to the server's response
   reply = context->buffer;
 80038fa:	f100 0634 	add.w	r6, r0, #52	@ 0x34
   error = NO_ERROR;
 80038fe:	2500      	movs	r5, #0

   //Send FTP command and wait for the FTP reply to be received
   while(!error)
 8003900:	e041      	b.n	8003986 <ftpClientSendCommand+0x92>
   {
      //Send FTP command
      if(context->bufferPos < context->commandLen)
      {
         //Send more data
         error = ftpClientWriteChannel(&context->controlChannel,
 8003902:	2300      	movs	r3, #0
 8003904:	9300      	str	r3, [sp, #0]
 8003906:	ab03      	add	r3, sp, #12
 8003908:	1a52      	subs	r2, r2, r1
 800390a:	4431      	add	r1, r6
 800390c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003910:	f000 fb34 	bl	8003f7c <ftpClientWriteChannel>
            context->buffer + context->bufferPos,
            context->commandLen - context->bufferPos, &n, 0);

         //Check status code
         if(error == NO_ERROR || error == ERROR_TIMEOUT)
 8003914:	4605      	mov	r5, r0
 8003916:	28dc      	cmp	r0, #220	@ 0xdc
 8003918:	bf18      	it	ne
 800391a:	2800      	cmpne	r0, #0
 800391c:	d12d      	bne.n	800397a <ftpClientSendCommand+0x86>
         {
            //Advance data pointer
            context->bufferPos += n;
 800391e:	f8d4 2234 	ldr.w	r2, [r4, #564]	@ 0x234
 8003922:	9b03      	ldr	r3, [sp, #12]
 8003924:	4413      	add	r3, r2
 8003926:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 800392a:	e02c      	b.n	8003986 <ftpClientSendCommand+0x92>

         //Receive FTP response
         if(more)
         {
            //Receive more data
            error = ftpClientReadChannel(&context->controlChannel,
 800392c:	f241 030a 	movw	r3, #4106	@ 0x100a
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	ab03      	add	r3, sp, #12
 8003934:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8003938:	1a52      	subs	r2, r2, r1
 800393a:	4431      	add	r1, r6
 800393c:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003940:	f000 fb25 	bl	8003f8e <ftpClientReadChannel>
               context->buffer + context->replyLen,
               FTP_CLIENT_BUFFER_SIZE - 1 - context->replyLen,
               &n, SOCKET_FLAG_BREAK_CRLF);

            //Check status code
            if(!error)
 8003944:	4605      	mov	r5, r0
 8003946:	b9c0      	cbnz	r0, 800397a <ftpClientSendCommand+0x86>
            {
               //Advance data pointer
               context->replyLen += n;
 8003948:	f8d4 223c 	ldr.w	r2, [r4, #572]	@ 0x23c
 800394c:	9b03      	ldr	r3, [sp, #12]
 800394e:	4413      	add	r3, r2
 8003950:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
 8003954:	e017      	b.n	8003986 <ftpClientSendCommand+0x92>
            {
               //A space character follows the response code for the last line
               if(reply[3] == ' ' || reply[3] == '\0')
               {
                  //Debug message
                  TRACE_DEBUG("FTP server: %s\r\n", reply);
 8003956:	f7fc feeb 	bl	8000730 <osSuspendAllTasks>
 800395a:	4b26      	ldr	r3, [pc, #152]	@ (80039f4 <ftpClientSendCommand+0x100>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4632      	mov	r2, r6
 8003960:	4925      	ldr	r1, [pc, #148]	@ (80039f8 <ftpClientSendCommand+0x104>)
 8003962:	68d8      	ldr	r0, [r3, #12]
 8003964:	f010 fe80 	bl	8014668 <fprintf>
 8003968:	f7fc feeb 	bl	8000742 <osResumeAllTasks>

                  //Retrieve FTP reply code
                  context->replyCode = osStrtoul(reply, NULL, 10);
 800396c:	220a      	movs	r2, #10
 800396e:	2100      	movs	r1, #0
 8003970:	4630      	mov	r0, r6
 8003972:	f010 fdcb 	bl	801450c <strtoul>
 8003976:	f8c4 0240 	str.w	r0, [r4, #576]	@ 0x240
      }
   }

   //Return status code
   return error;
}
 800397a:	4628      	mov	r0, r5
 800397c:	b004      	add	sp, #16
 800397e:	bd70      	pop	{r4, r5, r6, pc}
               context->replyLen = 0;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
   while(!error)
 8003986:	2d00      	cmp	r5, #0
 8003988:	d1f7      	bne.n	800397a <ftpClientSendCommand+0x86>
      if(context->bufferPos < context->commandLen)
 800398a:	f8d4 1234 	ldr.w	r1, [r4, #564]	@ 0x234
 800398e:	f8d4 2238 	ldr.w	r2, [r4, #568]	@ 0x238
 8003992:	4291      	cmp	r1, r2
 8003994:	d3b5      	bcc.n	8003902 <ftpClientSendCommand+0xe>
         if(context->replyLen != 0 && reply[context->replyLen - 1] == '\n')
 8003996:	f8d4 123c 	ldr.w	r1, [r4, #572]	@ 0x23c
 800399a:	b121      	cbz	r1, 80039a6 <ftpClientSendCommand+0xb2>
 800399c:	1873      	adds	r3, r6, r1
 800399e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80039a2:	2b0a      	cmp	r3, #10
 80039a4:	d003      	beq.n	80039ae <ftpClientSendCommand+0xba>
         else if(context->replyLen == (FTP_CLIENT_BUFFER_SIZE - 1))
 80039a6:	f240 13ff 	movw	r3, #511	@ 0x1ff
 80039aa:	4299      	cmp	r1, r3
 80039ac:	d1be      	bne.n	800392c <ftpClientSendCommand+0x38>
            reply[context->replyLen] = '\0';
 80039ae:	2300      	movs	r3, #0
 80039b0:	5473      	strb	r3, [r6, r1]
            strRemoveTrailingSpace(reply);
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7fc ff30 	bl	8000818 <strRemoveTrailingSpace>
            if(osIsdigit(reply[0]) &&
 80039b8:	f894 3034 	ldrb.w	r3, [r4, #52]	@ 0x34
 80039bc:	4a0f      	ldr	r2, [pc, #60]	@ (80039fc <ftpClientSendCommand+0x108>)
 80039be:	5cd3      	ldrb	r3, [r2, r3]
 80039c0:	f013 0f04 	tst.w	r3, #4
 80039c4:	d0dc      	beq.n	8003980 <ftpClientSendCommand+0x8c>
               osIsdigit(reply[1]) &&
 80039c6:	f894 3035 	ldrb.w	r3, [r4, #53]	@ 0x35
 80039ca:	5cd3      	ldrb	r3, [r2, r3]
            if(osIsdigit(reply[0]) &&
 80039cc:	f013 0f04 	tst.w	r3, #4
 80039d0:	d0d6      	beq.n	8003980 <ftpClientSendCommand+0x8c>
               osIsdigit(reply[2]))
 80039d2:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 80039d6:	5cd3      	ldrb	r3, [r2, r3]
               osIsdigit(reply[1]) &&
 80039d8:	f013 0f04 	tst.w	r3, #4
 80039dc:	d0d0      	beq.n	8003980 <ftpClientSendCommand+0x8c>
               if(reply[3] == ' ' || reply[3] == '\0')
 80039de:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf18      	it	ne
 80039e6:	2b20      	cmpne	r3, #32
 80039e8:	d0b5      	beq.n	8003956 <ftpClientSendCommand+0x62>
                  context->replyLen = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f8c4 323c 	str.w	r3, [r4, #572]	@ 0x23c
               if(reply[3] == ' ' || reply[3] == '\0')
 80039f0:	e7c9      	b.n	8003986 <ftpClientSendCommand+0x92>
 80039f2:	bf00      	nop
 80039f4:	20000440 	.word	0x20000440
 80039f8:	0801a3e4 	.word	0x0801a3e4
 80039fc:	0801a972 	.word	0x0801a972

08003a00 <ftpClientFormatCommand>:
 * @return Error code
 **/

error_t ftpClientFormatCommand(FtpClientContext *context,
   const char_t *command, const char_t *argument)
{
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4604      	mov	r4, r0
   //The argument is optional
   if(argument != NULL)
 8003a04:	b1ea      	cbz	r2, 8003a42 <ftpClientFormatCommand+0x42>
 8003a06:	4613      	mov	r3, r2
   {
      //Format FTP command
      osSprintf(context->buffer, "%s %s\r\n", command, argument);
 8003a08:	460a      	mov	r2, r1
 8003a0a:	4911      	ldr	r1, [pc, #68]	@ (8003a50 <ftpClientFormatCommand+0x50>)
 8003a0c:	3034      	adds	r0, #52	@ 0x34
 8003a0e:	f011 f853 	bl	8014ab8 <sprintf>
      //Format FTP command
      osSprintf(context->buffer, "%s\r\n", command);
   }

   //Calculate the length of the FTP command
   context->commandLen = osStrlen(context->buffer);
 8003a12:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8003a16:	4628      	mov	r0, r5
 8003a18:	f7fc fc62 	bl	80002e0 <strlen>
 8003a1c:	f8c4 0238 	str.w	r0, [r4, #568]	@ 0x238

   //Debug message
   TRACE_DEBUG("FTP client: %s", context->buffer);
 8003a20:	f7fc fe86 	bl	8000730 <osSuspendAllTasks>
 8003a24:	4b0b      	ldr	r3, [pc, #44]	@ (8003a54 <ftpClientFormatCommand+0x54>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	462a      	mov	r2, r5
 8003a2a:	490b      	ldr	r1, [pc, #44]	@ (8003a58 <ftpClientFormatCommand+0x58>)
 8003a2c:	68d8      	ldr	r0, [r3, #12]
 8003a2e:	f010 fe1b 	bl	8014668 <fprintf>
 8003a32:	f7fc fe86 	bl	8000742 <osResumeAllTasks>

   //Flush receive buffer
   context->bufferPos = 0;
 8003a36:	2000      	movs	r0, #0
 8003a38:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
   context->replyLen = 0;
 8003a3c:	f8c4 023c 	str.w	r0, [r4, #572]	@ 0x23c

   //Successful processing
   return NO_ERROR;
}
 8003a40:	bd38      	pop	{r3, r4, r5, pc}
      osSprintf(context->buffer, "%s\r\n", command);
 8003a42:	460a      	mov	r2, r1
 8003a44:	4905      	ldr	r1, [pc, #20]	@ (8003a5c <ftpClientFormatCommand+0x5c>)
 8003a46:	3034      	adds	r0, #52	@ 0x34
 8003a48:	f011 f836 	bl	8014ab8 <sprintf>
 8003a4c:	e7e1      	b.n	8003a12 <ftpClientFormatCommand+0x12>
 8003a4e:	bf00      	nop
 8003a50:	0801a3f8 	.word	0x0801a3f8
 8003a54:	20000440 	.word	0x20000440
 8003a58:	0801a400 	.word	0x0801a400
 8003a5c:	0801a3f0 	.word	0x0801a3f0

08003a60 <ftpClientFormatPortCommand>:
 * @return Error code
 **/

error_t ftpClientFormatPortCommand(FtpClientContext *context,
   const IpAddr *ipAddr, uint16_t port)
{
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	4604      	mov	r4, r0
 8003a64:	460b      	mov	r3, r1
 8003a66:	4615      	mov	r5, r2
   //Initialize status code
   error = NO_ERROR;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8003a68:	6809      	ldr	r1, [r1, #0]
 8003a6a:	2904      	cmp	r1, #4
 8003a6c:	d003      	beq.n	8003a76 <ftpClientFormatPortCommand+0x16>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 8003a6e:	2910      	cmp	r1, #16
 8003a70:	d01c      	beq.n	8003aac <ftpClientFormatPortCommand+0x4c>
   else
#endif
   //Invalid IP address?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 8003a72:	20e4      	movs	r0, #228	@ 0xe4
      context->replyLen = 0;
   }

   //Return status code
   return error;
}
 8003a74:	bd70      	pop	{r4, r5, r6, pc}
      n = osSprintf(context->buffer, "PORT ");
 8003a76:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8003a7a:	4a23      	ldr	r2, [pc, #140]	@ (8003b08 <ftpClientFormatPortCommand+0xa8>)
 8003a7c:	6810      	ldr	r0, [r2, #0]
 8003a7e:	6360      	str	r0, [r4, #52]	@ 0x34
 8003a80:	8892      	ldrh	r2, [r2, #4]
 8003a82:	8722      	strh	r2, [r4, #56]	@ 0x38
      ipv4AddrToString(ipAddr->ipv4Addr, context->buffer + n);
 8003a84:	f104 0139 	add.w	r1, r4, #57	@ 0x39
 8003a88:	6858      	ldr	r0, [r3, #4]
 8003a8a:	f002 f897 	bl	8005bbc <ipv4AddrToString>
      strReplaceChar(context->buffer, '.', ',');
 8003a8e:	222c      	movs	r2, #44	@ 0x2c
 8003a90:	212e      	movs	r1, #46	@ 0x2e
 8003a92:	4630      	mov	r0, r6
 8003a94:	f7fc fed4 	bl	8000840 <strReplaceChar>
      p = context->buffer + osStrlen(context->buffer);
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f7fc fc21 	bl	80002e0 <strlen>
      osSprintf(p, ",%" PRIu8 ",%" PRIu8 "\r\n", MSB(port), LSB(port));
 8003a9e:	b2eb      	uxtb	r3, r5
 8003aa0:	0a2a      	lsrs	r2, r5, #8
 8003aa2:	491a      	ldr	r1, [pc, #104]	@ (8003b0c <ftpClientFormatPortCommand+0xac>)
 8003aa4:	4430      	add	r0, r6
 8003aa6:	f011 f807 	bl	8014ab8 <sprintf>
   if(!error)
 8003aaa:	e015      	b.n	8003ad8 <ftpClientFormatPortCommand+0x78>
      n = osSprintf(context->buffer, "EPRT |2|");
 8003aac:	f100 0634 	add.w	r6, r0, #52	@ 0x34
 8003ab0:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <ftpClientFormatPortCommand+0xb0>)
 8003ab2:	ca03      	ldmia	r2!, {r0, r1}
 8003ab4:	6360      	str	r0, [r4, #52]	@ 0x34
 8003ab6:	63a1      	str	r1, [r4, #56]	@ 0x38
 8003ab8:	7812      	ldrb	r2, [r2, #0]
 8003aba:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      ipv6AddrToString(&ipAddr->ipv6Addr, context->buffer + n);
 8003abe:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8003ac2:	1d18      	adds	r0, r3, #4
 8003ac4:	f003 fcae 	bl	8007424 <ipv6AddrToString>
      p = context->buffer + osStrlen(context->buffer);
 8003ac8:	4630      	mov	r0, r6
 8003aca:	f7fc fc09 	bl	80002e0 <strlen>
      osSprintf(p, "|%" PRIu16 "|\r\n", port);
 8003ace:	462a      	mov	r2, r5
 8003ad0:	4910      	ldr	r1, [pc, #64]	@ (8003b14 <ftpClientFormatPortCommand+0xb4>)
 8003ad2:	4430      	add	r0, r6
 8003ad4:	f010 fff0 	bl	8014ab8 <sprintf>
      context->commandLen = osStrlen(context->buffer);
 8003ad8:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8003adc:	4628      	mov	r0, r5
 8003ade:	f7fc fbff 	bl	80002e0 <strlen>
 8003ae2:	f8c4 0238 	str.w	r0, [r4, #568]	@ 0x238
      TRACE_DEBUG("FTP client: %s", context->buffer);
 8003ae6:	f7fc fe23 	bl	8000730 <osSuspendAllTasks>
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <ftpClientFormatPortCommand+0xb8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	462a      	mov	r2, r5
 8003af0:	490a      	ldr	r1, [pc, #40]	@ (8003b1c <ftpClientFormatPortCommand+0xbc>)
 8003af2:	68d8      	ldr	r0, [r3, #12]
 8003af4:	f010 fdb8 	bl	8014668 <fprintf>
 8003af8:	f7fc fe23 	bl	8000742 <osResumeAllTasks>
      context->bufferPos = 0;
 8003afc:	2000      	movs	r0, #0
 8003afe:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
      context->replyLen = 0;
 8003b02:	f8c4 023c 	str.w	r0, [r4, #572]	@ 0x23c
 8003b06:	e7b5      	b.n	8003a74 <ftpClientFormatPortCommand+0x14>
 8003b08:	0801a410 	.word	0x0801a410
 8003b0c:	0801a418 	.word	0x0801a418
 8003b10:	0801a428 	.word	0x0801a428
 8003b14:	0801a434 	.word	0x0801a434
 8003b18:	20000440 	.word	0x20000440
 8003b1c:	0801a400 	.word	0x0801a400

08003b20 <ftpClientFormatPasvCommand>:
 * @param[in] context Pointer to the FTP client context
 * @return Error code
 **/

error_t ftpClientFormatPasvCommand(FtpClientContext *context)
{
 8003b20:	b538      	push	{r3, r4, r5, lr}
 8003b22:	4604      	mov	r4, r0
   //Initialize status code
   error = NO_ERROR;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(context->serverIpAddr.length == sizeof(Ipv4Addr))
 8003b24:	6903      	ldr	r3, [r0, #16]
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d003      	beq.n	8003b32 <ftpClientFormatPasvCommand+0x12>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(context->serverIpAddr.length == sizeof(Ipv6Addr))
 8003b2a:	2b10      	cmp	r3, #16
 8003b2c:	d00a      	beq.n	8003b44 <ftpClientFormatPasvCommand+0x24>
   else
#endif
   //Invalid IP address?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 8003b2e:	20e4      	movs	r0, #228	@ 0xe4
      context->replyLen = 0;
   }

   //Return status code
   return error;
}
 8003b30:	bd38      	pop	{r3, r4, r5, pc}
      osStrcpy(context->buffer, "PASV\r\n");
 8003b32:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <ftpClientFormatPasvCommand+0x64>)
 8003b34:	6818      	ldr	r0, [r3, #0]
 8003b36:	6360      	str	r0, [r4, #52]	@ 0x34
 8003b38:	889a      	ldrh	r2, [r3, #4]
 8003b3a:	799b      	ldrb	r3, [r3, #6]
 8003b3c:	8722      	strh	r2, [r4, #56]	@ 0x38
 8003b3e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
   if(!error)
 8003b42:	e007      	b.n	8003b54 <ftpClientFormatPasvCommand+0x34>
      osStrcpy(context->buffer, "EPSV\r\n");
 8003b44:	4b10      	ldr	r3, [pc, #64]	@ (8003b88 <ftpClientFormatPasvCommand+0x68>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	6360      	str	r0, [r4, #52]	@ 0x34
 8003b4a:	889a      	ldrh	r2, [r3, #4]
 8003b4c:	799b      	ldrb	r3, [r3, #6]
 8003b4e:	8722      	strh	r2, [r4, #56]	@ 0x38
 8003b50:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
      context->commandLen = osStrlen(context->buffer);
 8003b54:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8003b58:	4628      	mov	r0, r5
 8003b5a:	f7fc fbc1 	bl	80002e0 <strlen>
 8003b5e:	f8c4 0238 	str.w	r0, [r4, #568]	@ 0x238
      TRACE_DEBUG("FTP client: %s", context->buffer);
 8003b62:	f7fc fde5 	bl	8000730 <osSuspendAllTasks>
 8003b66:	4b09      	ldr	r3, [pc, #36]	@ (8003b8c <ftpClientFormatPasvCommand+0x6c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	462a      	mov	r2, r5
 8003b6c:	4908      	ldr	r1, [pc, #32]	@ (8003b90 <ftpClientFormatPasvCommand+0x70>)
 8003b6e:	68d8      	ldr	r0, [r3, #12]
 8003b70:	f010 fd7a 	bl	8014668 <fprintf>
 8003b74:	f7fc fde5 	bl	8000742 <osResumeAllTasks>
      context->bufferPos = 0;
 8003b78:	2000      	movs	r0, #0
 8003b7a:	f8c4 0234 	str.w	r0, [r4, #564]	@ 0x234
      context->replyLen = 0;
 8003b7e:	f8c4 023c 	str.w	r0, [r4, #572]	@ 0x23c
 8003b82:	e7d5      	b.n	8003b30 <ftpClientFormatPasvCommand+0x10>
 8003b84:	0801a43c 	.word	0x0801a43c
 8003b88:	0801a444 	.word	0x0801a444
 8003b8c:	20000440 	.word	0x20000440
 8003b90:	0801a400 	.word	0x0801a400

08003b94 <ftpClientParsePasvReply>:
 * @param[out] port The TCP port number the server is listening on
 * @return Error code
 **/

error_t ftpClientParsePasvReply(FtpClientContext *context, uint16_t *port)
{
 8003b94:	b570      	push	{r4, r5, r6, lr}
 8003b96:	460d      	mov	r5, r1
   char_t *p;
   char_t delimiter;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(context->serverIpAddr.length == sizeof(Ipv4Addr))
 8003b98:	6903      	ldr	r3, [r0, #16]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d020      	beq.n	8003be0 <ftpClientParsePasvReply+0x4c>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(context->serverIpAddr.length == sizeof(Ipv6Addr))
 8003b9e:	2b10      	cmp	r3, #16
 8003ba0:	d144      	bne.n	8003c2c <ftpClientParsePasvReply+0x98>
   {
      //Search for the opening parenthesis
      p = strrchr(context->buffer, '(');
 8003ba2:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8003ba6:	2128      	movs	r1, #40	@ 0x28
 8003ba8:	4620      	mov	r0, r4
 8003baa:	f011 f8cf 	bl	8014d4c <strrchr>
      //Failed to parse the response?
      if(p == NULL || p[1] == '\0')
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d03e      	beq.n	8003c30 <ftpClientParsePasvReply+0x9c>
 8003bb2:	7846      	ldrb	r6, [r0, #1]
 8003bb4:	2e00      	cmp	r6, #0
 8003bb6:	d03d      	beq.n	8003c34 <ftpClientParsePasvReply+0xa0>

      //Retrieve the delimiter character
      delimiter = p[1];

      //Search for the last delimiter character
      p = strrchr(context->buffer, delimiter);
 8003bb8:	4631      	mov	r1, r6
 8003bba:	4620      	mov	r0, r4
 8003bbc:	f011 f8c6 	bl	8014d4c <strrchr>
      //Failed to parse the response?
      if(p == NULL)
 8003bc0:	b3d0      	cbz	r0, 8003c38 <ftpClientParsePasvReply+0xa4>
         return ERROR_INVALID_SYNTAX;

      //Split the string
      *p = '\0';
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	7002      	strb	r2, [r0, #0]

      //Search for the last but one delimiter character
      p = strrchr(context->buffer, delimiter);
 8003bc6:	4631      	mov	r1, r6
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f011 f8bf 	bl	8014d4c <strrchr>
      //Failed to parse the response?
      if(p == NULL)
 8003bce:	b3a8      	cbz	r0, 8003c3c <ftpClientParsePasvReply+0xa8>
         return ERROR_INVALID_SYNTAX;

      //Convert the resulting string
      *port = (uint16_t) osStrtoul(p + 1, NULL, 10);
 8003bd0:	220a      	movs	r2, #10
 8003bd2:	2100      	movs	r1, #0
 8003bd4:	3001      	adds	r0, #1
 8003bd6:	f010 fc99 	bl	801450c <strtoul>
 8003bda:	8028      	strh	r0, [r5, #0]
      //Report an error
      return ERROR_INVALID_ADDRESS;
   }

   //Successful processing
   return NO_ERROR;
 8003bdc:	2000      	movs	r0, #0
 8003bde:	e026      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
      p = strrchr(context->buffer, delimiter);
 8003be0:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8003be4:	212c      	movs	r1, #44	@ 0x2c
 8003be6:	4620      	mov	r0, r4
 8003be8:	f011 f8b0 	bl	8014d4c <strrchr>
      if(p == NULL)
 8003bec:	4606      	mov	r6, r0
 8003bee:	b1c8      	cbz	r0, 8003c24 <ftpClientParsePasvReply+0x90>
      *port = (uint16_t) osStrtoul(p + 1, NULL, 10);
 8003bf0:	220a      	movs	r2, #10
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	3001      	adds	r0, #1
 8003bf6:	f010 fc89 	bl	801450c <strtoul>
 8003bfa:	8028      	strh	r0, [r5, #0]
      *p = '\0';
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	7033      	strb	r3, [r6, #0]
      p = strrchr(context->buffer, delimiter);
 8003c00:	212c      	movs	r1, #44	@ 0x2c
 8003c02:	4620      	mov	r0, r4
 8003c04:	f011 f8a2 	bl	8014d4c <strrchr>
      if(p == NULL)
 8003c08:	b170      	cbz	r0, 8003c28 <ftpClientParsePasvReply+0x94>
      *port |= (uint16_t) osStrtoul(p + 1, NULL, 10) << 8;
 8003c0a:	220a      	movs	r2, #10
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	3001      	adds	r0, #1
 8003c10:	f010 fc7c 	bl	801450c <strtoul>
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <ftpClientParsePasvReply+0xac>)
 8003c16:	ea03 2300 	and.w	r3, r3, r0, lsl #8
 8003c1a:	8828      	ldrh	r0, [r5, #0]
 8003c1c:	4318      	orrs	r0, r3
 8003c1e:	8028      	strh	r0, [r5, #0]
   return NO_ERROR;
 8003c20:	2000      	movs	r0, #0
 8003c22:	e004      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
         return ERROR_INVALID_SYNTAX;
 8003c24:	2069      	movs	r0, #105	@ 0x69
 8003c26:	e002      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
         return ERROR_INVALID_SYNTAX;
 8003c28:	2069      	movs	r0, #105	@ 0x69
 8003c2a:	e000      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
      return ERROR_INVALID_ADDRESS;
 8003c2c:	20e4      	movs	r0, #228	@ 0xe4
}
 8003c2e:	bd70      	pop	{r4, r5, r6, pc}
         return ERROR_INVALID_SYNTAX;
 8003c30:	2069      	movs	r0, #105	@ 0x69
 8003c32:	e7fc      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
 8003c34:	2069      	movs	r0, #105	@ 0x69
 8003c36:	e7fa      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
         return ERROR_INVALID_SYNTAX;
 8003c38:	2069      	movs	r0, #105	@ 0x69
 8003c3a:	e7f8      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
         return ERROR_INVALID_SYNTAX;
 8003c3c:	2069      	movs	r0, #105	@ 0x69
 8003c3e:	e7f6      	b.n	8003c2e <ftpClientParsePasvReply+0x9a>
 8003c40:	00ffff00 	.word	0x00ffff00

08003c44 <ftpClientInitDataTransfer>:
 * @param[in] direction Data transfer direction
 * @return Error code
 **/

error_t ftpClientInitDataTransfer(FtpClientContext *context, bool_t direction)
{
 8003c44:	b530      	push	{r4, r5, lr}
 8003c46:	b087      	sub	sp, #28
 8003c48:	4604      	mov	r4, r0

   //Initialize status code
   error = NO_ERROR;

   //Check current state
   if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_2)
 8003c4a:	7803      	ldrb	r3, [r0, #0]
 8003c4c:	3b01      	subs	r3, #1
 8003c4e:	2b0b      	cmp	r3, #11
 8003c50:	f200 80eb 	bhi.w	8003e2a <ftpClientInitDataTransfer+0x1e6>
 8003c54:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003c58:	00a800ca 	.word	0x00a800ca
 8003c5c:	00e900df 	.word	0x00e900df
 8003c60:	000c00e9 	.word	0x000c00e9
 8003c64:	002c0011 	.word	0x002c0011
 8003c68:	008a003e 	.word	0x008a003e
 8003c6c:	00b500e9 	.word	0x00b500e9
      }
      else
#endif
      {
         //Update FTP client state
         ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_5);
 8003c70:	2109      	movs	r1, #9
 8003c72:	f7ff fe38 	bl	80038e6 <ftpClientChangeState>
   error = NO_ERROR;
 8003c76:	2500      	movs	r5, #0
 8003c78:	e0d9      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_3)
   {
      //Send PBSZ command and wait for the server's response
      error = ftpClientSendCommand(context);
 8003c7a:	f7ff fe3b 	bl	80038f4 <ftpClientSendCommand>

      //Check status code
      if(!error)
 8003c7e:	4605      	mov	r5, r0
 8003c80:	2800      	cmp	r0, #0
 8003c82:	f040 80d4 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Check FTP response code
         if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003c86:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 8003c8a:	3bc8      	subs	r3, #200	@ 0xc8
 8003c8c:	2b63      	cmp	r3, #99	@ 0x63
 8003c8e:	d901      	bls.n	8003c94 <ftpClientInitDataTransfer+0x50>
            }
         }
         else
         {
            //Report an error
            error = ERROR_UNEXPECTED_RESPONSE;
 8003c90:	256b      	movs	r5, #107	@ 0x6b
 8003c92:	e0cc      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
            error = ftpClientFormatCommand(context, "PROT", "P");
 8003c94:	4a6a      	ldr	r2, [pc, #424]	@ (8003e40 <ftpClientInitDataTransfer+0x1fc>)
 8003c96:	496b      	ldr	r1, [pc, #428]	@ (8003e44 <ftpClientInitDataTransfer+0x200>)
 8003c98:	4620      	mov	r0, r4
 8003c9a:	f7ff feb1 	bl	8003a00 <ftpClientFormatCommand>
            if(!error)
 8003c9e:	4605      	mov	r5, r0
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	f040 80c4 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_4);
 8003ca6:	2108      	movs	r1, #8
 8003ca8:	4620      	mov	r0, r4
 8003caa:	f7ff fe1c 	bl	80038e6 <ftpClientChangeState>
 8003cae:	e0be      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_4)
   {
      //Send PROT command and wait for the server's response
      error = ftpClientSendCommand(context);
 8003cb0:	f7ff fe20 	bl	80038f4 <ftpClientSendCommand>

      //Check status code
      if(!error)
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	f040 80b9 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Check FTP response code
         if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003cbc:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 8003cc0:	3bc8      	subs	r3, #200	@ 0xc8
 8003cc2:	2b63      	cmp	r3, #99	@ 0x63
 8003cc4:	d901      	bls.n	8003cca <ftpClientInitDataTransfer+0x86>
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_5);
         }
         else
         {
            //Report an error
            error = ERROR_UNEXPECTED_RESPONSE;
 8003cc6:	256b      	movs	r5, #107	@ 0x6b
 8003cc8:	e0b1      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_5);
 8003cca:	2109      	movs	r1, #9
 8003ccc:	4620      	mov	r0, r4
 8003cce:	f7ff fe0a 	bl	80038e6 <ftpClientChangeState>
 8003cd2:	e0ac      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_5)
   {
      //Check data transfer direction
      if(direction)
 8003cd4:	b329      	cbz	r1, 8003d22 <ftpClientInitDataTransfer+0xde>
      {
         //Open data socket
         error = ftpClientOpenChannel(context, &context->dataChannel,
 8003cd6:	f240 5396 	movw	r3, #1430	@ 0x596
 8003cda:	f640 322c 	movw	r2, #2860	@ 0xb2c
 8003cde:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8003ce2:	f000 f90d 	bl	8003f00 <ftpClientOpenChannel>
 8003ce6:	4605      	mov	r5, r0
         error = ftpClientOpenChannel(context, &context->dataChannel,
            FTP_CLIENT_MIN_TCP_BUFFER_SIZE, FTP_CLIENT_MAX_TCP_BUFFER_SIZE);
      }

      //Check status code
      if(!error)
 8003ce8:	2d00      	cmp	r5, #0
 8003cea:	f040 80a0 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Check transfer mode
         if(!context->passiveMode)
 8003cee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003cf0:	bb8b      	cbnz	r3, 8003d56 <ftpClientInitDataTransfer+0x112>
         {
            //Place the data socket in the listening state
            error = socketListen(context->dataChannel.socket, 1);
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003cf6:	f009 fbbb 	bl	800d470 <socketListen>

            //Check status code
            if(!error)
 8003cfa:	4605      	mov	r5, r0
 8003cfc:	b1d8      	cbz	r0, 8003d36 <ftpClientInitDataTransfer+0xf2>
               error = socketGetLocalAddr(context->dataChannel.socket,
                  NULL, &port);
            }

            //Check status code
            if(!error)
 8003cfe:	2d00      	cmp	r5, #0
 8003d00:	f040 8095 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
            {
               //Set the port to be used in data connection
               error = ftpClientFormatPortCommand(context, &ipAddr, port);
 8003d04:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8003d08:	a901      	add	r1, sp, #4
 8003d0a:	4620      	mov	r0, r4
 8003d0c:	f7ff fea8 	bl	8003a60 <ftpClientFormatPortCommand>
            }

            //Check status code
            if(!error)
 8003d10:	4605      	mov	r5, r0
 8003d12:	2800      	cmp	r0, #0
 8003d14:	f040 808b 	bne.w	8003e2e <ftpClientInitDataTransfer+0x1ea>
            {
               //Send PORT command and wait for the server's response
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_6);
 8003d18:	210a      	movs	r1, #10
 8003d1a:	4620      	mov	r0, r4
 8003d1c:	f7ff fde3 	bl	80038e6 <ftpClientChangeState>
 8003d20:	e085      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
         error = ftpClientOpenChannel(context, &context->dataChannel,
 8003d22:	f640 332c 	movw	r3, #2860	@ 0xb2c
 8003d26:	f240 5296 	movw	r2, #1430	@ 0x596
 8003d2a:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8003d2e:	f000 f8e7 	bl	8003f00 <ftpClientOpenChannel>
 8003d32:	4605      	mov	r5, r0
 8003d34:	e7d8      	b.n	8003ce8 <ftpClientInitDataTransfer+0xa4>
               error = socketGetLocalAddr(context->controlChannel.socket,
 8003d36:	2200      	movs	r2, #0
 8003d38:	a901      	add	r1, sp, #4
 8003d3a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003d3c:	f009 fc9a 	bl	800d674 <socketGetLocalAddr>
            if(!error)
 8003d40:	4605      	mov	r5, r0
 8003d42:	2800      	cmp	r0, #0
 8003d44:	d173      	bne.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
               error = socketGetLocalAddr(context->dataChannel.socket,
 8003d46:	f10d 0202 	add.w	r2, sp, #2
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003d4e:	f009 fc91 	bl	800d674 <socketGetLocalAddr>
 8003d52:	4605      	mov	r5, r0
 8003d54:	e7d3      	b.n	8003cfe <ftpClientInitDataTransfer+0xba>
            }
         }
         else
         {
            //Enter passive mode
            error = ftpClientFormatPasvCommand(context);
 8003d56:	4620      	mov	r0, r4
 8003d58:	f7ff fee2 	bl	8003b20 <ftpClientFormatPasvCommand>

            //Check status code
            if(!error)
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	2800      	cmp	r0, #0
 8003d60:	d165      	bne.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
            {
               //Send PASV command and wait for the server's response
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_6);
 8003d62:	210a      	movs	r1, #10
 8003d64:	4620      	mov	r0, r4
 8003d66:	f7ff fdbe 	bl	80038e6 <ftpClientChangeState>
 8003d6a:	e060      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_6)
   {
      //Send PORT/PASV command and wait for the server's response
      error = ftpClientSendCommand(context);
 8003d6c:	f7ff fdc2 	bl	80038f4 <ftpClientSendCommand>

      //Check status code
      if(!error)
 8003d70:	4605      	mov	r5, r0
 8003d72:	2800      	cmp	r0, #0
 8003d74:	d15b      	bne.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Check FTP response code
         if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003d76:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 8003d7a:	3bc8      	subs	r3, #200	@ 0xc8
 8003d7c:	2b63      	cmp	r3, #99	@ 0x63
 8003d7e:	d859      	bhi.n	8003e34 <ftpClientInitDataTransfer+0x1f0>
         {
            //Check transfer mode
            if(!context->passiveMode)
 8003d80:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d82:	b923      	cbnz	r3, 8003d8e <ftpClientInitDataTransfer+0x14a>
            {
               //Update FTP client state
               ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_7);
 8003d84:	210b      	movs	r1, #11
 8003d86:	4620      	mov	r0, r4
 8003d88:	f7ff fdad 	bl	80038e6 <ftpClientChangeState>
 8003d8c:	e04f      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
            }
            else
            {
               //Parse server's response
               error = ftpClientParsePasvReply(context, &context->serverPort);
 8003d8e:	f104 0124 	add.w	r1, r4, #36	@ 0x24
 8003d92:	4620      	mov	r0, r4
 8003d94:	f7ff fefe 	bl	8003b94 <ftpClientParsePasvReply>

               //Check status code
               if(!error)
 8003d98:	4605      	mov	r5, r0
 8003d9a:	2800      	cmp	r0, #0
 8003d9c:	d147      	bne.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
               {
                  //Establish data connection
                  ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTING_TCP);
 8003d9e:	2102      	movs	r1, #2
 8003da0:	4620      	mov	r0, r4
 8003da2:	f7ff fda0 	bl	80038e6 <ftpClientChangeState>
 8003da6:	e042      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_CONNECTING_TCP)
   {
      //Establish data connection
      error = socketConnect(context->dataChannel.socket,
 8003da8:	8c82      	ldrh	r2, [r0, #36]	@ 0x24
 8003daa:	f100 0110 	add.w	r1, r0, #16
 8003dae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003db0:	f009 fb1e 	bl	800d3f0 <socketConnect>
         &context->serverIpAddr, context->serverPort);

      //Check status code
      if(!error)
 8003db4:	4605      	mov	r5, r0
 8003db6:	bbd0      	cbnz	r0, 8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Update FTP client state
         ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_7);
 8003db8:	210b      	movs	r1, #11
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7ff fd93 	bl	80038e6 <ftpClientChangeState>
 8003dc0:	e035      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_8)
   {
      //Send STOR/APPE/RETR/LIST command and wait for the server's response
      error = ftpClientSendCommand(context);
 8003dc2:	f7ff fd97 	bl	80038f4 <ftpClientSendCommand>

      //Check status code
      if(!error)
 8003dc6:	4605      	mov	r5, r0
 8003dc8:	bb88      	cbnz	r0, 8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //Check FTP response code
         if(FTP_REPLY_CODE_1YZ(context->replyCode))
 8003dca:	f8d4 3240 	ldr.w	r3, [r4, #576]	@ 0x240
 8003dce:	3b64      	subs	r3, #100	@ 0x64
 8003dd0:	2b63      	cmp	r3, #99	@ 0x63
 8003dd2:	d831      	bhi.n	8003e38 <ftpClientInitDataTransfer+0x1f4>
         {
            //Check transfer mode
            if(!context->passiveMode)
 8003dd4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003dd6:	b923      	cbnz	r3, 8003de2 <ftpClientInitDataTransfer+0x19e>
            {
               //Wait for the server to connect back to the client's data port
               ftpClientChangeState(context, FTP_CLIENT_STATE_ACCEPTING_TCP);
 8003dd8:	2101      	movs	r1, #1
 8003dda:	4620      	mov	r0, r4
 8003ddc:	f7ff fd83 	bl	80038e6 <ftpClientChangeState>
 8003de0:	e025      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
               }
               else
#endif
               {
                  //Update FTP client state
                  ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_9);
 8003de2:	210d      	movs	r1, #13
 8003de4:	4620      	mov	r0, r4
 8003de6:	f7ff fd7e 	bl	80038e6 <ftpClientChangeState>
 8003dea:	e020      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_ACCEPTING_TCP)
   {
      //Wait for the server to connect back to the client's data port
      socket = socketAccept(context->dataChannel.socket, NULL, NULL);
 8003dec:	2200      	movs	r2, #0
 8003dee:	4611      	mov	r1, r2
 8003df0:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003df2:	f009 fb59 	bl	800d4a8 <socketAccept>

      //Valid socket handle?
      if(socket != NULL)
 8003df6:	4605      	mov	r5, r0
 8003df8:	b300      	cbz	r0, 8003e3c <ftpClientInitDataTransfer+0x1f8>
      {
         //Close the listening socket
         socketClose(context->dataChannel.socket);
 8003dfa:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8003dfc:	f009 fc74 	bl	800d6e8 <socketClose>
         //Save socket handle
         context->dataChannel.socket = socket;
 8003e00:	6325      	str	r5, [r4, #48]	@ 0x30

         //Set timeout
         error = socketSetTimeout(context->dataChannel.socket,
 8003e02:	68a1      	ldr	r1, [r4, #8]
 8003e04:	4628      	mov	r0, r5
 8003e06:	f009 faa3 	bl	800d350 <socketSetTimeout>
 8003e0a:	4605      	mov	r5, r0
         }
         else
#endif
         {
            //Update FTP client state
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_9);
 8003e0c:	210d      	movs	r1, #13
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fd69 	bl	80038e6 <ftpClientChangeState>
 8003e14:	e00b      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
      }
   }
   else if(context->state == FTP_CLIENT_STATE_CONNECTING_TLS)
   {
      //Perform TLS handshake
      error = ftpClientEstablishSecureChannel(&context->dataChannel);
 8003e16:	3030      	adds	r0, #48	@ 0x30
 8003e18:	f000 f89c 	bl	8003f54 <ftpClientEstablishSecureChannel>

      //Check status code
      if(!error)
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	b930      	cbnz	r0, 8003e2e <ftpClientInitDataTransfer+0x1ea>
      {
         //The content of the file can be transferred via the data connection
         ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_9);
 8003e20:	210d      	movs	r1, #13
 8003e22:	4620      	mov	r0, r4
 8003e24:	f7ff fd5f 	bl	80038e6 <ftpClientChangeState>
 8003e28:	e001      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
   if(context->state == FTP_CLIENT_STATE_SUB_COMMAND_2)
 8003e2a:	f240 15ff 	movw	r5, #511	@ 0x1ff
      error = ERROR_WRONG_STATE;
   }

   //Return status code
   return error;
}
 8003e2e:	4628      	mov	r0, r5
 8003e30:	b007      	add	sp, #28
 8003e32:	bd30      	pop	{r4, r5, pc}
            error = ERROR_UNEXPECTED_RESPONSE;
 8003e34:	256b      	movs	r5, #107	@ 0x6b
 8003e36:	e7fa      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
            error = ERROR_UNEXPECTED_RESPONSE;
 8003e38:	256b      	movs	r5, #107	@ 0x6b
 8003e3a:	e7f8      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
         error = ERROR_WOULD_BLOCK;
 8003e3c:	25dd      	movs	r5, #221	@ 0xdd
 8003e3e:	e7f6      	b.n	8003e2e <ftpClientInitDataTransfer+0x1ea>
 8003e40:	0801a460 	.word	0x0801a460
 8003e44:	0801a464 	.word	0x0801a464

08003e48 <ftpClientCheckTimeout>:
   return error;
#else
   //Report a timeout error
   return ERROR_TIMEOUT;
#endif
}
 8003e48:	20dc      	movs	r0, #220	@ 0xdc
 8003e4a:	4770      	bx	lr

08003e4c <ftpClientTerminateDataTransfer>:
{
 8003e4c:	b570      	push	{r4, r5, r6, lr}
 8003e4e:	4605      	mov	r5, r0
   error = NO_ERROR;
 8003e50:	2400      	movs	r4, #0
   while(!error)
 8003e52:	b974      	cbnz	r4, 8003e72 <ftpClientTerminateDataTransfer+0x26>
      if(context->state == FTP_CLIENT_STATE_WRITING_DATA ||
 8003e54:	782b      	ldrb	r3, [r5, #0]
 8003e56:	3b04      	subs	r3, #4
 8003e58:	2b0c      	cmp	r3, #12
 8003e5a:	d808      	bhi.n	8003e6e <ftpClientTerminateDataTransfer+0x22>
 8003e5c:	e8df f003 	tbb	[pc, r3]
 8003e60:	07073009 	.word	0x07073009
 8003e64:	07070707 	.word	0x07070707
 8003e68:	14140707 	.word	0x14140707
 8003e6c:	19          	.byte	0x19
 8003e6d:	00          	.byte	0x00
 8003e6e:	f240 14ff 	movw	r4, #511	@ 0x1ff
   if(error == ERROR_WOULD_BLOCK || error == ERROR_TIMEOUT)
 8003e72:	f1a4 03dc 	sub.w	r3, r4, #220	@ 0xdc
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d933      	bls.n	8003ee4 <ftpClientTerminateDataTransfer+0x98>
   if(error != NO_ERROR && error != ERROR_WOULD_BLOCK)
 8003e7c:	2c00      	cmp	r4, #0
 8003e7e:	bf18      	it	ne
 8003e80:	2cdd      	cmpne	r4, #221	@ 0xdd
 8003e82:	d134      	bne.n	8003eee <ftpClientTerminateDataTransfer+0xa2>
}
 8003e84:	4620      	mov	r0, r4
 8003e86:	bd70      	pop	{r4, r5, r6, pc}
         ftpClientChangeState(context, FTP_CLIENT_STATE_DISCONNECTING_1);
 8003e88:	2110      	movs	r1, #16
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7ff fd2b 	bl	80038e6 <ftpClientChangeState>
 8003e90:	e7df      	b.n	8003e52 <ftpClientTerminateDataTransfer+0x6>
         error = ftpClientShutdownChannel(&context->dataChannel);
 8003e92:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 8003e96:	4630      	mov	r0, r6
 8003e98:	f000 f85e 	bl	8003f58 <ftpClientShutdownChannel>
         if(!error)
 8003e9c:	4604      	mov	r4, r0
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d1e7      	bne.n	8003e72 <ftpClientTerminateDataTransfer+0x26>
            ftpClientCloseChannel(&context->dataChannel);
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	f000 f861 	bl	8003f6a <ftpClientCloseChannel>
            context->bufferPos = 0;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f8c5 3234 	str.w	r3, [r5, #564]	@ 0x234
            context->commandLen = 0;
 8003eae:	f8c5 3238 	str.w	r3, [r5, #568]	@ 0x238
            context->replyLen = 0;
 8003eb2:	f8c5 323c 	str.w	r3, [r5, #572]	@ 0x23c
            ftpClientChangeState(context, FTP_CLIENT_STATE_SUB_COMMAND_1);
 8003eb6:	2105      	movs	r1, #5
 8003eb8:	4628      	mov	r0, r5
 8003eba:	f7ff fd14 	bl	80038e6 <ftpClientChangeState>
 8003ebe:	e7c8      	b.n	8003e52 <ftpClientTerminateDataTransfer+0x6>
         error = ftpClientSendCommand(context);
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f7ff fd17 	bl	80038f4 <ftpClientSendCommand>
         if(!error)
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d1d2      	bne.n	8003e72 <ftpClientTerminateDataTransfer+0x26>
            if(FTP_REPLY_CODE_2YZ(context->replyCode))
 8003ecc:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
 8003ed0:	3bc8      	subs	r3, #200	@ 0xc8
 8003ed2:	2b63      	cmp	r3, #99	@ 0x63
 8003ed4:	d804      	bhi.n	8003ee0 <ftpClientTerminateDataTransfer+0x94>
               ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003ed6:	2104      	movs	r1, #4
 8003ed8:	4628      	mov	r0, r5
 8003eda:	f7ff fd04 	bl	80038e6 <ftpClientChangeState>
 8003ede:	e7b8      	b.n	8003e52 <ftpClientTerminateDataTransfer+0x6>
               error = ERROR_UNEXPECTED_RESPONSE;
 8003ee0:	246b      	movs	r4, #107	@ 0x6b
 8003ee2:	e7c6      	b.n	8003e72 <ftpClientTerminateDataTransfer+0x26>
      error = ftpClientCheckTimeout(context);
 8003ee4:	4628      	mov	r0, r5
 8003ee6:	f7ff ffaf 	bl	8003e48 <ftpClientCheckTimeout>
 8003eea:	4604      	mov	r4, r0
 8003eec:	e7c6      	b.n	8003e7c <ftpClientTerminateDataTransfer+0x30>
      ftpClientCloseChannel(&context->dataChannel);
 8003eee:	f105 0030 	add.w	r0, r5, #48	@ 0x30
 8003ef2:	f000 f83a 	bl	8003f6a <ftpClientCloseChannel>
      ftpClientChangeState(context, FTP_CLIENT_STATE_CONNECTED);
 8003ef6:	2104      	movs	r1, #4
 8003ef8:	4628      	mov	r0, r5
 8003efa:	f7ff fcf4 	bl	80038e6 <ftpClientChangeState>
 8003efe:	e7c1      	b.n	8003e84 <ftpClientTerminateDataTransfer+0x38>

08003f00 <ftpClientOpenChannel>:
 * @return Error code
 **/

error_t ftpClientOpenChannel(FtpClientContext *context,
   FtpClientChannel *channel, size_t txBufferSize, size_t rxBufferSize)
{
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f02:	4605      	mov	r5, r0
 8003f04:	460c      	mov	r4, r1
 8003f06:	4616      	mov	r6, r2
 8003f08:	461f      	mov	r7, r3
   error_t error;

   //Open a TCP socket
   channel->socket = socketOpen(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 8003f0a:	2106      	movs	r1, #6
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f009 fa0b 	bl	800d328 <socketOpen>
 8003f12:	6020      	str	r0, [r4, #0]
   //Failed to open socket?
   if(channel->socket == NULL)
 8003f14:	b1d0      	cbz	r0, 8003f4c <ftpClientOpenChannel+0x4c>
      return ERROR_OPEN_FAILED;

   //Associate the socket with the relevant interface
   error = socketBindToInterface(channel->socket, context->interface);
 8003f16:	6869      	ldr	r1, [r5, #4]
 8003f18:	f009 fa64 	bl	800d3e4 <socketSetInterface>
   //Any error to report?
   if(error)
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	b108      	cbz	r0, 8003f24 <ftpClientOpenChannel+0x24>
   if(error)
      return error;

   //Successful processing
   return NO_ERROR;
}
 8003f20:	4610      	mov	r0, r2
 8003f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   error = socketSetTimeout(channel->socket, context->timeout);
 8003f24:	68a9      	ldr	r1, [r5, #8]
 8003f26:	6820      	ldr	r0, [r4, #0]
 8003f28:	f009 fa12 	bl	800d350 <socketSetTimeout>
   if(error)
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	2800      	cmp	r0, #0
 8003f30:	d1f6      	bne.n	8003f20 <ftpClientOpenChannel+0x20>
   error = socketSetTxBufferSize(channel->socket, txBufferSize);
 8003f32:	4631      	mov	r1, r6
 8003f34:	6820      	ldr	r0, [r4, #0]
 8003f36:	f009 fa1d 	bl	800d374 <socketSetTxBufferSize>
   if(error)
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d1ef      	bne.n	8003f20 <ftpClientOpenChannel+0x20>
   error = socketSetRxBufferSize(channel->socket, rxBufferSize);
 8003f40:	4639      	mov	r1, r7
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	f009 fa30 	bl	800d3a8 <socketSetRxBufferSize>
 8003f48:	4602      	mov	r2, r0
   if(error)
 8003f4a:	e7e9      	b.n	8003f20 <ftpClientOpenChannel+0x20>
      return ERROR_OPEN_FAILED;
 8003f4c:	22c8      	movs	r2, #200	@ 0xc8
 8003f4e:	e7e7      	b.n	8003f20 <ftpClientOpenChannel+0x20>

08003f50 <ftpClientOpenSecureChannel>:
   return NO_ERROR;
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8003f50:	2067      	movs	r0, #103	@ 0x67
 8003f52:	4770      	bx	lr

08003f54 <ftpClientEstablishSecureChannel>:
   return tlsConnect(channel->tlsContext);
#else
   //Not implemented
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 8003f54:	2067      	movs	r0, #103	@ 0x67
 8003f56:	4770      	bx	lr

08003f58 <ftpClientShutdownChannel>:

   //Check status code
   if(!error)
   {
      //Valid TCP socket?
      if(channel->socket != NULL)
 8003f58:	6800      	ldr	r0, [r0, #0]
 8003f5a:	b120      	cbz	r0, 8003f66 <ftpClientShutdownChannel+0xe>
{
 8003f5c:	b508      	push	{r3, lr}
      {
         //Shutdown TCP connection
         error = socketShutdown(channel->socket, SOCKET_SD_BOTH);
 8003f5e:	2102      	movs	r1, #2
 8003f60:	f009 fba2 	bl	800d6a8 <socketShutdown>
      }
   }

   //Return status code
   return error;
}
 8003f64:	bd08      	pop	{r3, pc}
   error = NO_ERROR;
 8003f66:	2000      	movs	r0, #0
}
 8003f68:	4770      	bx	lr

08003f6a <ftpClientCloseChannel>:
 * @brief Close network connection
 * @param[in] channel Control or data channel
 **/

void ftpClientCloseChannel(FtpClientChannel *channel)
{
 8003f6a:	b510      	push	{r4, lr}
 8003f6c:	4604      	mov	r4, r0
      channel->tlsContext = NULL;
   }
#endif

   //Close TCP connection
   if(channel->socket != NULL)
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	b118      	cbz	r0, 8003f7a <ftpClientCloseChannel+0x10>
   {
      socketClose(channel->socket);
 8003f72:	f009 fbb9 	bl	800d6e8 <socketClose>
      channel->socket = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	6023      	str	r3, [r4, #0]
   }
}
 8003f7a:	bd10      	pop	{r4, pc}

08003f7c <ftpClientWriteChannel>:
 * @return Error code
 **/

error_t ftpClientWriteChannel(FtpClientChannel *channel, const void *data,
   size_t length, size_t *written, uint_t flags)
{
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	b082      	sub	sp, #8
   }
   else
#endif
   {
      //Transmit data
      error = socketSend(channel->socket, data, length, written, flags);
 8003f80:	6800      	ldr	r0, [r0, #0]
 8003f82:	9c04      	ldr	r4, [sp, #16]
 8003f84:	9400      	str	r4, [sp, #0]
 8003f86:	f009 faeb 	bl	800d560 <socketSend>
   }

   //Return status code
   return error;
}
 8003f8a:	b002      	add	sp, #8
 8003f8c:	bd10      	pop	{r4, pc}

08003f8e <ftpClientReadChannel>:
 * @return Error code
 **/

error_t ftpClientReadChannel(FtpClientChannel *channel, void *data,
   size_t size, size_t *received, uint_t flags)
{
 8003f8e:	b510      	push	{r4, lr}
 8003f90:	b082      	sub	sp, #8
   }
   else
#endif
   {
      //Receive data
      error = socketReceive(channel->socket, data, size, received, flags);
 8003f92:	6800      	ldr	r0, [r0, #0]
 8003f94:	9c04      	ldr	r4, [sp, #16]
 8003f96:	9400      	str	r4, [sp, #0]
 8003f98:	f009 fb5e 	bl	800d658 <socketReceive>
   }

   //Return status code
   return error;
}
 8003f9c:	b002      	add	sp, #8
 8003f9e:	bd10      	pop	{r4, pc}

08003fa0 <icmpProcessEchoRequest>:
 **/

void icmpProcessEchoRequest(NetInterface *interface,
   const Ipv4PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8003fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa4:	b090      	sub	sp, #64	@ 0x40
 8003fa6:	9003      	str	r0, [sp, #12]
 8003fa8:	460f      	mov	r7, r1
 8003faa:	4616      	mov	r6, r2
 8003fac:	461c      	mov	r4, r3
   IcmpEchoMessage *requestHeader;
   IcmpEchoMessage *replyHeader;
   Ipv4PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 8003fae:	4610      	mov	r0, r2
 8003fb0:	f008 f862 	bl	800c078 <netBufferGetLength>
 8003fb4:	1b05      	subs	r5, r0, r4

   //Ensure the packet length is correct
   if(requestLength < sizeof(IcmpEchoMessage))
 8003fb6:	2d07      	cmp	r5, #7
 8003fb8:	d802      	bhi.n	8003fc0 <icmpProcessEchoRequest+0x20>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
}
 8003fba:	b010      	add	sp, #64	@ 0x40
 8003fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   requestHeader = netBufferAt(request, requestOffset, 0);
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	4621      	mov	r1, r4
 8003fc4:	4630      	mov	r0, r6
 8003fc6:	f008 f8f7 	bl	800c1b8 <netBufferAt>
   if(requestHeader == NULL)
 8003fca:	4682      	mov	sl, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	d0f4      	beq.n	8003fba <icmpProcessEchoRequest+0x1a>
   if(!interface->ipv4Context.enableEchoReq)
 8003fd0:	9803      	ldr	r0, [sp, #12]
 8003fd2:	f8d0 3194 	ldr.w	r3, [r0, #404]	@ 0x194
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0ef      	beq.n	8003fba <icmpProcessEchoRequest+0x1a>
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	f002 f8d9 	bl	8006192 <ipv4IsBroadcastAddr>
 8003fe0:	2800      	cmp	r0, #0
 8003fe2:	d152      	bne.n	800408a <icmpProcessEchoRequest+0xea>
      ipv4IsMulticastAddr(requestPseudoHeader->destAddr))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
   if(ipv4IsBroadcastAddr(interface, requestPseudoHeader->destAddr) ||
 8003fea:	2ae0      	cmp	r2, #224	@ 0xe0
 8003fec:	d04d      	beq.n	800408a <icmpProcessEchoRequest+0xea>
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8003fee:	930c      	str	r3, [sp, #48]	@ 0x30
   reply = ipAllocBuffer(sizeof(IcmpEchoMessage), &replyOffset);
 8003ff0:	a90f      	add	r1, sp, #60	@ 0x3c
 8003ff2:	2008      	movs	r0, #8
 8003ff4:	f001 fadd 	bl	80055b2 <ipAllocBuffer>
   if(reply == NULL)
 8003ff8:	4681      	mov	r9, r0
 8003ffa:	2800      	cmp	r0, #0
 8003ffc:	d0dd      	beq.n	8003fba <icmpProcessEchoRequest+0x1a>
   replyHeader = netBufferAt(reply, replyOffset, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004002:	f008 f8d9 	bl	800c1b8 <netBufferAt>
 8004006:	4680      	mov	r8, r0
   replyHeader->type = ICMP_TYPE_ECHO_REPLY;
 8004008:	2300      	movs	r3, #0
 800400a:	7003      	strb	r3, [r0, #0]
   replyHeader->code = 0;
 800400c:	7043      	strb	r3, [r0, #1]
   replyHeader->checksum = 0;
 800400e:	7083      	strb	r3, [r0, #2]
 8004010:	70c3      	strb	r3, [r0, #3]
   replyHeader->identifier = requestHeader->identifier;
 8004012:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8004016:	8083      	strh	r3, [r0, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 8004018:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800401c:	80c3      	strh	r3, [r0, #6]
   requestOffset += sizeof(IcmpEchoMessage);
 800401e:	f104 0208 	add.w	r2, r4, #8
   if(requestLength > 0)
 8004022:	f1b5 0308 	subs.w	r3, r5, #8
 8004026:	d004      	beq.n	8004032 <icmpProcessEchoRequest+0x92>
      error = netBufferConcat(reply, request, requestOffset, requestLength);
 8004028:	4631      	mov	r1, r6
 800402a:	4648      	mov	r0, r9
 800402c:	f008 f8e3 	bl	800c1f6 <netBufferConcat>
   if(!error)
 8004030:	bb38      	cbnz	r0, 8004082 <icmpProcessEchoRequest+0xe2>
      replyLength = netBufferGetLength(reply) - replyOffset;
 8004032:	4648      	mov	r0, r9
 8004034:	f008 f820 	bl	800c078 <netBufferGetLength>
 8004038:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800403a:	1a44      	subs	r4, r0, r1
      replyHeader->checksum = ipCalcChecksumEx(reply, replyOffset, replyLength);
 800403c:	4622      	mov	r2, r4
 800403e:	4648      	mov	r0, r9
 8004040:	f001 fa64 	bl	800550c <ipCalcChecksumEx>
 8004044:	f8a8 0002 	strh.w	r0, [r8, #2]
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	930d      	str	r3, [sp, #52]	@ 0x34
      replyPseudoHeader.reserved = 0;
 800404c:	2300      	movs	r3, #0
 800404e:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
      replyPseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8004052:	2301      	movs	r3, #1
 8004054:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
      replyPseudoHeader.length = htons(replyLength);
 8004058:	b2a0      	uxth	r0, r4
 800405a:	f7fc fadf 	bl	800061c <swapInt16>
 800405e:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004062:	ac04      	add	r4, sp, #16
 8004064:	4d10      	ldr	r5, [pc, #64]	@ (80040a8 <icmpProcessEchoRequest+0x108>)
 8004066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800406a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800406e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ipv4SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 8004072:	ab04      	add	r3, sp, #16
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004078:	464a      	mov	r2, r9
 800407a:	a90c      	add	r1, sp, #48	@ 0x30
 800407c:	9803      	ldr	r0, [sp, #12]
 800407e:	f001 fd27 	bl	8005ad0 <ipv4SendDatagram>
   netBufferFree(reply);
 8004082:	4648      	mov	r0, r9
 8004084:	f008 f870 	bl	800c168 <netBufferFree>
 8004088:	e797      	b.n	8003fba <icmpProcessEchoRequest+0x1a>
      if(!interface->ipv4Context.enableBroadcastEchoReq)
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004090:	2b00      	cmp	r3, #0
 8004092:	d092      	beq.n	8003fba <icmpProcessEchoRequest+0x1a>
      error = ipv4SelectSourceAddr(&interface, requestPseudoHeader->srcAddr,
 8004094:	aa04      	add	r2, sp, #16
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	a803      	add	r0, sp, #12
 800409a:	f002 f95f 	bl	800635c <ipv4SelectSourceAddr>
      if(error)
 800409e:	2800      	cmp	r0, #0
 80040a0:	d18b      	bne.n	8003fba <icmpProcessEchoRequest+0x1a>
      replyPseudoHeader.srcAddr = ipAddr;
 80040a2:	9b04      	ldr	r3, [sp, #16]
 80040a4:	930c      	str	r3, [sp, #48]	@ 0x30
   {
 80040a6:	e7a3      	b.n	8003ff0 <icmpProcessEchoRequest+0x50>
 80040a8:	08019fc4 	.word	0x08019fc4

080040ac <icmpProcessMessage>:
{
 80040ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80040b0:	4607      	mov	r7, r0
 80040b2:	4688      	mov	r8, r1
 80040b4:	4614      	mov	r4, r2
 80040b6:	461d      	mov	r5, r3
   length = netBufferGetLength(buffer) - offset;
 80040b8:	4610      	mov	r0, r2
 80040ba:	f007 ffdd 	bl	800c078 <netBufferGetLength>
 80040be:	1b46      	subs	r6, r0, r5
   if(length < sizeof(IcmpHeader))
 80040c0:	2e03      	cmp	r6, #3
 80040c2:	d801      	bhi.n	80040c8 <icmpProcessMessage+0x1c>
}
 80040c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   header = netBufferAt(buffer, offset, 0);
 80040c8:	2200      	movs	r2, #0
 80040ca:	4629      	mov	r1, r5
 80040cc:	4620      	mov	r0, r4
 80040ce:	f008 f873 	bl	800c1b8 <netBufferAt>
   if(header == NULL)
 80040d2:	4681      	mov	r9, r0
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d0f5      	beq.n	80040c4 <icmpProcessMessage+0x18>
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 80040d8:	4632      	mov	r2, r6
 80040da:	4629      	mov	r1, r5
 80040dc:	4620      	mov	r0, r4
 80040de:	f001 fa15 	bl	800550c <ipCalcChecksumEx>
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d1ee      	bne.n	80040c4 <icmpProcessMessage+0x18>
   icmpUpdateInStats(header->type);
 80040e6:	f899 3000 	ldrb.w	r3, [r9]
   switch(header->type)
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d1ea      	bne.n	80040c4 <icmpProcessMessage+0x18>
      icmpProcessEchoRequest(interface, requestPseudoHeader, buffer, offset);
 80040ee:	462b      	mov	r3, r5
 80040f0:	4622      	mov	r2, r4
 80040f2:	4641      	mov	r1, r8
 80040f4:	4638      	mov	r0, r7
 80040f6:	f7ff ff53 	bl	8003fa0 <icmpProcessEchoRequest>
      break;
 80040fa:	e7e3      	b.n	80040c4 <icmpProcessMessage+0x18>

080040fc <icmpSendErrorMessage>:
 **/

error_t icmpSendErrorMessage(NetInterface *interface, uint8_t type,
   uint8_t code, uint8_t parameter, const NetBuffer *ipPacket,
   size_t ipPacketOffset)
{
 80040fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004100:	b093      	sub	sp, #76	@ 0x4c
 8004102:	9003      	str	r0, [sp, #12]
 8004104:	460d      	mov	r5, r1
 8004106:	4614      	mov	r4, r2
 8004108:	9302      	str	r3, [sp, #8]
 800410a:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
 800410c:	f8dd 8074 	ldr.w	r8, [sp, #116]	@ 0x74
   NetBuffer *icmpMessage;
   IcmpErrorMessage *icmpHeader;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv4 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8004110:	4638      	mov	r0, r7
 8004112:	f007 ffb1 	bl	800c078 <netBufferGetLength>
 8004116:	eba0 0a08 	sub.w	sl, r0, r8

   //Check the length of the IPv4 packet
   if(length < sizeof(Ipv4Header))
 800411a:	f1ba 0f13 	cmp.w	sl, #19
 800411e:	f240 80a3 	bls.w	8004268 <icmpSendErrorMessage+0x16c>
      return ERROR_INVALID_LENGTH;

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset, sizeof(Ipv4Header));
 8004122:	2214      	movs	r2, #20
 8004124:	4641      	mov	r1, r8
 8004126:	4638      	mov	r0, r7
 8004128:	f008 f846 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(ipHeader == NULL)
 800412c:	4681      	mov	r9, r0
 800412e:	2800      	cmp	r0, #0
 8004130:	f000 809f 	beq.w	8004272 <icmpSendErrorMessage+0x176>
      return ERROR_FAILURE;

   //Check the type of the invoking packet
   if(ipHeader->protocol == IPV4_PROTOCOL_ICMP)
 8004134:	7a43      	ldrb	r3, [r0, #9]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d106      	bne.n	8004148 <icmpSendErrorMessage+0x4c>
   {
      //Make sure the ICMP message is valid
      if(length >= (ipHeader->headerLength * 4 + sizeof(IcmpHeader)))
 800413a:	7801      	ldrb	r1, [r0, #0]
 800413c:	f001 010f 	and.w	r1, r1, #15
 8004140:	0089      	lsls	r1, r1, #2
 8004142:	1d0b      	adds	r3, r1, #4
 8004144:	4553      	cmp	r3, sl
 8004146:	d939      	bls.n	80041bc <icmpSendErrorMessage+0xc0>
         }
      }
   }

   //Never respond to a packet destined to a broadcast or a multicast address
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8004148:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800414c:	9803      	ldr	r0, [sp, #12]
 800414e:	f002 f820 	bl	8006192 <ipv4IsBroadcastAddr>
 8004152:	2800      	cmp	r0, #0
 8004154:	f040 808f 	bne.w	8004276 <icmpSendErrorMessage+0x17a>
      ipv4IsMulticastAddr(ipHeader->destAddr))
 8004158:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800415c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
   if(ipv4IsBroadcastAddr(interface, ipHeader->destAddr) ||
 8004160:	2be0      	cmp	r3, #224	@ 0xe0
 8004162:	f000 808a 	beq.w	800427a <icmpSendErrorMessage+0x17e>
      //Report an error
      return ERROR_INVALID_ADDRESS;
   }

   //Length of the data that will be returned along with the ICMP header
   length = MIN(length, (size_t) ipHeader->headerLength * 4 + 8);
 8004166:	f899 6000 	ldrb.w	r6, [r9]
 800416a:	f006 060f 	and.w	r6, r6, #15
 800416e:	3602      	adds	r6, #2
 8004170:	00b6      	lsls	r6, r6, #2
 8004172:	4556      	cmp	r6, sl
 8004174:	bf28      	it	cs
 8004176:	4656      	movcs	r6, sl

   //Allocate a memory buffer to hold the ICMP message
   icmpMessage = ipAllocBuffer(sizeof(IcmpErrorMessage), &offset);
 8004178:	a911      	add	r1, sp, #68	@ 0x44
 800417a:	2008      	movs	r0, #8
 800417c:	f001 fa19 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(icmpMessage == NULL)
 8004180:	4683      	mov	fp, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d07b      	beq.n	800427e <icmpSendErrorMessage+0x182>
      return ERROR_OUT_OF_MEMORY;

   //Point to the ICMP header
   icmpHeader = netBufferAt(icmpMessage, offset, 0);
 8004186:	2200      	movs	r2, #0
 8004188:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800418a:	f008 f815 	bl	800c1b8 <netBufferAt>
 800418e:	4682      	mov	sl, r0

   //Format ICMP message
   icmpHeader->type = type;
 8004190:	7005      	strb	r5, [r0, #0]
   icmpHeader->code = code;
 8004192:	7044      	strb	r4, [r0, #1]
   icmpHeader->checksum = 0;
 8004194:	2300      	movs	r3, #0
 8004196:	7083      	strb	r3, [r0, #2]
 8004198:	70c3      	strb	r3, [r0, #3]
   icmpHeader->parameter = parameter;
 800419a:	9a02      	ldr	r2, [sp, #8]
 800419c:	7102      	strb	r2, [r0, #4]
   icmpHeader->unused[0] = 0;
 800419e:	7143      	strb	r3, [r0, #5]
   icmpHeader->unused[1] = 0;
 80041a0:	7183      	strb	r3, [r0, #6]
   icmpHeader->unused[2] = 0;
 80041a2:	71c3      	strb	r3, [r0, #7]

   //Copy the IP header and the first 8 bytes of the original datagram data
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 80041a4:	4633      	mov	r3, r6
 80041a6:	4642      	mov	r2, r8
 80041a8:	4639      	mov	r1, r7
 80041aa:	4658      	mov	r0, fp
 80041ac:	f008 f823 	bl	800c1f6 <netBufferConcat>

   //Check status code
   if(!error)
 80041b0:	4604      	mov	r4, r0
 80041b2:	b1c0      	cbz	r0, 80041e6 <icmpSendErrorMessage+0xea>
            &ancillary);
      }
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 80041b4:	4658      	mov	r0, fp
 80041b6:	f007 ffd7 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
 80041ba:	e056      	b.n	800426a <icmpSendErrorMessage+0x16e>
         icmpHeader = netBufferAt(ipPacket, ipPacketOffset +
 80041bc:	2204      	movs	r2, #4
 80041be:	4441      	add	r1, r8
 80041c0:	4638      	mov	r0, r7
 80041c2:	f007 fff9 	bl	800c1b8 <netBufferAt>
         if(icmpHeader != NULL)
 80041c6:	2800      	cmp	r0, #0
 80041c8:	d0be      	beq.n	8004148 <icmpSendErrorMessage+0x4c>
            if(icmpHeader->type == ICMP_TYPE_DEST_UNREACHABLE ||
 80041ca:	7803      	ldrb	r3, [r0, #0]
 80041cc:	3b03      	subs	r3, #3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b09      	cmp	r3, #9
 80041d2:	d8b9      	bhi.n	8004148 <icmpSendErrorMessage+0x4c>
 80041d4:	f240 3205 	movw	r2, #773	@ 0x305
 80041d8:	fa22 f303 	lsr.w	r3, r2, r3
 80041dc:	f013 0f01 	tst.w	r3, #1
 80041e0:	d0b2      	beq.n	8004148 <icmpSendErrorMessage+0x4c>
 80041e2:	24f0      	movs	r4, #240	@ 0xf0
 80041e4:	e041      	b.n	800426a <icmpSendErrorMessage+0x16e>
      length = netBufferGetLength(icmpMessage) - offset;
 80041e6:	4658      	mov	r0, fp
 80041e8:	f007 ff46 	bl	800c078 <netBufferGetLength>
 80041ec:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80041ee:	1a45      	subs	r5, r0, r1
      icmpHeader->checksum = ipCalcChecksumEx(icmpMessage, offset, length);
 80041f0:	462a      	mov	r2, r5
 80041f2:	4658      	mov	r0, fp
 80041f4:	f001 f98a 	bl	800550c <ipCalcChecksumEx>
 80041f8:	f8aa 0002 	strh.w	r0, [sl, #2]
      error = ipv4CheckDestAddr(interface, ipHeader->destAddr);
 80041fc:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8004200:	9803      	ldr	r0, [sp, #12]
 8004202:	f002 f80d 	bl	8006220 <ipv4CheckDestAddr>
      if(!error)
 8004206:	4604      	mov	r4, r0
 8004208:	bb30      	cbnz	r0, 8004258 <icmpSendErrorMessage+0x15c>
         srcIpAddr = ipHeader->destAddr;
 800420a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800420e:	9310      	str	r3, [sp, #64]	@ 0x40
      if(!error)
 8004210:	2c00      	cmp	r4, #0
 8004212:	d1cf      	bne.n	80041b4 <icmpSendErrorMessage+0xb8>
         pseudoHeader.srcAddr = srcIpAddr;
 8004214:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004216:	930d      	str	r3, [sp, #52]	@ 0x34
         pseudoHeader.destAddr = ipHeader->srcAddr;
 8004218:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800421c:	930e      	str	r3, [sp, #56]	@ 0x38
         pseudoHeader.reserved = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
         pseudoHeader.protocol = IPV4_PROTOCOL_ICMP;
 8004224:	2301      	movs	r3, #1
 8004226:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
         pseudoHeader.length = htons(length);
 800422a:	b2a8      	uxth	r0, r5
 800422c:	f7fc f9f6 	bl	800061c <swapInt16>
 8004230:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004234:	ac05      	add	r4, sp, #20
 8004236:	4d13      	ldr	r5, [pc, #76]	@ (8004284 <icmpSendErrorMessage+0x188>)
 8004238:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800423a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800423c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004240:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         error = ipv4SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 8004244:	ab05      	add	r3, sp, #20
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800424a:	465a      	mov	r2, fp
 800424c:	a90d      	add	r1, sp, #52	@ 0x34
 800424e:	9803      	ldr	r0, [sp, #12]
 8004250:	f001 fc3e 	bl	8005ad0 <ipv4SendDatagram>
 8004254:	4604      	mov	r4, r0
 8004256:	e7ad      	b.n	80041b4 <icmpSendErrorMessage+0xb8>
         error = ipv4SelectSourceAddr(&interface, ipHeader->srcAddr,
 8004258:	aa10      	add	r2, sp, #64	@ 0x40
 800425a:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800425e:	a803      	add	r0, sp, #12
 8004260:	f002 f87c 	bl	800635c <ipv4SelectSourceAddr>
 8004264:	4604      	mov	r4, r0
 8004266:	e7d3      	b.n	8004210 <icmpSendErrorMessage+0x114>
      return ERROR_INVALID_LENGTH;
 8004268:	24ec      	movs	r4, #236	@ 0xec
}
 800426a:	4620      	mov	r0, r4
 800426c:	b013      	add	sp, #76	@ 0x4c
 800426e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_FAILURE;
 8004272:	2401      	movs	r4, #1
 8004274:	e7f9      	b.n	800426a <icmpSendErrorMessage+0x16e>
      return ERROR_INVALID_ADDRESS;
 8004276:	24e4      	movs	r4, #228	@ 0xe4
 8004278:	e7f7      	b.n	800426a <icmpSendErrorMessage+0x16e>
 800427a:	24e4      	movs	r4, #228	@ 0xe4
 800427c:	e7f5      	b.n	800426a <icmpSendErrorMessage+0x16e>
      return ERROR_OUT_OF_MEMORY;
 800427e:	2464      	movs	r4, #100	@ 0x64
 8004280:	e7f3      	b.n	800426a <icmpSendErrorMessage+0x16e>
 8004282:	bf00      	nop
 8004284:	08019fc4 	.word	0x08019fc4

08004288 <icmpv6ProcessDestUnreachable>:
 **/

void icmpv6ProcessDestUnreachable(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 8004288:	b538      	push	{r3, r4, r5, lr}
 800428a:	4614      	mov	r4, r2
 800428c:	461d      	mov	r5, r3
   size_t length;
   Icmpv6DestUnreachableMessage *icmpHeader;

   //Retrieve the length of the Destination Unreachable message
   length = netBufferGetLength(buffer) - offset;
 800428e:	4610      	mov	r0, r2
 8004290:	f007 fef2 	bl	800c078 <netBufferGetLength>
 8004294:	1b40      	subs	r0, r0, r5

   //Ensure the packet length is correct
   if(length < sizeof(Icmpv6DestUnreachableMessage))
 8004296:	2807      	cmp	r0, #7
 8004298:	d800      	bhi.n	800429c <icmpv6ProcessDestUnreachable+0x14>

   //Debug message
   TRACE_INFO("ICMPv6 Destination Unreachable message received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   icmpv6DumpDestUnreachableMessage(icmpHeader);
}
 800429a:	bd38      	pop	{r3, r4, r5, pc}
   icmpHeader = netBufferAt(buffer, offset, 0);
 800429c:	2200      	movs	r2, #0
 800429e:	4629      	mov	r1, r5
 80042a0:	4620      	mov	r0, r4
 80042a2:	f007 ff89 	bl	800c1b8 <netBufferAt>
      return;
 80042a6:	e7f8      	b.n	800429a <icmpv6ProcessDestUnreachable+0x12>

080042a8 <icmpv6ProcessPacketTooBig>:
 **/

void icmpv6ProcessPacketTooBig(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset)
{
 80042a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042ac:	4607      	mov	r7, r0
 80042ae:	4616      	mov	r6, r2
 80042b0:	461c      	mov	r4, r3
   uint32_t tentativePathMtu;
   Ipv6Header *ipHeader;
#endif

   //Retrieve the length of the Packet Too Big message
   length = netBufferGetLength(buffer) - offset;
 80042b2:	4610      	mov	r0, r2
 80042b4:	f007 fee0 	bl	800c078 <netBufferGetLength>
 80042b8:	1b05      	subs	r5, r0, r4

   //Ensure the packet length is correct
   if(length < sizeof(Icmpv6PacketTooBigMessage))
 80042ba:	2d07      	cmp	r5, #7
 80042bc:	d801      	bhi.n	80042c2 <icmpv6ProcessPacketTooBig+0x1a>
   tentativePathMtu = ntohl(icmpHeader->mtu);

   //Update the PMTU for the specified destination address
   ipv6UpdatePathMtu(interface, &ipHeader->destAddr, tentativePathMtu);
#endif
}
 80042be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   icmpHeader = netBufferAt(buffer, offset, 0);
 80042c2:	2200      	movs	r2, #0
 80042c4:	4621      	mov	r1, r4
 80042c6:	4630      	mov	r0, r6
 80042c8:	f007 ff76 	bl	800c1b8 <netBufferAt>
   if(icmpHeader == NULL)
 80042cc:	4680      	mov	r8, r0
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d0f5      	beq.n	80042be <icmpv6ProcessPacketTooBig+0x16>
   offset += sizeof(Icmpv6PacketTooBigMessage);
 80042d2:	f104 0108 	add.w	r1, r4, #8
   length -= sizeof(Icmpv6PacketTooBigMessage);
 80042d6:	3d08      	subs	r5, #8
   if(length < sizeof(Ipv6Header))
 80042d8:	2d27      	cmp	r5, #39	@ 0x27
 80042da:	d9f0      	bls.n	80042be <icmpv6ProcessPacketTooBig+0x16>
   ipHeader = netBufferAt(buffer, offset, 0);
 80042dc:	2200      	movs	r2, #0
 80042de:	4630      	mov	r0, r6
 80042e0:	f007 ff6a 	bl	800c1b8 <netBufferAt>
   if(ipHeader == NULL)
 80042e4:	4604      	mov	r4, r0
 80042e6:	2800      	cmp	r0, #0
 80042e8:	d0e9      	beq.n	80042be <icmpv6ProcessPacketTooBig+0x16>
   tentativePathMtu = ntohl(icmpHeader->mtu);
 80042ea:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80042ee:	f7fc f998 	bl	8000622 <swapInt32>
 80042f2:	4602      	mov	r2, r0
   ipv6UpdatePathMtu(interface, &ipHeader->destAddr, tentativePathMtu);
 80042f4:	f104 0118 	add.w	r1, r4, #24
 80042f8:	4638      	mov	r0, r7
 80042fa:	f004 fa4a 	bl	8008792 <ipv6UpdatePathMtu>
 80042fe:	e7de      	b.n	80042be <icmpv6ProcessPacketTooBig+0x16>

08004300 <icmpv6ProcessEchoRequest>:
 **/

void icmpv6ProcessEchoRequest(NetInterface *interface,
   const Ipv6PseudoHeader *requestPseudoHeader, const NetBuffer *request,
   size_t requestOffset)
{
 8004300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004304:	b098      	sub	sp, #96	@ 0x60
 8004306:	9003      	str	r0, [sp, #12]
 8004308:	460f      	mov	r7, r1
 800430a:	4616      	mov	r6, r2
 800430c:	461c      	mov	r4, r3
   Icmpv6EchoMessage *requestHeader;
   Icmpv6EchoMessage *replyHeader;
   Ipv6PseudoHeader replyPseudoHeader;

   //Retrieve the length of the Echo Request message
   requestLength = netBufferGetLength(request) - requestOffset;
 800430e:	4610      	mov	r0, r2
 8004310:	f007 feb2 	bl	800c078 <netBufferGetLength>
 8004314:	1b05      	subs	r5, r0, r4

   //Ensure the packet length is correct
   if(requestLength < sizeof(Icmpv6EchoMessage))
 8004316:	2d07      	cmp	r5, #7
 8004318:	d802      	bhi.n	8004320 <icmpv6ProcessEchoRequest+0x20>
         &ancillary);
   }

   //Free previously allocated memory block
   netBufferFree(reply);
}
 800431a:	b018      	add	sp, #96	@ 0x60
 800431c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   requestHeader = netBufferAt(request, requestOffset, 0);
 8004320:	2200      	movs	r2, #0
 8004322:	4621      	mov	r1, r4
 8004324:	4630      	mov	r0, r6
 8004326:	f007 ff47 	bl	800c1b8 <netBufferAt>
   if(requestHeader == NULL)
 800432a:	4682      	mov	sl, r0
 800432c:	2800      	cmp	r0, #0
 800432e:	d0f4      	beq.n	800431a <icmpv6ProcessEchoRequest+0x1a>
   if(!interface->ipv6Context.enableEchoReq)
 8004330:	9b03      	ldr	r3, [sp, #12]
 8004332:	f8d3 27b0 	ldr.w	r2, [r3, #1968]	@ 0x7b0
 8004336:	2a00      	cmp	r2, #0
 8004338:	d0ef      	beq.n	800431a <icmpv6ProcessEchoRequest+0x1a>
   if(ipv6IsMulticastAddr(&requestPseudoHeader->destAddr))
 800433a:	7c3a      	ldrb	r2, [r7, #16]
 800433c:	2aff      	cmp	r2, #255	@ 0xff
 800433e:	d060      	beq.n	8004402 <icmpv6ProcessEchoRequest+0x102>
      replyPseudoHeader.srcAddr = requestPseudoHeader->destAddr;
 8004340:	f10d 0c34 	add.w	ip, sp, #52	@ 0x34
 8004344:	6938      	ldr	r0, [r7, #16]
 8004346:	6979      	ldr	r1, [r7, #20]
 8004348:	69ba      	ldr	r2, [r7, #24]
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   reply = ipAllocBuffer(sizeof(Icmpv6EchoMessage), &replyOffset);
 8004350:	a917      	add	r1, sp, #92	@ 0x5c
 8004352:	2008      	movs	r0, #8
 8004354:	f001 f92d 	bl	80055b2 <ipAllocBuffer>
   if(reply == NULL)
 8004358:	4681      	mov	r9, r0
 800435a:	2800      	cmp	r0, #0
 800435c:	d0dd      	beq.n	800431a <icmpv6ProcessEchoRequest+0x1a>
   replyHeader = netBufferAt(reply, replyOffset, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8004362:	f007 ff29 	bl	800c1b8 <netBufferAt>
 8004366:	4680      	mov	r8, r0
   replyHeader->type = ICMPV6_TYPE_ECHO_REPLY;
 8004368:	2381      	movs	r3, #129	@ 0x81
 800436a:	7003      	strb	r3, [r0, #0]
   replyHeader->code = 0;
 800436c:	2300      	movs	r3, #0
 800436e:	7043      	strb	r3, [r0, #1]
   replyHeader->checksum = 0;
 8004370:	7083      	strb	r3, [r0, #2]
 8004372:	70c3      	strb	r3, [r0, #3]
   replyHeader->identifier = requestHeader->identifier;
 8004374:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8004378:	8083      	strh	r3, [r0, #4]
   replyHeader->sequenceNumber = requestHeader->sequenceNumber;
 800437a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800437e:	80c3      	strh	r3, [r0, #6]
   requestOffset += sizeof(Icmpv6EchoMessage);
 8004380:	f104 0208 	add.w	r2, r4, #8
   if(requestLength > 0)
 8004384:	f1b5 0308 	subs.w	r3, r5, #8
 8004388:	d005      	beq.n	8004396 <icmpv6ProcessEchoRequest+0x96>
      error = netBufferConcat(reply, request, requestOffset, requestLength);
 800438a:	4631      	mov	r1, r6
 800438c:	4648      	mov	r0, r9
 800438e:	f007 ff32 	bl	800c1f6 <netBufferConcat>
   if(!error)
 8004392:	2800      	cmp	r0, #0
 8004394:	d131      	bne.n	80043fa <icmpv6ProcessEchoRequest+0xfa>
      replyLength = netBufferGetLength(reply) - replyOffset;
 8004396:	4648      	mov	r0, r9
 8004398:	f007 fe6e 	bl	800c078 <netBufferGetLength>
 800439c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800439e:	1ac5      	subs	r5, r0, r3
      replyPseudoHeader.destAddr = requestPseudoHeader->srcAddr;
 80043a0:	ac11      	add	r4, sp, #68	@ 0x44
 80043a2:	6838      	ldr	r0, [r7, #0]
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      replyPseudoHeader.length = htonl(replyLength);
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7fc f938 	bl	8000622 <swapInt32>
 80043b2:	9015      	str	r0, [sp, #84]	@ 0x54
      replyPseudoHeader.reserved[0] = 0;
 80043b4:	2300      	movs	r3, #0
 80043b6:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
      replyPseudoHeader.reserved[1] = 0;
 80043ba:	f88d 3059 	strb.w	r3, [sp, #89]	@ 0x59
      replyPseudoHeader.reserved[2] = 0;
 80043be:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
      replyPseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 80043c2:	233a      	movs	r3, #58	@ 0x3a
 80043c4:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
      replyHeader->checksum = ipCalcUpperLayerChecksumEx(&replyPseudoHeader,
 80043c8:	9500      	str	r5, [sp, #0]
 80043ca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043cc:	464a      	mov	r2, r9
 80043ce:	2128      	movs	r1, #40	@ 0x28
 80043d0:	a80d      	add	r0, sp, #52	@ 0x34
 80043d2:	f001 f8d9 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 80043d6:	f8a8 0002 	strh.w	r0, [r8, #2]
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 80043da:	ac05      	add	r4, sp, #20
 80043dc:	4d0f      	ldr	r5, [pc, #60]	@ (800441c <icmpv6ProcessEchoRequest+0x11c>)
 80043de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80043e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80043e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80043e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ipv6SendDatagram(interface, &replyPseudoHeader, reply, replyOffset,
 80043ea:	ab05      	add	r3, sp, #20
 80043ec:	9300      	str	r3, [sp, #0]
 80043ee:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80043f0:	464a      	mov	r2, r9
 80043f2:	a90d      	add	r1, sp, #52	@ 0x34
 80043f4:	9803      	ldr	r0, [sp, #12]
 80043f6:	f002 ff39 	bl	800726c <ipv6SendDatagram>
   netBufferFree(reply);
 80043fa:	4648      	mov	r0, r9
 80043fc:	f007 feb4 	bl	800c168 <netBufferFree>
 8004400:	e78b      	b.n	800431a <icmpv6ProcessEchoRequest+0x1a>
      if(!interface->ipv6Context.enableMulticastEchoReq)
 8004402:	f8d3 37b4 	ldr.w	r3, [r3, #1972]	@ 0x7b4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d087      	beq.n	800431a <icmpv6ProcessEchoRequest+0x1a>
      error = ipv6SelectSourceAddr(&interface, &requestPseudoHeader->srcAddr,
 800440a:	aa0d      	add	r2, sp, #52	@ 0x34
 800440c:	4639      	mov	r1, r7
 800440e:	a803      	add	r0, sp, #12
 8004410:	f003 fe2c 	bl	800806c <ipv6SelectSourceAddr>
      if(error)
 8004414:	2800      	cmp	r0, #0
 8004416:	d09b      	beq.n	8004350 <icmpv6ProcessEchoRequest+0x50>
 8004418:	e77f      	b.n	800431a <icmpv6ProcessEchoRequest+0x1a>
 800441a:	bf00      	nop
 800441c:	08019fc4 	.word	0x08019fc4

08004420 <icmpv6ProcessMessage>:
{
 8004420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004424:	b083      	sub	sp, #12
 8004426:	4607      	mov	r7, r0
 8004428:	4688      	mov	r8, r1
 800442a:	4614      	mov	r4, r2
 800442c:	461d      	mov	r5, r3
   length = netBufferGetLength(buffer) - offset;
 800442e:	4610      	mov	r0, r2
 8004430:	f007 fe22 	bl	800c078 <netBufferGetLength>
 8004434:	1b46      	subs	r6, r0, r5
   if(length < sizeof(Icmpv6Header))
 8004436:	2e03      	cmp	r6, #3
 8004438:	d802      	bhi.n	8004440 <icmpv6ProcessMessage+0x20>
}
 800443a:	b003      	add	sp, #12
 800443c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   header = netBufferAt(buffer, offset, 0);
 8004440:	2200      	movs	r2, #0
 8004442:	4629      	mov	r1, r5
 8004444:	4620      	mov	r0, r4
 8004446:	f007 feb7 	bl	800c1b8 <netBufferAt>
   if(header == NULL)
 800444a:	4681      	mov	r9, r0
 800444c:	2800      	cmp	r0, #0
 800444e:	d0f4      	beq.n	800443a <icmpv6ProcessMessage+0x1a>
   if(ipCalcUpperLayerChecksumEx(pseudoHeader,
 8004450:	9600      	str	r6, [sp, #0]
 8004452:	462b      	mov	r3, r5
 8004454:	4622      	mov	r2, r4
 8004456:	2128      	movs	r1, #40	@ 0x28
 8004458:	4640      	mov	r0, r8
 800445a:	f001 f895 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800445e:	2800      	cmp	r0, #0
 8004460:	d1eb      	bne.n	800443a <icmpv6ProcessMessage+0x1a>
   if(ipv6IsTentativeAddr(interface, &pseudoHeader->destAddr))
 8004462:	f108 0110 	add.w	r1, r8, #16
 8004466:	4638      	mov	r0, r7
 8004468:	f003 fc38 	bl	8007cdc <ipv6IsTentativeAddr>
 800446c:	b128      	cbz	r0, 800447a <icmpv6ProcessMessage+0x5a>
      if(header->type != ICMPV6_TYPE_NEIGHBOR_SOL &&
 800446e:	f899 3000 	ldrb.w	r3, [r9]
 8004472:	3379      	adds	r3, #121	@ 0x79
 8004474:	b2db      	uxtb	r3, r3
 8004476:	2b01      	cmp	r3, #1
 8004478:	d8df      	bhi.n	800443a <icmpv6ProcessMessage+0x1a>
   switch(header->type)
 800447a:	f899 3000 	ldrb.w	r3, [r9]
 800447e:	2b8f      	cmp	r3, #143	@ 0x8f
 8004480:	d8db      	bhi.n	800443a <icmpv6ProcessMessage+0x1a>
 8004482:	2b80      	cmp	r3, #128	@ 0x80
 8004484:	d326      	bcc.n	80044d4 <icmpv6ProcessMessage+0xb4>
 8004486:	3b80      	subs	r3, #128	@ 0x80
 8004488:	2b0f      	cmp	r3, #15
 800448a:	d8d6      	bhi.n	800443a <icmpv6ProcessMessage+0x1a>
 800448c:	a201      	add	r2, pc, #4	@ (adr r2, 8004494 <icmpv6ProcessMessage+0x74>)
 800448e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004492:	bf00      	nop
 8004494:	080044f9 	.word	0x080044f9
 8004498:	0800443b 	.word	0x0800443b
 800449c:	08004507 	.word	0x08004507
 80044a0:	08004507 	.word	0x08004507
 80044a4:	08004507 	.word	0x08004507
 80044a8:	0800443b 	.word	0x0800443b
 80044ac:	08004519 	.word	0x08004519
 80044b0:	0800452b 	.word	0x0800452b
 80044b4:	0800453d 	.word	0x0800453d
 80044b8:	0800454f 	.word	0x0800454f
 80044bc:	0800443b 	.word	0x0800443b
 80044c0:	0800443b 	.word	0x0800443b
 80044c4:	0800443b 	.word	0x0800443b
 80044c8:	0800443b 	.word	0x0800443b
 80044cc:	0800443b 	.word	0x0800443b
 80044d0:	08004507 	.word	0x08004507
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d008      	beq.n	80044ea <icmpv6ProcessMessage+0xca>
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d1ae      	bne.n	800443a <icmpv6ProcessMessage+0x1a>
      icmpv6ProcessPacketTooBig(interface, pseudoHeader, buffer, offset);
 80044dc:	462b      	mov	r3, r5
 80044de:	4622      	mov	r2, r4
 80044e0:	4641      	mov	r1, r8
 80044e2:	4638      	mov	r0, r7
 80044e4:	f7ff fee0 	bl	80042a8 <icmpv6ProcessPacketTooBig>
      break;
 80044e8:	e7a7      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      icmpv6ProcessDestUnreachable(interface, pseudoHeader, buffer, offset);
 80044ea:	462b      	mov	r3, r5
 80044ec:	4622      	mov	r2, r4
 80044ee:	4641      	mov	r1, r8
 80044f0:	4638      	mov	r0, r7
 80044f2:	f7ff fec9 	bl	8004288 <icmpv6ProcessDestUnreachable>
      break;
 80044f6:	e7a0      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      icmpv6ProcessEchoRequest(interface, pseudoHeader, buffer, offset);
 80044f8:	462b      	mov	r3, r5
 80044fa:	4622      	mov	r2, r4
 80044fc:	4641      	mov	r1, r8
 80044fe:	4638      	mov	r0, r7
 8004500:	f7ff fefe 	bl	8004300 <icmpv6ProcessEchoRequest>
      break;
 8004504:	e799      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      mldProcessMessage(interface, pseudoHeader, buffer, offset, ancillary);
 8004506:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	462b      	mov	r3, r5
 800450c:	4622      	mov	r2, r4
 800450e:	4641      	mov	r1, r8
 8004510:	4638      	mov	r0, r7
 8004512:	f004 fd2b 	bl	8008f6c <mldProcessMessage>
      break;
 8004516:	e790      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      ndpProcessRouterAdv(interface, pseudoHeader, buffer, offset, ancillary);
 8004518:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800451a:	9300      	str	r3, [sp, #0]
 800451c:	462b      	mov	r3, r5
 800451e:	4622      	mov	r2, r4
 8004520:	4641      	mov	r1, r8
 8004522:	4638      	mov	r0, r7
 8004524:	f005 ff5d 	bl	800a3e2 <ndpProcessRouterAdv>
      break;
 8004528:	e787      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      ndpProcessNeighborSol(interface, pseudoHeader, buffer, offset, ancillary);
 800452a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	462b      	mov	r3, r5
 8004530:	4622      	mov	r2, r4
 8004532:	4641      	mov	r1, r8
 8004534:	4638      	mov	r0, r7
 8004536:	f006 fced 	bl	800af14 <ndpProcessNeighborSol>
      break;
 800453a:	e77e      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      ndpProcessNeighborAdv(interface, pseudoHeader, buffer, offset, ancillary);
 800453c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	462b      	mov	r3, r5
 8004542:	4622      	mov	r2, r4
 8004544:	4641      	mov	r1, r8
 8004546:	4638      	mov	r0, r7
 8004548:	f006 f872 	bl	800a630 <ndpProcessNeighborAdv>
      break;
 800454c:	e775      	b.n	800443a <icmpv6ProcessMessage+0x1a>
      ndpProcessRedirect(interface, pseudoHeader, buffer, offset, ancillary);
 800454e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004550:	9300      	str	r3, [sp, #0]
 8004552:	462b      	mov	r3, r5
 8004554:	4622      	mov	r2, r4
 8004556:	4641      	mov	r1, r8
 8004558:	4638      	mov	r0, r7
 800455a:	f006 f949 	bl	800a7f0 <ndpProcessRedirect>
      break;
 800455e:	e76c      	b.n	800443a <icmpv6ProcessMessage+0x1a>

08004560 <icmpv6SendErrorMessage>:
 **/

error_t icmpv6SendErrorMessage(NetInterface *interface, uint8_t type,
   uint8_t code, uint32_t parameter, const NetBuffer *ipPacket,
   size_t ipPacketOffset)
{
 8004560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004564:	b099      	sub	sp, #100	@ 0x64
 8004566:	9003      	str	r0, [sp, #12]
 8004568:	460d      	mov	r5, r1
 800456a:	4616      	mov	r6, r2
 800456c:	9302      	str	r3, [sp, #8]
 800456e:	9f22      	ldr	r7, [sp, #136]	@ 0x88
 8004570:	f8dd 808c 	ldr.w	r8, [sp, #140]	@ 0x8c
   Icmpv6ErrorMessage *icmpHeader;
   Ipv6Header *ipHeader;
   Ipv6PseudoHeader pseudoHeader;

   //Retrieve the length of the invoking IPv6 packet
   length = netBufferGetLength(ipPacket) - ipPacketOffset;
 8004574:	4638      	mov	r0, r7
 8004576:	f007 fd7f 	bl	800c078 <netBufferGetLength>
 800457a:	eba0 0408 	sub.w	r4, r0, r8

   //Check the length of the IPv6 packet
   if(length < sizeof(Ipv6Header))
 800457e:	2c27      	cmp	r4, #39	@ 0x27
 8004580:	f240 8099 	bls.w	80046b6 <icmpv6SendErrorMessage+0x156>
      return ERROR_INVALID_LENGTH;

   //Point to the header of the invoking packet
   ipHeader = netBufferAt(ipPacket, ipPacketOffset, sizeof(Ipv6Header));
 8004584:	2228      	movs	r2, #40	@ 0x28
 8004586:	4641      	mov	r1, r8
 8004588:	4638      	mov	r0, r7
 800458a:	f007 fe15 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(ipHeader == NULL)
 800458e:	4681      	mov	r9, r0
 8004590:	2800      	cmp	r0, #0
 8004592:	f000 8095 	beq.w	80046c0 <icmpv6SendErrorMessage+0x160>
      return ERROR_FAILURE;

   //Check the type of the invoking packet
   if(ipHeader->nextHeader == IPV6_ICMPV6_HEADER)
 8004596:	7983      	ldrb	r3, [r0, #6]
 8004598:	2b3a      	cmp	r3, #58	@ 0x3a
 800459a:	d039      	beq.n	8004610 <icmpv6SendErrorMessage+0xb0>
      }
   }

   //An ICMPv6 error message must not be originated as a result of receiving a
   //packet destined to an IPv6 multicast address
   if(ipv6IsMulticastAddr(&ipHeader->destAddr))
 800459c:	f899 3018 	ldrb.w	r3, [r9, #24]
 80045a0:	2bff      	cmp	r3, #255	@ 0xff
 80045a2:	d106      	bne.n	80045b2 <icmpv6SendErrorMessage+0x52>
   {
      //There are two exceptions to this rule
      if(type == ICMPV6_TYPE_PACKET_TOO_BIG)
 80045a4:	2d02      	cmp	r5, #2
 80045a6:	d004      	beq.n	80045b2 <icmpv6SendErrorMessage+0x52>
      {
         //The Packet Too Big Message to allow Path MTU discovery to
         //work for IPv6 multicast
      }
      else if(type == ICMPV6_TYPE_PARAM_PROBLEM &&
 80045a8:	2d04      	cmp	r5, #4
 80045aa:	bf08      	it	eq
 80045ac:	2e02      	cmpeq	r6, #2
 80045ae:	f040 8089 	bne.w	80046c4 <icmpv6SendErrorMessage+0x164>

   //An ICMPv6 error message must not be originated as a result of receiving a
   //packet whose source address does not uniquely identify a single node (e.g.
   //the IPv6 unspecified address, an IPv6 multicast address, or an address
   //known by the ICMPv6 message originator to be an IPv6 anycast address)
   if(ipv6IsAnycastAddr(interface, &ipHeader->srcAddr))
 80045b2:	f109 0108 	add.w	r1, r9, #8
 80045b6:	9803      	ldr	r0, [sp, #12]
 80045b8:	f003 fb74 	bl	8007ca4 <ipv6IsAnycastAddr>
 80045bc:	2800      	cmp	r0, #0
 80045be:	f040 8083 	bne.w	80046c8 <icmpv6SendErrorMessage+0x168>
      return ERROR_INVALID_ADDRESS;

   //Return as much of invoking IPv6 packet as possible without the ICMPv6
   //packet exceeding the minimum IPv6 MTU
   length = MIN(length, IPV6_DEFAULT_MTU - sizeof(Ipv6Header) -
 80045c2:	f5b4 6f9a 	cmp.w	r4, #1232	@ 0x4d0
 80045c6:	bf28      	it	cs
 80045c8:	f44f 649a 	movcs.w	r4, #1232	@ 0x4d0
      sizeof(Icmpv6ErrorMessage));

   //Allocate a memory buffer to hold the ICMPv6 message
   icmpMessage = ipAllocBuffer(sizeof(Icmpv6ErrorMessage), &offset);
 80045cc:	a917      	add	r1, sp, #92	@ 0x5c
 80045ce:	2008      	movs	r0, #8
 80045d0:	f000 ffef 	bl	80055b2 <ipAllocBuffer>

   //Failed to allocate memory?
   if(icmpMessage == NULL)
 80045d4:	4683      	mov	fp, r0
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d078      	beq.n	80046cc <icmpv6SendErrorMessage+0x16c>
      return ERROR_OUT_OF_MEMORY;

   //Point to the ICMPv6 header
   icmpHeader = netBufferAt(icmpMessage, offset, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80045de:	f007 fdeb 	bl	800c1b8 <netBufferAt>
 80045e2:	4682      	mov	sl, r0

   //Format ICMPv6 Error message
   icmpHeader->type = type;
 80045e4:	7005      	strb	r5, [r0, #0]
   icmpHeader->code = code;
 80045e6:	7046      	strb	r6, [r0, #1]
   icmpHeader->checksum = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	7083      	strb	r3, [r0, #2]
 80045ec:	70c3      	strb	r3, [r0, #3]
   icmpHeader->parameter = htonl(parameter);
 80045ee:	9802      	ldr	r0, [sp, #8]
 80045f0:	f7fc f817 	bl	8000622 <swapInt32>
 80045f4:	f8ca 0004 	str.w	r0, [sl, #4]

   //Copy incoming IPv6 packet contents
   error = netBufferConcat(icmpMessage, ipPacket, ipPacketOffset, length);
 80045f8:	4623      	mov	r3, r4
 80045fa:	4642      	mov	r2, r8
 80045fc:	4639      	mov	r1, r7
 80045fe:	4658      	mov	r0, fp
 8004600:	f007 fdf9 	bl	800c1f6 <netBufferConcat>

   //Check status code
   if(!error)
 8004604:	4604      	mov	r4, r0
 8004606:	b1b0      	cbz	r0, 8004636 <icmpv6SendErrorMessage+0xd6>
            &ancillary);
      }
   }

   //Free previously allocated memory
   netBufferFree(icmpMessage);
 8004608:	4658      	mov	r0, fp
 800460a:	f007 fdad 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
 800460e:	e053      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
      if(length >= (sizeof(Ipv6Header) + sizeof(Icmpv6Header)))
 8004610:	2c2b      	cmp	r4, #43	@ 0x2b
 8004612:	d9c3      	bls.n	800459c <icmpv6SendErrorMessage+0x3c>
         icmpHeader = netBufferAt(ipPacket, ipPacketOffset + sizeof(Ipv6Header),
 8004614:	2204      	movs	r2, #4
 8004616:	f108 0128 	add.w	r1, r8, #40	@ 0x28
 800461a:	4638      	mov	r0, r7
 800461c:	f007 fdcc 	bl	800c1b8 <netBufferAt>
         if(icmpHeader != NULL)
 8004620:	2800      	cmp	r0, #0
 8004622:	d0bb      	beq.n	800459c <icmpv6SendErrorMessage+0x3c>
            if(icmpHeader->type == ICMPV6_TYPE_DEST_UNREACHABLE ||
 8004624:	7802      	ldrb	r2, [r0, #0]
               icmpHeader->type == ICMPV6_TYPE_PARAM_PROBLEM ||
 8004626:	1e53      	subs	r3, r2, #1
 8004628:	b2db      	uxtb	r3, r3
            if(icmpHeader->type == ICMPV6_TYPE_DEST_UNREACHABLE ||
 800462a:	2a89      	cmp	r2, #137	@ 0x89
 800462c:	bf18      	it	ne
 800462e:	2b03      	cmpne	r3, #3
 8004630:	d8b4      	bhi.n	800459c <icmpv6SendErrorMessage+0x3c>
               return ERROR_INVALID_TYPE;
 8004632:	24f0      	movs	r4, #240	@ 0xf0
 8004634:	e040      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
      length = netBufferGetLength(icmpMessage) - offset;
 8004636:	4658      	mov	r0, fp
 8004638:	f007 fd1e 	bl	800c078 <netBufferGetLength>
 800463c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800463e:	1ac5      	subs	r5, r0, r3
      pseudoHeader.destAddr = ipHeader->srcAddr;
 8004640:	ac11      	add	r4, sp, #68	@ 0x44
 8004642:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8004646:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800464a:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800464e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8004652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      pseudoHeader.length = htonl(length);
 8004654:	4628      	mov	r0, r5
 8004656:	f7fb ffe4 	bl	8000622 <swapInt32>
 800465a:	9015      	str	r0, [sp, #84]	@ 0x54
      pseudoHeader.reserved[0] = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	f88d 3058 	strb.w	r3, [sp, #88]	@ 0x58
      pseudoHeader.reserved[1] = 0;
 8004662:	f88d 3059 	strb.w	r3, [sp, #89]	@ 0x59
      pseudoHeader.reserved[2] = 0;
 8004666:	f88d 305a 	strb.w	r3, [sp, #90]	@ 0x5a
      pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800466a:	233a      	movs	r3, #58	@ 0x3a
 800466c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
      error = ipv6SelectSourceAddr(&interface, &pseudoHeader.destAddr,
 8004670:	aa0d      	add	r2, sp, #52	@ 0x34
 8004672:	a911      	add	r1, sp, #68	@ 0x44
 8004674:	a803      	add	r0, sp, #12
 8004676:	f003 fcf9 	bl	800806c <ipv6SelectSourceAddr>
      if(!error)
 800467a:	4604      	mov	r4, r0
 800467c:	2800      	cmp	r0, #0
 800467e:	d1c3      	bne.n	8004608 <icmpv6SendErrorMessage+0xa8>
         icmpHeader->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 8004680:	9500      	str	r5, [sp, #0]
 8004682:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004684:	465a      	mov	r2, fp
 8004686:	2128      	movs	r1, #40	@ 0x28
 8004688:	a80d      	add	r0, sp, #52	@ 0x34
 800468a:	f000 ff7d 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800468e:	f8aa 0002 	strh.w	r0, [sl, #2]
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004692:	ac05      	add	r4, sp, #20
 8004694:	4d0e      	ldr	r5, [pc, #56]	@ (80046d0 <icmpv6SendErrorMessage+0x170>)
 8004696:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004698:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800469a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800469e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         error = ipv6SendDatagram(interface, &pseudoHeader, icmpMessage, offset,
 80046a2:	ab05      	add	r3, sp, #20
 80046a4:	9300      	str	r3, [sp, #0]
 80046a6:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80046a8:	465a      	mov	r2, fp
 80046aa:	a90d      	add	r1, sp, #52	@ 0x34
 80046ac:	9803      	ldr	r0, [sp, #12]
 80046ae:	f002 fddd 	bl	800726c <ipv6SendDatagram>
 80046b2:	4604      	mov	r4, r0
 80046b4:	e7a8      	b.n	8004608 <icmpv6SendErrorMessage+0xa8>
      return ERROR_INVALID_LENGTH;
 80046b6:	24ec      	movs	r4, #236	@ 0xec
}
 80046b8:	4620      	mov	r0, r4
 80046ba:	b019      	add	sp, #100	@ 0x64
 80046bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_FAILURE;
 80046c0:	2401      	movs	r4, #1
 80046c2:	e7f9      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
         return ERROR_INVALID_ADDRESS;
 80046c4:	24e4      	movs	r4, #228	@ 0xe4
 80046c6:	e7f7      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
      return ERROR_INVALID_ADDRESS;
 80046c8:	24e4      	movs	r4, #228	@ 0xe4
 80046ca:	e7f5      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
      return ERROR_OUT_OF_MEMORY;
 80046cc:	2464      	movs	r4, #100	@ 0x64
 80046ce:	e7f3      	b.n	80046b8 <icmpv6SendErrorMessage+0x158>
 80046d0:	08019fc4 	.word	0x08019fc4

080046d4 <igmpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t igmpInit(NetInterface *interface)
{
 80046d4:	b510      	push	{r4, lr}
 80046d6:	4604      	mov	r4, r0

   //The all-systems multicast address, 224.0.0.1, is handled as a special
   //case. On all systems (hosts and routers), reception of packets destined
   //to the all-systems multicast address is permanently enabled on all
   //interfaces on which multicast reception is supported
   error = ipv4JoinMulticastGroup(interface, IGMP_ALL_SYSTEMS_ADDR);
 80046d8:	4904      	ldr	r1, [pc, #16]	@ (80046ec <igmpInit+0x18>)
 80046da:	f002 f8df 	bl	800689c <ipv4JoinMulticastGroup>
   //Any error to report?
   if(error)
 80046de:	b100      	cbz	r0, 80046e2 <igmpInit+0xe>
      return error;
#endif

   //Successful initialization
   return NO_ERROR;
}
 80046e0:	bd10      	pop	{r4, pc}
   error = igmpHostInit(interface);
 80046e2:	4620      	mov	r0, r4
 80046e4:	f000 f8a7 	bl	8004836 <igmpHostInit>
   if(error)
 80046e8:	e7fa      	b.n	80046e0 <igmpInit+0xc>
 80046ea:	bf00      	nop
 80046ec:	010000e0 	.word	0x010000e0

080046f0 <igmpTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void igmpTick(NetInterface *interface)
{
 80046f0:	b508      	push	{r3, lr}
#if (IGMP_HOST_SUPPORT == ENABLED)
   //Manage IGMP host timers
   igmpHostTick(&interface->igmpHostContext);
 80046f2:	f500 60db 	add.w	r0, r0, #1752	@ 0x6d8
 80046f6:	f000 f8bd 	bl	8004874 <igmpHostTick>
   {
      //Manage IGMP snooping switch timers
      igmpSnoopingTick(interface->igmpSnoopingContext);
   }
#endif
}
 80046fa:	bd08      	pop	{r3, pc}

080046fc <igmpLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void igmpLinkChangeEvent(NetInterface *interface)
{
 80046fc:	b508      	push	{r3, lr}
#if (IGMP_HOST_SUPPORT == ENABLED)
   //Notify the IGMP host of link state changes
   igmpHostLinkChangeEvent(&interface->igmpHostContext);
 80046fe:	f500 60db 	add.w	r0, r0, #1752	@ 0x6d8
 8004702:	f000 fa33 	bl	8004b6c <igmpHostLinkChangeEvent>
#endif
}
 8004706:	bd08      	pop	{r3, pc}

08004708 <igmpSendMessage>:
 * @return Error code
 **/

error_t igmpSendMessage(NetInterface *interface, Ipv4Addr destAddr,
   NetBuffer *buffer, size_t offset)
{
 8004708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800470c:	b090      	sub	sp, #64	@ 0x40
 800470e:	9003      	str	r0, [sp, #12]
 8004710:	460c      	mov	r4, r1
 8004712:	4615      	mov	r5, r2
 8004714:	461e      	mov	r6, r3
   IgmpMessage *message;
   Ipv4Addr srcIpAddr;
   Ipv4PseudoHeader pseudoHeader;

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 8004716:	4610      	mov	r0, r2
 8004718:	f007 fcae 	bl	800c078 <netBufferGetLength>
 800471c:	1b87      	subs	r7, r0, r6

   //Point to the beginning of the IGMP message
   message = netBufferAt(buffer, offset, length);
 800471e:	463a      	mov	r2, r7
 8004720:	4631      	mov	r1, r6
 8004722:	4628      	mov	r0, r5
 8004724:	f007 fd48 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(message == NULL)
 8004728:	2800      	cmp	r0, #0
 800472a:	d043      	beq.n	80047b4 <igmpSendMessage+0xac>
 800472c:	4680      	mov	r8, r0
      return ERROR_FAILURE;

   //Select the source IPv4 address to use
   error = ipv4SelectSourceAddr(&interface, destAddr, &srcIpAddr);
 800472e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8004730:	4621      	mov	r1, r4
 8004732:	a803      	add	r0, sp, #12
 8004734:	f001 fe12 	bl	800635c <ipv4SelectSourceAddr>

   //Check status code
   if(!error)
 8004738:	bb78      	cbnz	r0, 800479a <igmpSendMessage+0x92>
   {
      pseudoHeader.srcAddr = srcIpAddr;
 800473a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800473c:	930c      	str	r3, [sp, #48]	@ 0x30
   {
      pseudoHeader.srcAddr = IPV4_UNSPECIFIED_ADDR;
   }

   //Format IPv4 pseudo header
   pseudoHeader.destAddr = destAddr;
 800473e:	940d      	str	r4, [sp, #52]	@ 0x34
   pseudoHeader.reserved = 0;
 8004740:	2300      	movs	r3, #0
 8004742:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
   pseudoHeader.protocol = IPV4_PROTOCOL_IGMP;
 8004746:	2302      	movs	r3, #2
 8004748:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
   pseudoHeader.length = htons(length);
 800474c:	b2b8      	uxth	r0, r7
 800474e:	f7fb ff65 	bl	800061c <swapInt16>
 8004752:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
#endif
   {
      NetTxAncillary ancillary;

      //Additional options can be passed to the stack along with the packet
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8004756:	f10d 0c10 	add.w	ip, sp, #16
 800475a:	4c17      	ldr	r4, [pc, #92]	@ (80047b8 <igmpSendMessage+0xb0>)
 800475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004762:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004766:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

      //All IGMP messages are sent with an IP TTL of 1 and contain an IP Router
      //Alert option in their IP header (refer to RFC 2236, section 2)
      ancillary.ttl = IGMP_TTL;
 800476a:	2301      	movs	r3, #1
 800476c:	f88d 3014 	strb.w	r3, [sp, #20]
      ancillary.routerAlert = TRUE;
 8004770:	9308      	str	r3, [sp, #32]

      //Every IGMPv3 message is sent with an IP Precedence of Internetwork
      //Control (refer to RFC 3376, section 4)
      if(message->type == IGMP_TYPE_MEMBERSHIP_QUERY &&
 8004772:	f898 3000 	ldrb.w	r3, [r8]
 8004776:	2b11      	cmp	r3, #17
 8004778:	d012      	beq.n	80047a0 <igmpSendMessage+0x98>
         length >= sizeof(IgmpMembershipQueryV3))
      {
         ancillary.tos = IPV4_TOS_PRECEDENCE_INTERNETWORK_CTRL;
      }
      else if(message->type == IGMP_TYPE_MEMBERSHIP_REPORT_V3)
 800477a:	2b22      	cmp	r3, #34	@ 0x22
 800477c:	d016      	beq.n	80047ac <igmpSendMessage+0xa4>
      {
         ancillary.tos = IPV4_TOS_PRECEDENCE_INTERNETWORK_CTRL;
      }
      else
      {
         ancillary.tos = 0;
 800477e:	2300      	movs	r3, #0
 8004780:	f88d 3015 	strb.w	r3, [sp, #21]
      }

      //Send the IGMP message
      error = ipv4SendDatagram(interface, &pseudoHeader, buffer, offset,
 8004784:	ab04      	add	r3, sp, #16
 8004786:	9300      	str	r3, [sp, #0]
 8004788:	4633      	mov	r3, r6
 800478a:	462a      	mov	r2, r5
 800478c:	a90c      	add	r1, sp, #48	@ 0x30
 800478e:	9803      	ldr	r0, [sp, #12]
 8004790:	f001 f99e 	bl	8005ad0 <ipv4SendDatagram>
   }
#endif

   //Return status code
   return error;
}
 8004794:	b010      	add	sp, #64	@ 0x40
 8004796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pseudoHeader.srcAddr = IPV4_UNSPECIFIED_ADDR;
 800479a:	2300      	movs	r3, #0
 800479c:	930c      	str	r3, [sp, #48]	@ 0x30
 800479e:	e7ce      	b.n	800473e <igmpSendMessage+0x36>
      if(message->type == IGMP_TYPE_MEMBERSHIP_QUERY &&
 80047a0:	2f0b      	cmp	r7, #11
 80047a2:	d9ea      	bls.n	800477a <igmpSendMessage+0x72>
         ancillary.tos = IPV4_TOS_PRECEDENCE_INTERNETWORK_CTRL;
 80047a4:	23c0      	movs	r3, #192	@ 0xc0
 80047a6:	f88d 3015 	strb.w	r3, [sp, #21]
 80047aa:	e7eb      	b.n	8004784 <igmpSendMessage+0x7c>
         ancillary.tos = IPV4_TOS_PRECEDENCE_INTERNETWORK_CTRL;
 80047ac:	23c0      	movs	r3, #192	@ 0xc0
 80047ae:	f88d 3015 	strb.w	r3, [sp, #21]
 80047b2:	e7e7      	b.n	8004784 <igmpSendMessage+0x7c>
      return ERROR_FAILURE;
 80047b4:	2001      	movs	r0, #1
 80047b6:	e7ed      	b.n	8004794 <igmpSendMessage+0x8c>
 80047b8:	08019fc4 	.word	0x08019fc4

080047bc <igmpProcessMessage>:
 **/

void igmpProcessMessage(NetInterface *interface,
   const Ipv4PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset, const NetRxAncillary *ancillary)
{
 80047bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047c0:	4607      	mov	r7, r0
 80047c2:	4688      	mov	r8, r1
 80047c4:	4616      	mov	r6, r2
 80047c6:	461d      	mov	r5, r3
   size_t length;
   const IgmpMessage *message;

   //Retrieve the length of the IGMP message
   length = netBufferGetLength(buffer) - offset;
 80047c8:	4610      	mov	r0, r2
 80047ca:	f007 fc55 	bl	800c078 <netBufferGetLength>
 80047ce:	1b44      	subs	r4, r0, r5

   //To be valid, an IGMP message must be at least 8 octets long
   if(length < sizeof(IgmpMessage))
 80047d0:	2c07      	cmp	r4, #7
 80047d2:	d801      	bhi.n	80047d8 <igmpProcessMessage+0x1c>
      //Pass the message to the IGMP snooping switch
      igmpSnoopingProcessMessage(interface->igmpSnoopingContext, pseudoHeader,
         message, length, ancillary);
   }
#endif
}
 80047d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   message = netBufferAt(buffer, offset, length);
 80047d8:	4622      	mov	r2, r4
 80047da:	4629      	mov	r1, r5
 80047dc:	4630      	mov	r0, r6
 80047de:	f007 fceb 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 80047e2:	4681      	mov	r9, r0
 80047e4:	2800      	cmp	r0, #0
 80047e6:	d0f5      	beq.n	80047d4 <igmpProcessMessage+0x18>
   if(ipCalcChecksumEx(buffer, offset, length) != 0x0000)
 80047e8:	4622      	mov	r2, r4
 80047ea:	4629      	mov	r1, r5
 80047ec:	4630      	mov	r0, r6
 80047ee:	f000 fe8d 	bl	800550c <ipCalcChecksumEx>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d1ee      	bne.n	80047d4 <igmpProcessMessage+0x18>
   if(ancillary->ttl != IGMP_TTL)
 80047f6:	9b08      	ldr	r3, [sp, #32]
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d1ea      	bne.n	80047d4 <igmpProcessMessage+0x18>
   igmpHostProcessMessage(&interface->igmpHostContext, pseudoHeader, message,
 80047fe:	4623      	mov	r3, r4
 8004800:	464a      	mov	r2, r9
 8004802:	4641      	mov	r1, r8
 8004804:	f507 60db 	add.w	r0, r7, #1752	@ 0x6d8
 8004808:	f000 fd40 	bl	800528c <igmpHostProcessMessage>
 800480c:	e7e2      	b.n	80047d4 <igmpProcessMessage+0x18>

0800480e <igmpGetRandomDelay>:
systime_t igmpGetRandomDelay(systime_t maxDelay)
{
   systime_t delay;

   //Generate a random delay in the specified range
   if(maxDelay > IGMP_TICK_INTERVAL)
 800480e:	28c8      	cmp	r0, #200	@ 0xc8
 8004810:	d801      	bhi.n	8004816 <igmpGetRandomDelay+0x8>
   {
      delay = netGenerateRandRange(0, maxDelay - IGMP_TICK_INTERVAL);
   }
   else
   {
      delay = 0;
 8004812:	2000      	movs	r0, #0
   }

   //Return the random value
   return delay;
}
 8004814:	4770      	bx	lr
{
 8004816:	b508      	push	{r3, lr}
      delay = netGenerateRandRange(0, maxDelay - IGMP_TICK_INTERVAL);
 8004818:	f1a0 01c8 	sub.w	r1, r0, #200	@ 0xc8
 800481c:	2000      	movs	r0, #0
 800481e:	f008 f959 	bl	800cad4 <netGenerateRandRange>
}
 8004822:	bd08      	pop	{r3, pc}

08004824 <igmpDecodeFloatingPointValue>:
{
   uint8_t exp;
   uint8_t mant;

   //Retrieve the value of the exponent
   exp = (code >> 4) & 0x07;
 8004824:	f3c0 1302 	ubfx	r3, r0, #4, #3
   //Retrieve the value of the mantissa
   mant = code & 0x0F;
 8004828:	f000 000f 	and.w	r0, r0, #15

   //The code represents a floating-point value
   return (mant | 0x10) << (exp + 3);
 800482c:	f040 0010 	orr.w	r0, r0, #16
 8004830:	3303      	adds	r3, #3
}
 8004832:	4098      	lsls	r0, r3
 8004834:	4770      	bx	lr

08004836 <igmpHostInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t igmpHostInit(NetInterface *interface)
{
 8004836:	b510      	push	{r4, lr}
 8004838:	4604      	mov	r4, r0

   //Point to the IGMP host context
   context = &interface->igmpHostContext;

   //Clear the IGMP host context
   osMemset(context, 0, sizeof(IgmpHostContext));
 800483a:	22c8      	movs	r2, #200	@ 0xc8
 800483c:	2100      	movs	r1, #0
 800483e:	f500 60db 	add.w	r0, r0, #1752	@ 0x6d8
 8004842:	f010 fa1f 	bl	8014c84 <memset>

   //Underlying network interface
   context->interface = interface;
 8004846:	f8c4 46d8 	str.w	r4, [r4, #1752]	@ 0x6d8
   //The default host compatibility mode is IGMPv3
   context->compatibilityMode = IGMP_VERSION_3;
 800484a:	2303      	movs	r3, #3
 800484c:	f884 36dc 	strb.w	r3, [r4, #1756]	@ 0x6dc

   //In order to switch gracefully between versions of IGMP, hosts keep both
   //an IGMPv1 Querier Present timer and an IGMPv2 Querier Present timer per
   //interface (refer to RFC 3376, section 7.2.1)
   netStopTimer(&context->igmpv1QuerierPresentTimer);
 8004850:	f504 60dc 	add.w	r0, r4, #1760	@ 0x6e0
 8004854:	f008 f83c 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->igmpv2QuerierPresentTimer);
 8004858:	f204 60ec 	addw	r0, r4, #1772	@ 0x6ec
 800485c:	f008 f838 	bl	800c8d0 <netStopTimer>

   //A timer per interface is used for scheduling responses to General Queries
   netStopTimer(&context->generalQueryTimer);
 8004860:	f504 60df 	add.w	r0, r4, #1784	@ 0x6f8
 8004864:	f008 f834 	bl	800c8d0 <netStopTimer>

   //A timer is used to retransmit State-Change reports
   netStopTimer(&context->stateChangeReportTimer);
 8004868:	f204 7004 	addw	r0, r4, #1796	@ 0x704
 800486c:	f008 f830 	bl	800c8d0 <netStopTimer>

   //Successful initialization
   return NO_ERROR;
}
 8004870:	2000      	movs	r0, #0
 8004872:	bd10      	pop	{r4, pc}

08004874 <igmpHostTick>:
 *
 * @param[in] context Pointer to the IGMP host context
 **/

void igmpHostTick(IgmpHostContext *context)
{
 8004874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004878:	4605      	mov	r5, r0
   systime_t delay;
   IgmpHostGroup *group;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->interface;
 800487a:	4604      	mov	r4, r0
 800487c:	f854 6b08 	ldr.w	r6, [r4], #8

   //In order to be compatible with older version routers, IGMPv3 hosts must
   //operate in version 1 and version 2 compatibility modes (refer to RFC 3376,
   //section 7.2.1)
   if(netTimerExpired(&context->igmpv1QuerierPresentTimer))
 8004880:	4620      	mov	r0, r4
 8004882:	f008 f82a 	bl	800c8da <netTimerExpired>
 8004886:	b188      	cbz	r0, 80048ac <igmpHostTick+0x38>
   {
      //Stop IGMPv1 Querier Present timer
      netStopTimer(&context->igmpv1QuerierPresentTimer);
 8004888:	4620      	mov	r0, r4
 800488a:	f008 f821 	bl	800c8d0 <netStopTimer>

      //Check whether IGMPv2 Querier Present timer is running
      if(netTimerRunning(&context->igmpv2QuerierPresentTimer))
 800488e:	f105 0014 	add.w	r0, r5, #20
 8004892:	f008 f820 	bl	800c8d6 <netTimerRunning>
 8004896:	b120      	cbz	r0, 80048a2 <igmpHostTick+0x2e>
      {
         //When the IGMPv1 Querier Present timer expires, a host switches to
         //Host Compatibility mode of IGMPv2 if it has a running IGMPv2
         //Querier Present timer
         igmpHostChangeCompatibilityMode(context, IGMP_VERSION_2);
 8004898:	2102      	movs	r1, #2
 800489a:	4628      	mov	r0, r5
 800489c:	f000 fc4e 	bl	800513c <igmpHostChangeCompatibilityMode>
 80048a0:	e00a      	b.n	80048b8 <igmpHostTick+0x44>
      }
      else
      {
         //If it does not have a running IGMPv2 Querier Present timer then it
         //switches to Host Compatibility of IGMPv3
         igmpHostChangeCompatibilityMode(context, IGMP_VERSION_3);
 80048a2:	2103      	movs	r1, #3
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 fc49 	bl	800513c <igmpHostChangeCompatibilityMode>
 80048aa:	e005      	b.n	80048b8 <igmpHostTick+0x44>
      }
   }
   else if(netTimerExpired(&context->igmpv2QuerierPresentTimer))
 80048ac:	f105 0714 	add.w	r7, r5, #20
 80048b0:	4638      	mov	r0, r7
 80048b2:	f008 f812 	bl	800c8da <netTimerExpired>
 80048b6:	b920      	cbnz	r0, 80048c2 <igmpHostTick+0x4e>
   {
      //Just for sanity
   }

   //Check host compatibility mode
   if(context->compatibilityMode <= IGMP_VERSION_2)
 80048b8:	792b      	ldrb	r3, [r5, #4]
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d859      	bhi.n	8004972 <igmpHostTick+0xfe>
   {
      //Loop through multicast groups
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80048be:	2400      	movs	r4, #0
 80048c0:	e00f      	b.n	80048e2 <igmpHostTick+0x6e>
      netStopTimer(&context->igmpv2QuerierPresentTimer);
 80048c2:	4638      	mov	r0, r7
 80048c4:	f008 f804 	bl	800c8d0 <netStopTimer>
      if(netTimerRunning(&context->igmpv1QuerierPresentTimer))
 80048c8:	4620      	mov	r0, r4
 80048ca:	f008 f804 	bl	800c8d6 <netTimerRunning>
 80048ce:	2800      	cmp	r0, #0
 80048d0:	d1f2      	bne.n	80048b8 <igmpHostTick+0x44>
         igmpHostChangeCompatibilityMode(context, IGMP_VERSION_3);
 80048d2:	2103      	movs	r1, #3
 80048d4:	4628      	mov	r0, r5
 80048d6:	f000 fc31 	bl	800513c <igmpHostChangeCompatibilityMode>
 80048da:	e7ed      	b.n	80048b8 <igmpHostTick+0x44>

         //Check group state
         if(group->state == IGMP_HOST_GROUP_STATE_INIT_MEMBER)
         {
            //Valid IPv4 address assigned to the interface?
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 80048dc:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 80048de:	bb53      	cbnz	r3, 8004936 <igmpHostTick+0xc2>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80048e0:	3401      	adds	r4, #1
 80048e2:	2c03      	cmp	r4, #3
 80048e4:	f200 80a0 	bhi.w	8004a28 <igmpHostTick+0x1b4>
         if(group->state == IGMP_HOST_GROUP_STATE_INIT_MEMBER)
 80048e8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80048ec:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80048f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d0f1      	beq.n	80048dc <igmpHostTick+0x68>
               group->flag = TRUE;
               //Enter the Delaying Member state
               group->state = IGMP_HOST_GROUP_STATE_DELAYING_MEMBER;
            }
         }
         else if(group->state == IGMP_HOST_GROUP_STATE_DELAYING_MEMBER)
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d1f1      	bne.n	80048e0 <igmpHostTick+0x6c>
         {
            //Delay timer expired?
            if(netTimerExpired(&group->timer))
 80048fc:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
 8004900:	00bf      	lsls	r7, r7, #2
 8004902:	3748      	adds	r7, #72	@ 0x48
 8004904:	442f      	add	r7, r5
 8004906:	4638      	mov	r0, r7
 8004908:	f007 ffe7 	bl	800c8da <netTimerExpired>
 800490c:	2800      	cmp	r0, #0
 800490e:	d0e7      	beq.n	80048e0 <igmpHostTick+0x6c>
            {
               //Send a Membership Report message for the group on the interface
               igmpHostSendMembershipReport(context, group->addr);
 8004910:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
 8004914:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8004918:	f8d8 103c 	ldr.w	r1, [r8, #60]	@ 0x3c
 800491c:	4628      	mov	r0, r5
 800491e:	f000 f95b 	bl	8004bd8 <igmpHostSendMembershipReport>

               //Stop delay timer
               netStopTimer(&group->timer);
 8004922:	4638      	mov	r0, r7
 8004924:	f007 ffd4 	bl	800c8d0 <netStopTimer>

               //Set flag
               group->flag = TRUE;
 8004928:	2301      	movs	r3, #1
 800492a:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
               //Switch to the Idle Member state
               group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
 800492e:	2303      	movs	r3, #3
 8004930:	f888 3038 	strb.w	r3, [r8, #56]	@ 0x38
 8004934:	e7d4      	b.n	80048e0 <igmpHostTick+0x6c>
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 8004936:	4630      	mov	r0, r6
 8004938:	f001 fbf7 	bl	800612a <ipv4IsHostAddrValid>
 800493c:	2800      	cmp	r0, #0
 800493e:	d0cf      	beq.n	80048e0 <igmpHostTick+0x6c>
               igmpHostSendMembershipReport(context, group->addr);
 8004940:	00e7      	lsls	r7, r4, #3
 8004942:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
 8004946:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 800494a:	f8d8 103c 	ldr.w	r1, [r8, #60]	@ 0x3c
 800494e:	4628      	mov	r0, r5
 8004950:	f000 f942 	bl	8004bd8 <igmpHostSendMembershipReport>
               netStartTimer(&group->timer, IGMP_UNSOLICITED_REPORT_INTERVAL);
 8004954:	1938      	adds	r0, r7, r4
 8004956:	0080      	lsls	r0, r0, #2
 8004958:	3048      	adds	r0, #72	@ 0x48
 800495a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800495e:	4428      	add	r0, r5
 8004960:	f007 ffac 	bl	800c8bc <netStartTimer>
               group->flag = TRUE;
 8004964:	2301      	movs	r3, #1
 8004966:	f8c8 3040 	str.w	r3, [r8, #64]	@ 0x40
               group->state = IGMP_HOST_GROUP_STATE_DELAYING_MEMBER;
 800496a:	2302      	movs	r3, #2
 800496c:	f888 3038 	strb.w	r3, [r8, #56]	@ 0x38
 8004970:	e7b6      	b.n	80048e0 <igmpHostTick+0x6c>
   else
   {
      //If the expired timer is the interface timer, then one Current-State
      //Record is sent for each multicast address for which the specified
      //interface has reception state
      if(netTimerExpired(&context->generalQueryTimer))
 8004972:	f105 0420 	add.w	r4, r5, #32
 8004976:	4620      	mov	r0, r4
 8004978:	f007 ffaf 	bl	800c8da <netTimerExpired>
 800497c:	b908      	cbnz	r0, 8004982 <igmpHostTick+0x10e>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800497e:	2400      	movs	r4, #0
 8004980:	e00a      	b.n	8004998 <igmpHostTick+0x124>
      {
         //Send Current-State report message
         igmpHostSendCurrentStateReport(context, IPV4_UNSPECIFIED_ADDR);
 8004982:	2100      	movs	r1, #0
 8004984:	4628      	mov	r0, r5
 8004986:	f000 fadc 	bl	8004f42 <igmpHostSendCurrentStateReport>

         //Stop interface timer
         netStopTimer(&context->generalQueryTimer);
 800498a:	4620      	mov	r0, r4
 800498c:	f007 ffa0 	bl	800c8d0 <netStopTimer>
 8004990:	e7f5      	b.n	800497e <igmpHostTick+0x10a>

         //Check group state
         if(group->state == IGMP_HOST_GROUP_STATE_INIT_MEMBER)
         {
            //Valid IPv4 address assigned to the interface?
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 8004992:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 8004994:	bb13      	cbnz	r3, 80049dc <igmpHostTick+0x168>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004996:	3401      	adds	r4, #1
 8004998:	2c03      	cmp	r4, #3
 800499a:	d83f      	bhi.n	8004a1c <igmpHostTick+0x1a8>
         if(group->state == IGMP_HOST_GROUP_STATE_INIT_MEMBER)
 800499c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80049a0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80049a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d0f2      	beq.n	8004992 <igmpHostTick+0x11e>
#endif
               //Enter the Idle Member state
               group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
            }
         }
         else if(group->state == IGMP_HOST_GROUP_STATE_IDLE_MEMBER)
 80049ac:	2b03      	cmp	r3, #3
 80049ae:	d1f2      	bne.n	8004996 <igmpHostTick+0x122>
         {
            //Check whether the group timer has expired
            if(netTimerExpired(&group->timer))
 80049b0:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
 80049b4:	00bf      	lsls	r7, r7, #2
 80049b6:	3748      	adds	r7, #72	@ 0x48
 80049b8:	442f      	add	r7, r5
 80049ba:	4638      	mov	r0, r7
 80049bc:	f007 ff8d 	bl	800c8da <netTimerExpired>
 80049c0:	2800      	cmp	r0, #0
 80049c2:	d0e8      	beq.n	8004996 <igmpHostTick+0x122>
            {
               //Send Current-State report message
               igmpHostSendCurrentStateReport(context, group->addr);
 80049c4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80049c8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80049cc:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 fab7 	bl	8004f42 <igmpHostSendCurrentStateReport>

               //Stop group timer
               netStopTimer(&group->timer);
 80049d4:	4638      	mov	r0, r7
 80049d6:	f007 ff7b 	bl	800c8d0 <netStopTimer>
 80049da:	e7dc      	b.n	8004996 <igmpHostTick+0x122>
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 80049dc:	4630      	mov	r0, r6
 80049de:	f001 fba4 	bl	800612a <ipv4IsHostAddrValid>
 80049e2:	2800      	cmp	r0, #0
 80049e4:	d0d7      	beq.n	8004996 <igmpHostTick+0x122>
               if(group->filterMode == IP_FILTER_MODE_EXCLUDE)
 80049e6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80049ea:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80049ee:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80049f2:	b13b      	cbz	r3, 8004a04 <igmpHostTick+0x190>
               group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
 80049f4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80049f8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80049fc:	2203      	movs	r2, #3
 80049fe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8004a02:	e7c8      	b.n	8004996 <igmpHostTick+0x122>
                  group->retransmitCount = IGMP_ROBUSTNESS_VARIABLE;
 8004a04:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004a08:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	645a      	str	r2, [r3, #68]	@ 0x44
                  netStartTimer(&context->stateChangeReportTimer, 0);
 8004a10:	2100      	movs	r1, #0
 8004a12:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8004a16:	f007 ff51 	bl	800c8bc <netStartTimer>
 8004a1a:	e7eb      	b.n	80049f4 <igmpHostTick+0x180>
         }
      }

      //If the expired timer is the retransmission timer, then the State-Change
      //report is retransmitted
      if(netTimerExpired(&context->stateChangeReportTimer))
 8004a1c:	f105 042c 	add.w	r4, r5, #44	@ 0x2c
 8004a20:	4620      	mov	r0, r4
 8004a22:	f007 ff5a 	bl	800c8da <netTimerExpired>
 8004a26:	b908      	cbnz	r0, 8004a2c <igmpHostTick+0x1b8>

         //Delete groups in "non-existent" state
         igmpHostFlushUnusedGroups(context);
      }
   }
}
 8004a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         igmpHostSendStateChangeReport(context);
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f986 	bl	8004d3e <igmpHostSendStateChangeReport>
         if(igmpHostGetRetransmitStatus(context))
 8004a32:	4628      	mov	r0, r5
 8004a34:	f000 f962 	bl	8004cfc <igmpHostGetRetransmitStatus>
 8004a38:	b158      	cbz	r0, 8004a52 <igmpHostTick+0x1de>
            delay = igmpGetRandomDelay(IGMP_V3_UNSOLICITED_REPORT_INTERVAL);
 8004a3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004a3e:	f7ff fee6 	bl	800480e <igmpGetRandomDelay>
 8004a42:	4601      	mov	r1, r0
            netStartTimer(&context->stateChangeReportTimer, delay);
 8004a44:	4620      	mov	r0, r4
 8004a46:	f007 ff39 	bl	800c8bc <netStartTimer>
         igmpHostFlushUnusedGroups(context);
 8004a4a:	4628      	mov	r0, r5
 8004a4c:	f000 fb49 	bl	80050e2 <igmpHostFlushUnusedGroups>
}
 8004a50:	e7ea      	b.n	8004a28 <igmpHostTick+0x1b4>
            netStopTimer(&context->stateChangeReportTimer);
 8004a52:	4620      	mov	r0, r4
 8004a54:	f007 ff3c 	bl	800c8d0 <netStopTimer>
 8004a58:	e7f7      	b.n	8004a4a <igmpHostTick+0x1d6>

08004a5a <igmpHostStateChangeEvent>:
 * @param[in] newFilter New interface state for the affected group
 **/

void igmpHostStateChangeEvent(IgmpHostContext *context, Ipv4Addr groupAddr,
   IpFilterMode newFilterMode, const Ipv4SrcAddrList *newFilter)
{
 8004a5a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a5e:	4607      	mov	r7, r0
 8004a60:	4688      	mov	r8, r1
 8004a62:	4616      	mov	r6, r2
 8004a64:	461d      	mov	r5, r3
   systime_t delay;
   IgmpHostGroup *group;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->interface;
 8004a66:	f8d0 9000 	ldr.w	r9, [r0]

   //Search the list of groups for the specified multicast address
   group = igmpHostFindGroup(context, groupAddr);
 8004a6a:	f000 fa2b 	bl	8004ec4 <igmpHostFindGroup>
 8004a6e:	4604      	mov	r4, r0

   //Check whether the interface has reception state for that group address
   if(newFilterMode == IP_FILTER_MODE_EXCLUDE || newFilter->numSources > 0)
 8004a70:	b116      	cbz	r6, 8004a78 <igmpHostStateChangeEvent+0x1e>
 8004a72:	682b      	ldr	r3, [r5, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d03b      	beq.n	8004af0 <igmpHostStateChangeEvent+0x96>
   {
      //No matching group found?
      if(group == NULL)
 8004a78:	b18c      	cbz	r4, 8004a9e <igmpHostStateChangeEvent+0x44>

   //Valid group?
   if(group != NULL)
   {
      //Any state change detected?
      if(group->filterMode != newFilterMode ||
 8004a7a:	7f23      	ldrb	r3, [r4, #28]
 8004a7c:	42b3      	cmp	r3, r6
 8004a7e:	d03a      	beq.n	8004af6 <igmpHostStateChangeEvent+0x9c>
         !ipv4CompareSrcAddrLists(&group->filter, newFilter))
      {
         //Merge the difference report resulting from the state change and the
         //pending report
         igmpHostMergeReports(group, newFilterMode, newFilter);
 8004a80:	462a      	mov	r2, r5
 8004a82:	4631      	mov	r1, r6
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 f92d 	bl	8004ce4 <igmpHostMergeReports>

         //Save the new state
         group->filterMode = newFilterMode;
 8004a8a:	7726      	strb	r6, [r4, #28]
         group->filter = *newFilter;
 8004a8c:	682b      	ldr	r3, [r5, #0]
 8004a8e:	6223      	str	r3, [r4, #32]

         //Check host compatibility mode
         if(context->compatibilityMode <= IGMP_VERSION_2)
 8004a90:	793b      	ldrb	r3, [r7, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d845      	bhi.n	8004b22 <igmpHostStateChangeEvent+0xc8>
         {
            //The "non-existent" state is considered to have a filter mode of
            //INCLUDE and an empty source list
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8004a96:	2e01      	cmp	r6, #1
 8004a98:	d035      	beq.n	8004b06 <igmpHostStateChangeEvent+0xac>
               igmpHostFlushUnusedGroups(context);
            }
         }
      }
   }
}
 8004a9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
         group = igmpHostCreateGroup(context, groupAddr);
 8004a9e:	4641      	mov	r1, r8
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f000 f9cc 	bl	8004e3e <igmpHostCreateGroup>
         if(group != NULL)
 8004aa6:	4604      	mov	r4, r0
 8004aa8:	2800      	cmp	r0, #0
 8004aaa:	d0f6      	beq.n	8004a9a <igmpHostStateChangeEvent+0x40>
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 8004aac:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
 8004ab0:	b923      	cbnz	r3, 8004abc <igmpHostStateChangeEvent+0x62>
               group->flag = FALSE;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60a3      	str	r3, [r4, #8]
               group->state = IGMP_HOST_GROUP_STATE_INIT_MEMBER;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 8004aba:	e7de      	b.n	8004a7a <igmpHostStateChangeEvent+0x20>
            if(interface->linkState && ipv4IsHostAddrValid(interface))
 8004abc:	4648      	mov	r0, r9
 8004abe:	f001 fb34 	bl	800612a <ipv4IsHostAddrValid>
 8004ac2:	2800      	cmp	r0, #0
 8004ac4:	d0f5      	beq.n	8004ab2 <igmpHostStateChangeEvent+0x58>
               if(context->compatibilityMode <= IGMP_VERSION_2)
 8004ac6:	793b      	ldrb	r3, [r7, #4]
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d902      	bls.n	8004ad2 <igmpHostStateChangeEvent+0x78>
                  group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
 8004acc:	2303      	movs	r3, #3
 8004ace:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 8004ad0:	e7d3      	b.n	8004a7a <igmpHostStateChangeEvent+0x20>
                  igmpHostSendMembershipReport(context, group->addr);
 8004ad2:	6861      	ldr	r1, [r4, #4]
 8004ad4:	4638      	mov	r0, r7
 8004ad6:	f000 f87f 	bl	8004bd8 <igmpHostSendMembershipReport>
                  netStartTimer(&group->timer, IGMP_UNSOLICITED_REPORT_INTERVAL);
 8004ada:	f242 7110 	movw	r1, #10000	@ 0x2710
 8004ade:	f104 0010 	add.w	r0, r4, #16
 8004ae2:	f007 feeb 	bl	800c8bc <netStartTimer>
                  group->flag = TRUE;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	60a3      	str	r3, [r4, #8]
                  group->state = IGMP_HOST_GROUP_STATE_DELAYING_MEMBER;
 8004aea:	2302      	movs	r3, #2
 8004aec:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 8004aee:	e7c4      	b.n	8004a7a <igmpHostStateChangeEvent+0x20>
 8004af0:	2800      	cmp	r0, #0
 8004af2:	d1c2      	bne.n	8004a7a <igmpHostStateChangeEvent+0x20>
 8004af4:	e7d1      	b.n	8004a9a <igmpHostStateChangeEvent+0x40>
         !ipv4CompareSrcAddrLists(&group->filter, newFilter))
 8004af6:	4629      	mov	r1, r5
 8004af8:	f104 0020 	add.w	r0, r4, #32
 8004afc:	f001 feed 	bl	80068da <ipv4CompareSrcAddrLists>
      if(group->filterMode != newFilterMode ||
 8004b00:	2800      	cmp	r0, #0
 8004b02:	d1ca      	bne.n	8004a9a <igmpHostStateChangeEvent+0x40>
 8004b04:	e7bc      	b.n	8004a80 <igmpHostStateChangeEvent+0x26>
               group->filter.numSources == 0)
 8004b06:	6a23      	ldr	r3, [r4, #32]
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1c6      	bne.n	8004a9a <igmpHostStateChangeEvent+0x40>
               if(group->flag)
 8004b0c:	68a3      	ldr	r3, [r4, #8]
 8004b0e:	b91b      	cbnz	r3, 8004b18 <igmpHostStateChangeEvent+0xbe>
               igmpHostDeleteGroup(group);
 8004b10:	4620      	mov	r0, r4
 8004b12:	f000 fae3 	bl	80050dc <igmpHostDeleteGroup>
 8004b16:	e7c0      	b.n	8004a9a <igmpHostStateChangeEvent+0x40>
                  igmpHostSendLeaveGroup(context, group->addr);
 8004b18:	6861      	ldr	r1, [r4, #4]
 8004b1a:	4638      	mov	r0, r7
 8004b1c:	f000 f888 	bl	8004c30 <igmpHostSendLeaveGroup>
 8004b20:	e7f6      	b.n	8004b10 <igmpHostStateChangeEvent+0xb6>
            if(group->state == IGMP_HOST_GROUP_STATE_INIT_MEMBER)
 8004b22:	7823      	ldrb	r3, [r4, #0]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d108      	bne.n	8004b3a <igmpHostStateChangeEvent+0xe0>
               if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8004b28:	2e01      	cmp	r6, #1
 8004b2a:	d1b6      	bne.n	8004a9a <igmpHostStateChangeEvent+0x40>
                  group->filter.numSources == 0)
 8004b2c:	6a23      	ldr	r3, [r4, #32]
               if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1b3      	bne.n	8004a9a <igmpHostStateChangeEvent+0x40>
                  igmpHostDeleteGroup(group);
 8004b32:	4620      	mov	r0, r4
 8004b34:	f000 fad2 	bl	80050dc <igmpHostDeleteGroup>
 8004b38:	e7af      	b.n	8004a9a <igmpHostStateChangeEvent+0x40>
               igmpHostSendStateChangeReport(context);
 8004b3a:	4638      	mov	r0, r7
 8004b3c:	f000 f8ff 	bl	8004d3e <igmpHostSendStateChangeReport>
               if(igmpHostGetRetransmitStatus(context))
 8004b40:	4638      	mov	r0, r7
 8004b42:	f000 f8db 	bl	8004cfc <igmpHostGetRetransmitStatus>
 8004b46:	b160      	cbz	r0, 8004b62 <igmpHostStateChangeEvent+0x108>
                  delay = igmpGetRandomDelay(IGMP_V3_UNSOLICITED_REPORT_INTERVAL);
 8004b48:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004b4c:	f7ff fe5f 	bl	800480e <igmpGetRandomDelay>
 8004b50:	4601      	mov	r1, r0
                  netStartTimer(&context->stateChangeReportTimer, delay);
 8004b52:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8004b56:	f007 feb1 	bl	800c8bc <netStartTimer>
               igmpHostFlushUnusedGroups(context);
 8004b5a:	4638      	mov	r0, r7
 8004b5c:	f000 fac1 	bl	80050e2 <igmpHostFlushUnusedGroups>
}
 8004b60:	e79b      	b.n	8004a9a <igmpHostStateChangeEvent+0x40>
                  netStopTimer(&context->stateChangeReportTimer);
 8004b62:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8004b66:	f007 feb3 	bl	800c8d0 <netStopTimer>
 8004b6a:	e7f6      	b.n	8004b5a <igmpHostStateChangeEvent+0x100>

08004b6c <igmpHostLinkChangeEvent>:
 * @brief Process link state change
 * @param[in] context Pointer to the IGMP host context
 **/

void igmpHostLinkChangeEvent(IgmpHostContext *context)
{
 8004b6c:	b570      	push	{r4, r5, r6, lr}
 8004b6e:	4605      	mov	r5, r0
   uint_t i;
   IgmpHostGroup *group;

   //The default host compatibility mode is IGMPv3
   context->compatibilityMode = IGMP_VERSION_3;
 8004b70:	2303      	movs	r3, #3
 8004b72:	7103      	strb	r3, [r0, #4]

   //Stop timers
   netStopTimer(&context->igmpv1QuerierPresentTimer);
 8004b74:	3008      	adds	r0, #8
 8004b76:	f007 feab 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->igmpv2QuerierPresentTimer);
 8004b7a:	f105 0014 	add.w	r0, r5, #20
 8004b7e:	f007 fea7 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->generalQueryTimer);
 8004b82:	f105 0020 	add.w	r0, r5, #32
 8004b86:	f007 fea3 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->stateChangeReportTimer);
 8004b8a:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 8004b8e:	f007 fe9f 	bl	800c8d0 <netStopTimer>

   //Loop through multicast groups
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004b92:	2400      	movs	r4, #0
 8004b94:	e000      	b.n	8004b98 <igmpHostLinkChangeEvent+0x2c>
 8004b96:	3401      	adds	r4, #1
 8004b98:	2c03      	cmp	r4, #3
 8004b9a:	d819      	bhi.n	8004bd0 <igmpHostLinkChangeEvent+0x64>
   {
      //Point to the current group
      group = &context->groups[i];

      //Valid group?
      if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 8004b9c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004ba0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d0f4      	beq.n	8004b96 <igmpHostLinkChangeEvent+0x2a>
      {
         //Reset parameters
         group->flag = FALSE;
 8004bac:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 8004bb0:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	6433      	str	r3, [r6, #64]	@ 0x40
         group->retransmitCount = 0;
 8004bb8:	6473      	str	r3, [r6, #68]	@ 0x44
         group->allow.numSources = 0;
         group->block.numSources = 0;
         group->queriedSources.numSources = 0;
#endif
         //Stop delay timer
         netStopTimer(&group->timer);
 8004bba:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8004bbe:	0080      	lsls	r0, r0, #2
 8004bc0:	3048      	adds	r0, #72	@ 0x48
 8004bc2:	4428      	add	r0, r5
 8004bc4:	f007 fe84 	bl	800c8d0 <netStopTimer>

         //Enter the Init Member state
         group->state = IGMP_HOST_GROUP_STATE_INIT_MEMBER;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f886 3038 	strb.w	r3, [r6, #56]	@ 0x38
 8004bce:	e7e2      	b.n	8004b96 <igmpHostLinkChangeEvent+0x2a>
      }
   }

   //Delete groups in "non-existent" state
   igmpHostFlushUnusedGroups(context);
 8004bd0:	4628      	mov	r0, r5
 8004bd2:	f000 fa86 	bl	80050e2 <igmpHostFlushUnusedGroups>
}
 8004bd6:	bd70      	pop	{r4, r5, r6, pc}

08004bd8 <igmpHostSendMembershipReport>:
 * @param[in] context Pointer to the IGMP host context
 * @param[in] groupAddr IPv4 address specifying the group address
 **/

void igmpHostSendMembershipReport(IgmpHostContext *context, Ipv4Addr groupAddr)
{
 8004bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	4605      	mov	r5, r0
 8004bde:	460e      	mov	r6, r1
   size_t offset;
   NetBuffer *buffer;
   IgmpMessage *message;

   //Allocate a memory buffer to hold the IGMP message
   buffer = ipAllocBuffer(sizeof(IgmpMessage), &offset);
 8004be0:	a901      	add	r1, sp, #4
 8004be2:	2008      	movs	r0, #8
 8004be4:	f000 fce5 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 8004be8:	b1e8      	cbz	r0, 8004c26 <igmpHostSendMembershipReport+0x4e>
 8004bea:	4607      	mov	r7, r0
      return;

   //Point to the beginning of the IGMP message
   message = netBufferAt(buffer, offset, 0);
 8004bec:	2200      	movs	r2, #0
 8004bee:	9901      	ldr	r1, [sp, #4]
 8004bf0:	f007 fae2 	bl	800c1b8 <netBufferAt>
 8004bf4:	4604      	mov	r4, r0

   //The type of report is determined by the state of the interface
   if(context->compatibilityMode == IGMP_VERSION_1)
 8004bf6:	792b      	ldrb	r3, [r5, #4]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d016      	beq.n	8004c2a <igmpHostSendMembershipReport+0x52>
   {
      message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V1;
   }
   else
   {
      message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V2;
 8004bfc:	2316      	movs	r3, #22
 8004bfe:	7003      	strb	r3, [r0, #0]
   }

   //Format the Membership Report message
   message->maxRespTime = 0;
 8004c00:	2300      	movs	r3, #0
 8004c02:	7063      	strb	r3, [r4, #1]
   message->checksum = 0;
 8004c04:	70a3      	strb	r3, [r4, #2]
 8004c06:	70e3      	strb	r3, [r4, #3]
   message->groupAddr = groupAddr;
 8004c08:	6066      	str	r6, [r4, #4]

   //Message checksum calculation
   message->checksum = ipCalcChecksum(message, sizeof(IgmpMessage));
 8004c0a:	2108      	movs	r1, #8
 8004c0c:	4620      	mov	r0, r4
 8004c0e:	f000 fc41 	bl	8005494 <ipCalcChecksum>
 8004c12:	8060      	strh	r0, [r4, #2]

   //The Membership Report message is sent to the group being reported
   igmpSendMessage(context->interface, groupAddr, buffer, offset);
 8004c14:	9b01      	ldr	r3, [sp, #4]
 8004c16:	463a      	mov	r2, r7
 8004c18:	4631      	mov	r1, r6
 8004c1a:	6828      	ldr	r0, [r5, #0]
 8004c1c:	f7ff fd74 	bl	8004708 <igmpSendMessage>

   //Free previously allocated memory
   netBufferFree(buffer);
 8004c20:	4638      	mov	r0, r7
 8004c22:	f007 faa1 	bl	800c168 <netBufferFree>
}
 8004c26:	b003      	add	sp, #12
 8004c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
      message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V1;
 8004c2a:	2312      	movs	r3, #18
 8004c2c:	7003      	strb	r3, [r0, #0]
 8004c2e:	e7e7      	b.n	8004c00 <igmpHostSendMembershipReport+0x28>

08004c30 <igmpHostSendLeaveGroup>:
   NetBuffer *buffer;
   IgmpMessage *message;

   //If the interface state says the querier is running IGMPv1, this action
   //should be skipped
   if(context->compatibilityMode == IGMP_VERSION_1)
 8004c30:	7903      	ldrb	r3, [r0, #4]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d024      	beq.n	8004c80 <igmpHostSendLeaveGroup+0x50>
{
 8004c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	4604      	mov	r4, r0
 8004c3c:	460e      	mov	r6, r1
      return;

   //Allocate a memory buffer to hold the IGMP message
   buffer = ipAllocBuffer(sizeof(IgmpMessage), &offset);
 8004c3e:	a901      	add	r1, sp, #4
 8004c40:	2008      	movs	r0, #8
 8004c42:	f000 fcb6 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 8004c46:	4607      	mov	r7, r0
 8004c48:	b1c0      	cbz	r0, 8004c7c <igmpHostSendLeaveGroup+0x4c>
      return;

   //Point to the beginning of the IGMP message
   message = netBufferAt(buffer, offset, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	9901      	ldr	r1, [sp, #4]
 8004c4e:	f007 fab3 	bl	800c1b8 <netBufferAt>
 8004c52:	4605      	mov	r5, r0

   //Format the Leave Group message
   message->type = IGMP_TYPE_LEAVE_GROUP;
 8004c54:	2317      	movs	r3, #23
 8004c56:	7003      	strb	r3, [r0, #0]
   message->maxRespTime = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 8004c5c:	7083      	strb	r3, [r0, #2]
 8004c5e:	70c3      	strb	r3, [r0, #3]
   message->groupAddr = groupAddr;
 8004c60:	6046      	str	r6, [r0, #4]

   //Message checksum calculation
   message->checksum = ipCalcChecksum(message, sizeof(IgmpMessage));
 8004c62:	2108      	movs	r1, #8
 8004c64:	f000 fc16 	bl	8005494 <ipCalcChecksum>
 8004c68:	8068      	strh	r0, [r5, #2]

   //Leave Group messages are addressed to the all-routers group because other
   //group members have no need to know that a host has left the group, but it
   //does no harm to address the message to the group
   igmpSendMessage(context->interface, IGMP_ALL_ROUTERS_ADDR, buffer, offset);
 8004c6a:	9b01      	ldr	r3, [sp, #4]
 8004c6c:	463a      	mov	r2, r7
 8004c6e:	4905      	ldr	r1, [pc, #20]	@ (8004c84 <igmpHostSendLeaveGroup+0x54>)
 8004c70:	6820      	ldr	r0, [r4, #0]
 8004c72:	f7ff fd49 	bl	8004708 <igmpSendMessage>

   //Free previously allocated memory
   netBufferFree(buffer);
 8004c76:	4638      	mov	r0, r7
 8004c78:	f007 fa76 	bl	800c168 <netBufferFree>
}
 8004c7c:	b003      	add	sp, #12
 8004c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	020000e0 	.word	0x020000e0

08004c88 <igmpHostFlushReportRecords>:
 * @param[in,out] length Length of the report message, in bytes
 **/

void igmpHostFlushReportRecords(IgmpHostContext *context, NetBuffer *buffer,
   size_t offset, size_t *length)
{
 8004c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   IgmpMembershipReportV3 *message;

   //Any group records included in the message?
   if(*length > 0)
 8004c8c:	681d      	ldr	r5, [r3, #0]
 8004c8e:	b90d      	cbnz	r5, 8004c94 <igmpHostFlushReportRecords+0xc>
      message->numOfGroupRecords = 0;

      //Update the length of the message
      *length = sizeof(IgmpMembershipReportV3);
   }
}
 8004c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c94:	4607      	mov	r7, r0
 8004c96:	4688      	mov	r8, r1
 8004c98:	4616      	mov	r6, r2
 8004c9a:	461c      	mov	r4, r3
      message = netBufferAt(buffer, offset, 0);
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4631      	mov	r1, r6
 8004ca0:	4640      	mov	r0, r8
 8004ca2:	f007 fa89 	bl	800c1b8 <netBufferAt>
 8004ca6:	4605      	mov	r5, r0
      message->numOfGroupRecords = htons(message->numOfGroupRecords);
 8004ca8:	88c0      	ldrh	r0, [r0, #6]
 8004caa:	f7fb fcb7 	bl	800061c <swapInt16>
 8004cae:	80e8      	strh	r0, [r5, #6]
      message->checksum = ipCalcChecksum(message, *length);
 8004cb0:	6821      	ldr	r1, [r4, #0]
 8004cb2:	4628      	mov	r0, r5
 8004cb4:	f000 fbee 	bl	8005494 <ipCalcChecksum>
 8004cb8:	8068      	strh	r0, [r5, #2]
      netBufferSetLength(buffer, offset + *length);
 8004cba:	6821      	ldr	r1, [r4, #0]
 8004cbc:	4431      	add	r1, r6
 8004cbe:	4640      	mov	r0, r8
 8004cc0:	f007 f9e7 	bl	800c092 <netBufferSetLength>
      igmpSendMessage(context->interface, IGMP_V3_ALL_ROUTERS_ADDR, buffer,
 8004cc4:	4633      	mov	r3, r6
 8004cc6:	4642      	mov	r2, r8
 8004cc8:	4905      	ldr	r1, [pc, #20]	@ (8004ce0 <igmpHostFlushReportRecords+0x58>)
 8004cca:	6838      	ldr	r0, [r7, #0]
 8004ccc:	f7ff fd1c 	bl	8004708 <igmpSendMessage>
      message->checksum = 0;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	70ab      	strb	r3, [r5, #2]
 8004cd4:	70eb      	strb	r3, [r5, #3]
      message->numOfGroupRecords = 0;
 8004cd6:	71ab      	strb	r3, [r5, #6]
 8004cd8:	71eb      	strb	r3, [r5, #7]
      *length = sizeof(IgmpMembershipReportV3);
 8004cda:	2308      	movs	r3, #8
 8004cdc:	6023      	str	r3, [r4, #0]
}
 8004cde:	e7d7      	b.n	8004c90 <igmpHostFlushReportRecords+0x8>
 8004ce0:	160000e0 	.word	0x160000e0

08004ce4 <igmpHostMergeReports>:
   }
#endif

   //When the filter mode changes, the Filter Mode Retransmission Counter is
   //set to [Robustness Variable]
   if(newFilterMode != group->filterMode)
 8004ce4:	7f03      	ldrb	r3, [r0, #28]
 8004ce6:	428b      	cmp	r3, r1
 8004ce8:	d001      	beq.n	8004cee <igmpHostMergeReports+0xa>
   {
      group->retransmitCount = IGMP_ROBUSTNESS_VARIABLE;
 8004cea:	2302      	movs	r3, #2
 8004cec:	60c3      	str	r3, [r0, #12]
   }
}
 8004cee:	4770      	bx	lr

08004cf0 <igmpHostGetGroupRetransmitStatus>:
   {
      status = TRUE;
   }
#else
   //Retransmission in progress?
   if(group->retransmitCount > 0)
 8004cf0:	68c3      	ldr	r3, [r0, #12]
 8004cf2:	b90b      	cbnz	r3, 8004cf8 <igmpHostGetGroupRetransmitStatus+0x8>
   status = FALSE;
 8004cf4:	2000      	movs	r0, #0
 8004cf6:	4770      	bx	lr
   {
      status = TRUE;
 8004cf8:	2001      	movs	r0, #1
   }
#endif

   //Return TRUE if additional retransmissions are needed
   return status;
}
 8004cfa:	4770      	bx	lr

08004cfc <igmpHostGetRetransmitStatus>:
{
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4605      	mov	r5, r0
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004d00:	2400      	movs	r4, #0
 8004d02:	e000      	b.n	8004d06 <igmpHostGetRetransmitStatus+0xa>
 8004d04:	3401      	adds	r4, #1
 8004d06:	2c03      	cmp	r4, #3
 8004d08:	d812      	bhi.n	8004d30 <igmpHostGetRetransmitStatus+0x34>
      group = &context->groups[i];
 8004d0a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	3338      	adds	r3, #56	@ 0x38
 8004d12:	18e8      	adds	r0, r5, r3
      if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 8004d14:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004d18:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0ef      	beq.n	8004d04 <igmpHostGetRetransmitStatus+0x8>
         if(igmpHostGetGroupRetransmitStatus(group))
 8004d24:	f7ff ffe4 	bl	8004cf0 <igmpHostGetGroupRetransmitStatus>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d0eb      	beq.n	8004d04 <igmpHostGetRetransmitStatus+0x8>
            status = TRUE;
 8004d2c:	2001      	movs	r0, #1
   return status;
 8004d2e:	e000      	b.n	8004d32 <igmpHostGetRetransmitStatus+0x36>
   status = FALSE;
 8004d30:	2000      	movs	r0, #0
}
 8004d32:	bd38      	pop	{r3, r4, r5, pc}

08004d34 <igmpHostDecGroupRetransmitCounters>:
 **/

void igmpHostDecGroupRetransmitCounters(IgmpHostGroup *group)
{
   //Filter mode change?
   if(group->retransmitCount > 0)
 8004d34:	68c3      	ldr	r3, [r0, #12]
 8004d36:	b10b      	cbz	r3, 8004d3c <igmpHostDecGroupRetransmitCounters+0x8>
   {
      //The Filter Mode Retransmission Counter is decremented by one unit after
      //the transmission of the report
      group->retransmitCount--;
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	60c3      	str	r3, [r0, #12]
            igmpHostRemoveSrcAddr(&group->block, group->block.sources[i].addr);
         }
      }
#endif
   }
}
 8004d3c:	4770      	bx	lr

08004d3e <igmpHostSendStateChangeReport>:
{
 8004d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d42:	b083      	sub	sp, #12
 8004d44:	4606      	mov	r6, r0
   buffer = ipAllocBuffer(IGMP_MAX_MSG_SIZE, &offset);
 8004d46:	4669      	mov	r1, sp
 8004d48:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004d4c:	f000 fc31 	bl	80055b2 <ipAllocBuffer>
   if(buffer == NULL)
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d071      	beq.n	8004e38 <igmpHostSendStateChangeReport+0xfa>
 8004d54:	4680      	mov	r8, r0
   message = netBufferAt(buffer, offset, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	9900      	ldr	r1, [sp, #0]
 8004d5a:	f007 fa2d 	bl	800c1b8 <netBufferAt>
 8004d5e:	4607      	mov	r7, r0
   message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V3;
 8004d60:	2322      	movs	r3, #34	@ 0x22
 8004d62:	7003      	strb	r3, [r0, #0]
   message->reserved = 0;
 8004d64:	2400      	movs	r4, #0
 8004d66:	7044      	strb	r4, [r0, #1]
   message->checksum = 0;
 8004d68:	7084      	strb	r4, [r0, #2]
 8004d6a:	70c4      	strb	r4, [r0, #3]
   message->flags = 0;
 8004d6c:	7104      	strb	r4, [r0, #4]
 8004d6e:	7144      	strb	r4, [r0, #5]
   message->numOfGroupRecords = 0;
 8004d70:	7184      	strb	r4, [r0, #6]
 8004d72:	71c4      	strb	r4, [r0, #7]
   length = sizeof(IgmpMembershipReportV3);
 8004d74:	2308      	movs	r3, #8
 8004d76:	9301      	str	r3, [sp, #4]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004d78:	e023      	b.n	8004dc2 <igmpHostSendStateChangeReport+0x84>
               igmpHostFlushReportRecords(context, buffer, offset, &length);
 8004d7a:	ab01      	add	r3, sp, #4
 8004d7c:	9a00      	ldr	r2, [sp, #0]
 8004d7e:	4641      	mov	r1, r8
 8004d80:	4630      	mov	r0, r6
 8004d82:	f7ff ff81 	bl	8004c88 <igmpHostFlushReportRecords>
 8004d86:	e040      	b.n	8004e0a <igmpHostSendStateChangeReport+0xcc>
               record->recordType = IGMP_GROUP_RECORD_TYPE_TO_IN;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	54bb      	strb	r3, [r7, r2]
            record->auxDataLen = 0;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	f88b 3001 	strb.w	r3, [fp, #1]
            record->numOfSources = htons(group->filter.numSources);
 8004d92:	eb04 09c4 	add.w	r9, r4, r4, lsl #3
 8004d96:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 8004d9a:	f8b9 0058 	ldrh.w	r0, [r9, #88]	@ 0x58
 8004d9e:	f7fb fc3d 	bl	800061c <swapInt16>
 8004da2:	f8ab 0002 	strh.w	r0, [fp, #2]
            record->multicastAddr = group->addr;
 8004da6:	f8d9 303c 	ldr.w	r3, [r9, #60]	@ 0x3c
 8004daa:	f8cb 3004 	str.w	r3, [fp, #4]
            message->numOfGroupRecords++;
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	3301      	adds	r3, #1
 8004db2:	80fb      	strh	r3, [r7, #6]
            length += n;
 8004db4:	9b01      	ldr	r3, [sp, #4]
 8004db6:	4453      	add	r3, sl
 8004db8:	9301      	str	r3, [sp, #4]
         igmpHostDecGroupRetransmitCounters(group);
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f7ff ffba 	bl	8004d34 <igmpHostDecGroupRetransmitCounters>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004dc0:	3401      	adds	r4, #1
 8004dc2:	2c03      	cmp	r4, #3
 8004dc4:	d82f      	bhi.n	8004e26 <igmpHostSendStateChangeReport+0xe8>
      group = &context->groups[i];
 8004dc6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	3338      	adds	r3, #56	@ 0x38
 8004dce:	18f5      	adds	r5, r6, r3
      if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 8004dd0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004dd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004dd8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ef      	beq.n	8004dc0 <igmpHostSendStateChangeReport+0x82>
         if(group->retransmitCount > 0)
 8004de0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004de4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0e5      	beq.n	8004dba <igmpHostSendStateChangeReport+0x7c>
            n = sizeof(IgmpGroupRecord) + group->filter.numSources *
 8004dee:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004df2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004df6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df8:	3302      	adds	r3, #2
 8004dfa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
            if((length + n) > IGMP_MAX_MSG_SIZE)
 8004dfe:	9a01      	ldr	r2, [sp, #4]
 8004e00:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004e04:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8004e08:	d8b7      	bhi.n	8004d7a <igmpHostSendStateChangeReport+0x3c>
            record = (IgmpGroupRecord *) ((uint8_t *) message + length);
 8004e0a:	9a01      	ldr	r2, [sp, #4]
 8004e0c:	eb07 0b02 	add.w	fp, r7, r2
            if(group->filterMode == IP_FILTER_MODE_INCLUDE)
 8004e10:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004e14:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004e18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004e1c:	2b01      	cmp	r3, #1
 8004e1e:	d0b3      	beq.n	8004d88 <igmpHostSendStateChangeReport+0x4a>
               record->recordType = IGMP_GROUP_RECORD_TYPE_TO_EX;
 8004e20:	2304      	movs	r3, #4
 8004e22:	54bb      	strb	r3, [r7, r2]
 8004e24:	e7b2      	b.n	8004d8c <igmpHostSendStateChangeReport+0x4e>
   igmpHostFlushReportRecords(context, buffer, offset, &length);
 8004e26:	ab01      	add	r3, sp, #4
 8004e28:	9a00      	ldr	r2, [sp, #0]
 8004e2a:	4641      	mov	r1, r8
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7ff ff2b 	bl	8004c88 <igmpHostFlushReportRecords>
   netBufferFree(buffer);
 8004e32:	4640      	mov	r0, r8
 8004e34:	f007 f998 	bl	800c168 <netBufferFree>
}
 8004e38:	b003      	add	sp, #12
 8004e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004e3e <igmpHostCreateGroup>:
 * @return Pointer to the newly created multicast group
 **/

IgmpHostGroup *igmpHostCreateGroup(IgmpHostContext *context,
   Ipv4Addr groupAddr)
{
 8004e3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

   //Initialize pointer
   group = NULL;

   //Valid multicast address?
   if(ipv4IsMulticastAddr(groupAddr) && groupAddr != IGMP_ALL_SYSTEMS_ADDR)
 8004e42:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
 8004e46:	2be0      	cmp	r3, #224	@ 0xe0
 8004e48:	d138      	bne.n	8004ebc <igmpHostCreateGroup+0x7e>
 8004e4a:	4605      	mov	r5, r0
 8004e4c:	460e      	mov	r6, r1
 8004e4e:	f103 7380 	add.w	r3, r3, #16777216	@ 0x1000000
 8004e52:	4299      	cmp	r1, r3
 8004e54:	d00b      	beq.n	8004e6e <igmpHostCreateGroup+0x30>
   {
      //Loop through multicast groups
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004e56:	2400      	movs	r4, #0
 8004e58:	2c03      	cmp	r4, #3
 8004e5a:	d82d      	bhi.n	8004eb8 <igmpHostCreateGroup+0x7a>
      {
         //Check whether the entry is available
         if(context->groups[i].state == IGMP_HOST_GROUP_STATE_NON_MEMBER)
 8004e5c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004e60:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004e64:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004e68:	b11b      	cbz	r3, 8004e72 <igmpHostCreateGroup+0x34>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004e6a:	3401      	adds	r4, #1
 8004e6c:	e7f4      	b.n	8004e58 <igmpHostCreateGroup+0x1a>
   group = NULL;
 8004e6e:	2700      	movs	r7, #0
 8004e70:	e025      	b.n	8004ebe <igmpHostCreateGroup+0x80>
            //Debug message
            TRACE_DEBUG("Creating IGMP group (%s)...\r\n",
               ipv4AddrToString(groupAddr, NULL));

            //Point to the current group
            group = &context->groups[i];
 8004e72:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8004e76:	eb04 07c4 	add.w	r7, r4, r4, lsl #3
 8004e7a:	00bf      	lsls	r7, r7, #2
 8004e7c:	3738      	adds	r7, #56	@ 0x38
 8004e7e:	442f      	add	r7, r5

            //Initialize group
            osMemset(group, 0, sizeof(IgmpHostGroup));
 8004e80:	2224      	movs	r2, #36	@ 0x24
 8004e82:	2100      	movs	r1, #0
 8004e84:	4638      	mov	r0, r7
 8004e86:	f00f fefd 	bl	8014c84 <memset>

            //Switch to the Init Member state
            group->state = IGMP_HOST_GROUP_STATE_INIT_MEMBER;
 8004e8a:	eb08 0904 	add.w	r9, r8, r4
 8004e8e:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8004e92:	f04f 0a01 	mov.w	sl, #1
 8004e96:	f889 a038 	strb.w	sl, [r9, #56]	@ 0x38
            //Save the multicast group address
            group->addr = groupAddr;
 8004e9a:	f8c9 603c 	str.w	r6, [r9, #60]	@ 0x3c

            //A per-group and interface timer is used for scheduling responses to
            //Group-Specific and Group-and-Source-Specific Queries
            netStopTimer(&group->timer);
 8004e9e:	eb08 0004 	add.w	r0, r8, r4
 8004ea2:	0080      	lsls	r0, r0, #2
 8004ea4:	3048      	adds	r0, #72	@ 0x48
 8004ea6:	4428      	add	r0, r5
 8004ea8:	f007 fd12 	bl	800c8d0 <netStopTimer>

            //The "non-existent" state is considered to have a filter mode of
            //INCLUDE and an empty source list
            group->filterMode = IP_FILTER_MODE_INCLUDE;
 8004eac:	f889 a054 	strb.w	sl, [r9, #84]	@ 0x54
            group->filter.numSources = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f8c9 3058 	str.w	r3, [r9, #88]	@ 0x58

            //We are done
            break;
 8004eb6:	e002      	b.n	8004ebe <igmpHostCreateGroup+0x80>
   group = NULL;
 8004eb8:	2700      	movs	r7, #0
 8004eba:	e000      	b.n	8004ebe <igmpHostCreateGroup+0x80>
 8004ebc:	2700      	movs	r7, #0
      }
   }

   //Return a pointer to the newly created multicast group
   return group;
}
 8004ebe:	4638      	mov	r0, r7
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004ec4 <igmpHostFindGroup>:

   //Initialize pointer
   group = NULL;

   //Loop through multicast groups
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <igmpHostFindGroup+0x6>
 8004ec8:	3301      	adds	r3, #1
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d814      	bhi.n	8004ef8 <igmpHostFindGroup+0x34>
   {
      //Matching group?
      if(context->groups[i].state != IGMP_HOST_GROUP_STATE_NON_MEMBER &&
 8004ece:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004ed2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ed6:	f892 2038 	ldrb.w	r2, [r2, #56]	@ 0x38
 8004eda:	2a00      	cmp	r2, #0
 8004edc:	d0f4      	beq.n	8004ec8 <igmpHostFindGroup+0x4>
         context->groups[i].addr == groupAddr)
 8004ede:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 8004ee2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ee6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
      if(context->groups[i].state != IGMP_HOST_GROUP_STATE_NON_MEMBER &&
 8004ee8:	428a      	cmp	r2, r1
 8004eea:	d1ed      	bne.n	8004ec8 <igmpHostFindGroup+0x4>
      {
         //Point to the current group
         group = &context->groups[i];
 8004eec:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	3338      	adds	r3, #56	@ 0x38
 8004ef4:	4418      	add	r0, r3
         break;
 8004ef6:	4770      	bx	lr
   group = NULL;
 8004ef8:	2000      	movs	r0, #0
      }
   }

   //Return a pointer to the matching multicast group
   return group;
}
 8004efa:	4770      	bx	lr

08004efc <igmpHostProcessMembershipReport>:
{
 8004efc:	b508      	push	{r3, lr}
   if(context->compatibilityMode > IGMP_VERSION_2)
 8004efe:	7903      	ldrb	r3, [r0, #4]
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d80a      	bhi.n	8004f1a <igmpHostProcessMembershipReport+0x1e>
   if(!ipv4IsMulticastAddr(message->groupAddr))
 8004f04:	6851      	ldr	r1, [r2, #4]
 8004f06:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
 8004f0a:	2be0      	cmp	r3, #224	@ 0xe0
 8004f0c:	d105      	bne.n	8004f1a <igmpHostProcessMembershipReport+0x1e>
   group = igmpHostFindGroup(context, message->groupAddr);
 8004f0e:	f7ff ffd9 	bl	8004ec4 <igmpHostFindGroup>
   if(group != NULL)
 8004f12:	b110      	cbz	r0, 8004f1a <igmpHostProcessMembershipReport+0x1e>
      if(group->state == IGMP_HOST_GROUP_STATE_DELAYING_MEMBER)
 8004f14:	7802      	ldrb	r2, [r0, #0]
 8004f16:	2a02      	cmp	r2, #2
 8004f18:	d000      	beq.n	8004f1c <igmpHostProcessMembershipReport+0x20>
}
 8004f1a:	bd08      	pop	{r3, pc}
         group->flag = FALSE;
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	6082      	str	r2, [r0, #8]
         group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
 8004f20:	2203      	movs	r2, #3
 8004f22:	7002      	strb	r2, [r0, #0]
 8004f24:	e7f9      	b.n	8004f1a <igmpHostProcessMembershipReport+0x1e>

08004f26 <igmpHostMatchGroup>:

   //Initialize flag
   match = FALSE;

   //Valid group?
   if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 8004f26:	7803      	ldrb	r3, [r0, #0]
 8004f28:	b12b      	cbz	r3, 8004f36 <igmpHostMatchGroup+0x10>
   {
      //Matching multicast address?
      if(multicastAddr == IPV4_UNSPECIFIED_ADDR ||
 8004f2a:	b131      	cbz	r1, 8004f3a <igmpHostMatchGroup+0x14>
         multicastAddr == group->addr)
 8004f2c:	6843      	ldr	r3, [r0, #4]
      if(multicastAddr == IPV4_UNSPECIFIED_ADDR ||
 8004f2e:	428b      	cmp	r3, r1
 8004f30:	d005      	beq.n	8004f3e <igmpHostMatchGroup+0x18>
   match = FALSE;
 8004f32:	2000      	movs	r0, #0
 8004f34:	4770      	bx	lr
 8004f36:	2000      	movs	r0, #0
 8004f38:	4770      	bx	lr
      {
         match = TRUE;
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	4770      	bx	lr
 8004f3e:	2001      	movs	r0, #1
      }
   }

   //Return TRUE if the group matches the specified multicast address
   return match;
}
 8004f40:	4770      	bx	lr

08004f42 <igmpHostSendCurrentStateReport>:
{
 8004f42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	4606      	mov	r6, r0
 8004f4a:	460f      	mov	r7, r1
   buffer = ipAllocBuffer(IGMP_MAX_MSG_SIZE, &offset);
 8004f4c:	4669      	mov	r1, sp
 8004f4e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8004f52:	f000 fb2e 	bl	80055b2 <ipAllocBuffer>
   if(buffer == NULL)
 8004f56:	2800      	cmp	r0, #0
 8004f58:	d050      	beq.n	8004ffc <igmpHostSendCurrentStateReport+0xba>
 8004f5a:	4680      	mov	r8, r0
   message = netBufferAt(buffer, offset, 0);
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	9900      	ldr	r1, [sp, #0]
 8004f60:	f007 f92a 	bl	800c1b8 <netBufferAt>
 8004f64:	4605      	mov	r5, r0
   message->type = IGMP_TYPE_MEMBERSHIP_REPORT_V3;
 8004f66:	2322      	movs	r3, #34	@ 0x22
 8004f68:	7003      	strb	r3, [r0, #0]
   message->reserved = 0;
 8004f6a:	2400      	movs	r4, #0
 8004f6c:	7044      	strb	r4, [r0, #1]
   message->checksum = 0;
 8004f6e:	7084      	strb	r4, [r0, #2]
 8004f70:	70c4      	strb	r4, [r0, #3]
   message->flags = 0;
 8004f72:	7104      	strb	r4, [r0, #4]
 8004f74:	7144      	strb	r4, [r0, #5]
   message->numOfGroupRecords = 0;
 8004f76:	7184      	strb	r4, [r0, #6]
 8004f78:	71c4      	strb	r4, [r0, #7]
   length = sizeof(IgmpMembershipReportV3);
 8004f7a:	2308      	movs	r3, #8
 8004f7c:	9301      	str	r3, [sp, #4]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004f7e:	e014      	b.n	8004faa <igmpHostSendCurrentStateReport+0x68>
            record = (IgmpGroupRecord *) ((uint8_t *) message + length);
 8004f80:	9a01      	ldr	r2, [sp, #4]
 8004f82:	18ab      	adds	r3, r5, r2
            record->recordType = IGMP_GROUP_RECORD_TYPE_IS_EX;
 8004f84:	2102      	movs	r1, #2
 8004f86:	54a9      	strb	r1, [r5, r2]
            record->auxDataLen = 0;
 8004f88:	2200      	movs	r2, #0
 8004f8a:	705a      	strb	r2, [r3, #1]
            record->numOfSources = HTONS(0);
 8004f8c:	709a      	strb	r2, [r3, #2]
 8004f8e:	70da      	strb	r2, [r3, #3]
            record->multicastAddr = group->addr;
 8004f90:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8004f94:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8004f98:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004f9a:	605a      	str	r2, [r3, #4]
            message->numOfGroupRecords++;
 8004f9c:	88eb      	ldrh	r3, [r5, #6]
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	80eb      	strh	r3, [r5, #6]
            length += n;
 8004fa2:	9b01      	ldr	r3, [sp, #4]
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	9301      	str	r3, [sp, #4]
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8004fa8:	3401      	adds	r4, #1
 8004faa:	2c03      	cmp	r4, #3
 8004fac:	d81d      	bhi.n	8004fea <igmpHostSendCurrentStateReport+0xa8>
      group = &context->groups[i];
 8004fae:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	3338      	adds	r3, #56	@ 0x38
      if(igmpHostMatchGroup(group, groupAddr))
 8004fb6:	4639      	mov	r1, r7
 8004fb8:	18f0      	adds	r0, r6, r3
 8004fba:	f7ff ffb4 	bl	8004f26 <igmpHostMatchGroup>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d0f2      	beq.n	8004fa8 <igmpHostSendCurrentStateReport+0x66>
         if(group->filterMode == IP_FILTER_MODE_EXCLUDE)
 8004fc2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8004fc6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004fca:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1ea      	bne.n	8004fa8 <igmpHostSendCurrentStateReport+0x66>
            if((length + n) > IGMP_MAX_MSG_SIZE)
 8004fd2:	9b01      	ldr	r3, [sp, #4]
 8004fd4:	3308      	adds	r3, #8
 8004fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004fda:	d9d1      	bls.n	8004f80 <igmpHostSendCurrentStateReport+0x3e>
               igmpHostFlushReportRecords(context, buffer, offset, &length);
 8004fdc:	ab01      	add	r3, sp, #4
 8004fde:	9a00      	ldr	r2, [sp, #0]
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff fe50 	bl	8004c88 <igmpHostFlushReportRecords>
 8004fe8:	e7ca      	b.n	8004f80 <igmpHostSendCurrentStateReport+0x3e>
   igmpHostFlushReportRecords(context, buffer, offset, &length);
 8004fea:	ab01      	add	r3, sp, #4
 8004fec:	9a00      	ldr	r2, [sp, #0]
 8004fee:	4641      	mov	r1, r8
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	f7ff fe49 	bl	8004c88 <igmpHostFlushReportRecords>
   netBufferFree(buffer);
 8004ff6:	4640      	mov	r0, r8
 8004ff8:	f007 f8b6 	bl	800c168 <netBufferFree>
}
 8004ffc:	b002      	add	sp, #8
 8004ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005004 <igmpHostProcessMembershipQueryV3>:
{
 8005004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005008:	4615      	mov	r5, r2
   if(context->compatibilityMode < IGMP_VERSION_3)
 800500a:	7902      	ldrb	r2, [r0, #4]
 800500c:	2a02      	cmp	r2, #2
 800500e:	d93a      	bls.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
 8005010:	4604      	mov	r4, r0
 8005012:	461e      	mov	r6, r3
   if(length < sizeof(IgmpMembershipQueryV3))
 8005014:	2b0b      	cmp	r3, #11
 8005016:	d936      	bls.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
   if(message->groupAddr != IPV4_UNSPECIFIED_ADDR &&
 8005018:	686b      	ldr	r3, [r5, #4]
 800501a:	b11b      	cbz	r3, 8005024 <igmpHostProcessMembershipQueryV3+0x20>
      !ipv4IsMulticastAddr(message->groupAddr))
 800501c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
   if(message->groupAddr != IPV4_UNSPECIFIED_ADDR &&
 8005020:	2ae0      	cmp	r2, #224	@ 0xe0
 8005022:	d130      	bne.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
   if(message->groupAddr == IPV4_UNSPECIFIED_ADDR &&
 8005024:	b91b      	cbnz	r3, 800502e <igmpHostProcessMembershipQueryV3+0x2a>
      pseudoHeader->destAddr != IGMP_ALL_SYSTEMS_ADDR)
 8005026:	684a      	ldr	r2, [r1, #4]
   if(message->groupAddr == IPV4_UNSPECIFIED_ADDR &&
 8005028:	4b2b      	ldr	r3, [pc, #172]	@ (80050d8 <igmpHostProcessMembershipQueryV3+0xd4>)
 800502a:	429a      	cmp	r2, r3
 800502c:	d12b      	bne.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
   n = ntohs(message->numOfSources);
 800502e:	8968      	ldrh	r0, [r5, #10]
 8005030:	f7fb faf4 	bl	800061c <swapInt16>
   if(length < (sizeof(IgmpMembershipQueryV3) + n * sizeof(Ipv4Addr)))
 8005034:	3003      	adds	r0, #3
 8005036:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 800503a:	d324      	bcc.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
   if(message->maxRespCode < 128)
 800503c:	7868      	ldrb	r0, [r5, #1]
 800503e:	f995 3001 	ldrsb.w	r3, [r5, #1]
 8005042:	2b00      	cmp	r3, #0
 8005044:	db0f      	blt.n	8005066 <igmpHostProcessMembershipQueryV3+0x62>
      maxRespTime = message->maxRespCode * 100;
 8005046:	2364      	movs	r3, #100	@ 0x64
 8005048:	fb03 f000 	mul.w	r0, r3, r0
   delay = igmpGetRandomDelay(maxRespTime);
 800504c:	f7ff fbdf 	bl	800480e <igmpGetRandomDelay>
 8005050:	4680      	mov	r8, r0
   if(netTimerRunning(&context->generalQueryTimer) &&
 8005052:	f104 0620 	add.w	r6, r4, #32
 8005056:	4630      	mov	r0, r6
 8005058:	f007 fc3d 	bl	800c8d6 <netTimerRunning>
 800505c:	b948      	cbnz	r0, 8005072 <igmpHostProcessMembershipQueryV3+0x6e>
   else if(message->groupAddr == IPV4_UNSPECIFIED_ADDR)
 800505e:	686b      	ldr	r3, [r5, #4]
 8005060:	b16b      	cbz	r3, 800507e <igmpHostProcessMembershipQueryV3+0x7a>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8005062:	2600      	movs	r6, #0
 8005064:	e017      	b.n	8005096 <igmpHostProcessMembershipQueryV3+0x92>
      maxRespTime = igmpDecodeFloatingPointValue(message->maxRespCode) * 100;
 8005066:	f7ff fbdd 	bl	8004824 <igmpDecodeFloatingPointValue>
 800506a:	2364      	movs	r3, #100	@ 0x64
 800506c:	fb03 f000 	mul.w	r0, r3, r0
 8005070:	e7ec      	b.n	800504c <igmpHostProcessMembershipQueryV3+0x48>
      netGetRemainingTime(&context->generalQueryTimer) < delay)
 8005072:	4630      	mov	r0, r6
 8005074:	f007 fc41 	bl	800c8fa <netGetRemainingTime>
   if(netTimerRunning(&context->generalQueryTimer) &&
 8005078:	4540      	cmp	r0, r8
 800507a:	d304      	bcc.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
 800507c:	e7ef      	b.n	800505e <igmpHostProcessMembershipQueryV3+0x5a>
      netStartTimer(&context->generalQueryTimer, delay);
 800507e:	4641      	mov	r1, r8
 8005080:	4630      	mov	r0, r6
 8005082:	f007 fc1b 	bl	800c8bc <netStartTimer>
}
 8005086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               if(delay < netGetRemainingTime(&group->timer))
 800508a:	4638      	mov	r0, r7
 800508c:	f007 fc35 	bl	800c8fa <netGetRemainingTime>
 8005090:	4540      	cmp	r0, r8
 8005092:	d81b      	bhi.n	80050cc <igmpHostProcessMembershipQueryV3+0xc8>
      for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8005094:	3601      	adds	r6, #1
 8005096:	2e03      	cmp	r6, #3
 8005098:	d8f5      	bhi.n	8005086 <igmpHostProcessMembershipQueryV3+0x82>
         group = &context->groups[i];
 800509a:	eb06 00c6 	add.w	r0, r6, r6, lsl #3
 800509e:	0080      	lsls	r0, r0, #2
 80050a0:	3038      	adds	r0, #56	@ 0x38
         if(igmpHostMatchGroup(group, message->groupAddr))
 80050a2:	6869      	ldr	r1, [r5, #4]
 80050a4:	4420      	add	r0, r4
 80050a6:	f7ff ff3e 	bl	8004f26 <igmpHostMatchGroup>
 80050aa:	2800      	cmp	r0, #0
 80050ac:	d0f2      	beq.n	8005094 <igmpHostProcessMembershipQueryV3+0x90>
            if(!netTimerRunning(&group->timer))
 80050ae:	eb06 07c6 	add.w	r7, r6, r6, lsl #3
 80050b2:	00bf      	lsls	r7, r7, #2
 80050b4:	3748      	adds	r7, #72	@ 0x48
 80050b6:	4427      	add	r7, r4
 80050b8:	4638      	mov	r0, r7
 80050ba:	f007 fc0c 	bl	800c8d6 <netTimerRunning>
 80050be:	2800      	cmp	r0, #0
 80050c0:	d1e3      	bne.n	800508a <igmpHostProcessMembershipQueryV3+0x86>
               netStartTimer(&group->timer, delay);
 80050c2:	4641      	mov	r1, r8
 80050c4:	4638      	mov	r0, r7
 80050c6:	f007 fbf9 	bl	800c8bc <netStartTimer>
 80050ca:	e7e3      	b.n	8005094 <igmpHostProcessMembershipQueryV3+0x90>
                  netStartTimer(&group->timer, delay);
 80050cc:	4641      	mov	r1, r8
 80050ce:	4638      	mov	r0, r7
 80050d0:	f007 fbf4 	bl	800c8bc <netStartTimer>
 80050d4:	e7de      	b.n	8005094 <igmpHostProcessMembershipQueryV3+0x90>
 80050d6:	bf00      	nop
 80050d8:	010000e0 	.word	0x010000e0

080050dc <igmpHostDeleteGroup>:
   //Debug message
   TRACE_DEBUG("Deleting IGMP group (%s)...\r\n",
      ipv4AddrToString(group->addr, NULL));

   //Groups in Non-Member state require no storage in the host
   group->state = IGMP_HOST_GROUP_STATE_NON_MEMBER;
 80050dc:	2300      	movs	r3, #0
 80050de:	7003      	strb	r3, [r0, #0]
}
 80050e0:	4770      	bx	lr

080050e2 <igmpHostFlushUnusedGroups>:
 * @brief Delete groups in "non-existent" state
 * @param[in] context Pointer to the IGMP host context
 **/

void igmpHostFlushUnusedGroups(IgmpHostContext *context)
{
 80050e2:	b570      	push	{r4, r5, r6, lr}
 80050e4:	4606      	mov	r6, r0
   uint_t i;
   IgmpHostGroup *group;

   //Loop through multicast groups
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80050e6:	2400      	movs	r4, #0
 80050e8:	e000      	b.n	80050ec <igmpHostFlushUnusedGroups+0xa>
 80050ea:	3401      	adds	r4, #1
 80050ec:	2c03      	cmp	r4, #3
 80050ee:	d824      	bhi.n	800513a <igmpHostFlushUnusedGroups+0x58>
   {
      //Point to the current group
      group = &context->groups[i];
 80050f0:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	3338      	adds	r3, #56	@ 0x38
 80050f8:	18f5      	adds	r5, r6, r3

      //Valid group?
      if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 80050fa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 80050fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005102:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005106:	2b00      	cmp	r3, #0
 8005108:	d0ef      	beq.n	80050ea <igmpHostFlushUnusedGroups+0x8>
      {
         //Retransmission state needs to be maintained until [Robustness
         //Variable] State-Change reports have been sent by the host
         if(!igmpHostGetGroupRetransmitStatus(group))
 800510a:	4628      	mov	r0, r5
 800510c:	f7ff fdf0 	bl	8004cf0 <igmpHostGetGroupRetransmitStatus>
 8005110:	2800      	cmp	r0, #0
 8005112:	d1ea      	bne.n	80050ea <igmpHostFlushUnusedGroups+0x8>
         {
            //The "non-existent" state is considered to have a filter mode of
            //INCLUDE and an empty source list
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8005114:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8005118:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800511c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8005120:	2b01      	cmp	r3, #1
 8005122:	d1e2      	bne.n	80050ea <igmpHostFlushUnusedGroups+0x8>
               group->filter.numSources == 0)
 8005124:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8005128:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800512c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 800512e:	2b00      	cmp	r3, #0
 8005130:	d1db      	bne.n	80050ea <igmpHostFlushUnusedGroups+0x8>
            {
               //Delete the group
               igmpHostDeleteGroup(group);
 8005132:	4628      	mov	r0, r5
 8005134:	f7ff ffd2 	bl	80050dc <igmpHostDeleteGroup>
 8005138:	e7d7      	b.n	80050ea <igmpHostFlushUnusedGroups+0x8>
            }
         }
      }
   }
}
 800513a:	bd70      	pop	{r4, r5, r6, pc}

0800513c <igmpHostChangeCompatibilityMode>:
{
 800513c:	b570      	push	{r4, r5, r6, lr}
 800513e:	4605      	mov	r5, r0
   context->compatibilityMode = compatibilityMode;
 8005140:	7101      	strb	r1, [r0, #4]
   netStopTimer(&context->generalQueryTimer);
 8005142:	3020      	adds	r0, #32
 8005144:	f007 fbc4 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->stateChangeReportTimer);
 8005148:	f105 002c 	add.w	r0, r5, #44	@ 0x2c
 800514c:	f007 fbc0 	bl	800c8d0 <netStopTimer>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8005150:	2400      	movs	r4, #0
 8005152:	e000      	b.n	8005156 <igmpHostChangeCompatibilityMode+0x1a>
 8005154:	3401      	adds	r4, #1
 8005156:	2c03      	cmp	r4, #3
 8005158:	d818      	bhi.n	800518c <igmpHostChangeCompatibilityMode+0x50>
      if(group->state != IGMP_HOST_GROUP_STATE_NON_MEMBER)
 800515a:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 800515e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005162:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0f4      	beq.n	8005154 <igmpHostChangeCompatibilityMode+0x18>
         group->retransmitCount = 0;
 800516a:	eb04 06c4 	add.w	r6, r4, r4, lsl #3
 800516e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8005172:	2300      	movs	r3, #0
 8005174:	6473      	str	r3, [r6, #68]	@ 0x44
         netStopTimer(&group->timer);
 8005176:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 800517a:	0080      	lsls	r0, r0, #2
 800517c:	3048      	adds	r0, #72	@ 0x48
 800517e:	4428      	add	r0, r5
 8005180:	f007 fba6 	bl	800c8d0 <netStopTimer>
         group->state = IGMP_HOST_GROUP_STATE_IDLE_MEMBER;
 8005184:	2303      	movs	r3, #3
 8005186:	f886 3038 	strb.w	r3, [r6, #56]	@ 0x38
 800518a:	e7e3      	b.n	8005154 <igmpHostChangeCompatibilityMode+0x18>
   igmpHostFlushUnusedGroups(context);
 800518c:	4628      	mov	r0, r5
 800518e:	f7ff ffa8 	bl	80050e2 <igmpHostFlushUnusedGroups>
}
 8005192:	bd70      	pop	{r4, r5, r6, pc}

08005194 <igmpHostProcessMembershipQuery>:
{
 8005194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	4605      	mov	r5, r0
 800519a:	4616      	mov	r6, r2
   if(message->groupAddr != IPV4_UNSPECIFIED_ADDR &&
 800519c:	6853      	ldr	r3, [r2, #4]
 800519e:	b11b      	cbz	r3, 80051a8 <igmpHostProcessMembershipQuery+0x14>
      !ipv4IsMulticastAddr(message->groupAddr))
 80051a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
   if(message->groupAddr != IPV4_UNSPECIFIED_ADDR &&
 80051a4:	2ae0      	cmp	r2, #224	@ 0xe0
 80051a6:	d16a      	bne.n	800527e <igmpHostProcessMembershipQuery+0xea>
   if(message->groupAddr == IPV4_UNSPECIFIED_ADDR &&
 80051a8:	b91b      	cbnz	r3, 80051b2 <igmpHostProcessMembershipQuery+0x1e>
      pseudoHeader->destAddr != IGMP_ALL_SYSTEMS_ADDR)
 80051aa:	684a      	ldr	r2, [r1, #4]
   if(message->groupAddr == IPV4_UNSPECIFIED_ADDR &&
 80051ac:	4b35      	ldr	r3, [pc, #212]	@ (8005284 <igmpHostProcessMembershipQuery+0xf0>)
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d165      	bne.n	800527e <igmpHostProcessMembershipQuery+0xea>
   if(message->maxRespTime == 0)
 80051b2:	7873      	ldrb	r3, [r6, #1]
 80051b4:	b98b      	cbnz	r3, 80051da <igmpHostProcessMembershipQuery+0x46>
      netStartTimer(&context->igmpv1QuerierPresentTimer,
 80051b6:	4934      	ldr	r1, [pc, #208]	@ (8005288 <igmpHostProcessMembershipQuery+0xf4>)
 80051b8:	f105 0008 	add.w	r0, r5, #8
 80051bc:	f007 fb7e 	bl	800c8bc <netStartTimer>
      if(context->compatibilityMode > IGMP_VERSION_1)
 80051c0:	792b      	ldrb	r3, [r5, #4]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d802      	bhi.n	80051cc <igmpHostProcessMembershipQuery+0x38>
      maxRespTime = IGMP_V1_MAX_RESPONSE_TIME;
 80051c6:	f242 7710 	movw	r7, #10000	@ 0x2710
 80051ca:	e012      	b.n	80051f2 <igmpHostProcessMembershipQuery+0x5e>
         igmpHostChangeCompatibilityMode(context, IGMP_VERSION_1);
 80051cc:	2101      	movs	r1, #1
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7ff ffb4 	bl	800513c <igmpHostChangeCompatibilityMode>
      maxRespTime = IGMP_V1_MAX_RESPONSE_TIME;
 80051d4:	f242 7710 	movw	r7, #10000	@ 0x2710
 80051d8:	e00b      	b.n	80051f2 <igmpHostProcessMembershipQuery+0x5e>
      netStartTimer(&context->igmpv2QuerierPresentTimer,
 80051da:	492b      	ldr	r1, [pc, #172]	@ (8005288 <igmpHostProcessMembershipQuery+0xf4>)
 80051dc:	f105 0014 	add.w	r0, r5, #20
 80051e0:	f007 fb6c 	bl	800c8bc <netStartTimer>
      if(context->compatibilityMode > IGMP_VERSION_2)
 80051e4:	792b      	ldrb	r3, [r5, #4]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d805      	bhi.n	80051f6 <igmpHostProcessMembershipQuery+0x62>
      maxRespTime = message->maxRespTime * 100;
 80051ea:	7877      	ldrb	r7, [r6, #1]
 80051ec:	2364      	movs	r3, #100	@ 0x64
 80051ee:	fb03 f707 	mul.w	r7, r3, r7
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80051f2:	2400      	movs	r4, #0
 80051f4:	e011      	b.n	800521a <igmpHostProcessMembershipQuery+0x86>
         igmpHostChangeCompatibilityMode(context, IGMP_VERSION_2);
 80051f6:	2102      	movs	r1, #2
 80051f8:	4628      	mov	r0, r5
 80051fa:	f7ff ff9f 	bl	800513c <igmpHostChangeCompatibilityMode>
 80051fe:	e7f4      	b.n	80051ea <igmpHostProcessMembershipQuery+0x56>
            if(maxRespTime < netGetRemainingTime(&group->timer))
 8005200:	eb04 08c4 	add.w	r8, r4, r4, lsl #3
 8005204:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8005208:	f108 0848 	add.w	r8, r8, #72	@ 0x48
 800520c:	44a8      	add	r8, r5
 800520e:	4640      	mov	r0, r8
 8005210:	f007 fb73 	bl	800c8fa <netGetRemainingTime>
 8005214:	42b8      	cmp	r0, r7
 8005216:	d82a      	bhi.n	800526e <igmpHostProcessMembershipQuery+0xda>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8005218:	3401      	adds	r4, #1
 800521a:	2c03      	cmp	r4, #3
 800521c:	d82f      	bhi.n	800527e <igmpHostProcessMembershipQuery+0xea>
      group = &context->groups[i];
 800521e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
 8005222:	0080      	lsls	r0, r0, #2
 8005224:	3038      	adds	r0, #56	@ 0x38
      if(igmpHostMatchGroup(group, message->groupAddr))
 8005226:	6871      	ldr	r1, [r6, #4]
 8005228:	4428      	add	r0, r5
 800522a:	f7ff fe7c 	bl	8004f26 <igmpHostMatchGroup>
 800522e:	2800      	cmp	r0, #0
 8005230:	d0f2      	beq.n	8005218 <igmpHostProcessMembershipQuery+0x84>
         if(group->state == IGMP_HOST_GROUP_STATE_DELAYING_MEMBER)
 8005232:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8005236:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800523a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800523e:	2b02      	cmp	r3, #2
 8005240:	d0de      	beq.n	8005200 <igmpHostProcessMembershipQuery+0x6c>
         else if(group->state == IGMP_HOST_GROUP_STATE_IDLE_MEMBER)
 8005242:	2b03      	cmp	r3, #3
 8005244:	d1e8      	bne.n	8005218 <igmpHostProcessMembershipQuery+0x84>
            delay = igmpGetRandomDelay(maxRespTime);
 8005246:	4638      	mov	r0, r7
 8005248:	f7ff fae1 	bl	800480e <igmpGetRandomDelay>
 800524c:	4601      	mov	r1, r0
            netStartTimer(&group->timer, delay);
 800524e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005252:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	3348      	adds	r3, #72	@ 0x48
 800525a:	18e8      	adds	r0, r5, r3
 800525c:	f007 fb2e 	bl	800c8bc <netStartTimer>
            group->state = IGMP_HOST_GROUP_STATE_DELAYING_MEMBER;
 8005260:	44a0      	add	r8, r4
 8005262:	eb05 0888 	add.w	r8, r5, r8, lsl #2
 8005266:	2302      	movs	r3, #2
 8005268:	f888 3038 	strb.w	r3, [r8, #56]	@ 0x38
 800526c:	e7d4      	b.n	8005218 <igmpHostProcessMembershipQuery+0x84>
               delay = igmpGetRandomDelay(maxRespTime);
 800526e:	4638      	mov	r0, r7
 8005270:	f7ff facd 	bl	800480e <igmpGetRandomDelay>
 8005274:	4601      	mov	r1, r0
               netStartTimer(&group->timer, delay);
 8005276:	4640      	mov	r0, r8
 8005278:	f007 fb20 	bl	800c8bc <netStartTimer>
 800527c:	e7cc      	b.n	8005218 <igmpHostProcessMembershipQuery+0x84>
}
 800527e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005282:	bf00      	nop
 8005284:	010000e0 	.word	0x010000e0
 8005288:	00061a80 	.word	0x00061a80

0800528c <igmpHostProcessMessage>:
{
 800528c:	b508      	push	{r3, lr}
   if(message->type == IGMP_TYPE_MEMBERSHIP_QUERY)
 800528e:	f892 c000 	ldrb.w	ip, [r2]
 8005292:	f1bc 0f11 	cmp.w	ip, #17
 8005296:	d006      	beq.n	80052a6 <igmpHostProcessMessage+0x1a>
   else if(message->type == IGMP_TYPE_MEMBERSHIP_REPORT_V1 ||
 8005298:	f1bc 0f16 	cmp.w	ip, #22
 800529c:	bf18      	it	ne
 800529e:	f1bc 0f12 	cmpne.w	ip, #18
 80052a2:	d00a      	beq.n	80052ba <igmpHostProcessMessage+0x2e>
}
 80052a4:	bd08      	pop	{r3, pc}
      if(length == sizeof(IgmpMessage))
 80052a6:	2b08      	cmp	r3, #8
 80052a8:	d004      	beq.n	80052b4 <igmpHostProcessMessage+0x28>
      else if(length >= sizeof(IgmpMembershipQueryV3))
 80052aa:	2b0b      	cmp	r3, #11
 80052ac:	d9fa      	bls.n	80052a4 <igmpHostProcessMessage+0x18>
         igmpHostProcessMembershipQueryV3(context, pseudoHeader,
 80052ae:	f7ff fea9 	bl	8005004 <igmpHostProcessMembershipQueryV3>
 80052b2:	e7f7      	b.n	80052a4 <igmpHostProcessMessage+0x18>
         igmpHostProcessMembershipQuery(context, pseudoHeader, message, length);
 80052b4:	f7ff ff6e 	bl	8005194 <igmpHostProcessMembershipQuery>
 80052b8:	e7f4      	b.n	80052a4 <igmpHostProcessMessage+0x18>
      igmpHostProcessMembershipReport(context, pseudoHeader, message, length);
 80052ba:	f7ff fe1f 	bl	8004efc <igmpHostProcessMembershipReport>
}
 80052be:	e7f1      	b.n	80052a4 <igmpHostProcessMessage+0x18>

080052c0 <ipSendDatagram>:
 **/

error_t ipSendDatagram(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, NetBuffer *buffer, size_t offset,
   NetTxAncillary *ancillary)
{
 80052c0:	b510      	push	{r4, lr}
 80052c2:	b082      	sub	sp, #8
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 80052c4:	680c      	ldr	r4, [r1, #0]
 80052c6:	2c0c      	cmp	r4, #12
 80052c8:	d004      	beq.n	80052d4 <ipSendDatagram+0x14>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 80052ca:	2c28      	cmp	r4, #40	@ 0x28
 80052cc:	d008      	beq.n	80052e0 <ipSendDatagram+0x20>
   else
#endif
   //Destination address is invalid
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80052ce:	20e4      	movs	r0, #228	@ 0xe4
   }

   //Return status code
   return error;
}
 80052d0:	b002      	add	sp, #8
 80052d2:	bd10      	pop	{r4, pc}
      error = ipv4SendDatagram(interface, &pseudoHeader->ipv4Data, buffer,
 80052d4:	9c04      	ldr	r4, [sp, #16]
 80052d6:	9400      	str	r4, [sp, #0]
 80052d8:	3104      	adds	r1, #4
 80052da:	f000 fbf9 	bl	8005ad0 <ipv4SendDatagram>
 80052de:	e7f7      	b.n	80052d0 <ipSendDatagram+0x10>
      error = ipv6SendDatagram(interface, &pseudoHeader->ipv6Data, buffer,
 80052e0:	9c04      	ldr	r4, [sp, #16]
 80052e2:	9400      	str	r4, [sp, #0]
 80052e4:	3104      	adds	r1, #4
 80052e6:	f001 ffc1 	bl	800726c <ipv6SendDatagram>
 80052ea:	e7f1      	b.n	80052d0 <ipSendDatagram+0x10>

080052ec <ipSelectSourceAddr>:
 * @return Error code
 **/

error_t ipSelectSourceAddr(NetInterface **interface, const IpAddr *destAddr,
   IpAddr *srcAddr)
{
 80052ec:	b508      	push	{r3, lr}
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //The destination address is an IPv4 address?
   if(destAddr->length == sizeof(Ipv4Addr))
 80052ee:	680b      	ldr	r3, [r1, #0]
 80052f0:	2b04      	cmp	r3, #4
 80052f2:	d003      	beq.n	80052fc <ipSelectSourceAddr+0x10>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //The destination address is an IPv6 address?
   if(destAddr->length == sizeof(Ipv6Addr))
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d007      	beq.n	8005308 <ipSelectSourceAddr+0x1c>
   else
#endif
   //The destination address is not valid?
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 80052f8:	20e4      	movs	r0, #228	@ 0xe4
   }

   //Return status code
   return error;
}
 80052fa:	bd08      	pop	{r3, pc}
      srcAddr->length = sizeof(Ipv4Addr);
 80052fc:	f842 3b04 	str.w	r3, [r2], #4
      error = ipv4SelectSourceAddr(interface, destAddr->ipv4Addr,
 8005300:	6849      	ldr	r1, [r1, #4]
 8005302:	f001 f82b 	bl	800635c <ipv4SelectSourceAddr>
 8005306:	e7f8      	b.n	80052fa <ipSelectSourceAddr+0xe>
      srcAddr->length = sizeof(Ipv6Addr);
 8005308:	f842 3b04 	str.w	r3, [r2], #4
      error = ipv6SelectSourceAddr(interface, &destAddr->ipv6Addr,
 800530c:	3104      	adds	r1, #4
 800530e:	f002 fead 	bl	800806c <ipv6SelectSourceAddr>
 8005312:	e7f2      	b.n	80052fa <ipSelectSourceAddr+0xe>

08005314 <ipIsUnspecifiedAddr>:
 * @param[in] ipAddr IP address
 * @return TRUE if the IP address is unspecified, else FALSE
 **/

bool_t ipIsUnspecifiedAddr(const IpAddr *ipAddr)
{
 8005314:	b508      	push	{r3, lr}
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8005316:	6803      	ldr	r3, [r0, #0]
 8005318:	2b04      	cmp	r3, #4
 800531a:	d003      	beq.n	8005324 <ipIsUnspecifiedAddr+0x10>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 800531c:	2b10      	cmp	r3, #16
 800531e:	d005      	beq.n	800532c <ipIsUnspecifiedAddr+0x18>
   }
   else
#endif
   //Invalid IP address?
   {
      result = TRUE;
 8005320:	2001      	movs	r0, #1
   }

   //Return TRUE if the IP address is unspecified, else FALSE
   return result;
}
 8005322:	bd08      	pop	{r3, pc}
      if(ipAddr->ipv4Addr == IPV4_UNSPECIFIED_ADDR)
 8005324:	6843      	ldr	r3, [r0, #4]
 8005326:	b953      	cbnz	r3, 800533e <ipIsUnspecifiedAddr+0x2a>
         result = TRUE;
 8005328:	2001      	movs	r0, #1
 800532a:	e7fa      	b.n	8005322 <ipIsUnspecifiedAddr+0xe>
      result = ipv6CompAddr(&ipAddr->ipv6Addr, &IPV6_UNSPECIFIED_ADDR);
 800532c:	2210      	movs	r2, #16
 800532e:	4905      	ldr	r1, [pc, #20]	@ (8005344 <ipIsUnspecifiedAddr+0x30>)
 8005330:	3004      	adds	r0, #4
 8005332:	f00f fc7d 	bl	8014c30 <memcmp>
 8005336:	fab0 f080 	clz	r0, r0
 800533a:	0940      	lsrs	r0, r0, #5
 800533c:	e7f1      	b.n	8005322 <ipIsUnspecifiedAddr+0xe>
         result = FALSE;
 800533e:	2000      	movs	r0, #0
 8005340:	e7ef      	b.n	8005322 <ipIsUnspecifiedAddr+0xe>
 8005342:	bf00      	nop
 8005344:	08019f20 	.word	0x08019f20

08005348 <ipIsLinkLocalAddr>:
{
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8005348:	6803      	ldr	r3, [r0, #0]
 800534a:	2b04      	cmp	r3, #4
 800534c:	d003      	beq.n	8005356 <ipIsLinkLocalAddr+0xe>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 800534e:	2b10      	cmp	r3, #16
 8005350:	d009      	beq.n	8005366 <ipIsLinkLocalAddr+0x1e>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 8005352:	2000      	movs	r0, #0
 8005354:	4770      	bx	lr
      result = ipv4IsLinkLocalAddr(ipAddr->ipv4Addr);
 8005356:	8880      	ldrh	r0, [r0, #4]
 8005358:	f64f 63a9 	movw	r3, #65193	@ 0xfea9
 800535c:	4298      	cmp	r0, r3
 800535e:	bf14      	ite	ne
 8005360:	2000      	movne	r0, #0
 8005362:	2001      	moveq	r0, #1
 8005364:	4770      	bx	lr
      result = ipv6IsLinkLocalUnicastAddr(&ipAddr->ipv6Addr);
 8005366:	7903      	ldrb	r3, [r0, #4]
 8005368:	2bfe      	cmp	r3, #254	@ 0xfe
 800536a:	d001      	beq.n	8005370 <ipIsLinkLocalAddr+0x28>
 800536c:	2000      	movs	r0, #0
 800536e:	4770      	bx	lr
 8005370:	7943      	ldrb	r3, [r0, #5]
 8005372:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005376:	2b80      	cmp	r3, #128	@ 0x80
 8005378:	d001      	beq.n	800537e <ipIsLinkLocalAddr+0x36>
 800537a:	2000      	movs	r0, #0
 800537c:	4770      	bx	lr
 800537e:	2001      	movs	r0, #1
   }

   //Return TRUE if the IP address is a link-local address, else FALSE
   return result;
}
 8005380:	4770      	bx	lr

08005382 <ipIsMulticastAddr>:
{
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8005382:	6803      	ldr	r3, [r0, #0]
 8005384:	2b04      	cmp	r3, #4
 8005386:	d003      	beq.n	8005390 <ipIsMulticastAddr+0xe>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 8005388:	2b10      	cmp	r3, #16
 800538a:	d009      	beq.n	80053a0 <ipIsMulticastAddr+0x1e>
   }
   else
#endif
   //Invalid IP address?
   {
      result = FALSE;
 800538c:	2000      	movs	r0, #0
   }

   //Return TRUE if the IP address is a multicast address, else FALSE
   return result;
}
 800538e:	4770      	bx	lr
      result = ipv4IsMulticastAddr(ipAddr->ipv4Addr);
 8005390:	6840      	ldr	r0, [r0, #4]
 8005392:	f000 00f0 	and.w	r0, r0, #240	@ 0xf0
 8005396:	28e0      	cmp	r0, #224	@ 0xe0
 8005398:	bf14      	ite	ne
 800539a:	2000      	movne	r0, #0
 800539c:	2001      	moveq	r0, #1
 800539e:	4770      	bx	lr
      result = ipv6IsMulticastAddr(&ipAddr->ipv6Addr);
 80053a0:	7900      	ldrb	r0, [r0, #4]
 80053a2:	28ff      	cmp	r0, #255	@ 0xff
 80053a4:	bf14      	ite	ne
 80053a6:	2000      	movne	r0, #0
 80053a8:	2001      	moveq	r0, #1
 80053aa:	4770      	bx	lr

080053ac <ipIsBroadcastAddr>:
{
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //Broadcast address?
   if(ipAddr->length == sizeof(Ipv4Addr) &&
 80053ac:	6803      	ldr	r3, [r0, #0]
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	d001      	beq.n	80053b6 <ipIsBroadcastAddr+0xa>
      result = TRUE;
   }
   else
#endif
   {
      result = FALSE;
 80053b2:	2000      	movs	r0, #0
 80053b4:	4770      	bx	lr
      ipAddr->ipv4Addr == IPV4_BROADCAST_ADDR)
 80053b6:	6843      	ldr	r3, [r0, #4]
   if(ipAddr->length == sizeof(Ipv4Addr) &&
 80053b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053bc:	d001      	beq.n	80053c2 <ipIsBroadcastAddr+0x16>
      result = FALSE;
 80053be:	2000      	movs	r0, #0
 80053c0:	4770      	bx	lr
      result = TRUE;
 80053c2:	2001      	movs	r0, #1
   }

   //Return TRUE if the IP address is a broadcast address, else FALSE
   return result;
}
 80053c4:	4770      	bx	lr

080053c6 <ipCompAddr>:
 * @param[in] ipAddr2 Second IP address
 * @return Comparison result
 **/

bool_t ipCompAddr(const IpAddr *ipAddr1, const IpAddr *ipAddr2)
{
 80053c6:	b508      	push	{r3, lr}
   bool_t result;

#if (IPV4_SUPPORT == ENABLED)
   //IPv4 addresses?
   if(ipAddr1->length == sizeof(Ipv4Addr) && ipAddr2->length == sizeof(Ipv4Addr))
 80053c8:	6803      	ldr	r3, [r0, #0]
 80053ca:	2b04      	cmp	r3, #4
 80053cc:	d006      	beq.n	80053dc <ipCompAddr+0x16>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 addresses?
   if(ipAddr1->length == sizeof(Ipv6Addr) && ipAddr2->length == sizeof(Ipv6Addr))
 80053ce:	2b10      	cmp	r3, #16
 80053d0:	d00f      	beq.n	80053f2 <ipCompAddr+0x2c>
      result = ipv6CompAddr(&ipAddr1->ipv6Addr, &ipAddr2->ipv6Addr);
   }
   else
#endif
   //Unspecified IP addresses?
   if(ipAddr1->length == 0 && ipAddr2->length == 0)
 80053d2:	b9cb      	cbnz	r3, 8005408 <ipCompAddr+0x42>
 80053d4:	680b      	ldr	r3, [r1, #0]
 80053d6:	b1cb      	cbz	r3, 800540c <ipCompAddr+0x46>
      result = TRUE;
   }
   //Inconsistent IP addresses?
   else
   {
      result = FALSE;
 80053d8:	2000      	movs	r0, #0
 80053da:	e016      	b.n	800540a <ipCompAddr+0x44>
   if(ipAddr1->length == sizeof(Ipv4Addr) && ipAddr2->length == sizeof(Ipv4Addr))
 80053dc:	680a      	ldr	r2, [r1, #0]
 80053de:	2a04      	cmp	r2, #4
 80053e0:	d1f5      	bne.n	80053ce <ipCompAddr+0x8>
      if(ipAddr1->ipv4Addr == ipAddr2->ipv4Addr)
 80053e2:	6842      	ldr	r2, [r0, #4]
 80053e4:	684b      	ldr	r3, [r1, #4]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d001      	beq.n	80053ee <ipCompAddr+0x28>
         result = FALSE;
 80053ea:	2000      	movs	r0, #0
 80053ec:	e00d      	b.n	800540a <ipCompAddr+0x44>
         result = TRUE;
 80053ee:	2001      	movs	r0, #1
 80053f0:	e00b      	b.n	800540a <ipCompAddr+0x44>
   if(ipAddr1->length == sizeof(Ipv6Addr) && ipAddr2->length == sizeof(Ipv6Addr))
 80053f2:	680a      	ldr	r2, [r1, #0]
 80053f4:	2a10      	cmp	r2, #16
 80053f6:	d1ec      	bne.n	80053d2 <ipCompAddr+0xc>
      result = ipv6CompAddr(&ipAddr1->ipv6Addr, &ipAddr2->ipv6Addr);
 80053f8:	3104      	adds	r1, #4
 80053fa:	3004      	adds	r0, #4
 80053fc:	f00f fc18 	bl	8014c30 <memcmp>
 8005400:	fab0 f080 	clz	r0, r0
 8005404:	0940      	lsrs	r0, r0, #5
 8005406:	e000      	b.n	800540a <ipCompAddr+0x44>
      result = FALSE;
 8005408:	2000      	movs	r0, #0
   }

   //Return TRUE if the IP addresses match, else FALSE
   return result;
}
 800540a:	bd08      	pop	{r3, pc}
      result = TRUE;
 800540c:	2001      	movs	r0, #1
   return result;
 800540e:	e7fc      	b.n	800540a <ipCompAddr+0x44>

08005410 <ipUpdateMulticastFilter>:
 * @param[in] interface Underlying network interface
 * @param[in] groupAddr IP multicast address
 **/

void ipUpdateMulticastFilter(NetInterface *interface, const IpAddr *groupAddr)
{
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	4605      	mov	r5, r0
 8005414:	460e      	mov	r6, r1
   uint_t i;

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 8005416:	2400      	movs	r4, #0
 8005418:	e00a      	b.n	8005430 <ipUpdateMulticastFilter+0x20>
   {
      //Matching interface?
      if(interface == NULL || interface == &netInterface[i])
 800541a:	b165      	cbz	r5, 8005436 <ipUpdateMulticastFilter+0x26>
 800541c:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8005420:	fb04 f303 	mul.w	r3, r4, r3
 8005424:	3358      	adds	r3, #88	@ 0x58
 8005426:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <ipUpdateMulticastFilter+0x80>)
 8005428:	4413      	add	r3, r2
 800542a:	42ab      	cmp	r3, r5
 800542c:	d003      	beq.n	8005436 <ipUpdateMulticastFilter+0x26>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800542e:	3401      	adds	r4, #1
 8005430:	2c00      	cmp	r4, #0
 8005432:	d0f2      	beq.n	800541a <ipUpdateMulticastFilter+0xa>
            //Just for sanity
         }
#endif
      }
   }
}
 8005434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         if(groupAddr == NULL)
 8005436:	b186      	cbz	r6, 800545a <ipUpdateMulticastFilter+0x4a>
         else if(groupAddr->length == sizeof(Ipv4Addr))
 8005438:	6833      	ldr	r3, [r6, #0]
 800543a:	2b04      	cmp	r3, #4
 800543c:	d01d      	beq.n	800547a <ipUpdateMulticastFilter+0x6a>
         else if(groupAddr->length == sizeof(Ipv6Addr))
 800543e:	6833      	ldr	r3, [r6, #0]
 8005440:	2b10      	cmp	r3, #16
 8005442:	d1f4      	bne.n	800542e <ipUpdateMulticastFilter+0x1e>
            ipv6UpdateMulticastFilter(&netInterface[i], &groupAddr->ipv6Addr);
 8005444:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8005448:	fb04 f303 	mul.w	r3, r4, r3
 800544c:	3358      	adds	r3, #88	@ 0x58
 800544e:	1d31      	adds	r1, r6, #4
 8005450:	480f      	ldr	r0, [pc, #60]	@ (8005490 <ipUpdateMulticastFilter+0x80>)
 8005452:	4418      	add	r0, r3
 8005454:	f003 f878 	bl	8008548 <ipv6UpdateMulticastFilter>
 8005458:	e7e9      	b.n	800542e <ipUpdateMulticastFilter+0x1e>
            ipv4UpdateMulticastFilter(&netInterface[i], IPV4_UNSPECIFIED_ADDR);
 800545a:	f241 27a4 	movw	r7, #4772	@ 0x12a4
 800545e:	fb04 f707 	mul.w	r7, r4, r7
 8005462:	3758      	adds	r7, #88	@ 0x58
 8005464:	4b0a      	ldr	r3, [pc, #40]	@ (8005490 <ipUpdateMulticastFilter+0x80>)
 8005466:	441f      	add	r7, r3
 8005468:	2100      	movs	r1, #0
 800546a:	4638      	mov	r0, r7
 800546c:	f001 f92e 	bl	80066cc <ipv4UpdateMulticastFilter>
            ipv6UpdateMulticastFilter(&netInterface[i], NULL);
 8005470:	2100      	movs	r1, #0
 8005472:	4638      	mov	r0, r7
 8005474:	f003 f868 	bl	8008548 <ipv6UpdateMulticastFilter>
 8005478:	e7d9      	b.n	800542e <ipUpdateMulticastFilter+0x1e>
            ipv4UpdateMulticastFilter(&netInterface[i], groupAddr->ipv4Addr);
 800547a:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 800547e:	fb04 f303 	mul.w	r3, r4, r3
 8005482:	3358      	adds	r3, #88	@ 0x58
 8005484:	6871      	ldr	r1, [r6, #4]
 8005486:	4802      	ldr	r0, [pc, #8]	@ (8005490 <ipUpdateMulticastFilter+0x80>)
 8005488:	4418      	add	r0, r3
 800548a:	f001 f91f 	bl	80066cc <ipv4UpdateMulticastFilter>
         if(groupAddr == NULL)
 800548e:	e7d6      	b.n	800543e <ipUpdateMulticastFilter+0x2e>
 8005490:	20000b50 	.word	0x20000b50

08005494 <ipCalcChecksum>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksum(const void *data, size_t length)
{
 8005494:	b410      	push	{r4}

   //Point to the data over which to calculate the IP checksum
   p = (const uint8_t *) data;

   //Pointer not aligned on a 16-bit boundary?
   if(((uintptr_t) p & 1) != 0)
 8005496:	f010 0401 	ands.w	r4, r0, #1
 800549a:	d005      	beq.n	80054a8 <ipCalcChecksum+0x14>
   {
      if(length >= 1)
 800549c:	b179      	cbz	r1, 80054be <ipCalcChecksum+0x2a>
#ifdef _CPU_BIG_ENDIAN
         //Update checksum value
         checksum += (uint32_t) *p;
#else
         //Update checksum value
         checksum += (uint32_t) *p << 8;
 800549e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80054a2:	021b      	lsls	r3, r3, #8
#endif
         //Restore the alignment on 16-bit boundaries
         p++;
         //Number of bytes left to process
         length--;
 80054a4:	3901      	subs	r1, #1
 80054a6:	e000      	b.n	80054aa <ipCalcChecksum+0x16>
   checksum = 0x0000;
 80054a8:	4623      	mov	r3, r4
      }
   }

   //Pointer not aligned on a 32-bit boundary?
   if(((uintptr_t) p & 2) != 0)
 80054aa:	f010 0f02 	tst.w	r0, #2
 80054ae:	d00a      	beq.n	80054c6 <ipCalcChecksum+0x32>
   {
      if(length >= 2)
 80054b0:	2901      	cmp	r1, #1
 80054b2:	d908      	bls.n	80054c6 <ipCalcChecksum+0x32>
      {
         //Update checksum value
         checksum += (uint32_t) *((uint16_t *) p);
 80054b4:	f830 2b02 	ldrh.w	r2, [r0], #2
 80054b8:	4413      	add	r3, r2

         //Restore the alignment on 32-bit boundaries
         p += 2;
         //Number of bytes left to process
         length -= 2;
 80054ba:	3902      	subs	r1, #2
 80054bc:	e003      	b.n	80054c6 <ipCalcChecksum+0x32>
   checksum = 0x0000;
 80054be:	460b      	mov	r3, r1
 80054c0:	e7f3      	b.n	80054aa <ipCalcChecksum+0x16>
      {
         checksum = temp;
      }

      //Point to the next 32-bit word
      p += 4;
 80054c2:	3004      	adds	r0, #4
      //Number of bytes left to process
      length -= 4;
 80054c4:	3904      	subs	r1, #4
   while(length >= 4)
 80054c6:	2903      	cmp	r1, #3
 80054c8:	d904      	bls.n	80054d4 <ipCalcChecksum+0x40>
      temp = checksum + *((uint32_t *) p);
 80054ca:	6802      	ldr	r2, [r0, #0]
      if(temp < checksum)
 80054cc:	18d3      	adds	r3, r2, r3
 80054ce:	d3f8      	bcc.n	80054c2 <ipCalcChecksum+0x2e>
         checksum = temp + 1;
 80054d0:	3301      	adds	r3, #1
 80054d2:	e7f6      	b.n	80054c2 <ipCalcChecksum+0x2e>
   }

   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80054d4:	0c1a      	lsrs	r2, r3, #16
 80054d6:	fa12 f383 	uxtah	r3, r2, r3

   //Add left-over 16-bit word, if any
   if(length >= 2)
 80054da:	2901      	cmp	r1, #1
 80054dc:	d903      	bls.n	80054e6 <ipCalcChecksum+0x52>
   {
      //Update checksum value
      checksum += (uint32_t) *((uint16_t *) p);
 80054de:	f830 2b02 	ldrh.w	r2, [r0], #2
 80054e2:	4413      	add	r3, r2

      //Point to the next byte
      p += 2;
      //Number of bytes left to process
      length -= 2;
 80054e4:	3902      	subs	r1, #2
   }

   //Add left-over byte, if any
   if(length >= 1)
 80054e6:	b109      	cbz	r1, 80054ec <ipCalcChecksum+0x58>
#ifdef _CPU_BIG_ENDIAN
      //Update checksum value
      checksum += (uint32_t) *p << 8;
#else
      //Update checksum value
      checksum += (uint32_t) *p;
 80054e8:	7802      	ldrb	r2, [r0, #0]
 80054ea:	4413      	add	r3, r2
#endif
   }

   //Fold 32-bit sum to 16 bits (first pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80054ec:	0c1a      	lsrs	r2, r3, #16
 80054ee:	fa12 f383 	uxtah	r3, r2, r3
   //Fold 32-bit sum to 16 bits (second pass)
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80054f2:	0c1a      	lsrs	r2, r3, #16
 80054f4:	fa12 f383 	uxtah	r3, r2, r3

   //Restore checksum endianness
   if(((uintptr_t) data & 1) != 0)
 80054f8:	b11c      	cbz	r4, 8005502 <ipCalcChecksum+0x6e>
   {
      //Swap checksum value
      checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 80054fa:	021a      	lsls	r2, r3, #8
 80054fc:	ea42 2313 	orr.w	r3, r2, r3, lsr #8
 8005500:	b29b      	uxth	r3, r3
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8005502:	43db      	mvns	r3, r3
}
 8005504:	b298      	uxth	r0, r3
 8005506:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550a:	4770      	bx	lr

0800550c <ipCalcChecksumEx>:
 * @param[in] length Number of bytes to process
 * @return Checksum value
 **/

uint16_t ipCalcChecksumEx(const NetBuffer *buffer, size_t offset, size_t length)
{
 800550c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005510:	4607      	mov	r7, r0
 8005512:	4690      	mov	r8, r2
   uint_t pos;
   uint8_t *data;
   uint32_t checksum;

   //Checksum preset value
   checksum = 0x0000;
 8005514:	2500      	movs	r5, #0

   //Current position in the multi-part buffer
   pos = 0;
 8005516:	462e      	mov	r6, r5

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8005518:	462c      	mov	r4, r5
 800551a:	e002      	b.n	8005522 <ipCalcChecksumEx+0x16>
            //Swap checksum value
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
         }

         //Advance current position
         pos += n;
 800551c:	444e      	add	r6, r9
         //Process the next block from the start
         offset = 0;
 800551e:	2100      	movs	r1, #0
   for(i = 0; i < buffer->chunkCount && pos < length; i++)
 8005520:	3401      	adds	r4, #1
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	42a3      	cmp	r3, r4
 8005526:	d92b      	bls.n	8005580 <ipCalcChecksumEx+0x74>
 8005528:	4546      	cmp	r6, r8
 800552a:	d229      	bcs.n	8005580 <ipCalcChecksumEx+0x74>
      if(offset < buffer->chunk[i].length)
 800552c:	1c63      	adds	r3, r4, #1
 800552e:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8005532:	889b      	ldrh	r3, [r3, #4]
 8005534:	428b      	cmp	r3, r1
 8005536:	d921      	bls.n	800557c <ipCalcChecksumEx+0x70>
         data = (uint8_t *) buffer->chunk[i].address + offset;
 8005538:	1c62      	adds	r2, r4, #1
 800553a:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 800553e:	4408      	add	r0, r1
         n = buffer->chunk[i].length - offset;
 8005540:	1a5b      	subs	r3, r3, r1
         n = MIN(n, length - pos);
 8005542:	eba8 0906 	sub.w	r9, r8, r6
 8005546:	4599      	cmp	r9, r3
 8005548:	bf28      	it	cs
 800554a:	4699      	movcs	r9, r3
         if((pos & 1) != 0)
 800554c:	f016 0a01 	ands.w	sl, r6, #1
 8005550:	d003      	beq.n	800555a <ipCalcChecksumEx+0x4e>
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8005552:	022b      	lsls	r3, r5, #8
 8005554:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
 8005558:	b29d      	uxth	r5, r3
         checksum += ipCalcChecksum(data, n) ^ 0xFFFF;
 800555a:	4649      	mov	r1, r9
 800555c:	f7ff ff9a 	bl	8005494 <ipCalcChecksum>
 8005560:	43c3      	mvns	r3, r0
 8005562:	fa15 f383 	uxtah	r3, r5, r3
         checksum = (checksum & 0xFFFF) + (checksum >> 16);
 8005566:	0c1d      	lsrs	r5, r3, #16
 8005568:	fa15 f583 	uxtah	r5, r5, r3
         if((pos & 1) != 0)
 800556c:	f1ba 0f00 	cmp.w	sl, #0
 8005570:	d0d4      	beq.n	800551c <ipCalcChecksumEx+0x10>
            checksum = ((checksum >> 8) | (checksum << 8)) & 0xFFFF;
 8005572:	022b      	lsls	r3, r5, #8
 8005574:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
 8005578:	b29d      	uxth	r5, r3
 800557a:	e7cf      	b.n	800551c <ipCalcChecksumEx+0x10>
      }
      else
      {
         //Skip the current chunk
         offset -= buffer->chunk[i].length;
 800557c:	1ac9      	subs	r1, r1, r3
 800557e:	e7cf      	b.n	8005520 <ipCalcChecksumEx+0x14>
      }
   }

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 8005580:	43e8      	mvns	r0, r5
}
 8005582:	b280      	uxth	r0, r0
 8005584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005588 <ipCalcUpperLayerChecksumEx>:
 * @return Checksum value
 **/

uint16_t ipCalcUpperLayerChecksumEx(const void *pseudoHeader,
   size_t pseudoHeaderLen, const NetBuffer *buffer, size_t offset, size_t length)
{
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	4615      	mov	r5, r2
 800558c:	461e      	mov	r6, r3
   uint32_t checksum;

   //Process pseudo header
   checksum = ipCalcChecksum(pseudoHeader, pseudoHeaderLen) ^ 0xFFFF;
 800558e:	f7ff ff81 	bl	8005494 <ipCalcChecksum>
 8005592:	43c4      	mvns	r4, r0
 8005594:	b2a4      	uxth	r4, r4
   //Process upper-layer data
   checksum += ipCalcChecksumEx(buffer, offset, length) ^ 0xFFFF;
 8005596:	9a04      	ldr	r2, [sp, #16]
 8005598:	4631      	mov	r1, r6
 800559a:	4628      	mov	r0, r5
 800559c:	f7ff ffb6 	bl	800550c <ipCalcChecksumEx>
 80055a0:	43c0      	mvns	r0, r0
 80055a2:	fa14 f080 	uxtah	r0, r4, r0
   //Fold 32-bit sum to 16 bits
   checksum = (checksum & 0xFFFF) + (checksum >> 16);
 80055a6:	0c03      	lsrs	r3, r0, #16
 80055a8:	fa13 f080 	uxtah	r0, r3, r0

   //Return 1's complement value
   return checksum ^ 0xFFFF;
 80055ac:	43c0      	mvns	r0, r0
}
 80055ae:	b280      	uxth	r0, r0
 80055b0:	bd70      	pop	{r4, r5, r6, pc}

080055b2 <ipAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *ipAllocBuffer(size_t length, size_t *offset)
{
 80055b2:	b510      	push	{r4, lr}
 80055b4:	460c      	mov	r4, r1
   headerLen += AH_MAX_OVERHEAD;
#endif

#if (ETH_SUPPORT == ENABLED)
   //Allocate a buffer to hold the Ethernet header and the IP packet
   buffer = ethAllocBuffer(length + headerLen, offset);
 80055b6:	3030      	adds	r0, #48	@ 0x30
 80055b8:	f7fd fd68 	bl	800308c <ethAllocBuffer>
   //Clear offset value
   *offset = 0;
#endif

   //Successful memory allocation?
   if(buffer != NULL)
 80055bc:	b110      	cbz	r0, 80055c4 <ipAllocBuffer+0x12>
   {
      //Offset to the first byte of the payload
      *offset += headerLen;
 80055be:	6823      	ldr	r3, [r4, #0]
 80055c0:	3330      	adds	r3, #48	@ 0x30
 80055c2:	6023      	str	r3, [r4, #0]
   }

   //Return a pointer to the freshly allocated buffer
   return buffer;
}
 80055c4:	bd10      	pop	{r4, pc}

080055c6 <ipStringToAddr>:
 * @param[out] ipAddr Binary representation of the IP address
 * @return Error code
 **/

error_t ipStringToAddr(const char_t *str, IpAddr *ipAddr)
{
 80055c6:	b538      	push	{r3, r4, r5, lr}
 80055c8:	4605      	mov	r5, r0
 80055ca:	460c      	mov	r4, r1
   error_t error;

#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(osStrchr(str, ':') != NULL)
 80055cc:	213a      	movs	r1, #58	@ 0x3a
 80055ce:	f00f fb7d 	bl	8014ccc <strchr>
 80055d2:	b138      	cbz	r0, 80055e4 <ipStringToAddr+0x1e>
   {
      //IPv6 addresses are 16-byte long
      ipAddr->length = sizeof(Ipv6Addr);
 80055d4:	4621      	mov	r1, r4
 80055d6:	2310      	movs	r3, #16
 80055d8:	f841 3b04 	str.w	r3, [r1], #4
      //Convert the string to IPv6 address
      error = ipv6StringToAddr(str, &ipAddr->ipv6Addr);
 80055dc:	4628      	mov	r0, r5
 80055de:	f001 fe7f 	bl	80072e0 <ipv6StringToAddr>
      error = ERROR_FAILURE;
   }

   //Return status code
   return error;
}
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
   if(osStrchr(str, '.') != NULL)
 80055e4:	212e      	movs	r1, #46	@ 0x2e
 80055e6:	4628      	mov	r0, r5
 80055e8:	f00f fb70 	bl	8014ccc <strchr>
 80055ec:	b138      	cbz	r0, 80055fe <ipStringToAddr+0x38>
      ipAddr->length = sizeof(Ipv4Addr);
 80055ee:	4621      	mov	r1, r4
 80055f0:	2304      	movs	r3, #4
 80055f2:	f841 3b04 	str.w	r3, [r1], #4
      error = ipv4StringToAddr(str, &ipAddr->ipv4Addr);
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 faa2 	bl	8005b40 <ipv4StringToAddr>
 80055fc:	e7f1      	b.n	80055e2 <ipStringToAddr+0x1c>
      error = ERROR_FAILURE;
 80055fe:	2001      	movs	r0, #1
 8005600:	e7ef      	b.n	80055e2 <ipStringToAddr+0x1c>
	...

08005604 <ipAddrToString>:
 * @param[out] str NULL-terminated string representing the IP address
 * @return Pointer to the formatted string
 **/

char_t *ipAddrToString(const IpAddr *ipAddr, char_t *str)
{
 8005604:	b508      	push	{r3, lr}
#if (IPV4_SUPPORT == ENABLED)
   //IPv4 address?
   if(ipAddr->length == sizeof(Ipv4Addr))
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	2b04      	cmp	r3, #4
 800560a:	d006      	beq.n	800561a <ipAddrToString+0x16>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //IPv6 address?
   if(ipAddr->length == sizeof(Ipv6Addr))
 800560c:	2b10      	cmp	r3, #16
 800560e:	d008      	beq.n	8005622 <ipAddrToString+0x1e>
   //Invalid IP address?
   {
      static char_t c;

      //The last parameter is optional
      if(str == NULL)
 8005610:	b159      	cbz	r1, 800562a <ipAddrToString+0x26>
 8005612:	4608      	mov	r0, r1
      {
         str = &c;
      }

      //Properly terminate the string
      str[0] = '\0';
 8005614:	2300      	movs	r3, #0
 8005616:	7003      	strb	r3, [r0, #0]

      //Return an empty string
      return str;
   }
}
 8005618:	bd08      	pop	{r3, pc}
      return ipv4AddrToString(ipAddr->ipv4Addr, str);
 800561a:	6840      	ldr	r0, [r0, #4]
 800561c:	f000 face 	bl	8005bbc <ipv4AddrToString>
 8005620:	e7fa      	b.n	8005618 <ipAddrToString+0x14>
      return ipv6AddrToString(&ipAddr->ipv6Addr, str);
 8005622:	3004      	adds	r0, #4
 8005624:	f001 fefe 	bl	8007424 <ipv6AddrToString>
 8005628:	e7f6      	b.n	8005618 <ipAddrToString+0x14>
         str = &c;
 800562a:	4801      	ldr	r0, [pc, #4]	@ (8005630 <ipAddrToString+0x2c>)
 800562c:	e7f2      	b.n	8005614 <ipAddrToString+0x10>
 800562e:	bf00      	nop
 8005630:	20000b04 	.word	0x20000b04

08005634 <ipv4Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv4Init(NetInterface *interface)
{
 8005634:	b538      	push	{r3, r4, r5, lr}
 8005636:	4604      	mov	r4, r0
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8005638:	f007 fa5e 	bl	800caf8 <nicGetPhysicalInterface>
 800563c:	4605      	mov	r5, r0

   //Point to the IPv4 context
   context = &interface->ipv4Context;

   //Clear the IPv4 context
   osMemset(context, 0, sizeof(Ipv4Context));
 800563e:	f44f 72e2 	mov.w	r2, #452	@ 0x1c4
 8005642:	2100      	movs	r1, #0
 8005644:	f504 70c4 	add.w	r0, r4, #392	@ 0x188
 8005648:	f00f fb1c 	bl	8014c84 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800564c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
   context->isRouter = FALSE;
 8005654:	2500      	movs	r5, #0
 8005656:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
   context->defaultTtl = IPV4_DEFAULT_TTL;
 800565a:	2340      	movs	r3, #64	@ 0x40
 800565c:	f884 3190 	strb.w	r3, [r4, #400]	@ 0x190

   //ICMP Echo Request messages are allowed by default
   context->enableEchoReq = TRUE;
 8005660:	2301      	movs	r3, #1
 8005662:	f8c4 3194 	str.w	r3, [r4, #404]	@ 0x194
   context->enableBroadcastEchoReq = TRUE;
 8005666:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198

   //Identification field is primarily used to identify
   //fragments of an original IP datagram
   context->identification = 0;
 800566a:	f8a4 519c 	strh.w	r5, [r4, #412]	@ 0x19c

   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 800566e:	f8c4 51b4 	str.w	r5, [r4, #436]	@ 0x1b4
 8005672:	f8c4 51b8 	str.w	r5, [r4, #440]	@ 0x1b8
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 8005676:	2250      	movs	r2, #80	@ 0x50
 8005678:	4629      	mov	r1, r5
 800567a:	f504 70de 	add.w	r0, r4, #444	@ 0x1bc
 800567e:	f00f fb01 	bl	8014c84 <memset>

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 8005682:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8005686:	4629      	mov	r1, r5
 8005688:	f504 7003 	add.w	r0, r4, #524	@ 0x20c
 800568c:	f00f fafa 	bl	8014c84 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
}
 8005690:	4628      	mov	r0, r5
 8005692:	bd38      	pop	{r3, r4, r5, pc}

08005694 <ipv4LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv4LinkChangeEvent(NetInterface *interface)
{
 8005694:	b510      	push	{r4, lr}
 8005696:	4604      	mov	r4, r0
   Ipv4Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 8005698:	f007 fa2e 	bl	800caf8 <nicGetPhysicalInterface>

   //Point to the IPv4 context
   context = &interface->ipv4Context;

   //Restore default MTU
   context->linkMtu = physicalInterface->nicDriver->mtu;
 800569c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188

#if (ETH_SUPPORT == ENABLED)
   //Flush ARP cache contents
   arpFlushCache(interface);
 80056a4:	4620      	mov	r0, r4
 80056a6:	f7fb fd50 	bl	800114a <arpFlushCache>
#endif

#if (IPV4_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv4FlushFragQueue(interface);
 80056aa:	4620      	mov	r0, r4
 80056ac:	f000 faff 	bl	8005cae <ipv4FlushFragQueue>
#endif

#if (IGMP_HOST_SUPPORT == ENABLED || IGMP_ROUTER_SUPPORT == ENABLED || \
   IGMP_SNOOPING_SUPPORT == ENABLED)
   //Notify IGMP of link state changes
   igmpLinkChangeEvent(interface);
 80056b0:	4620      	mov	r0, r4
 80056b2:	f7ff f823 	bl	80046fc <igmpLinkChangeEvent>
   autoIpLinkChangeEvent(interface->autoIpContext);
#endif

#if (DHCP_CLIENT_SUPPORT == ENABLED)
   //Notify the DHCP client of link state changes
   dhcpClientLinkChangeEvent(interface->dhcpClientContext);
 80056b6:	f8d4 07a0 	ldr.w	r0, [r4, #1952]	@ 0x7a0
 80056ba:	f7fc fc6b 	bl	8001f94 <dhcpClientLinkChangeEvent>
#endif
}
 80056be:	bd10      	pop	{r4, pc}

080056c0 <ipv4ProcessDatagram>:
 *   the packet
 **/

void ipv4ProcessDatagram(NetInterface *interface, const NetBuffer *buffer,
   size_t offset, NetRxAncillary *ancillary)
{
 80056c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80056c4:	b08f      	sub	sp, #60	@ 0x3c
 80056c6:	4681      	mov	r9, r0
 80056c8:	460e      	mov	r6, r1
 80056ca:	4615      	mov	r5, r2
 80056cc:	4698      	mov	r8, r3
   size_t length;
   Ipv4Header *header;
   IpPseudoHeader pseudoHeader;

   //Retrieve the length of the IPv4 datagram
   length = netBufferGetLength(buffer) - offset;
 80056ce:	4608      	mov	r0, r1
 80056d0:	f006 fcd2 	bl	800c078 <netBufferGetLength>
 80056d4:	1b47      	subs	r7, r0, r5

   //Point to the IPv4 header
   header = netBufferAt(buffer, offset, 0);
 80056d6:	2200      	movs	r2, #0
 80056d8:	4629      	mov	r1, r5
 80056da:	4630      	mov	r0, r6
 80056dc:	f006 fd6c 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(header == NULL)
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d064      	beq.n	80057ae <ipv4ProcessDatagram+0xee>
 80056e4:	4604      	mov	r4, r0
   TRACE_INFO("IPv4 datagram received (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump IP header contents for debugging purpose
   ipv4DumpHeader(header);

   //Get the offset to the payload
   offset += header->headerLength * 4;
 80056e6:	7800      	ldrb	r0, [r0, #0]
 80056e8:	f000 000f 	and.w	r0, r0, #15
 80056ec:	eb05 0580 	add.w	r5, r5, r0, lsl #2
   //Compute the length of the payload
   length -= header->headerLength * 4;
 80056f0:	eba7 0080 	sub.w	r0, r7, r0, lsl #2

   //Form the IPv4 pseudo header
   pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 80056f4:	230c      	movs	r3, #12
 80056f6:	9303      	str	r3, [sp, #12]
   pseudoHeader.ipv4Data.srcAddr = header->srcAddr;
 80056f8:	68e3      	ldr	r3, [r4, #12]
 80056fa:	9304      	str	r3, [sp, #16]
   pseudoHeader.ipv4Data.destAddr = header->destAddr;
 80056fc:	6923      	ldr	r3, [r4, #16]
 80056fe:	9305      	str	r3, [sp, #20]
   pseudoHeader.ipv4Data.reserved = 0;
 8005700:	2300      	movs	r3, #0
 8005702:	f88d 3018 	strb.w	r3, [sp, #24]
   pseudoHeader.ipv4Data.protocol = header->protocol;
 8005706:	7a63      	ldrb	r3, [r4, #9]
 8005708:	f88d 3019 	strb.w	r3, [sp, #25]
   pseudoHeader.ipv4Data.length = htons(length);
 800570c:	b280      	uxth	r0, r0
 800570e:	f7fa ff85 	bl	800061c <swapInt16>
 8005712:	f8ad 001a 	strh.w	r0, [sp, #26]

   //Save TTL value
   ancillary->ttl = header->timeToLive;
 8005716:	7a23      	ldrb	r3, [r4, #8]
 8005718:	f888 3000 	strb.w	r3, [r8]
   //Save ToS value
   ancillary->tos = header->typeOfService;
 800571c:	7863      	ldrb	r3, [r4, #1]
 800571e:	f888 3001 	strb.w	r3, [r8, #1]
   if(error)
      return;
#endif

   //Check the protocol field
   switch(header->protocol)
 8005722:	7a63      	ldrb	r3, [r4, #9]
 8005724:	3b01      	subs	r3, #1
 8005726:	2b10      	cmp	r3, #16
 8005728:	d832      	bhi.n	8005790 <ipv4ProcessDatagram+0xd0>
 800572a:	e8df f003 	tbb	[pc, r3]
 800572e:	1109      	.short	0x1109
 8005730:	1b313131 	.word	0x1b313131
 8005734:	31313131 	.word	0x31313131
 8005738:	31313131 	.word	0x31313131
 800573c:	3131      	.short	0x3131
 800573e:	25          	.byte	0x25
 800573f:	00          	.byte	0x00
   {
   //ICMP protocol?
   case IPV4_PROTOCOL_ICMP:
      //Process incoming ICMP message
      icmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset);
 8005740:	462b      	mov	r3, r5
 8005742:	4632      	mov	r2, r6
 8005744:	a904      	add	r1, sp, #16
 8005746:	4648      	mov	r0, r9
 8005748:	f7fe fcb0 	bl	80040ac <icmpProcessMessage>
   error = NO_ERROR;
 800574c:	2400      	movs	r4, #0
 800574e:	e02c      	b.n	80057aa <ipv4ProcessDatagram+0xea>
#if (IGMP_HOST_SUPPORT == ENABLED || IGMP_ROUTER_SUPPORT == ENABLED || \
   IGMP_SNOOPING_SUPPORT == ENABLED)
   //IGMP protocol?
   case IPV4_PROTOCOL_IGMP:
      //Process incoming IGMP message
      igmpProcessMessage(interface, &pseudoHeader.ipv4Data, buffer, offset,
 8005750:	f8cd 8000 	str.w	r8, [sp]
 8005754:	462b      	mov	r3, r5
 8005756:	4632      	mov	r2, r6
 8005758:	a904      	add	r1, sp, #16
 800575a:	4648      	mov	r0, r9
 800575c:	f7ff f82e 	bl	80047bc <igmpProcessMessage>
   error = NO_ERROR;
 8005760:	2400      	movs	r4, #0
 8005762:	e022      	b.n	80057aa <ipv4ProcessDatagram+0xea>

#if (TCP_SUPPORT == ENABLED)
   //TCP protocol?
   case IPV4_PROTOCOL_TCP:
      //Process incoming TCP segment
      tcpProcessSegment(interface, &pseudoHeader, buffer, offset, ancillary);
 8005764:	f8cd 8000 	str.w	r8, [sp]
 8005768:	462b      	mov	r3, r5
 800576a:	4632      	mov	r2, r6
 800576c:	a903      	add	r1, sp, #12
 800576e:	4648      	mov	r0, r9
 8005770:	f009 fbf4 	bl	800ef5c <tcpProcessSegment>
   error = NO_ERROR;
 8005774:	2400      	movs	r4, #0
 8005776:	e018      	b.n	80057aa <ipv4ProcessDatagram+0xea>

#if (UDP_SUPPORT == ENABLED)
   //UDP protocol?
   case IPV4_PROTOCOL_UDP:
      //Process incoming UDP datagram
      error = udpProcessDatagram(interface, &pseudoHeader, buffer, offset,
 8005778:	f8cd 8000 	str.w	r8, [sp]
 800577c:	462b      	mov	r3, r5
 800577e:	4632      	mov	r2, r6
 8005780:	a903      	add	r1, sp, #12
 8005782:	4648      	mov	r0, r9
 8005784:	f00b fae2 	bl	8010d4c <udpProcessDatagram>
 8005788:	4604      	mov	r4, r0
      //Continue processing
      break;
   }

   //Unreachable protocol?
   if(error == ERROR_PROTOCOL_UNREACHABLE)
 800578a:	28d1      	cmp	r0, #209	@ 0xd1
 800578c:	d10d      	bne.n	80057aa <ipv4ProcessDatagram+0xea>
 800578e:	e000      	b.n	8005792 <ipv4ProcessDatagram+0xd2>
   switch(header->protocol)
 8005790:	24d1      	movs	r4, #209	@ 0xd1
   {
      //Update IP statistics
      ipv4UpdateErrorStats(interface, error);
 8005792:	4621      	mov	r1, r4
 8005794:	4648      	mov	r0, r9
 8005796:	f000 fee7 	bl	8006568 <ipv4UpdateErrorStats>

      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 800579a:	2300      	movs	r3, #0
 800579c:	9301      	str	r3, [sp, #4]
 800579e:	9600      	str	r6, [sp, #0]
 80057a0:	2202      	movs	r2, #2
 80057a2:	2103      	movs	r1, #3
 80057a4:	4648      	mov	r0, r9
 80057a6:	f7fe fca9 	bl	80040fc <icmpSendErrorMessage>
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsInDelivers, 1);
      IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCInDelivers, 1);
   }

   //Unreachable port?
   if(error == ERROR_PORT_UNREACHABLE)
 80057aa:	2cd2      	cmp	r4, #210	@ 0xd2
 80057ac:	d002      	beq.n	80057b4 <ipv4ProcessDatagram+0xf4>
   {
      //Send a Destination Unreachable message
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
         ICMP_CODE_PORT_UNREACHABLE, 0, buffer, 0);
   }
}
 80057ae:	b00f      	add	sp, #60	@ 0x3c
 80057b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      icmpSendErrorMessage(interface, ICMP_TYPE_DEST_UNREACHABLE,
 80057b4:	2300      	movs	r3, #0
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	9600      	str	r6, [sp, #0]
 80057ba:	2203      	movs	r2, #3
 80057bc:	4611      	mov	r1, r2
 80057be:	4648      	mov	r0, r9
 80057c0:	f7fe fc9c 	bl	80040fc <icmpSendErrorMessage>
 80057c4:	e7f3      	b.n	80057ae <ipv4ProcessDatagram+0xee>

080057c6 <ipv4ProcessPacket>:
{
 80057c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057c8:	b085      	sub	sp, #20
 80057ca:	4607      	mov	r7, r0
      if(length < sizeof(Ipv4Header))
 80057cc:	2a13      	cmp	r2, #19
 80057ce:	d970      	bls.n	80058b2 <ipv4ProcessPacket+0xec>
 80057d0:	460c      	mov	r4, r1
 80057d2:	4615      	mov	r5, r2
 80057d4:	461e      	mov	r6, r3
      if(packet->version != IPV4_VERSION)
 80057d6:	780a      	ldrb	r2, [r1, #0]
 80057d8:	f002 02f0 	and.w	r2, r2, #240	@ 0xf0
 80057dc:	2a40      	cmp	r2, #64	@ 0x40
 80057de:	d005      	beq.n	80057ec <ipv4ProcessPacket+0x26>
         error = ERROR_INVALID_HEADER;
 80057e0:	21d4      	movs	r1, #212	@ 0xd4
      ipv4UpdateErrorStats(interface, error);
 80057e2:	4638      	mov	r0, r7
 80057e4:	f000 fec0 	bl	8006568 <ipv4UpdateErrorStats>
}
 80057e8:	b005      	add	sp, #20
 80057ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(packet->headerLength < 5)
 80057ec:	780b      	ldrb	r3, [r1, #0]
 80057ee:	f003 030f 	and.w	r3, r3, #15
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d801      	bhi.n	80057fa <ipv4ProcessPacket+0x34>
         error = ERROR_INVALID_HEADER;
 80057f6:	21d4      	movs	r1, #212	@ 0xd4
 80057f8:	e7f3      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
      if(ntohs(packet->totalLength) < (packet->headerLength * 4))
 80057fa:	8848      	ldrh	r0, [r1, #2]
 80057fc:	f7fa ff0e 	bl	800061c <swapInt16>
 8005800:	7823      	ldrb	r3, [r4, #0]
 8005802:	f003 030f 	and.w	r3, r3, #15
 8005806:	ebb0 0f83 	cmp.w	r0, r3, lsl #2
 800580a:	da01      	bge.n	8005810 <ipv4ProcessPacket+0x4a>
         error = ERROR_INVALID_HEADER;
 800580c:	21d4      	movs	r1, #212	@ 0xd4
 800580e:	e7e8      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
      if(length < ntohs(packet->totalLength))
 8005810:	8860      	ldrh	r0, [r4, #2]
 8005812:	f7fa ff03 	bl	800061c <swapInt16>
 8005816:	42a8      	cmp	r0, r5
 8005818:	d901      	bls.n	800581e <ipv4ProcessPacket+0x58>
         error = ERROR_INVALID_LENGTH;
 800581a:	21ec      	movs	r1, #236	@ 0xec
 800581c:	e7e1      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
      if(ipv4CheckSourceAddr(interface, packet->srcAddr))
 800581e:	68e1      	ldr	r1, [r4, #12]
 8005820:	4638      	mov	r0, r7
 8005822:	f000 fcef 	bl	8006204 <ipv4CheckSourceAddr>
 8005826:	2800      	cmp	r0, #0
 8005828:	d145      	bne.n	80058b6 <ipv4ProcessPacket+0xf0>
      if(ipv4IsMulticastAddr(packet->destAddr))
 800582a:	6921      	ldr	r1, [r4, #16]
 800582c:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
 8005830:	2be0      	cmp	r3, #224	@ 0xe0
 8005832:	d005      	beq.n	8005840 <ipv4ProcessPacket+0x7a>
            error = ipv4CheckDestAddr(interface, packet->destAddr);
 8005834:	4638      	mov	r0, r7
 8005836:	f000 fcf3 	bl	8006220 <ipv4CheckDestAddr>
      if(error)
 800583a:	b130      	cbz	r0, 800584a <ipv4ProcessPacket+0x84>
         error = ERROR_INVALID_ADDRESS;
 800583c:	21e4      	movs	r1, #228	@ 0xe4
 800583e:	e7d0      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
         error = ipv4MulticastFilter(interface, packet->destAddr,
 8005840:	68e2      	ldr	r2, [r4, #12]
 8005842:	4638      	mov	r0, r7
 8005844:	f000 fe91 	bl	800656a <ipv4MulticastFilter>
 8005848:	e7f7      	b.n	800583a <ipv4ProcessPacket+0x74>
      if(ipv4IsTentativeAddr(interface, packet->destAddr))
 800584a:	6921      	ldr	r1, [r4, #16]
 800584c:	4638      	mov	r0, r7
 800584e:	f000 fd06 	bl	800625e <ipv4IsTentativeAddr>
 8005852:	b108      	cbz	r0, 8005858 <ipv4ProcessPacket+0x92>
         error = ERROR_INVALID_ADDRESS;
 8005854:	21e4      	movs	r1, #228	@ 0xe4
 8005856:	e7c4      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
      if(ipCalcChecksum(packet, packet->headerLength * 4) != 0x0000)
 8005858:	7821      	ldrb	r1, [r4, #0]
 800585a:	f001 010f 	and.w	r1, r1, #15
 800585e:	0089      	lsls	r1, r1, #2
 8005860:	4620      	mov	r0, r4
 8005862:	f7ff fe17 	bl	8005494 <ipCalcChecksum>
 8005866:	b108      	cbz	r0, 800586c <ipv4ProcessPacket+0xa6>
         error = ERROR_INVALID_HEADER;
 8005868:	21d4      	movs	r1, #212	@ 0xd4
 800586a:	e7ba      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
      ipv4UpdateInStats(interface, packet->destAddr, length);
 800586c:	462a      	mov	r2, r5
 800586e:	6921      	ldr	r1, [r4, #16]
 8005870:	4638      	mov	r0, r7
 8005872:	f000 fe77 	bl	8006564 <ipv4UpdateInStats>
      length = ntohs(packet->totalLength);
 8005876:	8860      	ldrh	r0, [r4, #2]
 8005878:	f7fa fed0 	bl	800061c <swapInt16>
 800587c:	4605      	mov	r5, r0
      if((ntohs(packet->fragmentOffset) & (IPV4_FLAG_MF | IPV4_OFFSET_MASK)) != 0)
 800587e:	88e0      	ldrh	r0, [r4, #6]
 8005880:	f7fa fecc 	bl	800061c <swapInt16>
 8005884:	f3c0 000d 	ubfx	r0, r0, #0, #14
 8005888:	b130      	cbz	r0, 8005898 <ipv4ProcessPacket+0xd2>
         ipv4ReassembleDatagram(interface, packet, length, ancillary);
 800588a:	4633      	mov	r3, r6
 800588c:	462a      	mov	r2, r5
 800588e:	4621      	mov	r1, r4
 8005890:	4638      	mov	r0, r7
 8005892:	f000 fb14 	bl	8005ebe <ipv4ReassembleDatagram>
 8005896:	e7a7      	b.n	80057e8 <ipv4ProcessPacket+0x22>
         buffer.chunkCount = 1;
 8005898:	2301      	movs	r3, #1
 800589a:	9300      	str	r3, [sp, #0]
         buffer.maxChunkCount = 1;
 800589c:	9301      	str	r3, [sp, #4]
         buffer.chunk[0].address = packet;
 800589e:	9402      	str	r4, [sp, #8]
         buffer.chunk[0].length = (uint16_t) length;
 80058a0:	f8ad 500c 	strh.w	r5, [sp, #12]
         ipv4ProcessDatagram(interface, (NetBuffer *) &buffer, 0, ancillary);
 80058a4:	4633      	mov	r3, r6
 80058a6:	2200      	movs	r2, #0
 80058a8:	4669      	mov	r1, sp
 80058aa:	4638      	mov	r0, r7
 80058ac:	f7ff ff08 	bl	80056c0 <ipv4ProcessDatagram>
 80058b0:	e79a      	b.n	80057e8 <ipv4ProcessPacket+0x22>
         error = ERROR_INVALID_LENGTH;
 80058b2:	21ec      	movs	r1, #236	@ 0xec
 80058b4:	e795      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
         error = ERROR_INVALID_HEADER;
 80058b6:	21d4      	movs	r1, #212	@ 0xd4
 80058b8:	e793      	b.n	80057e2 <ipv4ProcessPacket+0x1c>
	...

080058bc <ipv4SendPacket>:
 **/

error_t ipv4SendPacket(NetInterface *interface,
   const Ipv4PseudoHeader *pseudoHeader, uint16_t fragId, size_t fragOffset,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	b085      	sub	sp, #20
 80058c2:	4607      	mov	r7, r0
 80058c4:	460d      	mov	r5, r1
 80058c6:	4691      	mov	r9, r2
 80058c8:	4698      	mov	r8, r3
 80058ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80058ce:	9e10      	ldr	r6, [sp, #64]	@ 0x40
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;
#endif

   //Check whether an IP Router Alert option should be added
   if(ancillary->routerAlert)
 80058d0:	6933      	ldr	r3, [r6, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d159      	bne.n	800598a <ipv4SendPacket+0xce>
      if(error)
         return error;
   }

   //Sanity check
   if(offset < sizeof(Ipv4Header))
 80058d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80058d8:	2b13      	cmp	r3, #19
 80058da:	f240 80ee 	bls.w	8005aba <ipv4SendPacket+0x1fe>
      return ERROR_INVALID_PARAMETER;

   //Make room for the IPv4 header
   offset -= sizeof(Ipv4Header);
 80058de:	3b14      	subs	r3, #20
 80058e0:	930f      	str	r3, [sp, #60]	@ 0x3c
   //Calculate the size of the entire packet, including header and data
   length = netBufferGetLength(buffer) - offset;
 80058e2:	4650      	mov	r0, sl
 80058e4:	f006 fbc8 	bl	800c078 <netBufferGetLength>
 80058e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80058ea:	eba0 0b01 	sub.w	fp, r0, r1

   //Point to the IPv4 header
   packet = netBufferAt(buffer, offset, 0);
 80058ee:	2200      	movs	r2, #0
 80058f0:	4650      	mov	r0, sl
 80058f2:	f006 fc61 	bl	800c1b8 <netBufferAt>
 80058f6:	4604      	mov	r4, r0

   //Format IPv4 header
   packet->version = IPV4_VERSION;
 80058f8:	7803      	ldrb	r3, [r0, #0]
 80058fa:	2204      	movs	r2, #4
 80058fc:	f362 1307 	bfi	r3, r2, #4, #4
 8005900:	7003      	strb	r3, [r0, #0]
   packet->headerLength = 5;
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2205      	movs	r2, #5
 8005906:	f362 0303 	bfi	r3, r2, #0, #4
 800590a:	7003      	strb	r3, [r0, #0]
   packet->typeOfService = ancillary->tos;
 800590c:	7973      	ldrb	r3, [r6, #5]
 800590e:	7043      	strb	r3, [r0, #1]
   packet->totalLength = htons(length);
 8005910:	fa1f f08b 	uxth.w	r0, fp
 8005914:	f7fa fe82 	bl	800061c <swapInt16>
 8005918:	8060      	strh	r0, [r4, #2]
   packet->identification = htons(fragId);
 800591a:	4648      	mov	r0, r9
 800591c:	f7fa fe7e 	bl	800061c <swapInt16>
 8005920:	80a0      	strh	r0, [r4, #4]
   packet->fragmentOffset = htons(fragOffset);
 8005922:	fa1f f088 	uxth.w	r0, r8
 8005926:	f7fa fe79 	bl	800061c <swapInt16>
 800592a:	80e0      	strh	r0, [r4, #6]
   packet->timeToLive = ancillary->ttl;
 800592c:	7933      	ldrb	r3, [r6, #4]
 800592e:	7223      	strb	r3, [r4, #8]
   packet->protocol = pseudoHeader->protocol;
 8005930:	7a6a      	ldrb	r2, [r5, #9]
 8005932:	7262      	strb	r2, [r4, #9]
   packet->headerChecksum = 0;
 8005934:	2200      	movs	r2, #0
 8005936:	72a2      	strb	r2, [r4, #10]
 8005938:	72e2      	strb	r2, [r4, #11]
   packet->srcAddr = pseudoHeader->srcAddr;
 800593a:	682a      	ldr	r2, [r5, #0]
 800593c:	60e2      	str	r2, [r4, #12]
   packet->destAddr = pseudoHeader->destAddr;
 800593e:	686a      	ldr	r2, [r5, #4]
 8005940:	6122      	str	r2, [r4, #16]

   //The IHL field is the length of the IP packet header in 32-bit words, and
   //thus points to the beginning of the data. Note that the minimum value for
   //a correct header is 5 (refer to RFC 791, section 3.1)
   if(ancillary->routerAlert)
 8005942:	6932      	ldr	r2, [r6, #16]
 8005944:	b122      	cbz	r2, 8005950 <ipv4SendPacket+0x94>
   {
      packet->headerLength = 6;
 8005946:	7822      	ldrb	r2, [r4, #0]
 8005948:	2106      	movs	r1, #6
 800594a:	f361 0203 	bfi	r2, r1, #0, #4
 800594e:	7022      	strb	r2, [r4, #0]
   }

   //An IP datagram can be marked "don't fragment"
   if(ancillary->dontFrag)
 8005950:	68b2      	ldr	r2, [r6, #8]
 8005952:	b112      	cbz	r2, 800595a <ipv4SendPacket+0x9e>
   {
      //Any IP datagram so marked is not to be fragmented under any
      //circumstances (refer to RFC791, section 2.3)
      packet->fragmentOffset |= HTONS(IPV4_FLAG_DF);
 8005954:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8005958:	80e0      	strh	r0, [r4, #6]
   }

   //Check whether the TTL value is zero
   if(packet->timeToLive == 0)
 800595a:	b913      	cbnz	r3, 8005962 <ipv4SendPacket+0xa6>
   {
      //Use default time-to-live value
      packet->timeToLive = interface->ipv4Context.defaultTtl;
 800595c:	f897 3190 	ldrb.w	r3, [r7, #400]	@ 0x190
 8005960:	7223      	strb	r3, [r4, #8]
   }

   //Calculate IP header checksum
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
      packet->headerLength * 4);
 8005962:	7822      	ldrb	r2, [r4, #0]
 8005964:	f002 020f 	and.w	r2, r2, #15
   packet->headerChecksum = ipCalcChecksumEx(buffer, offset,
 8005968:	0092      	lsls	r2, r2, #2
 800596a:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800596c:	4650      	mov	r0, sl
 800596e:	f7ff fdcd 	bl	800550c <ipCalcChecksumEx>
 8005972:	8160      	strh	r0, [r4, #10]

   //Ensure the source address is valid
   error = ipv4CheckSourceAddr(interface, pseudoHeader->srcAddr);
 8005974:	6829      	ldr	r1, [r5, #0]
 8005976:	4638      	mov	r0, r7
 8005978:	f000 fc44 	bl	8006204 <ipv4CheckSourceAddr>
   //Invalid source address?
   if(error)
 800597c:	2800      	cmp	r0, #0
 800597e:	f040 809d 	bne.w	8005abc <ipv4SendPacket+0x200>
      return error;

   //Check destination address
   if(pseudoHeader->destAddr == IPV4_UNSPECIFIED_ADDR)
 8005982:	6868      	ldr	r0, [r5, #4]
 8005984:	b940      	cbnz	r0, 8005998 <ipv4SendPacket+0xdc>
   {
      //The unspecified address must not appear on the public Internet
      error = ERROR_INVALID_ADDRESS;
 8005986:	20e4      	movs	r0, #228	@ 0xe4
 8005988:	e098      	b.n	8005abc <ipv4SendPacket+0x200>
      error = ipv4AddRouterAlertOption(buffer, &offset);
 800598a:	a90f      	add	r1, sp, #60	@ 0x3c
 800598c:	4650      	mov	r0, sl
 800598e:	f000 fb8f 	bl	80060b0 <ipv4AddRouterAlertOption>
      if(error)
 8005992:	2800      	cmp	r0, #0
 8005994:	d09f      	beq.n	80058d6 <ipv4SendPacket+0x1a>
 8005996:	e091      	b.n	8005abc <ipv4SendPacket+0x200>
   }
   else if(ipv4IsLocalHostAddr(pseudoHeader->destAddr))
 8005998:	f000 fc84 	bl	80062a4 <ipv4IsLocalHostAddr>
 800599c:	b110      	cbz	r0, 80059a4 <ipv4SendPacket+0xe8>
         }
      }
#else
      //Addresses within the entire 127.0.0.0/8 block do not legitimately
      //appear on any network anywhere
      error = ERROR_NO_ROUTE;
 800599e:	f240 2009 	movw	r0, #521	@ 0x209
 80059a2:	e08b      	b.n	8005abc <ipv4SendPacket+0x200>
   }
   else
   {
#if (ETH_SUPPORT == ENABLED)
      //Point to the physical interface
      physicalInterface = nicGetPhysicalInterface(interface);
 80059a4:	4638      	mov	r0, r7
 80059a6:	f007 f8a7 	bl	800caf8 <nicGetPhysicalInterface>

      //Ethernet interface?
      if(physicalInterface->nicDriver != NULL &&
 80059aa:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80059ac:	b113      	cbz	r3, 80059b4 <ipv4SendPacket+0xf8>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 80059ae:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d008      	beq.n	80059c6 <ipv4SendPacket+0x10a>
         error = pppSendFrame(interface, buffer, offset, PPP_PROTOCOL_IP);
      }
      else
#endif
      //IPv4 interface?
      if(interface->nicDriver != NULL &&
 80059b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 8083 	beq.w	8005ac2 <ipv4SendPacket+0x206>
         interface->nicDriver->type == NIC_TYPE_IPV4)
 80059bc:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d06f      	beq.n	8005aa2 <ipv4SendPacket+0x1e6>
      }
      //Unknown interface type?
      else
      {
         //Report an error
         error = ERROR_INVALID_INTERFACE;
 80059c2:	2007      	movs	r0, #7
 80059c4:	e07a      	b.n	8005abc <ipv4SendPacket+0x200>
         destIpAddr = pseudoHeader->destAddr;
 80059c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
 80059ca:	f8cd 800c 	str.w	r8, [sp, #12]
         if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 80059ce:	f106 041a 	add.w	r4, r6, #26
 80059d2:	2206      	movs	r2, #6
 80059d4:	493c      	ldr	r1, [pc, #240]	@ (8005ac8 <ipv4SendPacket+0x20c>)
 80059d6:	4620      	mov	r0, r4
 80059d8:	f00f f92a 	bl	8014c30 <memcmp>
 80059dc:	b950      	cbnz	r0, 80059f4 <ipv4SendPacket+0x138>
         else if(ipv4IsBroadcastAddr(interface, destIpAddr))
 80059de:	4641      	mov	r1, r8
 80059e0:	4638      	mov	r0, r7
 80059e2:	f000 fbd6 	bl	8006192 <ipv4IsBroadcastAddr>
 80059e6:	b1a8      	cbz	r0, 8005a14 <ipv4SendPacket+0x158>
            ancillary->destMacAddr = MAC_BROADCAST_ADDR;
 80059e8:	4b38      	ldr	r3, [pc, #224]	@ (8005acc <ipv4SendPacket+0x210>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	f8c6 201a 	str.w	r2, [r6, #26]
 80059f0:	889b      	ldrh	r3, [r3, #4]
 80059f2:	83f3      	strh	r3, [r6, #30]
            ipv4UpdateOutStats(interface, destIpAddr, length);
 80059f4:	465a      	mov	r2, fp
 80059f6:	9903      	ldr	r1, [sp, #12]
 80059f8:	4638      	mov	r0, r7
 80059fa:	f000 fdb4 	bl	8006566 <ipv4UpdateOutStats>
            error = ethSendFrame(interface, &ancillary->destMacAddr,
 80059fe:	9601      	str	r6, [sp, #4]
 8005a00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	4653      	mov	r3, sl
 8005a06:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005a0a:	4621      	mov	r1, r4
 8005a0c:	4638      	mov	r0, r7
 8005a0e:	f7fd fa57 	bl	8002ec0 <ethSendFrame>
 8005a12:	e053      	b.n	8005abc <ipv4SendPacket+0x200>
         else if(ipv4IsMulticastAddr(destIpAddr))
 8005a14:	9803      	ldr	r0, [sp, #12]
 8005a16:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 8005a1a:	2be0      	cmp	r3, #224	@ 0xe0
 8005a1c:	d01d      	beq.n	8005a5a <ipv4SendPacket+0x19e>
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 8005a1e:	682b      	ldr	r3, [r5, #0]
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <ipv4SendPacket+0x178>
            ipv4IsLinkLocalAddr(destIpAddr))
 8005a2a:	b282      	uxth	r2, r0
         else if(ipv4IsLinkLocalAddr(pseudoHeader->srcAddr) ||
 8005a2c:	f64f 63a9 	movw	r3, #65193	@ 0xfea9
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d116      	bne.n	8005a62 <ipv4SendPacket+0x1a6>
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 8005a34:	4622      	mov	r2, r4
 8005a36:	4601      	mov	r1, r0
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f7fb f8af 	bl	8000b9c <arpResolve>
         if(error == NO_ERROR)
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d0d8      	beq.n	80059f4 <ipv4SendPacket+0x138>
         else if(error == ERROR_IN_PROGRESS)
 8005a42:	f240 2303 	movw	r3, #515	@ 0x203
 8005a46:	4298      	cmp	r0, r3
 8005a48:	d138      	bne.n	8005abc <ipv4SendPacket+0x200>
            error = arpEnqueuePacket(interface, destIpAddr, buffer, offset,
 8005a4a:	9600      	str	r6, [sp, #0]
 8005a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a4e:	4652      	mov	r2, sl
 8005a50:	9903      	ldr	r1, [sp, #12]
 8005a52:	4638      	mov	r0, r7
 8005a54:	f7fa ff10 	bl	8000878 <arpEnqueuePacket>
      {
 8005a58:	e030      	b.n	8005abc <ipv4SendPacket+0x200>
            error = ipv4MapMulticastAddrToMac(destIpAddr, &ancillary->destMacAddr);
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	f000 fd9f 	bl	800659e <ipv4MapMulticastAddrToMac>
 8005a60:	e7ed      	b.n	8005a3e <ipv4SendPacket+0x182>
         else if(ipv4IsOnLink(interface, destIpAddr))
 8005a62:	4601      	mov	r1, r0
 8005a64:	4638      	mov	r0, r7
 8005a66:	f000 fb71 	bl	800614c <ipv4IsOnLink>
 8005a6a:	b938      	cbnz	r0, 8005a7c <ipv4SendPacket+0x1c0>
         else if(ancillary->dontRoute)
 8005a6c:	68f3      	ldr	r3, [r6, #12]
 8005a6e:	b15b      	cbz	r3, 8005a88 <ipv4SendPacket+0x1cc>
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 8005a70:	4622      	mov	r2, r4
 8005a72:	9903      	ldr	r1, [sp, #12]
 8005a74:	4638      	mov	r0, r7
 8005a76:	f7fb f891 	bl	8000b9c <arpResolve>
 8005a7a:	e7e0      	b.n	8005a3e <ipv4SendPacket+0x182>
            error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	9903      	ldr	r1, [sp, #12]
 8005a80:	4638      	mov	r0, r7
 8005a82:	f7fb f88b 	bl	8000b9c <arpResolve>
 8005a86:	e7da      	b.n	8005a3e <ipv4SendPacket+0x182>
            error = ipv4SelectDefaultGateway(interface, pseudoHeader->srcAddr,
 8005a88:	aa03      	add	r2, sp, #12
 8005a8a:	6829      	ldr	r1, [r5, #0]
 8005a8c:	4638      	mov	r0, r7
 8005a8e:	f000 fb24 	bl	80060da <ipv4SelectDefaultGateway>
            if(!error)
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d1d5      	bne.n	8005a42 <ipv4SendPacket+0x186>
               error = arpResolve(interface, destIpAddr, &ancillary->destMacAddr);
 8005a96:	4622      	mov	r2, r4
 8005a98:	9903      	ldr	r1, [sp, #12]
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f7fb f87e 	bl	8000b9c <arpResolve>
 8005aa0:	e7cd      	b.n	8005a3e <ipv4SendPacket+0x182>
         ipv4UpdateOutStats(interface, pseudoHeader->destAddr, length);
 8005aa2:	465a      	mov	r2, fp
 8005aa4:	6869      	ldr	r1, [r5, #4]
 8005aa6:	4638      	mov	r0, r7
 8005aa8:	f000 fd5d 	bl	8006566 <ipv4UpdateOutStats>
         error = nicSendPacket(interface, buffer, offset, ancillary);
 8005aac:	4633      	mov	r3, r6
 8005aae:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005ab0:	4651      	mov	r1, sl
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	f007 f83a 	bl	800cb2c <nicSendPacket>
 8005ab8:	e000      	b.n	8005abc <ipv4SendPacket+0x200>
      return ERROR_INVALID_PARAMETER;
 8005aba:	2002      	movs	r0, #2
      }
   }

   //Return status code
   return error;
}
 8005abc:	b005      	add	sp, #20
 8005abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
         error = ERROR_INVALID_INTERFACE;
 8005ac2:	2007      	movs	r0, #7
 8005ac4:	e7fa      	b.n	8005abc <ipv4SendPacket+0x200>
 8005ac6:	bf00      	nop
 8005ac8:	08019ea0 	.word	0x08019ea0
 8005acc:	08019eb0 	.word	0x08019eb0

08005ad0 <ipv4SendDatagram>:
{
 8005ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	4604      	mov	r4, r0
 8005ad8:	460f      	mov	r7, r1
 8005ada:	4615      	mov	r5, r2
 8005adc:	461e      	mov	r6, r3
 8005ade:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
   id = interface->ipv4Context.identification++;
 8005ae2:	f8b0 819c 	ldrh.w	r8, [r0, #412]	@ 0x19c
 8005ae6:	f108 0301 	add.w	r3, r8, #1
 8005aea:	f8a0 319c 	strh.w	r3, [r0, #412]	@ 0x19c
   length = netBufferGetLength(buffer) - offset;
 8005aee:	4610      	mov	r0, r2
 8005af0:	f006 fac2 	bl	800c078 <netBufferGetLength>
 8005af4:	eba0 0c06 	sub.w	ip, r0, r6
   if((length + sizeof(Ipv4Header)) <= interface->ipv4Context.linkMtu)
 8005af8:	f10c 0c14 	add.w	ip, ip, #20
 8005afc:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8005b00:	459c      	cmp	ip, r3
 8005b02:	d907      	bls.n	8005b14 <ipv4SendDatagram+0x44>
      if(!ancillary->dontFrag)
 8005b04:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005b08:	b17b      	cbz	r3, 8005b2a <ipv4SendDatagram+0x5a>
         error = ERROR_MESSAGE_TOO_LONG;
 8005b0a:	f44f 7083 	mov.w	r0, #262	@ 0x106
}
 8005b0e:	b005      	add	sp, #20
 8005b10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      error = ipv4SendPacket(interface, pseudoHeader, id, 0, buffer,
 8005b14:	f8cd 9008 	str.w	r9, [sp, #8]
 8005b18:	9601      	str	r6, [sp, #4]
 8005b1a:	9500      	str	r5, [sp, #0]
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	4642      	mov	r2, r8
 8005b20:	4639      	mov	r1, r7
 8005b22:	4620      	mov	r0, r4
 8005b24:	f7ff feca 	bl	80058bc <ipv4SendPacket>
 8005b28:	e7f1      	b.n	8005b0e <ipv4SendDatagram+0x3e>
         error = ipv4FragmentDatagram(interface, pseudoHeader, id, buffer,
 8005b2a:	f8cd 9004 	str.w	r9, [sp, #4]
 8005b2e:	9600      	str	r6, [sp, #0]
 8005b30:	462b      	mov	r3, r5
 8005b32:	4642      	mov	r2, r8
 8005b34:	4639      	mov	r1, r7
 8005b36:	4620      	mov	r0, r4
 8005b38:	f000 f85b 	bl	8005bf2 <ipv4FragmentDatagram>
 8005b3c:	e7e7      	b.n	8005b0e <ipv4SendDatagram+0x3e>
	...

08005b40 <ipv4StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv4 address
 * @return Error code
 **/

error_t ipv4StringToAddr(const char_t *str, Ipv4Addr *ipAddr)
{
 8005b40:	b510      	push	{r4, lr}
   error_t error;
   int_t i = 0;
   int_t value = -1;
 8005b42:	f04f 33ff 	mov.w	r3, #4294967295
   int_t i = 0;
 8005b46:	f04f 0e00 	mov.w	lr, #0
 8005b4a:	e007      	b.n	8005b5c <ipv4StringToAddr+0x1c>
         {
            value = 0;
         }

         //Update the value of the current byte
         value = (value * 10) + (*str - '0');
 8005b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b50:	3a30      	subs	r2, #48	@ 0x30
 8005b52:	eb02 0343 	add.w	r3, r2, r3, lsl #1

         //The resulting value shall be in range 0 to 255
         if(value > 255)
 8005b56:	2bff      	cmp	r3, #255	@ 0xff
 8005b58:	dc25      	bgt.n	8005ba6 <ipv4StringToAddr+0x66>
         error = ERROR_INVALID_SYNTAX;
         break;
      }

      //Point to the next character
      str++;
 8005b5a:	3001      	adds	r0, #1
      if(osIsdigit(*str))
 8005b5c:	7802      	ldrb	r2, [r0, #0]
 8005b5e:	4c16      	ldr	r4, [pc, #88]	@ (8005bb8 <ipv4StringToAddr+0x78>)
 8005b60:	f814 c002 	ldrb.w	ip, [r4, r2]
 8005b64:	f01c 0f04 	tst.w	ip, #4
 8005b68:	d003      	beq.n	8005b72 <ipv4StringToAddr+0x32>
         if(value < 0)
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	daee      	bge.n	8005b4c <ipv4StringToAddr+0xc>
            value = 0;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	e7ec      	b.n	8005b4c <ipv4StringToAddr+0xc>
      else if(*str == '.' && i < 4)
 8005b72:	2a2e      	cmp	r2, #46	@ 0x2e
 8005b74:	d10b      	bne.n	8005b8e <ipv4StringToAddr+0x4e>
 8005b76:	f1be 0f03 	cmp.w	lr, #3
 8005b7a:	dc08      	bgt.n	8005b8e <ipv4StringToAddr+0x4e>
         if(value < 0)
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	db14      	blt.n	8005baa <ipv4StringToAddr+0x6a>
         ((uint8_t *) ipAddr)[i++] = value;
 8005b80:	f801 300e 	strb.w	r3, [r1, lr]
 8005b84:	f10e 0e01 	add.w	lr, lr, #1
         value = -1;
 8005b88:	f04f 33ff 	mov.w	r3, #4294967295
 8005b8c:	e7e5      	b.n	8005b5a <ipv4StringToAddr+0x1a>
      else if(*str == '\0' && i == 3)
 8005b8e:	b972      	cbnz	r2, 8005bae <ipv4StringToAddr+0x6e>
 8005b90:	f1be 0f03 	cmp.w	lr, #3
 8005b94:	d001      	beq.n	8005b9a <ipv4StringToAddr+0x5a>
         error = ERROR_INVALID_SYNTAX;
 8005b96:	2069      	movs	r0, #105	@ 0x69
 8005b98:	e006      	b.n	8005ba8 <ipv4StringToAddr+0x68>
         if(value < 0)
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	db09      	blt.n	8005bb2 <ipv4StringToAddr+0x72>
            ((uint8_t *) ipAddr)[i] = value;
 8005b9e:	f801 300e 	strb.w	r3, [r1, lr]
            error = NO_ERROR;
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	e000      	b.n	8005ba8 <ipv4StringToAddr+0x68>
            error = ERROR_INVALID_SYNTAX;
 8005ba6:	2069      	movs	r0, #105	@ 0x69
   }

   //Return status code
   return error;
}
 8005ba8:	bd10      	pop	{r4, pc}
            error = ERROR_INVALID_SYNTAX;
 8005baa:	2069      	movs	r0, #105	@ 0x69
 8005bac:	e7fc      	b.n	8005ba8 <ipv4StringToAddr+0x68>
         error = ERROR_INVALID_SYNTAX;
 8005bae:	2069      	movs	r0, #105	@ 0x69
 8005bb0:	e7fa      	b.n	8005ba8 <ipv4StringToAddr+0x68>
            error = ERROR_INVALID_SYNTAX;
 8005bb2:	2069      	movs	r0, #105	@ 0x69
 8005bb4:	e7f8      	b.n	8005ba8 <ipv4StringToAddr+0x68>
 8005bb6:	bf00      	nop
 8005bb8:	0801a972 	.word	0x0801a972

08005bbc <ipv4AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv4 address
 * @return Pointer to the formatted string
 **/

char_t *ipv4AddrToString(Ipv4Addr ipAddr, char_t *str)
{
 8005bbc:	b510      	push	{r4, lr}
 8005bbe:	b082      	sub	sp, #8
   uint8_t *p;
   static char_t buffer[16];

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 8005bc0:	460c      	mov	r4, r1
 8005bc2:	b171      	cbz	r1, 8005be2 <ipv4AddrToString+0x26>
      str = buffer;

   //Cast the address to byte array
   p = (uint8_t *) &ipAddr;
   //Format IPv4 address
   osSprintf(str, "%" PRIu8 ".%" PRIu8 ".%" PRIu8 ".%" PRIu8 "", p[0], p[1], p[2], p[3]);
 8005bc4:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8005bc8:	0e02      	lsrs	r2, r0, #24
 8005bca:	9201      	str	r2, [sp, #4]
 8005bcc:	9300      	str	r3, [sp, #0]
 8005bce:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8005bd2:	b2c2      	uxtb	r2, r0
 8005bd4:	4904      	ldr	r1, [pc, #16]	@ (8005be8 <ipv4AddrToString+0x2c>)
 8005bd6:	4620      	mov	r0, r4
 8005bd8:	f00e ff6e 	bl	8014ab8 <sprintf>

   //Return a pointer to the formatted string
   return str;
}
 8005bdc:	4620      	mov	r0, r4
 8005bde:	b002      	add	sp, #8
 8005be0:	bd10      	pop	{r4, pc}
      str = buffer;
 8005be2:	4c02      	ldr	r4, [pc, #8]	@ (8005bec <ipv4AddrToString+0x30>)
 8005be4:	e7ee      	b.n	8005bc4 <ipv4AddrToString+0x8>
 8005be6:	bf00      	nop
 8005be8:	0801a46c 	.word	0x0801a46c
 8005bec:	20000b08 	.word	0x20000b08

08005bf0 <ipv4DumpHeader>:
   TRACE_DEBUG("  Time To Live = %" PRIu8 "\r\n", ipHeader->timeToLive);
   TRACE_DEBUG("  Protocol = %" PRIu8 "\r\n", ipHeader->protocol);
   TRACE_DEBUG("  Header Checksum = 0x%04" PRIX16 "\r\n", ntohs(ipHeader->headerChecksum));
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv4AddrToString(ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv4AddrToString(ipHeader->destAddr, NULL));
}
 8005bf0:	4770      	bx	lr

08005bf2 <ipv4FragmentDatagram>:
 **/

error_t ipv4FragmentDatagram(NetInterface *interface,
   const Ipv4PseudoHeader *pseudoHeader, uint16_t id, const NetBuffer *payload,
   size_t payloadOffset, NetTxAncillary *ancillary)
{
 8005bf2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf6:	b08b      	sub	sp, #44	@ 0x2c
 8005bf8:	4682      	mov	sl, r0
 8005bfa:	9105      	str	r1, [sp, #20]
 8005bfc:	9206      	str	r2, [sp, #24]
 8005bfe:	9307      	str	r3, [sp, #28]
 8005c00:	f8dd b050 	ldr.w	fp, [sp, #80]	@ 0x50
   //transmitted
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 8005c04:	4618      	mov	r0, r3
 8005c06:	f006 fa37 	bl	800c078 <netBufferGetLength>
 8005c0a:	eba0 090b 	sub.w	r9, r0, fp

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 8005c0e:	a909      	add	r1, sp, #36	@ 0x24
 8005c10:	2000      	movs	r0, #0
 8005c12:	f7ff fcce 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(!fragment)
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d047      	beq.n	8005caa <ipv4FragmentDatagram+0xb8>
 8005c1a:	4607      	mov	r7, r0
      return ERROR_OUT_OF_MEMORY;

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = interface->ipv4Context.linkMtu - sizeof(Ipv4Header);
 8005c1c:	f8da 3188 	ldr.w	r3, [sl, #392]	@ 0x188
 8005c20:	3b14      	subs	r3, #20
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 8005c22:	f023 0807 	bic.w	r8, r3, #7

   //Initialize error code
   error = NO_ERROR;

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 8005c26:	2400      	movs	r4, #0
 8005c28:	4623      	mov	r3, r4
 8005c2a:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 8005c2c:	e016      	b.n	8005c5c <ipv4FragmentDatagram+0x6a>
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8005c2e:	4643      	mov	r3, r8
 8005c30:	eb04 020b 	add.w	r2, r4, fp
 8005c34:	9907      	ldr	r1, [sp, #28]
 8005c36:	4638      	mov	r0, r7
 8005c38:	f006 fadd 	bl	800c1f6 <netBufferConcat>

         //Fragmented packets must have the MF flag set
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
            (offset / 8), fragment, fragmentOffset, ancillary);
 8005c3c:	08e3      	lsrs	r3, r4, #3
         error = ipv4SendPacket(interface, pseudoHeader, id, IPV4_FLAG_MF |
 8005c3e:	9502      	str	r5, [sp, #8]
 8005c40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c42:	9201      	str	r2, [sp, #4]
 8005c44:	9700      	str	r7, [sp, #0]
 8005c46:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005c4a:	9a06      	ldr	r2, [sp, #24]
 8005c4c:	9905      	ldr	r1, [sp, #20]
 8005c4e:	4650      	mov	r0, sl
 8005c50:	f7ff fe34 	bl	80058bc <ipv4SendPacket>
 8005c54:	4603      	mov	r3, r0
         length = maxFragmentSize;
 8005c56:	4646      	mov	r6, r8
      }

      //Failed to send current IP packet?
      if(error)
 8005c58:	b9fb      	cbnz	r3, 8005c9a <ipv4FragmentDatagram+0xa8>
   for(offset = 0; offset < payloadLen; offset += length)
 8005c5a:	4434      	add	r4, r6
 8005c5c:	454c      	cmp	r4, r9
 8005c5e:	d21c      	bcs.n	8005c9a <ipv4FragmentDatagram+0xa8>
      error = netBufferSetLength(fragment, fragmentOffset);
 8005c60:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005c62:	4638      	mov	r0, r7
 8005c64:	f006 fa15 	bl	800c092 <netBufferSetLength>
      if(error)
 8005c68:	4603      	mov	r3, r0
 8005c6a:	b9b0      	cbnz	r0, 8005c9a <ipv4FragmentDatagram+0xa8>
      if((payloadLen - offset) <= maxFragmentSize)
 8005c6c:	eba9 0604 	sub.w	r6, r9, r4
 8005c70:	4546      	cmp	r6, r8
 8005c72:	d8dc      	bhi.n	8005c2e <ipv4FragmentDatagram+0x3c>
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8005c74:	4633      	mov	r3, r6
 8005c76:	eb04 020b 	add.w	r2, r4, fp
 8005c7a:	9907      	ldr	r1, [sp, #28]
 8005c7c:	4638      	mov	r0, r7
 8005c7e:	f006 faba 	bl	800c1f6 <netBufferConcat>
         error = ipv4SendPacket(interface, pseudoHeader, id, offset / 8,
 8005c82:	9502      	str	r5, [sp, #8]
 8005c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c86:	9301      	str	r3, [sp, #4]
 8005c88:	9700      	str	r7, [sp, #0]
 8005c8a:	08e3      	lsrs	r3, r4, #3
 8005c8c:	9a06      	ldr	r2, [sp, #24]
 8005c8e:	9905      	ldr	r1, [sp, #20]
 8005c90:	4650      	mov	r0, sl
 8005c92:	f7ff fe13 	bl	80058bc <ipv4SendPacket>
 8005c96:	4603      	mov	r3, r0
 8005c98:	e7de      	b.n	8005c58 <ipv4FragmentDatagram+0x66>
      IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 8005c9a:	461d      	mov	r5, r3
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	f006 fa63 	bl	800c168 <netBufferFree>
   //Return status code
   return error;
}
 8005ca2:	4628      	mov	r0, r5
 8005ca4:	b00b      	add	sp, #44	@ 0x2c
 8005ca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_OUT_OF_MEMORY;
 8005caa:	2564      	movs	r5, #100	@ 0x64
 8005cac:	e7f9      	b.n	8005ca2 <ipv4FragmentDatagram+0xb0>

08005cae <ipv4FlushFragQueue>:
 * @brief Flush IPv4 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv4FlushFragQueue(NetInterface *interface)
{
 8005cae:	b538      	push	{r3, r4, r5, lr}
 8005cb0:	4605      	mov	r5, r0
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005cb2:	2400      	movs	r4, #0
 8005cb4:	e00a      	b.n	8005ccc <ipv4FlushFragQueue+0x1e>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv4Context.fragQueue[i].buffer, 0);
 8005cb6:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8005cba:	0100      	lsls	r0, r0, #4
 8005cbc:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8005cc0:	4428      	add	r0, r5
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	3004      	adds	r0, #4
 8005cc6:	f006 f9e4 	bl	800c092 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005cca:	3401      	adds	r4, #1
 8005ccc:	2c03      	cmp	r4, #3
 8005cce:	d9f2      	bls.n	8005cb6 <ipv4FlushFragQueue+0x8>
   }
}
 8005cd0:	bd38      	pop	{r3, r4, r5, pc}

08005cd2 <ipv4FindHole>:
 * @return A pointer to the hole descriptor is returned if the specified
 *   offset is valid. Otherwise NULL is returned
 **/

Ipv4HoleDesc *ipv4FindHole(Ipv4FragDesc *frag, uint16_t offset)
{
 8005cd2:	b508      	push	{r3, lr}
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->headerLength + offset, 0);
 8005cd4:	6843      	ldr	r3, [r0, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4419      	add	r1, r3
 8005cda:	3010      	adds	r0, #16
 8005cdc:	f006 fa6c 	bl	800c1b8 <netBufferAt>
}
 8005ce0:	bd08      	pop	{r3, pc}

08005ce2 <ipv4FragTick>:
{
 8005ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	4606      	mov	r6, r0
   time = osGetSystemTime();
 8005cea:	f7fa fd87 	bl	80007fc <osGetSystemTime>
 8005cee:	4607      	mov	r7, r0
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005cf0:	2400      	movs	r4, #0
 8005cf2:	e012      	b.n	8005d1a <ipv4FragTick+0x38>
                  icmpSendErrorMessage(interface, ICMP_TYPE_TIME_EXCEEDED,
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	9301      	str	r3, [sp, #4]
 8005cf8:	9500      	str	r5, [sp, #0]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	210b      	movs	r1, #11
 8005cfe:	4630      	mov	r0, r6
 8005d00:	f7fe f9fc 	bl	80040fc <icmpSendErrorMessage>
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005d04:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 8005d08:	0100      	lsls	r0, r0, #4
 8005d0a:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8005d0e:	4430      	add	r0, r6
 8005d10:	2100      	movs	r1, #0
 8005d12:	3004      	adds	r0, #4
 8005d14:	f006 f9bd 	bl	800c092 <netBufferSetLength>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005d18:	3401      	adds	r4, #1
 8005d1a:	2c03      	cmp	r4, #3
 8005d1c:	d83b      	bhi.n	8005d96 <ipv4FragTick+0xb4>
      Ipv4FragDesc *frag = &interface->ipv4Context.fragQueue[i];
 8005d1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005d22:	011b      	lsls	r3, r3, #4
 8005d24:	f503 7302 	add.w	r3, r3, #520	@ 0x208
 8005d28:	4433      	add	r3, r6
 8005d2a:	1d1d      	adds	r5, r3, #4
      if(frag->buffer.chunkCount > 0)
 8005d2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005d30:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8005d34:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ed      	beq.n	8005d18 <ipv4FragTick+0x36>
         if((time - frag->timestamp) >= IPV4_FRAG_TIME_TO_LIVE)
 8005d3c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8005d40:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8005d44:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005d48:	1afb      	subs	r3, r7, r3
 8005d4a:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d9e2      	bls.n	8005d18 <ipv4FragTick+0x36>
            ipv4DumpHeader(frag->buffer.chunk[0].address);
 8005d52:	eb04 0884 	add.w	r8, r4, r4, lsl #2
 8005d56:	eb06 1808 	add.w	r8, r6, r8, lsl #4
 8005d5a:	f8d8 0224 	ldr.w	r0, [r8, #548]	@ 0x224
 8005d5e:	f7ff ff47 	bl	8005bf0 <ipv4DumpHeader>
            hole = ipv4FindHole(frag, frag->firstHole);
 8005d62:	f8b8 1218 	ldrh.w	r1, [r8, #536]	@ 0x218
 8005d66:	4628      	mov	r0, r5
 8005d68:	f7ff ffb3 	bl	8005cd2 <ipv4FindHole>
            if(hole != NULL && hole->first > 0)
 8005d6c:	2800      	cmp	r0, #0
 8005d6e:	d0c9      	beq.n	8005d04 <ipv4FragTick+0x22>
 8005d70:	8803      	ldrh	r3, [r0, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0c6      	beq.n	8005d04 <ipv4FragTick+0x22>
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8005d76:	eb04 0584 	add.w	r5, r4, r4, lsl #2
 8005d7a:	012d      	lsls	r5, r5, #4
 8005d7c:	f505 7506 	add.w	r5, r5, #536	@ 0x218
 8005d80:	4435      	add	r5, r6
 8005d82:	3504      	adds	r5, #4
                  frag->headerLength + hole->first);
 8005d84:	f8d8 1210 	ldr.w	r1, [r8, #528]	@ 0x210
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8005d88:	4419      	add	r1, r3
 8005d8a:	4628      	mov	r0, r5
 8005d8c:	f006 f981 	bl	800c092 <netBufferSetLength>
               if(!error)
 8005d90:	2800      	cmp	r0, #0
 8005d92:	d1b7      	bne.n	8005d04 <ipv4FragTick+0x22>
 8005d94:	e7ae      	b.n	8005cf4 <ipv4FragTick+0x12>
}
 8005d96:	b002      	add	sp, #8
 8005d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005d9c <ipv4SearchFragQueue>:
{
 8005d9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005da0:	4605      	mov	r5, r0
 8005da2:	460e      	mov	r6, r1
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005da4:	2700      	movs	r7, #0
 8005da6:	e000      	b.n	8005daa <ipv4SearchFragQueue+0xe>
 8005da8:	3701      	adds	r7, #1
 8005daa:	2f03      	cmp	r7, #3
 8005dac:	d82a      	bhi.n	8005e04 <ipv4SearchFragQueue+0x68>
      frag = &interface->ipv4Context.fragQueue[i];
 8005dae:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8005db2:	0124      	lsls	r4, r4, #4
 8005db4:	f504 7402 	add.w	r4, r4, #520	@ 0x208
 8005db8:	442c      	add	r4, r5
 8005dba:	3404      	adds	r4, #4
      if(frag->buffer.chunkCount > 0)
 8005dbc:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8005dc0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8005dc4:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d0ed      	beq.n	8005da8 <ipv4SearchFragQueue+0xc>
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0, 0);
 8005dcc:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8005dd0:	0100      	lsls	r0, r0, #4
 8005dd2:	f500 7006 	add.w	r0, r0, #536	@ 0x218
 8005dd6:	4428      	add	r0, r5
 8005dd8:	2200      	movs	r2, #0
 8005dda:	4611      	mov	r1, r2
 8005ddc:	3004      	adds	r0, #4
 8005dde:	f006 f9eb 	bl	800c1b8 <netBufferAt>
         if(datagram->srcAddr != packet->srcAddr)
 8005de2:	68c2      	ldr	r2, [r0, #12]
 8005de4:	68f3      	ldr	r3, [r6, #12]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d1de      	bne.n	8005da8 <ipv4SearchFragQueue+0xc>
         if(datagram->destAddr != packet->destAddr)
 8005dea:	6902      	ldr	r2, [r0, #16]
 8005dec:	6933      	ldr	r3, [r6, #16]
 8005dee:	429a      	cmp	r2, r3
 8005df0:	d1da      	bne.n	8005da8 <ipv4SearchFragQueue+0xc>
         if(datagram->identification != packet->identification)
 8005df2:	8882      	ldrh	r2, [r0, #4]
 8005df4:	88b3      	ldrh	r3, [r6, #4]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	d1d6      	bne.n	8005da8 <ipv4SearchFragQueue+0xc>
         if(datagram->protocol != packet->protocol)
 8005dfa:	7a42      	ldrb	r2, [r0, #9]
 8005dfc:	7a73      	ldrb	r3, [r6, #9]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d1d2      	bne.n	8005da8 <ipv4SearchFragQueue+0xc>
 8005e02:	e059      	b.n	8005eb8 <ipv4SearchFragQueue+0x11c>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005e04:	2700      	movs	r7, #0
 8005e06:	2f03      	cmp	r7, #3
 8005e08:	d855      	bhi.n	8005eb6 <ipv4SearchFragQueue+0x11a>
      frag = &interface->ipv4Context.fragQueue[i];
 8005e0a:	eb07 0487 	add.w	r4, r7, r7, lsl #2
 8005e0e:	0124      	lsls	r4, r4, #4
 8005e10:	f504 7402 	add.w	r4, r4, #520	@ 0x208
 8005e14:	442c      	add	r4, r5
 8005e16:	3404      	adds	r4, #4
      if(!frag->buffer.chunkCount)
 8005e18:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8005e1c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8005e20:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005e24:	b10b      	cbz	r3, 8005e2a <ipv4SearchFragQueue+0x8e>
   for(i = 0; i < IPV4_MAX_FRAG_DATAGRAMS; i++)
 8005e26:	3701      	adds	r7, #1
 8005e28:	e7ed      	b.n	8005e06 <ipv4SearchFragQueue+0x6a>
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8005e2a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8005e2e:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8005e32:	2207      	movs	r2, #7
 8005e34:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8005e38:	eb07 0887 	add.w	r8, r7, r7, lsl #2
 8005e3c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8005e40:	f508 7806 	add.w	r8, r8, #536	@ 0x218
 8005e44:	44a8      	add	r8, r5
 8005e46:	f108 0804 	add.w	r8, r8, #4
 8005e4a:	f240 6106 	movw	r1, #1542	@ 0x606
 8005e4e:	4640      	mov	r0, r8
 8005e50:	f006 f91f 	bl	800c092 <netBufferSetLength>
         if(error)
 8005e54:	bb48      	cbnz	r0, 8005eaa <ipv4SearchFragQueue+0x10e>
         frag->headerLength = packet->headerLength * 4;
 8005e56:	7833      	ldrb	r3, [r6, #0]
 8005e58:	f003 030f 	and.w	r3, r3, #15
 8005e5c:	009b      	lsls	r3, r3, #2
 8005e5e:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
 8005e62:	eb05 1a0a 	add.w	sl, r5, sl, lsl #4
 8005e66:	f8ca 3210 	str.w	r3, [sl, #528]	@ 0x210
         frag->dataLen = 0;
 8005e6a:	f04f 0900 	mov.w	r9, #0
 8005e6e:	f8ca 9214 	str.w	r9, [sl, #532]	@ 0x214
         frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8005e72:	f8aa 3228 	strh.w	r3, [sl, #552]	@ 0x228
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 8005e76:	4632      	mov	r2, r6
 8005e78:	4649      	mov	r1, r9
 8005e7a:	4640      	mov	r0, r8
 8005e7c:	f006 fa85 	bl	800c38a <netBufferWrite>
         frag->timestamp = osGetSystemTime();
 8005e80:	f7fa fcbc 	bl	80007fc <osGetSystemTime>
 8005e84:	f8ca 020c 	str.w	r0, [sl, #524]	@ 0x20c
         frag->firstHole = 0;
 8005e88:	f8aa 9218 	strh.w	r9, [sl, #536]	@ 0x218
         hole = ipv4FindHole(frag, frag->firstHole);
 8005e8c:	4649      	mov	r1, r9
 8005e8e:	4620      	mov	r0, r4
 8005e90:	f7ff ff1f 	bl	8005cd2 <ipv4FindHole>
         hole->first = 0;
 8005e94:	f880 9000 	strb.w	r9, [r0]
 8005e98:	f880 9001 	strb.w	r9, [r0, #1]
         hole->last = IPV4_INFINITY;
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	7083      	strb	r3, [r0, #2]
 8005ea2:	70c3      	strb	r3, [r0, #3]
         hole->next = IPV4_INFINITY;
 8005ea4:	7103      	strb	r3, [r0, #4]
 8005ea6:	7143      	strb	r3, [r0, #5]
         return frag;
 8005ea8:	e006      	b.n	8005eb8 <ipv4SearchFragQueue+0x11c>
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005eaa:	2100      	movs	r1, #0
 8005eac:	4640      	mov	r0, r8
 8005eae:	f006 f8f0 	bl	800c092 <netBufferSetLength>
            return NULL;
 8005eb2:	2400      	movs	r4, #0
 8005eb4:	e000      	b.n	8005eb8 <ipv4SearchFragQueue+0x11c>
   return NULL;
 8005eb6:	2400      	movs	r4, #0
}
 8005eb8:	4620      	mov	r0, r4
 8005eba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ebe <ipv4ReassembleDatagram>:
{
 8005ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ec2:	b085      	sub	sp, #20
 8005ec4:	4682      	mov	sl, r0
 8005ec6:	460d      	mov	r5, r1
 8005ec8:	9300      	str	r3, [sp, #0]
   length -= packet->headerLength * 4;
 8005eca:	780b      	ldrb	r3, [r1, #0]
 8005ecc:	f003 030f 	and.w	r3, r3, #15
 8005ed0:	eba2 0883 	sub.w	r8, r2, r3, lsl #2
   offset = ntohs(packet->fragmentOffset);
 8005ed4:	88c8      	ldrh	r0, [r1, #6]
 8005ed6:	f7fa fba1 	bl	800061c <swapInt16>
   if((offset & IPV4_FLAG_MF) != 0 && (length % 8) != 0)
 8005eda:	f410 5b00 	ands.w	fp, r0, #8192	@ 0x2000
 8005ede:	d002      	beq.n	8005ee6 <ipv4ReassembleDatagram+0x28>
 8005ee0:	f018 0f07 	tst.w	r8, #7
 8005ee4:	d10b      	bne.n	8005efe <ipv4ReassembleDatagram+0x40>
   dataFirst = (offset & IPV4_OFFSET_MASK) * 8;
 8005ee6:	f3c0 070c 	ubfx	r7, r0, #0, #13
 8005eea:	ea4f 09c7 	mov.w	r9, r7, lsl #3
   dataLast = dataFirst + (uint16_t) length;
 8005eee:	fa1f f488 	uxth.w	r4, r8
 8005ef2:	eb04 04c7 	add.w	r4, r4, r7, lsl #3
 8005ef6:	b2a4      	uxth	r4, r4
   if(dataLast < dataFirst)
 8005ef8:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
 8005efc:	d202      	bcs.n	8005f04 <ipv4ReassembleDatagram+0x46>
}
 8005efe:	b005      	add	sp, #20
 8005f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   frag = ipv4SearchFragQueue(interface, packet);
 8005f04:	4629      	mov	r1, r5
 8005f06:	4650      	mov	r0, sl
 8005f08:	f7ff ff48 	bl	8005d9c <ipv4SearchFragQueue>
   if(frag == NULL)
 8005f0c:	4606      	mov	r6, r0
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d0f5      	beq.n	8005efe <ipv4ReassembleDatagram+0x40>
   if((offset & IPV4_OFFSET_MASK) == 0)
 8005f12:	b997      	cbnz	r7, 8005f3a <ipv4ReassembleDatagram+0x7c>
      frag->headerLength = packet->headerLength * 4;
 8005f14:	782b      	ldrb	r3, [r5, #0]
 8005f16:	f003 030f 	and.w	r3, r3, #15
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	6043      	str	r3, [r0, #4]
      if((frag->headerLength + frag->dataLen) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8005f1e:	6882      	ldr	r2, [r0, #8]
 8005f20:	441a      	add	r2, r3
 8005f22:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8005f26:	d824      	bhi.n	8005f72 <ipv4ReassembleDatagram+0xb4>
      if(frag->headerLength > frag->buffer.chunk[0].size)
 8005f28:	8bc2      	ldrh	r2, [r0, #30]
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d826      	bhi.n	8005f7c <ipv4ReassembleDatagram+0xbe>
      frag->buffer.chunk[0].length = (uint16_t) frag->headerLength;
 8005f2e:	8383      	strh	r3, [r0, #28]
      netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->headerLength);
 8005f30:	462a      	mov	r2, r5
 8005f32:	2100      	movs	r1, #0
 8005f34:	3010      	adds	r0, #16
 8005f36:	f006 fa28 	bl	800c38a <netBufferWrite>
   if(dataLast > frag->dataLen)
 8005f3a:	68b3      	ldr	r3, [r6, #8]
 8005f3c:	429c      	cmp	r4, r3
 8005f3e:	d90c      	bls.n	8005f5a <ipv4ReassembleDatagram+0x9c>
      if((frag->headerLength + dataLast) > IPV4_MAX_FRAG_DATAGRAM_SIZE)
 8005f40:	6871      	ldr	r1, [r6, #4]
 8005f42:	4421      	add	r1, r4
 8005f44:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 8005f48:	d81d      	bhi.n	8005f86 <ipv4ReassembleDatagram+0xc8>
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8005f4a:	f106 0710 	add.w	r7, r6, #16
 8005f4e:	3106      	adds	r1, #6
 8005f50:	4638      	mov	r0, r7
 8005f52:	f006 f89e 	bl	800c092 <netBufferSetLength>
      if(error)
 8005f56:	b9e0      	cbnz	r0, 8005f92 <ipv4ReassembleDatagram+0xd4>
      frag->dataLen = dataLast;
 8005f58:	60b4      	str	r4, [r6, #8]
   hole = ipv4FindHole(frag, frag->firstHole);
 8005f5a:	89b1      	ldrh	r1, [r6, #12]
 8005f5c:	4630      	mov	r0, r6
 8005f5e:	f7ff feb8 	bl	8005cd2 <ipv4FindHole>
   prevHole = NULL;
 8005f62:	2700      	movs	r7, #0
 8005f64:	f8cd 8004 	str.w	r8, [sp, #4]
 8005f68:	f8cd a008 	str.w	sl, [sp, #8]
 8005f6c:	9503      	str	r5, [sp, #12]
 8005f6e:	465d      	mov	r5, fp
   while(hole != NULL)
 8005f70:	e036      	b.n	8005fe0 <ipv4ReassembleDatagram+0x122>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005f72:	2100      	movs	r1, #0
 8005f74:	3010      	adds	r0, #16
 8005f76:	f006 f88c 	bl	800c092 <netBufferSetLength>
         return;
 8005f7a:	e7c0      	b.n	8005efe <ipv4ReassembleDatagram+0x40>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	3010      	adds	r0, #16
 8005f80:	f006 f887 	bl	800c092 <netBufferSetLength>
         return;
 8005f84:	e7bb      	b.n	8005efe <ipv4ReassembleDatagram+0x40>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005f86:	2100      	movs	r1, #0
 8005f88:	f106 0010 	add.w	r0, r6, #16
 8005f8c:	f006 f881 	bl	800c092 <netBufferSetLength>
         return;
 8005f90:	e7b5      	b.n	8005efe <ipv4ReassembleDatagram+0x40>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8005f92:	2100      	movs	r1, #0
 8005f94:	4638      	mov	r0, r7
 8005f96:	f006 f87c 	bl	800c092 <netBufferSetLength>
         return;
 8005f9a:	e7b0      	b.n	8005efe <ipv4ReassembleDatagram+0x40>
            frag->firstHole = hole->next;
 8005f9c:	8883      	ldrh	r3, [r0, #4]
 8005f9e:	81b3      	strh	r3, [r6, #12]
 8005fa0:	e034      	b.n	800600c <ipv4ReassembleDatagram+0x14e>
            hole = ipv4FindHole(frag, holeFirst);
 8005fa2:	4630      	mov	r0, r6
 8005fa4:	f7ff fe95 	bl	8005cd2 <ipv4FindHole>
            hole->first = holeFirst;
 8005fa8:	f8a0 a000 	strh.w	sl, [r0]
            hole->last = dataFirst;
 8005fac:	f8a0 9002 	strh.w	r9, [r0, #2]
            if(prevHole != NULL)
 8005fb0:	b12f      	cbz	r7, 8005fbe <ipv4ReassembleDatagram+0x100>
               hole->next = prevHole->next;
 8005fb2:	88bb      	ldrh	r3, [r7, #4]
 8005fb4:	8083      	strh	r3, [r0, #4]
               prevHole->next = hole->first;
 8005fb6:	f8a7 a004 	strh.w	sl, [r7, #4]
            prevHole = hole;
 8005fba:	4607      	mov	r7, r0
 8005fbc:	e028      	b.n	8006010 <ipv4ReassembleDatagram+0x152>
               hole->next = frag->firstHole;
 8005fbe:	89b3      	ldrh	r3, [r6, #12]
 8005fc0:	8083      	strh	r3, [r0, #4]
               frag->firstHole = hole->first;
 8005fc2:	f8a6 a00c 	strh.w	sl, [r6, #12]
            prevHole = hole;
 8005fc6:	4607      	mov	r7, r0
 8005fc8:	e022      	b.n	8006010 <ipv4ReassembleDatagram+0x152>
               hole->next = frag->firstHole;
 8005fca:	89b3      	ldrh	r3, [r6, #12]
 8005fcc:	8083      	strh	r3, [r0, #4]
               frag->firstHole = hole->first;
 8005fce:	81b4      	strh	r4, [r6, #12]
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 8005fd0:	e001      	b.n	8005fd6 <ipv4ReassembleDatagram+0x118>
 8005fd2:	b377      	cbz	r7, 8006032 <ipv4ReassembleDatagram+0x174>
 8005fd4:	4638      	mov	r0, r7
 8005fd6:	8881      	ldrh	r1, [r0, #4]
 8005fd8:	4607      	mov	r7, r0
 8005fda:	4630      	mov	r0, r6
 8005fdc:	f7ff fe79 	bl	8005cd2 <ipv4FindHole>
   while(hole != NULL)
 8005fe0:	b348      	cbz	r0, 8006036 <ipv4ReassembleDatagram+0x178>
      uint16_t holeFirst = hole->first;
 8005fe2:	f8b0 a000 	ldrh.w	sl, [r0]
 8005fe6:	fa1f f18a 	uxth.w	r1, sl
      uint16_t holeLast = hole->last;
 8005fea:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8005fee:	fa1f f88b 	uxth.w	r8, fp
      if(dataFirst < holeLast && dataLast > holeFirst)
 8005ff2:	45c1      	cmp	r9, r8
 8005ff4:	bf2c      	ite	cs
 8005ff6:	2300      	movcs	r3, #0
 8005ff8:	2301      	movcc	r3, #1
 8005ffa:	428c      	cmp	r4, r1
 8005ffc:	bf98      	it	ls
 8005ffe:	2300      	movls	r3, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	d0e8      	beq.n	8005fd6 <ipv4ReassembleDatagram+0x118>
         if(prevHole != NULL)
 8006004:	2f00      	cmp	r7, #0
 8006006:	d0c9      	beq.n	8005f9c <ipv4ReassembleDatagram+0xde>
            prevHole->next = hole->next;
 8006008:	8883      	ldrh	r3, [r0, #4]
 800600a:	80bb      	strh	r3, [r7, #4]
         if(dataFirst > holeFirst)
 800600c:	4589      	cmp	r9, r1
 800600e:	d8c8      	bhi.n	8005fa2 <ipv4ReassembleDatagram+0xe4>
         if(dataLast < holeLast && (offset & IPV4_FLAG_MF) != 0)
 8006010:	4544      	cmp	r4, r8
 8006012:	d2de      	bcs.n	8005fd2 <ipv4ReassembleDatagram+0x114>
 8006014:	2d00      	cmp	r5, #0
 8006016:	d0dc      	beq.n	8005fd2 <ipv4ReassembleDatagram+0x114>
            hole = ipv4FindHole(frag, dataLast);
 8006018:	4621      	mov	r1, r4
 800601a:	4630      	mov	r0, r6
 800601c:	f7ff fe59 	bl	8005cd2 <ipv4FindHole>
            hole->first = dataLast;
 8006020:	8004      	strh	r4, [r0, #0]
            hole->last = holeLast;
 8006022:	f8a0 b002 	strh.w	fp, [r0, #2]
            if(prevHole != NULL)
 8006026:	2f00      	cmp	r7, #0
 8006028:	d0cf      	beq.n	8005fca <ipv4ReassembleDatagram+0x10c>
               hole->next = prevHole->next;
 800602a:	88bb      	ldrh	r3, [r7, #4]
 800602c:	8083      	strh	r3, [r0, #4]
               prevHole->next = hole->first;
 800602e:	80bc      	strh	r4, [r7, #4]
      hole = ipv4FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 8006030:	e7d1      	b.n	8005fd6 <ipv4ReassembleDatagram+0x118>
 8006032:	89b1      	ldrh	r1, [r6, #12]
 8006034:	e7d1      	b.n	8005fda <ipv4ReassembleDatagram+0x11c>
   netBufferWrite((NetBuffer *) &frag->buffer,
 8006036:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800603a:	f8dd a008 	ldr.w	sl, [sp, #8]
 800603e:	9d03      	ldr	r5, [sp, #12]
 8006040:	f106 0410 	add.w	r4, r6, #16
      frag->headerLength + dataFirst, IPV4_DATA(packet), length);
 8006044:	6871      	ldr	r1, [r6, #4]
 8006046:	782a      	ldrb	r2, [r5, #0]
 8006048:	f002 020f 	and.w	r2, r2, #15
   netBufferWrite((NetBuffer *) &frag->buffer,
 800604c:	4643      	mov	r3, r8
 800604e:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8006052:	4449      	add	r1, r9
 8006054:	4620      	mov	r0, r4
 8006056:	f006 f998 	bl	800c38a <netBufferWrite>
   if(ipv4FindHole(frag, frag->firstHole) == NULL)
 800605a:	89b1      	ldrh	r1, [r6, #12]
 800605c:	4630      	mov	r0, r6
 800605e:	f7ff fe38 	bl	8005cd2 <ipv4FindHole>
 8006062:	2800      	cmp	r0, #0
 8006064:	f47f af4b 	bne.w	8005efe <ipv4ReassembleDatagram+0x40>
         frag->headerLength + frag->dataLen);
 8006068:	6871      	ldr	r1, [r6, #4]
 800606a:	68b3      	ldr	r3, [r6, #8]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800606c:	4419      	add	r1, r3
 800606e:	4620      	mov	r0, r4
 8006070:	f006 f80f 	bl	800c092 <netBufferSetLength>
      if(error)
 8006074:	b120      	cbz	r0, 8006080 <ipv4ReassembleDatagram+0x1c2>
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8006076:	2100      	movs	r1, #0
 8006078:	4620      	mov	r0, r4
 800607a:	f006 f80a 	bl	800c092 <netBufferSetLength>
 800607e:	e73e      	b.n	8005efe <ipv4ReassembleDatagram+0x40>
         Ipv4Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0, 0);
 8006080:	2200      	movs	r2, #0
 8006082:	4611      	mov	r1, r2
 8006084:	4620      	mov	r0, r4
 8006086:	f006 f897 	bl	800c1b8 <netBufferAt>
 800608a:	4605      	mov	r5, r0
         datagram->totalLength = htons(frag->headerLength + frag->dataLen);
 800608c:	6870      	ldr	r0, [r6, #4]
 800608e:	68b3      	ldr	r3, [r6, #8]
 8006090:	4418      	add	r0, r3
 8006092:	b280      	uxth	r0, r0
 8006094:	f7fa fac2 	bl	800061c <swapInt16>
 8006098:	8068      	strh	r0, [r5, #2]
         datagram->fragmentOffset = 0;
 800609a:	2200      	movs	r2, #0
 800609c:	71aa      	strb	r2, [r5, #6]
 800609e:	71ea      	strb	r2, [r5, #7]
         datagram->headerChecksum = 0;
 80060a0:	72aa      	strb	r2, [r5, #10]
 80060a2:	72ea      	strb	r2, [r5, #11]
         ipv4ProcessDatagram(interface, (NetBuffer *) &frag->buffer, 0,
 80060a4:	9b00      	ldr	r3, [sp, #0]
 80060a6:	4621      	mov	r1, r4
 80060a8:	4650      	mov	r0, sl
 80060aa:	f7ff fb09 	bl	80056c0 <ipv4ProcessDatagram>
 80060ae:	e7e2      	b.n	8006076 <ipv4ReassembleDatagram+0x1b8>

080060b0 <ipv4AddRouterAlertOption>:
 * @param[in,out] offset Offset to the first payload byte
 * @return Error code
 **/

error_t ipv4AddRouterAlertOption(NetBuffer *buffer, size_t *offset)
{
 80060b0:	b508      	push	{r3, lr}
 80060b2:	460b      	mov	r3, r1
   error_t error;
   Ipv4RouterAlertOption *option;

   //Make sure there is sufficient space for the option
   if(*offset >= sizeof(Ipv4RouterAlertOption))
 80060b4:	6809      	ldr	r1, [r1, #0]
 80060b6:	2903      	cmp	r1, #3
 80060b8:	d801      	bhi.n	80060be <ipv4AddRouterAlertOption+0xe>
      error = NO_ERROR;
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 80060ba:	2002      	movs	r0, #2
   }

   //Return status code
   return error;
}
 80060bc:	bd08      	pop	{r3, pc}
      *offset -= sizeof(Ipv4RouterAlertOption);
 80060be:	3904      	subs	r1, #4
 80060c0:	6019      	str	r1, [r3, #0]
      option = netBufferAt(buffer, *offset, 0);
 80060c2:	2200      	movs	r2, #0
 80060c4:	f006 f878 	bl	800c1b8 <netBufferAt>
 80060c8:	4603      	mov	r3, r0
      option->type = IPV4_OPTION_RTRALT;
 80060ca:	2294      	movs	r2, #148	@ 0x94
 80060cc:	7002      	strb	r2, [r0, #0]
      option->length = sizeof(Ipv4RouterAlertOption);
 80060ce:	2204      	movs	r2, #4
 80060d0:	7042      	strb	r2, [r0, #1]
      option->value = HTONS(0);
 80060d2:	2000      	movs	r0, #0
 80060d4:	7098      	strb	r0, [r3, #2]
 80060d6:	70d8      	strb	r0, [r3, #3]
      error = NO_ERROR;
 80060d8:	e7f0      	b.n	80060bc <ipv4AddRouterAlertOption+0xc>

080060da <ipv4SelectDefaultGateway>:
{
   uint_t i;
   Ipv4AddrEntry *entry;

   //Loop through the list of default gateways
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 80060da:	2300      	movs	r3, #0
 80060dc:	b1a3      	cbz	r3, 8006108 <ipv4SelectDefaultGateway+0x2e>
         }
      }
   }

   //No default gateway found
   return ERROR_NO_ROUTE;
 80060de:	f240 2009 	movw	r0, #521	@ 0x209
}
 80060e2:	4770      	bx	lr
         entry->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 80060e4:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80060e8:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80060ec:	f8dc 41b0 	ldr.w	r4, [ip, #432]	@ 0x1b0
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 80060f0:	b1a4      	cbz	r4, 800611c <ipv4SelectDefaultGateway+0x42>
         if(entry->addr == srcAddr)
 80060f2:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 80060f6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80060fa:	f8dc 51a0 	ldr.w	r5, [ip, #416]	@ 0x1a0
 80060fe:	428d      	cmp	r5, r1
 8006100:	d10c      	bne.n	800611c <ipv4SelectDefaultGateway+0x42>
            *defaultGatewayAddr = entry->defaultGateway;
 8006102:	6014      	str	r4, [r2, #0]
            return NO_ERROR;
 8006104:	2000      	movs	r0, #0
 8006106:	e00e      	b.n	8006126 <ipv4SelectDefaultGateway+0x4c>
{
 8006108:	b430      	push	{r4, r5}
      if(entry->state == IPV4_ADDR_STATE_VALID &&
 800610a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800610e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8006112:	f89c c1a4 	ldrb.w	ip, [ip, #420]	@ 0x1a4
 8006116:	f1bc 0f02 	cmp.w	ip, #2
 800611a:	d0e3      	beq.n	80060e4 <ipv4SelectDefaultGateway+0xa>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800611c:	3301      	adds	r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0f3      	beq.n	800610a <ipv4SelectDefaultGateway+0x30>
   return ERROR_NO_ROUTE;
 8006122:	f240 2009 	movw	r0, #521	@ 0x209
}
 8006126:	bc30      	pop	{r4, r5}
 8006128:	4770      	bx	lr

0800612a <ipv4IsHostAddrValid>:
 * @param[in] interface Underlying network interface
 * @return TRUE if a valid IPv4 address has been assigned, else FALSE
 **/

bool_t ipv4IsHostAddrValid(NetInterface *interface)
{
 800612a:	4602      	mov	r2, r0
   uint_t i;
   bool_t flag;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 800612c:	2000      	movs	r0, #0

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800612e:	4603      	mov	r3, r0
 8006130:	b103      	cbz	r3, 8006134 <ipv4IsHostAddrValid+0xa>
      }
   }

   //Return TRUE if a valid IPv4 address has been assigned to the interface
   return flag;
}
 8006132:	4770      	bx	lr
      if(entry->state == IPV4_ADDR_STATE_VALID)
 8006134:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006138:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800613c:	f891 11a4 	ldrb.w	r1, [r1, #420]	@ 0x1a4
 8006140:	2902      	cmp	r1, #2
 8006142:	d001      	beq.n	8006148 <ipv4IsHostAddrValid+0x1e>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8006144:	3301      	adds	r3, #1
 8006146:	e7f3      	b.n	8006130 <ipv4IsHostAddrValid+0x6>
         flag = TRUE;
 8006148:	2001      	movs	r0, #1
 800614a:	e7fb      	b.n	8006144 <ipv4IsHostAddrValid+0x1a>

0800614c <ipv4IsOnLink>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is on-link, else FALSE
 **/

bool_t ipv4IsOnLink(NetInterface *interface, Ipv4Addr ipAddr)
{
 800614c:	4602      	mov	r2, r0
   uint_t i;
   bool_t flag;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 800614e:	2000      	movs	r0, #0

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 8006150:	4603      	mov	r3, r0
 8006152:	ea50 0c00 	orrs.w	ip, r0, r0
 8006156:	d000      	beq.n	800615a <ipv4IsOnLink+0xe>
 8006158:	4770      	bx	lr
{
 800615a:	b430      	push	{r4, r5}
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];

      //Valid entry?
      if(entry->state != IPV4_ADDR_STATE_INVALID)
 800615c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006160:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006164:	f89c 41a4 	ldrb.w	r4, [ip, #420]	@ 0x1a4
 8006168:	b16c      	cbz	r4, 8006186 <ipv4IsOnLink+0x3a>
      {
         //Check whether the specified IPv4 address belongs to the same subnet
         if(ipv4IsOnSubnet(entry, ipAddr))
 800616a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 800616e:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006172:	f8dc 41a0 	ldr.w	r4, [ip, #416]	@ 0x1a0
 8006176:	f8dc 51ac 	ldr.w	r5, [ip, #428]	@ 0x1ac
 800617a:	ea84 0c01 	eor.w	ip, r4, r1
 800617e:	ea1c 0f05 	tst.w	ip, r5
 8006182:	d100      	bne.n	8006186 <ipv4IsOnLink+0x3a>
         {
            flag = TRUE;
 8006184:	2001      	movs	r0, #1
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 8006186:	3301      	adds	r3, #1
 8006188:	ea50 0c03 	orrs.w	ip, r0, r3
 800618c:	d0e6      	beq.n	800615c <ipv4IsOnLink+0x10>
      }
   }

   //Return TRUE if the specified IPv4 address is on-link
   return flag;
}
 800618e:	bc30      	pop	{r4, r5}
 8006190:	4770      	bx	lr

08006192 <ipv4IsBroadcastAddr>:

   //Initialize flag
   flag = FALSE;

   //Check whether the specified IPv4 address is the broadcast address
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8006192:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006196:	d028      	beq.n	80061ea <ipv4IsBroadcastAddr+0x58>
 8006198:	4684      	mov	ip, r0
   flag = FALSE;
 800619a:	2000      	movs	r0, #0
      flag = TRUE;
   }
   else
   {
      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 800619c:	4603      	mov	r3, r0
 800619e:	ea50 0203 	orrs.w	r2, r0, r3
 80061a2:	d024      	beq.n	80061ee <ipv4IsBroadcastAddr+0x5c>
      }
   }

   //Return TRUE if the specified IPv4 address is a broadcast address
   return flag;
}
 80061a4:	4770      	bx	lr
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 80061a6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80061aa:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80061ae:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 80061b2:	b192      	cbz	r2, 80061da <ipv4IsBroadcastAddr+0x48>
            if(ipv4IsOnSubnet(entry, ipAddr))
 80061b4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80061b8:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80061bc:	f8d2 41a0 	ldr.w	r4, [r2, #416]	@ 0x1a0
 80061c0:	f8d2 51ac 	ldr.w	r5, [r2, #428]	@ 0x1ac
 80061c4:	ea84 0201 	eor.w	r2, r4, r1
 80061c8:	422a      	tst	r2, r5
 80061ca:	d106      	bne.n	80061da <ipv4IsBroadcastAddr+0x48>
               if(entry->subnetMask != IPV4_BROADCAST_ADDR)
 80061cc:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061d0:	d003      	beq.n	80061da <ipv4IsBroadcastAddr+0x48>
                  if((ipAddr | entry->subnetMask) == IPV4_BROADCAST_ADDR)
 80061d2:	430d      	orrs	r5, r1
 80061d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80061d8:	d005      	beq.n	80061e6 <ipv4IsBroadcastAddr+0x54>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 80061da:	3301      	adds	r3, #1
 80061dc:	ea50 0203 	orrs.w	r2, r0, r3
 80061e0:	d0e1      	beq.n	80061a6 <ipv4IsBroadcastAddr+0x14>
}
 80061e2:	bc30      	pop	{r4, r5}
 80061e4:	4770      	bx	lr
                     flag = TRUE;
 80061e6:	2001      	movs	r0, #1
 80061e8:	e7f7      	b.n	80061da <ipv4IsBroadcastAddr+0x48>
      flag = TRUE;
 80061ea:	2001      	movs	r0, #1
   return flag;
 80061ec:	4770      	bx	lr
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 80061ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80061f2:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80061f6:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 80061fa:	b90a      	cbnz	r2, 8006200 <ipv4IsBroadcastAddr+0x6e>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 80061fc:	3301      	adds	r3, #1
 80061fe:	e7ce      	b.n	800619e <ipv4IsBroadcastAddr+0xc>
{
 8006200:	b430      	push	{r4, r5}
 8006202:	e7d7      	b.n	80061b4 <ipv4IsBroadcastAddr+0x22>

08006204 <ipv4CheckSourceAddr>:
{
 8006204:	b510      	push	{r4, lr}
 8006206:	460c      	mov	r4, r1
   if(ipv4IsBroadcastAddr(interface, ipAddr) || ipv4IsMulticastAddr(ipAddr))
 8006208:	f7ff ffc3 	bl	8006192 <ipv4IsBroadcastAddr>
 800620c:	b920      	cbnz	r0, 8006218 <ipv4CheckSourceAddr+0x14>
 800620e:	f004 01f0 	and.w	r1, r4, #240	@ 0xf0
 8006212:	29e0      	cmp	r1, #224	@ 0xe0
 8006214:	d002      	beq.n	800621c <ipv4CheckSourceAddr+0x18>
}
 8006216:	bd10      	pop	{r4, pc}
      return ERROR_INVALID_ADDRESS;
 8006218:	20e4      	movs	r0, #228	@ 0xe4
 800621a:	e7fc      	b.n	8006216 <ipv4CheckSourceAddr+0x12>
 800621c:	20e4      	movs	r0, #228	@ 0xe4
 800621e:	e7fa      	b.n	8006216 <ipv4CheckSourceAddr+0x12>

08006220 <ipv4CheckDestAddr>:
{
 8006220:	b538      	push	{r3, r4, r5, lr}
 8006222:	4605      	mov	r5, r0
 8006224:	460c      	mov	r4, r1
   if(ipv4IsBroadcastAddr(interface, ipAddr))
 8006226:	f7ff ffb4 	bl	8006192 <ipv4IsBroadcastAddr>
 800622a:	b9a0      	cbnz	r0, 8006256 <ipv4CheckDestAddr+0x36>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800622c:	2300      	movs	r3, #0
 800622e:	b10b      	cbz	r3, 8006234 <ipv4CheckDestAddr+0x14>
   error = ERROR_INVALID_ADDRESS;
 8006230:	20e4      	movs	r0, #228	@ 0xe4
 8006232:	e011      	b.n	8006258 <ipv4CheckDestAddr+0x38>
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 8006234:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006238:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800623c:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 8006240:	b13a      	cbz	r2, 8006252 <ipv4CheckDestAddr+0x32>
            if(entry->addr == ipAddr)
 8006242:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006246:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800624a:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800624e:	42a2      	cmp	r2, r4
 8006250:	d003      	beq.n	800625a <ipv4CheckDestAddr+0x3a>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8006252:	3301      	adds	r3, #1
 8006254:	e7eb      	b.n	800622e <ipv4CheckDestAddr+0xe>
      error = NO_ERROR;
 8006256:	2000      	movs	r0, #0
}
 8006258:	bd38      	pop	{r3, r4, r5, pc}
               error = NO_ERROR;
 800625a:	2000      	movs	r0, #0
 800625c:	e7fc      	b.n	8006258 <ipv4CheckDestAddr+0x38>

0800625e <ipv4IsTentativeAddr>:
 * @param[in] ipAddr IPv4 address to be checked
 * @return TRUE if the IPv4 address is a tentative address, else FALSE
 **/

bool_t ipv4IsTentativeAddr(NetInterface *interface, Ipv4Addr ipAddr)
{
 800625e:	4602      	mov	r2, r0
   uint_t i;
   bool_t flag;
   Ipv4AddrEntry *entry;

   //Initialize flag
   flag = FALSE;
 8006260:	2000      	movs	r0, #0

   //Loop through the list of IPv4 addresses assigned to the interface
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 8006262:	4603      	mov	r3, r0
 8006264:	ea50 0c00 	orrs.w	ip, r0, r0
 8006268:	d00a      	beq.n	8006280 <ipv4IsTentativeAddr+0x22>
 800626a:	4770      	bx	lr
      //Tentative address?
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(entry->addr == ipAddr)
 800626c:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006270:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8006274:	f8dc 41a0 	ldr.w	r4, [ip, #416]	@ 0x1a0
 8006278:	428c      	cmp	r4, r1
 800627a:	d10b      	bne.n	8006294 <ipv4IsTentativeAddr+0x36>
         {
            flag = TRUE;
 800627c:	2001      	movs	r0, #1
 800627e:	e009      	b.n	8006294 <ipv4IsTentativeAddr+0x36>
{
 8006280:	b410      	push	{r4}
      if(entry->state == IPV4_ADDR_STATE_TENTATIVE)
 8006282:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8006286:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800628a:	f89c c1a4 	ldrb.w	ip, [ip, #420]	@ 0x1a4
 800628e:	f1bc 0f01 	cmp.w	ip, #1
 8006292:	d0eb      	beq.n	800626c <ipv4IsTentativeAddr+0xe>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && !flag; i++)
 8006294:	3301      	adds	r3, #1
 8006296:	ea50 0c03 	orrs.w	ip, r0, r3
 800629a:	d0f2      	beq.n	8006282 <ipv4IsTentativeAddr+0x24>
      }
   }

   //Return TRUE if the specified IPv4 address is a tentative address
   return flag;
}
 800629c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <ipv4IsLocalHostAddr>:

   //Initialize flag
   flag = FALSE;

   //Loopback address?
   if(ipv4IsLoopbackAddr(ipAddr))
 80062a4:	b2c3      	uxtb	r3, r0
 80062a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a8:	d024      	beq.n	80062f4 <ipv4IsLocalHostAddr+0x50>
 80062aa:	4601      	mov	r1, r0
   flag = FALSE;
 80062ac:	2000      	movs	r0, #0
      flag = TRUE;
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 80062ae:	4602      	mov	r2, r0
 80062b0:	ea50 0300 	orrs.w	r3, r0, r0
 80062b4:	d020      	beq.n	80062f8 <ipv4IsLocalHostAddr+0x54>
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
}
 80062b6:	4770      	bx	lr
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 80062b8:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 80062bc:	f241 2ca4 	movw	ip, #4772	@ 0x12a4
 80062c0:	fb0c fc02 	mul.w	ip, ip, r2
 80062c4:	eb0c 0c84 	add.w	ip, ip, r4, lsl #2
 80062c8:	4c0c      	ldr	r4, [pc, #48]	@ (80062fc <ipv4IsLocalHostAddr+0x58>)
 80062ca:	44a4      	add	ip, r4
 80062cc:	f89c 41fc 	ldrb.w	r4, [ip, #508]	@ 0x1fc
 80062d0:	2c02      	cmp	r4, #2
 80062d2:	d009      	beq.n	80062e8 <ipv4IsLocalHostAddr+0x44>
         for(j = 0; j < IPV4_ADDR_LIST_SIZE && !flag; j++)
 80062d4:	3301      	adds	r3, #1
 80062d6:	ea50 0403 	orrs.w	r4, r0, r3
 80062da:	d0ed      	beq.n	80062b8 <ipv4IsLocalHostAddr+0x14>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 80062dc:	3201      	adds	r2, #1
 80062de:	ea50 0302 	orrs.w	r3, r0, r2
 80062e2:	d0f8      	beq.n	80062d6 <ipv4IsLocalHostAddr+0x32>
}
 80062e4:	bc30      	pop	{r4, r5}
 80062e6:	4770      	bx	lr
               entry->addr == ipAddr)
 80062e8:	f8dc 41f8 	ldr.w	r4, [ip, #504]	@ 0x1f8
            if(entry->state == IPV4_ADDR_STATE_VALID &&
 80062ec:	428c      	cmp	r4, r1
 80062ee:	d1f1      	bne.n	80062d4 <ipv4IsLocalHostAddr+0x30>
               flag = TRUE;
 80062f0:	2001      	movs	r0, #1
 80062f2:	e7ef      	b.n	80062d4 <ipv4IsLocalHostAddr+0x30>
      flag = TRUE;
 80062f4:	2001      	movs	r0, #1
   return flag;
 80062f6:	4770      	bx	lr
{
 80062f8:	b430      	push	{r4, r5}
 80062fa:	e7ec      	b.n	80062d6 <ipv4IsLocalHostAddr+0x32>
 80062fc:	20000b50 	.word	0x20000b50

08006300 <ipv4GetAddrScope>:
uint_t ipv4GetAddrScope(Ipv4Addr ipAddr)
{
   uint_t scope;

   //Broadcast address?
   if(ipAddr == IPV4_BROADCAST_ADDR)
 8006300:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006304:	d017      	beq.n	8006336 <ipv4GetAddrScope+0x36>
      //The broadcast address is never forwarded by the routers connecting
      //the local network to other networks
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
   }
   //Multicast address?
   else if(ipv4IsMulticastAddr(ipAddr))
 8006306:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 800630a:	2be0      	cmp	r3, #224	@ 0xe0
 800630c:	d009      	beq.n	8006322 <ipv4GetAddrScope+0x22>
   }
   //Unicast address?
   else
   {
      //Loopback address?
      if((ipAddr & IPV4_LOOPBACK_MASK) == IPV4_LOOPBACK_PREFIX)
 800630e:	b2c3      	uxtb	r3, r0
 8006310:	2b7f      	cmp	r3, #127	@ 0x7f
 8006312:	d012      	beq.n	800633a <ipv4GetAddrScope+0x3a>
         //IPv4 loopback addresses, which have the prefix 127.0.0.0/8,
         //are assigned interface-local scope
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
      }
      //Link-local address?
      else if((ipAddr & IPV4_LINK_LOCAL_MASK) == IPV4_LINK_LOCAL_PREFIX)
 8006314:	b280      	uxth	r0, r0
 8006316:	f64f 63a9 	movw	r3, #65193	@ 0xfea9
 800631a:	4298      	cmp	r0, r3
 800631c:	d009      	beq.n	8006332 <ipv4GetAddrScope+0x32>
      }
      //Any other unicast address?
      else
      {
         //Other addresses are assigned global scope
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800631e:	2003      	movs	r0, #3
      }
   }

   //Return the scope of the specified IPv4 address
   return scope;
}
 8006320:	4770      	bx	lr
      if((ipAddr & IPV4_MULTICAST_LNCB_MASK) == IPV4_MULTICAST_LNCB_PREFIX)
 8006322:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8006326:	28e0      	cmp	r0, #224	@ 0xe0
 8006328:	d001      	beq.n	800632e <ipv4GetAddrScope+0x2e>
         scope = IPV4_ADDR_SCOPE_GLOBAL;
 800632a:	2003      	movs	r0, #3
 800632c:	4770      	bx	lr
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 800632e:	2002      	movs	r0, #2
 8006330:	4770      	bx	lr
         scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8006332:	2002      	movs	r0, #2
 8006334:	4770      	bx	lr
      scope = IPV4_ADDR_SCOPE_LINK_LOCAL;
 8006336:	2002      	movs	r0, #2
 8006338:	4770      	bx	lr
         scope = IPV4_ADDR_SCOPE_INTERFACE_LOCAL;
 800633a:	2001      	movs	r0, #1
 800633c:	4770      	bx	lr

0800633e <ipv4GetPrefixLength>:
 * @param[in] mask Subnet mask
 * @return Prefix length
 **/

uint_t ipv4GetPrefixLength(Ipv4Addr mask)
{
 800633e:	b508      	push	{r3, lr}
   uint_t i;

   //Convert from network byte order to host byte order
   mask = ntohl(mask);
 8006340:	f7fa f96f 	bl	8000622 <swapInt32>
 8006344:	4602      	mov	r2, r0

   //Count of the number of leading 1 bits in the network mask
   for(i = 0; i < 32; i++)
 8006346:	2000      	movs	r0, #0
 8006348:	281f      	cmp	r0, #31
 800634a:	d806      	bhi.n	800635a <ipv4GetPrefixLength+0x1c>
   {
      //Check the value of the current bit
      if(!(mask & (1U << (31 - i))))
 800634c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006350:	40c3      	lsrs	r3, r0
 8006352:	4213      	tst	r3, r2
 8006354:	d001      	beq.n	800635a <ipv4GetPrefixLength+0x1c>
   for(i = 0; i < 32; i++)
 8006356:	3001      	adds	r0, #1
 8006358:	e7f6      	b.n	8006348 <ipv4GetPrefixLength+0xa>
      }
   }

   //Return prefix length
   return i;
}
 800635a:	bd08      	pop	{r3, pc}

0800635c <ipv4SelectSourceAddr>:
{
 800635c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006360:	b089      	sub	sp, #36	@ 0x24
 8006362:	4681      	mov	r9, r0
 8006364:	9101      	str	r1, [sp, #4]
 8006366:	4692      	mov	sl, r2
   bestAddr = NULL;
 8006368:	2600      	movs	r6, #0
   bestInterface = NULL;
 800636a:	46b3      	mov	fp, r6
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800636c:	4635      	mov	r5, r6
 800636e:	b15d      	cbz	r5, 8006388 <ipv4SelectSourceAddr+0x2c>
   if(bestAddr != NULL)
 8006370:	2e00      	cmp	r6, #0
 8006372:	f000 80c6 	beq.w	8006502 <ipv4SelectSourceAddr+0x1a6>
      *interface = bestInterface;
 8006376:	f8c9 b000 	str.w	fp, [r9]
      *srcAddr = bestAddr->addr;
 800637a:	6833      	ldr	r3, [r6, #0]
 800637c:	f8ca 3000 	str.w	r3, [sl]
      error = NO_ERROR;
 8006380:	2000      	movs	r0, #0
}
 8006382:	b009      	add	sp, #36	@ 0x24
 8006384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      currentInterface = &netInterface[i];
 8006388:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 800638c:	fb05 f303 	mul.w	r3, r5, r3
 8006390:	3358      	adds	r3, #88	@ 0x58
 8006392:	4f5d      	ldr	r7, [pc, #372]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 8006394:	441f      	add	r7, r3
      if(*interface != currentInterface && *interface != NULL)
 8006396:	f8d9 3000 	ldr.w	r3, [r9]
 800639a:	42bb      	cmp	r3, r7
 800639c:	f000 80af 	beq.w	80064fe <ipv4SelectSourceAddr+0x1a2>
 80063a0:	b10b      	cbz	r3, 80063a6 <ipv4SelectSourceAddr+0x4a>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80063a2:	3501      	adds	r5, #1
 80063a4:	e7e3      	b.n	800636e <ipv4SelectSourceAddr+0x12>
 80063a6:	462c      	mov	r4, r5
 80063a8:	e034      	b.n	8006414 <ipv4SelectSourceAddr+0xb8>
               if(ipv4GetAddrScope(currentAddr->addr) >= ipv4GetAddrScope(destAddr))
 80063aa:	9801      	ldr	r0, [sp, #4]
 80063ac:	f7ff ffa8 	bl	8006300 <ipv4GetAddrScope>
 80063b0:	9b03      	ldr	r3, [sp, #12]
 80063b2:	4283      	cmp	r3, r0
 80063b4:	d202      	bcs.n	80063bc <ipv4SelectSourceAddr+0x60>
 80063b6:	46b0      	mov	r8, r6
               continue;
 80063b8:	4646      	mov	r6, r8
 80063ba:	e02a      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
                  bestInterface = currentInterface;
 80063bc:	46bb      	mov	fp, r7
 80063be:	e7fb      	b.n	80063b8 <ipv4SelectSourceAddr+0x5c>
               if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(destAddr))
 80063c0:	9801      	ldr	r0, [sp, #4]
 80063c2:	f7ff ff9d 	bl	8006300 <ipv4GetAddrScope>
 80063c6:	9b05      	ldr	r3, [sp, #20]
 80063c8:	4283      	cmp	r3, r0
 80063ca:	d302      	bcc.n	80063d2 <ipv4SelectSourceAddr+0x76>
 80063cc:	46b0      	mov	r8, r6
               continue;
 80063ce:	4646      	mov	r6, r8
 80063d0:	e01f      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
                  bestInterface = currentInterface;
 80063d2:	46bb      	mov	fp, r7
 80063d4:	e7fb      	b.n	80063ce <ipv4SelectSourceAddr+0x72>
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 80063d6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80063da:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 80063de:	fb05 f303 	mul.w	r3, r5, r3
 80063e2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80063e6:	4a48      	ldr	r2, [pc, #288]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 80063e8:	4413      	add	r3, r2
 80063ea:	f8d3 0204 	ldr.w	r0, [r3, #516]	@ 0x204
 80063ee:	9b04      	ldr	r3, [sp, #16]
 80063f0:	404b      	eors	r3, r1
 80063f2:	4203      	tst	r3, r0
 80063f4:	d10d      	bne.n	8006412 <ipv4SelectSourceAddr+0xb6>
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 80063f6:	f7ff ffa2 	bl	800633e <ipv4GetPrefixLength>
 80063fa:	9002      	str	r0, [sp, #8]
                     ipv4GetPrefixLength(bestAddr->subnetMask))
 80063fc:	68f0      	ldr	r0, [r6, #12]
 80063fe:	f7ff ff9e 	bl	800633e <ipv4GetPrefixLength>
                  if(ipv4GetPrefixLength(currentAddr->subnetMask) >
 8006402:	9b02      	ldr	r3, [sp, #8]
 8006404:	4283      	cmp	r3, r0
 8006406:	d904      	bls.n	8006412 <ipv4SelectSourceAddr+0xb6>
                     bestAddr = currentAddr;
 8006408:	4646      	mov	r6, r8
                     bestInterface = currentInterface;
 800640a:	46bb      	mov	fp, r7
               continue;
 800640c:	e001      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
               bestAddr = currentAddr;
 800640e:	4646      	mov	r6, r8
               bestInterface = currentInterface;
 8006410:	46bb      	mov	fp, r7
      for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8006412:	3401      	adds	r4, #1
 8006414:	2c00      	cmp	r4, #0
 8006416:	d1c4      	bne.n	80063a2 <ipv4SelectSourceAddr+0x46>
         currentAddr = &currentInterface->ipv4Context.addrList[j];
 8006418:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800641c:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8006420:	fb05 f303 	mul.w	r3, r5, r3
 8006424:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006428:	f503 71fc 	add.w	r1, r3, #504	@ 0x1f8
 800642c:	4a36      	ldr	r2, [pc, #216]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 800642e:	eb01 0802 	add.w	r8, r1, r2
         if(currentAddr->state == IPV4_ADDR_STATE_VALID)
 8006432:	441a      	add	r2, r3
 8006434:	f892 31fc 	ldrb.w	r3, [r2, #508]	@ 0x1fc
 8006438:	2b02      	cmp	r3, #2
 800643a:	d1ea      	bne.n	8006412 <ipv4SelectSourceAddr+0xb6>
            if(bestAddr == NULL)
 800643c:	2e00      	cmp	r6, #0
 800643e:	d0e6      	beq.n	800640e <ipv4SelectSourceAddr+0xb2>
            if(bestAddr->addr == destAddr)
 8006440:	6833      	ldr	r3, [r6, #0]
 8006442:	9302      	str	r3, [sp, #8]
 8006444:	9901      	ldr	r1, [sp, #4]
 8006446:	428b      	cmp	r3, r1
 8006448:	d0e3      	beq.n	8006412 <ipv4SelectSourceAddr+0xb6>
            else if(currentAddr->addr == destAddr)
 800644a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800644e:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8006452:	fb05 f303 	mul.w	r3, r5, r3
 8006456:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800645a:	4a2b      	ldr	r2, [pc, #172]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 800645c:	4413      	add	r3, r2
 800645e:	f8d3 21f8 	ldr.w	r2, [r3, #504]	@ 0x1f8
 8006462:	4610      	mov	r0, r2
 8006464:	9204      	str	r2, [sp, #16]
 8006466:	428a      	cmp	r2, r1
 8006468:	d040      	beq.n	80064ec <ipv4SelectSourceAddr+0x190>
            if(bestAddr->defaultGateway == destAddr)
 800646a:	6932      	ldr	r2, [r6, #16]
 800646c:	9206      	str	r2, [sp, #24]
 800646e:	428a      	cmp	r2, r1
 8006470:	d0cf      	beq.n	8006412 <ipv4SelectSourceAddr+0xb6>
            else if(currentAddr->defaultGateway == destAddr)
 8006472:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 8006476:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 800647a:	fb05 f303 	mul.w	r3, r5, r3
 800647e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006482:	4a21      	ldr	r2, [pc, #132]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 8006484:	4413      	add	r3, r2
 8006486:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800648a:	9207      	str	r2, [sp, #28]
 800648c:	428a      	cmp	r2, r1
 800648e:	d030      	beq.n	80064f2 <ipv4SelectSourceAddr+0x196>
            if(ipv4GetAddrScope(currentAddr->addr) < ipv4GetAddrScope(bestAddr->addr))
 8006490:	f7ff ff36 	bl	8006300 <ipv4GetAddrScope>
 8006494:	9003      	str	r0, [sp, #12]
 8006496:	9802      	ldr	r0, [sp, #8]
 8006498:	f7ff ff32 	bl	8006300 <ipv4GetAddrScope>
 800649c:	9005      	str	r0, [sp, #20]
 800649e:	9b03      	ldr	r3, [sp, #12]
 80064a0:	4283      	cmp	r3, r0
 80064a2:	d382      	bcc.n	80063aa <ipv4SelectSourceAddr+0x4e>
            else if(ipv4GetAddrScope(bestAddr->addr) < ipv4GetAddrScope(currentAddr->addr))
 80064a4:	9b03      	ldr	r3, [sp, #12]
 80064a6:	9a05      	ldr	r2, [sp, #20]
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d889      	bhi.n	80063c0 <ipv4SelectSourceAddr+0x64>
            if(ipv4IsOnSubnet(bestAddr, destAddr))
 80064ac:	68f2      	ldr	r2, [r6, #12]
 80064ae:	9b02      	ldr	r3, [sp, #8]
 80064b0:	9901      	ldr	r1, [sp, #4]
 80064b2:	404b      	eors	r3, r1
 80064b4:	4213      	tst	r3, r2
 80064b6:	d08e      	beq.n	80063d6 <ipv4SelectSourceAddr+0x7a>
               if(ipv4IsOnSubnet(currentAddr, destAddr))
 80064b8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 80064bc:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 80064c0:	fb05 f303 	mul.w	r3, r5, r3
 80064c4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80064c8:	4a0f      	ldr	r2, [pc, #60]	@ (8006508 <ipv4SelectSourceAddr+0x1ac>)
 80064ca:	4413      	add	r3, r2
 80064cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80064d0:	9b04      	ldr	r3, [sp, #16]
 80064d2:	9901      	ldr	r1, [sp, #4]
 80064d4:	404b      	eors	r3, r1
 80064d6:	4213      	tst	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <ipv4SelectSourceAddr+0x19c>
            if(bestAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 80064da:	9b06      	ldr	r3, [sp, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d198      	bne.n	8006412 <ipv4SelectSourceAddr+0xb6>
            else if(currentAddr->defaultGateway != IPV4_UNSPECIFIED_ADDR)
 80064e0:	9b07      	ldr	r3, [sp, #28]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d095      	beq.n	8006412 <ipv4SelectSourceAddr+0xb6>
               bestAddr = currentAddr;
 80064e6:	4646      	mov	r6, r8
               bestInterface = currentInterface;
 80064e8:	46bb      	mov	fp, r7
 80064ea:	e792      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
               bestAddr = currentAddr;
 80064ec:	4646      	mov	r6, r8
               bestInterface = currentInterface;
 80064ee:	46bb      	mov	fp, r7
 80064f0:	e78f      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
               bestAddr = currentAddr;
 80064f2:	4646      	mov	r6, r8
               bestInterface = currentInterface;
 80064f4:	46bb      	mov	fp, r7
 80064f6:	e78c      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
                  bestAddr = currentAddr;
 80064f8:	4646      	mov	r6, r8
                  bestInterface = currentInterface;
 80064fa:	46bb      	mov	fp, r7
 80064fc:	e789      	b.n	8006412 <ipv4SelectSourceAddr+0xb6>
 80064fe:	462c      	mov	r4, r5
 8006500:	e788      	b.n	8006414 <ipv4SelectSourceAddr+0xb8>
      error = ERROR_NO_ADDRESS;
 8006502:	f240 10f7 	movw	r0, #503	@ 0x1f7
 8006506:	e73c      	b.n	8006382 <ipv4SelectSourceAddr+0x26>
 8006508:	20000b50 	.word	0x20000b50

0800650c <ipv4GetBroadcastAddr>:
   error_t error;
   uint_t i;
   Ipv4AddrEntry *entry;

   //Check parameters
   if(interface != NULL && addr != NULL)
 800650c:	2800      	cmp	r0, #0
 800650e:	bf18      	it	ne
 8006510:	2900      	cmpne	r1, #0
 8006512:	d008      	beq.n	8006526 <ipv4GetBroadcastAddr+0x1a>
{
 8006514:	b500      	push	{lr}
 8006516:	4684      	mov	ip, r0
 8006518:	468e      	mov	lr, r1
   {
      //Initialize status code
      error = ERROR_NO_ADDRESS;

      //Loop through the list of IPv4 addresses assigned to the interface
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	b12b      	cbz	r3, 800652a <ipv4GetBroadcastAddr+0x1e>
      error = ERROR_NO_ADDRESS;
 800651e:	f240 10f7 	movw	r0, #503	@ 0x1f7
      error = ERROR_INVALID_PARAMETER;
   }

   //Return status code
   return error;
}
 8006522:	f85d fb04 	ldr.w	pc, [sp], #4
      error = ERROR_INVALID_PARAMETER;
 8006526:	2002      	movs	r0, #2
}
 8006528:	4770      	bx	lr
         if(entry->state != IPV4_ADDR_STATE_INVALID)
 800652a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800652e:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006532:	f892 21a4 	ldrb.w	r2, [r2, #420]	@ 0x1a4
 8006536:	b90a      	cbnz	r2, 800653c <ipv4GetBroadcastAddr+0x30>
      for(i = 0; i < IPV4_ADDR_LIST_SIZE; i++)
 8006538:	3301      	adds	r3, #1
 800653a:	e7ef      	b.n	800651c <ipv4GetBroadcastAddr+0x10>
            *addr = entry->addr;
 800653c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006540:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006544:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 8006548:	f8ce 2000 	str.w	r2, [lr]
            *addr |= ~entry->subnetMask;
 800654c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006550:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8006554:	f8dc 31ac 	ldr.w	r3, [ip, #428]	@ 0x1ac
 8006558:	ea62 0203 	orn	r2, r2, r3
 800655c:	f8ce 2000 	str.w	r2, [lr]
            error = NO_ERROR;
 8006560:	2000      	movs	r0, #0
            break;
 8006562:	e7de      	b.n	8006522 <ipv4GetBroadcastAddr+0x16>

08006564 <ipv4UpdateInStats>:
   }
   else
   {
      //The destination address is a unicast address
   }
}
 8006564:	4770      	bx	lr

08006566 <ipv4UpdateOutStats>:
   //for transmission
   IP_MIB_INC_COUNTER32(ipv4SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv4IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv4IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 8006566:	4770      	bx	lr

08006568 <ipv4UpdateErrorStats>:

   default:
      //Just for sanity
      break;
   }
}
 8006568:	4770      	bx	lr

0800656a <ipv4MulticastFilter>:
 * @return Error code
 **/

error_t ipv4MulticastFilter(NetInterface *interface, Ipv4Addr destAddr,
   Ipv4Addr srcAddr)
{
 800656a:	4684      	mov	ip, r0

   //Initialize status code
   error = ERROR_INVALID_ADDRESS;

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE && error; i++)
 800656c:	2300      	movs	r3, #0
   error = ERROR_INVALID_ADDRESS;
 800656e:	20e4      	movs	r0, #228	@ 0xe4
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE && error; i++)
 8006570:	e000      	b.n	8006574 <ipv4MulticastFilter+0xa>
 8006572:	3301      	adds	r3, #1
 8006574:	2b03      	cmp	r3, #3
 8006576:	bf8c      	ite	hi
 8006578:	2200      	movhi	r2, #0
 800657a:	2201      	movls	r2, #1
 800657c:	b150      	cbz	r0, 8006594 <ipv4MulticastFilter+0x2a>
 800657e:	b14a      	cbz	r2, 8006594 <ipv4MulticastFilter+0x2a>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.multicastFilter[i];

      //Matching multicast address?
      if(entry->addr == destAddr)
 8006580:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006584:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006588:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800658c:	428a      	cmp	r2, r1
 800658e:	d1f0      	bne.n	8006572 <ipv4MulticastFilter+0x8>
               }
            }
         }
#else
         //The multicast address is acceptable
         error = NO_ERROR;
 8006590:	2000      	movs	r0, #0
 8006592:	e7ee      	b.n	8006572 <ipv4MulticastFilter+0x8>
      }
   }

   //Return status code
   return error;
}
 8006594:	4770      	bx	lr

08006596 <ipv4DeriveInterfaceState>:
   {
      //Just for sanity
   }
#else
   //All sources are accepted
   entry->srcFilterMode = IP_FILTER_MODE_EXCLUDE;
 8006596:	2300      	movs	r3, #0
 8006598:	60c3      	str	r3, [r0, #12]
   entry->srcFilter.numSources = 0;
 800659a:	6103      	str	r3, [r0, #16]
#endif
}
 800659c:	4770      	bx	lr

0800659e <ipv4MapMulticastAddrToMac>:

   //Initialize status code
   error = NO_ERROR;

   //Check parameters
   if(macAddr != NULL)
 800659e:	460a      	mov	r2, r1
 80065a0:	b1b1      	cbz	r1, 80065d0 <ipv4MapMulticastAddrToMac+0x32>
   {
      //Ensure the specified IPv4 address is a valid host group address
      if(ipv4IsMulticastAddr(ipAddr))
 80065a2:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80065a6:	2be0      	cmp	r3, #224	@ 0xe0
 80065a8:	d001      	beq.n	80065ae <ipv4MapMulticastAddrToMac+0x10>
         macAddr->b[5] = p[3];
      }
      else
      {
         //The specified IPv4 address is not a valid host group address
         error = ERROR_INVALID_ADDRESS;
 80065aa:	20e4      	movs	r0, #228	@ 0xe4
      error = ERROR_INVALID_PARAMETER;
   }

   //Return status code
   return error;
}
 80065ac:	4770      	bx	lr
         macAddr->b[0] = 0x01;
 80065ae:	2301      	movs	r3, #1
 80065b0:	700b      	strb	r3, [r1, #0]
         macAddr->b[1] = 0x00;
 80065b2:	2100      	movs	r1, #0
 80065b4:	7051      	strb	r1, [r2, #1]
         macAddr->b[2] = 0x5E;
 80065b6:	235e      	movs	r3, #94	@ 0x5e
 80065b8:	7093      	strb	r3, [r2, #2]
         macAddr->b[3] = p[1] & 0x7F;
 80065ba:	f3c0 2306 	ubfx	r3, r0, #8, #7
 80065be:	70d3      	strb	r3, [r2, #3]
         macAddr->b[4] = p[2];
 80065c0:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80065c4:	7113      	strb	r3, [r2, #4]
         macAddr->b[5] = p[3];
 80065c6:	f3c0 6307 	ubfx	r3, r0, #24, #8
 80065ca:	7153      	strb	r3, [r2, #5]
   error = NO_ERROR;
 80065cc:	4608      	mov	r0, r1
 80065ce:	4770      	bx	lr
      error = ERROR_INVALID_PARAMETER;
 80065d0:	2002      	movs	r0, #2
 80065d2:	4770      	bx	lr

080065d4 <ipv4AcceptMulticastAddr>:
{
 80065d4:	b570      	push	{r4, r5, r6, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	4604      	mov	r4, r0
 80065da:	460d      	mov	r5, r1
   physicalInterface = nicGetPhysicalInterface(interface);
 80065dc:	f006 fa8c 	bl	800caf8 <nicGetPhysicalInterface>
 80065e0:	4606      	mov	r6, r0
   ipv4MapMulticastAddrToMac(groupAddr, &macAddr);
 80065e2:	4669      	mov	r1, sp
 80065e4:	4628      	mov	r0, r5
 80065e6:	f7ff ffda 	bl	800659e <ipv4MapMulticastAddrToMac>
   error = ethAcceptMacAddr(interface, &macAddr);
 80065ea:	4669      	mov	r1, sp
 80065ec:	4620      	mov	r0, r4
 80065ee:	f7fc fcd7 	bl	8002fa0 <ethAcceptMacAddr>
   if(!error)
 80065f2:	4605      	mov	r5, r0
 80065f4:	b938      	cbnz	r0, 8006606 <ipv4AcceptMulticastAddr+0x32>
      if(interface != physicalInterface)
 80065f6:	42b4      	cmp	r4, r6
 80065f8:	d005      	beq.n	8006606 <ipv4AcceptMulticastAddr+0x32>
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 80065fa:	4669      	mov	r1, sp
 80065fc:	4630      	mov	r0, r6
 80065fe:	f7fc fccf 	bl	8002fa0 <ethAcceptMacAddr>
         if(error)
 8006602:	4605      	mov	r5, r0
 8006604:	b910      	cbnz	r0, 800660c <ipv4AcceptMulticastAddr+0x38>
}
 8006606:	4628      	mov	r0, r5
 8006608:	b002      	add	sp, #8
 800660a:	bd70      	pop	{r4, r5, r6, pc}
            ethDropMacAddr(interface, &macAddr);
 800660c:	4669      	mov	r1, sp
 800660e:	4620      	mov	r0, r4
 8006610:	f7fc fd04 	bl	800301c <ethDropMacAddr>
 8006614:	e7f7      	b.n	8006606 <ipv4AcceptMulticastAddr+0x32>

08006616 <ipv4DropMulticastAddr>:
{
 8006616:	b570      	push	{r4, r5, r6, lr}
 8006618:	b082      	sub	sp, #8
 800661a:	4604      	mov	r4, r0
 800661c:	460e      	mov	r6, r1
   physicalInterface = nicGetPhysicalInterface(interface);
 800661e:	f006 fa6b 	bl	800caf8 <nicGetPhysicalInterface>
 8006622:	4605      	mov	r5, r0
   ipv4MapMulticastAddrToMac(groupAddr, &macAddr);
 8006624:	4669      	mov	r1, sp
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff ffb9 	bl	800659e <ipv4MapMulticastAddrToMac>
   ethDropMacAddr(interface, &macAddr);
 800662c:	4669      	mov	r1, sp
 800662e:	4620      	mov	r0, r4
 8006630:	f7fc fcf4 	bl	800301c <ethDropMacAddr>
   if(interface != physicalInterface)
 8006634:	42ac      	cmp	r4, r5
 8006636:	d003      	beq.n	8006640 <ipv4DropMulticastAddr+0x2a>
      ethDropMacAddr(physicalInterface, &macAddr);
 8006638:	4669      	mov	r1, sp
 800663a:	4628      	mov	r0, r5
 800663c:	f7fc fcee 	bl	800301c <ethDropMacAddr>
}
 8006640:	b002      	add	sp, #8
 8006642:	bd70      	pop	{r4, r5, r6, pc}

08006644 <ipv4CreateMulticastFilterEntry>:
 * @return Pointer to the newly created multicast filter entry
 **/

Ipv4FilterEntry *ipv4CreateMulticastFilterEntry(NetInterface *interface,
   Ipv4Addr multicastAddr)
{
 8006644:	4684      	mov	ip, r0

   //Initialize pointer
   entry = NULL;

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8006646:	2300      	movs	r3, #0
 8006648:	2b03      	cmp	r3, #3
 800664a:	d823      	bhi.n	8006694 <ipv4CreateMulticastFilterEntry+0x50>
   {
      //Check whether the current entry is available for use
      if(interface->ipv4Context.multicastFilter[i].addr == IPV4_UNSPECIFIED_ADDR)
 800664c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006650:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006654:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 8006658:	b10a      	cbz	r2, 800665e <ipv4CreateMulticastFilterEntry+0x1a>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 800665a:	3301      	adds	r3, #1
 800665c:	e7f4      	b.n	8006648 <ipv4CreateMulticastFilterEntry+0x4>
{
 800665e:	b410      	push	{r4}
      {
         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 8006660:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8006664:	0080      	lsls	r0, r0, #2
 8006666:	f500 70dc 	add.w	r0, r0, #440	@ 0x1b8
 800666a:	4460      	add	r0, ip
 800666c:	3004      	adds	r0, #4

         //Initialize entry
         entry->addr = multicastAddr;
 800666e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006672:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 8006676:	f8c2 11bc 	str.w	r1, [r2, #444]	@ 0x1bc
         entry->anySourceRefCount = 0;
 800667a:	2100      	movs	r1, #0
 800667c:	f8c2 11c0 	str.w	r1, [r2, #448]	@ 0x1c0
         entry->macFilterConfigured = FALSE;
 8006680:	f8c2 11c4 	str.w	r1, [r2, #452]	@ 0x1c4
         entry->srcFilterMode = IP_FILTER_MODE_INCLUDE;
 8006684:	2401      	movs	r4, #1
 8006686:	f8c2 41c8 	str.w	r4, [r2, #456]	@ 0x1c8
         entry->srcFilter.numSources = 0;
 800668a:	f8c2 11cc 	str.w	r1, [r2, #460]	@ 0x1cc
      }
   }

   //Return a pointer to the newly created multicast filter entry
   return entry;
}
 800668e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006692:	4770      	bx	lr
   entry = NULL;
 8006694:	2000      	movs	r0, #0
}
 8006696:	4770      	bx	lr

08006698 <ipv4FindMulticastFilterEntry>:

   //Initialize pointer
   entry = NULL;

   //Go through the multicast filter table
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8006698:	2300      	movs	r3, #0
 800669a:	2b03      	cmp	r3, #3
 800669c:	d811      	bhi.n	80066c2 <ipv4FindMulticastFilterEntry+0x2a>
   {
      //Compare multicast addresses
      if(interface->ipv4Context.multicastFilter[i].addr == multicastAddr)
 800669e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80066a2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80066a6:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 80066aa:	428a      	cmp	r2, r1
 80066ac:	d001      	beq.n	80066b2 <ipv4FindMulticastFilterEntry+0x1a>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80066ae:	3301      	adds	r3, #1
 80066b0:	e7f3      	b.n	800669a <ipv4FindMulticastFilterEntry+0x2>
      {
         //Point to the current entry
         entry = &interface->ipv4Context.multicastFilter[i];
 80066b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80066bc:	4418      	add	r0, r3
 80066be:	3004      	adds	r0, #4
         break;
 80066c0:	4770      	bx	lr
   entry = NULL;
 80066c2:	2000      	movs	r0, #0
      }
   }

   //Return a pointer to the matching multicast filter entry
   return entry;
}
 80066c4:	4770      	bx	lr

080066c6 <ipv4DeleteMulticastFilterEntry>:
 **/

void ipv4DeleteMulticastFilterEntry(Ipv4FilterEntry *entry)
{
   //Delete the specified entry
   entry->addr = IPV4_UNSPECIFIED_ADDR;
 80066c6:	2300      	movs	r3, #0
 80066c8:	6003      	str	r3, [r0, #0]
}
 80066ca:	4770      	bx	lr

080066cc <ipv4UpdateMulticastFilter>:
{
 80066cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066d0:	4605      	mov	r5, r0
 80066d2:	460e      	mov	r6, r1
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80066d4:	2300      	movs	r3, #0
 80066d6:	e010      	b.n	80066fa <ipv4UpdateMulticastFilter+0x2e>
         if(entry->anySourceRefCount > 0)
 80066d8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80066dc:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80066e0:	f8d2 21c0 	ldr.w	r2, [r2, #448]	@ 0x1c0
 80066e4:	b1b2      	cbz	r2, 8006714 <ipv4UpdateMulticastFilter+0x48>
            entry->srcFilterMode = IP_FILTER_MODE_EXCLUDE;
 80066e6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80066ea:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80066ee:	2100      	movs	r1, #0
 80066f0:	f8c2 11c8 	str.w	r1, [r2, #456]	@ 0x1c8
            entry->srcFilter.numSources = 0;
 80066f4:	f8c2 11cc 	str.w	r1, [r2, #460]	@ 0x1cc
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80066f8:	3301      	adds	r3, #1
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d815      	bhi.n	800672a <ipv4UpdateMulticastFilter+0x5e>
      if(groupAddr == IPV4_UNSPECIFIED_ADDR || groupAddr == entry->addr)
 80066fe:	2e00      	cmp	r6, #0
 8006700:	d0ea      	beq.n	80066d8 <ipv4UpdateMulticastFilter+0xc>
 8006702:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006706:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800670a:	f8d2 21bc 	ldr.w	r2, [r2, #444]	@ 0x1bc
 800670e:	42b2      	cmp	r2, r6
 8006710:	d1f2      	bne.n	80066f8 <ipv4UpdateMulticastFilter+0x2c>
 8006712:	e7e1      	b.n	80066d8 <ipv4UpdateMulticastFilter+0xc>
            entry->srcFilterMode = IP_FILTER_MODE_INCLUDE;
 8006714:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006718:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800671c:	2101      	movs	r1, #1
 800671e:	f8c2 11c8 	str.w	r1, [r2, #456]	@ 0x1c8
            entry->srcFilter.numSources = 0;
 8006722:	2100      	movs	r1, #0
 8006724:	f8c2 11cc 	str.w	r1, [r2, #460]	@ 0x1cc
 8006728:	e7e6      	b.n	80066f8 <ipv4UpdateMulticastFilter+0x2c>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800672a:	2400      	movs	r4, #0
 800672c:	e015      	b.n	800675a <ipv4UpdateMulticastFilter+0x8e>
            group = &socket->multicastGroups[j];
 800672e:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8006732:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8006736:	fb04 f303 	mul.w	r3, r4, r3
 800673a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800673e:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 8006742:	4a55      	ldr	r2, [pc, #340]	@ (8006898 <ipv4UpdateMulticastFilter+0x1cc>)
 8006744:	4411      	add	r1, r2
 8006746:	f101 0804 	add.w	r8, r1, #4
            if(group->addr.length == sizeof(Ipv4Addr))
 800674a:	441a      	add	r2, r3
 800674c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800674e:	2b04      	cmp	r3, #4
 8006750:	d010      	beq.n	8006774 <ipv4UpdateMulticastFilter+0xa8>
         for(j = 0; j < SOCKET_MAX_MULTICAST_GROUPS; j++)
 8006752:	3701      	adds	r7, #1
 8006754:	2f00      	cmp	r7, #0
 8006756:	d0ea      	beq.n	800672e <ipv4UpdateMulticastFilter+0x62>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8006758:	3401      	adds	r4, #1
 800675a:	2c09      	cmp	r4, #9
 800675c:	d837      	bhi.n	80067ce <ipv4UpdateMulticastFilter+0x102>
      if(socket->type == SOCKET_TYPE_DGRAM ||
 800675e:	4b4e      	ldr	r3, [pc, #312]	@ (8006898 <ipv4UpdateMulticastFilter+0x1cc>)
 8006760:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8006764:	fb02 3304 	mla	r3, r2, r4, r3
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	3b02      	subs	r3, #2
 800676c:	2b01      	cmp	r3, #1
 800676e:	d8f3      	bhi.n	8006758 <ipv4UpdateMulticastFilter+0x8c>
         for(j = 0; j < SOCKET_MAX_MULTICAST_GROUPS; j++)
 8006770:	2700      	movs	r7, #0
 8006772:	e7ef      	b.n	8006754 <ipv4UpdateMulticastFilter+0x88>
               if(groupAddr == IPV4_UNSPECIFIED_ADDR ||
 8006774:	b166      	cbz	r6, 8006790 <ipv4UpdateMulticastFilter+0xc4>
                  groupAddr == group->addr.ipv4Addr)
 8006776:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 800677a:	f44f 731c 	mov.w	r3, #624	@ 0x270
 800677e:	fb04 f303 	mul.w	r3, r4, r3
 8006782:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8006786:	4a44      	ldr	r2, [pc, #272]	@ (8006898 <ipv4UpdateMulticastFilter+0x1cc>)
 8006788:	4413      	add	r3, r2
 800678a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
               if(groupAddr == IPV4_UNSPECIFIED_ADDR ||
 800678c:	42b3      	cmp	r3, r6
 800678e:	d1e0      	bne.n	8006752 <ipv4UpdateMulticastFilter+0x86>
                  entry = ipv4FindMulticastFilterEntry(interface,
 8006790:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 8006794:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8006798:	fb04 f303 	mul.w	r3, r4, r3
 800679c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80067a0:	4a3d      	ldr	r2, [pc, #244]	@ (8006898 <ipv4UpdateMulticastFilter+0x1cc>)
 80067a2:	4413      	add	r3, r2
 80067a4:	f8d3 9050 	ldr.w	r9, [r3, #80]	@ 0x50
 80067a8:	4649      	mov	r1, r9
 80067aa:	4628      	mov	r0, r5
 80067ac:	f7ff ff74 	bl	8006698 <ipv4FindMulticastFilterEntry>
                  if(entry == NULL)
 80067b0:	4603      	mov	r3, r0
 80067b2:	b120      	cbz	r0, 80067be <ipv4UpdateMulticastFilter+0xf2>
                     ipv4DeriveInterfaceState(entry, group);
 80067b4:	4641      	mov	r1, r8
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7ff feed 	bl	8006596 <ipv4DeriveInterfaceState>
 80067bc:	e7c9      	b.n	8006752 <ipv4UpdateMulticastFilter+0x86>
                     entry = ipv4CreateMulticastFilterEntry(interface,
 80067be:	4649      	mov	r1, r9
 80067c0:	4628      	mov	r0, r5
 80067c2:	f7ff ff3f 	bl	8006644 <ipv4CreateMulticastFilterEntry>
                  if(entry != NULL)
 80067c6:	4603      	mov	r3, r0
 80067c8:	2800      	cmp	r0, #0
 80067ca:	d1f3      	bne.n	80067b4 <ipv4UpdateMulticastFilter+0xe8>
 80067cc:	e7c1      	b.n	8006752 <ipv4UpdateMulticastFilter+0x86>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 80067ce:	2400      	movs	r4, #0
 80067d0:	e022      	b.n	8006818 <ipv4UpdateMulticastFilter+0x14c>
            if(!entry->macFilterConfigured)
 80067d2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80067d6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80067da:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d047      	beq.n	8006872 <ipv4UpdateMulticastFilter+0x1a6>
            (IpFilterMode) entry->srcFilterMode, &entry->srcFilter);
 80067e2:	eb04 0784 	add.w	r7, r4, r4, lsl #2
 80067e6:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80067ea:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f503 73e4 	add.w	r3, r3, #456	@ 0x1c8
 80067f4:	442b      	add	r3, r5
         igmpHostStateChangeEvent(&interface->igmpHostContext, entry->addr,
 80067f6:	3304      	adds	r3, #4
 80067f8:	f897 21c8 	ldrb.w	r2, [r7, #456]	@ 0x1c8
 80067fc:	f8d7 11bc 	ldr.w	r1, [r7, #444]	@ 0x1bc
 8006800:	f505 60db 	add.w	r0, r5, #1752	@ 0x6d8
 8006804:	f7fe f929 	bl	8004a5a <igmpHostStateChangeEvent>
         if(entry->srcFilterMode != IP_FILTER_MODE_EXCLUDE &&
 8006808:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 800680c:	b11b      	cbz	r3, 8006816 <ipv4UpdateMulticastFilter+0x14a>
            entry->srcFilter.numSources == 0)
 800680e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
         if(entry->srcFilterMode != IP_FILTER_MODE_EXCLUDE &&
 8006812:	2b00      	cmp	r3, #0
 8006814:	d03a      	beq.n	800688c <ipv4UpdateMulticastFilter+0x1c0>
   for(i = 0; i < IPV4_MULTICAST_FILTER_SIZE; i++)
 8006816:	3401      	adds	r4, #1
 8006818:	2c03      	cmp	r4, #3
 800681a:	d83b      	bhi.n	8006894 <ipv4UpdateMulticastFilter+0x1c8>
      entry = &interface->ipv4Context.multicastFilter[i];
 800681c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006826:	442b      	add	r3, r5
 8006828:	1d1e      	adds	r6, r3, #4
      if(entry->addr != IPV4_UNSPECIFIED_ADDR)
 800682a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800682e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006832:	f8d3 11bc 	ldr.w	r1, [r3, #444]	@ 0x1bc
 8006836:	2900      	cmp	r1, #0
 8006838:	d0ed      	beq.n	8006816 <ipv4UpdateMulticastFilter+0x14a>
         if(entry->srcFilterMode == IP_FILTER_MODE_EXCLUDE ||
 800683a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800683e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006842:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 8006846:	2b00      	cmp	r3, #0
 8006848:	d0c3      	beq.n	80067d2 <ipv4UpdateMulticastFilter+0x106>
            entry->srcFilter.numSources > 0)
 800684a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800684e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006852:	f8d3 31cc 	ldr.w	r3, [r3, #460]	@ 0x1cc
         if(entry->srcFilterMode == IP_FILTER_MODE_EXCLUDE ||
 8006856:	2b00      	cmp	r3, #0
 8006858:	d1bb      	bne.n	80067d2 <ipv4UpdateMulticastFilter+0x106>
            if(entry->macFilterConfigured)
 800685a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800685e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006862:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0bb      	beq.n	80067e2 <ipv4UpdateMulticastFilter+0x116>
               ipv4DropMulticastAddr(interface, entry->addr);
 800686a:	4628      	mov	r0, r5
 800686c:	f7ff fed3 	bl	8006616 <ipv4DropMulticastAddr>
 8006870:	e7b7      	b.n	80067e2 <ipv4UpdateMulticastFilter+0x116>
               error = ipv4AcceptMulticastAddr(interface, entry->addr);
 8006872:	4628      	mov	r0, r5
 8006874:	f7ff feae 	bl	80065d4 <ipv4AcceptMulticastAddr>
               if(!error)
 8006878:	2800      	cmp	r0, #0
 800687a:	d1b2      	bne.n	80067e2 <ipv4UpdateMulticastFilter+0x116>
                  entry->macFilterConfigured = TRUE;
 800687c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8006880:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8006884:	2201      	movs	r2, #1
 8006886:	f8c3 21c4 	str.w	r2, [r3, #452]	@ 0x1c4
 800688a:	e7aa      	b.n	80067e2 <ipv4UpdateMulticastFilter+0x116>
            ipv4DeleteMulticastFilterEntry(entry);
 800688c:	4630      	mov	r0, r6
 800688e:	f7ff ff1a 	bl	80066c6 <ipv4DeleteMulticastFilterEntry>
 8006892:	e7c0      	b.n	8006816 <ipv4UpdateMulticastFilter+0x14a>
}
 8006894:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006898:	20001ef8 	.word	0x20001ef8

0800689c <ipv4JoinMulticastGroup>:
{
 800689c:	b538      	push	{r3, r4, r5, lr}
   if(ipv4IsMulticastAddr(groupAddr))
 800689e:	f001 03f0 	and.w	r3, r1, #240	@ 0xf0
 80068a2:	2be0      	cmp	r3, #224	@ 0xe0
 80068a4:	d001      	beq.n	80068aa <ipv4JoinMulticastGroup+0xe>
      error = ERROR_INVALID_ADDRESS;
 80068a6:	20e4      	movs	r0, #228	@ 0xe4
}
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	4605      	mov	r5, r0
 80068ac:	460c      	mov	r4, r1
      entry = ipv4FindMulticastFilterEntry(interface, groupAddr);
 80068ae:	f7ff fef3 	bl	8006698 <ipv4FindMulticastFilterEntry>
      if(entry == NULL)
 80068b2:	4602      	mov	r2, r0
 80068b4:	b140      	cbz	r0, 80068c8 <ipv4JoinMulticastGroup+0x2c>
         entry->anySourceRefCount++;
 80068b6:	6853      	ldr	r3, [r2, #4]
 80068b8:	3301      	adds	r3, #1
 80068ba:	6053      	str	r3, [r2, #4]
      ipv4UpdateMulticastFilter(interface, groupAddr);
 80068bc:	4621      	mov	r1, r4
 80068be:	4628      	mov	r0, r5
 80068c0:	f7ff ff04 	bl	80066cc <ipv4UpdateMulticastFilter>
   error = NO_ERROR;
 80068c4:	2000      	movs	r0, #0
 80068c6:	e7ef      	b.n	80068a8 <ipv4JoinMulticastGroup+0xc>
         entry = ipv4CreateMulticastFilterEntry(interface, groupAddr);
 80068c8:	4621      	mov	r1, r4
 80068ca:	4628      	mov	r0, r5
 80068cc:	f7ff feba 	bl	8006644 <ipv4CreateMulticastFilterEntry>
      if(entry != NULL)
 80068d0:	4602      	mov	r2, r0
 80068d2:	2800      	cmp	r0, #0
 80068d4:	d1ef      	bne.n	80068b6 <ipv4JoinMulticastGroup+0x1a>
         error = ERROR_OUT_OF_RESOURCES;
 80068d6:	2065      	movs	r0, #101	@ 0x65
 80068d8:	e7e6      	b.n	80068a8 <ipv4JoinMulticastGroup+0xc>

080068da <ipv4CompareSrcAddrLists>:
   return res;
#else
   //Not implemented
   return TRUE;
#endif
}
 80068da:	2001      	movs	r0, #1
 80068dc:	4770      	bx	lr

080068de <ipv6Init>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ipv6Init(NetInterface *interface)
{
 80068de:	b570      	push	{r4, r5, r6, lr}
 80068e0:	4604      	mov	r4, r0
   Ipv6Context *context;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 80068e2:	f006 f909 	bl	800caf8 <nicGetPhysicalInterface>
 80068e6:	4605      	mov	r5, r0

   //Point to the IPv6 context
   context = &interface->ipv6Context;

   //Clear the IPv6 context
   osMemset(context, 0, sizeof(Ipv6Context));
 80068e8:	f44f 7270 	mov.w	r2, #960	@ 0x3c0
 80068ec:	2100      	movs	r1, #0
 80068ee:	f204 70a4 	addw	r0, r4, #1956	@ 0x7a4
 80068f2:	f00e f9c7 	bl	8014c84 <memset>

   //Initialize interface specific variables
   context->linkMtu = physicalInterface->nicDriver->mtu;
 80068f6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f8c4 37a4 	str.w	r3, [r4, #1956]	@ 0x7a4
   context->isRouter = FALSE;
 80068fe:	2500      	movs	r5, #0
 8006900:	f8c4 57a8 	str.w	r5, [r4, #1960]	@ 0x7a8
   context->defaultHopLimit = IPV6_DEFAULT_HOP_LIMIT;
 8006904:	2640      	movs	r6, #64	@ 0x40
 8006906:	f884 67ac 	strb.w	r6, [r4, #1964]	@ 0x7ac
   context->curHopLimit = IPV6_DEFAULT_HOP_LIMIT;
 800690a:	f884 67ad 	strb.w	r6, [r4, #1965]	@ 0x7ad

   //ICMPv6 Echo Request messages are allowed by default
   context->enableEchoReq = TRUE;
 800690e:	2301      	movs	r3, #1
 8006910:	f8c4 37b0 	str.w	r3, [r4, #1968]	@ 0x7b0
   context->enableMulticastEchoReq = TRUE;
 8006914:	f8c4 37b4 	str.w	r3, [r4, #1972]	@ 0x7b4

   //Initialize the list of IPv6 addresses assigned to the interface
   osMemset(context->addrList, 0, sizeof(context->addrList));
 8006918:	2290      	movs	r2, #144	@ 0x90
 800691a:	4629      	mov	r1, r5
 800691c:	f504 60f7 	add.w	r0, r4, #1976	@ 0x7b8
 8006920:	f00e f9b0 	bl	8014c84 <memset>
   //Initialize the Prefix List
   osMemset(context->prefixList, 0, sizeof(context->prefixList));
 8006924:	2258      	movs	r2, #88	@ 0x58
 8006926:	4629      	mov	r1, r5
 8006928:	f604 0058 	addw	r0, r4, #2136	@ 0x858
 800692c:	f00e f9aa 	bl	8014c84 <memset>
   //Initialize the Default Router List
   osMemset(context->routerList, 0, sizeof(context->routerList));
 8006930:	4632      	mov	r2, r6
 8006932:	4629      	mov	r1, r5
 8006934:	f504 600b 	add.w	r0, r4, #2224	@ 0x8b0
 8006938:	f00e f9a4 	bl	8014c84 <memset>
   //Initialize the list of DNS servers
   osMemset(context->dnsServerList, 0, sizeof(context->dnsServerList));
 800693c:	2220      	movs	r2, #32
 800693e:	4629      	mov	r1, r5
 8006940:	f504 600f 	add.w	r0, r4, #2288	@ 0x8f0
 8006944:	f00e f99e 	bl	8014c84 <memset>
   //Initialize the multicast filter table
   osMemset(context->multicastFilter, 0, sizeof(context->multicastFilter));
 8006948:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800694c:	4629      	mov	r1, r5
 800694e:	f504 6011 	add.w	r0, r4, #2320	@ 0x910
 8006952:	f00e f997 	bl	8014c84 <memset>

#if (IPV6_FRAG_SUPPORT == ENABLED)
   //Identification field is used to identify fragments of an original IP datagram
   context->identification = 0;
 8006956:	f8c4 5a10 	str.w	r5, [r4, #2576]	@ 0xa10
   //Initialize the reassembly queue
   osMemset(context->fragQueue, 0, sizeof(context->fragQueue));
 800695a:	f44f 72a8 	mov.w	r2, #336	@ 0x150
 800695e:	4629      	mov	r1, r5
 8006960:	f604 2014 	addw	r0, r4, #2580	@ 0xa14
 8006964:	f00e f98e 	bl	8014c84 <memset>
#endif

   //Successful initialization
   return NO_ERROR;
}
 8006968:	4628      	mov	r0, r5
 800696a:	bd70      	pop	{r4, r5, r6, pc}

0800696c <ipv6GetLinkLocalAddrState>:
Ipv6AddrState ipv6GetLinkLocalAddrState(NetInterface *interface)
{
   Ipv6AddrState state;

   //Valid interface?
   if(interface != NULL)
 800696c:	b110      	cbz	r0, 8006974 <ipv6GetLinkLocalAddrState+0x8>
   {
      state = interface->ipv6Context.addrList[0].state;
 800696e:	f890 07c8 	ldrb.w	r0, [r0, #1992]	@ 0x7c8
 8006972:	4770      	bx	lr
   }
   else
   {
      state = IPV6_ADDR_STATE_INVALID;
 8006974:	2000      	movs	r0, #0
   }

   //Return the state of the link-local address
   return state;
}
 8006976:	4770      	bx	lr

08006978 <ipv6LinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ipv6LinkChangeEvent(NetInterface *interface)
{
 8006978:	b530      	push	{r4, r5, lr}
 800697a:	b085      	sub	sp, #20
 800697c:	4604      	mov	r4, r0
   Ipv6Context *context;
   Ipv6AddrEntry *entry;
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800697e:	f006 f8bb 	bl	800caf8 <nicGetPhysicalInterface>

   //Point to the IPv6 context
   context = &interface->ipv6Context;

   //Restore default parameters
   context->linkMtu = physicalInterface->nicDriver->mtu;
 8006982:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f8c4 37a4 	str.w	r3, [r4, #1956]	@ 0x7a4
   context->curHopLimit = context->defaultHopLimit;
 800698a:	f894 37ac 	ldrb.w	r3, [r4, #1964]	@ 0x7ac
 800698e:	f884 37ad 	strb.w	r3, [r4, #1965]	@ 0x7ad

#if (MLD_NODE_SUPPORT == ENABLED)
   //Notify MLD of link state changes
   mldLinkChangeEvent(interface);
 8006992:	4620      	mov	r0, r4
 8006994:	f002 fa72 	bl	8008e7c <mldLinkChangeEvent>
#endif

   //Clear the list of IPv6 addresses
   ipv6FlushAddrList(interface);
 8006998:	4620      	mov	r0, r4
 800699a:	f001 fcd3 	bl	8008344 <ipv6FlushAddrList>
   //Clear the Prefix List
   ipv6FlushPrefixList(interface);
 800699e:	4620      	mov	r0, r4
 80069a0:	f001 f8dc 	bl	8007b5c <ipv6FlushPrefixList>
   //Clear the Default Router List
   ipv6FlushDefaultRouterList(interface);
 80069a4:	4620      	mov	r0, r4
 80069a6:	f001 f905 	bl	8007bb4 <ipv6FlushDefaultRouterList>

#if (IPV6_FRAG_SUPPORT == ENABLED)
   //Flush the reassembly queue
   ipv6FlushFragQueue(interface);
 80069aa:	4620      	mov	r0, r4
 80069ac:	f000 fdf5 	bl	800759a <ipv6FlushFragQueue>
#endif

#if (NDP_SUPPORT == ENABLED)
   //Notify NDP of link state changes
   ndpLinkChangeEvent(interface);
 80069b0:	4620      	mov	r0, r4
 80069b2:	f003 fcf3 	bl	800a39c <ndpLinkChangeEvent>
   ndpRouterAdvLinkChangeEvent(interface->ndpRouterAdvContext);
#endif

#if (SLAAC_SUPPORT == ENABLED)
   //Notify the SLAAC service of link state changes
   slaacLinkChangeEvent(interface->slaacContext);
 80069b6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 80069ba:	f8d3 02a0 	ldr.w	r0, [r3, #672]	@ 0x2a0
 80069be:	f006 fb2f 	bl	800d020 <slaacLinkChangeEvent>
   //Notify the DHCPv6 client of link state changes
   dhcpv6ClientLinkChangeEvent(interface->dhcpv6ClientContext);
#endif

   //Go through the list of IPv6 addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 80069c2:	2500      	movs	r5, #0
 80069c4:	e013      	b.n	80069ee <ipv6LinkChangeEvent+0x76>
         }
         else
#endif
         {
            //The use of the IPv6 address is now unrestricted
            ipv6SetAddr(interface, i, &entry->addr, IPV6_ADDR_STATE_PREFERRED,
 80069c6:	f204 72a4 	addw	r2, r4, #1956	@ 0x7a4
 80069ca:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80069ce:	011b      	lsls	r3, r3, #4
 80069d0:	3310      	adds	r3, #16
 80069d2:	441a      	add	r2, r3
 80069d4:	2301      	movs	r3, #1
 80069d6:	9302      	str	r3, [sp, #8]
 80069d8:	f04f 33ff 	mov.w	r3, #4294967295
 80069dc:	9301      	str	r3, [sp, #4]
 80069de:	9300      	str	r3, [sp, #0]
 80069e0:	2302      	movs	r3, #2
 80069e2:	3204      	adds	r2, #4
 80069e4:	4629      	mov	r1, r5
 80069e6:	4620      	mov	r0, r4
 80069e8:	f001 fc0a 	bl	8008200 <ipv6SetAddr>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 80069ec:	3501      	adds	r5, #1
 80069ee:	2d02      	cmp	r5, #2
 80069f0:	d81f      	bhi.n	8006a32 <ipv6LinkChangeEvent+0xba>
      if(entry->permanent)
 80069f2:	1c6b      	adds	r3, r5, #1
 80069f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069f8:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 80069fc:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	@ 0x7a8
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0f3      	beq.n	80069ec <ipv6LinkChangeEvent+0x74>
         if(interface->ndpContext.dupAddrDetectTransmits > 0)
 8006a04:	f8d4 3b6c 	ldr.w	r3, [r4, #2924]	@ 0xb6c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0dc      	beq.n	80069c6 <ipv6LinkChangeEvent+0x4e>
            ipv6SetAddr(interface, i, &entry->addr, IPV6_ADDR_STATE_TENTATIVE,
 8006a0c:	f204 72a4 	addw	r2, r4, #1956	@ 0x7a4
 8006a10:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3310      	adds	r3, #16
 8006a18:	441a      	add	r2, r3
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	9302      	str	r3, [sp, #8]
 8006a1e:	f04f 31ff 	mov.w	r1, #4294967295
 8006a22:	9101      	str	r1, [sp, #4]
 8006a24:	9100      	str	r1, [sp, #0]
 8006a26:	3204      	adds	r2, #4
 8006a28:	4629      	mov	r1, r5
 8006a2a:	4620      	mov	r0, r4
 8006a2c:	f001 fbe8 	bl	8008200 <ipv6SetAddr>
 8006a30:	e7dc      	b.n	80069ec <ipv6LinkChangeEvent+0x74>
               NDP_INFINITE_LIFETIME, NDP_INFINITE_LIFETIME, TRUE);
         }
      }
   }
}
 8006a32:	b005      	add	sp, #20
 8006a34:	bd30      	pop	{r4, r5, pc}

08006a36 <ipv6ParseRoutingHeader>:
 **/

error_t ipv6ParseRoutingHeader(NetInterface *interface,
   const NetBuffer *ipPacket, size_t ipPacketOffset, size_t *headerOffset,
   size_t *nextHeaderOffset)
{
 8006a36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	4680      	mov	r8, r0
 8006a3e:	460d      	mov	r5, r1
 8006a40:	4617      	mov	r7, r2
 8006a42:	461c      	mov	r4, r3
   size_t length;
   size_t headerLen;
   Ipv6RoutingHeader *header;

   //Remaining bytes to process in the IPv6 packet
   length = netBufferGetLength(ipPacket) - *headerOffset;
 8006a44:	4608      	mov	r0, r1
 8006a46:	f005 fb17 	bl	800c078 <netBufferGetLength>
 8006a4a:	6821      	ldr	r1, [r4, #0]
 8006a4c:	1a46      	subs	r6, r0, r1

   //Make sure the extension header is valid
   if(length < sizeof(Ipv6RoutingHeader))
 8006a4e:	2e07      	cmp	r6, #7
 8006a50:	d922      	bls.n	8006a98 <ipv6ParseRoutingHeader+0x62>
      return ERROR_INVALID_HEADER;

   //Point to the Routing header
   header = netBufferAt(ipPacket, *headerOffset, 0);
 8006a52:	2200      	movs	r2, #0
 8006a54:	4628      	mov	r0, r5
 8006a56:	f005 fbaf 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(header == NULL)
 8006a5a:	b1f8      	cbz	r0, 8006a9c <ipv6ParseRoutingHeader+0x66>
      return ERROR_FAILURE;

   //Calculate the length of the entire header
   headerLen = (header->hdrExtLen * 8) + 8;
 8006a5c:	7843      	ldrb	r3, [r0, #1]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	00d9      	lsls	r1, r3, #3

   //Check header length
   if(headerLen > length)
 8006a62:	ebb6 0fc3 	cmp.w	r6, r3, lsl #3
 8006a66:	d31b      	bcc.n	8006aa0 <ipv6ParseRoutingHeader+0x6a>
   TRACE_DEBUG("  Routing header\r\n");

   //If, while processing a received packet, a node encounters a Routing
   //header with an unrecognized Routing Type value, the required behavior
   //of the node depends on the value of the Segments Left field
   if(header->segmentsLeft != 0)
 8006a68:	78c3      	ldrb	r3, [r0, #3]
 8006a6a:	b94b      	cbnz	r3, 8006a80 <ipv6ParseRoutingHeader+0x4a>
      //The node must discard the packet
      return ERROR_INVALID_TYPE;
   }

   //Keep track of Next Header field
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 8006a6c:	6822      	ldr	r2, [r4, #0]
 8006a6e:	9b08      	ldr	r3, [sp, #32]
 8006a70:	601a      	str	r2, [r3, #0]
   //Point to the next extension header
   *headerOffset += headerLen;
 8006a72:	6823      	ldr	r3, [r4, #0]
 8006a74:	440b      	add	r3, r1
 8006a76:	6023      	str	r3, [r4, #0]

   //Successful processing
   return NO_ERROR;
 8006a78:	2000      	movs	r0, #0
}
 8006a7a:	b002      	add	sp, #8
 8006a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      n = *headerOffset - ipPacketOffset;
 8006a80:	6823      	ldr	r3, [r4, #0]
 8006a82:	1bdb      	subs	r3, r3, r7
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 8006a84:	9701      	str	r7, [sp, #4]
 8006a86:	9500      	str	r5, [sp, #0]
 8006a88:	3302      	adds	r3, #2
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	4640      	mov	r0, r8
 8006a90:	f7fd fd66 	bl	8004560 <icmpv6SendErrorMessage>
      return ERROR_INVALID_TYPE;
 8006a94:	20f0      	movs	r0, #240	@ 0xf0
 8006a96:	e7f0      	b.n	8006a7a <ipv6ParseRoutingHeader+0x44>
      return ERROR_INVALID_HEADER;
 8006a98:	20d4      	movs	r0, #212	@ 0xd4
 8006a9a:	e7ee      	b.n	8006a7a <ipv6ParseRoutingHeader+0x44>
      return ERROR_FAILURE;
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	e7ec      	b.n	8006a7a <ipv6ParseRoutingHeader+0x44>
      return ERROR_INVALID_HEADER;
 8006aa0:	20d4      	movs	r0, #212	@ 0xd4
 8006aa2:	e7ea      	b.n	8006a7a <ipv6ParseRoutingHeader+0x44>

08006aa4 <ipv6ParseAhHeader>:
   //Debug message
   TRACE_DEBUG("  AH header\r\n");

   //IPsec is not supported
   return ERROR_FAILURE;
}
 8006aa4:	2001      	movs	r0, #1
 8006aa6:	4770      	bx	lr

08006aa8 <ipv6ParseEspHeader>:
   //Debug message
   TRACE_DEBUG("  ESP header\r\n");

   //IPsec is not supported
   return ERROR_FAILURE;
}
 8006aa8:	2001      	movs	r0, #1
 8006aaa:	4770      	bx	lr

08006aac <ipv6ParseOptions>:
 * @brief Error code
 **/

error_t ipv6ParseOptions(NetInterface *interface, const NetBuffer *ipPacket,
   size_t ipPacketOffset, size_t optionOffset, size_t optionLen)
{
 8006aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	4682      	mov	sl, r0
 8006ab4:	4688      	mov	r8, r1
 8006ab6:	4691      	mov	r9, r2
 8006ab8:	469b      	mov	fp, r3
 8006aba:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
   uint8_t *options;
   Ipv6Option *option;
   Ipv6Header *ipHeader;

   //Point to the first byte of the Options field
   options = netBufferAt(ipPacket, optionOffset, 0);
 8006abc:	2200      	movs	r2, #0
 8006abe:	4619      	mov	r1, r3
 8006ac0:	4640      	mov	r0, r8
 8006ac2:	f005 fb79 	bl	800c1b8 <netBufferAt>

   //Sanity check
   if(options == NULL)
 8006ac6:	2800      	cmp	r0, #0
 8006ac8:	d050      	beq.n	8006b6c <ipv6ParseOptions+0xc0>
 8006aca:	4605      	mov	r5, r0
      return ERROR_FAILURE;

   //Parse options
   for(i = 0; i < optionLen; )
 8006acc:	2400      	movs	r4, #0
 8006ace:	e007      	b.n	8006ae0 <ipv6ParseOptions+0x34>
      {
         //Advance data pointer
         i++;
      }
      //PadN option?
      else if(type == IPV6_OPTION_TYPE_PADN)
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d10e      	bne.n	8006af2 <ipv6ParseOptions+0x46>
      {
         //Malformed IPv6 packet?
         if((i + sizeof(Ipv6Option)) > optionLen)
 8006ad4:	1ca3      	adds	r3, r4, #2
 8006ad6:	42bb      	cmp	r3, r7
 8006ad8:	d84a      	bhi.n	8006b70 <ipv6ParseOptions+0xc4>
            return ERROR_INVALID_LENGTH;

         //Advance data pointer
         i += sizeof(Ipv6Option) + option->length;
 8006ada:	7873      	ldrb	r3, [r6, #1]
 8006adc:	4423      	add	r3, r4
 8006ade:	1c9c      	adds	r4, r3, #2
   for(i = 0; i < optionLen; )
 8006ae0:	42bc      	cmp	r4, r7
 8006ae2:	d23f      	bcs.n	8006b64 <ipv6ParseOptions+0xb8>
      option = (Ipv6Option *) (options + i);
 8006ae4:	192e      	adds	r6, r5, r4
      type = option->type & IPV6_OPTION_TYPE_MASK;
 8006ae6:	5d2b      	ldrb	r3, [r5, r4]
      if(type == IPV6_OPTION_TYPE_PAD1)
 8006ae8:	f013 031f 	ands.w	r3, r3, #31
 8006aec:	d1f0      	bne.n	8006ad0 <ipv6ParseOptions+0x24>
         i++;
 8006aee:	3401      	adds	r4, #1
 8006af0:	e7f6      	b.n	8006ae0 <ipv6ParseOptions+0x34>
      }
      //Unrecognized option?
      else
      {
         //Point to the IPv6 header
         ipHeader = netBufferAt(ipPacket, ipPacketOffset, 0);
 8006af2:	2200      	movs	r2, #0
 8006af4:	4649      	mov	r1, r9
 8006af6:	4640      	mov	r0, r8
 8006af8:	f005 fb5e 	bl	800c1b8 <netBufferAt>

         //Sanity check
         if(ipHeader == NULL)
 8006afc:	b3d0      	cbz	r0, 8006b74 <ipv6ParseOptions+0xc8>
            return ERROR_FAILURE;

         //Get the value of the highest-order two bits
         action = option->type & IPV6_ACTION_MASK;
 8006afe:	7833      	ldrb	r3, [r6, #0]

         //The highest-order two bits specify the action that must be taken
         //if the processing IPv6 node does not recognize the option type
         if(action == IPV6_ACTION_SKIP_OPTION)
 8006b00:	f013 03c0 	ands.w	r3, r3, #192	@ 0xc0
 8006b04:	d005      	beq.n	8006b12 <ipv6ParseOptions+0x66>
         {
            //Skip over this option and continue processing the header
         }
         else if(action == IPV6_ACTION_DISCARD_PACKET)
 8006b06:	2b40      	cmp	r3, #64	@ 0x40
 8006b08:	d036      	beq.n	8006b78 <ipv6ParseOptions+0xcc>
         {
            //Discard the packet
            return ERROR_INVALID_OPTION;
         }
         else if(action == IPV6_ACTION_SEND_ICMP_ERROR_ALL)
 8006b0a:	2b80      	cmp	r3, #128	@ 0x80
 8006b0c:	d008      	beq.n	8006b20 <ipv6ParseOptions+0x74>
               ICMPV6_CODE_UNKNOWN_IPV6_OPTION, n, ipPacket, ipPacketOffset);

            //Discard the packet
            return ERROR_INVALID_OPTION;
         }
         else if(action == IPV6_ACTION_SEND_ICMP_ERROR_UNI)
 8006b0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006b10:	d015      	beq.n	8006b3e <ipv6ParseOptions+0x92>
            //Discard the packet
            return ERROR_INVALID_OPTION;
         }

         //Malformed IPv6 packet?
         if((i + sizeof(Ipv6Option)) > optionLen)
 8006b12:	1ca3      	adds	r3, r4, #2
 8006b14:	42bb      	cmp	r3, r7
 8006b16:	d831      	bhi.n	8006b7c <ipv6ParseOptions+0xd0>
            return ERROR_INVALID_LENGTH;

         //Advance data pointer
         i += sizeof(Ipv6Option) + option->length;
 8006b18:	7873      	ldrb	r3, [r6, #1]
 8006b1a:	4423      	add	r3, r4
 8006b1c:	1c9c      	adds	r4, r3, #2
 8006b1e:	e7df      	b.n	8006ae0 <ipv6ParseOptions+0x34>
            n = optionOffset + i - ipPacketOffset;
 8006b20:	eb04 030b 	add.w	r3, r4, fp
            icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 8006b24:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b28:	f8cd 8000 	str.w	r8, [sp]
 8006b2c:	eba3 0309 	sub.w	r3, r3, r9
 8006b30:	2202      	movs	r2, #2
 8006b32:	2104      	movs	r1, #4
 8006b34:	4650      	mov	r0, sl
 8006b36:	f7fd fd13 	bl	8004560 <icmpv6SendErrorMessage>
            return ERROR_INVALID_OPTION;
 8006b3a:	20df      	movs	r0, #223	@ 0xdf
 8006b3c:	e013      	b.n	8006b66 <ipv6ParseOptions+0xba>
            if(!ipv6IsMulticastAddr(&ipHeader->destAddr))
 8006b3e:	7e03      	ldrb	r3, [r0, #24]
 8006b40:	2bff      	cmp	r3, #255	@ 0xff
 8006b42:	d101      	bne.n	8006b48 <ipv6ParseOptions+0x9c>
            return ERROR_INVALID_OPTION;
 8006b44:	20df      	movs	r0, #223	@ 0xdf
 8006b46:	e00e      	b.n	8006b66 <ipv6ParseOptions+0xba>
               n = optionOffset + i - ipPacketOffset;
 8006b48:	eb04 030b 	add.w	r3, r4, fp
               icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 8006b4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006b50:	f8cd 8000 	str.w	r8, [sp]
 8006b54:	eba3 0309 	sub.w	r3, r3, r9
 8006b58:	2202      	movs	r2, #2
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	4650      	mov	r0, sl
 8006b5e:	f7fd fcff 	bl	8004560 <icmpv6SendErrorMessage>
 8006b62:	e7ef      	b.n	8006b44 <ipv6ParseOptions+0x98>
      }
   }

   //Successful processing
   return NO_ERROR;
 8006b64:	2000      	movs	r0, #0
}
 8006b66:	b003      	add	sp, #12
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_FAILURE;
 8006b6c:	2001      	movs	r0, #1
 8006b6e:	e7fa      	b.n	8006b66 <ipv6ParseOptions+0xba>
            return ERROR_INVALID_LENGTH;
 8006b70:	20ec      	movs	r0, #236	@ 0xec
 8006b72:	e7f8      	b.n	8006b66 <ipv6ParseOptions+0xba>
            return ERROR_FAILURE;
 8006b74:	2001      	movs	r0, #1
 8006b76:	e7f6      	b.n	8006b66 <ipv6ParseOptions+0xba>
            return ERROR_INVALID_OPTION;
 8006b78:	20df      	movs	r0, #223	@ 0xdf
 8006b7a:	e7f4      	b.n	8006b66 <ipv6ParseOptions+0xba>
            return ERROR_INVALID_LENGTH;
 8006b7c:	20ec      	movs	r0, #236	@ 0xec
 8006b7e:	e7f2      	b.n	8006b66 <ipv6ParseOptions+0xba>

08006b80 <ipv6ParseHopByHopOptHeader>:
{
 8006b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b84:	b083      	sub	sp, #12
 8006b86:	4680      	mov	r8, r0
 8006b88:	460c      	mov	r4, r1
 8006b8a:	4617      	mov	r7, r2
 8006b8c:	461d      	mov	r5, r3
   length = netBufferGetLength(ipPacket) - *headerOffset;
 8006b8e:	4608      	mov	r0, r1
 8006b90:	f005 fa72 	bl	800c078 <netBufferGetLength>
 8006b94:	6829      	ldr	r1, [r5, #0]
 8006b96:	1a46      	subs	r6, r0, r1
   if(length < sizeof(Ipv6HopByHopOptHeader))
 8006b98:	2e01      	cmp	r6, #1
 8006b9a:	d92d      	bls.n	8006bf8 <ipv6ParseHopByHopOptHeader+0x78>
   header = netBufferAt(ipPacket, *headerOffset, 0);
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f005 fb0a 	bl	800c1b8 <netBufferAt>
   if(header == NULL)
 8006ba4:	b360      	cbz	r0, 8006c00 <ipv6ParseHopByHopOptHeader+0x80>
   headerLen = (header->hdrExtLen * 8) + 8;
 8006ba6:	7843      	ldrb	r3, [r0, #1]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   if(headerLen > length)
 8006bae:	ebb6 0fc3 	cmp.w	r6, r3, lsl #3
 8006bb2:	d327      	bcc.n	8006c04 <ipv6ParseHopByHopOptHeader+0x84>
   if(*headerOffset != (ipPacketOffset + sizeof(Ipv6Header)))
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d110      	bne.n	8006be0 <ipv6ParseHopByHopOptHeader+0x60>
   n = headerLen - sizeof(Ipv6HopByHopOptHeader);
 8006bbe:	f1a9 0202 	sub.w	r2, r9, #2
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
 8006bc2:	9200      	str	r2, [sp, #0]
 8006bc4:	3302      	adds	r3, #2
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	4621      	mov	r1, r4
 8006bca:	4640      	mov	r0, r8
 8006bcc:	f7ff ff6e 	bl	8006aac <ipv6ParseOptions>
   if(error)
 8006bd0:	b998      	cbnz	r0, 8006bfa <ipv6ParseHopByHopOptHeader+0x7a>
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 8006bd2:	682b      	ldr	r3, [r5, #0]
 8006bd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006bd6:	6013      	str	r3, [r2, #0]
   *headerOffset += headerLen;
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	444b      	add	r3, r9
 8006bdc:	602b      	str	r3, [r5, #0]
   return NO_ERROR;
 8006bde:	e00c      	b.n	8006bfa <ipv6ParseHopByHopOptHeader+0x7a>
      n = *nextHeaderOffset - ipPacketOffset;
 8006be0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006be2:	681b      	ldr	r3, [r3, #0]
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 8006be4:	9701      	str	r7, [sp, #4]
 8006be6:	9400      	str	r4, [sp, #0]
 8006be8:	1bdb      	subs	r3, r3, r7
 8006bea:	2201      	movs	r2, #1
 8006bec:	2104      	movs	r1, #4
 8006bee:	4640      	mov	r0, r8
 8006bf0:	f7fd fcb6 	bl	8004560 <icmpv6SendErrorMessage>
      return ERROR_INVALID_HEADER;
 8006bf4:	20d4      	movs	r0, #212	@ 0xd4
 8006bf6:	e000      	b.n	8006bfa <ipv6ParseHopByHopOptHeader+0x7a>
      return ERROR_INVALID_HEADER;
 8006bf8:	20d4      	movs	r0, #212	@ 0xd4
}
 8006bfa:	b003      	add	sp, #12
 8006bfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return ERROR_FAILURE;
 8006c00:	2001      	movs	r0, #1
 8006c02:	e7fa      	b.n	8006bfa <ipv6ParseHopByHopOptHeader+0x7a>
      return ERROR_INVALID_HEADER;
 8006c04:	20d4      	movs	r0, #212	@ 0xd4
 8006c06:	e7f8      	b.n	8006bfa <ipv6ParseHopByHopOptHeader+0x7a>

08006c08 <ipv6ParseDestOptHeader>:
{
 8006c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	b083      	sub	sp, #12
 8006c0e:	4607      	mov	r7, r0
 8006c10:	460d      	mov	r5, r1
 8006c12:	4690      	mov	r8, r2
 8006c14:	461c      	mov	r4, r3
   length = netBufferGetLength(ipPacket) - *headerOffset;
 8006c16:	4608      	mov	r0, r1
 8006c18:	f005 fa2e 	bl	800c078 <netBufferGetLength>
 8006c1c:	6821      	ldr	r1, [r4, #0]
 8006c1e:	1a46      	subs	r6, r0, r1
   if(length < sizeof(Ipv6DestOptHeader))
 8006c20:	2e01      	cmp	r6, #1
 8006c22:	d91d      	bls.n	8006c60 <ipv6ParseDestOptHeader+0x58>
   header = netBufferAt(ipPacket, *headerOffset, 0);
 8006c24:	2200      	movs	r2, #0
 8006c26:	4628      	mov	r0, r5
 8006c28:	f005 fac6 	bl	800c1b8 <netBufferAt>
   if(header == NULL)
 8006c2c:	b1e0      	cbz	r0, 8006c68 <ipv6ParseDestOptHeader+0x60>
   headerLen = (header->hdrExtLen * 8) + 8;
 8006c2e:	7843      	ldrb	r3, [r0, #1]
 8006c30:	3301      	adds	r3, #1
 8006c32:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   if(headerLen > length)
 8006c36:	ebb6 0fc3 	cmp.w	r6, r3, lsl #3
 8006c3a:	d317      	bcc.n	8006c6c <ipv6ParseDestOptHeader+0x64>
   n = headerLen - sizeof(Ipv6DestOptHeader);
 8006c3c:	f1a9 0202 	sub.w	r2, r9, #2
      *headerOffset + sizeof(Ipv6DestOptHeader), n);
 8006c40:	6823      	ldr	r3, [r4, #0]
   error = ipv6ParseOptions(interface, ipPacket, ipPacketOffset,
 8006c42:	9200      	str	r2, [sp, #0]
 8006c44:	3302      	adds	r3, #2
 8006c46:	4642      	mov	r2, r8
 8006c48:	4629      	mov	r1, r5
 8006c4a:	4638      	mov	r0, r7
 8006c4c:	f7ff ff2e 	bl	8006aac <ipv6ParseOptions>
   if(error)
 8006c50:	b938      	cbnz	r0, 8006c62 <ipv6ParseDestOptHeader+0x5a>
   *nextHeaderOffset = *headerOffset + &header->nextHeader - (uint8_t *) header;
 8006c52:	6822      	ldr	r2, [r4, #0]
 8006c54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c56:	601a      	str	r2, [r3, #0]
   *headerOffset += headerLen;
 8006c58:	6823      	ldr	r3, [r4, #0]
 8006c5a:	444b      	add	r3, r9
 8006c5c:	6023      	str	r3, [r4, #0]
   return NO_ERROR;
 8006c5e:	e000      	b.n	8006c62 <ipv6ParseDestOptHeader+0x5a>
      return ERROR_INVALID_HEADER;
 8006c60:	20d4      	movs	r0, #212	@ 0xd4
}
 8006c62:	b003      	add	sp, #12
 8006c64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return ERROR_FAILURE;
 8006c68:	2001      	movs	r0, #1
 8006c6a:	e7fa      	b.n	8006c62 <ipv6ParseDestOptHeader+0x5a>
      return ERROR_INVALID_HEADER;
 8006c6c:	20d4      	movs	r0, #212	@ 0xd4
 8006c6e:	e7f8      	b.n	8006c62 <ipv6ParseDestOptHeader+0x5a>

08006c70 <ipv6ProcessPacket>:
{
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	b090      	sub	sp, #64	@ 0x40
 8006c76:	4680      	mov	r8, r0
 8006c78:	460c      	mov	r4, r1
 8006c7a:	4617      	mov	r7, r2
 8006c7c:	461e      	mov	r6, r3
   length = netBufferGetLength(ipPacket);
 8006c7e:	4608      	mov	r0, r1
 8006c80:	f005 f9fa 	bl	800c078 <netBufferGetLength>
   if(length < sizeof(Ipv6Header))
 8006c84:	2827      	cmp	r0, #39	@ 0x27
 8006c86:	d802      	bhi.n	8006c8e <ipv6ProcessPacket+0x1e>
}
 8006c88:	b010      	add	sp, #64	@ 0x40
 8006c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c8e:	4605      	mov	r5, r0
   ipHeader = netBufferAt(ipPacket, ipPacketOffset, 0);
 8006c90:	2200      	movs	r2, #0
 8006c92:	4639      	mov	r1, r7
 8006c94:	4620      	mov	r0, r4
 8006c96:	f005 fa8f 	bl	800c1b8 <netBufferAt>
   if(ipHeader == NULL)
 8006c9a:	4681      	mov	r9, r0
 8006c9c:	2800      	cmp	r0, #0
 8006c9e:	d0f3      	beq.n	8006c88 <ipv6ProcessPacket+0x18>
   if(ipHeader->version != IPV6_VERSION)
 8006ca0:	7803      	ldrb	r3, [r0, #0]
 8006ca2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006ca6:	2b60      	cmp	r3, #96	@ 0x60
 8006ca8:	d1ee      	bne.n	8006c88 <ipv6ProcessPacket+0x18>
   if(ntohs(ipHeader->payloadLen) > (length - sizeof(Ipv6Header)))
 8006caa:	8880      	ldrh	r0, [r0, #4]
 8006cac:	f7f9 fcb6 	bl	800061c <swapInt16>
 8006cb0:	f1a5 0328 	sub.w	r3, r5, #40	@ 0x28
 8006cb4:	4298      	cmp	r0, r3
 8006cb6:	d8e7      	bhi.n	8006c88 <ipv6ProcessPacket+0x18>
   if(ipv6CheckSourceAddr(interface, &ipHeader->srcAddr))
 8006cb8:	f109 0a08 	add.w	sl, r9, #8
 8006cbc:	4651      	mov	r1, sl
 8006cbe:	4640      	mov	r0, r8
 8006cc0:	f000 ffa8 	bl	8007c14 <ipv6CheckSourceAddr>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1df      	bne.n	8006c88 <ipv6ProcessPacket+0x18>
   if(ipv6IsMulticastAddr(&ipHeader->destAddr))
 8006cc8:	f899 3018 	ldrb.w	r3, [r9, #24]
 8006ccc:	2bff      	cmp	r3, #255	@ 0xff
 8006cce:	f000 80e1 	beq.w	8006e94 <ipv6ProcessPacket+0x224>
      error = ipv6CheckDestAddr(interface, &ipHeader->destAddr);
 8006cd2:	f109 0118 	add.w	r1, r9, #24
 8006cd6:	4640      	mov	r0, r8
 8006cd8:	f000 ffa4 	bl	8007c24 <ipv6CheckDestAddr>
   if(error)
 8006cdc:	2800      	cmp	r0, #0
 8006cde:	d1d3      	bne.n	8006c88 <ipv6ProcessPacket+0x18>
   ipv6UpdateInStats(interface, &ipHeader->destAddr, length);
 8006ce0:	f109 0a18 	add.w	sl, r9, #24
 8006ce4:	462a      	mov	r2, r5
 8006ce6:	4651      	mov	r1, sl
 8006ce8:	4640      	mov	r0, r8
 8006cea:	f001 fb67 	bl	80083bc <ipv6UpdateInStats>
      ntohs(ipHeader->payloadLen);
 8006cee:	f8b9 0004 	ldrh.w	r0, [r9, #4]
 8006cf2:	f7f9 fc93 	bl	800061c <swapInt16>
   length = ipPacketOffset + sizeof(Ipv6Header) +
 8006cf6:	19c5      	adds	r5, r0, r7
 8006cf8:	3528      	adds	r5, #40	@ 0x28
   netBufferSetLength(ipPacket, length);
 8006cfa:	4629      	mov	r1, r5
 8006cfc:	4620      	mov	r0, r4
 8006cfe:	f005 f9c8 	bl	800c092 <netBufferSetLength>
   pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 8006d02:	2328      	movs	r3, #40	@ 0x28
 8006d04:	9303      	str	r3, [sp, #12]
   pseudoHeader.ipv6Data.srcAddr = ipHeader->srcAddr;
 8006d06:	f10d 0c10 	add.w	ip, sp, #16
 8006d0a:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8006d0e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006d12:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8006d16:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006d1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   pseudoHeader.ipv6Data.destAddr = ipHeader->destAddr;
 8006d1e:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8006d22:	f8da 1004 	ldr.w	r1, [sl, #4]
 8006d26:	f8da 2008 	ldr.w	r2, [sl, #8]
 8006d2a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8006d2e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   pseudoHeader.ipv6Data.reserved[0] = 0;
 8006d32:	2300      	movs	r3, #0
 8006d34:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
   pseudoHeader.ipv6Data.reserved[1] = 0;
 8006d38:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
   pseudoHeader.ipv6Data.reserved[2] = 0;
 8006d3c:	f88d 3036 	strb.w	r3, [sp, #54]	@ 0x36
   ancillary->ttl = ipHeader->hopLimit;
 8006d40:	f899 3007 	ldrb.w	r3, [r9, #7]
 8006d44:	7033      	strb	r3, [r6, #0]
   ancillary->tos = (ipHeader->trafficClassH << 4) | ipHeader->trafficClassL;
 8006d46:	f899 3000 	ldrb.w	r3, [r9]
 8006d4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8006d4e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8006d52:	011b      	lsls	r3, r3, #4
 8006d54:	ea43 1312 	orr.w	r3, r3, r2, lsr #4
 8006d58:	7073      	strb	r3, [r6, #1]
   nextHeaderOffset = ipPacketOffset + &ipHeader->nextHeader -
 8006d5a:	f109 0306 	add.w	r3, r9, #6
 8006d5e:	443b      	add	r3, r7
 8006d60:	eba3 0309 	sub.w	r3, r3, r9
 8006d64:	930e      	str	r3, [sp, #56]	@ 0x38
   i = ipPacketOffset + sizeof(Ipv6Header);
 8006d66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8006d6a:	930f      	str	r3, [sp, #60]	@ 0x3c
   while(i < length)
 8006d6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d6e:	42ab      	cmp	r3, r5
 8006d70:	d28a      	bcs.n	8006c88 <ipv6ProcessPacket+0x18>
      type = netBufferAt(ipPacket, nextHeaderOffset, 0);
 8006d72:	2200      	movs	r2, #0
 8006d74:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006d76:	4620      	mov	r0, r4
 8006d78:	f005 fa1e 	bl	800c1b8 <netBufferAt>
      if(type == NULL)
 8006d7c:	4681      	mov	r9, r0
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d082      	beq.n	8006c88 <ipv6ProcessPacket+0x18>
      pseudoHeader.ipv6Data.length = htonl(length - i);
 8006d82:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8006d84:	1a28      	subs	r0, r5, r0
 8006d86:	f7f9 fc4c 	bl	8000622 <swapInt32>
 8006d8a:	900c      	str	r0, [sp, #48]	@ 0x30
      pseudoHeader.ipv6Data.nextHeader = *type;
 8006d8c:	f899 3000 	ldrb.w	r3, [r9]
 8006d90:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
      switch(*type)
 8006d94:	2b3c      	cmp	r3, #60	@ 0x3c
 8006d96:	f200 80ef 	bhi.w	8006f78 <ipv6ProcessPacket+0x308>
 8006d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006da0 <ipv6ProcessPacket+0x130>)
 8006d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da0:	08006ea3 	.word	0x08006ea3
 8006da4:	08006f79 	.word	0x08006f79
 8006da8:	08006f79 	.word	0x08006f79
 8006dac:	08006f79 	.word	0x08006f79
 8006db0:	08006f79 	.word	0x08006f79
 8006db4:	08006f79 	.word	0x08006f79
 8006db8:	08006f27 	.word	0x08006f27
 8006dbc:	08006f79 	.word	0x08006f79
 8006dc0:	08006f79 	.word	0x08006f79
 8006dc4:	08006f79 	.word	0x08006f79
 8006dc8:	08006f79 	.word	0x08006f79
 8006dcc:	08006f79 	.word	0x08006f79
 8006dd0:	08006f79 	.word	0x08006f79
 8006dd4:	08006f79 	.word	0x08006f79
 8006dd8:	08006f79 	.word	0x08006f79
 8006ddc:	08006f79 	.word	0x08006f79
 8006de0:	08006f79 	.word	0x08006f79
 8006de4:	08006f45 	.word	0x08006f45
 8006de8:	08006f79 	.word	0x08006f79
 8006dec:	08006f79 	.word	0x08006f79
 8006df0:	08006f79 	.word	0x08006f79
 8006df4:	08006f79 	.word	0x08006f79
 8006df8:	08006f79 	.word	0x08006f79
 8006dfc:	08006f79 	.word	0x08006f79
 8006e00:	08006f79 	.word	0x08006f79
 8006e04:	08006f79 	.word	0x08006f79
 8006e08:	08006f79 	.word	0x08006f79
 8006e0c:	08006f79 	.word	0x08006f79
 8006e10:	08006f79 	.word	0x08006f79
 8006e14:	08006f79 	.word	0x08006f79
 8006e18:	08006f79 	.word	0x08006f79
 8006e1c:	08006f79 	.word	0x08006f79
 8006e20:	08006f79 	.word	0x08006f79
 8006e24:	08006f79 	.word	0x08006f79
 8006e28:	08006f79 	.word	0x08006f79
 8006e2c:	08006f79 	.word	0x08006f79
 8006e30:	08006f79 	.word	0x08006f79
 8006e34:	08006f79 	.word	0x08006f79
 8006e38:	08006f79 	.word	0x08006f79
 8006e3c:	08006f79 	.word	0x08006f79
 8006e40:	08006f79 	.word	0x08006f79
 8006e44:	08006f79 	.word	0x08006f79
 8006e48:	08006f79 	.word	0x08006f79
 8006e4c:	08006ecd 	.word	0x08006ecd
 8006e50:	08006edf 	.word	0x08006edf
 8006e54:	08006f79 	.word	0x08006f79
 8006e58:	08006f79 	.word	0x08006f79
 8006e5c:	08006f79 	.word	0x08006f79
 8006e60:	08006f79 	.word	0x08006f79
 8006e64:	08006f79 	.word	0x08006f79
 8006e68:	08006f05 	.word	0x08006f05
 8006e6c:	08006ef3 	.word	0x08006ef3
 8006e70:	08006f79 	.word	0x08006f79
 8006e74:	08006f79 	.word	0x08006f79
 8006e78:	08006f79 	.word	0x08006f79
 8006e7c:	08006f79 	.word	0x08006f79
 8006e80:	08006f79 	.word	0x08006f79
 8006e84:	08006f79 	.word	0x08006f79
 8006e88:	08006f17 	.word	0x08006f17
 8006e8c:	08006c89 	.word	0x08006c89
 8006e90:	08006ebb 	.word	0x08006ebb
      error = ipv6MulticastFilter(interface, &ipHeader->destAddr,
 8006e94:	4652      	mov	r2, sl
 8006e96:	f109 0118 	add.w	r1, r9, #24
 8006e9a:	4640      	mov	r0, r8
 8006e9c:	f001 fa90 	bl	80083c0 <ipv6MulticastFilter>
 8006ea0:	e71c      	b.n	8006cdc <ipv6ProcessPacket+0x6c>
         error = ipv6ParseHopByHopOptHeader(interface, ipPacket, ipPacketOffset,
 8006ea2:	ab0e      	add	r3, sp, #56	@ 0x38
 8006ea4:	9300      	str	r3, [sp, #0]
 8006ea6:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006ea8:	463a      	mov	r2, r7
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4640      	mov	r0, r8
 8006eae:	f7ff fe67 	bl	8006b80 <ipv6ParseHopByHopOptHeader>
      if(error)
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f af5a 	beq.w	8006d6c <ipv6ProcessPacket+0xfc>
 8006eb8:	e6e6      	b.n	8006c88 <ipv6ProcessPacket+0x18>
         error = ipv6ParseDestOptHeader(interface, ipPacket, ipPacketOffset,
 8006eba:	ab0e      	add	r3, sp, #56	@ 0x38
 8006ebc:	9300      	str	r3, [sp, #0]
 8006ebe:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006ec0:	463a      	mov	r2, r7
 8006ec2:	4621      	mov	r1, r4
 8006ec4:	4640      	mov	r0, r8
 8006ec6:	f7ff fe9f 	bl	8006c08 <ipv6ParseDestOptHeader>
         break;
 8006eca:	e7f2      	b.n	8006eb2 <ipv6ProcessPacket+0x242>
         error = ipv6ParseRoutingHeader(interface, ipPacket, ipPacketOffset,
 8006ecc:	ab0e      	add	r3, sp, #56	@ 0x38
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006ed2:	463a      	mov	r2, r7
 8006ed4:	4621      	mov	r1, r4
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	f7ff fdad 	bl	8006a36 <ipv6ParseRoutingHeader>
         break;
 8006edc:	e7e9      	b.n	8006eb2 <ipv6ProcessPacket+0x242>
         ipv6ParseFragmentHeader(interface, ipPacket, ipPacketOffset,
 8006ede:	9601      	str	r6, [sp, #4]
 8006ee0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ee2:	9300      	str	r3, [sp, #0]
 8006ee4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ee6:	463a      	mov	r2, r7
 8006ee8:	4621      	mov	r1, r4
 8006eea:	4640      	mov	r0, r8
 8006eec:	f000 fc5f 	bl	80077ae <ipv6ParseFragmentHeader>
         return;
 8006ef0:	e6ca      	b.n	8006c88 <ipv6ProcessPacket+0x18>
         error = ipv6ParseAhHeader(interface, ipPacket, ipPacketOffset,
 8006ef2:	ab0e      	add	r3, sp, #56	@ 0x38
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006ef8:	463a      	mov	r2, r7
 8006efa:	4621      	mov	r1, r4
 8006efc:	4640      	mov	r0, r8
 8006efe:	f7ff fdd1 	bl	8006aa4 <ipv6ParseAhHeader>
         break;
 8006f02:	e7d6      	b.n	8006eb2 <ipv6ProcessPacket+0x242>
         error = ipv6ParseEspHeader(interface, ipPacket, ipPacketOffset,
 8006f04:	ab0e      	add	r3, sp, #56	@ 0x38
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	ab0f      	add	r3, sp, #60	@ 0x3c
 8006f0a:	463a      	mov	r2, r7
 8006f0c:	4621      	mov	r1, r4
 8006f0e:	4640      	mov	r0, r8
 8006f10:	f7ff fdca 	bl	8006aa8 <ipv6ParseEspHeader>
         break;
 8006f14:	e7cd      	b.n	8006eb2 <ipv6ProcessPacket+0x242>
         icmpv6ProcessMessage(interface, &pseudoHeader.ipv6Data, ipPacket,
 8006f16:	9600      	str	r6, [sp, #0]
 8006f18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	a904      	add	r1, sp, #16
 8006f1e:	4640      	mov	r0, r8
 8006f20:	f7fd fa7e 	bl	8004420 <icmpv6ProcessMessage>
         return;
 8006f24:	e6b0      	b.n	8006c88 <ipv6ProcessPacket+0x18>
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 8006f26:	4651      	mov	r1, sl
 8006f28:	4640      	mov	r0, r8
 8006f2a:	f000 fed7 	bl	8007cdc <ipv6IsTentativeAddr>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f47f aeaa 	bne.w	8006c88 <ipv6ProcessPacket+0x18>
            tcpProcessSegment(interface, &pseudoHeader, ipPacket, i, ancillary);
 8006f34:	9600      	str	r6, [sp, #0]
 8006f36:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f38:	4622      	mov	r2, r4
 8006f3a:	a903      	add	r1, sp, #12
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	f008 f80d 	bl	800ef5c <tcpProcessSegment>
 8006f42:	e6a1      	b.n	8006c88 <ipv6ProcessPacket+0x18>
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 8006f44:	4651      	mov	r1, sl
 8006f46:	4640      	mov	r0, r8
 8006f48:	f000 fec8 	bl	8007cdc <ipv6IsTentativeAddr>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f47f ae9b 	bne.w	8006c88 <ipv6ProcessPacket+0x18>
            error = udpProcessDatagram(interface, &pseudoHeader, ipPacket, i,
 8006f52:	9600      	str	r6, [sp, #0]
 8006f54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f56:	4622      	mov	r2, r4
 8006f58:	a903      	add	r1, sp, #12
 8006f5a:	4640      	mov	r0, r8
 8006f5c:	f009 fef6 	bl	8010d4c <udpProcessDatagram>
            if(error == ERROR_PORT_UNREACHABLE)
 8006f60:	28d2      	cmp	r0, #210	@ 0xd2
 8006f62:	f47f ae91 	bne.w	8006c88 <ipv6ProcessPacket+0x18>
               icmpv6SendErrorMessage(interface, ICMPV6_TYPE_DEST_UNREACHABLE,
 8006f66:	9701      	str	r7, [sp, #4]
 8006f68:	9400      	str	r4, [sp, #0]
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	2204      	movs	r2, #4
 8006f6e:	2101      	movs	r1, #1
 8006f70:	4640      	mov	r0, r8
 8006f72:	f7fd faf5 	bl	8004560 <icmpv6SendErrorMessage>
 8006f76:	e687      	b.n	8006c88 <ipv6ProcessPacket+0x18>
         if(!ipv6IsTentativeAddr(interface, &ipHeader->destAddr))
 8006f78:	4651      	mov	r1, sl
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f000 feae 	bl	8007cdc <ipv6IsTentativeAddr>
 8006f80:	2800      	cmp	r0, #0
 8006f82:	f47f ae81 	bne.w	8006c88 <ipv6ProcessPacket+0x18>
               icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 8006f86:	9701      	str	r7, [sp, #4]
 8006f88:	9400      	str	r4, [sp, #0]
 8006f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006f8c:	1bdb      	subs	r3, r3, r7
 8006f8e:	2201      	movs	r2, #1
 8006f90:	2104      	movs	r1, #4
 8006f92:	4640      	mov	r0, r8
 8006f94:	f7fd fae4 	bl	8004560 <icmpv6SendErrorMessage>
 8006f98:	e676      	b.n	8006c88 <ipv6ProcessPacket+0x18>
 8006f9a:	bf00      	nop

08006f9c <ipv6FormatHopByHopOptHeader>:
 * @return Error code
 **/

error_t ipv6FormatHopByHopOptHeader(uint8_t *nextHeader, NetBuffer *buffer,
   size_t *offset)
{
 8006f9c:	b510      	push	{r4, lr}
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
   Ipv6HopByHopOptHeader *header;
   Ipv6Option *option;

   //Make sure there is sufficient space for the Fragment header, the IPv6
   //Router Alert option and the PadN option
   if(*offset >= (sizeof(Ipv6HopByHopOptHeader) +
 8006fa2:	6811      	ldr	r1, [r2, #0]
 8006fa4:	2907      	cmp	r1, #7
 8006fa6:	d801      	bhi.n	8006fac <ipv6FormatHopByHopOptHeader+0x10>
      error = NO_ERROR;
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8006fa8:	2002      	movs	r0, #2
   }

   //Return status code
   return error;
}
 8006faa:	bd10      	pop	{r4, pc}
      *offset -= sizeof(Ipv6HopByHopOptHeader) + sizeof(Ipv6RouterAlertOption) +
 8006fac:	3908      	subs	r1, #8
 8006fae:	6011      	str	r1, [r2, #0]
      header = netBufferAt(buffer, *offset, 0);
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f005 f901 	bl	800c1b8 <netBufferAt>
      header->nextHeader = *nextHeader;
 8006fb6:	7823      	ldrb	r3, [r4, #0]
 8006fb8:	7003      	strb	r3, [r0, #0]
      header->hdrExtLen = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	7043      	strb	r3, [r0, #1]
      option->type = IPV6_OPTION_TYPE_ROUTER_ALERT;
 8006fbe:	2105      	movs	r1, #5
 8006fc0:	7081      	strb	r1, [r0, #2]
      option->length = sizeof(uint16_t);
 8006fc2:	2102      	movs	r1, #2
 8006fc4:	70c1      	strb	r1, [r0, #3]
      option->data[0] = 0;
 8006fc6:	7103      	strb	r3, [r0, #4]
      option->data[1] = 0;
 8006fc8:	7143      	strb	r3, [r0, #5]
      option->type = IPV6_OPTION_TYPE_PADN;
 8006fca:	2101      	movs	r1, #1
 8006fcc:	7181      	strb	r1, [r0, #6]
      option->length = 0;
 8006fce:	71c3      	strb	r3, [r0, #7]
      *nextHeader = IPV6_HOP_BY_HOP_OPT_HEADER;
 8006fd0:	7023      	strb	r3, [r4, #0]
      error = NO_ERROR;
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	e7e9      	b.n	8006faa <ipv6FormatHopByHopOptHeader+0xe>

08006fd6 <ipv6FormatFragmentHeader>:
 * @return Error code
 **/

error_t ipv6FormatFragmentHeader(uint32_t fragId, size_t fragOffset,
   uint8_t *nextHeader, NetBuffer *buffer, size_t *offset)
{
 8006fd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	4605      	mov	r5, r0
 8006fdc:	460e      	mov	r6, r1
 8006fde:	9806      	ldr	r0, [sp, #24]
   error_t error;
   Ipv6FragmentHeader *header;

   //Make sure there is sufficient space for the Fragment header
   if(*offset >= sizeof(Ipv6FragmentHeader))
 8006fe0:	6801      	ldr	r1, [r0, #0]
 8006fe2:	2907      	cmp	r1, #7
 8006fe4:	d802      	bhi.n	8006fec <ipv6FormatFragmentHeader+0x16>
      error = NO_ERROR;
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_PARAMETER;
 8006fe6:	2002      	movs	r0, #2
   }

   //Return status code
   return error;
}
 8006fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fec:	4614      	mov	r4, r2
      *offset -= sizeof(Ipv6FragmentHeader);
 8006fee:	3908      	subs	r1, #8
 8006ff0:	6001      	str	r1, [r0, #0]
      header = netBufferAt(buffer, *offset, 0);
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f005 f8df 	bl	800c1b8 <netBufferAt>
 8006ffa:	4680      	mov	r8, r0
      header->nextHeader = *nextHeader;
 8006ffc:	7823      	ldrb	r3, [r4, #0]
 8006ffe:	7003      	strb	r3, [r0, #0]
      header->reserved = 0;
 8007000:	2700      	movs	r7, #0
 8007002:	7047      	strb	r7, [r0, #1]
      header->fragmentOffset = htons(fragOffset);
 8007004:	b2b0      	uxth	r0, r6
 8007006:	f7f9 fb09 	bl	800061c <swapInt16>
 800700a:	f8a8 0002 	strh.w	r0, [r8, #2]
      header->identification = htonl(fragId);
 800700e:	4628      	mov	r0, r5
 8007010:	f7f9 fb07 	bl	8000622 <swapInt32>
 8007014:	f8c8 0004 	str.w	r0, [r8, #4]
      *nextHeader = IPV6_FRAGMENT_HEADER;
 8007018:	232c      	movs	r3, #44	@ 0x2c
 800701a:	7023      	strb	r3, [r4, #0]
      error = NO_ERROR;
 800701c:	4638      	mov	r0, r7
 800701e:	e7e3      	b.n	8006fe8 <ipv6FormatFragmentHeader+0x12>

08007020 <ipv6SendPacket>:
{
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007024:	b088      	sub	sp, #32
 8007026:	4606      	mov	r6, r0
 8007028:	460d      	mov	r5, r1
 800702a:	4690      	mov	r8, r2
 800702c:	461c      	mov	r4, r3
 800702e:	f8dd 9040 	ldr.w	r9, [sp, #64]	@ 0x40
 8007032:	9f12      	ldr	r7, [sp, #72]	@ 0x48
   nextHeader = pseudoHeader->nextHeader;
 8007034:	f891 3027 	ldrb.w	r3, [r1, #39]	@ 0x27
 8007038:	f88d 301f 	strb.w	r3, [sp, #31]
   if(ancillary->routerAlert)
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d15e      	bne.n	8007100 <ipv6SendPacket+0xe0>
   if(fragOffset != 0)
 8007042:	2c00      	cmp	r4, #0
 8007044:	d166      	bne.n	8007114 <ipv6SendPacket+0xf4>
   if(offset < sizeof(Ipv6Header))
 8007046:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007048:	2b27      	cmp	r3, #39	@ 0x27
 800704a:	f240 8103 	bls.w	8007254 <ipv6SendPacket+0x234>
   offset -= sizeof(Ipv6Header);
 800704e:	3b28      	subs	r3, #40	@ 0x28
 8007050:	9311      	str	r3, [sp, #68]	@ 0x44
   length = netBufferGetLength(buffer) - offset;
 8007052:	4648      	mov	r0, r9
 8007054:	f005 f810 	bl	800c078 <netBufferGetLength>
 8007058:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800705a:	eba0 0801 	sub.w	r8, r0, r1
   packet = netBufferAt(buffer, offset, 0);
 800705e:	2200      	movs	r2, #0
 8007060:	4648      	mov	r0, r9
 8007062:	f005 f8a9 	bl	800c1b8 <netBufferAt>
 8007066:	4604      	mov	r4, r0
   packet->version = IPV6_VERSION;
 8007068:	7803      	ldrb	r3, [r0, #0]
 800706a:	2206      	movs	r2, #6
 800706c:	f362 1307 	bfi	r3, r2, #4, #4
 8007070:	7003      	strb	r3, [r0, #0]
   packet->trafficClassH = (ancillary->tos >> 4) & 0x0F;
 8007072:	797b      	ldrb	r3, [r7, #5]
 8007074:	091b      	lsrs	r3, r3, #4
 8007076:	7802      	ldrb	r2, [r0, #0]
 8007078:	f363 0203 	bfi	r2, r3, #0, #4
 800707c:	7002      	strb	r2, [r0, #0]
   packet->trafficClassL = ancillary->tos & 0x0F;
 800707e:	797a      	ldrb	r2, [r7, #5]
 8007080:	7843      	ldrb	r3, [r0, #1]
 8007082:	f362 1307 	bfi	r3, r2, #4, #4
 8007086:	7043      	strb	r3, [r0, #1]
   packet->flowLabelH = 0;
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f023 030f 	bic.w	r3, r3, #15
 800708e:	7043      	strb	r3, [r0, #1]
   packet->flowLabelL = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	7083      	strb	r3, [r0, #2]
 8007094:	70c3      	strb	r3, [r0, #3]
   packet->payloadLen = htons(length - sizeof(Ipv6Header));
 8007096:	f1a8 0028 	sub.w	r0, r8, #40	@ 0x28
 800709a:	b280      	uxth	r0, r0
 800709c:	f7f9 fabe 	bl	800061c <swapInt16>
 80070a0:	80a0      	strh	r0, [r4, #4]
   packet->nextHeader = nextHeader;
 80070a2:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80070a6:	71a3      	strb	r3, [r4, #6]
   packet->hopLimit = ancillary->ttl;
 80070a8:	793b      	ldrb	r3, [r7, #4]
 80070aa:	71e3      	strb	r3, [r4, #7]
   packet->srcAddr = pseudoHeader->srcAddr;
 80070ac:	f8d5 c000 	ldr.w	ip, [r5]
 80070b0:	6868      	ldr	r0, [r5, #4]
 80070b2:	68a9      	ldr	r1, [r5, #8]
 80070b4:	68ea      	ldr	r2, [r5, #12]
 80070b6:	f8c4 c008 	str.w	ip, [r4, #8]
 80070ba:	60e0      	str	r0, [r4, #12]
 80070bc:	6121      	str	r1, [r4, #16]
 80070be:	6162      	str	r2, [r4, #20]
   packet->destAddr = pseudoHeader->destAddr;
 80070c0:	f8d5 c010 	ldr.w	ip, [r5, #16]
 80070c4:	6968      	ldr	r0, [r5, #20]
 80070c6:	69a9      	ldr	r1, [r5, #24]
 80070c8:	69ea      	ldr	r2, [r5, #28]
 80070ca:	f8c4 c018 	str.w	ip, [r4, #24]
 80070ce:	61e0      	str	r0, [r4, #28]
 80070d0:	6221      	str	r1, [r4, #32]
 80070d2:	6262      	str	r2, [r4, #36]	@ 0x24
   if(packet->hopLimit == 0)
 80070d4:	b913      	cbnz	r3, 80070dc <ipv6SendPacket+0xbc>
      packet->hopLimit = interface->ipv6Context.curHopLimit;
 80070d6:	f896 37ad 	ldrb.w	r3, [r6, #1965]	@ 0x7ad
 80070da:	71e3      	strb	r3, [r4, #7]
   error = ipv6CheckSourceAddr(interface, &pseudoHeader->srcAddr);
 80070dc:	4629      	mov	r1, r5
 80070de:	4630      	mov	r0, r6
 80070e0:	f000 fd98 	bl	8007c14 <ipv6CheckSourceAddr>
   if(error)
 80070e4:	4603      	mov	r3, r0
 80070e6:	2800      	cmp	r0, #0
 80070e8:	f040 80b5 	bne.w	8007256 <ipv6SendPacket+0x236>
   if(ipv6CompAddr(&pseudoHeader->destAddr, &IPV6_UNSPECIFIED_ADDR))
 80070ec:	f105 0410 	add.w	r4, r5, #16
 80070f0:	2210      	movs	r2, #16
 80070f2:	495c      	ldr	r1, [pc, #368]	@ (8007264 <ipv6SendPacket+0x244>)
 80070f4:	4620      	mov	r0, r4
 80070f6:	f00d fd9b 	bl	8014c30 <memcmp>
 80070fa:	b9c0      	cbnz	r0, 800712e <ipv6SendPacket+0x10e>
      error = ERROR_INVALID_ADDRESS;
 80070fc:	23e4      	movs	r3, #228	@ 0xe4
 80070fe:	e0aa      	b.n	8007256 <ipv6SendPacket+0x236>
      error = ipv6FormatHopByHopOptHeader(&nextHeader, buffer, &offset);
 8007100:	aa11      	add	r2, sp, #68	@ 0x44
 8007102:	4649      	mov	r1, r9
 8007104:	f10d 001f 	add.w	r0, sp, #31
 8007108:	f7ff ff48 	bl	8006f9c <ipv6FormatHopByHopOptHeader>
      if(error)
 800710c:	4603      	mov	r3, r0
 800710e:	2800      	cmp	r0, #0
 8007110:	d097      	beq.n	8007042 <ipv6SendPacket+0x22>
 8007112:	e0a0      	b.n	8007256 <ipv6SendPacket+0x236>
      error = ipv6FormatFragmentHeader(fragId, fragOffset, &nextHeader, buffer,
 8007114:	ab11      	add	r3, sp, #68	@ 0x44
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	464b      	mov	r3, r9
 800711a:	f10d 021f 	add.w	r2, sp, #31
 800711e:	4621      	mov	r1, r4
 8007120:	4640      	mov	r0, r8
 8007122:	f7ff ff58 	bl	8006fd6 <ipv6FormatFragmentHeader>
      if(error)
 8007126:	4603      	mov	r3, r0
 8007128:	2800      	cmp	r0, #0
 800712a:	d08c      	beq.n	8007046 <ipv6SendPacket+0x26>
 800712c:	e093      	b.n	8007256 <ipv6SendPacket+0x236>
   else if(ipv6IsLocalHostAddr(&pseudoHeader->destAddr))
 800712e:	4620      	mov	r0, r4
 8007130:	f000 fdf6 	bl	8007d20 <ipv6IsLocalHostAddr>
 8007134:	b110      	cbz	r0, 800713c <ipv6SendPacket+0x11c>
      error = ERROR_NO_ROUTE;
 8007136:	f240 2309 	movw	r3, #521	@ 0x209
 800713a:	e08c      	b.n	8007256 <ipv6SendPacket+0x236>
      physicalInterface = nicGetPhysicalInterface(interface);
 800713c:	4630      	mov	r0, r6
 800713e:	f005 fcdb 	bl	800caf8 <nicGetPhysicalInterface>
      if(physicalInterface->nicDriver != NULL &&
 8007142:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8007144:	b113      	cbz	r3, 800714c <ipv6SendPacket+0x12c>
         physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 8007146:	781b      	ldrb	r3, [r3, #0]
      if(physicalInterface->nicDriver != NULL &&
 8007148:	2b01      	cmp	r3, #1
 800714a:	d008      	beq.n	800715e <ipv6SendPacket+0x13e>
      if(interface->nicDriver != NULL &&
 800714c:	6b73      	ldr	r3, [r6, #52]	@ 0x34
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8085 	beq.w	800725e <ipv6SendPacket+0x23e>
         interface->nicDriver->type == NIC_TYPE_6LOWPAN)
 8007154:	781b      	ldrb	r3, [r3, #0]
      if(interface->nicDriver != NULL &&
 8007156:	2b04      	cmp	r3, #4
 8007158:	d06f      	beq.n	800723a <ipv6SendPacket+0x21a>
         error = ERROR_INVALID_INTERFACE;
 800715a:	2307      	movs	r3, #7
 800715c:	e07b      	b.n	8007256 <ipv6SendPacket+0x236>
         entry = ndpFindDestCacheEntry(interface, &pseudoHeader->destAddr);
 800715e:	4621      	mov	r1, r4
 8007160:	4630      	mov	r0, r6
 8007162:	f004 f9f9 	bl	800b558 <ndpFindDestCacheEntry>
         if(entry != NULL)
 8007166:	4682      	mov	sl, r0
 8007168:	b370      	cbz	r0, 80071c8 <ipv6SendPacket+0x1a8>
            destIpAddr = entry->nextHop;
 800716a:	ac03      	add	r4, sp, #12
 800716c:	f100 0310 	add.w	r3, r0, #16
 8007170:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007172:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            entry->timestamp = osGetSystemTime();
 8007176:	f7f9 fb41 	bl	80007fc <osGetSystemTime>
 800717a:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
            if(!macCompAddr(&ancillary->destMacAddr, &MAC_UNSPECIFIED_ADDR))
 800717e:	f107 041a 	add.w	r4, r7, #26
 8007182:	2206      	movs	r2, #6
 8007184:	4938      	ldr	r1, [pc, #224]	@ (8007268 <ipv6SendPacket+0x248>)
 8007186:	4620      	mov	r0, r4
 8007188:	f00d fd52 	bl	8014c30 <memcmp>
 800718c:	b958      	cbnz	r0, 80071a6 <ipv6SendPacket+0x186>
            else if(ipv6IsMulticastAddr(&destIpAddr))
 800718e:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8007192:	2bff      	cmp	r3, #255	@ 0xff
 8007194:	d03c      	beq.n	8007210 <ipv6SendPacket+0x1f0>
               error = ndpResolve(interface, &destIpAddr, &ancillary->destMacAddr);
 8007196:	4622      	mov	r2, r4
 8007198:	a903      	add	r1, sp, #12
 800719a:	4630      	mov	r0, r6
 800719c:	f003 fd98 	bl	800acd0 <ndpResolve>
 80071a0:	4603      	mov	r3, r0
            if(error == NO_ERROR)
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d13a      	bne.n	800721c <ipv6SendPacket+0x1fc>
               ipv6UpdateOutStats(interface, &destIpAddr, length);
 80071a6:	4642      	mov	r2, r8
 80071a8:	a903      	add	r1, sp, #12
 80071aa:	4630      	mov	r0, r6
 80071ac:	f001 f907 	bl	80083be <ipv6UpdateOutStats>
               error = ethSendFrame(interface, &ancillary->destMacAddr,
 80071b0:	9701      	str	r7, [sp, #4]
 80071b2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	464b      	mov	r3, r9
 80071b8:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 80071bc:	4621      	mov	r1, r4
 80071be:	4630      	mov	r0, r6
 80071c0:	f7fb fe7e 	bl	8002ec0 <ethSendFrame>
 80071c4:	4603      	mov	r3, r0
 80071c6:	e046      	b.n	8007256 <ipv6SendPacket+0x236>
            error = ndpSelectNextHop(interface, &pseudoHeader->destAddr, NULL,
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	9300      	str	r3, [sp, #0]
 80071cc:	ab03      	add	r3, sp, #12
 80071ce:	2200      	movs	r2, #0
 80071d0:	4621      	mov	r1, r4
 80071d2:	4630      	mov	r0, r6
 80071d4:	f004 fc15 	bl	800ba02 <ndpSelectNextHop>
            if(error == NO_ERROR)
 80071d8:	4603      	mov	r3, r0
 80071da:	2800      	cmp	r0, #0
 80071dc:	d13b      	bne.n	8007256 <ipv6SendPacket+0x236>
               entry = ndpCreateDestCacheEntry(interface);
 80071de:	4630      	mov	r0, r6
 80071e0:	f004 f980 	bl	800b4e4 <ndpCreateDestCacheEntry>
               if(entry != NULL)
 80071e4:	4682      	mov	sl, r0
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d0c9      	beq.n	800717e <ipv6SendPacket+0x15e>
                  entry->destAddr = pseudoHeader->destAddr;
 80071ea:	4604      	mov	r4, r0
 80071ec:	6928      	ldr	r0, [r5, #16]
 80071ee:	6969      	ldr	r1, [r5, #20]
 80071f0:	69aa      	ldr	r2, [r5, #24]
 80071f2:	69eb      	ldr	r3, [r5, #28]
 80071f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                  entry->nextHop = destIpAddr;
 80071f6:	ab03      	add	r3, sp, #12
 80071f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80071fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                  entry->pathMtu = interface->ipv6Context.linkMtu;
 80071fe:	f8d6 37a4 	ldr.w	r3, [r6, #1956]	@ 0x7a4
 8007202:	f8ca 3020 	str.w	r3, [sl, #32]
                  entry->timestamp = osGetSystemTime();
 8007206:	f7f9 faf9 	bl	80007fc <osGetSystemTime>
 800720a:	f8ca 0024 	str.w	r0, [sl, #36]	@ 0x24
 800720e:	e7b6      	b.n	800717e <ipv6SendPacket+0x15e>
               error = ipv6MapMulticastAddrToMac(&destIpAddr,
 8007210:	4621      	mov	r1, r4
 8007212:	a803      	add	r0, sp, #12
 8007214:	f001 f8f4 	bl	8008400 <ipv6MapMulticastAddrToMac>
 8007218:	4603      	mov	r3, r0
 800721a:	e7c2      	b.n	80071a2 <ipv6SendPacket+0x182>
            else if(error == ERROR_IN_PROGRESS)
 800721c:	f240 2203 	movw	r2, #515	@ 0x203
 8007220:	4293      	cmp	r3, r2
 8007222:	d118      	bne.n	8007256 <ipv6SendPacket+0x236>
               error = ndpEnqueuePacket(NULL, interface, &destIpAddr, buffer,
 8007224:	9701      	str	r7, [sp, #4]
 8007226:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007228:	9300      	str	r3, [sp, #0]
 800722a:	464b      	mov	r3, r9
 800722c:	aa03      	add	r2, sp, #12
 800722e:	4631      	mov	r1, r6
 8007230:	2000      	movs	r0, #0
 8007232:	f003 f843 	bl	800a2bc <ndpEnqueuePacket>
 8007236:	4603      	mov	r3, r0
      {
 8007238:	e00d      	b.n	8007256 <ipv6SendPacket+0x236>
         ipv6UpdateOutStats(interface, &pseudoHeader->destAddr, length);
 800723a:	4642      	mov	r2, r8
 800723c:	4621      	mov	r1, r4
 800723e:	4630      	mov	r0, r6
 8007240:	f001 f8bd 	bl	80083be <ipv6UpdateOutStats>
         error = nicSendPacket(interface, buffer, offset, ancillary);
 8007244:	463b      	mov	r3, r7
 8007246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007248:	4649      	mov	r1, r9
 800724a:	4630      	mov	r0, r6
 800724c:	f005 fc6e 	bl	800cb2c <nicSendPacket>
 8007250:	4603      	mov	r3, r0
 8007252:	e000      	b.n	8007256 <ipv6SendPacket+0x236>
      return ERROR_INVALID_PARAMETER;
 8007254:	2302      	movs	r3, #2
}
 8007256:	4618      	mov	r0, r3
 8007258:	b008      	add	sp, #32
 800725a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         error = ERROR_INVALID_INTERFACE;
 800725e:	2307      	movs	r3, #7
 8007260:	e7f9      	b.n	8007256 <ipv6SendPacket+0x236>
 8007262:	bf00      	nop
 8007264:	08019f20 	.word	0x08019f20
 8007268:	08019ea0 	.word	0x08019ea0

0800726c <ipv6SendDatagram>:
{
 800726c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007270:	b085      	sub	sp, #20
 8007272:	4605      	mov	r5, r0
 8007274:	460e      	mov	r6, r1
 8007276:	4617      	mov	r7, r2
 8007278:	4698      	mov	r8, r3
 800727a:	f8dd 9030 	ldr.w	r9, [sp, #48]	@ 0x30
   length = netBufferGetLength(buffer) - offset;
 800727e:	4610      	mov	r0, r2
 8007280:	f004 fefa 	bl	800c078 <netBufferGetLength>
 8007284:	eba0 0408 	sub.w	r4, r0, r8
   pathMtu = ipv6GetPathMtu(interface, &pseudoHeader->destAddr);
 8007288:	f106 0110 	add.w	r1, r6, #16
 800728c:	4628      	mov	r0, r5
 800728e:	f001 fa76 	bl	800877e <ipv6GetPathMtu>
   if(pathMtu > interface->ipv6Context.linkMtu)
 8007292:	f8d5 37a4 	ldr.w	r3, [r5, #1956]	@ 0x7a4
 8007296:	4283      	cmp	r3, r0
 8007298:	d300      	bcc.n	800729c <ipv6SendDatagram+0x30>
   pathMtu = ipv6GetPathMtu(interface, &pseudoHeader->destAddr);
 800729a:	4603      	mov	r3, r0
   if((length + sizeof(Ipv6Header)) <= pathMtu)
 800729c:	3428      	adds	r4, #40	@ 0x28
 800729e:	429c      	cmp	r4, r3
 80072a0:	d907      	bls.n	80072b2 <ipv6SendDatagram+0x46>
      if(!ancillary->dontFrag)
 80072a2:	f8d9 2008 	ldr.w	r2, [r9, #8]
 80072a6:	b182      	cbz	r2, 80072ca <ipv6SendDatagram+0x5e>
         error = ERROR_MESSAGE_TOO_LONG;
 80072a8:	f44f 7083 	mov.w	r0, #262	@ 0x106
}
 80072ac:	b005      	add	sp, #20
 80072ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      error = ipv6SendPacket(interface, pseudoHeader, 0, 0, buffer, offset,
 80072b2:	f8cd 9008 	str.w	r9, [sp, #8]
 80072b6:	f8cd 8004 	str.w	r8, [sp, #4]
 80072ba:	9700      	str	r7, [sp, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	461a      	mov	r2, r3
 80072c0:	4631      	mov	r1, r6
 80072c2:	4628      	mov	r0, r5
 80072c4:	f7ff feac 	bl	8007020 <ipv6SendPacket>
 80072c8:	e7f0      	b.n	80072ac <ipv6SendDatagram+0x40>
         error = ipv6FragmentDatagram(interface, pseudoHeader, buffer, offset,
 80072ca:	f8cd 9004 	str.w	r9, [sp, #4]
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	4643      	mov	r3, r8
 80072d2:	463a      	mov	r2, r7
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 f8f7 	bl	80074ca <ipv6FragmentDatagram>
 80072dc:	e7e6      	b.n	80072ac <ipv6SendDatagram+0x40>
	...

080072e0 <ipv6StringToAddr>:
 * @param[out] ipAddr Binary representation of the IPv6 address
 * @return Error code
 **/

error_t ipv6StringToAddr(const char_t *str, Ipv6Addr *ipAddr)
{
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4604      	mov	r4, r0
 80072e6:	4689      	mov	r9, r1
   error_t error;
   int_t i = 0;
   int_t j = -1;
   int_t k = 0;
   int32_t value = -1;
 80072e8:	f04f 36ff 	mov.w	r6, #4294967295
   int_t j = -1;
 80072ec:	46b0      	mov	r8, r6
   int_t i = 0;
 80072ee:	2700      	movs	r7, #0
 80072f0:	e00c      	b.n	800730c <ipv6StringToAddr+0x2c>
      if(isxdigit((uint8_t) *str))
      {
         //First digit to be decoded?
         if(value < 0)
         {
            value = 0;
 80072f2:	2600      	movs	r6, #0
 80072f4:	e012      	b.n	800731c <ipv6StringToAddr+0x3c>
         //Update the value of the current 16-bit word
         if(osIsdigit(*str))
         {
            value = (value * 16) + (*str - '0');
         }
         else if(osIsupper(*str))
 80072f6:	f003 0303 	and.w	r3, r3, #3
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d015      	beq.n	800732a <ipv6StringToAddr+0x4a>
         {
            value = (value * 16) + (*str - 'A' + 10);
         }
         else
         {
            value = (value * 16) + (*str - 'a' + 10);
 80072fe:	3d57      	subs	r5, #87	@ 0x57
 8007300:	eb05 1606 	add.w	r6, r5, r6, lsl #4
         }

         //Check resulting value
         if(value > 0xFFFF)
 8007304:	f5b6 3f80 	cmp.w	r6, #65536	@ 0x10000
 8007308:	da7b      	bge.n	8007402 <ipv6StringToAddr+0x122>
         error = ERROR_INVALID_SYNTAX;
         break;
      }

      //Point to the next character
      str++;
 800730a:	3401      	adds	r4, #1
      if(isxdigit((uint8_t) *str))
 800730c:	7825      	ldrb	r5, [r4, #0]
 800730e:	4b43      	ldr	r3, [pc, #268]	@ (800741c <ipv6StringToAddr+0x13c>)
 8007310:	5d5b      	ldrb	r3, [r3, r5]
 8007312:	f013 0f44 	tst.w	r3, #68	@ 0x44
 8007316:	d00c      	beq.n	8007332 <ipv6StringToAddr+0x52>
         if(value < 0)
 8007318:	2e00      	cmp	r6, #0
 800731a:	dbea      	blt.n	80072f2 <ipv6StringToAddr+0x12>
         if(osIsdigit(*str))
 800731c:	f013 0f04 	tst.w	r3, #4
 8007320:	d0e9      	beq.n	80072f6 <ipv6StringToAddr+0x16>
            value = (value * 16) + (*str - '0');
 8007322:	3d30      	subs	r5, #48	@ 0x30
 8007324:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8007328:	e7ec      	b.n	8007304 <ipv6StringToAddr+0x24>
            value = (value * 16) + (*str - 'A' + 10);
 800732a:	3d37      	subs	r5, #55	@ 0x37
 800732c:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8007330:	e7e8      	b.n	8007304 <ipv6StringToAddr+0x24>
      else if(osStrncmp(str, "::", 2) == 0)
 8007332:	2202      	movs	r2, #2
 8007334:	493a      	ldr	r1, [pc, #232]	@ (8007420 <ipv6StringToAddr+0x140>)
 8007336:	4620      	mov	r0, r4
 8007338:	f00d fcf6 	bl	8014d28 <strncmp>
 800733c:	b988      	cbnz	r0, 8007362 <ipv6StringToAddr+0x82>
         if(j >= 0)
 800733e:	f1b8 0f00 	cmp.w	r8, #0
 8007342:	da61      	bge.n	8007408 <ipv6StringToAddr+0x128>
         if(value >= 0)
 8007344:	2e00      	cmp	r6, #0
 8007346:	da02      	bge.n	800734e <ipv6StringToAddr+0x6e>
         str++;
 8007348:	3401      	adds	r4, #1
         j = i;
 800734a:	46b8      	mov	r8, r7
 800734c:	e7dd      	b.n	800730a <ipv6StringToAddr+0x2a>
            ipAddr->w[i++] = htons(value);
 800734e:	1c7d      	adds	r5, r7, #1
 8007350:	b2b0      	uxth	r0, r6
 8007352:	f7f9 f963 	bl	800061c <swapInt16>
 8007356:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
 800735a:	462f      	mov	r7, r5
            value = -1;
 800735c:	f04f 36ff 	mov.w	r6, #4294967295
 8007360:	e7f2      	b.n	8007348 <ipv6StringToAddr+0x68>
      else if(*str == ':' && i < 8)
 8007362:	2d3a      	cmp	r5, #58	@ 0x3a
 8007364:	d10d      	bne.n	8007382 <ipv6StringToAddr+0xa2>
 8007366:	2f07      	cmp	r7, #7
 8007368:	dc0b      	bgt.n	8007382 <ipv6StringToAddr+0xa2>
         if(value < 0)
 800736a:	2e00      	cmp	r6, #0
 800736c:	db4e      	blt.n	800740c <ipv6StringToAddr+0x12c>
         ipAddr->w[i++] = htons(value);
 800736e:	1c7d      	adds	r5, r7, #1
 8007370:	b2b0      	uxth	r0, r6
 8007372:	f7f9 f953 	bl	800061c <swapInt16>
 8007376:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
 800737a:	462f      	mov	r7, r5
         value = -1;
 800737c:	f04f 36ff 	mov.w	r6, #4294967295
 8007380:	e7c3      	b.n	800730a <ipv6StringToAddr+0x2a>
      else if(*str == '\0' && i == 7 && j < 0)
 8007382:	b96d      	cbnz	r5, 80073a0 <ipv6StringToAddr+0xc0>
 8007384:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 8007388:	2f07      	cmp	r7, #7
 800738a:	d109      	bne.n	80073a0 <ipv6StringToAddr+0xc0>
 800738c:	b143      	cbz	r3, 80073a0 <ipv6StringToAddr+0xc0>
         if(value < 0)
 800738e:	2e00      	cmp	r6, #0
 8007390:	db3e      	blt.n	8007410 <ipv6StringToAddr+0x130>
            ipAddr->w[i] = htons(value);
 8007392:	b2b0      	uxth	r0, r6
 8007394:	f7f9 f942 	bl	800061c <swapInt16>
 8007398:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
            error = NO_ERROR;
 800739c:	2000      	movs	r0, #0
 800739e:	e031      	b.n	8007404 <ipv6StringToAddr+0x124>
      else if(*str == '\0' && i < 7 && j >= 0)
 80073a0:	bbc5      	cbnz	r5, 8007414 <ipv6StringToAddr+0x134>
 80073a2:	ea6f 0308 	mvn.w	r3, r8
 80073a6:	0fdb      	lsrs	r3, r3, #31
 80073a8:	2f06      	cmp	r7, #6
 80073aa:	dc35      	bgt.n	8007418 <ipv6StringToAddr+0x138>
 80073ac:	b3a3      	cbz	r3, 8007418 <ipv6StringToAddr+0x138>
         if(value >= 0)
 80073ae:	2e00      	cmp	r6, #0
 80073b0:	da01      	bge.n	80073b6 <ipv6StringToAddr+0xd6>
         for(k = 0; k < (i - j); k++)
 80073b2:	2300      	movs	r3, #0
 80073b4:	e010      	b.n	80073d8 <ipv6StringToAddr+0xf8>
            ipAddr->w[i++] = htons(value);
 80073b6:	1c7c      	adds	r4, r7, #1
 80073b8:	b2b0      	uxth	r0, r6
 80073ba:	f7f9 f92f 	bl	800061c <swapInt16>
 80073be:	f829 0017 	strh.w	r0, [r9, r7, lsl #1]
 80073c2:	4627      	mov	r7, r4
 80073c4:	e7f5      	b.n	80073b2 <ipv6StringToAddr+0xd2>
            ipAddr->w[7 - k] = ipAddr->w[i - 1 - k];
 80073c6:	1e7a      	subs	r2, r7, #1
 80073c8:	1ad2      	subs	r2, r2, r3
 80073ca:	f1c3 0107 	rsb	r1, r3, #7
 80073ce:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
 80073d2:	f829 2011 	strh.w	r2, [r9, r1, lsl #1]
         for(k = 0; k < (i - j); k++)
 80073d6:	3301      	adds	r3, #1
 80073d8:	eba7 0208 	sub.w	r2, r7, r8
 80073dc:	429a      	cmp	r2, r3
 80073de:	dcf2      	bgt.n	80073c6 <ipv6StringToAddr+0xe6>
         for(k = 0; k < (8 - i); k++)
 80073e0:	2200      	movs	r2, #0
 80073e2:	e008      	b.n	80073f6 <ipv6StringToAddr+0x116>
            ipAddr->w[j + k] = 0;
 80073e4:	eb08 0302 	add.w	r3, r8, r2
 80073e8:	2100      	movs	r1, #0
 80073ea:	f809 1013 	strb.w	r1, [r9, r3, lsl #1]
 80073ee:	eb09 0343 	add.w	r3, r9, r3, lsl #1
 80073f2:	7059      	strb	r1, [r3, #1]
         for(k = 0; k < (8 - i); k++)
 80073f4:	3201      	adds	r2, #1
 80073f6:	f1c7 0308 	rsb	r3, r7, #8
 80073fa:	4293      	cmp	r3, r2
 80073fc:	dcf2      	bgt.n	80073e4 <ipv6StringToAddr+0x104>
         error = NO_ERROR;
 80073fe:	2000      	movs	r0, #0
 8007400:	e000      	b.n	8007404 <ipv6StringToAddr+0x124>
            error = ERROR_INVALID_SYNTAX;
 8007402:	2069      	movs	r0, #105	@ 0x69
   }

   //Return status code
   return error;
}
 8007404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
            error = ERROR_INVALID_SYNTAX;
 8007408:	2069      	movs	r0, #105	@ 0x69
 800740a:	e7fb      	b.n	8007404 <ipv6StringToAddr+0x124>
            error = ERROR_INVALID_SYNTAX;
 800740c:	2069      	movs	r0, #105	@ 0x69
 800740e:	e7f9      	b.n	8007404 <ipv6StringToAddr+0x124>
            error = ERROR_INVALID_SYNTAX;
 8007410:	2069      	movs	r0, #105	@ 0x69
 8007412:	e7f7      	b.n	8007404 <ipv6StringToAddr+0x124>
         error = ERROR_INVALID_SYNTAX;
 8007414:	2069      	movs	r0, #105	@ 0x69
 8007416:	e7f5      	b.n	8007404 <ipv6StringToAddr+0x124>
 8007418:	2069      	movs	r0, #105	@ 0x69
 800741a:	e7f3      	b.n	8007404 <ipv6StringToAddr+0x124>
 800741c:	0801a972 	.word	0x0801a972
 8007420:	0801a480 	.word	0x0801a480

08007424 <ipv6AddrToString>:
 * @param[out] str NULL-terminated string representing the IPv6 address
 * @return Pointer to the formatted string
 **/

char_t *ipv6AddrToString(const Ipv6Addr *ipAddr, char_t *str)
{
 8007424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007428:	4604      	mov	r4, r0
   //Best run of zeroes
   uint_t zeroRunStart = 0;
   uint_t zeroRunEnd = 0;

   //If the NULL pointer is given as parameter, then the internal buffer is used
   if(str == NULL)
 800742a:	4689      	mov	r9, r1
 800742c:	b119      	cbz	r1, 8007436 <ipv6AddrToString+0x12>
   uint_t zeroRunEnd = 0;
 800742e:	2700      	movs	r7, #0
   uint_t zeroRunStart = 0;
 8007430:	46b8      	mov	r8, r7
      str = buffer;

   //Find the longest run of zeros for "::" short-handing
   for(i = 0; i < 8; i++)
 8007432:	4639      	mov	r1, r7
 8007434:	e013      	b.n	800745e <ipv6AddrToString+0x3a>
      str = buffer;
 8007436:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 80074c4 <ipv6AddrToString+0xa0>
 800743a:	e7f8      	b.n	800742e <ipv6AddrToString+0xa>
   {
      //Compute the length of the current sequence of zeroes
      for(j = i; j < 8 && !ipAddr->w[j]; j++)
 800743c:	3301      	adds	r3, #1
 800743e:	2b07      	cmp	r3, #7
 8007440:	d803      	bhi.n	800744a <ipv6AddrToString+0x26>
 8007442:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
 8007446:	2a00      	cmp	r2, #0
 8007448:	d0f8      	beq.n	800743c <ipv6AddrToString+0x18>
      {
      }

      //Keep track of the longest one
      if((j - i) > 1 && (j - i) > (zeroRunEnd - zeroRunStart))
 800744a:	1a5a      	subs	r2, r3, r1
 800744c:	2a01      	cmp	r2, #1
 800744e:	d905      	bls.n	800745c <ipv6AddrToString+0x38>
 8007450:	eba7 0008 	sub.w	r0, r7, r8
 8007454:	4282      	cmp	r2, r0
 8007456:	d901      	bls.n	800745c <ipv6AddrToString+0x38>
      {
         //The symbol "::" should not be used to shorten just one zero field
         zeroRunStart = i;
         zeroRunEnd = j;
 8007458:	461f      	mov	r7, r3
         zeroRunStart = i;
 800745a:	4688      	mov	r8, r1
   for(i = 0; i < 8; i++)
 800745c:	3101      	adds	r1, #1
 800745e:	2907      	cmp	r1, #7
 8007460:	d801      	bhi.n	8007466 <ipv6AddrToString+0x42>
      for(j = i; j < 8 && !ipAddr->w[j]; j++)
 8007462:	460b      	mov	r3, r1
 8007464:	e7eb      	b.n	800743e <ipv6AddrToString+0x1a>
      }
   }

   //Format IPv6 address
   for(p = str, i = 0; i < 8; i++)
 8007466:	464e      	mov	r6, r9
 8007468:	2500      	movs	r5, #0
 800746a:	e00e      	b.n	800748a <ipv6AddrToString+0x66>
         i = zeroRunEnd - 1;
      }
      else
      {
         //Add a separator between each 16-bit word
         if(i > 0)
 800746c:	b115      	cbz	r5, 8007474 <ipv6AddrToString+0x50>
            *(p++) = ':';
 800746e:	233a      	movs	r3, #58	@ 0x3a
 8007470:	f806 3b01 	strb.w	r3, [r6], #1

         //Convert the current 16-bit word to string
         p += osSprintf(p, "%" PRIx16, ntohs(ipAddr->w[i]));
 8007474:	f834 0015 	ldrh.w	r0, [r4, r5, lsl #1]
 8007478:	f7f9 f8d0 	bl	800061c <swapInt16>
 800747c:	4602      	mov	r2, r0
 800747e:	4910      	ldr	r1, [pc, #64]	@ (80074c0 <ipv6AddrToString+0x9c>)
 8007480:	4630      	mov	r0, r6
 8007482:	f00d fb19 	bl	8014ab8 <sprintf>
 8007486:	4406      	add	r6, r0
   for(p = str, i = 0; i < 8; i++)
 8007488:	3501      	adds	r5, #1
 800748a:	2d07      	cmp	r5, #7
 800748c:	d80d      	bhi.n	80074aa <ipv6AddrToString+0x86>
      if(i >= zeroRunStart && i < zeroRunEnd)
 800748e:	4545      	cmp	r5, r8
 8007490:	bf34      	ite	cc
 8007492:	2300      	movcc	r3, #0
 8007494:	2301      	movcs	r3, #1
 8007496:	42bd      	cmp	r5, r7
 8007498:	bf28      	it	cs
 800749a:	2300      	movcs	r3, #0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d0e5      	beq.n	800746c <ipv6AddrToString+0x48>
         *(p++) = ':';
 80074a0:	233a      	movs	r3, #58	@ 0x3a
 80074a2:	f806 3b01 	strb.w	r3, [r6], #1
         i = zeroRunEnd - 1;
 80074a6:	1e7d      	subs	r5, r7, #1
 80074a8:	e7ee      	b.n	8007488 <ipv6AddrToString+0x64>
      }
   }

   //A trailing run of zeroes has been found?
   if(zeroRunEnd == 8)
 80074aa:	2f08      	cmp	r7, #8
 80074ac:	d004      	beq.n	80074b8 <ipv6AddrToString+0x94>
      *(p++) = ':';

   //Properly terminate the string
   *p = '\0';
 80074ae:	2300      	movs	r3, #0
 80074b0:	7033      	strb	r3, [r6, #0]

   //Return a pointer to the formatted string
   return str;
}
 80074b2:	4648      	mov	r0, r9
 80074b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      *(p++) = ':';
 80074b8:	233a      	movs	r3, #58	@ 0x3a
 80074ba:	f806 3b01 	strb.w	r3, [r6], #1
 80074be:	e7f6      	b.n	80074ae <ipv6AddrToString+0x8a>
 80074c0:	0801a484 	.word	0x0801a484
 80074c4:	20000b1c 	.word	0x20000b1c

080074c8 <ipv6DumpHeader>:
   TRACE_DEBUG("  Payload Length = %" PRIu16 "\r\n", ntohs(ipHeader->payloadLen));
   TRACE_DEBUG("  Next Header = %" PRIu8 "\r\n", ipHeader->nextHeader);
   TRACE_DEBUG("  Hop Limit = %" PRIu8 "\r\n", ipHeader->hopLimit);
   TRACE_DEBUG("  Src Addr = %s\r\n", ipv6AddrToString(&ipHeader->srcAddr, NULL));
   TRACE_DEBUG("  Dest Addr = %s\r\n", ipv6AddrToString(&ipHeader->destAddr, NULL));
}
 80074c8:	4770      	bx	lr

080074ca <ipv6FragmentDatagram>:
 **/

error_t ipv6FragmentDatagram(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *payload,
   size_t payloadOffset, size_t pathMtu, NetTxAncillary *ancillary)
{
 80074ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ce:	b089      	sub	sp, #36	@ 0x24
 80074d0:	4682      	mov	sl, r0
 80074d2:	9104      	str	r1, [sp, #16]
 80074d4:	9205      	str	r2, [sp, #20]
 80074d6:	469b      	mov	fp, r3
   //Number of IP datagrams that would require fragmentation in order to be transmitted
   IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutFragReqds, 1);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutFragReqds, 1);

   //Retrieve the length of the payload
   payloadLen = netBufferGetLength(payload) - payloadOffset;
 80074d8:	4610      	mov	r0, r2
 80074da:	f004 fdcd 	bl	800c078 <netBufferGetLength>
 80074de:	eba0 090b 	sub.w	r9, r0, fp

   //Allocate a memory buffer to hold IP fragments
   fragment = ipAllocBuffer(0, &fragmentOffset);
 80074e2:	a907      	add	r1, sp, #28
 80074e4:	2000      	movs	r0, #0
 80074e6:	f7fe f864 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(!fragment)
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d053      	beq.n	8007596 <ipv6FragmentDatagram+0xcc>
 80074ee:	4607      	mov	r7, r0
      return ERROR_OUT_OF_MEMORY;

   //Identification field is used to identify fragments of an original IP datagram
   id = interface->ipv6Context.identification++;
 80074f0:	f8da 3a10 	ldr.w	r3, [sl, #2576]	@ 0xa10
 80074f4:	1c5a      	adds	r2, r3, #1
 80074f6:	f8ca 2a10 	str.w	r2, [sl, #2576]	@ 0xa10

   //The node should never set its PMTU estimate below the IPv6 minimum link MTU
   pathMtu = MAX(pathMtu, IPV6_DEFAULT_MTU);
 80074fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80074fc:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8007500:	bf38      	it	cc
 8007502:	f44f 62a0 	movcc.w	r2, #1280	@ 0x500

   //Determine the maximum payload size for fragmented packets
   maxFragmentSize = pathMtu - sizeof(Ipv6Header) - sizeof(Ipv6FragmentHeader);
 8007506:	f1a2 0830 	sub.w	r8, r2, #48	@ 0x30
   //The size shall be a multiple of 8-byte blocks
   maxFragmentSize -= (maxFragmentSize % 8);
 800750a:	f028 0807 	bic.w	r8, r8, #7

   //Initialize error code
   error = NO_ERROR;

   //Split the payload into multiple IP fragments
   for(offset = 0; offset < payloadLen; offset += length)
 800750e:	2400      	movs	r4, #0
 8007510:	465a      	mov	r2, fp
 8007512:	46d3      	mov	fp, sl
 8007514:	469a      	mov	sl, r3
 8007516:	4623      	mov	r3, r4
 8007518:	4615      	mov	r5, r2
 800751a:	e015      	b.n	8007548 <ipv6FragmentDatagram+0x7e>
      else
      {
         //Size of the current fragment (must be a multiple of 8-byte blocks)
         length = maxFragmentSize;
         //Copy fragment data
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 800751c:	4643      	mov	r3, r8
 800751e:	1962      	adds	r2, r4, r5
 8007520:	9905      	ldr	r1, [sp, #20]
 8007522:	4638      	mov	r0, r7
 8007524:	f004 fe67 	bl	800c1f6 <netBufferConcat>

         //Fragmented packets must have the M flag set
         error = ipv6SendPacket(interface, pseudoHeader, id, IPV6_FLAG_M |
 8007528:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800752a:	9302      	str	r3, [sp, #8]
 800752c:	9b07      	ldr	r3, [sp, #28]
 800752e:	9301      	str	r3, [sp, #4]
 8007530:	9700      	str	r7, [sp, #0]
 8007532:	f044 0301 	orr.w	r3, r4, #1
 8007536:	4652      	mov	r2, sl
 8007538:	9904      	ldr	r1, [sp, #16]
 800753a:	4658      	mov	r0, fp
 800753c:	f7ff fd70 	bl	8007020 <ipv6SendPacket>
 8007540:	4603      	mov	r3, r0
         length = maxFragmentSize;
 8007542:	4646      	mov	r6, r8
            offset, fragment, fragmentOffset, ancillary);
      }

      //Failed to send current IP fragment?
      if(error)
 8007544:	b9fb      	cbnz	r3, 8007586 <ipv6FragmentDatagram+0xbc>
   for(offset = 0; offset < payloadLen; offset += length)
 8007546:	4434      	add	r4, r6
 8007548:	454c      	cmp	r4, r9
 800754a:	d21c      	bcs.n	8007586 <ipv6FragmentDatagram+0xbc>
      error = netBufferSetLength(fragment, fragmentOffset);
 800754c:	9907      	ldr	r1, [sp, #28]
 800754e:	4638      	mov	r0, r7
 8007550:	f004 fd9f 	bl	800c092 <netBufferSetLength>
      if(error)
 8007554:	4603      	mov	r3, r0
 8007556:	b9b0      	cbnz	r0, 8007586 <ipv6FragmentDatagram+0xbc>
      if((payloadLen - offset) <= maxFragmentSize)
 8007558:	eba9 0604 	sub.w	r6, r9, r4
 800755c:	4546      	cmp	r6, r8
 800755e:	d8dd      	bhi.n	800751c <ipv6FragmentDatagram+0x52>
         netBufferConcat(fragment, payload, payloadOffset + offset, length);
 8007560:	4633      	mov	r3, r6
 8007562:	1962      	adds	r2, r4, r5
 8007564:	9905      	ldr	r1, [sp, #20]
 8007566:	4638      	mov	r0, r7
 8007568:	f004 fe45 	bl	800c1f6 <netBufferConcat>
         error = ipv6SendPacket(interface, pseudoHeader, id, offset, fragment,
 800756c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800756e:	9302      	str	r3, [sp, #8]
 8007570:	9b07      	ldr	r3, [sp, #28]
 8007572:	9301      	str	r3, [sp, #4]
 8007574:	9700      	str	r7, [sp, #0]
 8007576:	4623      	mov	r3, r4
 8007578:	4652      	mov	r2, sl
 800757a:	9904      	ldr	r1, [sp, #16]
 800757c:	4658      	mov	r0, fp
 800757e:	f7ff fd4f 	bl	8007020 <ipv6SendPacket>
 8007582:	4603      	mov	r3, r0
 8007584:	e7de      	b.n	8007544 <ipv6FragmentDatagram+0x7a>
      IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutFragOKs, 1);
      IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutFragOKs, 1);
   }

   //Free previously allocated memory
   netBufferFree(fragment);
 8007586:	461d      	mov	r5, r3
 8007588:	4638      	mov	r0, r7
 800758a:	f004 fded 	bl	800c168 <netBufferFree>
   //Return status code
   return error;
}
 800758e:	4628      	mov	r0, r5
 8007590:	b009      	add	sp, #36	@ 0x24
 8007592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_OUT_OF_MEMORY;
 8007596:	2564      	movs	r5, #100	@ 0x64
 8007598:	e7f9      	b.n	800758e <ipv6FragmentDatagram+0xc4>

0800759a <ipv6FlushFragQueue>:
 * @brief Flush IPv6 reassembly queue
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushFragQueue(NetInterface *interface)
{
 800759a:	b538      	push	{r3, r4, r5, lr}
 800759c:	4605      	mov	r5, r0
   uint_t i;

   //Loop through the reassembly queue
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800759e:	2400      	movs	r4, #0
 80075a0:	e00a      	b.n	80075b8 <ipv6FlushFragQueue+0x1e>
   {
      //Drop any partially reconstructed datagram
      netBufferSetLength((NetBuffer *) &interface->ipv6Context.fragQueue[i].buffer, 0);
 80075a2:	2054      	movs	r0, #84	@ 0x54
 80075a4:	fb04 f000 	mul.w	r0, r4, r0
 80075a8:	f500 6022 	add.w	r0, r0, #2592	@ 0xa20
 80075ac:	4428      	add	r0, r5
 80075ae:	2100      	movs	r1, #0
 80075b0:	3008      	adds	r0, #8
 80075b2:	f004 fd6e 	bl	800c092 <netBufferSetLength>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 80075b6:	3401      	adds	r4, #1
 80075b8:	2c03      	cmp	r4, #3
 80075ba:	d9f2      	bls.n	80075a2 <ipv6FlushFragQueue+0x8>
   }
}
 80075bc:	bd38      	pop	{r3, r4, r5, pc}

080075be <ipv6FindHole>:
 * @return A pointer to the hole descriptor is returned if the
 *   specified offset is valid. Otherwise NULL is returned
 **/

Ipv6HoleDesc *ipv6FindHole(Ipv6FragDesc *frag, uint16_t offset)
{
 80075be:	b508      	push	{r3, lr}
   //Return a pointer to the hole descriptor
   return netBufferAt((NetBuffer *) &frag->buffer, frag->unfragPartLength + offset, 0);
 80075c0:	6883      	ldr	r3, [r0, #8]
 80075c2:	2200      	movs	r2, #0
 80075c4:	4419      	add	r1, r3
 80075c6:	3014      	adds	r0, #20
 80075c8:	f004 fdf6 	bl	800c1b8 <netBufferAt>
}
 80075cc:	bd08      	pop	{r3, pc}

080075ce <ipv6FragTick>:
{
 80075ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	4605      	mov	r5, r0
   time = osGetSystemTime();
 80075d6:	f7f9 f911 	bl	80007fc <osGetSystemTime>
 80075da:	4606      	mov	r6, r0
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 80075dc:	2400      	movs	r4, #0
 80075de:	e012      	b.n	8007606 <ipv6FragTick+0x38>
                  icmpv6SendErrorMessage(interface, ICMPV6_TYPE_TIME_EXCEEDED,
 80075e0:	2300      	movs	r3, #0
 80075e2:	9301      	str	r3, [sp, #4]
 80075e4:	9700      	str	r7, [sp, #0]
 80075e6:	2201      	movs	r2, #1
 80075e8:	2103      	movs	r1, #3
 80075ea:	4628      	mov	r0, r5
 80075ec:	f7fc ffb8 	bl	8004560 <icmpv6SendErrorMessage>
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80075f0:	2054      	movs	r0, #84	@ 0x54
 80075f2:	fb04 f000 	mul.w	r0, r4, r0
 80075f6:	f500 6022 	add.w	r0, r0, #2592	@ 0xa20
 80075fa:	4428      	add	r0, r5
 80075fc:	2100      	movs	r1, #0
 80075fe:	3008      	adds	r0, #8
 8007600:	f004 fd47 	bl	800c092 <netBufferSetLength>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 8007604:	3401      	adds	r4, #1
 8007606:	2c03      	cmp	r4, #3
 8007608:	d837      	bhi.n	800767a <ipv6FragTick+0xac>
      Ipv6FragDesc *frag = &interface->ipv6Context.fragQueue[i];
 800760a:	2354      	movs	r3, #84	@ 0x54
 800760c:	fb04 f303 	mul.w	r3, r4, r3
 8007610:	f503 6221 	add.w	r2, r3, #2576	@ 0xa10
 8007614:	442a      	add	r2, r5
 8007616:	1d17      	adds	r7, r2, #4
      if(frag->buffer.chunkCount > 0)
 8007618:	442b      	add	r3, r5
 800761a:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 800761e:	2b00      	cmp	r3, #0
 8007620:	d0f0      	beq.n	8007604 <ipv6FragTick+0x36>
         if((time - frag->timestamp) >= IPV6_FRAG_TIME_TO_LIVE)
 8007622:	2354      	movs	r3, #84	@ 0x54
 8007624:	fb03 5304 	mla	r3, r3, r4, r5
 8007628:	f8d3 3a14 	ldr.w	r3, [r3, #2580]	@ 0xa14
 800762c:	1af3      	subs	r3, r6, r3
 800762e:	f643 2297 	movw	r2, #14999	@ 0x3a97
 8007632:	4293      	cmp	r3, r2
 8007634:	d9e6      	bls.n	8007604 <ipv6FragTick+0x36>
            ipv6DumpHeader(frag->buffer.chunk[0].address);
 8007636:	f04f 0854 	mov.w	r8, #84	@ 0x54
 800763a:	fb08 5804 	mla	r8, r8, r4, r5
 800763e:	f8d8 0a30 	ldr.w	r0, [r8, #2608]	@ 0xa30
 8007642:	f7ff ff41 	bl	80074c8 <ipv6DumpHeader>
            hole = ipv6FindHole(frag, frag->firstHole);
 8007646:	f8b8 1a24 	ldrh.w	r1, [r8, #2596]	@ 0xa24
 800764a:	4638      	mov	r0, r7
 800764c:	f7ff ffb7 	bl	80075be <ipv6FindHole>
            if(hole != NULL && hole->first > 0)
 8007650:	2800      	cmp	r0, #0
 8007652:	d0cd      	beq.n	80075f0 <ipv6FragTick+0x22>
 8007654:	8803      	ldrh	r3, [r0, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0ca      	beq.n	80075f0 <ipv6FragTick+0x22>
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800765a:	2254      	movs	r2, #84	@ 0x54
 800765c:	fb04 f202 	mul.w	r2, r4, r2
 8007660:	f502 6722 	add.w	r7, r2, #2592	@ 0xa20
 8007664:	442f      	add	r7, r5
 8007666:	3708      	adds	r7, #8
                  frag->unfragPartLength + hole->first);
 8007668:	f8d8 1a1c 	ldr.w	r1, [r8, #2588]	@ 0xa1c
               error = netBufferSetLength((NetBuffer *) &frag->buffer,
 800766c:	4419      	add	r1, r3
 800766e:	4638      	mov	r0, r7
 8007670:	f004 fd0f 	bl	800c092 <netBufferSetLength>
               if(!error)
 8007674:	2800      	cmp	r0, #0
 8007676:	d1bb      	bne.n	80075f0 <ipv6FragTick+0x22>
 8007678:	e7b2      	b.n	80075e0 <ipv6FragTick+0x12>
}
 800767a:	b002      	add	sp, #8
 800767c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007680 <ipv6SearchFragQueue>:
{
 8007680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007684:	4605      	mov	r5, r0
 8007686:	460e      	mov	r6, r1
 8007688:	4617      	mov	r7, r2
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800768a:	f04f 0800 	mov.w	r8, #0
 800768e:	e001      	b.n	8007694 <ipv6SearchFragQueue+0x14>
 8007690:	f108 0801 	add.w	r8, r8, #1
 8007694:	f1b8 0f03 	cmp.w	r8, #3
 8007698:	d831      	bhi.n	80076fe <ipv6SearchFragQueue+0x7e>
      frag = &interface->ipv6Context.fragQueue[i];
 800769a:	2354      	movs	r3, #84	@ 0x54
 800769c:	fb03 f308 	mul.w	r3, r3, r8
 80076a0:	f503 6421 	add.w	r4, r3, #2576	@ 0xa10
 80076a4:	442c      	add	r4, r5
 80076a6:	3404      	adds	r4, #4
      if(frag->buffer.chunkCount > 0)
 80076a8:	442b      	add	r3, r5
 80076aa:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d0ee      	beq.n	8007690 <ipv6SearchFragQueue+0x10>
         datagram = netBufferAt((NetBuffer *) &frag->buffer, 0, 0);
 80076b2:	2054      	movs	r0, #84	@ 0x54
 80076b4:	fb00 f008 	mul.w	r0, r0, r8
 80076b8:	f500 6022 	add.w	r0, r0, #2592	@ 0xa20
 80076bc:	4428      	add	r0, r5
 80076be:	2200      	movs	r2, #0
 80076c0:	4611      	mov	r1, r2
 80076c2:	3008      	adds	r0, #8
 80076c4:	f004 fd78 	bl	800c1b8 <netBufferAt>
 80076c8:	4681      	mov	r9, r0
         if(!ipv6CompAddr(&datagram->srcAddr, &packet->srcAddr))
 80076ca:	2210      	movs	r2, #16
 80076cc:	f106 0108 	add.w	r1, r6, #8
 80076d0:	3008      	adds	r0, #8
 80076d2:	f00d faad 	bl	8014c30 <memcmp>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d1da      	bne.n	8007690 <ipv6SearchFragQueue+0x10>
         if(!ipv6CompAddr(&datagram->destAddr, &packet->destAddr))
 80076da:	2210      	movs	r2, #16
 80076dc:	f106 0118 	add.w	r1, r6, #24
 80076e0:	f109 0018 	add.w	r0, r9, #24
 80076e4:	f00d faa4 	bl	8014c30 <memcmp>
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1d1      	bne.n	8007690 <ipv6SearchFragQueue+0x10>
         if(frag->identification != header->identification)
 80076ec:	2354      	movs	r3, #84	@ 0x54
 80076ee:	fb03 5308 	mla	r3, r3, r8, r5
 80076f2:	f8d3 2a18 	ldr.w	r2, [r3, #2584]	@ 0xa18
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d1c9      	bne.n	8007690 <ipv6SearchFragQueue+0x10>
 80076fc:	e054      	b.n	80077a8 <ipv6SearchFragQueue+0x128>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 80076fe:	f04f 0800 	mov.w	r8, #0
 8007702:	f1b8 0f03 	cmp.w	r8, #3
 8007706:	d84e      	bhi.n	80077a6 <ipv6SearchFragQueue+0x126>
      frag = &interface->ipv6Context.fragQueue[i];
 8007708:	2354      	movs	r3, #84	@ 0x54
 800770a:	fb03 f308 	mul.w	r3, r3, r8
 800770e:	f503 6421 	add.w	r4, r3, #2576	@ 0xa10
 8007712:	442c      	add	r4, r5
 8007714:	3404      	adds	r4, #4
      if(!frag->buffer.chunkCount)
 8007716:	442b      	add	r3, r5
 8007718:	f8d3 3a28 	ldr.w	r3, [r3, #2600]	@ 0xa28
 800771c:	b113      	cbz	r3, 8007724 <ipv6SearchFragQueue+0xa4>
   for(i = 0; i < IPV6_MAX_FRAG_DATAGRAMS; i++)
 800771e:	f108 0801 	add.w	r8, r8, #1
 8007722:	e7ee      	b.n	8007702 <ipv6SearchFragQueue+0x82>
         frag->buffer.maxChunkCount = arraysize(frag->buffer.chunk);
 8007724:	2354      	movs	r3, #84	@ 0x54
 8007726:	fb03 f308 	mul.w	r3, r3, r8
 800772a:	18ea      	adds	r2, r5, r3
 800772c:	2107      	movs	r1, #7
 800772e:	f8c2 1a2c 	str.w	r1, [r2, #2604]	@ 0xa2c
         error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8007732:	f503 6922 	add.w	r9, r3, #2592	@ 0xa20
 8007736:	44a9      	add	r9, r5
 8007738:	f109 0908 	add.w	r9, r9, #8
 800773c:	f240 6106 	movw	r1, #1542	@ 0x606
 8007740:	4648      	mov	r0, r9
 8007742:	f004 fca6 	bl	800c092 <netBufferSetLength>
         if(error)
 8007746:	bb40      	cbnz	r0, 800779a <ipv6SearchFragQueue+0x11a>
         frag->unfragPartLength = sizeof(Ipv6Header);
 8007748:	2354      	movs	r3, #84	@ 0x54
 800774a:	fb03 5508 	mla	r5, r3, r8, r5
 800774e:	2328      	movs	r3, #40	@ 0x28
 8007750:	f8c5 3a1c 	str.w	r3, [r5, #2588]	@ 0xa1c
         frag->fragPartLength = 0;
 8007754:	f04f 0800 	mov.w	r8, #0
 8007758:	f8c5 8a20 	str.w	r8, [r5, #2592]	@ 0xa20
         frag->buffer.chunk[0].length = (uint16_t) frag->unfragPartLength;
 800775c:	f8a5 3a34 	strh.w	r3, [r5, #2612]	@ 0xa34
         netBufferWrite((NetBuffer *) &frag->buffer, 0, packet, frag->unfragPartLength);
 8007760:	4632      	mov	r2, r6
 8007762:	4641      	mov	r1, r8
 8007764:	4648      	mov	r0, r9
 8007766:	f004 fe10 	bl	800c38a <netBufferWrite>
         frag->timestamp = osGetSystemTime();
 800776a:	f7f9 f847 	bl	80007fc <osGetSystemTime>
 800776e:	f8c5 0a14 	str.w	r0, [r5, #2580]	@ 0xa14
         frag->identification = header->identification;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f8c5 3a18 	str.w	r3, [r5, #2584]	@ 0xa18
         frag->firstHole = 0;
 8007778:	f8a5 8a24 	strh.w	r8, [r5, #2596]	@ 0xa24
         hole = ipv6FindHole(frag, frag->firstHole);
 800777c:	4641      	mov	r1, r8
 800777e:	4620      	mov	r0, r4
 8007780:	f7ff ff1d 	bl	80075be <ipv6FindHole>
         hole->first = 0;
 8007784:	f880 8000 	strb.w	r8, [r0]
 8007788:	f880 8001 	strb.w	r8, [r0, #1]
         hole->last = IPV6_INFINITY;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295
 8007790:	7083      	strb	r3, [r0, #2]
 8007792:	70c3      	strb	r3, [r0, #3]
         hole->next = IPV6_INFINITY;
 8007794:	7103      	strb	r3, [r0, #4]
 8007796:	7143      	strb	r3, [r0, #5]
         return frag;
 8007798:	e006      	b.n	80077a8 <ipv6SearchFragQueue+0x128>
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800779a:	2100      	movs	r1, #0
 800779c:	4648      	mov	r0, r9
 800779e:	f004 fc78 	bl	800c092 <netBufferSetLength>
            return NULL;
 80077a2:	2400      	movs	r4, #0
 80077a4:	e000      	b.n	80077a8 <ipv6SearchFragQueue+0x128>
   return NULL;
 80077a6:	2400      	movs	r4, #0
}
 80077a8:	4620      	mov	r0, r4
 80077aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080077ae <ipv6ParseFragmentHeader>:
{
 80077ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b2:	b089      	sub	sp, #36	@ 0x24
 80077b4:	9003      	str	r0, [sp, #12]
 80077b6:	460c      	mov	r4, r1
 80077b8:	9104      	str	r1, [sp, #16]
 80077ba:	4690      	mov	r8, r2
 80077bc:	461d      	mov	r5, r3
   length = netBufferGetLength(ipPacket) - fragHeaderOffset;
 80077be:	4608      	mov	r0, r1
 80077c0:	f004 fc5a 	bl	800c078 <netBufferGetLength>
 80077c4:	1b46      	subs	r6, r0, r5
   if(length < sizeof(Ipv6FragmentHeader))
 80077c6:	2e07      	cmp	r6, #7
 80077c8:	d802      	bhi.n	80077d0 <ipv6ParseFragmentHeader+0x22>
}
 80077ca:	b009      	add	sp, #36	@ 0x24
 80077cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   ipHeader = netBufferAt(ipPacket, ipPacketOffset, 0);
 80077d0:	2200      	movs	r2, #0
 80077d2:	4641      	mov	r1, r8
 80077d4:	4620      	mov	r0, r4
 80077d6:	f004 fcef 	bl	800c1b8 <netBufferAt>
   if(ipHeader == NULL)
 80077da:	4681      	mov	r9, r0
 80077dc:	2800      	cmp	r0, #0
 80077de:	d0f4      	beq.n	80077ca <ipv6ParseFragmentHeader+0x1c>
   fragHeader = netBufferAt(ipPacket, fragHeaderOffset, 0);
 80077e0:	2200      	movs	r2, #0
 80077e2:	4629      	mov	r1, r5
 80077e4:	4620      	mov	r0, r4
 80077e6:	f004 fce7 	bl	800c1b8 <netBufferAt>
   if(fragHeader == NULL)
 80077ea:	4604      	mov	r4, r0
 80077ec:	2800      	cmp	r0, #0
 80077ee:	d0ec      	beq.n	80077ca <ipv6ParseFragmentHeader+0x1c>
   length -= sizeof(Ipv6FragmentHeader);
 80077f0:	3e08      	subs	r6, #8
 80077f2:	9605      	str	r6, [sp, #20]
   offset = ntohs(fragHeader->fragmentOffset);
 80077f4:	8840      	ldrh	r0, [r0, #2]
 80077f6:	f7f8 ff11 	bl	800061c <swapInt16>
 80077fa:	4682      	mov	sl, r0
   if((offset & IPV6_FLAG_M) != 0 && (length % 8) != 0)
 80077fc:	f010 0301 	ands.w	r3, r0, #1
 8007800:	9306      	str	r3, [sp, #24]
 8007802:	d002      	beq.n	800780a <ipv6ParseFragmentHeader+0x5c>
 8007804:	f016 0f07 	tst.w	r6, #7
 8007808:	d14f      	bne.n	80078aa <ipv6ParseFragmentHeader+0xfc>
   dataFirst = offset & IPV6_OFFSET_MASK;
 800780a:	f02a 0607 	bic.w	r6, sl, #7
 800780e:	b2b6      	uxth	r6, r6
   dataLast = dataFirst + (uint16_t) length;
 8007810:	9b05      	ldr	r3, [sp, #20]
 8007812:	fa16 f783 	uxtah	r7, r6, r3
 8007816:	b2bf      	uxth	r7, r7
   if(dataLast < dataFirst)
 8007818:	42be      	cmp	r6, r7
 800781a:	d8d6      	bhi.n	80077ca <ipv6ParseFragmentHeader+0x1c>
   frag = ipv6SearchFragQueue(interface, ipHeader, fragHeader);
 800781c:	4622      	mov	r2, r4
 800781e:	4649      	mov	r1, r9
 8007820:	9803      	ldr	r0, [sp, #12]
 8007822:	f7ff ff2d 	bl	8007680 <ipv6SearchFragQueue>
   if(frag == NULL)
 8007826:	4681      	mov	r9, r0
 8007828:	2800      	cmp	r0, #0
 800782a:	d0ce      	beq.n	80077ca <ipv6ParseFragmentHeader+0x1c>
   if((offset & IPV6_OFFSET_MASK) == 0)
 800782c:	f1ba 0f07 	cmp.w	sl, #7
 8007830:	d81c      	bhi.n	800786c <ipv6ParseFragmentHeader+0xbe>
      frag->unfragPartLength = fragHeaderOffset - ipPacketOffset;
 8007832:	eba5 0308 	sub.w	r3, r5, r8
 8007836:	6083      	str	r3, [r0, #8]
      if((frag->unfragPartLength + frag->fragPartLength) > IPV6_MAX_FRAG_DATAGRAM_SIZE)
 8007838:	68c2      	ldr	r2, [r0, #12]
 800783a:	441a      	add	r2, r3
 800783c:	f5b2 5f00 	cmp.w	r2, #8192	@ 0x2000
 8007840:	d83e      	bhi.n	80078c0 <ipv6ParseFragmentHeader+0x112>
      if(frag->unfragPartLength > frag->buffer.chunk[0].size)
 8007842:	8c42      	ldrh	r2, [r0, #34]	@ 0x22
 8007844:	4293      	cmp	r3, r2
 8007846:	d84b      	bhi.n	80078e0 <ipv6ParseFragmentHeader+0x132>
      frag->buffer.chunk[0].length = (uint16_t) frag->unfragPartLength;
 8007848:	8403      	strh	r3, [r0, #32]
      netBufferCopy((NetBuffer *) &frag->buffer, 0, ipPacket,
 800784a:	3014      	adds	r0, #20
 800784c:	9300      	str	r3, [sp, #0]
 800784e:	4643      	mov	r3, r8
 8007850:	9a04      	ldr	r2, [sp, #16]
 8007852:	2100      	movs	r1, #0
 8007854:	4682      	mov	sl, r0
 8007856:	f004 fd16 	bl	800c286 <netBufferCopy>
      p = netBufferAt((NetBuffer *) &frag->buffer,
 800785a:	2200      	movs	r2, #0
 800785c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800785e:	eba1 0108 	sub.w	r1, r1, r8
 8007862:	4650      	mov	r0, sl
 8007864:	f004 fca8 	bl	800c1b8 <netBufferAt>
      *p = fragHeader->nextHeader;
 8007868:	7823      	ldrb	r3, [r4, #0]
 800786a:	7003      	strb	r3, [r0, #0]
   if(dataLast > frag->fragPartLength)
 800786c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007870:	429f      	cmp	r7, r3
 8007872:	d90f      	bls.n	8007894 <ipv6ParseFragmentHeader+0xe6>
      if((frag->unfragPartLength + dataLast) > IPV6_MAX_FRAG_DATAGRAM_SIZE)
 8007874:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007878:	4439      	add	r1, r7
 800787a:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
 800787e:	d834      	bhi.n	80078ea <ipv6ParseFragmentHeader+0x13c>
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8007880:	f109 0814 	add.w	r8, r9, #20
 8007884:	3106      	adds	r1, #6
 8007886:	4640      	mov	r0, r8
 8007888:	f004 fc03 	bl	800c092 <netBufferSetLength>
      if(error)
 800788c:	2800      	cmp	r0, #0
 800788e:	d13e      	bne.n	800790e <ipv6ParseFragmentHeader+0x160>
      frag->fragPartLength = dataLast;
 8007890:	f8c9 700c 	str.w	r7, [r9, #12]
   hole = ipv6FindHole(frag, frag->firstHole);
 8007894:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 8007898:	4648      	mov	r0, r9
 800789a:	f7ff fe90 	bl	80075be <ipv6FindHole>
   prevHole = NULL;
 800789e:	f04f 0b00 	mov.w	fp, #0
 80078a2:	465c      	mov	r4, fp
 80078a4:	9507      	str	r5, [sp, #28]
 80078a6:	9d06      	ldr	r5, [sp, #24]
   while(hole != NULL)
 80078a8:	e062      	b.n	8007970 <ipv6ParseFragmentHeader+0x1c2>
      icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 80078aa:	f8cd 8004 	str.w	r8, [sp, #4]
 80078ae:	9b04      	ldr	r3, [sp, #16]
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	2304      	movs	r3, #4
 80078b4:	2200      	movs	r2, #0
 80078b6:	4619      	mov	r1, r3
 80078b8:	9803      	ldr	r0, [sp, #12]
 80078ba:	f7fc fe51 	bl	8004560 <icmpv6SendErrorMessage>
      return;
 80078be:	e784      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
         icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 80078c0:	f8cd 8004 	str.w	r8, [sp, #4]
 80078c4:	9a04      	ldr	r2, [sp, #16]
 80078c6:	9200      	str	r2, [sp, #0]
 80078c8:	3302      	adds	r3, #2
 80078ca:	2200      	movs	r2, #0
 80078cc:	2104      	movs	r1, #4
 80078ce:	9803      	ldr	r0, [sp, #12]
 80078d0:	f7fc fe46 	bl	8004560 <icmpv6SendErrorMessage>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80078d4:	2100      	movs	r1, #0
 80078d6:	f109 0014 	add.w	r0, r9, #20
 80078da:	f004 fbda 	bl	800c092 <netBufferSetLength>
         return;
 80078de:	e774      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 80078e0:	2100      	movs	r1, #0
 80078e2:	3014      	adds	r0, #20
 80078e4:	f004 fbd5 	bl	800c092 <netBufferSetLength>
         return;
 80078e8:	e76f      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
         n = fragHeaderOffset - ipPacketOffset;
 80078ea:	eba5 0308 	sub.w	r3, r5, r8
         icmpv6SendErrorMessage(interface, ICMPV6_TYPE_PARAM_PROBLEM,
 80078ee:	f8cd 8004 	str.w	r8, [sp, #4]
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	9200      	str	r2, [sp, #0]
 80078f6:	3302      	adds	r3, #2
 80078f8:	2200      	movs	r2, #0
 80078fa:	2104      	movs	r1, #4
 80078fc:	9803      	ldr	r0, [sp, #12]
 80078fe:	f7fc fe2f 	bl	8004560 <icmpv6SendErrorMessage>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8007902:	2100      	movs	r1, #0
 8007904:	f109 0014 	add.w	r0, r9, #20
 8007908:	f004 fbc3 	bl	800c092 <netBufferSetLength>
         return;
 800790c:	e75d      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
         netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 800790e:	2100      	movs	r1, #0
 8007910:	4640      	mov	r0, r8
 8007912:	f004 fbbe 	bl	800c092 <netBufferSetLength>
         return;
 8007916:	e758      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
            netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8007918:	2100      	movs	r1, #0
 800791a:	f109 0014 	add.w	r0, r9, #20
 800791e:	f004 fbb8 	bl	800c092 <netBufferSetLength>
            return;
 8007922:	e752      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
            frag->firstHole = hole->next;
 8007924:	8883      	ldrh	r3, [r0, #4]
 8007926:	f8a9 3010 	strh.w	r3, [r9, #16]
 800792a:	e042      	b.n	80079b2 <ipv6ParseFragmentHeader+0x204>
            hole = ipv6FindHole(frag, holeFirst);
 800792c:	4648      	mov	r0, r9
 800792e:	f7ff fe46 	bl	80075be <ipv6FindHole>
            hole->first = holeFirst;
 8007932:	f8a0 a000 	strh.w	sl, [r0]
            hole->last = dataFirst;
 8007936:	8046      	strh	r6, [r0, #2]
            if(prevHole != NULL)
 8007938:	b12c      	cbz	r4, 8007946 <ipv6ParseFragmentHeader+0x198>
               hole->next = prevHole->next;
 800793a:	88a3      	ldrh	r3, [r4, #4]
 800793c:	8083      	strh	r3, [r0, #4]
               prevHole->next = hole->first;
 800793e:	f8a4 a004 	strh.w	sl, [r4, #4]
            prevHole = hole;
 8007942:	4604      	mov	r4, r0
 8007944:	e037      	b.n	80079b6 <ipv6ParseFragmentHeader+0x208>
               hole->next = frag->firstHole;
 8007946:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 800794a:	8083      	strh	r3, [r0, #4]
               frag->firstHole = hole->first;
 800794c:	f8a9 a010 	strh.w	sl, [r9, #16]
            prevHole = hole;
 8007950:	4604      	mov	r4, r0
 8007952:	e030      	b.n	80079b6 <ipv6ParseFragmentHeader+0x208>
               hole->next = frag->firstHole;
 8007954:	f8b9 3010 	ldrh.w	r3, [r9, #16]
 8007958:	8083      	strh	r3, [r0, #4]
               frag->firstHole = hole->first;
 800795a:	f8a9 7010 	strh.w	r7, [r9, #16]
      hole = ipv6FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 800795e:	e002      	b.n	8007966 <ipv6ParseFragmentHeader+0x1b8>
 8007960:	2c00      	cmp	r4, #0
 8007962:	d039      	beq.n	80079d8 <ipv6ParseFragmentHeader+0x22a>
 8007964:	4620      	mov	r0, r4
 8007966:	8881      	ldrh	r1, [r0, #4]
 8007968:	4604      	mov	r4, r0
 800796a:	4648      	mov	r0, r9
 800796c:	f7ff fe27 	bl	80075be <ipv6FindHole>
   while(hole != NULL)
 8007970:	2800      	cmp	r0, #0
 8007972:	d034      	beq.n	80079de <ipv6ParseFragmentHeader+0x230>
      uint16_t holeFirst = hole->first;
 8007974:	f8b0 a000 	ldrh.w	sl, [r0]
 8007978:	fa1f f18a 	uxth.w	r1, sl
      uint16_t holeLast = hole->last;
 800797c:	f8b0 b002 	ldrh.w	fp, [r0, #2]
 8007980:	fa1f f88b 	uxth.w	r8, fp
      if(dataFirst < holeLast && dataLast > holeFirst)
 8007984:	4546      	cmp	r6, r8
 8007986:	bf2c      	ite	cs
 8007988:	2300      	movcs	r3, #0
 800798a:	2301      	movcc	r3, #1
 800798c:	428f      	cmp	r7, r1
 800798e:	bf98      	it	ls
 8007990:	2300      	movls	r3, #0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d0e7      	beq.n	8007966 <ipv6ParseFragmentHeader+0x1b8>
         if(dataFirst < holeFirst || dataLast > holeLast)
 8007996:	4547      	cmp	r7, r8
 8007998:	bf94      	ite	ls
 800799a:	2300      	movls	r3, #0
 800799c:	2301      	movhi	r3, #1
 800799e:	428e      	cmp	r6, r1
 80079a0:	bf38      	it	cc
 80079a2:	f043 0301 	orrcc.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1b6      	bne.n	8007918 <ipv6ParseFragmentHeader+0x16a>
         if(prevHole != NULL)
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	d0ba      	beq.n	8007924 <ipv6ParseFragmentHeader+0x176>
            prevHole->next = hole->next;
 80079ae:	8883      	ldrh	r3, [r0, #4]
 80079b0:	80a3      	strh	r3, [r4, #4]
         if(dataFirst > holeFirst)
 80079b2:	428e      	cmp	r6, r1
 80079b4:	d8ba      	bhi.n	800792c <ipv6ParseFragmentHeader+0x17e>
         if(dataLast < holeLast && (offset & IPV6_FLAG_M) != 0)
 80079b6:	4547      	cmp	r7, r8
 80079b8:	d2d2      	bcs.n	8007960 <ipv6ParseFragmentHeader+0x1b2>
 80079ba:	2d00      	cmp	r5, #0
 80079bc:	d0d0      	beq.n	8007960 <ipv6ParseFragmentHeader+0x1b2>
            hole = ipv6FindHole(frag, dataLast);
 80079be:	4639      	mov	r1, r7
 80079c0:	4648      	mov	r0, r9
 80079c2:	f7ff fdfc 	bl	80075be <ipv6FindHole>
            hole->first = dataLast;
 80079c6:	8007      	strh	r7, [r0, #0]
            hole->last = holeLast;
 80079c8:	f8a0 b002 	strh.w	fp, [r0, #2]
            if(prevHole != NULL)
 80079cc:	2c00      	cmp	r4, #0
 80079ce:	d0c1      	beq.n	8007954 <ipv6ParseFragmentHeader+0x1a6>
               hole->next = prevHole->next;
 80079d0:	88a3      	ldrh	r3, [r4, #4]
 80079d2:	8083      	strh	r3, [r0, #4]
               prevHole->next = hole->first;
 80079d4:	80a7      	strh	r7, [r4, #4]
      hole = ipv6FindHole(frag, prevHole ? prevHole->next : frag->firstHole);
 80079d6:	e7c6      	b.n	8007966 <ipv6ParseFragmentHeader+0x1b8>
 80079d8:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 80079dc:	e7c5      	b.n	800796a <ipv6ParseFragmentHeader+0x1bc>
   netBufferCopy((NetBuffer *) &frag->buffer, frag->unfragPartLength + dataFirst,
 80079de:	9d07      	ldr	r5, [sp, #28]
 80079e0:	f109 0714 	add.w	r7, r9, #20
 80079e4:	f8d9 1008 	ldr.w	r1, [r9, #8]
 80079e8:	9b05      	ldr	r3, [sp, #20]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	f105 0308 	add.w	r3, r5, #8
 80079f0:	9a04      	ldr	r2, [sp, #16]
 80079f2:	4431      	add	r1, r6
 80079f4:	4638      	mov	r0, r7
 80079f6:	f004 fc46 	bl	800c286 <netBufferCopy>
   if(ipv6FindHole(frag, frag->firstHole) == NULL)
 80079fa:	f8b9 1010 	ldrh.w	r1, [r9, #16]
 80079fe:	4648      	mov	r0, r9
 8007a00:	f7ff fddd 	bl	80075be <ipv6FindHole>
 8007a04:	2800      	cmp	r0, #0
 8007a06:	f47f aee0 	bne.w	80077ca <ipv6ParseFragmentHeader+0x1c>
         frag->unfragPartLength + frag->fragPartLength);
 8007a0a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8007a0e:	f8d9 300c 	ldr.w	r3, [r9, #12]
      error = netBufferSetLength((NetBuffer *) &frag->buffer,
 8007a12:	4419      	add	r1, r3
 8007a14:	4638      	mov	r0, r7
 8007a16:	f004 fb3c 	bl	800c092 <netBufferSetLength>
      if(error)
 8007a1a:	b120      	cbz	r0, 8007a26 <ipv6ParseFragmentHeader+0x278>
      netBufferSetLength((NetBuffer *) &frag->buffer, 0);
 8007a1c:	2100      	movs	r1, #0
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f004 fb37 	bl	800c092 <netBufferSetLength>
 8007a24:	e6d1      	b.n	80077ca <ipv6ParseFragmentHeader+0x1c>
         Ipv6Header *datagram = netBufferAt((NetBuffer *) &frag->buffer, 0, 0);
 8007a26:	2200      	movs	r2, #0
 8007a28:	4611      	mov	r1, r2
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	f004 fbc4 	bl	800c1b8 <netBufferAt>
 8007a30:	4604      	mov	r4, r0
         datagram->payloadLen = htons(frag->unfragPartLength +
 8007a32:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8007a36:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8007a3a:	4418      	add	r0, r3
 8007a3c:	b280      	uxth	r0, r0
 8007a3e:	3828      	subs	r0, #40	@ 0x28
 8007a40:	b280      	uxth	r0, r0
 8007a42:	f7f8 fdeb 	bl	800061c <swapInt16>
 8007a46:	80a0      	strh	r0, [r4, #4]
         ipv6ProcessPacket(interface, (NetBuffer *) &frag->buffer, 0,
 8007a48:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	9803      	ldr	r0, [sp, #12]
 8007a50:	f7ff f90e 	bl	8006c70 <ipv6ProcessPacket>
 8007a54:	e7e2      	b.n	8007a1c <ipv6ParseFragmentHeader+0x26e>

08007a56 <ipv6ChangeAddrState>:
 **/

void ipv6ChangeAddrState(Ipv6AddrEntry *entry, Ipv6AddrState newState)
{
   //Any state change?
   if(newState != entry->state)
 8007a56:	7c03      	ldrb	r3, [r0, #16]
 8007a58:	428b      	cmp	r3, r1
 8007a5a:	d000      	beq.n	8007a5e <ipv6ChangeAddrState+0x8>
#if defined(IPV6_CHANGE_ADDR_STATE_HOOK)
      IPV6_CHANGE_ADDR_STATE_HOOK(entry, newState);
#endif

      //Switch to the new state
      entry->state = newState;
 8007a5c:	7401      	strb	r1, [r0, #16]
   }
}
 8007a5e:	4770      	bx	lr

08007a60 <ipv6AddDefaultRouter>:
 * @param[in] preference Preference value
 **/

void ipv6AddDefaultRouter(NetInterface *interface, const Ipv6Addr *addr,
   uint16_t lifetime, uint8_t preference)
{
 8007a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a64:	4606      	mov	r6, r0
 8007a66:	4688      	mov	r8, r1
 8007a68:	4691      	mov	r9, r2
 8007a6a:	469a      	mov	sl, r3
   Ipv6RouterEntry *entry;
   Ipv6RouterEntry *firstFreeEntry;

   //Initialize variables
   entry = NULL;
   firstFreeEntry = NULL;
 8007a6c:	2700      	movs	r7, #0
   entry = NULL;
 8007a6e:	463d      	mov	r5, r7

   //Loop through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 8007a70:	463c      	mov	r4, r7
 8007a72:	e007      	b.n	8007a84 <ipv6AddDefaultRouter+0x24>
            break;
      }
      else
      {
         //The router address should be preserved if it has been manually assigned
         if(!entry->permanent)
 8007a74:	f104 0346 	add.w	r3, r4, #70	@ 0x46
 8007a78:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	b903      	cbnz	r3, 8007a82 <ipv6AddDefaultRouter+0x22>
         {
            //Keep track of the first free entry
            if(firstFreeEntry == NULL)
 8007a80:	b1df      	cbz	r7, 8007aba <ipv6AddDefaultRouter+0x5a>
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 8007a82:	3401      	adds	r4, #1
 8007a84:	2c01      	cmp	r4, #1
 8007a86:	d811      	bhi.n	8007aac <ipv6AddDefaultRouter+0x4c>
      entry = &interface->ipv6Context.routerList[i];
 8007a88:	ea4f 1c44 	mov.w	ip, r4, lsl #5
 8007a8c:	f60c 05a8 	addw	r5, ip, #2216	@ 0x8a8
 8007a90:	4435      	add	r5, r6
 8007a92:	3508      	adds	r5, #8
      if(entry->lifetime)
 8007a94:	44b4      	add	ip, r6
 8007a96:	f8dc 38c0 	ldr.w	r3, [ip, #2240]	@ 0x8c0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0ea      	beq.n	8007a74 <ipv6AddDefaultRouter+0x14>
         if(ipv6CompAddr(&entry->addr, addr))
 8007a9e:	2210      	movs	r2, #16
 8007aa0:	4641      	mov	r1, r8
 8007aa2:	4628      	mov	r0, r5
 8007aa4:	f00d f8c4 	bl	8014c30 <memcmp>
 8007aa8:	2800      	cmp	r0, #0
 8007aaa:	d1ea      	bne.n	8007a82 <ipv6AddDefaultRouter+0x22>
         }
      }
   }

   //No matching entry found?
   if(i >= IPV6_ROUTER_LIST_SIZE)
 8007aac:	2c01      	cmp	r4, #1
 8007aae:	d906      	bls.n	8007abe <ipv6AddDefaultRouter+0x5e>
      entry = firstFreeEntry;

   //Update the entry if necessary
   if(entry != NULL)
 8007ab0:	b10f      	cbz	r7, 8007ab6 <ipv6AddDefaultRouter+0x56>
   {
      //The router address should be preserved if it has been manually assigned
      if(!entry->permanent)
 8007ab2:	69bb      	ldr	r3, [r7, #24]
 8007ab4:	b12b      	cbz	r3, 8007ac2 <ipv6AddDefaultRouter+0x62>
         entry->preference = preference;
         //Save current time
         entry->timestamp = osGetSystemTime();
      }
   }
}
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
               firstFreeEntry = entry;
 8007aba:	462f      	mov	r7, r5
 8007abc:	e7e1      	b.n	8007a82 <ipv6AddDefaultRouter+0x22>
   if(i >= IPV6_ROUTER_LIST_SIZE)
 8007abe:	462f      	mov	r7, r5
 8007ac0:	e7f6      	b.n	8007ab0 <ipv6AddDefaultRouter+0x50>
         entry->addr = *addr;
 8007ac2:	463c      	mov	r4, r7
 8007ac4:	f8d8 0000 	ldr.w	r0, [r8]
 8007ac8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007acc:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007ad0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007ad4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         entry->lifetime = lifetime * 1000;
 8007ad6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ada:	fb03 f309 	mul.w	r3, r3, r9
 8007ade:	613b      	str	r3, [r7, #16]
         entry->preference = preference;
 8007ae0:	f887 a014 	strb.w	sl, [r7, #20]
         entry->timestamp = osGetSystemTime();
 8007ae4:	f7f8 fe8a 	bl	80007fc <osGetSystemTime>
 8007ae8:	61f8      	str	r0, [r7, #28]
}
 8007aea:	e7e4      	b.n	8007ab6 <ipv6AddDefaultRouter+0x56>

08007aec <ipv6RemoveDefaultRouter>:
 * @param[in] interface Underlying network interface
 * @param[in] addr IPv6 address of the router to be removed from the list
 **/

void ipv6RemoveDefaultRouter(NetInterface *interface, const Ipv6Addr *addr)
{
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	4605      	mov	r5, r0
 8007af0:	460e      	mov	r6, r1
   bool_t flag;
   Ipv6RouterEntry *entry;

   //This flag will be set if any entry has been removed from
   //the Default Router List
   flag = FALSE;
 8007af2:	2700      	movs	r7, #0

   //Loop through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 8007af4:	463c      	mov	r4, r7
 8007af6:	e000      	b.n	8007afa <ipv6RemoveDefaultRouter+0xe>
 8007af8:	3401      	adds	r4, #1
 8007afa:	2c01      	cmp	r4, #1
 8007afc:	d826      	bhi.n	8007b4c <ipv6RemoveDefaultRouter+0x60>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];

      //Check the lifetime associated with the default router
      if(entry->lifetime)
 8007afe:	eb05 1344 	add.w	r3, r5, r4, lsl #5
 8007b02:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0f6      	beq.n	8007af8 <ipv6RemoveDefaultRouter+0xc>
      {
         //Check whether the current entry matches the specified router address
         if(ipv6CompAddr(&entry->addr, addr))
 8007b0a:	0160      	lsls	r0, r4, #5
 8007b0c:	f600 00a8 	addw	r0, r0, #2216	@ 0x8a8
 8007b10:	4428      	add	r0, r5
 8007b12:	2210      	movs	r2, #16
 8007b14:	4631      	mov	r1, r6
 8007b16:	3008      	adds	r0, #8
 8007b18:	f00d f88a 	bl	8014c30 <memcmp>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	d1eb      	bne.n	8007af8 <ipv6RemoveDefaultRouter+0xc>
         {
            //The router address should be preserved if it has been manually assigned
            if(!entry->permanent)
 8007b20:	f104 0346 	add.w	r3, r4, #70	@ 0x46
 8007b24:	eb05 1343 	add.w	r3, r5, r3, lsl #5
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e4      	bne.n	8007af8 <ipv6RemoveDefaultRouter+0xc>
            {
               //Immediately time-out the entry
               entry->addr = IPV6_UNSPECIFIED_ADDR;
 8007b2e:	eb05 1c44 	add.w	ip, r5, r4, lsl #5
 8007b32:	4b09      	ldr	r3, [pc, #36]	@ (8007b58 <ipv6RemoveDefaultRouter+0x6c>)
 8007b34:	f50c 670b 	add.w	r7, ip, #2224	@ 0x8b0
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	6859      	ldr	r1, [r3, #4]
 8007b3c:	689a      	ldr	r2, [r3, #8]
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
               entry->lifetime = 0;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f8cc 38c0 	str.w	r3, [ip, #2240]	@ 0x8c0

               //Set flag
               flag = TRUE;
 8007b48:	2701      	movs	r7, #1
 8007b4a:	e7d5      	b.n	8007af8 <ipv6RemoveDefaultRouter+0xc>
         }
      }
   }

   //Check whether an entry has been removed from the list
   if(flag)
 8007b4c:	b907      	cbnz	r7, 8007b50 <ipv6RemoveDefaultRouter+0x64>
      //update the Destination Cache in such a way that all entries using
      //the router perform next-hop determination again
      ndpFlushDestCache(interface);
#endif
   }
}
 8007b4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ndpFlushDestCache(interface);
 8007b50:	4628      	mov	r0, r5
 8007b52:	f003 fd19 	bl	800b588 <ndpFlushDestCache>
}
 8007b56:	e7fa      	b.n	8007b4e <ipv6RemoveDefaultRouter+0x62>
 8007b58:	08019f20 	.word	0x08019f20

08007b5c <ipv6FlushPrefixList>:
 * @brief Flush the Prefix List
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushPrefixList(NetInterface *interface)
{
 8007b5c:	b530      	push	{r4, r5, lr}
 8007b5e:	4686      	mov	lr, r0
   uint_t i;
   Ipv6PrefixEntry *entry;

   //Go through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8007b60:	f04f 0c00 	mov.w	ip, #0
 8007b64:	e001      	b.n	8007b6a <ipv6FlushPrefixList+0xe>
 8007b66:	f10c 0c01 	add.w	ip, ip, #1
 8007b6a:	f1bc 0f01 	cmp.w	ip, #1
 8007b6e:	d81e      	bhi.n	8007bae <ipv6FlushPrefixList+0x52>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];

      //Valid IPv6 prefix?
      if(entry->validLifetime > 0)
 8007b70:	232c      	movs	r3, #44	@ 0x2c
 8007b72:	fb03 e30c 	mla	r3, r3, ip, lr
 8007b76:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0f3      	beq.n	8007b66 <ipv6FlushPrefixList+0xa>
      {
         //The IPv6 prefix should be preserved if it has been manually assigned
         if(!entry->permanent)
 8007b7e:	232c      	movs	r3, #44	@ 0x2c
 8007b80:	fb03 e30c 	mla	r3, r3, ip, lr
 8007b84:	f8d3 387c 	ldr.w	r3, [r3, #2172]	@ 0x87c
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d1ec      	bne.n	8007b66 <ipv6FlushPrefixList+0xa>
         {
            //Remove the entry from the Prefix List
            entry->prefix = IPV6_UNSPECIFIED_ADDR;
 8007b8c:	252c      	movs	r5, #44	@ 0x2c
 8007b8e:	fb05 e50c 	mla	r5, r5, ip, lr
 8007b92:	4b07      	ldr	r3, [pc, #28]	@ (8007bb0 <ipv6FlushPrefixList+0x54>)
 8007b94:	f605 0458 	addw	r4, r5, #2136	@ 0x858
 8007b98:	6818      	ldr	r0, [r3, #0]
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            entry->prefixLen = 0;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	f885 3868 	strb.w	r3, [r5, #2152]	@ 0x868
            entry->validLifetime = 0;
 8007ba8:	f8c5 3874 	str.w	r3, [r5, #2164]	@ 0x874
 8007bac:	e7db      	b.n	8007b66 <ipv6FlushPrefixList+0xa>
         }
      }
   }
}
 8007bae:	bd30      	pop	{r4, r5, pc}
 8007bb0:	08019f20 	.word	0x08019f20

08007bb4 <ipv6FlushDefaultRouterList>:
 * @brief Flush the Default Router List
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushDefaultRouterList(NetInterface *interface)
{
 8007bb4:	b530      	push	{r4, r5, lr}
 8007bb6:	4686      	mov	lr, r0
   uint_t i;
   Ipv6RouterEntry *entry;

   //Go through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 8007bb8:	f04f 0c00 	mov.w	ip, #0
 8007bbc:	e001      	b.n	8007bc2 <ipv6FlushDefaultRouterList+0xe>
 8007bbe:	f10c 0c01 	add.w	ip, ip, #1
 8007bc2:	f1bc 0f01 	cmp.w	ip, #1
 8007bc6:	d81a      	bhi.n	8007bfe <ipv6FlushDefaultRouterList+0x4a>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];

      //Valid entry?
      if(entry->lifetime > 0)
 8007bc8:	eb0e 134c 	add.w	r3, lr, ip, lsl #5
 8007bcc:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f4      	beq.n	8007bbe <ipv6FlushDefaultRouterList+0xa>
      {
         //The router address should be preserved if it has been manually assigned
         if(!entry->permanent)
 8007bd4:	f10c 0346 	add.w	r3, ip, #70	@ 0x46
 8007bd8:	eb0e 1343 	add.w	r3, lr, r3, lsl #5
 8007bdc:	689b      	ldr	r3, [r3, #8]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1ed      	bne.n	8007bbe <ipv6FlushDefaultRouterList+0xa>
         {
            //Clear the current entry
            entry->addr = IPV6_UNSPECIFIED_ADDR;
 8007be2:	eb0e 154c 	add.w	r5, lr, ip, lsl #5
 8007be6:	4b06      	ldr	r3, [pc, #24]	@ (8007c00 <ipv6FlushDefaultRouterList+0x4c>)
 8007be8:	f505 640b 	add.w	r4, r5, #2224	@ 0x8b0
 8007bec:	6818      	ldr	r0, [r3, #0]
 8007bee:	6859      	ldr	r1, [r3, #4]
 8007bf0:	689a      	ldr	r2, [r3, #8]
 8007bf2:	68db      	ldr	r3, [r3, #12]
 8007bf4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            //Remove the entry from the Default Router List
            entry->lifetime = 0;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f8c5 38c0 	str.w	r3, [r5, #2240]	@ 0x8c0
 8007bfc:	e7df      	b.n	8007bbe <ipv6FlushDefaultRouterList+0xa>
         }
      }
   }
}
 8007bfe:	bd30      	pop	{r4, r5, pc}
 8007c00:	08019f20 	.word	0x08019f20

08007c04 <ipv6FlushDnsServerList>:
 * @brief Flush the list of DNS servers
 * @param[in] interface Underlying network interface
 **/

void ipv6FlushDnsServerList(NetInterface *interface)
{
 8007c04:	b508      	push	{r3, lr}
   //Clear the list of DNS servers
   osMemset(interface->ipv6Context.dnsServerList, 0,
 8007c06:	2220      	movs	r2, #32
 8007c08:	2100      	movs	r1, #0
 8007c0a:	f500 600f 	add.w	r0, r0, #2288	@ 0x8f0
 8007c0e:	f00d f839 	bl	8014c84 <memset>
      sizeof(interface->ipv6Context.dnsServerList));
}
 8007c12:	bd08      	pop	{r3, pc}

08007c14 <ipv6CheckSourceAddr>:
 **/

error_t ipv6CheckSourceAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
   //Multicast addresses cannot be used as source address
   if(ipv6IsMulticastAddr(ipAddr))
 8007c14:	780b      	ldrb	r3, [r1, #0]
 8007c16:	2bff      	cmp	r3, #255	@ 0xff
 8007c18:	d001      	beq.n	8007c1e <ipv6CheckSourceAddr+0xa>
      //The source address not is acceptable
      return ERROR_INVALID_ADDRESS;
   }

   //The source address is acceptable
   return NO_ERROR;
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	4770      	bx	lr
      return ERROR_INVALID_ADDRESS;
 8007c1e:	20e4      	movs	r0, #228	@ 0xe4
}
 8007c20:	4770      	bx	lr
	...

08007c24 <ipv6CheckDestAddr>:
 * @param[in] ipAddr Destination IPv6 address to be checked
 * @return Error code
 **/

error_t ipv6CheckDestAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 8007c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c28:	4605      	mov	r5, r0
 8007c2a:	460e      	mov	r6, r1

   //Filter out any invalid addresses
   error = ERROR_INVALID_ADDRESS;

   //Loop through the list of IPv6 unicast addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 8007c2c:	2400      	movs	r4, #0
 8007c2e:	e000      	b.n	8007c32 <ipv6CheckDestAddr+0xe>
 8007c30:	3401      	adds	r4, #1
 8007c32:	2c02      	cmp	r4, #2
 8007c34:	d817      	bhi.n	8007c66 <ipv6CheckDestAddr+0x42>

      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];

      //Valid entry?
      if(entry->state != IPV6_ADDR_STATE_INVALID)
 8007c36:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007c3a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8007c3e:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d0f4      	beq.n	8007c30 <ipv6CheckDestAddr+0xc>
      {
         //Check whether the destination address matches a valid unicast
         //address assigned to the interface
         if(ipv6CompAddr(&entry->addr, ipAddr))
 8007c46:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8007c50:	442b      	add	r3, r5
 8007c52:	2210      	movs	r2, #16
 8007c54:	4631      	mov	r1, r6
 8007c56:	f103 0008 	add.w	r0, r3, #8
 8007c5a:	f00c ffe9 	bl	8014c30 <memcmp>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	d1e6      	bne.n	8007c30 <ipv6CheckDestAddr+0xc>
         {
            //The destination address is acceptable
            error = NO_ERROR;
 8007c62:	2400      	movs	r4, #0
 8007c64:	e000      	b.n	8007c68 <ipv6CheckDestAddr+0x44>
   error = ERROR_INVALID_ADDRESS;
 8007c66:	24e4      	movs	r4, #228	@ 0xe4
         }
      }
   }

   //Check status code
   if(error == ERROR_INVALID_ADDRESS)
 8007c68:	2ce4      	cmp	r4, #228	@ 0xe4
 8007c6a:	d002      	beq.n	8007c72 <ipv6CheckDestAddr+0x4e>
      }
   }

   //Return status code
   return error;
}
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      anycastAddrList = interface->ipv6Context.anycastAddrList;
 8007c72:	f605 0548 	addw	r5, r5, #2120	@ 0x848
      for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 8007c76:	2700      	movs	r7, #0
 8007c78:	2f00      	cmp	r7, #0
 8007c7a:	d1f7      	bne.n	8007c6c <ipv6CheckDestAddr+0x48>
         if(!ipv6CompAddr(&anycastAddrList[i], &IPV6_UNSPECIFIED_ADDR))
 8007c7c:	eb05 1807 	add.w	r8, r5, r7, lsl #4
 8007c80:	2210      	movs	r2, #16
 8007c82:	4907      	ldr	r1, [pc, #28]	@ (8007ca0 <ipv6CheckDestAddr+0x7c>)
 8007c84:	4640      	mov	r0, r8
 8007c86:	f00c ffd3 	bl	8014c30 <memcmp>
 8007c8a:	b128      	cbz	r0, 8007c98 <ipv6CheckDestAddr+0x74>
            if(ipv6CompAddr(&anycastAddrList[i], ipAddr))
 8007c8c:	2210      	movs	r2, #16
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4640      	mov	r0, r8
 8007c92:	f00c ffcd 	bl	8014c30 <memcmp>
 8007c96:	b108      	cbz	r0, 8007c9c <ipv6CheckDestAddr+0x78>
      for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 8007c98:	3701      	adds	r7, #1
 8007c9a:	e7ed      	b.n	8007c78 <ipv6CheckDestAddr+0x54>
               error = NO_ERROR;
 8007c9c:	2400      	movs	r4, #0
 8007c9e:	e7e5      	b.n	8007c6c <ipv6CheckDestAddr+0x48>
 8007ca0:	08019f20 	.word	0x08019f20

08007ca4 <ipv6IsAnycastAddr>:
 * @param[in] ipAddr IPv6 address to be checked
 * @return TRUE if the IPv6 address is an anycast address, else FALSE
 **/

bool_t ipv6IsAnycastAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 8007ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca6:	460e      	mov	r6, r1
   uint_t i;
   Ipv6Addr *anycastAddrList;

   //Point to the list of anycast addresses assigned to the interface
   anycastAddrList = interface->ipv6Context.anycastAddrList;
 8007ca8:	f600 0548 	addw	r5, r0, #2120	@ 0x848

   //Loop through the list of IPv6 anycast addresses
   for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 8007cac:	2400      	movs	r4, #0
 8007cae:	b10c      	cbz	r4, 8007cb4 <ipv6IsAnycastAddr+0x10>
         }
      }
   }

   //The specified IPv6 address is not an anycast address
   return FALSE;
 8007cb0:	2000      	movs	r0, #0
}
 8007cb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(!ipv6CompAddr(&anycastAddrList[i], &IPV6_UNSPECIFIED_ADDR))
 8007cb4:	eb05 1704 	add.w	r7, r5, r4, lsl #4
 8007cb8:	2210      	movs	r2, #16
 8007cba:	4907      	ldr	r1, [pc, #28]	@ (8007cd8 <ipv6IsAnycastAddr+0x34>)
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f00c ffb7 	bl	8014c30 <memcmp>
 8007cc2:	b128      	cbz	r0, 8007cd0 <ipv6IsAnycastAddr+0x2c>
         if(ipv6CompAddr(&anycastAddrList[i], ipAddr))
 8007cc4:	2210      	movs	r2, #16
 8007cc6:	4631      	mov	r1, r6
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f00c ffb1 	bl	8014c30 <memcmp>
 8007cce:	b108      	cbz	r0, 8007cd4 <ipv6IsAnycastAddr+0x30>
   for(i = 0; i < IPV6_ANYCAST_ADDR_LIST_SIZE; i++)
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	e7ec      	b.n	8007cae <ipv6IsAnycastAddr+0xa>
            return TRUE;
 8007cd4:	2001      	movs	r0, #1
 8007cd6:	e7ec      	b.n	8007cb2 <ipv6IsAnycastAddr+0xe>
 8007cd8:	08019f20 	.word	0x08019f20

08007cdc <ipv6IsTentativeAddr>:
 * @param[in] ipAddr IPv6 address to be checked
 * @return TRUE if the IPv6 address is a tentative address, else FALSE
 **/

bool_t ipv6IsTentativeAddr(NetInterface *interface, const Ipv6Addr *ipAddr)
{
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4605      	mov	r5, r0
 8007ce0:	460e      	mov	r6, r1
   uint_t i;
   Ipv6AddrEntry *entry;

   //Loop through the list of IPv6 unicast addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 8007ce2:	2400      	movs	r4, #0
 8007ce4:	e000      	b.n	8007ce8 <ipv6IsTentativeAddr+0xc>
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	2c02      	cmp	r4, #2
 8007cea:	d817      	bhi.n	8007d1c <ipv6IsTentativeAddr+0x40>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.addrList[i];

      //Tentative address?
      if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 8007cec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007cf0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8007cf4:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 8007cf8:	2b01      	cmp	r3, #1
 8007cfa:	d1f4      	bne.n	8007ce6 <ipv6IsTentativeAddr+0xa>
      {
         //Check whether the specified address matches a valid unicast
         //address assigned to the interface
         if(ipv6CompAddr(&entry->addr, ipAddr))
 8007cfc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007d00:	011b      	lsls	r3, r3, #4
 8007d02:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8007d06:	442b      	add	r3, r5
 8007d08:	2210      	movs	r2, #16
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	f103 0008 	add.w	r0, r3, #8
 8007d10:	f00c ff8e 	bl	8014c30 <memcmp>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	d1e6      	bne.n	8007ce6 <ipv6IsTentativeAddr+0xa>
         {
            //The specified IPv6 address is a tentative address
            return TRUE;
 8007d18:	2001      	movs	r0, #1
 8007d1a:	e000      	b.n	8007d1e <ipv6IsTentativeAddr+0x42>
         }
      }
   }

   //The specified IPv6 address is not a tentative address
   return FALSE;
 8007d1c:	2000      	movs	r0, #0
}
 8007d1e:	bd70      	pop	{r4, r5, r6, pc}

08007d20 <ipv6IsLocalHostAddr>:
 * @return TRUE if the IPv6 address matches any address assigned to the host,
 *   else FALSE
 **/

bool_t ipv6IsLocalHostAddr(const Ipv6Addr *ipAddr)
{
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	4607      	mov	r7, r0

   //Initialize flag
   flag = FALSE;

   //Loopback address?
   if(ipv6CompAddr(ipAddr, &IPV6_LOOPBACK_ADDR))
 8007d24:	2210      	movs	r2, #16
 8007d26:	491c      	ldr	r1, [pc, #112]	@ (8007d98 <ipv6IsLocalHostAddr+0x78>)
 8007d28:	f00c ff82 	bl	8014c30 <memcmp>
 8007d2c:	b390      	cbz	r0, 8007d94 <ipv6IsLocalHostAddr+0x74>
   flag = FALSE;
 8007d2e:	2500      	movs	r5, #0
      flag = TRUE;
   }
   else
   {
      //Loop through network interfaces
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8007d30:	462e      	mov	r6, r5
 8007d32:	ea55 0406 	orrs.w	r4, r5, r6
 8007d36:	d002      	beq.n	8007d3e <ipv6IsLocalHostAddr+0x1e>
      }
   }

   //Return TRUE if the specified address matches any address assigned to the host
   return flag;
}
 8007d38:	4628      	mov	r0, r5
 8007d3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         for(j = 0; j < IPV6_ADDR_LIST_SIZE && !flag; j++)
 8007d3c:	3401      	adds	r4, #1
 8007d3e:	f085 0301 	eor.w	r3, r5, #1
 8007d42:	2c02      	cmp	r4, #2
 8007d44:	d824      	bhi.n	8007d90 <ipv6IsLocalHostAddr+0x70>
 8007d46:	b31b      	cbz	r3, 8007d90 <ipv6IsLocalHostAddr+0x70>
            if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 8007d48:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8007d4c:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8007d50:	fb06 f303 	mul.w	r3, r6, r3
 8007d54:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007d58:	4a10      	ldr	r2, [pc, #64]	@ (8007d9c <ipv6IsLocalHostAddr+0x7c>)
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f893 3820 	ldrb.w	r3, [r3, #2080]	@ 0x820
 8007d60:	3b02      	subs	r3, #2
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d8e9      	bhi.n	8007d3c <ipv6IsLocalHostAddr+0x1c>
               if(ipv6CompAddr(&entry->addr, ipAddr))
 8007d68:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8007d6c:	f241 20a4 	movw	r0, #4772	@ 0x12a4
 8007d70:	fb06 f000 	mul.w	r0, r6, r0
 8007d74:	eb00 1003 	add.w	r0, r0, r3, lsl #4
 8007d78:	f600 0008 	addw	r0, r0, #2056	@ 0x808
 8007d7c:	4410      	add	r0, r2
 8007d7e:	2210      	movs	r2, #16
 8007d80:	4639      	mov	r1, r7
 8007d82:	3008      	adds	r0, #8
 8007d84:	f00c ff54 	bl	8014c30 <memcmp>
 8007d88:	2800      	cmp	r0, #0
 8007d8a:	d1d7      	bne.n	8007d3c <ipv6IsLocalHostAddr+0x1c>
                  flag = TRUE;
 8007d8c:	2501      	movs	r5, #1
 8007d8e:	e7d5      	b.n	8007d3c <ipv6IsLocalHostAddr+0x1c>
      for(i = 0; i < NET_INTERFACE_COUNT && !flag; i++)
 8007d90:	3601      	adds	r6, #1
 8007d92:	e7ce      	b.n	8007d32 <ipv6IsLocalHostAddr+0x12>
      flag = TRUE;
 8007d94:	2501      	movs	r5, #1
   return flag;
 8007d96:	e7cf      	b.n	8007d38 <ipv6IsLocalHostAddr+0x18>
 8007d98:	08019f70 	.word	0x08019f70
 8007d9c:	20000b50 	.word	0x20000b50

08007da0 <ipv6CompPrefix>:
   size_t n;
   size_t m;
   uint8_t mask;

   //Ensure the prefix length is valid
   if(length > 128)
 8007da0:	2a80      	cmp	r2, #128	@ 0x80
 8007da2:	d819      	bhi.n	8007dd8 <ipv6CompPrefix+0x38>
{
 8007da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da6:	4605      	mov	r5, r0
 8007da8:	460c      	mov	r4, r1
      return FALSE;

   //Number of complete bytes
   n = length / 8;
 8007daa:	08d7      	lsrs	r7, r2, #3
   //Number of bits in the last byte, if any
   m = length % 8;
 8007dac:	f002 0607 	and.w	r6, r2, #7

   //Compare the first part
   if(n > 0)
 8007db0:	2a07      	cmp	r2, #7
 8007db2:	d903      	bls.n	8007dbc <ipv6CompPrefix+0x1c>
   {
      if(osMemcmp(ipAddr1, ipAddr2, n))
 8007db4:	463a      	mov	r2, r7
 8007db6:	f00c ff3b 	bl	8014c30 <memcmp>
 8007dba:	b978      	cbnz	r0, 8007ddc <ipv6CompPrefix+0x3c>
         return FALSE;
   }

   //Compare the remaining bits, if any
   if(m > 0)
 8007dbc:	b186      	cbz	r6, 8007de0 <ipv6CompPrefix+0x40>
   {
      //Calculate the mask to be applied
      mask = ((1 << m) - 1) << (8 - m);
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	40b3      	lsls	r3, r6
 8007dc2:	3b01      	subs	r3, #1
 8007dc4:	f1c6 0608 	rsb	r6, r6, #8
 8007dc8:	40b3      	lsls	r3, r6

      //Check remaining bits
      if((ipAddr1->b[n] & mask) != (ipAddr2->b[n] & mask))
 8007dca:	5dea      	ldrb	r2, [r5, r7]
 8007dcc:	5de1      	ldrb	r1, [r4, r7]
 8007dce:	404a      	eors	r2, r1
 8007dd0:	4213      	tst	r3, r2
 8007dd2:	d107      	bne.n	8007de4 <ipv6CompPrefix+0x44>
         return FALSE;
   }

   //The prefixes match each other
   return TRUE;
 8007dd4:	2001      	movs	r0, #1
 8007dd6:	e004      	b.n	8007de2 <ipv6CompPrefix+0x42>
      return FALSE;
 8007dd8:	2000      	movs	r0, #0
}
 8007dda:	4770      	bx	lr
         return FALSE;
 8007ddc:	2000      	movs	r0, #0
 8007dde:	e000      	b.n	8007de2 <ipv6CompPrefix+0x42>
   return TRUE;
 8007de0:	2001      	movs	r0, #1
}
 8007de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
         return FALSE;
 8007de4:	2000      	movs	r0, #0
 8007de6:	e7fc      	b.n	8007de2 <ipv6CompPrefix+0x42>

08007de8 <ipv6AddPrefix>:
{
 8007de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007dec:	4606      	mov	r6, r0
 8007dee:	4688      	mov	r8, r1
 8007df0:	4691      	mov	r9, r2
 8007df2:	469a      	mov	sl, r3
   firstFreeEntry = NULL;
 8007df4:	2700      	movs	r7, #0
   entry = NULL;
 8007df6:	463d      	mov	r5, r7
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8007df8:	463c      	mov	r4, r7
 8007dfa:	e008      	b.n	8007e0e <ipv6AddPrefix+0x26>
         if(!entry->permanent)
 8007dfc:	232c      	movs	r3, #44	@ 0x2c
 8007dfe:	fb03 6304 	mla	r3, r3, r4, r6
 8007e02:	f8d3 387c 	ldr.w	r3, [r3, #2172]	@ 0x87c
 8007e06:	b90b      	cbnz	r3, 8007e0c <ipv6AddPrefix+0x24>
            if(firstFreeEntry == NULL)
 8007e08:	2f00      	cmp	r7, #0
 8007e0a:	d03f      	beq.n	8007e8c <ipv6AddPrefix+0xa4>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8007e0c:	3401      	adds	r4, #1
 8007e0e:	2c01      	cmp	r4, #1
 8007e10:	d817      	bhi.n	8007e42 <ipv6AddPrefix+0x5a>
      entry = &interface->ipv6Context.prefixList[i];
 8007e12:	f04f 0c2c 	mov.w	ip, #44	@ 0x2c
 8007e16:	fb0c fc04 	mul.w	ip, ip, r4
 8007e1a:	f50c 6505 	add.w	r5, ip, #2128	@ 0x850
 8007e1e:	4435      	add	r5, r6
 8007e20:	3508      	adds	r5, #8
      if(entry->validLifetime)
 8007e22:	44b4      	add	ip, r6
 8007e24:	f8dc 3874 	ldr.w	r3, [ip, #2164]	@ 0x874
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d0e7      	beq.n	8007dfc <ipv6AddPrefix+0x14>
         if(entry->prefixLen == length)
 8007e2c:	f89c 3868 	ldrb.w	r3, [ip, #2152]	@ 0x868
 8007e30:	454b      	cmp	r3, r9
 8007e32:	d1eb      	bne.n	8007e0c <ipv6AddPrefix+0x24>
            if(ipv6CompPrefix(&entry->prefix, prefix, length))
 8007e34:	464a      	mov	r2, r9
 8007e36:	4641      	mov	r1, r8
 8007e38:	4628      	mov	r0, r5
 8007e3a:	f7ff ffb1 	bl	8007da0 <ipv6CompPrefix>
 8007e3e:	2800      	cmp	r0, #0
 8007e40:	d0e4      	beq.n	8007e0c <ipv6AddPrefix+0x24>
   if(i >= IPV6_PREFIX_LIST_SIZE)
 8007e42:	2c01      	cmp	r4, #1
 8007e44:	d924      	bls.n	8007e90 <ipv6AddPrefix+0xa8>
   if(entry != NULL)
 8007e46:	2f00      	cmp	r7, #0
 8007e48:	d043      	beq.n	8007ed2 <ipv6AddPrefix+0xea>
      if(!entry->permanent)
 8007e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d140      	bne.n	8007ed2 <ipv6AddPrefix+0xea>
         entry->prefix = *prefix;
 8007e50:	463c      	mov	r4, r7
 8007e52:	f8d8 0000 	ldr.w	r0, [r8]
 8007e56:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007e5a:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8007e5e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007e62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         entry->prefixLen = length;
 8007e64:	f887 9010 	strb.w	r9, [r7, #16]
         entry->onLinkFlag = onLinkFlag;
 8007e68:	f8c7 a014 	str.w	sl, [r7, #20]
         entry->autonomousFlag = autonomousFlag;
 8007e6c:	9b08      	ldr	r3, [sp, #32]
 8007e6e:	61bb      	str	r3, [r7, #24]
         if(validLifetime != NDP_INFINITE_LIFETIME)
 8007e70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e76:	d011      	beq.n	8007e9c <ipv6AddPrefix+0xb4>
            if(validLifetime < (MAX_DELAY / 1000))
 8007e78:	4b17      	ldr	r3, [pc, #92]	@ (8007ed8 <ipv6AddPrefix+0xf0>)
 8007e7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d809      	bhi.n	8007e94 <ipv6AddPrefix+0xac>
               entry->validLifetime = validLifetime * 1000;
 8007e80:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007e84:	fb02 f303 	mul.w	r3, r2, r3
 8007e88:	61fb      	str	r3, [r7, #28]
 8007e8a:	e00a      	b.n	8007ea2 <ipv6AddPrefix+0xba>
               firstFreeEntry = entry;
 8007e8c:	462f      	mov	r7, r5
 8007e8e:	e7bd      	b.n	8007e0c <ipv6AddPrefix+0x24>
   if(i >= IPV6_PREFIX_LIST_SIZE)
 8007e90:	462f      	mov	r7, r5
 8007e92:	e7d8      	b.n	8007e46 <ipv6AddPrefix+0x5e>
               entry->validLifetime = MAX_DELAY;
 8007e94:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007e98:	61fb      	str	r3, [r7, #28]
 8007e9a:	e002      	b.n	8007ea2 <ipv6AddPrefix+0xba>
            entry->validLifetime = INFINITE_DELAY;
 8007e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8007ea0:	61fb      	str	r3, [r7, #28]
         if(preferredLifetime != NDP_INFINITE_LIFETIME)
 8007ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d00d      	beq.n	8007ec6 <ipv6AddPrefix+0xde>
            if(preferredLifetime < (MAX_DELAY / 1000))
 8007eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8007ed8 <ipv6AddPrefix+0xf0>)
 8007eac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d805      	bhi.n	8007ebe <ipv6AddPrefix+0xd6>
               entry->preferredLifetime = preferredLifetime * 1000;
 8007eb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007eb6:	fb02 f303 	mul.w	r3, r2, r3
 8007eba:	623b      	str	r3, [r7, #32]
 8007ebc:	e006      	b.n	8007ecc <ipv6AddPrefix+0xe4>
               entry->preferredLifetime = MAX_DELAY;
 8007ebe:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8007ec2:	623b      	str	r3, [r7, #32]
 8007ec4:	e002      	b.n	8007ecc <ipv6AddPrefix+0xe4>
            entry->preferredLifetime = INFINITE_DELAY;
 8007ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8007eca:	623b      	str	r3, [r7, #32]
         entry->timestamp = osGetSystemTime();
 8007ecc:	f7f8 fc96 	bl	80007fc <osGetSystemTime>
 8007ed0:	62b8      	str	r0, [r7, #40]	@ 0x28
}
 8007ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed6:	bf00      	nop
 8007ed8:	0020c49a 	.word	0x0020c49a

08007edc <ipv6RemovePrefix>:
{
 8007edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ede:	4605      	mov	r5, r0
 8007ee0:	460f      	mov	r7, r1
 8007ee2:	4616      	mov	r6, r2
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8007ee4:	2400      	movs	r4, #0
 8007ee6:	e000      	b.n	8007eea <ipv6RemovePrefix+0xe>
 8007ee8:	3401      	adds	r4, #1
 8007eea:	2c01      	cmp	r4, #1
 8007eec:	d834      	bhi.n	8007f58 <ipv6RemovePrefix+0x7c>
      if(entry->validLifetime)
 8007eee:	232c      	movs	r3, #44	@ 0x2c
 8007ef0:	fb03 5304 	mla	r3, r3, r4, r5
 8007ef4:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0f5      	beq.n	8007ee8 <ipv6RemovePrefix+0xc>
         if(entry->prefixLen == length)
 8007efc:	232c      	movs	r3, #44	@ 0x2c
 8007efe:	fb03 5304 	mla	r3, r3, r4, r5
 8007f02:	f893 3868 	ldrb.w	r3, [r3, #2152]	@ 0x868
 8007f06:	42b3      	cmp	r3, r6
 8007f08:	d1ee      	bne.n	8007ee8 <ipv6RemovePrefix+0xc>
            if(ipv6CompPrefix(&entry->prefix, prefix, length))
 8007f0a:	202c      	movs	r0, #44	@ 0x2c
 8007f0c:	fb04 f000 	mul.w	r0, r4, r0
 8007f10:	f500 6005 	add.w	r0, r0, #2128	@ 0x850
 8007f14:	4428      	add	r0, r5
 8007f16:	4632      	mov	r2, r6
 8007f18:	4639      	mov	r1, r7
 8007f1a:	3008      	adds	r0, #8
 8007f1c:	f7ff ff40 	bl	8007da0 <ipv6CompPrefix>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	d0e1      	beq.n	8007ee8 <ipv6RemovePrefix+0xc>
               if(!entry->permanent)
 8007f24:	232c      	movs	r3, #44	@ 0x2c
 8007f26:	fb03 5304 	mla	r3, r3, r4, r5
 8007f2a:	f8d3 387c 	ldr.w	r3, [r3, #2172]	@ 0x87c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1da      	bne.n	8007ee8 <ipv6RemovePrefix+0xc>
                  entry->prefix = IPV6_UNSPECIFIED_ADDR;
 8007f32:	f04f 0e2c 	mov.w	lr, #44	@ 0x2c
 8007f36:	fb0e 5e04 	mla	lr, lr, r4, r5
 8007f3a:	4b08      	ldr	r3, [pc, #32]	@ (8007f5c <ipv6RemovePrefix+0x80>)
 8007f3c:	f60e 0c58 	addw	ip, lr, #2136	@ 0x858
 8007f40:	6818      	ldr	r0, [r3, #0]
 8007f42:	6859      	ldr	r1, [r3, #4]
 8007f44:	689a      	ldr	r2, [r3, #8]
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
                  entry->prefixLen = 0;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	f88e 3868 	strb.w	r3, [lr, #2152]	@ 0x868
                  entry->validLifetime = 0;
 8007f52:	f8ce 3874 	str.w	r3, [lr, #2164]	@ 0x874
 8007f56:	e7c7      	b.n	8007ee8 <ipv6RemovePrefix+0xc>
}
 8007f58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	08019f20 	.word	0x08019f20

08007f60 <ipv6IsOnLink>:
{
 8007f60:	b570      	push	{r4, r5, r6, lr}
 8007f62:	4605      	mov	r5, r0
 8007f64:	460e      	mov	r6, r1
   if(ipv6IsLinkLocalUnicastAddr(ipAddr))
 8007f66:	780b      	ldrb	r3, [r1, #0]
 8007f68:	2bfe      	cmp	r3, #254	@ 0xfe
 8007f6a:	d001      	beq.n	8007f70 <ipv6IsOnLink+0x10>
 8007f6c:	2400      	movs	r4, #0
 8007f6e:	e007      	b.n	8007f80 <ipv6IsOnLink+0x20>
 8007f70:	784b      	ldrb	r3, [r1, #1]
 8007f72:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007f76:	2b80      	cmp	r3, #128	@ 0x80
 8007f78:	d01e      	beq.n	8007fb8 <ipv6IsOnLink+0x58>
 8007f7a:	2400      	movs	r4, #0
 8007f7c:	e000      	b.n	8007f80 <ipv6IsOnLink+0x20>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 8007f7e:	3401      	adds	r4, #1
 8007f80:	2c01      	cmp	r4, #1
 8007f82:	d817      	bhi.n	8007fb4 <ipv6IsOnLink+0x54>
      if(entry->validLifetime > 0)
 8007f84:	232c      	movs	r3, #44	@ 0x2c
 8007f86:	fb03 5304 	mla	r3, r3, r4, r5
 8007f8a:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f5      	beq.n	8007f7e <ipv6IsOnLink+0x1e>
         if(ipv6CompPrefix(ipAddr, &entry->prefix, entry->prefixLen))
 8007f92:	232c      	movs	r3, #44	@ 0x2c
 8007f94:	fb04 f303 	mul.w	r3, r4, r3
 8007f98:	f503 6105 	add.w	r1, r3, #2128	@ 0x850
 8007f9c:	4429      	add	r1, r5
 8007f9e:	442b      	add	r3, r5
 8007fa0:	f893 2868 	ldrb.w	r2, [r3, #2152]	@ 0x868
 8007fa4:	3108      	adds	r1, #8
 8007fa6:	4630      	mov	r0, r6
 8007fa8:	f7ff fefa 	bl	8007da0 <ipv6CompPrefix>
 8007fac:	2800      	cmp	r0, #0
 8007fae:	d0e6      	beq.n	8007f7e <ipv6IsOnLink+0x1e>
            return TRUE;
 8007fb0:	2001      	movs	r0, #1
 8007fb2:	e000      	b.n	8007fb6 <ipv6IsOnLink+0x56>
   return FALSE;
 8007fb4:	2000      	movs	r0, #0
}
 8007fb6:	bd70      	pop	{r4, r5, r6, pc}
      return TRUE;
 8007fb8:	2001      	movs	r0, #1
 8007fba:	e7fc      	b.n	8007fb6 <ipv6IsOnLink+0x56>

08007fbc <ipv6GetMulticastAddrScope>:
uint_t ipv6GetMulticastAddrScope(const Ipv6Addr *ipAddr)
{
   uint_t scope;

   //The scope field is a 4-bit value
   scope = ipAddr->b[1] & 0x0F;
 8007fbc:	7840      	ldrb	r0, [r0, #1]
 8007fbe:	f000 000f 	and.w	r0, r0, #15

   //If the scope field contains the reserved value F, an IPv6 packet
   //must be treated the same as packets destined to a global multicast
   //address (refer to RFC 3513 section 2.7)
   if(scope == 0x0F)
 8007fc2:	280f      	cmp	r0, #15
 8007fc4:	d000      	beq.n	8007fc8 <ipv6GetMulticastAddrScope+0xc>
      scope = IPV6_ADDR_SCOPE_GLOBAL;
   }

   //Return the scope of the specified IPv6 multicast address
   return scope;
}
 8007fc6:	4770      	bx	lr
      scope = IPV6_ADDR_SCOPE_GLOBAL;
 8007fc8:	200e      	movs	r0, #14
   return scope;
 8007fca:	e7fc      	b.n	8007fc6 <ipv6GetMulticastAddrScope+0xa>

08007fcc <ipv6GetAddrScope>:
{
 8007fcc:	b538      	push	{r3, r4, r5, lr}
 8007fce:	4604      	mov	r4, r0
   if(ipv6IsMulticastAddr(ipAddr))
 8007fd0:	7805      	ldrb	r5, [r0, #0]
 8007fd2:	2dff      	cmp	r5, #255	@ 0xff
 8007fd4:	d00a      	beq.n	8007fec <ipv6GetAddrScope+0x20>
   else if(ipv6CompAddr(ipAddr, &IPV6_LOOPBACK_ADDR))
 8007fd6:	2210      	movs	r2, #16
 8007fd8:	490f      	ldr	r1, [pc, #60]	@ (8008018 <ipv6GetAddrScope+0x4c>)
 8007fda:	f00c fe29 	bl	8014c30 <memcmp>
 8007fde:	b1b0      	cbz	r0, 800800e <ipv6GetAddrScope+0x42>
   else if(ipv6IsLinkLocalUnicastAddr(ipAddr))
 8007fe0:	2dfe      	cmp	r5, #254	@ 0xfe
 8007fe2:	d006      	beq.n	8007ff2 <ipv6GetAddrScope+0x26>
   else if(ipv6IsSiteLocalUnicastAddr(ipAddr))
 8007fe4:	2dfe      	cmp	r5, #254	@ 0xfe
 8007fe6:	d00b      	beq.n	8008000 <ipv6GetAddrScope+0x34>
      scope = IPV6_ADDR_SCOPE_GLOBAL;
 8007fe8:	200e      	movs	r0, #14
 8007fea:	e001      	b.n	8007ff0 <ipv6GetAddrScope+0x24>
      scope = ipv6GetMulticastAddrScope(ipAddr);
 8007fec:	f7ff ffe6 	bl	8007fbc <ipv6GetMulticastAddrScope>
}
 8007ff0:	bd38      	pop	{r3, r4, r5, pc}
   else if(ipv6IsLinkLocalUnicastAddr(ipAddr))
 8007ff2:	7863      	ldrb	r3, [r4, #1]
 8007ff4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8007ff8:	2b80      	cmp	r3, #128	@ 0x80
 8007ffa:	d1f3      	bne.n	8007fe4 <ipv6GetAddrScope+0x18>
      scope = IPV6_ADDR_SCOPE_LINK_LOCAL;
 8007ffc:	2002      	movs	r0, #2
 8007ffe:	e7f7      	b.n	8007ff0 <ipv6GetAddrScope+0x24>
   else if(ipv6IsSiteLocalUnicastAddr(ipAddr))
 8008000:	7863      	ldrb	r3, [r4, #1]
 8008002:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008006:	2bc0      	cmp	r3, #192	@ 0xc0
 8008008:	d003      	beq.n	8008012 <ipv6GetAddrScope+0x46>
      scope = IPV6_ADDR_SCOPE_GLOBAL;
 800800a:	200e      	movs	r0, #14
 800800c:	e7f0      	b.n	8007ff0 <ipv6GetAddrScope+0x24>
      scope = IPV6_ADDR_SCOPE_INTERFACE_LOCAL;
 800800e:	2001      	movs	r0, #1
 8008010:	e7ee      	b.n	8007ff0 <ipv6GetAddrScope+0x24>
      scope = IPV6_ADDR_SCOPE_SITE_LOCAL;
 8008012:	2005      	movs	r0, #5
   return scope;
 8008014:	e7ec      	b.n	8007ff0 <ipv6GetAddrScope+0x24>
 8008016:	bf00      	nop
 8008018:	08019f70 	.word	0x08019f70

0800801c <ipv6GetCommonPrefixLength>:

   //Clear bit counter
   j = 0;

   //Perform a byte-for-byte comparison
   for(i = 0; i < sizeof(Ipv6Addr); i++)
 800801c:	2300      	movs	r3, #0
 800801e:	2b0f      	cmp	r3, #15
 8008020:	d806      	bhi.n	8008030 <ipv6GetCommonPrefixLength+0x14>
   {
      //Loop as long as prefixes match
      if(ipAddr1->b[i] != ipAddr2->b[i])
 8008022:	f810 c003 	ldrb.w	ip, [r0, r3]
 8008026:	5cca      	ldrb	r2, [r1, r3]
 8008028:	4594      	cmp	ip, r2
 800802a:	d101      	bne.n	8008030 <ipv6GetCommonPrefixLength+0x14>
   for(i = 0; i < sizeof(Ipv6Addr); i++)
 800802c:	3301      	adds	r3, #1
 800802e:	e7f6      	b.n	800801e <ipv6GetCommonPrefixLength+0x2>
         break;
      }
   }

   //Any mismatch?
   if(i < sizeof(Ipv6Addr))
 8008030:	2b0f      	cmp	r3, #15
 8008032:	d903      	bls.n	800803c <ipv6GetCommonPrefixLength+0x20>
   j = 0;
 8008034:	2200      	movs	r2, #0
   }

   //Return the length of the longest prefix that the two addresses
   //have in common
   return i * 8 + j;
}
 8008036:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800803a:	4770      	bx	lr
      for(j = 0; j < 8; j++)
 800803c:	2200      	movs	r2, #0
 800803e:	2a07      	cmp	r2, #7
 8008040:	d8f9      	bhi.n	8008036 <ipv6GetCommonPrefixLength+0x1a>
{
 8008042:	b510      	push	{r4, lr}
         mask = 1 << (7 - j);
 8008044:	f1c2 0407 	rsb	r4, r2, #7
 8008048:	f04f 0e01 	mov.w	lr, #1
 800804c:	fa0e fe04 	lsl.w	lr, lr, r4
         if((ipAddr1->b[i] & mask) != (ipAddr2->b[i] & mask))
 8008050:	f810 c003 	ldrb.w	ip, [r0, r3]
 8008054:	5ccc      	ldrb	r4, [r1, r3]
 8008056:	ea8c 0c04 	eor.w	ip, ip, r4
 800805a:	ea1e 0f0c 	tst.w	lr, ip
 800805e:	d102      	bne.n	8008066 <ipv6GetCommonPrefixLength+0x4a>
      for(j = 0; j < 8; j++)
 8008060:	3201      	adds	r2, #1
 8008062:	2a07      	cmp	r2, #7
 8008064:	d9ee      	bls.n	8008044 <ipv6GetCommonPrefixLength+0x28>
}
 8008066:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
 800806a:	bd10      	pop	{r4, pc}

0800806c <ipv6SelectSourceAddr>:
{
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	b087      	sub	sp, #28
 8008072:	4683      	mov	fp, r0
 8008074:	9100      	str	r1, [sp, #0]
 8008076:	4690      	mov	r8, r2
   bestAddr = NULL;
 8008078:	f04f 0a00 	mov.w	sl, #0
   bestInterface = NULL;
 800807c:	46d1      	mov	r9, sl
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800807e:	4654      	mov	r4, sl
 8008080:	b19c      	cbz	r4, 80080aa <ipv6SelectSourceAddr+0x3e>
   if(bestAddr != NULL)
 8008082:	f1ba 0f00 	cmp.w	sl, #0
 8008086:	f000 8098 	beq.w	80081ba <ipv6SelectSourceAddr+0x14e>
      *interface = bestInterface;
 800808a:	f8cb 9000 	str.w	r9, [fp]
      *srcAddr = bestAddr->addr;
 800808e:	4654      	mov	r4, sl
 8008090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008092:	f8c8 0000 	str.w	r0, [r8]
 8008096:	f8c8 1004 	str.w	r1, [r8, #4]
 800809a:	f8c8 2008 	str.w	r2, [r8, #8]
 800809e:	f8c8 300c 	str.w	r3, [r8, #12]
      error = NO_ERROR;
 80080a2:	2000      	movs	r0, #0
}
 80080a4:	b007      	add	sp, #28
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      currentInterface = &netInterface[i];
 80080aa:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 80080ae:	fb04 f303 	mul.w	r3, r4, r3
 80080b2:	3358      	adds	r3, #88	@ 0x58
 80080b4:	4a42      	ldr	r2, [pc, #264]	@ (80081c0 <ipv6SelectSourceAddr+0x154>)
 80080b6:	4413      	add	r3, r2
      if(*interface != currentInterface && *interface != NULL)
 80080b8:	f8db 2000 	ldr.w	r2, [fp]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d079      	beq.n	80081b4 <ipv6SelectSourceAddr+0x148>
 80080c0:	b10a      	cbz	r2, 80080c6 <ipv6SelectSourceAddr+0x5a>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 80080c2:	3401      	adds	r4, #1
 80080c4:	e7dc      	b.n	8008080 <ipv6SelectSourceAddr+0x14>
 80080c6:	4625      	mov	r5, r4
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	e024      	b.n	8008116 <ipv6SelectSourceAddr+0xaa>
               if(ipv6GetAddrScope(&currentAddr->addr) >= ipv6GetAddrScope(destAddr))
 80080cc:	9800      	ldr	r0, [sp, #0]
 80080ce:	f7ff ff7d 	bl	8007fcc <ipv6GetAddrScope>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	4283      	cmp	r3, r0
 80080d6:	d31d      	bcc.n	8008114 <ipv6SelectSourceAddr+0xa8>
                  bestAddr = currentAddr;
 80080d8:	46ba      	mov	sl, r7
                  bestInterface = currentInterface;
 80080da:	f8dd 9004 	ldr.w	r9, [sp, #4]
               continue;
 80080de:	e019      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
               if(ipv6GetAddrScope(&bestAddr->addr) < ipv6GetAddrScope(destAddr))
 80080e0:	9800      	ldr	r0, [sp, #0]
 80080e2:	f7ff ff73 	bl	8007fcc <ipv6GetAddrScope>
 80080e6:	9b05      	ldr	r3, [sp, #20]
 80080e8:	4283      	cmp	r3, r0
 80080ea:	d213      	bcs.n	8008114 <ipv6SelectSourceAddr+0xa8>
                  bestAddr = currentAddr;
 80080ec:	46ba      	mov	sl, r7
                  bestInterface = currentInterface;
 80080ee:	f8dd 9004 	ldr.w	r9, [sp, #4]
               continue;
 80080f2:	e00f      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
            if(bestAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 80080f4:	2e03      	cmp	r6, #3
 80080f6:	d14c      	bne.n	8008192 <ipv6SelectSourceAddr+0x126>
 80080f8:	e00c      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
            else if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 80080fa:	2b03      	cmp	r3, #3
 80080fc:	d14b      	bne.n	8008196 <ipv6SelectSourceAddr+0x12a>
               bestAddr = currentAddr;
 80080fe:	46ba      	mov	sl, r7
               bestInterface = currentInterface;
 8008100:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008104:	e006      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
               bestAddr = currentAddr;
 8008106:	46ba      	mov	sl, r7
               bestInterface = currentInterface;
 8008108:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800810c:	e002      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
               bestAddr = currentAddr;
 800810e:	46ba      	mov	sl, r7
               bestInterface = currentInterface;
 8008110:	f8dd 9004 	ldr.w	r9, [sp, #4]
      for(j = 0; j < IPV6_ADDR_LIST_SIZE; j++)
 8008114:	3501      	adds	r5, #1
 8008116:	2d02      	cmp	r5, #2
 8008118:	d8d3      	bhi.n	80080c2 <ipv6SelectSourceAddr+0x56>
         currentAddr = &currentInterface->ipv6Context.addrList[j];
 800811a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
 800811e:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 8008122:	fb04 f303 	mul.w	r3, r4, r3
 8008126:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800812a:	f603 0108 	addw	r1, r3, #2056	@ 0x808
 800812e:	4a24      	ldr	r2, [pc, #144]	@ (80081c0 <ipv6SelectSourceAddr+0x154>)
 8008130:	4411      	add	r1, r2
 8008132:	f101 0708 	add.w	r7, r1, #8
         if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED ||
 8008136:	441a      	add	r2, r3
 8008138:	f892 6820 	ldrb.w	r6, [r2, #2080]	@ 0x820
 800813c:	1eb3      	subs	r3, r6, #2
 800813e:	b2db      	uxtb	r3, r3
 8008140:	2b01      	cmp	r3, #1
 8008142:	d8e7      	bhi.n	8008114 <ipv6SelectSourceAddr+0xa8>
            if(bestAddr == NULL)
 8008144:	f1ba 0f00 	cmp.w	sl, #0
 8008148:	d0dd      	beq.n	8008106 <ipv6SelectSourceAddr+0x9a>
            if(ipv6CompAddr(&bestAddr->addr, destAddr))
 800814a:	f8cd a008 	str.w	sl, [sp, #8]
 800814e:	2210      	movs	r2, #16
 8008150:	9900      	ldr	r1, [sp, #0]
 8008152:	4650      	mov	r0, sl
 8008154:	f00c fd6c 	bl	8014c30 <memcmp>
 8008158:	2800      	cmp	r0, #0
 800815a:	d0db      	beq.n	8008114 <ipv6SelectSourceAddr+0xa8>
            else if(ipv6CompAddr(&currentAddr->addr, destAddr))
 800815c:	2210      	movs	r2, #16
 800815e:	9900      	ldr	r1, [sp, #0]
 8008160:	9704      	str	r7, [sp, #16]
 8008162:	4638      	mov	r0, r7
 8008164:	f00c fd64 	bl	8014c30 <memcmp>
 8008168:	2800      	cmp	r0, #0
 800816a:	d0d0      	beq.n	800810e <ipv6SelectSourceAddr+0xa2>
            if(ipv6GetAddrScope(&currentAddr->addr) < ipv6GetAddrScope(&bestAddr->addr))
 800816c:	4638      	mov	r0, r7
 800816e:	f7ff ff2d 	bl	8007fcc <ipv6GetAddrScope>
 8008172:	9003      	str	r0, [sp, #12]
 8008174:	4650      	mov	r0, sl
 8008176:	f7ff ff29 	bl	8007fcc <ipv6GetAddrScope>
 800817a:	9005      	str	r0, [sp, #20]
 800817c:	9b03      	ldr	r3, [sp, #12]
 800817e:	4283      	cmp	r3, r0
 8008180:	d3a4      	bcc.n	80080cc <ipv6SelectSourceAddr+0x60>
            else if(ipv6GetAddrScope(&bestAddr->addr) < ipv6GetAddrScope(&currentAddr->addr))
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	9a05      	ldr	r2, [sp, #20]
 8008186:	4293      	cmp	r3, r2
 8008188:	d8aa      	bhi.n	80080e0 <ipv6SelectSourceAddr+0x74>
            if(bestAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 800818a:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800818e:	2b02      	cmp	r3, #2
 8008190:	d0b0      	beq.n	80080f4 <ipv6SelectSourceAddr+0x88>
            else if(currentAddr->state == IPV6_ADDR_STATE_PREFERRED &&
 8008192:	2e02      	cmp	r6, #2
 8008194:	d0b1      	beq.n	80080fa <ipv6SelectSourceAddr+0x8e>
            if(ipv6GetCommonPrefixLength(&currentAddr->addr, destAddr) >
 8008196:	9900      	ldr	r1, [sp, #0]
 8008198:	9804      	ldr	r0, [sp, #16]
 800819a:	f7ff ff3f 	bl	800801c <ipv6GetCommonPrefixLength>
 800819e:	4606      	mov	r6, r0
               ipv6GetCommonPrefixLength(&bestAddr->addr, destAddr))
 80081a0:	9900      	ldr	r1, [sp, #0]
 80081a2:	9802      	ldr	r0, [sp, #8]
 80081a4:	f7ff ff3a 	bl	800801c <ipv6GetCommonPrefixLength>
            if(ipv6GetCommonPrefixLength(&currentAddr->addr, destAddr) >
 80081a8:	4286      	cmp	r6, r0
 80081aa:	d9b3      	bls.n	8008114 <ipv6SelectSourceAddr+0xa8>
               bestAddr = currentAddr;
 80081ac:	46ba      	mov	sl, r7
               bestInterface = currentInterface;
 80081ae:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80081b2:	e7af      	b.n	8008114 <ipv6SelectSourceAddr+0xa8>
 80081b4:	4625      	mov	r5, r4
 80081b6:	9301      	str	r3, [sp, #4]
 80081b8:	e7ad      	b.n	8008116 <ipv6SelectSourceAddr+0xaa>
      error = ERROR_NO_ADDRESS;
 80081ba:	f240 10f7 	movw	r0, #503	@ 0x1f7
 80081be:	e771      	b.n	80080a4 <ipv6SelectSourceAddr+0x38>
 80081c0:	20000b50 	.word	0x20000b50

080081c4 <ipv6ComputeSolicitedNodeAddr>:
   Ipv6Addr *solicitedNodeAddr)
{
   error_t error;

   //Ensure the specified address is a valid unicast or anycast address
   if(!ipv6IsMulticastAddr(ipAddr))
 80081c4:	7803      	ldrb	r3, [r0, #0]
 80081c6:	2bff      	cmp	r3, #255	@ 0xff
 80081c8:	d016      	beq.n	80081f8 <ipv6ComputeSolicitedNodeAddr+0x34>
{
 80081ca:	b500      	push	{lr}
   {
      //Copy the 104-bit prefix
      ipv6CopyAddr(solicitedNodeAddr, &IPV6_SOLICITED_NODE_ADDR_PREFIX);
 80081cc:	4b0b      	ldr	r3, [pc, #44]	@ (80081fc <ipv6ComputeSolicitedNodeAddr+0x38>)
 80081ce:	f8d3 e000 	ldr.w	lr, [r3]
 80081d2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80081d6:	689a      	ldr	r2, [r3, #8]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f8c1 e000 	str.w	lr, [r1]
 80081de:	f8c1 c004 	str.w	ip, [r1, #4]
 80081e2:	608a      	str	r2, [r1, #8]
 80081e4:	60cb      	str	r3, [r1, #12]

      //Take the low-order 24 bits of the address (unicast or anycast) and
      //append those bits to the prefix
      solicitedNodeAddr->b[13] = ipAddr->b[13];
 80081e6:	7b43      	ldrb	r3, [r0, #13]
 80081e8:	734b      	strb	r3, [r1, #13]
      solicitedNodeAddr->b[14] = ipAddr->b[14];
 80081ea:	7b83      	ldrb	r3, [r0, #14]
 80081ec:	738b      	strb	r3, [r1, #14]
      solicitedNodeAddr->b[15] = ipAddr->b[15];
 80081ee:	7bc3      	ldrb	r3, [r0, #15]
 80081f0:	73cb      	strb	r3, [r1, #15]

      //Successful processing
      error = NO_ERROR;
 80081f2:	2000      	movs	r0, #0
      error = ERROR_INVALID_ADDRESS;
   }

   //Return status code
   return error;
}
 80081f4:	f85d fb04 	ldr.w	pc, [sp], #4
      error = ERROR_INVALID_ADDRESS;
 80081f8:	20e4      	movs	r0, #228	@ 0xe4
}
 80081fa:	4770      	bx	lr
 80081fc:	08019f30 	.word	0x08019f30

08008200 <ipv6SetAddr>:
{
 8008200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008204:	b085      	sub	sp, #20
   if(interface == NULL || addr == NULL)
 8008206:	2a00      	cmp	r2, #0
 8008208:	bf18      	it	ne
 800820a:	2800      	cmpne	r0, #0
 800820c:	f000 808f 	beq.w	800832e <ipv6SetAddr+0x12e>
 8008210:	460c      	mov	r4, r1
 8008212:	4698      	mov	r8, r3
 8008214:	4607      	mov	r7, r0
 8008216:	4616      	mov	r6, r2
   if(index >= IPV6_ADDR_LIST_SIZE)
 8008218:	2902      	cmp	r1, #2
 800821a:	f200 808a 	bhi.w	8008332 <ipv6SetAddr+0x132>
   if(ipv6IsMulticastAddr(addr))
 800821e:	7813      	ldrb	r3, [r2, #0]
 8008220:	2bff      	cmp	r3, #255	@ 0xff
 8008222:	f000 8089 	beq.w	8008338 <ipv6SetAddr+0x138>
   physicalInterface = nicGetPhysicalInterface(interface);
 8008226:	f004 fc67 	bl	800caf8 <nicGetPhysicalInterface>
 800822a:	4681      	mov	r9, r0
   entry = &interface->ipv6Context.addrList[index];
 800822c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8008230:	012d      	lsls	r5, r5, #4
 8008232:	f505 65f6 	add.w	r5, r5, #1968	@ 0x7b0
 8008236:	443d      	add	r5, r7
 8008238:	3508      	adds	r5, #8
   if(!ipv6CompAddr(&entry->addr, &IPV6_UNSPECIFIED_ADDR))
 800823a:	2210      	movs	r2, #16
 800823c:	4940      	ldr	r1, [pc, #256]	@ (8008340 <ipv6SetAddr+0x140>)
 800823e:	4628      	mov	r0, r5
 8008240:	f00c fcf6 	bl	8014c30 <memcmp>
 8008244:	b160      	cbz	r0, 8008260 <ipv6SetAddr+0x60>
      if(entry->state != IPV6_ADDR_STATE_INVALID)
 8008246:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800824a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800824e:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 8008252:	b12b      	cbz	r3, 8008260 <ipv6SetAddr+0x60>
         if(physicalInterface->nicDriver != NULL &&
 8008254:	f8d9 3034 	ldr.w	r3, [r9, #52]	@ 0x34
 8008258:	b113      	cbz	r3, 8008260 <ipv6SetAddr+0x60>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800825a:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 800825c:	2b01      	cmp	r3, #1
 800825e:	d04d      	beq.n	80082fc <ipv6SetAddr+0xfc>
   ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_INVALID);
 8008260:	2100      	movs	r1, #0
 8008262:	4628      	mov	r0, r5
 8008264:	f7ff fbf7 	bl	8007a56 <ipv6ChangeAddrState>
   entry->validLifetime = 0;
 8008268:	eb04 0c44 	add.w	ip, r4, r4, lsl #1
 800826c:	eb07 1c0c 	add.w	ip, r7, ip, lsl #4
 8008270:	2300      	movs	r3, #0
 8008272:	f8cc 37d0 	str.w	r3, [ip, #2000]	@ 0x7d0
   entry->preferredLifetime = 0;
 8008276:	f8cc 37d4 	str.w	r3, [ip, #2004]	@ 0x7d4
   entry->permanent = FALSE;
 800827a:	f8cc 37d8 	str.w	r3, [ip, #2008]	@ 0x7d8
   entry->addr = *addr;
 800827e:	f50c 6cf7 	add.w	ip, ip, #1976	@ 0x7b8
 8008282:	6830      	ldr	r0, [r6, #0]
 8008284:	6871      	ldr	r1, [r6, #4]
 8008286:	68b2      	ldr	r2, [r6, #8]
 8008288:	68f3      	ldr	r3, [r6, #12]
 800828a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   if(!ipv6CompAddr(addr, &IPV6_UNSPECIFIED_ADDR))
 800828e:	2210      	movs	r2, #16
 8008290:	492b      	ldr	r1, [pc, #172]	@ (8008340 <ipv6SetAddr+0x140>)
 8008292:	4630      	mov	r0, r6
 8008294:	f00c fccc 	bl	8014c30 <memcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	d04f      	beq.n	800833c <ipv6SetAddr+0x13c>
      if(state != IPV6_ADDR_STATE_INVALID)
 800829c:	f1b8 0f00 	cmp.w	r8, #0
 80082a0:	d041      	beq.n	8008326 <ipv6SetAddr+0x126>
         if(physicalInterface->nicDriver != NULL &&
 80082a2:	f8d9 3034 	ldr.w	r3, [r9, #52]	@ 0x34
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d03f      	beq.n	800832a <ipv6SetAddr+0x12a>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 80082aa:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 80082ac:	2b01      	cmp	r3, #1
 80082ae:	d02e      	beq.n	800830e <ipv6SetAddr+0x10e>
   error = NO_ERROR;
 80082b0:	2600      	movs	r6, #0
         ipv6ChangeAddrState(entry, state);
 80082b2:	4641      	mov	r1, r8
 80082b4:	4628      	mov	r0, r5
 80082b6:	f7ff fbce 	bl	8007a56 <ipv6ChangeAddrState>
         entry->duplicate = FALSE;
 80082ba:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80082be:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 80082c2:	f04f 0800 	mov.w	r8, #0
 80082c6:	f8c5 87cc 	str.w	r8, [r5, #1996]	@ 0x7cc
         entry->preferredLifetime = preferredLifetime;
 80082ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80082cc:	f8c5 37d4 	str.w	r3, [r5, #2004]	@ 0x7d4
         entry->validLifetime = validLifetime;
 80082d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082d2:	f8c5 37d0 	str.w	r3, [r5, #2000]	@ 0x7d0
         entry->timestamp = osGetSystemTime();
 80082d6:	f7f8 fa91 	bl	80007fc <osGetSystemTime>
 80082da:	f8c5 07dc 	str.w	r0, [r5, #2012]	@ 0x7dc
         entry->dadTimeout = 0;
 80082de:	f8c5 87e0 	str.w	r8, [r5, #2016]	@ 0x7e0
         entry->dadRetransmitCount = 0;
 80082e2:	f8c5 87e4 	str.w	r8, [r5, #2020]	@ 0x7e4
      entry->permanent = permanent;
 80082e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80082ea:	eb07 1704 	add.w	r7, r7, r4, lsl #4
 80082ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80082f0:	f8c7 37d8 	str.w	r3, [r7, #2008]	@ 0x7d8
}
 80082f4:	4630      	mov	r0, r6
 80082f6:	b005      	add	sp, #20
 80082f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            ipv6ComputeSolicitedNodeAddr(&entry->addr, &solicitedNodeAddr);
 80082fc:	4669      	mov	r1, sp
 80082fe:	4628      	mov	r0, r5
 8008300:	f7ff ff60 	bl	80081c4 <ipv6ComputeSolicitedNodeAddr>
            ipv6LeaveMulticastGroup(interface, &solicitedNodeAddr);
 8008304:	4669      	mov	r1, sp
 8008306:	4638      	mov	r0, r7
 8008308:	f000 fa24 	bl	8008754 <ipv6LeaveMulticastGroup>
 800830c:	e7a8      	b.n	8008260 <ipv6SetAddr+0x60>
            ipv6ComputeSolicitedNodeAddr(addr, &solicitedNodeAddr);
 800830e:	4669      	mov	r1, sp
 8008310:	4630      	mov	r0, r6
 8008312:	f7ff ff57 	bl	80081c4 <ipv6ComputeSolicitedNodeAddr>
            error = ipv6JoinMulticastGroup(interface, &solicitedNodeAddr);
 8008316:	4669      	mov	r1, sp
 8008318:	4638      	mov	r0, r7
 800831a:	f000 f9fd 	bl	8008718 <ipv6JoinMulticastGroup>
      if(!error)
 800831e:	4606      	mov	r6, r0
 8008320:	2800      	cmp	r0, #0
 8008322:	d1e0      	bne.n	80082e6 <ipv6SetAddr+0xe6>
 8008324:	e7c5      	b.n	80082b2 <ipv6SetAddr+0xb2>
   error = NO_ERROR;
 8008326:	2600      	movs	r6, #0
 8008328:	e7c3      	b.n	80082b2 <ipv6SetAddr+0xb2>
 800832a:	2600      	movs	r6, #0
 800832c:	e7c1      	b.n	80082b2 <ipv6SetAddr+0xb2>
      return ERROR_INVALID_PARAMETER;
 800832e:	2602      	movs	r6, #2
 8008330:	e7e0      	b.n	80082f4 <ipv6SetAddr+0xf4>
      return ERROR_OUT_OF_RANGE;
 8008332:	f240 1607 	movw	r6, #263	@ 0x107
 8008336:	e7dd      	b.n	80082f4 <ipv6SetAddr+0xf4>
      return ERROR_INVALID_ADDRESS;
 8008338:	26e4      	movs	r6, #228	@ 0xe4
 800833a:	e7db      	b.n	80082f4 <ipv6SetAddr+0xf4>
   error = NO_ERROR;
 800833c:	2600      	movs	r6, #0
 800833e:	e7d9      	b.n	80082f4 <ipv6SetAddr+0xf4>
 8008340:	08019f20 	.word	0x08019f20

08008344 <ipv6FlushAddrList>:
{
 8008344:	b530      	push	{r4, r5, lr}
 8008346:	b085      	sub	sp, #20
 8008348:	4605      	mov	r5, r0
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800834a:	2400      	movs	r4, #0
 800834c:	e000      	b.n	8008350 <ipv6FlushAddrList+0xc>
 800834e:	3401      	adds	r4, #1
 8008350:	2c02      	cmp	r4, #2
 8008352:	d818      	bhi.n	8008386 <ipv6FlushAddrList+0x42>
      if(entry->validLifetime > 0)
 8008354:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008358:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800835c:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 8008360:	2b00      	cmp	r3, #0
 8008362:	d0f4      	beq.n	800834e <ipv6FlushAddrList+0xa>
         if(!entry->permanent)
 8008364:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8008368:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800836c:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1ec      	bne.n	800834e <ipv6FlushAddrList+0xa>
            ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 8008374:	9302      	str	r3, [sp, #8]
 8008376:	9301      	str	r3, [sp, #4]
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	4a04      	ldr	r2, [pc, #16]	@ (800838c <ipv6FlushAddrList+0x48>)
 800837c:	4621      	mov	r1, r4
 800837e:	4628      	mov	r0, r5
 8008380:	f7ff ff3e 	bl	8008200 <ipv6SetAddr>
 8008384:	e7e3      	b.n	800834e <ipv6FlushAddrList+0xa>
}
 8008386:	b005      	add	sp, #20
 8008388:	bd30      	pop	{r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	08019f20 	.word	0x08019f20

08008390 <ipv6GenerateLinkLocalAddr>:

void ipv6GenerateLinkLocalAddr(const Eui64 *interfaceId, Ipv6Addr *ipAddr)
{
   //A link-local address is formed by combining the well-known link-local
   //prefix fe80::/10 with the interface identifier
   ipAddr->w[0] = HTONS(0xFE80);
 8008390:	2300      	movs	r3, #0
 8008392:	f06f 0201 	mvn.w	r2, #1
 8008396:	700a      	strb	r2, [r1, #0]
 8008398:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 800839c:	704a      	strb	r2, [r1, #1]
   ipAddr->w[1] = HTONS(0x0000);
 800839e:	708b      	strb	r3, [r1, #2]
 80083a0:	70cb      	strb	r3, [r1, #3]
   ipAddr->w[2] = HTONS(0x0000);
 80083a2:	710b      	strb	r3, [r1, #4]
 80083a4:	714b      	strb	r3, [r1, #5]
   ipAddr->w[3] = HTONS(0x0000);
 80083a6:	718b      	strb	r3, [r1, #6]
 80083a8:	71cb      	strb	r3, [r1, #7]
   ipAddr->w[4] = interfaceId->w[0];
 80083aa:	8803      	ldrh	r3, [r0, #0]
 80083ac:	810b      	strh	r3, [r1, #8]
   ipAddr->w[5] = interfaceId->w[1];
 80083ae:	8843      	ldrh	r3, [r0, #2]
 80083b0:	814b      	strh	r3, [r1, #10]
   ipAddr->w[6] = interfaceId->w[2];
 80083b2:	8883      	ldrh	r3, [r0, #4]
 80083b4:	818b      	strh	r3, [r1, #12]
   ipAddr->w[7] = interfaceId->w[3];
 80083b6:	88c3      	ldrh	r3, [r0, #6]
 80083b8:	81cb      	strh	r3, [r1, #14]
}
 80083ba:	4770      	bx	lr

080083bc <ipv6UpdateInStats>:
      IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCInMcastOctets, length);
      IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsInMcastOctets, length);
      IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCInMcastOctets, length);
   }
}
 80083bc:	4770      	bx	lr

080083be <ipv6UpdateOutStats>:
   //for transmission
   IP_MIB_INC_COUNTER32(ipv6SystemStats.ipSystemStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv6SystemStats.ipSystemStatsHCOutOctets, length);
   IP_MIB_INC_COUNTER32(ipv6IfStatsTable[interface->index].ipIfStatsOutOctets, length);
   IP_MIB_INC_COUNTER64(ipv6IfStatsTable[interface->index].ipIfStatsHCOutOctets, length);
}
 80083be:	4770      	bx	lr

080083c0 <ipv6MulticastFilter>:
 * @return Error code
 **/

error_t ipv6MulticastFilter(NetInterface *interface, const Ipv6Addr *destAddr,
   const Ipv6Addr *srcAddr)
{
 80083c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083c2:	4607      	mov	r7, r0
 80083c4:	460e      	mov	r6, r1

   //Initialize status code
   error = ERROR_INVALID_ADDRESS;

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE && error; i++)
 80083c6:	2400      	movs	r4, #0
   error = ERROR_INVALID_ADDRESS;
 80083c8:	25e4      	movs	r5, #228	@ 0xe4
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE && error; i++)
 80083ca:	e000      	b.n	80083ce <ipv6MulticastFilter+0xe>
 80083cc:	3401      	adds	r4, #1
 80083ce:	2c07      	cmp	r4, #7
 80083d0:	bf8c      	ite	hi
 80083d2:	2300      	movhi	r3, #0
 80083d4:	2301      	movls	r3, #1
 80083d6:	b16d      	cbz	r5, 80083f4 <ipv6MulticastFilter+0x34>
 80083d8:	b163      	cbz	r3, 80083f4 <ipv6MulticastFilter+0x34>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.multicastFilter[i];

      //Matching multicast address?
      if(ipv6CompAddr(&entry->addr, destAddr))
 80083da:	0160      	lsls	r0, r4, #5
 80083dc:	f600 1008 	addw	r0, r0, #2312	@ 0x908
 80083e0:	4438      	add	r0, r7
 80083e2:	2210      	movs	r2, #16
 80083e4:	4631      	mov	r1, r6
 80083e6:	3008      	adds	r0, #8
 80083e8:	f00c fc22 	bl	8014c30 <memcmp>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	d1ed      	bne.n	80083cc <ipv6MulticastFilter+0xc>
               }
            }
         }
#else
         //The multicast address is acceptable
         error = NO_ERROR;
 80083f0:	2500      	movs	r5, #0
 80083f2:	e7eb      	b.n	80083cc <ipv6MulticastFilter+0xc>
      }
   }

   //Return status code
   return error;
}
 80083f4:	4628      	mov	r0, r5
 80083f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080083f8 <ipv6DeriveInterfaceState>:
   {
      //Just for sanity
   }
#else
   //All sources are accepted
   entry->srcFilterMode = IP_FILTER_MODE_EXCLUDE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	6183      	str	r3, [r0, #24]
   entry->srcFilter.numSources = 0;
 80083fc:	61c3      	str	r3, [r0, #28]
#endif
}
 80083fe:	4770      	bx	lr

08008400 <ipv6MapMulticastAddrToMac>:
error_t ipv6MapMulticastAddrToMac(const Ipv6Addr *ipAddr, MacAddr *macAddr)
{
   error_t error;

   //Ensure the specified IPv6 address is a multicast address
   if(ipv6IsMulticastAddr(ipAddr))
 8008400:	7803      	ldrb	r3, [r0, #0]
 8008402:	2bff      	cmp	r3, #255	@ 0xff
 8008404:	d001      	beq.n	800840a <ipv6MapMulticastAddrToMac+0xa>
      error = NO_ERROR;
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_ADDRESS;
 8008406:	20e4      	movs	r0, #228	@ 0xe4
   }

   //Return status code
   return error;
}
 8008408:	4770      	bx	lr
      macAddr->b[0] = 0x33;
 800840a:	2333      	movs	r3, #51	@ 0x33
 800840c:	700b      	strb	r3, [r1, #0]
      macAddr->b[1] = 0x33;
 800840e:	704b      	strb	r3, [r1, #1]
      macAddr->b[2] = ipAddr->b[12];
 8008410:	7b03      	ldrb	r3, [r0, #12]
 8008412:	708b      	strb	r3, [r1, #2]
      macAddr->b[3] = ipAddr->b[13];
 8008414:	7b43      	ldrb	r3, [r0, #13]
 8008416:	70cb      	strb	r3, [r1, #3]
      macAddr->b[4] = ipAddr->b[14];
 8008418:	7b83      	ldrb	r3, [r0, #14]
 800841a:	710b      	strb	r3, [r1, #4]
      macAddr->b[5] = ipAddr->b[15];
 800841c:	7bc3      	ldrb	r3, [r0, #15]
 800841e:	714b      	strb	r3, [r1, #5]
      error = NO_ERROR;
 8008420:	2000      	movs	r0, #0
 8008422:	4770      	bx	lr

08008424 <ipv6AcceptMulticastAddr>:
{
 8008424:	b570      	push	{r4, r5, r6, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	4604      	mov	r4, r0
 800842a:	460d      	mov	r5, r1
   physicalInterface = nicGetPhysicalInterface(interface);
 800842c:	f004 fb64 	bl	800caf8 <nicGetPhysicalInterface>
 8008430:	4606      	mov	r6, r0
   ipv6MapMulticastAddrToMac(groupAddr, &macAddr);
 8008432:	4669      	mov	r1, sp
 8008434:	4628      	mov	r0, r5
 8008436:	f7ff ffe3 	bl	8008400 <ipv6MapMulticastAddrToMac>
   error = ethAcceptMacAddr(interface, &macAddr);
 800843a:	4669      	mov	r1, sp
 800843c:	4620      	mov	r0, r4
 800843e:	f7fa fdaf 	bl	8002fa0 <ethAcceptMacAddr>
   if(!error)
 8008442:	4605      	mov	r5, r0
 8008444:	b938      	cbnz	r0, 8008456 <ipv6AcceptMulticastAddr+0x32>
      if(interface != physicalInterface)
 8008446:	42b4      	cmp	r4, r6
 8008448:	d005      	beq.n	8008456 <ipv6AcceptMulticastAddr+0x32>
         error = ethAcceptMacAddr(physicalInterface, &macAddr);
 800844a:	4669      	mov	r1, sp
 800844c:	4630      	mov	r0, r6
 800844e:	f7fa fda7 	bl	8002fa0 <ethAcceptMacAddr>
         if(error)
 8008452:	4605      	mov	r5, r0
 8008454:	b910      	cbnz	r0, 800845c <ipv6AcceptMulticastAddr+0x38>
}
 8008456:	4628      	mov	r0, r5
 8008458:	b002      	add	sp, #8
 800845a:	bd70      	pop	{r4, r5, r6, pc}
            ethDropMacAddr(interface, &macAddr);
 800845c:	4669      	mov	r1, sp
 800845e:	4620      	mov	r0, r4
 8008460:	f7fa fddc 	bl	800301c <ethDropMacAddr>
 8008464:	e7f7      	b.n	8008456 <ipv6AcceptMulticastAddr+0x32>

08008466 <ipv6DropMulticastAddr>:
{
 8008466:	b570      	push	{r4, r5, r6, lr}
 8008468:	b082      	sub	sp, #8
 800846a:	4604      	mov	r4, r0
 800846c:	460e      	mov	r6, r1
   physicalInterface = nicGetPhysicalInterface(interface);
 800846e:	f004 fb43 	bl	800caf8 <nicGetPhysicalInterface>
 8008472:	4605      	mov	r5, r0
   ipv6MapMulticastAddrToMac(groupAddr, &macAddr);
 8008474:	4669      	mov	r1, sp
 8008476:	4630      	mov	r0, r6
 8008478:	f7ff ffc2 	bl	8008400 <ipv6MapMulticastAddrToMac>
   ethDropMacAddr(interface, &macAddr);
 800847c:	4669      	mov	r1, sp
 800847e:	4620      	mov	r0, r4
 8008480:	f7fa fdcc 	bl	800301c <ethDropMacAddr>
   if(interface != physicalInterface)
 8008484:	42ac      	cmp	r4, r5
 8008486:	d003      	beq.n	8008490 <ipv6DropMulticastAddr+0x2a>
      ethDropMacAddr(physicalInterface, &macAddr);
 8008488:	4669      	mov	r1, sp
 800848a:	4628      	mov	r0, r5
 800848c:	f7fa fdc6 	bl	800301c <ethDropMacAddr>
}
 8008490:	b002      	add	sp, #8
 8008492:	bd70      	pop	{r4, r5, r6, pc}

08008494 <ipv6CreateMulticastFilterEntry>:
 * @return Pointer to the newly created multicast filter entry
 **/

Ipv6FilterEntry *ipv6CreateMulticastFilterEntry(NetInterface *interface,
   const Ipv6Addr *multicastAddr)
{
 8008494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008496:	4605      	mov	r5, r0
 8008498:	460e      	mov	r6, r1

   //Initialize pointer
   entry = NULL;

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800849a:	2400      	movs	r4, #0
 800849c:	2c07      	cmp	r4, #7
 800849e:	d826      	bhi.n	80084ee <ipv6CreateMulticastFilterEntry+0x5a>
   {
      //Check whether the current entry is available for use
      if(ipv6CompAddr(&interface->ipv6Context.multicastFilter[i].addr,
 80084a0:	0160      	lsls	r0, r4, #5
 80084a2:	f600 1008 	addw	r0, r0, #2312	@ 0x908
 80084a6:	4428      	add	r0, r5
 80084a8:	2210      	movs	r2, #16
 80084aa:	4913      	ldr	r1, [pc, #76]	@ (80084f8 <ipv6CreateMulticastFilterEntry+0x64>)
 80084ac:	3008      	adds	r0, #8
 80084ae:	f00c fbbf 	bl	8014c30 <memcmp>
 80084b2:	b108      	cbz	r0, 80084b8 <ipv6CreateMulticastFilterEntry+0x24>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80084b4:	3401      	adds	r4, #1
 80084b6:	e7f1      	b.n	800849c <ipv6CreateMulticastFilterEntry+0x8>
         &IPV6_UNSPECIFIED_ADDR))
      {
         //Point to the current entry
         entry = &interface->ipv6Context.multicastFilter[i];
 80084b8:	ea4f 1e44 	mov.w	lr, r4, lsl #5
 80084bc:	f60e 1c08 	addw	ip, lr, #2312	@ 0x908
 80084c0:	44ac      	add	ip, r5
 80084c2:	f10c 0c08 	add.w	ip, ip, #8

         //Initialize entry
         entry->addr = *multicastAddr;
 80084c6:	44ae      	add	lr, r5
 80084c8:	f50e 6711 	add.w	r7, lr, #2320	@ 0x910
 80084cc:	6830      	ldr	r0, [r6, #0]
 80084ce:	6871      	ldr	r1, [r6, #4]
 80084d0:	68b2      	ldr	r2, [r6, #8]
 80084d2:	68f3      	ldr	r3, [r6, #12]
 80084d4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
         entry->anySourceRefCount = 0;
 80084d6:	2300      	movs	r3, #0
 80084d8:	f8ce 3920 	str.w	r3, [lr, #2336]	@ 0x920
         entry->macFilterConfigured = FALSE;
 80084dc:	f8ce 3924 	str.w	r3, [lr, #2340]	@ 0x924
         entry->srcFilterMode = IP_FILTER_MODE_INCLUDE;
 80084e0:	3449      	adds	r4, #73	@ 0x49
 80084e2:	eb05 1544 	add.w	r5, r5, r4, lsl #5
 80084e6:	2201      	movs	r2, #1
 80084e8:	60aa      	str	r2, [r5, #8]
         entry->srcFilter.numSources = 0;
 80084ea:	60eb      	str	r3, [r5, #12]

         //We are done
         break;
 80084ec:	e001      	b.n	80084f2 <ipv6CreateMulticastFilterEntry+0x5e>
   entry = NULL;
 80084ee:	f04f 0c00 	mov.w	ip, #0
      }
   }

   //Return a pointer to the newly created multicast filter entry
   return entry;
}
 80084f2:	4660      	mov	r0, ip
 80084f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084f6:	bf00      	nop
 80084f8:	08019f20 	.word	0x08019f20

080084fc <ipv6FindMulticastFilterEntry>:
 *   is returned if the specified group address cannot be found
 **/

Ipv6FilterEntry *ipv6FindMulticastFilterEntry(NetInterface *interface,
   const Ipv6Addr *multicastAddr)
{
 80084fc:	b570      	push	{r4, r5, r6, lr}
 80084fe:	4605      	mov	r5, r0
 8008500:	460e      	mov	r6, r1

   //Initialize pointer
   entry = NULL;

   //Go through the multicast filter table
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8008502:	2400      	movs	r4, #0
 8008504:	2c07      	cmp	r4, #7
 8008506:	d811      	bhi.n	800852c <ipv6FindMulticastFilterEntry+0x30>
   {
      //Compare multicast addresses
      if(ipv6CompAddr(&interface->ipv6Context.multicastFilter[i].addr,
 8008508:	0160      	lsls	r0, r4, #5
 800850a:	f600 1008 	addw	r0, r0, #2312	@ 0x908
 800850e:	4428      	add	r0, r5
 8008510:	2210      	movs	r2, #16
 8008512:	4631      	mov	r1, r6
 8008514:	3008      	adds	r0, #8
 8008516:	f00c fb8b 	bl	8014c30 <memcmp>
 800851a:	b108      	cbz	r0, 8008520 <ipv6FindMulticastFilterEntry+0x24>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800851c:	3401      	adds	r4, #1
 800851e:	e7f1      	b.n	8008504 <ipv6FindMulticastFilterEntry+0x8>
         multicastAddr))
      {
         //Point to the current entry
         entry = &interface->ipv6Context.multicastFilter[i];
 8008520:	0164      	lsls	r4, r4, #5
 8008522:	f604 1408 	addw	r4, r4, #2312	@ 0x908
 8008526:	1928      	adds	r0, r5, r4
 8008528:	3008      	adds	r0, #8
         break;
 800852a:	e000      	b.n	800852e <ipv6FindMulticastFilterEntry+0x32>
   entry = NULL;
 800852c:	2000      	movs	r0, #0
      }
   }

   //Return a pointer to the matching multicast filter entry
   return entry;
}
 800852e:	bd70      	pop	{r4, r5, r6, pc}

08008530 <ipv6DeleteMulticastFilterEntry>:
 **/

void ipv6DeleteMulticastFilterEntry(Ipv6FilterEntry *entry)
{
   //Delete the specified entry
   entry->addr = IPV6_UNSPECIFIED_ADDR;
 8008530:	4b04      	ldr	r3, [pc, #16]	@ (8008544 <ipv6DeleteMulticastFilterEntry+0x14>)
 8008532:	4684      	mov	ip, r0
 8008534:	6818      	ldr	r0, [r3, #0]
 8008536:	6859      	ldr	r1, [r3, #4]
 8008538:	689a      	ldr	r2, [r3, #8]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
}
 8008540:	4770      	bx	lr
 8008542:	bf00      	nop
 8008544:	08019f20 	.word	0x08019f20

08008548 <ipv6UpdateMulticastFilter>:
{
 8008548:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800854c:	4606      	mov	r6, r0
 800854e:	460d      	mov	r5, r1
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8008550:	2400      	movs	r4, #0
 8008552:	e00c      	b.n	800856e <ipv6UpdateMulticastFilter+0x26>
         if(entry->anySourceRefCount > 0)
 8008554:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 8008558:	f8d3 3920 	ldr.w	r3, [r3, #2336]	@ 0x920
 800855c:	b1e3      	cbz	r3, 8008598 <ipv6UpdateMulticastFilter+0x50>
            entry->srcFilterMode = IP_FILTER_MODE_EXCLUDE;
 800855e:	f104 0349 	add.w	r3, r4, #73	@ 0x49
 8008562:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 8008566:	2200      	movs	r2, #0
 8008568:	609a      	str	r2, [r3, #8]
            entry->srcFilter.numSources = 0;
 800856a:	60da      	str	r2, [r3, #12]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800856c:	3401      	adds	r4, #1
 800856e:	2c07      	cmp	r4, #7
 8008570:	d81b      	bhi.n	80085aa <ipv6UpdateMulticastFilter+0x62>
      if(ipv6CompAddr(groupAddr, &IPV6_UNSPECIFIED_ADDR) ||
 8008572:	2210      	movs	r2, #16
 8008574:	4966      	ldr	r1, [pc, #408]	@ (8008710 <ipv6UpdateMulticastFilter+0x1c8>)
 8008576:	4628      	mov	r0, r5
 8008578:	f00c fb5a 	bl	8014c30 <memcmp>
 800857c:	2800      	cmp	r0, #0
 800857e:	d0e9      	beq.n	8008554 <ipv6UpdateMulticastFilter+0xc>
         ipv6CompAddr(groupAddr, &entry->addr))
 8008580:	0161      	lsls	r1, r4, #5
 8008582:	f601 1108 	addw	r1, r1, #2312	@ 0x908
 8008586:	4431      	add	r1, r6
 8008588:	2210      	movs	r2, #16
 800858a:	3108      	adds	r1, #8
 800858c:	4628      	mov	r0, r5
 800858e:	f00c fb4f 	bl	8014c30 <memcmp>
      if(ipv6CompAddr(groupAddr, &IPV6_UNSPECIFIED_ADDR) ||
 8008592:	2800      	cmp	r0, #0
 8008594:	d1ea      	bne.n	800856c <ipv6UpdateMulticastFilter+0x24>
 8008596:	e7dd      	b.n	8008554 <ipv6UpdateMulticastFilter+0xc>
            entry->srcFilterMode = IP_FILTER_MODE_INCLUDE;
 8008598:	f104 0349 	add.w	r3, r4, #73	@ 0x49
 800859c:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80085a0:	2201      	movs	r2, #1
 80085a2:	609a      	str	r2, [r3, #8]
            entry->srcFilter.numSources = 0;
 80085a4:	2200      	movs	r2, #0
 80085a6:	60da      	str	r2, [r3, #12]
 80085a8:	e7e0      	b.n	800856c <ipv6UpdateMulticastFilter+0x24>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80085aa:	2400      	movs	r4, #0
 80085ac:	e015      	b.n	80085da <ipv6UpdateMulticastFilter+0x92>
            group = &socket->multicastGroups[j];
 80085ae:	eb07 0287 	add.w	r2, r7, r7, lsl #2
 80085b2:	f44f 731c 	mov.w	r3, #624	@ 0x270
 80085b6:	fb04 f303 	mul.w	r3, r4, r3
 80085ba:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80085be:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80085c2:	4a54      	ldr	r2, [pc, #336]	@ (8008714 <ipv6UpdateMulticastFilter+0x1cc>)
 80085c4:	4411      	add	r1, r2
 80085c6:	f101 0804 	add.w	r8, r1, #4
            if(group->addr.length == sizeof(Ipv6Addr))
 80085ca:	441a      	add	r2, r3
 80085cc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 80085ce:	2b10      	cmp	r3, #16
 80085d0:	d010      	beq.n	80085f4 <ipv6UpdateMulticastFilter+0xac>
         for(j = 0; j < SOCKET_MAX_MULTICAST_GROUPS; j++)
 80085d2:	3701      	adds	r7, #1
 80085d4:	2f00      	cmp	r7, #0
 80085d6:	d0ea      	beq.n	80085ae <ipv6UpdateMulticastFilter+0x66>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 80085d8:	3401      	adds	r4, #1
 80085da:	2c09      	cmp	r4, #9
 80085dc:	d843      	bhi.n	8008666 <ipv6UpdateMulticastFilter+0x11e>
      if(socket->type == SOCKET_TYPE_DGRAM ||
 80085de:	4b4d      	ldr	r3, [pc, #308]	@ (8008714 <ipv6UpdateMulticastFilter+0x1cc>)
 80085e0:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80085e4:	fb02 3304 	mla	r3, r2, r4, r3
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	3b02      	subs	r3, #2
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d8f3      	bhi.n	80085d8 <ipv6UpdateMulticastFilter+0x90>
         for(j = 0; j < SOCKET_MAX_MULTICAST_GROUPS; j++)
 80085f0:	2700      	movs	r7, #0
 80085f2:	e7ef      	b.n	80085d4 <ipv6UpdateMulticastFilter+0x8c>
               if(ipv6CompAddr(groupAddr, &IPV6_UNSPECIFIED_ADDR) ||
 80085f4:	2210      	movs	r2, #16
 80085f6:	4946      	ldr	r1, [pc, #280]	@ (8008710 <ipv6UpdateMulticastFilter+0x1c8>)
 80085f8:	4628      	mov	r0, r5
 80085fa:	f00c fb19 	bl	8014c30 <memcmp>
 80085fe:	b188      	cbz	r0, 8008624 <ipv6UpdateMulticastFilter+0xdc>
                  ipv6CompAddr(groupAddr, &group->addr.ipv6Addr))
 8008600:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8008604:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8008608:	fb04 f101 	mul.w	r1, r4, r1
 800860c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8008610:	3148      	adds	r1, #72	@ 0x48
 8008612:	4b40      	ldr	r3, [pc, #256]	@ (8008714 <ipv6UpdateMulticastFilter+0x1cc>)
 8008614:	4419      	add	r1, r3
 8008616:	2210      	movs	r2, #16
 8008618:	3108      	adds	r1, #8
 800861a:	4628      	mov	r0, r5
 800861c:	f00c fb08 	bl	8014c30 <memcmp>
               if(ipv6CompAddr(groupAddr, &IPV6_UNSPECIFIED_ADDR) ||
 8008620:	2800      	cmp	r0, #0
 8008622:	d1d6      	bne.n	80085d2 <ipv6UpdateMulticastFilter+0x8a>
                     &group->addr.ipv6Addr);
 8008624:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8008628:	f44f 791c 	mov.w	r9, #624	@ 0x270
 800862c:	fb09 f904 	mul.w	r9, r9, r4
 8008630:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8008634:	f109 0948 	add.w	r9, r9, #72	@ 0x48
 8008638:	4b36      	ldr	r3, [pc, #216]	@ (8008714 <ipv6UpdateMulticastFilter+0x1cc>)
 800863a:	4499      	add	r9, r3
 800863c:	f109 0908 	add.w	r9, r9, #8
                  entry = ipv6FindMulticastFilterEntry(interface,
 8008640:	4649      	mov	r1, r9
 8008642:	4630      	mov	r0, r6
 8008644:	f7ff ff5a 	bl	80084fc <ipv6FindMulticastFilterEntry>
                  if(entry == NULL)
 8008648:	4603      	mov	r3, r0
 800864a:	b120      	cbz	r0, 8008656 <ipv6UpdateMulticastFilter+0x10e>
                     ipv6DeriveInterfaceState(entry, group);
 800864c:	4641      	mov	r1, r8
 800864e:	4618      	mov	r0, r3
 8008650:	f7ff fed2 	bl	80083f8 <ipv6DeriveInterfaceState>
 8008654:	e7bd      	b.n	80085d2 <ipv6UpdateMulticastFilter+0x8a>
                     entry = ipv6CreateMulticastFilterEntry(interface,
 8008656:	4649      	mov	r1, r9
 8008658:	4630      	mov	r0, r6
 800865a:	f7ff ff1b 	bl	8008494 <ipv6CreateMulticastFilterEntry>
                  if(entry != NULL)
 800865e:	4603      	mov	r3, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	d1f3      	bne.n	800864c <ipv6UpdateMulticastFilter+0x104>
 8008664:	e7b5      	b.n	80085d2 <ipv6UpdateMulticastFilter+0x8a>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8008666:	2500      	movs	r5, #0
 8008668:	e018      	b.n	800869c <ipv6UpdateMulticastFilter+0x154>
            if(!entry->macFilterConfigured)
 800866a:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 800866e:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
 8008672:	2b00      	cmp	r3, #0
 8008674:	d039      	beq.n	80086ea <ipv6UpdateMulticastFilter+0x1a2>
            (IpFilterMode) entry->srcFilterMode, &entry->srcFilter);
 8008676:	f105 0749 	add.w	r7, r5, #73	@ 0x49
 800867a:	eb06 1747 	add.w	r7, r6, r7, lsl #5
         mldNodeStateChangeEvent(&interface->mldNodeContext, &entry->addr,
 800867e:	f107 030c 	add.w	r3, r7, #12
 8008682:	7a3a      	ldrb	r2, [r7, #8]
 8008684:	4621      	mov	r1, r4
 8008686:	f241 00f4 	movw	r0, #4340	@ 0x10f4
 800868a:	4430      	add	r0, r6
 800868c:	f000 fda8 	bl	80091e0 <mldNodeStateChangeEvent>
         if(entry->srcFilterMode != IP_FILTER_MODE_EXCLUDE &&
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	b113      	cbz	r3, 800869a <ipv6UpdateMulticastFilter+0x152>
            entry->srcFilter.numSources == 0)
 8008694:	68fb      	ldr	r3, [r7, #12]
         if(entry->srcFilterMode != IP_FILTER_MODE_EXCLUDE &&
 8008696:	2b00      	cmp	r3, #0
 8008698:	d033      	beq.n	8008702 <ipv6UpdateMulticastFilter+0x1ba>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800869a:	3501      	adds	r5, #1
 800869c:	2d07      	cmp	r5, #7
 800869e:	d834      	bhi.n	800870a <ipv6UpdateMulticastFilter+0x1c2>
      entry = &interface->ipv6Context.multicastFilter[i];
 80086a0:	016c      	lsls	r4, r5, #5
 80086a2:	f604 1408 	addw	r4, r4, #2312	@ 0x908
 80086a6:	4434      	add	r4, r6
 80086a8:	3408      	adds	r4, #8
      if(!ipv6CompAddr(&entry->addr, &IPV6_UNSPECIFIED_ADDR))
 80086aa:	2210      	movs	r2, #16
 80086ac:	4918      	ldr	r1, [pc, #96]	@ (8008710 <ipv6UpdateMulticastFilter+0x1c8>)
 80086ae:	4620      	mov	r0, r4
 80086b0:	f00c fabe 	bl	8014c30 <memcmp>
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d0f0      	beq.n	800869a <ipv6UpdateMulticastFilter+0x152>
         if(entry->srcFilterMode == IP_FILTER_MODE_EXCLUDE ||
 80086b8:	f105 0349 	add.w	r3, r5, #73	@ 0x49
 80086bc:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80086c0:	689b      	ldr	r3, [r3, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d0d1      	beq.n	800866a <ipv6UpdateMulticastFilter+0x122>
            entry->srcFilter.numSources > 0)
 80086c6:	f105 0349 	add.w	r3, r5, #73	@ 0x49
 80086ca:	eb06 1343 	add.w	r3, r6, r3, lsl #5
 80086ce:	68db      	ldr	r3, [r3, #12]
         if(entry->srcFilterMode == IP_FILTER_MODE_EXCLUDE ||
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d1ca      	bne.n	800866a <ipv6UpdateMulticastFilter+0x122>
            if(entry->macFilterConfigured)
 80086d4:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80086d8:	f8d3 3924 	ldr.w	r3, [r3, #2340]	@ 0x924
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0ca      	beq.n	8008676 <ipv6UpdateMulticastFilter+0x12e>
               ipv6DropMulticastAddr(interface, &entry->addr);
 80086e0:	4621      	mov	r1, r4
 80086e2:	4630      	mov	r0, r6
 80086e4:	f7ff febf 	bl	8008466 <ipv6DropMulticastAddr>
 80086e8:	e7c5      	b.n	8008676 <ipv6UpdateMulticastFilter+0x12e>
               error = ipv6AcceptMulticastAddr(interface, &entry->addr);
 80086ea:	4621      	mov	r1, r4
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7ff fe99 	bl	8008424 <ipv6AcceptMulticastAddr>
               if(!error)
 80086f2:	2800      	cmp	r0, #0
 80086f4:	d1bf      	bne.n	8008676 <ipv6UpdateMulticastFilter+0x12e>
                  entry->macFilterConfigured = TRUE;
 80086f6:	eb06 1345 	add.w	r3, r6, r5, lsl #5
 80086fa:	2201      	movs	r2, #1
 80086fc:	f8c3 2924 	str.w	r2, [r3, #2340]	@ 0x924
 8008700:	e7b9      	b.n	8008676 <ipv6UpdateMulticastFilter+0x12e>
            ipv6DeleteMulticastFilterEntry(entry);
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff ff14 	bl	8008530 <ipv6DeleteMulticastFilterEntry>
 8008708:	e7c7      	b.n	800869a <ipv6UpdateMulticastFilter+0x152>
}
 800870a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870e:	bf00      	nop
 8008710:	08019f20 	.word	0x08019f20
 8008714:	20001ef8 	.word	0x20001ef8

08008718 <ipv6JoinMulticastGroup>:
{
 8008718:	b538      	push	{r3, r4, r5, lr}
   if(ipv6IsMulticastAddr(groupAddr))
 800871a:	780b      	ldrb	r3, [r1, #0]
 800871c:	2bff      	cmp	r3, #255	@ 0xff
 800871e:	d001      	beq.n	8008724 <ipv6JoinMulticastGroup+0xc>
      error = ERROR_INVALID_ADDRESS;
 8008720:	20e4      	movs	r0, #228	@ 0xe4
}
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	4605      	mov	r5, r0
 8008726:	460c      	mov	r4, r1
      entry = ipv6FindMulticastFilterEntry(interface, groupAddr);
 8008728:	f7ff fee8 	bl	80084fc <ipv6FindMulticastFilterEntry>
      if(entry == NULL)
 800872c:	4602      	mov	r2, r0
 800872e:	b140      	cbz	r0, 8008742 <ipv6JoinMulticastGroup+0x2a>
         entry->anySourceRefCount++;
 8008730:	6913      	ldr	r3, [r2, #16]
 8008732:	3301      	adds	r3, #1
 8008734:	6113      	str	r3, [r2, #16]
      ipv6UpdateMulticastFilter(interface, groupAddr);
 8008736:	4621      	mov	r1, r4
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff ff05 	bl	8008548 <ipv6UpdateMulticastFilter>
   error = NO_ERROR;
 800873e:	2000      	movs	r0, #0
 8008740:	e7ef      	b.n	8008722 <ipv6JoinMulticastGroup+0xa>
         entry = ipv6CreateMulticastFilterEntry(interface, groupAddr);
 8008742:	4621      	mov	r1, r4
 8008744:	4628      	mov	r0, r5
 8008746:	f7ff fea5 	bl	8008494 <ipv6CreateMulticastFilterEntry>
      if(entry != NULL)
 800874a:	4602      	mov	r2, r0
 800874c:	2800      	cmp	r0, #0
 800874e:	d1ef      	bne.n	8008730 <ipv6JoinMulticastGroup+0x18>
         error = ERROR_OUT_OF_RESOURCES;
 8008750:	2065      	movs	r0, #101	@ 0x65
 8008752:	e7e6      	b.n	8008722 <ipv6JoinMulticastGroup+0xa>

08008754 <ipv6LeaveMulticastGroup>:
{
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	4604      	mov	r4, r0
 8008758:	460d      	mov	r5, r1
   entry = ipv6FindMulticastFilterEntry(interface, groupAddr);
 800875a:	f7ff fecf 	bl	80084fc <ipv6FindMulticastFilterEntry>
   if(entry != NULL)
 800875e:	b148      	cbz	r0, 8008774 <ipv6LeaveMulticastGroup+0x20>
      if(entry->anySourceRefCount > 0)
 8008760:	6903      	ldr	r3, [r0, #16]
 8008762:	b10b      	cbz	r3, 8008768 <ipv6LeaveMulticastGroup+0x14>
         entry->anySourceRefCount--;
 8008764:	3b01      	subs	r3, #1
 8008766:	6103      	str	r3, [r0, #16]
      ipv6UpdateMulticastFilter(interface, groupAddr);
 8008768:	4629      	mov	r1, r5
 800876a:	4620      	mov	r0, r4
 800876c:	f7ff feec 	bl	8008548 <ipv6UpdateMulticastFilter>
 8008770:	2000      	movs	r0, #0
}
 8008772:	bd38      	pop	{r3, r4, r5, pc}
      error = ERROR_ADDRESS_NOT_FOUND;
 8008774:	f240 202a 	movw	r0, #554	@ 0x22a
 8008778:	e7fb      	b.n	8008772 <ipv6LeaveMulticastGroup+0x1e>

0800877a <ipv6CompareSrcAddrLists>:
   return res;
#else
   //Not implemented
   return TRUE;
#endif
}
 800877a:	2001      	movs	r0, #1
 800877c:	4770      	bx	lr

0800877e <ipv6GetPathMtu>:
 * @param[in] destAddr Destination IPv6 address
 * @return PMTU value
 **/

size_t ipv6GetPathMtu(NetInterface *interface, const Ipv6Addr *destAddr)
{
 800877e:	b510      	push	{r4, lr}
 8008780:	4604      	mov	r4, r0

#if (NDP_SUPPORT == ENABLED)
   NdpDestCacheEntry *entry;

   //Search the Destination Cache for the specified IPv6 address
   entry = ndpFindDestCacheEntry(interface, destAddr);
 8008782:	f002 fee9 	bl	800b558 <ndpFindDestCacheEntry>

   //Check whether a matching entry has been found in the Destination Cache
   if(entry != NULL)
 8008786:	b108      	cbz	r0, 800878c <ipv6GetPathMtu+0xe>
   {
      //Use the existing PMTU estimate
      pathMtu = entry->pathMtu;
 8008788:	6a00      	ldr	r0, [r0, #32]
   pathMtu = interface->ipv6Context.linkMtu;
#endif

   //Return the PMTU value
   return pathMtu;
}
 800878a:	bd10      	pop	{r4, pc}
      pathMtu = interface->ipv6Context.linkMtu;
 800878c:	f8d4 07a4 	ldr.w	r0, [r4, #1956]	@ 0x7a4
   return pathMtu;
 8008790:	e7fb      	b.n	800878a <ipv6GetPathMtu+0xc>

08008792 <ipv6UpdatePathMtu>:
 * @param[in] tentativePathMtu Tentative PMTU value
 **/

void ipv6UpdatePathMtu(NetInterface *interface,
   const Ipv6Addr *destAddr, size_t tentativePathMtu)
{
 8008792:	b510      	push	{r4, lr}
 8008794:	4614      	mov	r4, r2
#if (NDP_SUPPORT == ENABLED)
   NdpDestCacheEntry *entry;

   //The destination address from the original packet is used to determine
   //which path the message applies to
   entry = ndpFindDestCacheEntry(interface, destAddr);
 8008796:	f002 fedf 	bl	800b558 <ndpFindDestCacheEntry>

   //Check whether a matching entry has been found in the Destination Cache
   if(entry != NULL)
 800879a:	b118      	cbz	r0, 80087a4 <ipv6UpdatePathMtu+0x12>
   {
      //Compare the tentative PMTU to the existing PMTU
      if(tentativePathMtu < entry->pathMtu)
 800879c:	6a02      	ldr	r2, [r0, #32]
 800879e:	42a2      	cmp	r2, r4
 80087a0:	d900      	bls.n	80087a4 <ipv6UpdatePathMtu+0x12>
      {
         //If the tentative PMTU is less than the existing PMTU estimate,
         //the tentative PMTU replaces the existing PMTU
         entry->pathMtu = tentativePathMtu;
 80087a2:	6204      	str	r4, [r0, #32]
      }
   }
#endif
}
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <lan8742EnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void lan8742EnableIrq(NetInterface *interface)
{
 80087a6:	b508      	push	{r3, lr}
   //Enable PHY transceiver interrupts
   if(interface->extIntDriver != NULL)
 80087a8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80087aa:	b10b      	cbz	r3, 80087b0 <lan8742EnableIrq+0xa>
   {
      interface->extIntDriver->enableIrq();
 80087ac:	685b      	ldr	r3, [r3, #4]
 80087ae:	4798      	blx	r3
   }
}
 80087b0:	bd08      	pop	{r3, pc}

080087b2 <lan8742DisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void lan8742DisableIrq(NetInterface *interface)
{
 80087b2:	b508      	push	{r3, lr}
   //Disable PHY transceiver interrupts
   if(interface->extIntDriver != NULL)
 80087b4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80087b6:	b10b      	cbz	r3, 80087bc <lan8742DisableIrq+0xa>
   {
      interface->extIntDriver->disableIrq();
 80087b8:	689b      	ldr	r3, [r3, #8]
 80087ba:	4798      	blx	r3
   }
}
 80087bc:	bd08      	pop	{r3, pc}

080087be <lan8742InitHook>:
}
 80087be:	4770      	bx	lr

080087c0 <lan8742WritePhyReg>:
 * @param[in] data Register value
 **/

void lan8742WritePhyReg(NetInterface *interface, uint8_t address,
   uint16_t data)
{
 80087c0:	b510      	push	{r4, lr}
 80087c2:	4613      	mov	r3, r2
   //Write the specified PHY register
   if(interface->smiDriver != NULL)
 80087c4:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80087c8:	b132      	cbz	r2, 80087d8 <lan8742WritePhyReg+0x18>
   {
      interface->smiDriver->writePhyReg(SMI_OPCODE_WRITE,
 80087ca:	6854      	ldr	r4, [r2, #4]
 80087cc:	460a      	mov	r2, r1
 80087ce:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 80087d2:	2001      	movs	r0, #1
 80087d4:	47a0      	blx	r4
   else
   {
      interface->nicDriver->writePhyReg(SMI_OPCODE_WRITE,
         interface->phyAddr, address, data);
   }
}
 80087d6:	bd10      	pop	{r4, pc}
      interface->nicDriver->writePhyReg(SMI_OPCODE_WRITE,
 80087d8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 80087da:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 80087dc:	460a      	mov	r2, r1
 80087de:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 80087e2:	2001      	movs	r0, #1
 80087e4:	47a0      	blx	r4
}
 80087e6:	e7f6      	b.n	80087d6 <lan8742WritePhyReg+0x16>

080087e8 <lan8742ReadPhyReg>:
 * @param[in] address PHY register address
 * @return Register value
 **/

uint16_t lan8742ReadPhyReg(NetInterface *interface, uint8_t address)
{
 80087e8:	b508      	push	{r3, lr}
 80087ea:	460a      	mov	r2, r1
   uint16_t data;

   //Read the specified PHY register
   if(interface->smiDriver != NULL)
 80087ec:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 80087f0:	b12b      	cbz	r3, 80087fe <lan8742ReadPhyReg+0x16>
   {
      data = interface->smiDriver->readPhyReg(SMI_OPCODE_READ,
 80087f2:	689b      	ldr	r3, [r3, #8]
 80087f4:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 80087f8:	2002      	movs	r0, #2
 80087fa:	4798      	blx	r3
         interface->phyAddr, address);
   }

   //Return the value of the PHY register
   return data;
}
 80087fc:	bd08      	pop	{r3, pc}
      data = interface->nicDriver->readPhyReg(SMI_OPCODE_READ,
 80087fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	f890 1078 	ldrb.w	r1, [r0, #120]	@ 0x78
 8008806:	2002      	movs	r0, #2
 8008808:	4798      	blx	r3
 800880a:	e7f7      	b.n	80087fc <lan8742ReadPhyReg+0x14>

0800880c <lan8742Tick>:
   if(interface->extIntDriver == NULL)
 800880c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800880e:	b103      	cbz	r3, 8008812 <lan8742Tick+0x6>
 8008810:	4770      	bx	lr
{
 8008812:	b510      	push	{r4, lr}
 8008814:	4604      	mov	r4, r0
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 8008816:	2101      	movs	r1, #1
 8008818:	f7ff ffe6 	bl	80087e8 <lan8742ReadPhyReg>
      if(linkState && !interface->linkState)
 800881c:	f010 0f04 	tst.w	r0, #4
 8008820:	d008      	beq.n	8008834 <lan8742Tick+0x28>
 8008822:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008824:	b103      	cbz	r3, 8008828 <lan8742Tick+0x1c>
}
 8008826:	bd10      	pop	{r4, pc}
         interface->phyEvent = TRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	67e3      	str	r3, [r4, #124]	@ 0x7c
         osSetEvent(&netEvent);
 800882c:	4806      	ldr	r0, [pc, #24]	@ (8008848 <lan8742Tick+0x3c>)
 800882e:	f7f7 ffa5 	bl	800077c <osSetEvent>
 8008832:	e7f8      	b.n	8008826 <lan8742Tick+0x1a>
      else if(!linkState && interface->linkState)
 8008834:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8008836:	2b00      	cmp	r3, #0
 8008838:	d0f5      	beq.n	8008826 <lan8742Tick+0x1a>
         interface->phyEvent = TRUE;
 800883a:	2301      	movs	r3, #1
 800883c:	67e3      	str	r3, [r4, #124]	@ 0x7c
         osSetEvent(&netEvent);
 800883e:	4802      	ldr	r0, [pc, #8]	@ (8008848 <lan8742Tick+0x3c>)
 8008840:	f7f7 ff9c 	bl	800077c <osSetEvent>
}
 8008844:	e7ef      	b.n	8008826 <lan8742Tick+0x1a>
 8008846:	bf00      	nop
 8008848:	20000b54 	.word	0x20000b54

0800884c <lan8742EventHandler>:
{
 800884c:	b510      	push	{r4, lr}
 800884e:	4604      	mov	r4, r0
   value = lan8742ReadPhyReg(interface, LAN8742_ISR);
 8008850:	211d      	movs	r1, #29
 8008852:	f7ff ffc9 	bl	80087e8 <lan8742ReadPhyReg>
   if((value & (LAN8742_IMR_AN_COMPLETE | LAN8742_IMR_LINK_DOWN)) != 0)
 8008856:	f010 0f50 	tst.w	r0, #80	@ 0x50
 800885a:	d100      	bne.n	800885e <lan8742EventHandler+0x12>
}
 800885c:	bd10      	pop	{r4, pc}
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 800885e:	2101      	movs	r1, #1
 8008860:	4620      	mov	r0, r4
 8008862:	f7ff ffc1 	bl	80087e8 <lan8742ReadPhyReg>
      value = lan8742ReadPhyReg(interface, LAN8742_BMSR);
 8008866:	2101      	movs	r1, #1
 8008868:	4620      	mov	r0, r4
 800886a:	f7ff ffbd 	bl	80087e8 <lan8742ReadPhyReg>
      if((value & LAN8742_BMSR_LINK_STATUS) != 0)
 800886e:	f010 0f04 	tst.w	r0, #4
 8008872:	d105      	bne.n	8008880 <lan8742EventHandler+0x34>
         interface->linkState = FALSE;
 8008874:	2300      	movs	r3, #0
 8008876:	6623      	str	r3, [r4, #96]	@ 0x60
      nicNotifyLinkChange(interface);
 8008878:	4620      	mov	r0, r4
 800887a:	f004 f9e7 	bl	800cc4c <nicNotifyLinkChange>
}
 800887e:	e7ed      	b.n	800885c <lan8742EventHandler+0x10>
         value = lan8742ReadPhyReg(interface, LAN8742_PSCSR);
 8008880:	211f      	movs	r1, #31
 8008882:	4620      	mov	r0, r4
 8008884:	f7ff ffb0 	bl	80087e8 <lan8742ReadPhyReg>
         switch(value & LAN8742_PSCSR_HCDSPEED)
 8008888:	f000 001c 	and.w	r0, r0, #28
 800888c:	3804      	subs	r0, #4
 800888e:	2814      	cmp	r0, #20
 8008890:	d82a      	bhi.n	80088e8 <lan8742EventHandler+0x9c>
 8008892:	e8df f000 	tbb	[pc, r0]
 8008896:	290b      	.short	0x290b
 8008898:	291d2929 	.word	0x291d2929
 800889c:	29292929 	.word	0x29292929
 80088a0:	29292929 	.word	0x29292929
 80088a4:	29172929 	.word	0x29172929
 80088a8:	2929      	.short	0x2929
 80088aa:	23          	.byte	0x23
 80088ab:	00          	.byte	0x00
            interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 80088ac:	4b15      	ldr	r3, [pc, #84]	@ (8008904 <lan8742EventHandler+0xb8>)
 80088ae:	6663      	str	r3, [r4, #100]	@ 0x64
            interface->duplexMode = NIC_HALF_DUPLEX_MODE;
 80088b0:	2301      	movs	r3, #1
 80088b2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
         interface->linkState = TRUE;
 80088b6:	2301      	movs	r3, #1
 80088b8:	6623      	str	r3, [r4, #96]	@ 0x60
         interface->nicDriver->updateMacConfig(interface);
 80088ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088be:	4620      	mov	r0, r4
 80088c0:	4798      	blx	r3
 80088c2:	e7d9      	b.n	8008878 <lan8742EventHandler+0x2c>
            interface->linkSpeed = NIC_LINK_SPEED_10MBPS;
 80088c4:	4b0f      	ldr	r3, [pc, #60]	@ (8008904 <lan8742EventHandler+0xb8>)
 80088c6:	6663      	str	r3, [r4, #100]	@ 0x64
            interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 80088c8:	2302      	movs	r3, #2
 80088ca:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
            break;
 80088ce:	e7f2      	b.n	80088b6 <lan8742EventHandler+0x6a>
            interface->linkSpeed = NIC_LINK_SPEED_100MBPS;
 80088d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008908 <lan8742EventHandler+0xbc>)
 80088d2:	6663      	str	r3, [r4, #100]	@ 0x64
            interface->duplexMode = NIC_HALF_DUPLEX_MODE;
 80088d4:	2301      	movs	r3, #1
 80088d6:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
            break;
 80088da:	e7ec      	b.n	80088b6 <lan8742EventHandler+0x6a>
            interface->linkSpeed = NIC_LINK_SPEED_100MBPS;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <lan8742EventHandler+0xbc>)
 80088de:	6663      	str	r3, [r4, #100]	@ 0x64
            interface->duplexMode = NIC_FULL_DUPLEX_MODE;
 80088e0:	2302      	movs	r3, #2
 80088e2:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
            break;
 80088e6:	e7e6      	b.n	80088b6 <lan8742EventHandler+0x6a>
            TRACE_WARNING("Invalid operation mode!\r\n");
 80088e8:	f7f7 ff22 	bl	8000730 <osSuspendAllTasks>
 80088ec:	4b07      	ldr	r3, [pc, #28]	@ (800890c <lan8742EventHandler+0xc0>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	2219      	movs	r2, #25
 80088f4:	2101      	movs	r1, #1
 80088f6:	4806      	ldr	r0, [pc, #24]	@ (8008910 <lan8742EventHandler+0xc4>)
 80088f8:	f00c f8d0 	bl	8014a9c <fwrite>
 80088fc:	f7f7 ff21 	bl	8000742 <osResumeAllTasks>
            break;
 8008900:	e7d9      	b.n	80088b6 <lan8742EventHandler+0x6a>
 8008902:	bf00      	nop
 8008904:	00989680 	.word	0x00989680
 8008908:	05f5e100 	.word	0x05f5e100
 800890c:	20000440 	.word	0x20000440
 8008910:	0801a488 	.word	0x0801a488

08008914 <lan8742Init>:
{
 8008914:	b510      	push	{r4, lr}
 8008916:	4604      	mov	r4, r0
   TRACE_INFO("Initializing LAN8742...\r\n");
 8008918:	f7f7 ff0a 	bl	8000730 <osSuspendAllTasks>
 800891c:	4b20      	ldr	r3, [pc, #128]	@ (80089a0 <lan8742Init+0x8c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2219      	movs	r2, #25
 8008924:	2101      	movs	r1, #1
 8008926:	481f      	ldr	r0, [pc, #124]	@ (80089a4 <lan8742Init+0x90>)
 8008928:	f00c f8b8 	bl	8014a9c <fwrite>
 800892c:	f7f7 ff09 	bl	8000742 <osResumeAllTasks>
   if(interface->phyAddr >= 32)
 8008930:	f894 3078 	ldrb.w	r3, [r4, #120]	@ 0x78
 8008934:	2b1f      	cmp	r3, #31
 8008936:	d902      	bls.n	800893e <lan8742Init+0x2a>
      interface->phyAddr = LAN8742_PHY_ADDR;
 8008938:	2300      	movs	r3, #0
 800893a:	f884 3078 	strb.w	r3, [r4, #120]	@ 0x78
   if(interface->smiDriver != NULL)
 800893e:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008942:	b10b      	cbz	r3, 8008948 <lan8742Init+0x34>
      interface->smiDriver->init();
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4798      	blx	r3
   if(interface->extIntDriver != NULL)
 8008948:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800894a:	b10b      	cbz	r3, 8008950 <lan8742Init+0x3c>
      interface->extIntDriver->init();
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4798      	blx	r3
   lan8742WritePhyReg(interface, LAN8742_BMCR, LAN8742_BMCR_RESET);
 8008950:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8008954:	2100      	movs	r1, #0
 8008956:	4620      	mov	r0, r4
 8008958:	f7ff ff32 	bl	80087c0 <lan8742WritePhyReg>
   while(lan8742ReadPhyReg(interface, LAN8742_BMCR) & LAN8742_BMCR_RESET)
 800895c:	2100      	movs	r1, #0
 800895e:	4620      	mov	r0, r4
 8008960:	f7ff ff42 	bl	80087e8 <lan8742ReadPhyReg>
 8008964:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8008968:	d1f8      	bne.n	800895c <lan8742Init+0x48>
   lan8742WritePhyReg(interface, LAN8742_ANAR, LAN8742_ANAR_100BTX_FD |
 800896a:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800896e:	2104      	movs	r1, #4
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff ff25 	bl	80087c0 <lan8742WritePhyReg>
   lan8742WritePhyReg(interface, LAN8742_BMCR, LAN8742_BMCR_AN_EN);
 8008976:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800897a:	2100      	movs	r1, #0
 800897c:	4620      	mov	r0, r4
 800897e:	f7ff ff1f 	bl	80087c0 <lan8742WritePhyReg>
   lan8742WritePhyReg(interface, LAN8742_IMR, LAN8742_IMR_AN_COMPLETE |
 8008982:	2250      	movs	r2, #80	@ 0x50
 8008984:	211e      	movs	r1, #30
 8008986:	4620      	mov	r0, r4
 8008988:	f7ff ff1a 	bl	80087c0 <lan8742WritePhyReg>
   lan8742InitHook(interface);
 800898c:	4620      	mov	r0, r4
 800898e:	f7ff ff16 	bl	80087be <lan8742InitHook>
   interface->phyEvent = TRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	67e3      	str	r3, [r4, #124]	@ 0x7c
   osSetEvent(&netEvent);
 8008996:	4804      	ldr	r0, [pc, #16]	@ (80089a8 <lan8742Init+0x94>)
 8008998:	f7f7 fef0 	bl	800077c <osSetEvent>
}
 800899c:	2000      	movs	r0, #0
 800899e:	bd10      	pop	{r4, pc}
 80089a0:	20000440 	.word	0x20000440
 80089a4:	0801a4a4 	.word	0x0801a4a4
 80089a8:	20000b54 	.word	0x20000b54

080089ac <llmnrResponderInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t llmnrResponderInit(NetInterface *interface)
{
 80089ac:	b510      	push	{r4, lr}
 80089ae:	4604      	mov	r4, r0
   error_t error;

#if (IPV4_SUPPORT == ENABLED)
   //Join the LLMNR IPv4 multicast group
   error = ipv4JoinMulticastGroup(interface, LLMNR_IPV4_MULTICAST_ADDR);
 80089b0:	490b      	ldr	r1, [pc, #44]	@ (80089e0 <llmnrResponderInit+0x34>)
 80089b2:	f7fd ff73 	bl	800689c <ipv4JoinMulticastGroup>
   //Any error to report?
   if(error)
 80089b6:	4603      	mov	r3, r0
 80089b8:	b108      	cbz	r0, 80089be <llmnrResponderInit+0x12>
   if(error)
      return error;

   //Successful initialization
   return NO_ERROR;
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	bd10      	pop	{r4, pc}
   error = ipv6JoinMulticastGroup(interface, &LLMNR_IPV6_MULTICAST_ADDR);
 80089be:	4909      	ldr	r1, [pc, #36]	@ (80089e4 <llmnrResponderInit+0x38>)
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff fea9 	bl	8008718 <ipv6JoinMulticastGroup>
   if(error)
 80089c6:	4603      	mov	r3, r0
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d1f6      	bne.n	80089ba <llmnrResponderInit+0xe>
   error = udpAttachRxCallback(interface, LLMNR_PORT, llmnrProcessQuery,
 80089cc:	2300      	movs	r3, #0
 80089ce:	4a06      	ldr	r2, [pc, #24]	@ (80089e8 <llmnrResponderInit+0x3c>)
 80089d0:	f241 41eb 	movw	r1, #5355	@ 0x14eb
 80089d4:	4620      	mov	r0, r4
 80089d6:	f008 f92f 	bl	8010c38 <udpAttachRxCallback>
 80089da:	4603      	mov	r3, r0
   if(error)
 80089dc:	e7ed      	b.n	80089ba <llmnrResponderInit+0xe>
 80089de:	bf00      	nop
 80089e0:	fc0000e0 	.word	0xfc0000e0
 80089e4:	08019f94 	.word	0x08019f94
 80089e8:	08008d31 	.word	0x08008d31

080089ec <llmnrFormatIpv4AddrRecord>:
 * @return Error code
 **/

error_t llmnrFormatIpv4AddrRecord(NetInterface *interface,
   LlmnrHeader *message, size_t *length, Ipv4Addr ipv4Addr)
{
 80089ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f0:	460c      	mov	r4, r1
 80089f2:	4617      	mov	r7, r2
 80089f4:	4698      	mov	r8, r3
   size_t n;
   size_t offset;
   DnsResourceRecord *record;

   //Set the position to the end of the buffer
   offset = *length;
 80089f6:	6815      	ldr	r5, [r2, #0]

   //The first pass calculates the length of the DNS encoded host name
   n = dnsEncodeName(interface->hostname, NULL);
 80089f8:	f100 0619 	add.w	r6, r0, #25
 80089fc:	2100      	movs	r1, #0
 80089fe:	4630      	mov	r0, r6
 8008a00:	f7fa f8dc 	bl	8002bbc <dnsEncodeName>

   //Check the length of the resulting LLMNR message
   if((offset + n) > LLMNR_MESSAGE_MAX_SIZE)
 8008a04:	4428      	add	r0, r5
 8008a06:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008a0a:	d820      	bhi.n	8008a4e <llmnrFormatIpv4AddrRecord+0x62>
      return ERROR_MESSAGE_TOO_LONG;

   //The second pass encodes the host name using the DNS name notation
   offset += dnsEncodeName(interface->hostname, (uint8_t *) message + offset);
 8008a0c:	1961      	adds	r1, r4, r5
 8008a0e:	4630      	mov	r0, r6
 8008a10:	f7fa f8d4 	bl	8002bbc <dnsEncodeName>
 8008a14:	4405      	add	r5, r0

   //Consider the length of the resource record itself
   n = sizeof(DnsResourceRecord) + sizeof(Ipv4Addr);

   //Check the length of the resulting LLMNR message
   if((offset + n) > LLMNR_MESSAGE_MAX_SIZE)
 8008a16:	f105 020e 	add.w	r2, r5, #14
 8008a1a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8008a1e:	d819      	bhi.n	8008a54 <llmnrFormatIpv4AddrRecord+0x68>
      return ERROR_MESSAGE_TOO_LONG;

   //Point to the corresponding resource record
   record = DNS_GET_RESOURCE_RECORD(message, offset);
 8008a20:	1961      	adds	r1, r4, r5

   //Fill in resource record
   record->rtype = HTONS(DNS_RR_TYPE_A);
 8008a22:	2000      	movs	r0, #0
 8008a24:	5560      	strb	r0, [r4, r5]
 8008a26:	2301      	movs	r3, #1
 8008a28:	704b      	strb	r3, [r1, #1]
   record->rclass = HTONS(DNS_RR_CLASS_IN);
 8008a2a:	7088      	strb	r0, [r1, #2]
 8008a2c:	70cb      	strb	r3, [r1, #3]
   record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 8008a2e:	7108      	strb	r0, [r1, #4]
 8008a30:	7148      	strb	r0, [r1, #5]
 8008a32:	7188      	strb	r0, [r1, #6]
 8008a34:	231e      	movs	r3, #30
 8008a36:	71cb      	strb	r3, [r1, #7]
   record->rdlength = HTONS(sizeof(Ipv4Addr));
 8008a38:	7208      	strb	r0, [r1, #8]
 8008a3a:	2304      	movs	r3, #4
 8008a3c:	724b      	strb	r3, [r1, #9]

   //Copy IPv4 address
   ipv4CopyAddr(record->rdata, &ipv4Addr);
 8008a3e:	f8c1 800a 	str.w	r8, [r1, #10]

   //Number of resource records in the answer section
   message->ancount++;
 8008a42:	88e3      	ldrh	r3, [r4, #6]
 8008a44:	3301      	adds	r3, #1
 8008a46:	80e3      	strh	r3, [r4, #6]
   //Update the length of the LLMNR response message
   *length = offset + n;
 8008a48:	603a      	str	r2, [r7, #0]
#endif

   //Successful processing
   return NO_ERROR;
}
 8008a4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_MESSAGE_TOO_LONG;
 8008a4e:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8008a52:	e7fa      	b.n	8008a4a <llmnrFormatIpv4AddrRecord+0x5e>
      return ERROR_MESSAGE_TOO_LONG;
 8008a54:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8008a58:	e7f7      	b.n	8008a4a <llmnrFormatIpv4AddrRecord+0x5e>

08008a5a <llmnrFormatIpv6AddrRecord>:
 * @return Error code
 **/

error_t llmnrFormatIpv6AddrRecord(NetInterface *interface,
   LlmnrHeader *message, size_t *length, const Ipv6Addr *ipv6Addr)
{
 8008a5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a5e:	460d      	mov	r5, r1
 8008a60:	4690      	mov	r8, r2
 8008a62:	461f      	mov	r7, r3
   size_t n;
   size_t offset;
   DnsResourceRecord *record;

   //Set the position to the end of the buffer
   offset = *length;
 8008a64:	6814      	ldr	r4, [r2, #0]

   //The first pass calculates the length of the DNS encoded host name
   n = dnsEncodeName(interface->hostname, NULL);
 8008a66:	f100 0619 	add.w	r6, r0, #25
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	4630      	mov	r0, r6
 8008a6e:	f7fa f8a5 	bl	8002bbc <dnsEncodeName>

   //Check the length of the resulting LLMNR message
   if((offset + n) > LLMNR_MESSAGE_MAX_SIZE)
 8008a72:	4420      	add	r0, r4
 8008a74:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8008a78:	d836      	bhi.n	8008ae8 <llmnrFormatIpv6AddrRecord+0x8e>
      return ERROR_MESSAGE_TOO_LONG;

   //The second pass encodes the host name using the DNS name notation
   offset += dnsEncodeName(interface->hostname, (uint8_t *) message + offset);
 8008a7a:	1929      	adds	r1, r5, r4
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f7fa f89d 	bl	8002bbc <dnsEncodeName>
 8008a82:	4404      	add	r4, r0

   //Consider the length of the resource record itself
   n = sizeof(DnsResourceRecord) + sizeof(Ipv6Addr);

   //Check the length of the resulting LLMNR message
   if((offset + n) > LLMNR_MESSAGE_MAX_SIZE)
 8008a84:	f104 031a 	add.w	r3, r4, #26
 8008a88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008a8c:	d82f      	bhi.n	8008aee <llmnrFormatIpv6AddrRecord+0x94>
      return ERROR_MESSAGE_TOO_LONG;

   //Point to the corresponding resource record
   record = DNS_GET_RESOURCE_RECORD(message, offset);
 8008a8e:	eb05 0c04 	add.w	ip, r5, r4

   //Fill in resource record
   record->rtype = HTONS(DNS_RR_TYPE_AAAA);
 8008a92:	2000      	movs	r0, #0
 8008a94:	5528      	strb	r0, [r5, r4]
 8008a96:	221c      	movs	r2, #28
 8008a98:	f88c 2001 	strb.w	r2, [ip, #1]
   record->rclass = HTONS(DNS_RR_CLASS_IN);
 8008a9c:	f88c 0002 	strb.w	r0, [ip, #2]
 8008aa0:	2201      	movs	r2, #1
 8008aa2:	f88c 2003 	strb.w	r2, [ip, #3]
   record->ttl = HTONL(LLMNR_DEFAULT_RESOURCE_RECORD_TTL);
 8008aa6:	f88c 0004 	strb.w	r0, [ip, #4]
 8008aaa:	f88c 0005 	strb.w	r0, [ip, #5]
 8008aae:	f88c 0006 	strb.w	r0, [ip, #6]
 8008ab2:	221e      	movs	r2, #30
 8008ab4:	f88c 2007 	strb.w	r2, [ip, #7]
   record->rdlength = HTONS(sizeof(Ipv6Addr));
 8008ab8:	f88c 0008 	strb.w	r0, [ip, #8]
 8008abc:	2210      	movs	r2, #16
 8008abe:	f88c 2009 	strb.w	r2, [ip, #9]

   //Copy IPv6 address
   ipv6CopyAddr(record->rdata, ipv6Addr);
 8008ac2:	683e      	ldr	r6, [r7, #0]
 8008ac4:	687c      	ldr	r4, [r7, #4]
 8008ac6:	68b9      	ldr	r1, [r7, #8]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	f8cc 600a 	str.w	r6, [ip, #10]
 8008ace:	f8cc 400e 	str.w	r4, [ip, #14]
 8008ad2:	f8cc 1012 	str.w	r1, [ip, #18]
 8008ad6:	f8cc 2016 	str.w	r2, [ip, #22]

   //Number of resource records in the answer section
   message->ancount++;
 8008ada:	88ea      	ldrh	r2, [r5, #6]
 8008adc:	3201      	adds	r2, #1
 8008ade:	80ea      	strh	r2, [r5, #6]
   //Update the length of the LLMNR response message
   *length = offset + n;
 8008ae0:	f8c8 3000 	str.w	r3, [r8]
#endif

   //Successful processing
   return NO_ERROR;
}
 8008ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return ERROR_MESSAGE_TOO_LONG;
 8008ae8:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8008aec:	e7fa      	b.n	8008ae4 <llmnrFormatIpv6AddrRecord+0x8a>
      return ERROR_MESSAGE_TOO_LONG;
 8008aee:	f44f 7083 	mov.w	r0, #262	@ 0x106
 8008af2:	e7f7      	b.n	8008ae4 <llmnrFormatIpv6AddrRecord+0x8a>

08008af4 <llmnrSendResponse>:
{
 8008af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af8:	b091      	sub	sp, #68	@ 0x44
 8008afa:	4606      	mov	r6, r0
 8008afc:	460f      	mov	r7, r1
 8008afe:	9204      	str	r2, [sp, #16]
 8008b00:	461d      	mov	r5, r3
 8008b02:	f8bd 8068 	ldrh.w	r8, [sp, #104]	@ 0x68
   buffer = udpAllocBuffer(LLMNR_MESSAGE_MAX_SIZE, &offset);
 8008b06:	a90e      	add	r1, sp, #56	@ 0x38
 8008b08:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8008b0c:	f007 ff62 	bl	80109d4 <udpAllocBuffer>
   if(buffer == NULL)
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f000 8108 	beq.w	8008d26 <llmnrSendResponse+0x232>
 8008b16:	4683      	mov	fp, r0
   message = netBufferAt(buffer, offset, 0);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008b1c:	f003 fb4c 	bl	800c1b8 <netBufferAt>
 8008b20:	4604      	mov	r4, r0
   message->id = id;
 8008b22:	8005      	strh	r5, [r0, #0]
   message->qr = 1;
 8008b24:	7883      	ldrb	r3, [r0, #2]
 8008b26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008b2a:	7083      	strb	r3, [r0, #2]
   message->opcode = DNS_OPCODE_QUERY;
 8008b2c:	b2db      	uxtb	r3, r3
 8008b2e:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8008b32:	7083      	strb	r3, [r0, #2]
   message->c = 0;
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	f023 0304 	bic.w	r3, r3, #4
 8008b3a:	7083      	strb	r3, [r0, #2]
   message->tc = 0;
 8008b3c:	b2db      	uxtb	r3, r3
 8008b3e:	f023 0302 	bic.w	r3, r3, #2
 8008b42:	7083      	strb	r3, [r0, #2]
   message->t = 0;
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	f023 0301 	bic.w	r3, r3, #1
 8008b4a:	7083      	strb	r3, [r0, #2]
   message->z = 0;
 8008b4c:	78c3      	ldrb	r3, [r0, #3]
 8008b4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008b52:	70c3      	strb	r3, [r0, #3]
   message->rcode = DNS_RCODE_NOERROR;
 8008b54:	b2db      	uxtb	r3, r3
 8008b56:	f023 030f 	bic.w	r3, r3, #15
 8008b5a:	70c3      	strb	r3, [r0, #3]
   message->qdcount = HTONS(1);
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	7103      	strb	r3, [r0, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	7142      	strb	r2, [r0, #5]
   message->ancount = 0;
 8008b64:	7183      	strb	r3, [r0, #6]
 8008b66:	71c3      	strb	r3, [r0, #7]
   message->nscount = 0;
 8008b68:	7203      	strb	r3, [r0, #8]
 8008b6a:	7243      	strb	r3, [r0, #9]
   message->arcount = 0;
 8008b6c:	7283      	strb	r3, [r0, #10]
 8008b6e:	72c3      	strb	r3, [r0, #11]
   length = sizeof(DnsHeader);
 8008b70:	230c      	movs	r3, #12
 8008b72:	930f      	str	r3, [sp, #60]	@ 0x3c
   length += dnsEncodeName(interface->hostname,
 8008b74:	18c1      	adds	r1, r0, r3
 8008b76:	f106 0019 	add.w	r0, r6, #25
 8008b7a:	f7fa f81f 	bl	8002bbc <dnsEncodeName>
 8008b7e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b80:	18c5      	adds	r5, r0, r3
 8008b82:	950f      	str	r5, [sp, #60]	@ 0x3c
   question = DNS_GET_QUESTION(message, length);
 8008b84:	eb04 0905 	add.w	r9, r4, r5
   question->qtype = htons(qtype);
 8008b88:	4640      	mov	r0, r8
 8008b8a:	f7f7 fd47 	bl	800061c <swapInt16>
 8008b8e:	5360      	strh	r0, [r4, r5]
   question->qclass = htons(qclass);
 8008b90:	f8bd 006c 	ldrh.w	r0, [sp, #108]	@ 0x6c
 8008b94:	f7f7 fd42 	bl	800061c <swapInt16>
 8008b98:	f8a9 0002 	strh.w	r0, [r9, #2]
   length += sizeof(DnsQuestion);
 8008b9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	930f      	str	r3, [sp, #60]	@ 0x3c
   linkScope = ipIsLinkLocalAddr(destIpAddr);
 8008ba2:	4638      	mov	r0, r7
 8008ba4:	f7fc fbd0 	bl	8005348 <ipIsLinkLocalAddr>
 8008ba8:	4605      	mov	r5, r0
   if(qtype == DNS_RR_TYPE_A || qtype == DNS_RR_TYPE_ANY)
 8008baa:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8008bae:	bf14      	ite	ne
 8008bb0:	f04f 0900 	movne.w	r9, #0
 8008bb4:	f04f 0901 	moveq.w	r9, #1
 8008bb8:	f1b8 0f01 	cmp.w	r8, #1
 8008bbc:	bf14      	ite	ne
 8008bbe:	464b      	movne	r3, r9
 8008bc0:	f049 0301 	orreq.w	r3, r9, #1
 8008bc4:	b393      	cbz	r3, 8008c2c <llmnrSendResponse+0x138>
      for(i = 0; i < 2; i++, linkScope = !linkScope)
 8008bc6:	f04f 0a00 	mov.w	sl, #0
 8008bca:	f8cd 9014 	str.w	r9, [sp, #20]
 8008bce:	46a1      	mov	r9, r4
 8008bd0:	e00f      	b.n	8008bf2 <llmnrSendResponse+0xfe>
            if(entry->state == IPV4_ADDR_STATE_VALID)
 8008bd2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008bd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008bda:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	d00c      	beq.n	8008bfc <llmnrSendResponse+0x108>
         for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8008be2:	3401      	adds	r4, #1
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	d0f4      	beq.n	8008bd2 <llmnrSendResponse+0xde>
      for(i = 0; i < 2; i++, linkScope = !linkScope)
 8008be8:	f10a 0a01 	add.w	sl, sl, #1
 8008bec:	fab5 f585 	clz	r5, r5
 8008bf0:	096d      	lsrs	r5, r5, #5
 8008bf2:	f1ba 0f01 	cmp.w	sl, #1
 8008bf6:	d816      	bhi.n	8008c26 <llmnrSendResponse+0x132>
         for(j = 0; j < IPV4_ADDR_LIST_SIZE; j++)
 8008bf8:	2400      	movs	r4, #0
 8008bfa:	e7f3      	b.n	8008be4 <llmnrSendResponse+0xf0>
               if(ipv4IsLinkLocalAddr(entry->addr) == linkScope)
 8008bfc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8008c00:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c04:	f8d3 31a0 	ldr.w	r3, [r3, #416]	@ 0x1a0
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	f64f 61a9 	movw	r1, #65193	@ 0xfea9
 8008c0e:	428a      	cmp	r2, r1
 8008c10:	bf14      	ite	ne
 8008c12:	2200      	movne	r2, #0
 8008c14:	2201      	moveq	r2, #1
 8008c16:	42aa      	cmp	r2, r5
 8008c18:	d1e3      	bne.n	8008be2 <llmnrSendResponse+0xee>
                  llmnrFormatIpv4AddrRecord(interface, message, &length,
 8008c1a:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008c1c:	4649      	mov	r1, r9
 8008c1e:	4630      	mov	r0, r6
 8008c20:	f7ff fee4 	bl	80089ec <llmnrFormatIpv4AddrRecord>
 8008c24:	e7dd      	b.n	8008be2 <llmnrSendResponse+0xee>
 8008c26:	464c      	mov	r4, r9
 8008c28:	f8dd 9014 	ldr.w	r9, [sp, #20]
   if(qtype == DNS_RR_TYPE_AAAA || qtype == DNS_RR_TYPE_ANY)
 8008c2c:	f1b8 0f1c 	cmp.w	r8, #28
 8008c30:	bf14      	ite	ne
 8008c32:	464b      	movne	r3, r9
 8008c34:	f049 0301 	orreq.w	r3, r9, #1
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d149      	bne.n	8008cd0 <llmnrSendResponse+0x1dc>
   if(message->ancount > 0)
 8008c3c:	88e5      	ldrh	r5, [r4, #6]
 8008c3e:	2d00      	cmp	r5, #0
 8008c40:	d149      	bne.n	8008cd6 <llmnrSendResponse+0x1e2>
   netBufferFree(buffer);
 8008c42:	4658      	mov	r0, fp
 8008c44:	f003 fa90 	bl	800c168 <netBufferFree>
}
 8008c48:	4628      	mov	r0, r5
 8008c4a:	b011      	add	sp, #68	@ 0x44
 8008c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
               if(ipv6IsLinkLocalUnicastAddr(&entry->addr) == linkScope)
 8008c50:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8008c54:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8008c58:	f893 37b9 	ldrb.w	r3, [r3, #1977]	@ 0x7b9
 8008c5c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008c60:	2b80      	cmp	r3, #128	@ 0x80
 8008c62:	d01b      	beq.n	8008c9c <llmnrSendResponse+0x1a8>
 8008c64:	2300      	movs	r3, #0
 8008c66:	429d      	cmp	r5, r3
 8008c68:	d01a      	beq.n	8008ca0 <llmnrSendResponse+0x1ac>
         for(j = 0; j < IPV6_ADDR_LIST_SIZE; j++)
 8008c6a:	f108 0801 	add.w	r8, r8, #1
 8008c6e:	f1b8 0f02 	cmp.w	r8, #2
 8008c72:	d822      	bhi.n	8008cba <llmnrSendResponse+0x1c6>
            if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 8008c74:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8008c78:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8008c7c:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 8008c80:	3b02      	subs	r3, #2
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d8f0      	bhi.n	8008c6a <llmnrSendResponse+0x176>
               if(ipv6IsLinkLocalUnicastAddr(&entry->addr) == linkScope)
 8008c88:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8008c8c:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8008c90:	f893 37b8 	ldrb.w	r3, [r3, #1976]	@ 0x7b8
 8008c94:	2bfe      	cmp	r3, #254	@ 0xfe
 8008c96:	d0db      	beq.n	8008c50 <llmnrSendResponse+0x15c>
 8008c98:	2300      	movs	r3, #0
 8008c9a:	e7e4      	b.n	8008c66 <llmnrSendResponse+0x172>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	e7e2      	b.n	8008c66 <llmnrSendResponse+0x172>
                     &entry->addr);
 8008ca0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8008ca4:	011b      	lsls	r3, r3, #4
 8008ca6:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 8008caa:	4433      	add	r3, r6
                  llmnrFormatIpv6AddrRecord(interface, message, &length,
 8008cac:	3308      	adds	r3, #8
 8008cae:	aa0f      	add	r2, sp, #60	@ 0x3c
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	f7ff fed1 	bl	8008a5a <llmnrFormatIpv6AddrRecord>
 8008cb8:	e7d7      	b.n	8008c6a <llmnrSendResponse+0x176>
      for(i = 0; i < 2; i++, linkScope = !linkScope)
 8008cba:	f109 0901 	add.w	r9, r9, #1
 8008cbe:	fab5 f585 	clz	r5, r5
 8008cc2:	096d      	lsrs	r5, r5, #5
 8008cc4:	f1b9 0f01 	cmp.w	r9, #1
 8008cc8:	d8b8      	bhi.n	8008c3c <llmnrSendResponse+0x148>
         for(j = 0; j < IPV6_ADDR_LIST_SIZE; j++)
 8008cca:	f04f 0800 	mov.w	r8, #0
 8008cce:	e7ce      	b.n	8008c6e <llmnrSendResponse+0x17a>
      for(i = 0; i < 2; i++, linkScope = !linkScope)
 8008cd0:	f04f 0900 	mov.w	r9, #0
 8008cd4:	e7f6      	b.n	8008cc4 <llmnrSendResponse+0x1d0>
      message->ancount = htons(message->ancount);
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f7f7 fca0 	bl	800061c <swapInt16>
 8008cdc:	80e0      	strh	r0, [r4, #6]
      netBufferSetLength(buffer, offset + length);
 8008cde:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008ce0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ce2:	4419      	add	r1, r3
 8008ce4:	4658      	mov	r0, fp
 8008ce6:	f003 f9d4 	bl	800c092 <netBufferSetLength>
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8008cea:	ac06      	add	r4, sp, #24
 8008cec:	4d0f      	ldr	r5, [pc, #60]	@ (8008d2c <llmnrSendResponse+0x238>)
 8008cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ancillary.ttl = LLMNR_DEFAULT_RESPONSE_IP_TTL;
 8008cfa:	23ff      	movs	r3, #255	@ 0xff
 8008cfc:	f88d 301c 	strb.w	r3, [sp, #28]
      ancillary.dontRoute = TRUE;
 8008d00:	2301      	movs	r3, #1
 8008d02:	9309      	str	r3, [sp, #36]	@ 0x24
      error = udpSendBuffer(interface, NULL, LLMNR_PORT, destIpAddr, destPort,
 8008d04:	ab06      	add	r3, sp, #24
 8008d06:	9303      	str	r3, [sp, #12]
 8008d08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d0a:	9302      	str	r3, [sp, #8]
 8008d0c:	f8cd b004 	str.w	fp, [sp, #4]
 8008d10:	9b04      	ldr	r3, [sp, #16]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	463b      	mov	r3, r7
 8008d16:	f241 42eb 	movw	r2, #5355	@ 0x14eb
 8008d1a:	2100      	movs	r1, #0
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	f007 fd89 	bl	8010834 <udpSendBuffer>
 8008d22:	4605      	mov	r5, r0
 8008d24:	e78d      	b.n	8008c42 <llmnrSendResponse+0x14e>
      return ERROR_OUT_OF_MEMORY;
 8008d26:	2564      	movs	r5, #100	@ 0x64
 8008d28:	e78e      	b.n	8008c48 <llmnrSendResponse+0x154>
 8008d2a:	bf00      	nop
 8008d2c:	08019fc4 	.word	0x08019fc4

08008d30 <llmnrProcessQuery>:
{
 8008d30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d34:	b089      	sub	sp, #36	@ 0x24
 8008d36:	4607      	mov	r7, r0
 8008d38:	4689      	mov	r9, r1
 8008d3a:	4690      	mov	r8, r2
 8008d3c:	461d      	mov	r5, r3
 8008d3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
   length = netBufferGetLength(buffer) - offset;
 8008d40:	4618      	mov	r0, r3
 8008d42:	f003 f999 	bl	800c078 <netBufferGetLength>
 8008d46:	1b84      	subs	r4, r0, r6
   if(length < sizeof(LlmnrHeader))
 8008d48:	2c0b      	cmp	r4, #11
 8008d4a:	d802      	bhi.n	8008d52 <llmnrProcessQuery+0x22>
}
 8008d4c:	b009      	add	sp, #36	@ 0x24
 8008d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   message = netBufferAt(buffer, offset, length);
 8008d52:	4622      	mov	r2, r4
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	f003 fa2e 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 8008d5c:	4605      	mov	r5, r0
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	d0f4      	beq.n	8008d4c <llmnrProcessQuery+0x1c>
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8008d62:	f8d9 3000 	ldr.w	r3, [r9]
 8008d66:	2b0c      	cmp	r3, #12
 8008d68:	d00e      	beq.n	8008d88 <llmnrProcessQuery+0x58>
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8008d6a:	2b28      	cmp	r3, #40	@ 0x28
 8008d6c:	d1ee      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
      if(!ipv6IsMulticastAddr(&pseudoHeader->ipv6Data.destAddr))
 8008d6e:	f899 3014 	ldrb.w	r3, [r9, #20]
 8008d72:	2bff      	cmp	r3, #255	@ 0xff
 8008d74:	d1ea      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
      destIpAddr.length = sizeof(Ipv6Addr);
 8008d76:	2310      	movs	r3, #16
 8008d78:	9303      	str	r3, [sp, #12]
      destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 8008d7a:	f109 0104 	add.w	r1, r9, #4
 8008d7e:	c90f      	ldmia	r1, {r0, r1, r2, r3}
 8008d80:	ae08      	add	r6, sp, #32
 8008d82:	e906 000f 	stmdb	r6, {r0, r1, r2, r3}
 8008d86:	e00a      	b.n	8008d9e <llmnrProcessQuery+0x6e>
      if(!ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8008d88:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8008d8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008d90:	2be0      	cmp	r3, #224	@ 0xe0
 8008d92:	d1db      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
      destIpAddr.length = sizeof(Ipv4Addr);
 8008d94:	2304      	movs	r3, #4
 8008d96:	9303      	str	r3, [sp, #12]
      destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8008d98:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008d9c:	9304      	str	r3, [sp, #16]
   if(message->qr)
 8008d9e:	78aa      	ldrb	r2, [r5, #2]
 8008da0:	f995 3002 	ldrsb.w	r3, [r5, #2]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	dbd1      	blt.n	8008d4c <llmnrProcessQuery+0x1c>
   if(message->opcode != DNS_OPCODE_QUERY)
 8008da8:	f012 0f78 	tst.w	r2, #120	@ 0x78
 8008dac:	d1ce      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
   if(message->rcode != DNS_RCODE_NOERROR)
 8008dae:	78eb      	ldrb	r3, [r5, #3]
 8008db0:	f013 0f0f 	tst.w	r3, #15
 8008db4:	d1ca      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
   if(ntohs(message->qdcount) != 1)
 8008db6:	88a8      	ldrh	r0, [r5, #4]
 8008db8:	f7f7 fc30 	bl	800061c <swapInt16>
 8008dbc:	2801      	cmp	r0, #1
 8008dbe:	d1c5      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
   if(ntohs(message->ancount) != 0 || ntohs(message->nscount) != 0)
 8008dc0:	88e8      	ldrh	r0, [r5, #6]
 8008dc2:	f7f7 fc2b 	bl	800061c <swapInt16>
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	d1c0      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
 8008dca:	8928      	ldrh	r0, [r5, #8]
 8008dcc:	f7f7 fc26 	bl	800061c <swapInt16>
 8008dd0:	2800      	cmp	r0, #0
 8008dd2:	d1bb      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
   n = dnsParseName((DnsHeader *) message, length, pos, NULL, 0);
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	9300      	str	r3, [sp, #0]
 8008dd8:	220c      	movs	r2, #12
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7f9 ff45 	bl	8002c6c <dnsParseName>
   if(n == 0)
 8008de2:	4606      	mov	r6, r0
 8008de4:	2800      	cmp	r0, #0
 8008de6:	d0b1      	beq.n	8008d4c <llmnrProcessQuery+0x1c>
   if((n + sizeof(DnsQuestion)) > length)
 8008de8:	1d03      	adds	r3, r0, #4
 8008dea:	42a3      	cmp	r3, r4
 8008dec:	d8ae      	bhi.n	8008d4c <llmnrProcessQuery+0x1c>
   question = DNS_GET_QUESTION(message, n);
 8008dee:	eb05 0900 	add.w	r9, r5, r0
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 8008df2:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8008df6:	f7f7 fc11 	bl	800061c <swapInt16>
 8008dfa:	2801      	cmp	r0, #1
 8008dfc:	d005      	beq.n	8008e0a <llmnrProcessQuery+0xda>
      ntohs(question->qclass) == DNS_RR_CLASS_ANY)
 8008dfe:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8008e02:	f7f7 fc0b 	bl	800061c <swapInt16>
   if(ntohs(question->qclass) == DNS_RR_CLASS_IN ||
 8008e06:	28ff      	cmp	r0, #255	@ 0xff
 8008e08:	d1a0      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
      if(!dnsCompareName((DnsHeader *) message, length, pos,
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	f107 0319 	add.w	r3, r7, #25
 8008e12:	220c      	movs	r2, #12
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f9 ff7a 	bl	8002d10 <dnsCompareName>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d195      	bne.n	8008d4c <llmnrProcessQuery+0x1c>
         destPort = ntohs(udpHeader->srcPort);
 8008e20:	f8b8 0000 	ldrh.w	r0, [r8]
 8008e24:	f7f7 fbfa 	bl	800061c <swapInt16>
 8008e28:	4604      	mov	r4, r0
         llmnrSendResponse(interface, &destIpAddr, destPort, message->id,
 8008e2a:	f8b5 8000 	ldrh.w	r8, [r5]
 8008e2e:	5ba8      	ldrh	r0, [r5, r6]
 8008e30:	f7f7 fbf4 	bl	800061c <swapInt16>
 8008e34:	4605      	mov	r5, r0
 8008e36:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 8008e3a:	f7f7 fbef 	bl	800061c <swapInt16>
 8008e3e:	9001      	str	r0, [sp, #4]
 8008e40:	9500      	str	r5, [sp, #0]
 8008e42:	4643      	mov	r3, r8
 8008e44:	4622      	mov	r2, r4
 8008e46:	a903      	add	r1, sp, #12
 8008e48:	4638      	mov	r0, r7
 8008e4a:	f7ff fe53 	bl	8008af4 <llmnrSendResponse>
 8008e4e:	e77d      	b.n	8008d4c <llmnrProcessQuery+0x1c>

08008e50 <mldInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t mldInit(NetInterface *interface)
{
 8008e50:	b510      	push	{r4, lr}
 8008e52:	4604      	mov	r4, r0
   error_t error;

   //Join the All-Nodes multicast address
   error = ipv6JoinMulticastGroup(interface, &IPV6_LINK_LOCAL_ALL_NODES_ADDR);
 8008e54:	4904      	ldr	r1, [pc, #16]	@ (8008e68 <mldInit+0x18>)
 8008e56:	f7ff fc5f 	bl	8008718 <ipv6JoinMulticastGroup>
   //Any error to report?
   if(error)
 8008e5a:	b100      	cbz	r0, 8008e5e <mldInit+0xe>
      return error;
#endif

   //Successful initialization
   return NO_ERROR;
}
 8008e5c:	bd10      	pop	{r4, pc}
   error = mldNodeInit(interface);
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f000 f8ba 	bl	8008fd8 <mldNodeInit>
   if(error)
 8008e64:	e7fa      	b.n	8008e5c <mldInit+0xc>
 8008e66:	bf00      	nop
 8008e68:	08019f60 	.word	0x08019f60

08008e6c <mldTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void mldTick(NetInterface *interface)
{
 8008e6c:	b508      	push	{r3, lr}
 8008e6e:	4603      	mov	r3, r0
#if (MLD_NODE_SUPPORT == ENABLED)
   //Manage MLD node timers
   mldNodeTick(&interface->mldNodeContext);
 8008e70:	f241 00f4 	movw	r0, #4340	@ 0x10f4
 8008e74:	4418      	add	r0, r3
 8008e76:	f000 f8cf 	bl	8009018 <mldNodeTick>
#endif
}
 8008e7a:	bd08      	pop	{r3, pc}

08008e7c <mldLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void mldLinkChangeEvent(NetInterface *interface)
{
 8008e7c:	b508      	push	{r3, lr}
 8008e7e:	4603      	mov	r3, r0
#if (MLD_NODE_SUPPORT == ENABLED)
   //Notify the MLD node of link state changes
   mldNodeLinkChangeEvent(&interface->mldNodeContext);
 8008e80:	f241 00f4 	movw	r0, #4340	@ 0x10f4
 8008e84:	4418      	add	r0, r3
 8008e86:	f000 fa37 	bl	80092f8 <mldNodeLinkChangeEvent>
#endif
}
 8008e8a:	bd08      	pop	{r3, pc}

08008e8c <mldSendMessage>:
 * @return Error code
 **/

error_t mldSendMessage(NetInterface *interface, const Ipv6Addr *destAddr,
   NetBuffer *buffer, size_t offset)
{
 8008e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e90:	b095      	sub	sp, #84	@ 0x54
 8008e92:	4680      	mov	r8, r0
 8008e94:	460c      	mov	r4, r1
 8008e96:	4615      	mov	r5, r2
 8008e98:	461e      	mov	r6, r3
   MldMessage *message;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Retrieve the length of payload
   length = netBufferGetLength(buffer) - offset;
 8008e9a:	4610      	mov	r0, r2
 8008e9c:	f003 f8ec 	bl	800c078 <netBufferGetLength>
 8008ea0:	1b87      	subs	r7, r0, r6

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset, length);
 8008ea2:	463a      	mov	r2, r7
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	4628      	mov	r0, r5
 8008ea8:	f003 f986 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(message == NULL)
 8008eac:	2800      	cmp	r0, #0
 8008eae:	d053      	beq.n	8008f58 <mldSendMessage+0xcc>
 8008eb0:	4681      	mov	r9, r0
      return ERROR_FAILURE;

   //Check if a valid link-local address is available on the interface
   if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 8008eb2:	4640      	mov	r0, r8
 8008eb4:	f7fd fd5a 	bl	800696c <ipv6GetLinkLocalAddrState>
 8008eb8:	2802      	cmp	r0, #2
 8008eba:	d045      	beq.n	8008f48 <mldSendMessage+0xbc>
      pseudoHeader.srcAddr = interface->ipv6Context.addrList[0].addr;
   }
   else
   {
      //Check MLD message type
      if(message->type == ICMPV6_TYPE_MCAST_LISTENER_QUERY)
 8008ebc:	f899 3000 	ldrb.w	r3, [r9]
 8008ec0:	2b82      	cmp	r3, #130	@ 0x82
 8008ec2:	d04b      	beq.n	8008f5c <mldSendMessage+0xd0>
         //MLD Report and Done messages are sent with a link-local address as
         //the IPv6 source address, if a valid address is available on the
         //interface. If a valid link-local address is not available, the
         //message is sent with the unspecified address as the IPv6 source
         //address
         pseudoHeader.srcAddr = IPV6_UNSPECIFIED_ADDR;
 8008ec4:	4b27      	ldr	r3, [pc, #156]	@ (8008f64 <mldSendMessage+0xd8>)
 8008ec6:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	6859      	ldr	r1, [r3, #4]
 8008ece:	689a      	ldr	r2, [r3, #8]
 8008ed0:	68db      	ldr	r3, [r3, #12]
 8008ed2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      }
   }

   //Format IPv6 pseudo header
   pseudoHeader.destAddr = *destAddr;
 8008ed6:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8008eda:	6820      	ldr	r0, [r4, #0]
 8008edc:	6861      	ldr	r1, [r4, #4]
 8008ede:	68a2      	ldr	r2, [r4, #8]
 8008ee0:	68e3      	ldr	r3, [r4, #12]
 8008ee2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   pseudoHeader.length = htons(length);
 8008ee6:	b2b8      	uxth	r0, r7
 8008ee8:	f7f7 fb98 	bl	800061c <swapInt16>
 8008eec:	9012      	str	r0, [sp, #72]	@ 0x48
   pseudoHeader.reserved[0] = 0;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
   pseudoHeader.reserved[1] = 0;
 8008ef4:	f88d 304d 	strb.w	r3, [sp, #77]	@ 0x4d
   pseudoHeader.reserved[2] = 0;
 8008ef8:	f88d 304e 	strb.w	r3, [sp, #78]	@ 0x4e
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 8008efc:	233a      	movs	r3, #58	@ 0x3a
 8008efe:	f88d 304f 	strb.w	r3, [sp, #79]	@ 0x4f

   //Message checksum calculation
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 8008f02:	9700      	str	r7, [sp, #0]
 8008f04:	4633      	mov	r3, r6
 8008f06:	462a      	mov	r2, r5
 8008f08:	2128      	movs	r1, #40	@ 0x28
 8008f0a:	eb0d 0001 	add.w	r0, sp, r1
 8008f0e:	f7fc fb3b 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 8008f12:	f8a9 0002 	strh.w	r0, [r9, #2]
   TRACE_INFO("Sending MLD message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   mldDumpMessage(message, length);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 8008f16:	f10d 0c08 	add.w	ip, sp, #8
 8008f1a:	4c13      	ldr	r4, [pc, #76]	@ (8008f68 <mldSendMessage+0xdc>)
 8008f1c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008f1e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8008f22:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8008f26:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

   //All MLD messages must be sent with an IPv6 Hop Limit of 1, and an IPv6
   //Router Alert option in a Hop-by-Hop Options header (refer to RFC 2710,
   //section 3)
   ancillary.ttl = MLD_HOP_LIMIT;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	f88d 300c 	strb.w	r3, [sp, #12]
   ancillary.routerAlert = TRUE;
 8008f30:	9306      	str	r3, [sp, #24]

   //Send the MLD message
   return ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 8008f32:	ab02      	add	r3, sp, #8
 8008f34:	9300      	str	r3, [sp, #0]
 8008f36:	4633      	mov	r3, r6
 8008f38:	462a      	mov	r2, r5
 8008f3a:	a90a      	add	r1, sp, #40	@ 0x28
 8008f3c:	4640      	mov	r0, r8
 8008f3e:	f7fe f995 	bl	800726c <ipv6SendDatagram>
      &ancillary);
}
 8008f42:	b015      	add	sp, #84	@ 0x54
 8008f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      pseudoHeader.srcAddr = interface->ipv6Context.addrList[0].addr;
 8008f48:	f10d 0c28 	add.w	ip, sp, #40	@ 0x28
 8008f4c:	f508 63f7 	add.w	r3, r8, #1976	@ 0x7b8
 8008f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008f52:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 8008f56:	e7be      	b.n	8008ed6 <mldSendMessage+0x4a>
      return ERROR_FAILURE;
 8008f58:	2001      	movs	r0, #1
 8008f5a:	e7f2      	b.n	8008f42 <mldSendMessage+0xb6>
         return ERROR_NO_ADDRESS;
 8008f5c:	f240 10f7 	movw	r0, #503	@ 0x1f7
 8008f60:	e7ef      	b.n	8008f42 <mldSendMessage+0xb6>
 8008f62:	bf00      	nop
 8008f64:	08019f20 	.word	0x08019f20
 8008f68:	08019fc4 	.word	0x08019fc4

08008f6c <mldProcessMessage>:
 **/

void mldProcessMessage(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset, const NetRxAncillary *ancillary)
{
 8008f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f70:	4607      	mov	r7, r0
 8008f72:	4688      	mov	r8, r1
 8008f74:	4615      	mov	r5, r2
 8008f76:	461e      	mov	r6, r3
   size_t length;
   const MldMessage *message;

   //Retrieve the length of the MLD message
   length = netBufferGetLength(buffer) - offset;
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f003 f87d 	bl	800c078 <netBufferGetLength>
 8008f7e:	1b84      	subs	r4, r0, r6

   //To be valid, an MLD message must be at least 24 octets long
   if(length < sizeof(MldMessage))
 8008f80:	2c17      	cmp	r4, #23
 8008f82:	d801      	bhi.n	8008f88 <mldProcessMessage+0x1c>
#if (MLD_NODE_SUPPORT == ENABLED)
   //Pass the message to the MLD node
   mldNodeProcessMessage(&interface->mldNodeContext, pseudoHeader, message,
      length);
#endif
}
 8008f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   message = netBufferAt(buffer, offset, length);
 8008f88:	4622      	mov	r2, r4
 8008f8a:	4631      	mov	r1, r6
 8008f8c:	4628      	mov	r0, r5
 8008f8e:	f003 f913 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 8008f92:	4602      	mov	r2, r0
 8008f94:	2800      	cmp	r0, #0
 8008f96:	d0f5      	beq.n	8008f84 <mldProcessMessage+0x18>
   if(ancillary->ttl != MLD_HOP_LIMIT)
 8008f98:	9b06      	ldr	r3, [sp, #24]
 8008f9a:	781b      	ldrb	r3, [r3, #0]
 8008f9c:	2b01      	cmp	r3, #1
 8008f9e:	d1f1      	bne.n	8008f84 <mldProcessMessage+0x18>
   mldNodeProcessMessage(&interface->mldNodeContext, pseudoHeader, message,
 8008fa0:	4623      	mov	r3, r4
 8008fa2:	4641      	mov	r1, r8
 8008fa4:	f241 00f4 	movw	r0, #4340	@ 0x10f4
 8008fa8:	4438      	add	r0, r7
 8008faa:	f000 fd8b 	bl	8009ac4 <mldNodeProcessMessage>
 8008fae:	e7e9      	b.n	8008f84 <mldProcessMessage+0x18>

08008fb0 <mldGetRandomDelay>:
systime_t mldGetRandomDelay(systime_t maxDelay)
{
   systime_t delay;

   //Generate a random delay in the specified range
   if(maxDelay > MLD_TICK_INTERVAL)
 8008fb0:	28c8      	cmp	r0, #200	@ 0xc8
 8008fb2:	d801      	bhi.n	8008fb8 <mldGetRandomDelay+0x8>
   {
      delay = netGenerateRandRange(0, maxDelay - MLD_TICK_INTERVAL);
   }
   else
   {
      delay = 0;
 8008fb4:	2000      	movs	r0, #0
   }

   //Return the random value
   return delay;
}
 8008fb6:	4770      	bx	lr
{
 8008fb8:	b508      	push	{r3, lr}
      delay = netGenerateRandRange(0, maxDelay - MLD_TICK_INTERVAL);
 8008fba:	f1a0 01c8 	sub.w	r1, r0, #200	@ 0xc8
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	f003 fd88 	bl	800cad4 <netGenerateRandRange>
}
 8008fc4:	bd08      	pop	{r3, pc}

08008fc6 <mldDecodeFloatingPointValue16>:
{
   uint16_t exp;
   uint16_t mant;

   //Retrieve the value of the exponent
   exp = (code >> 12) & 0x07;
 8008fc6:	f3c0 3302 	ubfx	r3, r0, #12, #3
   //Retrieve the value of the mantissa
   mant = code & 0x0FFF;
 8008fca:	f3c0 000b 	ubfx	r0, r0, #0, #12

   //The code represents a floating-point value
   return (mant | 0x1000) << (exp + 3);
 8008fce:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8008fd2:	3303      	adds	r3, #3
}
 8008fd4:	4098      	lsls	r0, r3
 8008fd6:	4770      	bx	lr

08008fd8 <mldNodeInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t mldNodeInit(NetInterface *interface)
{
 8008fd8:	b538      	push	{r3, r4, r5, lr}
 8008fda:	4605      	mov	r5, r0
   MldNodeContext *context;

   //Point to the MLD node context
   context = &interface->mldNodeContext;
 8008fdc:	f241 04f4 	movw	r4, #4340	@ 0x10f4
 8008fe0:	4404      	add	r4, r0

   //Clear the MLD node context
   osMemset(context, 0, sizeof(MldNodeContext));
 8008fe2:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4620      	mov	r0, r4
 8008fea:	f00b fe4b 	bl	8014c84 <memset>

   //Underlying network interface
   context->interface = interface;
 8008fee:	f505 5380 	add.w	r3, r5, #4096	@ 0x1000
 8008ff2:	f8c3 50f4 	str.w	r5, [r3, #244]	@ 0xf4
   //The default host compatibility mode is MLDv2
   context->compatibilityMode = MLD_VERSION_2;
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8

   //In order to ensure interoperability, hosts maintain an Older Version
   //Querier Present timer per interface
   netStopTimer(&context->olderVersionQuerierPresentTimer);
 8008ffc:	f104 0008 	add.w	r0, r4, #8
 8009000:	f003 fc66 	bl	800c8d0 <netStopTimer>

   //A timer per interface is used for scheduling responses to General Queries
   netStopTimer(&context->generalQueryTimer);
 8009004:	f104 0014 	add.w	r0, r4, #20
 8009008:	f003 fc62 	bl	800c8d0 <netStopTimer>

   //A timer is used to retransmit State-Change reports
   netStopTimer(&context->stateChangeReportTimer);
 800900c:	f104 0020 	add.w	r0, r4, #32
 8009010:	f003 fc5e 	bl	800c8d0 <netStopTimer>

   //Successful initialization
   return NO_ERROR;
}
 8009014:	2000      	movs	r0, #0
 8009016:	bd38      	pop	{r3, r4, r5, pc}

08009018 <mldNodeTick>:
 *
 * @param[in] context Pointer to the MLD node context
 **/

void mldNodeTick(MldNodeContext *context)
{
 8009018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800901c:	4605      	mov	r5, r0
   systime_t delay;
   MldNodeGroup *group;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->interface;
 800901e:	4604      	mov	r4, r0
 8009020:	f854 6b08 	ldr.w	r6, [r4], #8

   //In order to be compatible with MLDv1 routers, MLDv2 hosts must operate in
   //version 1 compatibility mode (refer to RFC 3810, section 8.2.1)
   if(netTimerExpired(&context->olderVersionQuerierPresentTimer))
 8009024:	4620      	mov	r0, r4
 8009026:	f003 fc58 	bl	800c8da <netTimerExpired>
 800902a:	b920      	cbnz	r0, 8009036 <mldNodeTick+0x1e>
      //back to Host Compatibility Mode of MLDv2
      mldNodeChangeCompatibilityMode(context, MLD_VERSION_2);
   }

   //Check host compatibility mode
   if(context->compatibilityMode == MLD_VERSION_1)
 800902c:	792b      	ldrb	r3, [r5, #4]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d15d      	bne.n	80090ee <mldNodeTick+0xd6>
   {
      //Loop through multicast groups
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009032:	2400      	movs	r4, #0
 8009034:	e00a      	b.n	800904c <mldNodeTick+0x34>
      netStopTimer(&context->olderVersionQuerierPresentTimer);
 8009036:	4620      	mov	r0, r4
 8009038:	f003 fc4a 	bl	800c8d0 <netStopTimer>
      mldNodeChangeCompatibilityMode(context, MLD_VERSION_2);
 800903c:	2102      	movs	r1, #2
 800903e:	4628      	mov	r0, r5
 8009040:	f000 fc9d 	bl	800997e <mldNodeChangeCompatibilityMode>
 8009044:	e7f2      	b.n	800902c <mldNodeTick+0x14>

         //Check group state
         if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
         {
            //Valid link-local address assigned to the interface?
            if(interface->linkState &&
 8009046:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 8009048:	bb83      	cbnz	r3, 80090ac <mldNodeTick+0x94>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800904a:	3401      	adds	r4, #1
 800904c:	2c07      	cmp	r4, #7
 800904e:	f200 80ab 	bhi.w	80091a8 <mldNodeTick+0x190>
         if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
 8009052:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009056:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800905a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800905e:	2b01      	cmp	r3, #1
 8009060:	d0f1      	beq.n	8009046 <mldNodeTick+0x2e>
               group->flag = TRUE;
               //Enter the Delaying Listener state
               group->state = MLD_NODE_GROUP_STATE_DELAYING_LISTENER;
            }
         }
         else if(group->state == MLD_NODE_GROUP_STATE_DELAYING_LISTENER)
 8009062:	2b02      	cmp	r3, #2
 8009064:	d1f1      	bne.n	800904a <mldNodeTick+0x32>
         {
            //Delay timer expired?
            if(netTimerExpired(&group->timer))
 8009066:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800906a:	013f      	lsls	r7, r7, #4
 800906c:	3740      	adds	r7, #64	@ 0x40
 800906e:	442f      	add	r7, r5
 8009070:	3708      	adds	r7, #8
 8009072:	4638      	mov	r0, r7
 8009074:	f003 fc31 	bl	800c8da <netTimerExpired>
 8009078:	2800      	cmp	r0, #0
 800907a:	d0e6      	beq.n	800904a <mldNodeTick+0x32>
            {
               //Send a Multicast Listener Report message for the group on the
               //interface
               mldNodeSendListenerReport(context, &group->addr);
 800907c:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8009080:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009084:	0109      	lsls	r1, r1, #4
 8009086:	3128      	adds	r1, #40	@ 0x28
 8009088:	4429      	add	r1, r5
 800908a:	3105      	adds	r1, #5
 800908c:	4628      	mov	r0, r5
 800908e:	f000 f966 	bl	800935e <mldNodeSendListenerReport>

               //Stop delay timer
               netStopTimer(&group->timer);
 8009092:	4638      	mov	r0, r7
 8009094:	f003 fc1c 	bl	800c8d0 <netStopTimer>

               //Set flag
               group->flag = TRUE;
 8009098:	eb08 0304 	add.w	r3, r8, r4
 800909c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80090a0:	2201      	movs	r2, #1
 80090a2:	641a      	str	r2, [r3, #64]	@ 0x40
               //Switch to the Idle Listener state
               group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
 80090a4:	2203      	movs	r2, #3
 80090a6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80090aa:	e7ce      	b.n	800904a <mldNodeTick+0x32>
               ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7fd fc5d 	bl	800696c <ipv6GetLinkLocalAddrState>
            if(interface->linkState &&
 80090b2:	2802      	cmp	r0, #2
 80090b4:	d1c9      	bne.n	800904a <mldNodeTick+0x32>
               mldNodeSendListenerReport(context, &group->addr);
 80090b6:	0067      	lsls	r7, r4, #1
 80090b8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 80090bc:	0109      	lsls	r1, r1, #4
 80090be:	3128      	adds	r1, #40	@ 0x28
 80090c0:	4429      	add	r1, r5
 80090c2:	3105      	adds	r1, #5
 80090c4:	4628      	mov	r0, r5
 80090c6:	f000 f94a 	bl	800935e <mldNodeSendListenerReport>
               netStartTimer(&group->timer, MLD_UNSOLICITED_REPORT_INTERVAL);
 80090ca:	1938      	adds	r0, r7, r4
 80090cc:	0100      	lsls	r0, r0, #4
 80090ce:	3040      	adds	r0, #64	@ 0x40
 80090d0:	4428      	add	r0, r5
 80090d2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80090d6:	3008      	adds	r0, #8
 80090d8:	f003 fbf0 	bl	800c8bc <netStartTimer>
               group->flag = TRUE;
 80090dc:	4427      	add	r7, r4
 80090de:	eb05 1707 	add.w	r7, r5, r7, lsl #4
 80090e2:	2301      	movs	r3, #1
 80090e4:	643b      	str	r3, [r7, #64]	@ 0x40
               group->state = MLD_NODE_GROUP_STATE_DELAYING_LISTENER;
 80090e6:	2302      	movs	r3, #2
 80090e8:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80090ec:	e7ad      	b.n	800904a <mldNodeTick+0x32>
   else
   {
      //If the expired timer is the interface timer, then one Current-State
      //Record is sent for each multicast address for which the specified
      //interface has reception state
      if(netTimerExpired(&context->generalQueryTimer))
 80090ee:	f105 0414 	add.w	r4, r5, #20
 80090f2:	4620      	mov	r0, r4
 80090f4:	f003 fbf1 	bl	800c8da <netTimerExpired>
 80090f8:	b908      	cbnz	r0, 80090fe <mldNodeTick+0xe6>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80090fa:	2400      	movs	r4, #0
 80090fc:	e00a      	b.n	8009114 <mldNodeTick+0xfc>
      {
         //Send Current-State report message
         mldNodeSendCurrentStateReport(context, &IPV6_UNSPECIFIED_ADDR);
 80090fe:	4937      	ldr	r1, [pc, #220]	@ (80091dc <mldNodeTick+0x1c4>)
 8009100:	4628      	mov	r0, r5
 8009102:	f000 fa8b 	bl	800961c <mldNodeSendCurrentStateReport>

         //Stop interface timer
         netStopTimer(&context->generalQueryTimer);
 8009106:	4620      	mov	r0, r4
 8009108:	f003 fbe2 	bl	800c8d0 <netStopTimer>
 800910c:	e7f5      	b.n	80090fa <mldNodeTick+0xe2>

         //Check group state
         if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
         {
            //Valid link-local address assigned to the interface?
            if(interface->linkState &&
 800910e:	6e33      	ldr	r3, [r6, #96]	@ 0x60
 8009110:	bb23      	cbnz	r3, 800915c <mldNodeTick+0x144>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009112:	3401      	adds	r4, #1
 8009114:	2c07      	cmp	r4, #7
 8009116:	d841      	bhi.n	800919c <mldNodeTick+0x184>
         if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
 8009118:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800911c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8009120:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009124:	2b01      	cmp	r3, #1
 8009126:	d0f2      	beq.n	800910e <mldNodeTick+0xf6>
#endif
               //Enter the Idle Listener state
               group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
            }
         }
         else if(group->state == MLD_NODE_GROUP_STATE_IDLE_LISTENER)
 8009128:	2b03      	cmp	r3, #3
 800912a:	d1f2      	bne.n	8009112 <mldNodeTick+0xfa>
         {
            //Check whether the group timer has expired
            if(netTimerExpired(&group->timer))
 800912c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8009130:	013f      	lsls	r7, r7, #4
 8009132:	3740      	adds	r7, #64	@ 0x40
 8009134:	442f      	add	r7, r5
 8009136:	3708      	adds	r7, #8
 8009138:	4638      	mov	r0, r7
 800913a:	f003 fbce 	bl	800c8da <netTimerExpired>
 800913e:	2800      	cmp	r0, #0
 8009140:	d0e7      	beq.n	8009112 <mldNodeTick+0xfa>
            {
               //Send Current-State report message
               mldNodeSendCurrentStateReport(context, &group->addr);
 8009142:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 8009146:	0109      	lsls	r1, r1, #4
 8009148:	3128      	adds	r1, #40	@ 0x28
 800914a:	4429      	add	r1, r5
 800914c:	3105      	adds	r1, #5
 800914e:	4628      	mov	r0, r5
 8009150:	f000 fa64 	bl	800961c <mldNodeSendCurrentStateReport>

               //Stop group timer
               netStopTimer(&group->timer);
 8009154:	4638      	mov	r0, r7
 8009156:	f003 fbbb 	bl	800c8d0 <netStopTimer>
 800915a:	e7da      	b.n	8009112 <mldNodeTick+0xfa>
               ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800915c:	4630      	mov	r0, r6
 800915e:	f7fd fc05 	bl	800696c <ipv6GetLinkLocalAddrState>
            if(interface->linkState &&
 8009162:	2802      	cmp	r0, #2
 8009164:	d1d5      	bne.n	8009112 <mldNodeTick+0xfa>
               if(group->filterMode == IP_FILTER_MODE_EXCLUDE)
 8009166:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800916a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800916e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009172:	b13b      	cbz	r3, 8009184 <mldNodeTick+0x16c>
               group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
 8009174:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009178:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800917c:	2203      	movs	r2, #3
 800917e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8009182:	e7c6      	b.n	8009112 <mldNodeTick+0xfa>
                  group->retransmitCount = MLD_ROBUSTNESS_VARIABLE;
 8009184:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009188:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800918c:	2202      	movs	r2, #2
 800918e:	645a      	str	r2, [r3, #68]	@ 0x44
                  netStartTimer(&context->stateChangeReportTimer, 0);
 8009190:	2100      	movs	r1, #0
 8009192:	f105 0020 	add.w	r0, r5, #32
 8009196:	f003 fb91 	bl	800c8bc <netStartTimer>
 800919a:	e7eb      	b.n	8009174 <mldNodeTick+0x15c>
         }
      }

      //If the expired timer is the retransmission timer, then the State-Change
      //report is retransmitted
      if(netTimerExpired(&context->stateChangeReportTimer))
 800919c:	f105 0420 	add.w	r4, r5, #32
 80091a0:	4620      	mov	r0, r4
 80091a2:	f003 fb9a 	bl	800c8da <netTimerExpired>
 80091a6:	b908      	cbnz	r0, 80091ac <mldNodeTick+0x194>

         //Delete groups in "non-existent" state
         mldNodeFlushUnusedGroups(context);
      }
   }
}
 80091a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         mldNodeSendStateChangeReport(context, &IPV6_UNSPECIFIED_ADDR);
 80091ac:	490b      	ldr	r1, [pc, #44]	@ (80091dc <mldNodeTick+0x1c4>)
 80091ae:	4628      	mov	r0, r5
 80091b0:	f000 faa0 	bl	80096f4 <mldNodeSendStateChangeReport>
         if(mldNodeGetRetransmitStatus(context))
 80091b4:	4628      	mov	r0, r5
 80091b6:	f000 f966 	bl	8009486 <mldNodeGetRetransmitStatus>
 80091ba:	b158      	cbz	r0, 80091d4 <mldNodeTick+0x1bc>
            delay = mldGetRandomDelay(MLD_V2_UNSOLICITED_REPORT_INTERVAL);
 80091bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80091c0:	f7ff fef6 	bl	8008fb0 <mldGetRandomDelay>
 80091c4:	4601      	mov	r1, r0
            netStartTimer(&context->stateChangeReportTimer, delay);
 80091c6:	4620      	mov	r0, r4
 80091c8:	f003 fb78 	bl	800c8bc <netStartTimer>
         mldNodeFlushUnusedGroups(context);
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 fba8 	bl	8009922 <mldNodeFlushUnusedGroups>
}
 80091d2:	e7e9      	b.n	80091a8 <mldNodeTick+0x190>
            netStopTimer(&context->stateChangeReportTimer);
 80091d4:	4620      	mov	r0, r4
 80091d6:	f003 fb7b 	bl	800c8d0 <netStopTimer>
 80091da:	e7f7      	b.n	80091cc <mldNodeTick+0x1b4>
 80091dc:	08019f20 	.word	0x08019f20

080091e0 <mldNodeStateChangeEvent>:
 * @param[in] newFilter New interface state for the affected group
 **/

void mldNodeStateChangeEvent(MldNodeContext *context, const Ipv6Addr *groupAddr,
   IpFilterMode newFilterMode, const Ipv6SrcAddrList *newFilter)
{
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	4607      	mov	r7, r0
 80091e6:	4688      	mov	r8, r1
 80091e8:	4616      	mov	r6, r2
 80091ea:	461d      	mov	r5, r3
   systime_t delay;
   MldNodeGroup *group;
   NetInterface *interface;

   //Point to the underlying network interface
   interface = context->interface;
 80091ec:	f8d0 9000 	ldr.w	r9, [r0]

   //Search the list of groups for the specified multicast address
   group = mldNodeFindGroup(context, groupAddr);
 80091f0:	f000 f9be 	bl	8009570 <mldNodeFindGroup>
 80091f4:	4604      	mov	r4, r0

   //Check whether the interface has reception state for that group address
   if(newFilterMode == IP_FILTER_MODE_EXCLUDE || newFilter->numSources > 0)
 80091f6:	b116      	cbz	r6, 80091fe <mldNodeStateChangeEvent+0x1e>
 80091f8:	682b      	ldr	r3, [r5, #0]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d045      	beq.n	800928a <mldNodeStateChangeEvent+0xaa>
   {
      //No matching group found?
      if(group == NULL)
 80091fe:	b1dc      	cbz	r4, 8009238 <mldNodeStateChangeEvent+0x58>

   //Valid group?
   if(group != NULL)
   {
      //Any state change detected?
      if(group->filterMode != newFilterMode ||
 8009200:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8009204:	42b3      	cmp	r3, r6
 8009206:	d043      	beq.n	8009290 <mldNodeStateChangeEvent+0xb0>
         !ipv6CompareSrcAddrLists(&group->filter, newFilter))
      {
         //Merge the difference report resulting from the state change and the
         //pending report
         mldNodeMergeReports(group, newFilterMode, newFilter);
 8009208:	462a      	mov	r2, r5
 800920a:	4631      	mov	r1, r6
 800920c:	4620      	mov	r0, r4
 800920e:	f000 f92d 	bl	800946c <mldNodeMergeReports>

         //Save the new state
         group->filterMode = newFilterMode;
 8009212:	f884 6028 	strb.w	r6, [r4, #40]	@ 0x28
         group->filter = *newFilter;
 8009216:	682b      	ldr	r3, [r5, #0]
 8009218:	62e3      	str	r3, [r4, #44]	@ 0x2c

         //Check host compatibility mode
         if(context->compatibilityMode == MLD_VERSION_1)
 800921a:	793b      	ldrb	r3, [r7, #4]
 800921c:	2b01      	cmp	r3, #1
 800921e:	d03e      	beq.n	800929e <mldNodeStateChangeEvent+0xbe>
            }
         }
         else
         {
            //Check group state
            if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
 8009220:	7823      	ldrb	r3, [r4, #0]
 8009222:	2b01      	cmp	r3, #1
 8009224:	d14a      	bne.n	80092bc <mldNodeStateChangeEvent+0xdc>
            {
               //The "non-existent" state is considered to have a filter mode
               //of INCLUDE and an empty source list
               if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8009226:	2e01      	cmp	r6, #1
 8009228:	d15c      	bne.n	80092e4 <mldNodeStateChangeEvent+0x104>
                  group->filter.numSources == 0)
 800922a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
               if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 800922c:	2b00      	cmp	r3, #0
 800922e:	d159      	bne.n	80092e4 <mldNodeStateChangeEvent+0x104>
               {
                  //Delete the group
                  mldNodeDeleteGroup(group);
 8009230:	4620      	mov	r0, r4
 8009232:	f000 fb73 	bl	800991c <mldNodeDeleteGroup>
 8009236:	e055      	b.n	80092e4 <mldNodeStateChangeEvent+0x104>
         group = mldNodeCreateGroup(context, groupAddr);
 8009238:	4641      	mov	r1, r8
 800923a:	4638      	mov	r0, r7
 800923c:	f000 f946 	bl	80094cc <mldNodeCreateGroup>
         if(group != NULL)
 8009240:	4604      	mov	r4, r0
 8009242:	2800      	cmp	r0, #0
 8009244:	d04e      	beq.n	80092e4 <mldNodeStateChangeEvent+0x104>
            if(interface->linkState &&
 8009246:	f8d9 3060 	ldr.w	r3, [r9, #96]	@ 0x60
 800924a:	b923      	cbnz	r3, 8009256 <mldNodeStateChangeEvent+0x76>
               group->flag = FALSE;
 800924c:	2300      	movs	r3, #0
 800924e:	6163      	str	r3, [r4, #20]
               group->state = MLD_NODE_GROUP_STATE_INIT_LISTENER;
 8009250:	2301      	movs	r3, #1
 8009252:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 8009254:	e7d4      	b.n	8009200 <mldNodeStateChangeEvent+0x20>
               ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 8009256:	4648      	mov	r0, r9
 8009258:	f7fd fb88 	bl	800696c <ipv6GetLinkLocalAddrState>
            if(interface->linkState &&
 800925c:	2802      	cmp	r0, #2
 800925e:	d1f5      	bne.n	800924c <mldNodeStateChangeEvent+0x6c>
               if(context->compatibilityMode == MLD_VERSION_1)
 8009260:	793b      	ldrb	r3, [r7, #4]
 8009262:	2b01      	cmp	r3, #1
 8009264:	d002      	beq.n	800926c <mldNodeStateChangeEvent+0x8c>
                  group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
 8009266:	2303      	movs	r3, #3
 8009268:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 800926a:	e7c9      	b.n	8009200 <mldNodeStateChangeEvent+0x20>
                  mldNodeSendListenerReport(context, &group->addr);
 800926c:	1c61      	adds	r1, r4, #1
 800926e:	4638      	mov	r0, r7
 8009270:	f000 f875 	bl	800935e <mldNodeSendListenerReport>
                  netStartTimer(&group->timer, MLD_UNSOLICITED_REPORT_INTERVAL);
 8009274:	f242 7110 	movw	r1, #10000	@ 0x2710
 8009278:	f104 001c 	add.w	r0, r4, #28
 800927c:	f003 fb1e 	bl	800c8bc <netStartTimer>
                  group->flag = TRUE;
 8009280:	2301      	movs	r3, #1
 8009282:	6163      	str	r3, [r4, #20]
                  group->state = MLD_NODE_GROUP_STATE_DELAYING_LISTENER;
 8009284:	2302      	movs	r3, #2
 8009286:	7023      	strb	r3, [r4, #0]
   if(group != NULL)
 8009288:	e7ba      	b.n	8009200 <mldNodeStateChangeEvent+0x20>
 800928a:	2800      	cmp	r0, #0
 800928c:	d1b8      	bne.n	8009200 <mldNodeStateChangeEvent+0x20>
 800928e:	e029      	b.n	80092e4 <mldNodeStateChangeEvent+0x104>
         !ipv6CompareSrcAddrLists(&group->filter, newFilter))
 8009290:	4629      	mov	r1, r5
 8009292:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8009296:	f7ff fa70 	bl	800877a <ipv6CompareSrcAddrLists>
      if(group->filterMode != newFilterMode ||
 800929a:	bb18      	cbnz	r0, 80092e4 <mldNodeStateChangeEvent+0x104>
 800929c:	e7b4      	b.n	8009208 <mldNodeStateChangeEvent+0x28>
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 800929e:	2e01      	cmp	r6, #1
 80092a0:	d120      	bne.n	80092e4 <mldNodeStateChangeEvent+0x104>
               group->filter.numSources == 0)
 80092a2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 80092a4:	b9f3      	cbnz	r3, 80092e4 <mldNodeStateChangeEvent+0x104>
               if(group->flag)
 80092a6:	6963      	ldr	r3, [r4, #20]
 80092a8:	b91b      	cbnz	r3, 80092b2 <mldNodeStateChangeEvent+0xd2>
               mldNodeDeleteGroup(group);
 80092aa:	4620      	mov	r0, r4
 80092ac:	f000 fb36 	bl	800991c <mldNodeDeleteGroup>
 80092b0:	e018      	b.n	80092e4 <mldNodeStateChangeEvent+0x104>
                  mldNodeSendListenerDone(context, &group->addr);
 80092b2:	1c61      	adds	r1, r4, #1
 80092b4:	4638      	mov	r0, r7
 80092b6:	f000 f87f 	bl	80093b8 <mldNodeSendListenerDone>
 80092ba:	e7f6      	b.n	80092aa <mldNodeStateChangeEvent+0xca>
               }
            }
            else
            {
               //Send a State-Change report message
               mldNodeSendStateChangeReport(context, &IPV6_UNSPECIFIED_ADDR);
 80092bc:	490d      	ldr	r1, [pc, #52]	@ (80092f4 <mldNodeStateChangeEvent+0x114>)
 80092be:	4638      	mov	r0, r7
 80092c0:	f000 fa18 	bl	80096f4 <mldNodeSendStateChangeReport>

               //To cover the possibility of the State-Change report being
               //missed by one or more multicast routers, it is retransmitted
               //[Robustness Variable] - 1 more times
               if(mldNodeGetRetransmitStatus(context))
 80092c4:	4638      	mov	r0, r7
 80092c6:	f000 f8de 	bl	8009486 <mldNodeGetRetransmitStatus>
 80092ca:	b168      	cbz	r0, 80092e8 <mldNodeStateChangeEvent+0x108>
               {
                  //Select a value in the range 0 - Unsolicited Report Interval
                  delay = mldGetRandomDelay(MLD_V2_UNSOLICITED_REPORT_INTERVAL);
 80092cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80092d0:	f7ff fe6e 	bl	8008fb0 <mldGetRandomDelay>
 80092d4:	4601      	mov	r1, r0
                  //Start retransmission timer
                  netStartTimer(&context->stateChangeReportTimer, delay);
 80092d6:	f107 0020 	add.w	r0, r7, #32
 80092da:	f003 faef 	bl	800c8bc <netStartTimer>
                  //by the host
                  netStopTimer(&context->stateChangeReportTimer);
               }

               //Delete groups in "non-existent" state
               mldNodeFlushUnusedGroups(context);
 80092de:	4638      	mov	r0, r7
 80092e0:	f000 fb1f 	bl	8009922 <mldNodeFlushUnusedGroups>
            }
         }
      }
   }
}
 80092e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                  netStopTimer(&context->stateChangeReportTimer);
 80092e8:	f107 0020 	add.w	r0, r7, #32
 80092ec:	f003 faf0 	bl	800c8d0 <netStopTimer>
 80092f0:	e7f5      	b.n	80092de <mldNodeStateChangeEvent+0xfe>
 80092f2:	bf00      	nop
 80092f4:	08019f20 	.word	0x08019f20

080092f8 <mldNodeLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] context Pointer to the MLD node context
 **/

void mldNodeLinkChangeEvent(MldNodeContext *context)
{
 80092f8:	b570      	push	{r4, r5, r6, lr}
 80092fa:	4605      	mov	r5, r0
   uint_t i;
   MldNodeGroup *group;

   //The default host compatibility mode is MLDv2
   context->compatibilityMode = MLD_VERSION_2;
 80092fc:	2302      	movs	r3, #2
 80092fe:	7103      	strb	r3, [r0, #4]

   //Stop timers
   netStopTimer(&context->olderVersionQuerierPresentTimer);
 8009300:	3008      	adds	r0, #8
 8009302:	f003 fae5 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->generalQueryTimer);
 8009306:	f105 0014 	add.w	r0, r5, #20
 800930a:	f003 fae1 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->stateChangeReportTimer);
 800930e:	f105 0020 	add.w	r0, r5, #32
 8009312:	f003 fadd 	bl	800c8d0 <netStopTimer>

   //Loop through multicast groups
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009316:	2400      	movs	r4, #0
 8009318:	e000      	b.n	800931c <mldNodeLinkChangeEvent+0x24>
 800931a:	3401      	adds	r4, #1
 800931c:	2c07      	cmp	r4, #7
 800931e:	d81a      	bhi.n	8009356 <mldNodeLinkChangeEvent+0x5e>
   {
      //Point to the current group
      group = &context->groups[i];

      //Valid group?
      if(group->state != MLD_NODE_GROUP_STATE_NON_LISTENER)
 8009320:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009324:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8009328:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800932c:	2b00      	cmp	r3, #0
 800932e:	d0f4      	beq.n	800931a <mldNodeLinkChangeEvent+0x22>
      {
         //Reset parameters
         group->flag = FALSE;
 8009330:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 8009334:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 8009338:	2300      	movs	r3, #0
 800933a:	6433      	str	r3, [r6, #64]	@ 0x40
         group->retransmitCount = 0;
 800933c:	6473      	str	r3, [r6, #68]	@ 0x44
         group->allow.numSources = 0;
         group->block.numSources = 0;
         group->queriedSources.numSources = 0;
#endif
         //Stop delay timer
         netStopTimer(&group->timer);
 800933e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8009342:	0100      	lsls	r0, r0, #4
 8009344:	3040      	adds	r0, #64	@ 0x40
 8009346:	4428      	add	r0, r5
 8009348:	3008      	adds	r0, #8
 800934a:	f003 fac1 	bl	800c8d0 <netStopTimer>

         //Enter the Init Listener state
         group->state = MLD_NODE_GROUP_STATE_INIT_LISTENER;
 800934e:	2301      	movs	r3, #1
 8009350:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 8009354:	e7e1      	b.n	800931a <mldNodeLinkChangeEvent+0x22>
      }
   }

   //Delete groups in "non-existent" state
   mldNodeFlushUnusedGroups(context);
 8009356:	4628      	mov	r0, r5
 8009358:	f000 fae3 	bl	8009922 <mldNodeFlushUnusedGroups>
}
 800935c:	bd70      	pop	{r4, r5, r6, pc}

0800935e <mldNodeSendListenerReport>:
 * @param[in] groupAddr IPv6 address specifying the multicast address
 **/

void mldNodeSendListenerReport(MldNodeContext *context,
   const Ipv6Addr *groupAddr)
{
 800935e:	b570      	push	{r4, r5, r6, lr}
 8009360:	b082      	sub	sp, #8
 8009362:	4606      	mov	r6, r0
 8009364:	460c      	mov	r4, r1
   size_t offset;
   NetBuffer *buffer;
   MldMessage *message;

   //Allocate a memory buffer to hold the MLD message
   buffer = ipAllocBuffer(sizeof(MldMessage), &offset);
 8009366:	a901      	add	r1, sp, #4
 8009368:	2018      	movs	r0, #24
 800936a:	f7fc f922 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 800936e:	b308      	cbz	r0, 80093b4 <mldNodeSendListenerReport+0x56>
 8009370:	4605      	mov	r5, r0
      return;

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset, 0);
 8009372:	2200      	movs	r2, #0
 8009374:	9901      	ldr	r1, [sp, #4]
 8009376:	f002 ff1f 	bl	800c1b8 <netBufferAt>

   //Format the Multicast Listener Report message
   message->type = ICMPV6_TYPE_MCAST_LISTENER_REPORT_V1;
 800937a:	2383      	movs	r3, #131	@ 0x83
 800937c:	7003      	strb	r3, [r0, #0]
   message->code = 0;
 800937e:	2300      	movs	r3, #0
 8009380:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 8009382:	7083      	strb	r3, [r0, #2]
 8009384:	70c3      	strb	r3, [r0, #3]
   message->maxRespDelay = 0;
 8009386:	7103      	strb	r3, [r0, #4]
 8009388:	7143      	strb	r3, [r0, #5]
   message->reserved = 0;
 800938a:	7183      	strb	r3, [r0, #6]
 800938c:	71c3      	strb	r3, [r0, #7]
   message->multicastAddr = *groupAddr;
 800938e:	f8d4 c000 	ldr.w	ip, [r4]
 8009392:	6861      	ldr	r1, [r4, #4]
 8009394:	68a2      	ldr	r2, [r4, #8]
 8009396:	68e3      	ldr	r3, [r4, #12]
 8009398:	f8c0 c008 	str.w	ip, [r0, #8]
 800939c:	60c1      	str	r1, [r0, #12]
 800939e:	6102      	str	r2, [r0, #16]
 80093a0:	6143      	str	r3, [r0, #20]

   //The Multicast Listener Report message is sent to the multicast address
   //being reported
   mldSendMessage(context->interface, groupAddr, buffer, offset);
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	462a      	mov	r2, r5
 80093a6:	4621      	mov	r1, r4
 80093a8:	6830      	ldr	r0, [r6, #0]
 80093aa:	f7ff fd6f 	bl	8008e8c <mldSendMessage>

   //Free previously allocated memory
   netBufferFree(buffer);
 80093ae:	4628      	mov	r0, r5
 80093b0:	f002 feda 	bl	800c168 <netBufferFree>
}
 80093b4:	b002      	add	sp, #8
 80093b6:	bd70      	pop	{r4, r5, r6, pc}

080093b8 <mldNodeSendListenerDone>:
 * @param[in] groupAddr IPv6 address specifying the multicast address being left
 **/

void mldNodeSendListenerDone(MldNodeContext *context,
   const Ipv6Addr *groupAddr)
{
 80093b8:	b570      	push	{r4, r5, r6, lr}
 80093ba:	b082      	sub	sp, #8
 80093bc:	4606      	mov	r6, r0
 80093be:	460c      	mov	r4, r1
   size_t offset;
   NetBuffer *buffer;
   MldMessage *message;

   //Allocate a memory buffer to hold the MLD message
   buffer = ipAllocBuffer(sizeof(MldMessage), &offset);
 80093c0:	a901      	add	r1, sp, #4
 80093c2:	2018      	movs	r0, #24
 80093c4:	f7fc f8f5 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 80093c8:	b308      	cbz	r0, 800940e <mldNodeSendListenerDone+0x56>
 80093ca:	4605      	mov	r5, r0
      return;

   //Point to the beginning of the MLD message
   message = netBufferAt(buffer, offset, 0);
 80093cc:	2200      	movs	r2, #0
 80093ce:	9901      	ldr	r1, [sp, #4]
 80093d0:	f002 fef2 	bl	800c1b8 <netBufferAt>

   //Format the Multicast Listener Done message
   message->type = ICMPV6_TYPE_MCAST_LISTENER_DONE_V1;
 80093d4:	2384      	movs	r3, #132	@ 0x84
 80093d6:	7003      	strb	r3, [r0, #0]
   message->code = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 80093dc:	7083      	strb	r3, [r0, #2]
 80093de:	70c3      	strb	r3, [r0, #3]
   message->maxRespDelay = 0;
 80093e0:	7103      	strb	r3, [r0, #4]
 80093e2:	7143      	strb	r3, [r0, #5]
   message->reserved = 0;
 80093e4:	7183      	strb	r3, [r0, #6]
 80093e6:	71c3      	strb	r3, [r0, #7]
   message->multicastAddr = *groupAddr;
 80093e8:	f8d4 c000 	ldr.w	ip, [r4]
 80093ec:	6861      	ldr	r1, [r4, #4]
 80093ee:	68a2      	ldr	r2, [r4, #8]
 80093f0:	68e3      	ldr	r3, [r4, #12]
 80093f2:	f8c0 c008 	str.w	ip, [r0, #8]
 80093f6:	60c1      	str	r1, [r0, #12]
 80093f8:	6102      	str	r2, [r0, #16]
 80093fa:	6143      	str	r3, [r0, #20]

   //The Multicast Listener Done message is sent to the all-routers multicast
   //address
   mldSendMessage(context->interface, &IPV6_LINK_LOCAL_ALL_ROUTERS_ADDR,
 80093fc:	9b01      	ldr	r3, [sp, #4]
 80093fe:	462a      	mov	r2, r5
 8009400:	4904      	ldr	r1, [pc, #16]	@ (8009414 <mldNodeSendListenerDone+0x5c>)
 8009402:	6830      	ldr	r0, [r6, #0]
 8009404:	f7ff fd42 	bl	8008e8c <mldSendMessage>
      buffer, offset);

   //Free previously allocated memory
   netBufferFree(buffer);
 8009408:	4628      	mov	r0, r5
 800940a:	f002 fead 	bl	800c168 <netBufferFree>
}
 800940e:	b002      	add	sp, #8
 8009410:	bd70      	pop	{r4, r5, r6, pc}
 8009412:	bf00      	nop
 8009414:	08019f50 	.word	0x08019f50

08009418 <mldNodeFlushReportRecords>:
 * @param[in,out] length Length of the report message, in bytes
 **/

void mldNodeFlushReportRecords(MldNodeContext *context, NetBuffer *buffer,
   size_t offset, size_t *length)
{
 8009418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   MldListenerReportV2 *message;

   //Any multicast address records included in the message?
   if(*length > 0)
 800941c:	681d      	ldr	r5, [r3, #0]
 800941e:	b90d      	cbnz	r5, 8009424 <mldNodeFlushReportRecords+0xc>
      message->numOfMcastAddrRecords = 0;

      //Update the length of the message
      *length = sizeof(MldListenerReportV2);
   }
}
 8009420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009424:	4607      	mov	r7, r0
 8009426:	460e      	mov	r6, r1
 8009428:	4690      	mov	r8, r2
 800942a:	461c      	mov	r4, r3
      message = netBufferAt(buffer, offset, 0);
 800942c:	2200      	movs	r2, #0
 800942e:	4641      	mov	r1, r8
 8009430:	4630      	mov	r0, r6
 8009432:	f002 fec1 	bl	800c1b8 <netBufferAt>
 8009436:	4605      	mov	r5, r0
      message->numOfMcastAddrRecords = htons(message->numOfMcastAddrRecords);
 8009438:	88c0      	ldrh	r0, [r0, #6]
 800943a:	f7f7 f8ef 	bl	800061c <swapInt16>
 800943e:	80e8      	strh	r0, [r5, #6]
      netBufferSetLength(buffer, offset + *length);
 8009440:	6821      	ldr	r1, [r4, #0]
 8009442:	4441      	add	r1, r8
 8009444:	4630      	mov	r0, r6
 8009446:	f002 fe24 	bl	800c092 <netBufferSetLength>
      mldSendMessage(context->interface, &MLD_V2_ALL_ROUTERS_ADDR, buffer,
 800944a:	4643      	mov	r3, r8
 800944c:	4632      	mov	r2, r6
 800944e:	4906      	ldr	r1, [pc, #24]	@ (8009468 <mldNodeFlushReportRecords+0x50>)
 8009450:	6838      	ldr	r0, [r7, #0]
 8009452:	f7ff fd1b 	bl	8008e8c <mldSendMessage>
      message->checksum = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	70ab      	strb	r3, [r5, #2]
 800945a:	70eb      	strb	r3, [r5, #3]
      message->numOfMcastAddrRecords = 0;
 800945c:	71ab      	strb	r3, [r5, #6]
 800945e:	71eb      	strb	r3, [r5, #7]
      *length = sizeof(MldListenerReportV2);
 8009460:	2308      	movs	r3, #8
 8009462:	6023      	str	r3, [r4, #0]
}
 8009464:	e7dc      	b.n	8009420 <mldNodeFlushReportRecords+0x8>
 8009466:	bf00      	nop
 8009468:	08019fa4 	.word	0x08019fa4

0800946c <mldNodeMergeReports>:
   }
#endif

   //When the filter mode changes, the Filter Mode Retransmission Counter is
   //set to [Robustness Variable]
   if(newFilterMode != group->filterMode)
 800946c:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8009470:	428b      	cmp	r3, r1
 8009472:	d001      	beq.n	8009478 <mldNodeMergeReports+0xc>
   {
      group->retransmitCount = MLD_ROBUSTNESS_VARIABLE;
 8009474:	2302      	movs	r3, #2
 8009476:	6183      	str	r3, [r0, #24]
   }
}
 8009478:	4770      	bx	lr

0800947a <mldNodeGetGroupRetransmitStatus>:
   {
      status = TRUE;
   }
#else
   //Retransmission in progress?
   if(group->retransmitCount > 0)
 800947a:	6983      	ldr	r3, [r0, #24]
 800947c:	b90b      	cbnz	r3, 8009482 <mldNodeGetGroupRetransmitStatus+0x8>
   status = FALSE;
 800947e:	2000      	movs	r0, #0
 8009480:	4770      	bx	lr
   {
      status = TRUE;
 8009482:	2001      	movs	r0, #1
   }
#endif

   //Return TRUE if additional retransmissions are needed
   return status;
}
 8009484:	4770      	bx	lr

08009486 <mldNodeGetRetransmitStatus>:
{
 8009486:	b538      	push	{r3, r4, r5, lr}
 8009488:	4605      	mov	r5, r0
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 800948a:	2400      	movs	r4, #0
 800948c:	e000      	b.n	8009490 <mldNodeGetRetransmitStatus+0xa>
 800948e:	3401      	adds	r4, #1
 8009490:	2c07      	cmp	r4, #7
 8009492:	d813      	bhi.n	80094bc <mldNodeGetRetransmitStatus+0x36>
      group = &context->groups[i];
 8009494:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8009498:	0100      	lsls	r0, r0, #4
 800949a:	3028      	adds	r0, #40	@ 0x28
 800949c:	4428      	add	r0, r5
 800949e:	3004      	adds	r0, #4
      if(group->state != MLD_NODE_GROUP_STATE_NON_LISTENER)
 80094a0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80094a4:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80094a8:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0ee      	beq.n	800948e <mldNodeGetRetransmitStatus+0x8>
         if(mldNodeGetGroupRetransmitStatus(group))
 80094b0:	f7ff ffe3 	bl	800947a <mldNodeGetGroupRetransmitStatus>
 80094b4:	2800      	cmp	r0, #0
 80094b6:	d0ea      	beq.n	800948e <mldNodeGetRetransmitStatus+0x8>
            status = TRUE;
 80094b8:	2001      	movs	r0, #1
   return status;
 80094ba:	e000      	b.n	80094be <mldNodeGetRetransmitStatus+0x38>
   status = FALSE;
 80094bc:	2000      	movs	r0, #0
}
 80094be:	bd38      	pop	{r3, r4, r5, pc}

080094c0 <mldNodeDecGroupRetransmitCounters>:
 **/

void mldNodeDecGroupRetransmitCounters(MldNodeGroup *group)
{
   //Filter mode change?
   if(group->retransmitCount > 0)
 80094c0:	6983      	ldr	r3, [r0, #24]
 80094c2:	b10b      	cbz	r3, 80094c8 <mldNodeDecGroupRetransmitCounters+0x8>
   {
      //The Filter Mode Retransmission Counter is decremented by one unit after
      //the transmission of the report
      group->retransmitCount--;
 80094c4:	3b01      	subs	r3, #1
 80094c6:	6183      	str	r3, [r0, #24]
            mldNodeRemoveSrcAddr(&group->block, &group->block.sources[i].addr);
         }
      }
#endif
   }
}
 80094c8:	4770      	bx	lr
	...

080094cc <mldNodeCreateGroup>:
 * @return Pointer to the newly created multicast group
 **/

MldNodeGroup *mldNodeCreateGroup(MldNodeContext *context,
   const Ipv6Addr *groupAddr)
{
 80094cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

   //Initialize pointer
   group = NULL;

   //Valid multicast address?
   if(ipv6IsMulticastAddr(groupAddr) &&
 80094d0:	780b      	ldrb	r3, [r1, #0]
 80094d2:	2bff      	cmp	r3, #255	@ 0xff
 80094d4:	d146      	bne.n	8009564 <mldNodeCreateGroup+0x98>
 80094d6:	4605      	mov	r5, r0
 80094d8:	460e      	mov	r6, r1
      !ipv6CompAddr(groupAddr, &IPV6_LINK_LOCAL_ALL_NODES_ADDR))
 80094da:	2210      	movs	r2, #16
 80094dc:	4923      	ldr	r1, [pc, #140]	@ (800956c <mldNodeCreateGroup+0xa0>)
 80094de:	4630      	mov	r0, r6
 80094e0:	f00b fba6 	bl	8014c30 <memcmp>
   if(ipv6IsMulticastAddr(groupAddr) &&
 80094e4:	b158      	cbz	r0, 80094fe <mldNodeCreateGroup+0x32>
   {
      //Loop through multicast groups
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80094e6:	2400      	movs	r4, #0
 80094e8:	2c07      	cmp	r4, #7
 80094ea:	d839      	bhi.n	8009560 <mldNodeCreateGroup+0x94>
      {
         //Check whether the entry is available
         if(context->groups[i].state == MLD_NODE_GROUP_STATE_NON_LISTENER)
 80094ec:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80094f0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80094f4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80094f8:	b11b      	cbz	r3, 8009502 <mldNodeCreateGroup+0x36>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80094fa:	3401      	adds	r4, #1
 80094fc:	e7f4      	b.n	80094e8 <mldNodeCreateGroup+0x1c>
   group = NULL;
 80094fe:	2700      	movs	r7, #0
 8009500:	e031      	b.n	8009566 <mldNodeCreateGroup+0x9a>
            //Debug message
            TRACE_DEBUG("Creating MLD group (%s)...\r\n",
               ipv6AddrToString(groupAddr, NULL));

            //Point to the current group
            group = &context->groups[i];
 8009502:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8009506:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 800950a:	013f      	lsls	r7, r7, #4
 800950c:	3728      	adds	r7, #40	@ 0x28
 800950e:	442f      	add	r7, r5
 8009510:	3704      	adds	r7, #4

            //Initialize group
            osMemset(group, 0, sizeof(MldNodeGroup));
 8009512:	2230      	movs	r2, #48	@ 0x30
 8009514:	2100      	movs	r1, #0
 8009516:	4638      	mov	r0, r7
 8009518:	f00b fbb4 	bl	8014c84 <memset>

            //Switch to the Init Listener state
            group->state = MLD_NODE_GROUP_STATE_INIT_LISTENER;
 800951c:	eb09 0804 	add.w	r8, r9, r4
 8009520:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 8009524:	f04f 0a01 	mov.w	sl, #1
 8009528:	f888 a02c 	strb.w	sl, [r8, #44]	@ 0x2c
            //Save the multicast group address
            group->addr = *groupAddr;
 800952c:	6830      	ldr	r0, [r6, #0]
 800952e:	6871      	ldr	r1, [r6, #4]
 8009530:	68b2      	ldr	r2, [r6, #8]
 8009532:	68f3      	ldr	r3, [r6, #12]
 8009534:	f8c8 002d 	str.w	r0, [r8, #45]	@ 0x2d
 8009538:	f8c8 1031 	str.w	r1, [r8, #49]	@ 0x31
 800953c:	f8c8 2035 	str.w	r2, [r8, #53]	@ 0x35
 8009540:	f8c8 3039 	str.w	r3, [r8, #57]	@ 0x39

            //A per-group and interface timer is used for scheduling responses to
            //Group-Specific and Group-and-Source-Specific Queries
            netStopTimer(&group->timer);
 8009544:	eb09 0004 	add.w	r0, r9, r4
 8009548:	0100      	lsls	r0, r0, #4
 800954a:	3040      	adds	r0, #64	@ 0x40
 800954c:	4428      	add	r0, r5
 800954e:	3008      	adds	r0, #8
 8009550:	f003 f9be 	bl	800c8d0 <netStopTimer>

            //The "non-existent" state is considered to have a filter mode of
            //INCLUDE and an empty source list
            group->filterMode = IP_FILTER_MODE_INCLUDE;
 8009554:	f888 a054 	strb.w	sl, [r8, #84]	@ 0x54
            group->filter.numSources = 0;
 8009558:	2300      	movs	r3, #0
 800955a:	f8c8 3058 	str.w	r3, [r8, #88]	@ 0x58

            //We are done
            break;
 800955e:	e002      	b.n	8009566 <mldNodeCreateGroup+0x9a>
   group = NULL;
 8009560:	2700      	movs	r7, #0
 8009562:	e000      	b.n	8009566 <mldNodeCreateGroup+0x9a>
 8009564:	2700      	movs	r7, #0
      }
   }

   //Return a pointer to the newly created multicast group
   return group;
}
 8009566:	4638      	mov	r0, r7
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	08019f60 	.word	0x08019f60

08009570 <mldNodeFindGroup>:
 * @return Pointer to the matching multicast group, if any
 **/

MldNodeGroup *mldNodeFindGroup(MldNodeContext *context,
   const Ipv6Addr *groupAddr)
{
 8009570:	b570      	push	{r4, r5, r6, lr}
 8009572:	4605      	mov	r5, r0
 8009574:	460e      	mov	r6, r1

   //Initialize pointer
   group = NULL;

   //Loop through multicast groups
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009576:	2400      	movs	r4, #0
 8009578:	e000      	b.n	800957c <mldNodeFindGroup+0xc>
 800957a:	3401      	adds	r4, #1
 800957c:	2c07      	cmp	r4, #7
 800957e:	d81a      	bhi.n	80095b6 <mldNodeFindGroup+0x46>
   {
      //Matching group?
      if(context->groups[i].state != MLD_NODE_GROUP_STATE_NON_LISTENER &&
 8009580:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009584:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8009588:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800958c:	2b00      	cmp	r3, #0
 800958e:	d0f4      	beq.n	800957a <mldNodeFindGroup+0xa>
         ipv6CompAddr(&context->groups[i].addr, groupAddr))
 8009590:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 8009594:	0100      	lsls	r0, r0, #4
 8009596:	3028      	adds	r0, #40	@ 0x28
 8009598:	4428      	add	r0, r5
 800959a:	2210      	movs	r2, #16
 800959c:	4631      	mov	r1, r6
 800959e:	3005      	adds	r0, #5
 80095a0:	f00b fb46 	bl	8014c30 <memcmp>
      if(context->groups[i].state != MLD_NODE_GROUP_STATE_NON_LISTENER &&
 80095a4:	2800      	cmp	r0, #0
 80095a6:	d1e8      	bne.n	800957a <mldNodeFindGroup+0xa>
      {
         //Point to the current group
         group = &context->groups[i];
 80095a8:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80095ac:	011b      	lsls	r3, r3, #4
 80095ae:	3328      	adds	r3, #40	@ 0x28
 80095b0:	18e8      	adds	r0, r5, r3
 80095b2:	3004      	adds	r0, #4
         break;
 80095b4:	e000      	b.n	80095b8 <mldNodeFindGroup+0x48>
   group = NULL;
 80095b6:	2000      	movs	r0, #0
      }
   }

   //Return a pointer to the matching multicast group
   return group;
}
 80095b8:	bd70      	pop	{r4, r5, r6, pc}

080095ba <mldNodeProcessListenerReport>:
{
 80095ba:	b508      	push	{r3, lr}
   if(context->compatibilityMode > MLD_VERSION_1)
 80095bc:	7903      	ldrb	r3, [r0, #4]
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d80a      	bhi.n	80095d8 <mldNodeProcessListenerReport+0x1e>
   if(!ipv6IsMulticastAddr(&message->multicastAddr))
 80095c2:	7a13      	ldrb	r3, [r2, #8]
 80095c4:	2bff      	cmp	r3, #255	@ 0xff
 80095c6:	d107      	bne.n	80095d8 <mldNodeProcessListenerReport+0x1e>
   group = mldNodeFindGroup(context, &message->multicastAddr);
 80095c8:	f102 0108 	add.w	r1, r2, #8
 80095cc:	f7ff ffd0 	bl	8009570 <mldNodeFindGroup>
   if(group != NULL)
 80095d0:	b110      	cbz	r0, 80095d8 <mldNodeProcessListenerReport+0x1e>
      if(group->state == MLD_NODE_GROUP_STATE_DELAYING_LISTENER)
 80095d2:	7802      	ldrb	r2, [r0, #0]
 80095d4:	2a02      	cmp	r2, #2
 80095d6:	d000      	beq.n	80095da <mldNodeProcessListenerReport+0x20>
}
 80095d8:	bd08      	pop	{r3, pc}
         group->flag = FALSE;
 80095da:	2200      	movs	r2, #0
 80095dc:	6142      	str	r2, [r0, #20]
         group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
 80095de:	2203      	movs	r2, #3
 80095e0:	7002      	strb	r2, [r0, #0]
 80095e2:	e7f9      	b.n	80095d8 <mldNodeProcessListenerReport+0x1e>

080095e4 <mldNodeMatchGroup>:
 * @param[in] multicastAddr IPv6 multicast address
 * @return TRUE if the group matches the specified multicast address, else FALSE
 **/

bool_t mldNodeMatchGroup(MldNodeGroup *group, const Ipv6Addr *multicastAddr)
{
 80095e4:	b538      	push	{r3, r4, r5, lr}

   //Initialize flag
   match = FALSE;

   //Valid group?
   if(group->state != MLD_NODE_GROUP_STATE_NON_LISTENER)
 80095e6:	7803      	ldrb	r3, [r0, #0]
 80095e8:	b17b      	cbz	r3, 800960a <mldNodeMatchGroup+0x26>
 80095ea:	4604      	mov	r4, r0
 80095ec:	460d      	mov	r5, r1
   {
      //Matching multicast address?
      if(ipv6CompAddr(multicastAddr, &IPV6_UNSPECIFIED_ADDR) ||
 80095ee:	2210      	movs	r2, #16
 80095f0:	4909      	ldr	r1, [pc, #36]	@ (8009618 <mldNodeMatchGroup+0x34>)
 80095f2:	4628      	mov	r0, r5
 80095f4:	f00b fb1c 	bl	8014c30 <memcmp>
 80095f8:	b148      	cbz	r0, 800960e <mldNodeMatchGroup+0x2a>
         ipv6CompAddr(multicastAddr, &group->addr))
 80095fa:	2210      	movs	r2, #16
 80095fc:	1c61      	adds	r1, r4, #1
 80095fe:	4628      	mov	r0, r5
 8009600:	f00b fb16 	bl	8014c30 <memcmp>
      if(ipv6CompAddr(multicastAddr, &IPV6_UNSPECIFIED_ADDR) ||
 8009604:	b128      	cbz	r0, 8009612 <mldNodeMatchGroup+0x2e>
   match = FALSE;
 8009606:	2000      	movs	r0, #0
 8009608:	e000      	b.n	800960c <mldNodeMatchGroup+0x28>
 800960a:	2000      	movs	r0, #0
      }
   }

   //Return TRUE if the group matches the specified multicast address
   return match;
}
 800960c:	bd38      	pop	{r3, r4, r5, pc}
         match = TRUE;
 800960e:	2001      	movs	r0, #1
 8009610:	e7fc      	b.n	800960c <mldNodeMatchGroup+0x28>
 8009612:	2001      	movs	r0, #1
   return match;
 8009614:	e7fa      	b.n	800960c <mldNodeMatchGroup+0x28>
 8009616:	bf00      	nop
 8009618:	08019f20 	.word	0x08019f20

0800961c <mldNodeSendCurrentStateReport>:
{
 800961c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	4605      	mov	r5, r0
 8009624:	460f      	mov	r7, r1
   buffer = ipAllocBuffer(MLD_MAX_MSG_SIZE, &offset);
 8009626:	4669      	mov	r1, sp
 8009628:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800962c:	f7fb ffc1 	bl	80055b2 <ipAllocBuffer>
   if(buffer == NULL)
 8009630:	2800      	cmp	r0, #0
 8009632:	d05c      	beq.n	80096ee <mldNodeSendCurrentStateReport+0xd2>
 8009634:	4680      	mov	r8, r0
   message = netBufferAt(buffer, offset, 0);
 8009636:	2200      	movs	r2, #0
 8009638:	9900      	ldr	r1, [sp, #0]
 800963a:	f002 fdbd 	bl	800c1b8 <netBufferAt>
 800963e:	4606      	mov	r6, r0
   message->type = ICMPV6_TYPE_MCAST_LISTENER_REPORT_V2;
 8009640:	238f      	movs	r3, #143	@ 0x8f
 8009642:	7003      	strb	r3, [r0, #0]
   message->reserved = 0;
 8009644:	2400      	movs	r4, #0
 8009646:	7044      	strb	r4, [r0, #1]
   message->checksum = 0;
 8009648:	7084      	strb	r4, [r0, #2]
 800964a:	70c4      	strb	r4, [r0, #3]
   message->flags = 0;
 800964c:	7104      	strb	r4, [r0, #4]
 800964e:	7144      	strb	r4, [r0, #5]
   message->numOfMcastAddrRecords = 0;
 8009650:	7184      	strb	r4, [r0, #6]
 8009652:	71c4      	strb	r4, [r0, #7]
   length = sizeof(MldListenerReportV2);
 8009654:	2308      	movs	r3, #8
 8009656:	9301      	str	r3, [sp, #4]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009658:	e01f      	b.n	800969a <mldNodeSendCurrentStateReport+0x7e>
            record = (MldMcastAddrRecord *) ((uint8_t *) message + length);
 800965a:	9a01      	ldr	r2, [sp, #4]
 800965c:	18b3      	adds	r3, r6, r2
            record->recordType = MLD_MCAST_ADDR_RECORD_TYPE_IS_EX;
 800965e:	2102      	movs	r1, #2
 8009660:	54b1      	strb	r1, [r6, r2]
            record->auxDataLen = 0;
 8009662:	2200      	movs	r2, #0
 8009664:	705a      	strb	r2, [r3, #1]
            record->numOfSources = HTONS(0);
 8009666:	709a      	strb	r2, [r3, #2]
 8009668:	70da      	strb	r2, [r3, #3]
            record->multicastAddr = group->addr;
 800966a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800966e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8009672:	f8d2 c02d 	ldr.w	ip, [r2, #45]	@ 0x2d
 8009676:	f8d2 0031 	ldr.w	r0, [r2, #49]	@ 0x31
 800967a:	f8d2 1035 	ldr.w	r1, [r2, #53]	@ 0x35
 800967e:	f8d2 2039 	ldr.w	r2, [r2, #57]	@ 0x39
 8009682:	f8c3 c004 	str.w	ip, [r3, #4]
 8009686:	6098      	str	r0, [r3, #8]
 8009688:	60d9      	str	r1, [r3, #12]
 800968a:	611a      	str	r2, [r3, #16]
            message->numOfMcastAddrRecords++;
 800968c:	88f3      	ldrh	r3, [r6, #6]
 800968e:	3301      	adds	r3, #1
 8009690:	80f3      	strh	r3, [r6, #6]
            length += n;
 8009692:	9b01      	ldr	r3, [sp, #4]
 8009694:	3314      	adds	r3, #20
 8009696:	9301      	str	r3, [sp, #4]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009698:	3401      	adds	r4, #1
 800969a:	2c07      	cmp	r4, #7
 800969c:	d81e      	bhi.n	80096dc <mldNodeSendCurrentStateReport+0xc0>
      group = &context->groups[i];
 800969e:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80096a2:	0100      	lsls	r0, r0, #4
 80096a4:	3028      	adds	r0, #40	@ 0x28
 80096a6:	4428      	add	r0, r5
      if(mldNodeMatchGroup(group, groupAddr))
 80096a8:	4639      	mov	r1, r7
 80096aa:	3004      	adds	r0, #4
 80096ac:	f7ff ff9a 	bl	80095e4 <mldNodeMatchGroup>
 80096b0:	2800      	cmp	r0, #0
 80096b2:	d0f1      	beq.n	8009698 <mldNodeSendCurrentStateReport+0x7c>
         if(group->filterMode == IP_FILTER_MODE_EXCLUDE)
 80096b4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80096b8:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80096bc:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d1e9      	bne.n	8009698 <mldNodeSendCurrentStateReport+0x7c>
            if((length + n) > MLD_MAX_MSG_SIZE)
 80096c4:	9b01      	ldr	r3, [sp, #4]
 80096c6:	3314      	adds	r3, #20
 80096c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80096cc:	d9c5      	bls.n	800965a <mldNodeSendCurrentStateReport+0x3e>
               mldNodeFlushReportRecords(context, buffer, offset, &length);
 80096ce:	ab01      	add	r3, sp, #4
 80096d0:	9a00      	ldr	r2, [sp, #0]
 80096d2:	4641      	mov	r1, r8
 80096d4:	4628      	mov	r0, r5
 80096d6:	f7ff fe9f 	bl	8009418 <mldNodeFlushReportRecords>
 80096da:	e7be      	b.n	800965a <mldNodeSendCurrentStateReport+0x3e>
   mldNodeFlushReportRecords(context, buffer, offset, &length);
 80096dc:	ab01      	add	r3, sp, #4
 80096de:	9a00      	ldr	r2, [sp, #0]
 80096e0:	4641      	mov	r1, r8
 80096e2:	4628      	mov	r0, r5
 80096e4:	f7ff fe98 	bl	8009418 <mldNodeFlushReportRecords>
   netBufferFree(buffer);
 80096e8:	4640      	mov	r0, r8
 80096ea:	f002 fd3d 	bl	800c168 <netBufferFree>
}
 80096ee:	b002      	add	sp, #8
 80096f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080096f4 <mldNodeSendStateChangeReport>:
{
 80096f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f8:	b085      	sub	sp, #20
 80096fa:	4606      	mov	r6, r0
 80096fc:	468b      	mov	fp, r1
   buffer = ipAllocBuffer(MLD_MAX_MSG_SIZE, &offset);
 80096fe:	a902      	add	r1, sp, #8
 8009700:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8009704:	f7fb ff55 	bl	80055b2 <ipAllocBuffer>
   if(buffer == NULL)
 8009708:	9001      	str	r0, [sp, #4]
 800970a:	2800      	cmp	r0, #0
 800970c:	d07c      	beq.n	8009808 <mldNodeSendStateChangeReport+0x114>
   message = netBufferAt(buffer, offset, 0);
 800970e:	2200      	movs	r2, #0
 8009710:	9902      	ldr	r1, [sp, #8]
 8009712:	f002 fd51 	bl	800c1b8 <netBufferAt>
 8009716:	4607      	mov	r7, r0
   message->type = ICMPV6_TYPE_MCAST_LISTENER_REPORT_V2;
 8009718:	238f      	movs	r3, #143	@ 0x8f
 800971a:	7003      	strb	r3, [r0, #0]
   message->reserved = 0;
 800971c:	2500      	movs	r5, #0
 800971e:	7045      	strb	r5, [r0, #1]
   message->checksum = 0;
 8009720:	7085      	strb	r5, [r0, #2]
 8009722:	70c5      	strb	r5, [r0, #3]
   message->flags = 0;
 8009724:	7105      	strb	r5, [r0, #4]
 8009726:	7145      	strb	r5, [r0, #5]
   message->numOfMcastAddrRecords = 0;
 8009728:	7185      	strb	r5, [r0, #6]
 800972a:	71c5      	strb	r5, [r0, #7]
   length = sizeof(MldListenerReportV2);
 800972c:	2308      	movs	r3, #8
 800972e:	9303      	str	r3, [sp, #12]
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009730:	e02f      	b.n	8009792 <mldNodeSendStateChangeReport+0x9e>
               mldNodeFlushReportRecords(context, buffer, offset, &length);
 8009732:	ab03      	add	r3, sp, #12
 8009734:	9a02      	ldr	r2, [sp, #8]
 8009736:	9901      	ldr	r1, [sp, #4]
 8009738:	4630      	mov	r0, r6
 800973a:	f7ff fe6d 	bl	8009418 <mldNodeFlushReportRecords>
 800973e:	e04b      	b.n	80097d8 <mldNodeSendStateChangeReport+0xe4>
               record->recordType = MLD_MCAST_ADDR_RECORD_TYPE_TO_IN;
 8009740:	2303      	movs	r3, #3
 8009742:	54bb      	strb	r3, [r7, r2]
            record->auxDataLen = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	f88a 3001 	strb.w	r3, [sl, #1]
            record->numOfSources = htons(group->filter.numSources);
 800974a:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800974e:	eb06 1808 	add.w	r8, r6, r8, lsl #4
 8009752:	f8b8 0058 	ldrh.w	r0, [r8, #88]	@ 0x58
 8009756:	f7f6 ff61 	bl	800061c <swapInt16>
 800975a:	f8aa 0002 	strh.w	r0, [sl, #2]
            record->multicastAddr = group->addr;
 800975e:	f8d8 002d 	ldr.w	r0, [r8, #45]	@ 0x2d
 8009762:	f8d8 1031 	ldr.w	r1, [r8, #49]	@ 0x31
 8009766:	f8d8 2035 	ldr.w	r2, [r8, #53]	@ 0x35
 800976a:	f8d8 3039 	ldr.w	r3, [r8, #57]	@ 0x39
 800976e:	f8ca 0004 	str.w	r0, [sl, #4]
 8009772:	f8ca 1008 	str.w	r1, [sl, #8]
 8009776:	f8ca 200c 	str.w	r2, [sl, #12]
 800977a:	f8ca 3010 	str.w	r3, [sl, #16]
            message->numOfMcastAddrRecords++;
 800977e:	88fb      	ldrh	r3, [r7, #6]
 8009780:	3301      	adds	r3, #1
 8009782:	80fb      	strh	r3, [r7, #6]
            length += n;
 8009784:	9b03      	ldr	r3, [sp, #12]
 8009786:	444b      	add	r3, r9
 8009788:	9303      	str	r3, [sp, #12]
         mldNodeDecGroupRetransmitCounters(group);
 800978a:	4620      	mov	r0, r4
 800978c:	f7ff fe98 	bl	80094c0 <mldNodeDecGroupRetransmitCounters>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009790:	3501      	adds	r5, #1
 8009792:	2d07      	cmp	r5, #7
 8009794:	d82e      	bhi.n	80097f4 <mldNodeSendStateChangeReport+0x100>
      group = &context->groups[i];
 8009796:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800979a:	0124      	lsls	r4, r4, #4
 800979c:	3428      	adds	r4, #40	@ 0x28
 800979e:	4434      	add	r4, r6
 80097a0:	3404      	adds	r4, #4
      if(mldNodeMatchGroup(group, groupAddr))
 80097a2:	4659      	mov	r1, fp
 80097a4:	4620      	mov	r0, r4
 80097a6:	f7ff ff1d 	bl	80095e4 <mldNodeMatchGroup>
 80097aa:	2800      	cmp	r0, #0
 80097ac:	d0f0      	beq.n	8009790 <mldNodeSendStateChangeReport+0x9c>
         if(group->retransmitCount > 0)
 80097ae:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80097b2:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80097b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d0e6      	beq.n	800978a <mldNodeSendStateChangeReport+0x96>
            n = sizeof(MldMcastAddrRecord) + group->filter.numSources *
 80097bc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80097c0:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80097c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c6:	ea4f 1903 	mov.w	r9, r3, lsl #4
 80097ca:	f109 0914 	add.w	r9, r9, #20
            if((length + n) > MLD_MAX_MSG_SIZE)
 80097ce:	9b03      	ldr	r3, [sp, #12]
 80097d0:	444b      	add	r3, r9
 80097d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80097d6:	d8ac      	bhi.n	8009732 <mldNodeSendStateChangeReport+0x3e>
            record = (MldMcastAddrRecord *) ((uint8_t *) message + length);
 80097d8:	9a03      	ldr	r2, [sp, #12]
 80097da:	eb07 0a02 	add.w	sl, r7, r2
            if(group->filterMode == IP_FILTER_MODE_INCLUDE)
 80097de:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80097e2:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80097e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d0a8      	beq.n	8009740 <mldNodeSendStateChangeReport+0x4c>
               record->recordType = MLD_MCAST_ADDR_RECORD_TYPE_TO_EX;
 80097ee:	2304      	movs	r3, #4
 80097f0:	54bb      	strb	r3, [r7, r2]
 80097f2:	e7a7      	b.n	8009744 <mldNodeSendStateChangeReport+0x50>
   mldNodeFlushReportRecords(context, buffer, offset, &length);
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9a02      	ldr	r2, [sp, #8]
 80097f8:	9c01      	ldr	r4, [sp, #4]
 80097fa:	4621      	mov	r1, r4
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff fe0b 	bl	8009418 <mldNodeFlushReportRecords>
   netBufferFree(buffer);
 8009802:	4620      	mov	r0, r4
 8009804:	f002 fcb0 	bl	800c168 <netBufferFree>
}
 8009808:	b005      	add	sp, #20
 800980a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800980e <mldNodeSendUnsolicitedReport>:
{
 800980e:	b538      	push	{r3, r4, r5, lr}
 8009810:	4604      	mov	r4, r0
 8009812:	460d      	mov	r5, r1
   group = mldNodeFindGroup(context, groupAddr);
 8009814:	f7ff feac 	bl	8009570 <mldNodeFindGroup>
   if(group != NULL)
 8009818:	b110      	cbz	r0, 8009820 <mldNodeSendUnsolicitedReport+0x12>
      if(group->state == MLD_NODE_GROUP_STATE_INIT_LISTENER)
 800981a:	7803      	ldrb	r3, [r0, #0]
 800981c:	2b01      	cmp	r3, #1
 800981e:	d000      	beq.n	8009822 <mldNodeSendUnsolicitedReport+0x14>
}
 8009820:	bd38      	pop	{r3, r4, r5, pc}
         if(context->compatibilityMode == MLD_VERSION_1)
 8009822:	7923      	ldrb	r3, [r4, #4]
 8009824:	2b01      	cmp	r3, #1
 8009826:	d004      	beq.n	8009832 <mldNodeSendUnsolicitedReport+0x24>
            mldNodeSendStateChangeReport(context, groupAddr);
 8009828:	4629      	mov	r1, r5
 800982a:	4620      	mov	r0, r4
 800982c:	f7ff ff62 	bl	80096f4 <mldNodeSendStateChangeReport>
}
 8009830:	e7f6      	b.n	8009820 <mldNodeSendUnsolicitedReport+0x12>
            mldNodeSendListenerReport(context, groupAddr);
 8009832:	4629      	mov	r1, r5
 8009834:	4620      	mov	r0, r4
 8009836:	f7ff fd92 	bl	800935e <mldNodeSendListenerReport>
 800983a:	e7f1      	b.n	8009820 <mldNodeSendUnsolicitedReport+0x12>

0800983c <mldNodeProcessListenerQueryV2>:
{
 800983c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009840:	461f      	mov	r7, r3
   if(context->compatibilityMode < MLD_VERSION_2)
 8009842:	7903      	ldrb	r3, [r0, #4]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d915      	bls.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
 8009848:	4604      	mov	r4, r0
 800984a:	4615      	mov	r5, r2
   if(length < sizeof(MldListenerQueryV2))
 800984c:	2f1b      	cmp	r7, #27
 800984e:	d911      	bls.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
   if(!ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) &&
 8009850:	f102 0608 	add.w	r6, r2, #8
 8009854:	2210      	movs	r2, #16
 8009856:	4930      	ldr	r1, [pc, #192]	@ (8009918 <mldNodeProcessListenerQueryV2+0xdc>)
 8009858:	4630      	mov	r0, r6
 800985a:	f00b f9e9 	bl	8014c30 <memcmp>
 800985e:	b110      	cbz	r0, 8009866 <mldNodeProcessListenerQueryV2+0x2a>
      !ipv6IsMulticastAddr(&message->multicastAddr))
 8009860:	7a2b      	ldrb	r3, [r5, #8]
   if(!ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) &&
 8009862:	2bff      	cmp	r3, #255	@ 0xff
 8009864:	d106      	bne.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
   n = ntohs(message->numOfSources);
 8009866:	8b68      	ldrh	r0, [r5, #26]
 8009868:	f7f6 fed8 	bl	800061c <swapInt16>
   if(length < (sizeof(MldListenerQueryV2) + n * sizeof(Ipv6Addr)))
 800986c:	0100      	lsls	r0, r0, #4
 800986e:	301c      	adds	r0, #28
 8009870:	42b8      	cmp	r0, r7
 8009872:	d901      	bls.n	8009878 <mldNodeProcessListenerQueryV2+0x3c>
}
 8009874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   maxRespCode = ntohs(message->maxRespCode);
 8009878:	88a8      	ldrh	r0, [r5, #4]
 800987a:	f7f6 fecf 	bl	800061c <swapInt16>
   if(maxRespCode < 32768)
 800987e:	f410 4f00 	tst.w	r0, #32768	@ 0x8000
 8009882:	d110      	bne.n	80098a6 <mldNodeProcessListenerQueryV2+0x6a>
   delay = mldGetRandomDelay(maxRespDelay);
 8009884:	f7ff fb94 	bl	8008fb0 <mldGetRandomDelay>
 8009888:	4607      	mov	r7, r0
   if(netTimerRunning(&context->generalQueryTimer) &&
 800988a:	f104 0514 	add.w	r5, r4, #20
 800988e:	4628      	mov	r0, r5
 8009890:	f003 f821 	bl	800c8d6 <netTimerRunning>
 8009894:	b950      	cbnz	r0, 80098ac <mldNodeProcessListenerQueryV2+0x70>
   else if(ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR))
 8009896:	2210      	movs	r2, #16
 8009898:	491f      	ldr	r1, [pc, #124]	@ (8009918 <mldNodeProcessListenerQueryV2+0xdc>)
 800989a:	4630      	mov	r0, r6
 800989c:	f00b f9c8 	bl	8014c30 <memcmp>
 80098a0:	b150      	cbz	r0, 80098b8 <mldNodeProcessListenerQueryV2+0x7c>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80098a2:	2500      	movs	r5, #0
 80098a4:	e013      	b.n	80098ce <mldNodeProcessListenerQueryV2+0x92>
      maxRespDelay = mldDecodeFloatingPointValue16(maxRespCode);
 80098a6:	f7ff fb8e 	bl	8008fc6 <mldDecodeFloatingPointValue16>
 80098aa:	e7eb      	b.n	8009884 <mldNodeProcessListenerQueryV2+0x48>
      netGetRemainingTime(&context->generalQueryTimer) < delay)
 80098ac:	4628      	mov	r0, r5
 80098ae:	f003 f824 	bl	800c8fa <netGetRemainingTime>
   if(netTimerRunning(&context->generalQueryTimer) &&
 80098b2:	42b8      	cmp	r0, r7
 80098b4:	d3de      	bcc.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
 80098b6:	e7ee      	b.n	8009896 <mldNodeProcessListenerQueryV2+0x5a>
      netStartTimer(&context->generalQueryTimer, delay);
 80098b8:	4639      	mov	r1, r7
 80098ba:	4628      	mov	r0, r5
 80098bc:	f002 fffe 	bl	800c8bc <netStartTimer>
 80098c0:	e7d8      	b.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
               if(delay < netGetRemainingTime(&group->timer))
 80098c2:	4640      	mov	r0, r8
 80098c4:	f003 f819 	bl	800c8fa <netGetRemainingTime>
 80098c8:	42b8      	cmp	r0, r7
 80098ca:	d820      	bhi.n	800990e <mldNodeProcessListenerQueryV2+0xd2>
      for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 80098cc:	3501      	adds	r5, #1
 80098ce:	2d07      	cmp	r5, #7
 80098d0:	d8d0      	bhi.n	8009874 <mldNodeProcessListenerQueryV2+0x38>
         group = &context->groups[i];
 80098d2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	3328      	adds	r3, #40	@ 0x28
 80098da:	4423      	add	r3, r4
         if(mldNodeMatchGroup(group, &message->multicastAddr))
 80098dc:	4631      	mov	r1, r6
 80098de:	1d18      	adds	r0, r3, #4
 80098e0:	f7ff fe80 	bl	80095e4 <mldNodeMatchGroup>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d0f1      	beq.n	80098cc <mldNodeProcessListenerQueryV2+0x90>
            if(!netTimerRunning(&group->timer))
 80098e8:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 80098ec:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80098f0:	f108 0840 	add.w	r8, r8, #64	@ 0x40
 80098f4:	44a0      	add	r8, r4
 80098f6:	f108 0808 	add.w	r8, r8, #8
 80098fa:	4640      	mov	r0, r8
 80098fc:	f002 ffeb 	bl	800c8d6 <netTimerRunning>
 8009900:	2800      	cmp	r0, #0
 8009902:	d1de      	bne.n	80098c2 <mldNodeProcessListenerQueryV2+0x86>
               netStartTimer(&group->timer, delay);
 8009904:	4639      	mov	r1, r7
 8009906:	4640      	mov	r0, r8
 8009908:	f002 ffd8 	bl	800c8bc <netStartTimer>
 800990c:	e7de      	b.n	80098cc <mldNodeProcessListenerQueryV2+0x90>
                  netStartTimer(&group->timer, delay);
 800990e:	4639      	mov	r1, r7
 8009910:	4640      	mov	r0, r8
 8009912:	f002 ffd3 	bl	800c8bc <netStartTimer>
 8009916:	e7d9      	b.n	80098cc <mldNodeProcessListenerQueryV2+0x90>
 8009918:	08019f20 	.word	0x08019f20

0800991c <mldNodeDeleteGroup>:
   //Debug message
   TRACE_DEBUG("Deleting MLD group (%s)...\r\n",
      ipv6AddrToString(&group->addr, NULL));

   //Groups in Non-Listener state require no storage in the host
   group->state = MLD_NODE_GROUP_STATE_NON_LISTENER;
 800991c:	2300      	movs	r3, #0
 800991e:	7003      	strb	r3, [r0, #0]
}
 8009920:	4770      	bx	lr

08009922 <mldNodeFlushUnusedGroups>:
 * @brief Delete groups in "non-existent" state
 * @param[in] context Pointer to the MLD node context
 **/

void mldNodeFlushUnusedGroups(MldNodeContext *context)
{
 8009922:	b570      	push	{r4, r5, r6, lr}
 8009924:	4606      	mov	r6, r0
   uint_t i;
   MldNodeGroup *group;

   //Loop through multicast groups
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009926:	2500      	movs	r5, #0
 8009928:	e000      	b.n	800992c <mldNodeFlushUnusedGroups+0xa>
 800992a:	3501      	adds	r5, #1
 800992c:	2d07      	cmp	r5, #7
 800992e:	d825      	bhi.n	800997c <mldNodeFlushUnusedGroups+0x5a>
   {
      //Point to the current group
      group = &context->groups[i];
 8009930:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009934:	011b      	lsls	r3, r3, #4
 8009936:	3328      	adds	r3, #40	@ 0x28
 8009938:	4433      	add	r3, r6
 800993a:	1d1c      	adds	r4, r3, #4

      //Valid group?
      if(group->state != MLD_NODE_GROUP_STATE_NON_LISTENER)
 800993c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8009940:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8009944:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009948:	2b00      	cmp	r3, #0
 800994a:	d0ee      	beq.n	800992a <mldNodeFlushUnusedGroups+0x8>
      {
         //Retransmission state needs to be maintained until [Robustness
         //Variable] State-Change reports have been sent by the host
         if(!mldNodeGetGroupRetransmitStatus(group))
 800994c:	4620      	mov	r0, r4
 800994e:	f7ff fd94 	bl	800947a <mldNodeGetGroupRetransmitStatus>
 8009952:	2800      	cmp	r0, #0
 8009954:	d1e9      	bne.n	800992a <mldNodeFlushUnusedGroups+0x8>
         {
            //The "non-existent" state is considered to have a filter mode of
            //INCLUDE and an empty source list
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8009956:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800995a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800995e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8009962:	2b01      	cmp	r3, #1
 8009964:	d1e1      	bne.n	800992a <mldNodeFlushUnusedGroups+0x8>
               group->filter.numSources == 0)
 8009966:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 800996a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 800996e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
            if(group->filterMode == IP_FILTER_MODE_INCLUDE &&
 8009970:	2b00      	cmp	r3, #0
 8009972:	d1da      	bne.n	800992a <mldNodeFlushUnusedGroups+0x8>
            {
               //Delete the group
               mldNodeDeleteGroup(group);
 8009974:	4620      	mov	r0, r4
 8009976:	f7ff ffd1 	bl	800991c <mldNodeDeleteGroup>
 800997a:	e7d6      	b.n	800992a <mldNodeFlushUnusedGroups+0x8>
            }
         }
      }
   }
}
 800997c:	bd70      	pop	{r4, r5, r6, pc}

0800997e <mldNodeChangeCompatibilityMode>:
{
 800997e:	b570      	push	{r4, r5, r6, lr}
 8009980:	4605      	mov	r5, r0
   context->compatibilityMode = compatibilityMode;
 8009982:	7101      	strb	r1, [r0, #4]
   netStopTimer(&context->generalQueryTimer);
 8009984:	3014      	adds	r0, #20
 8009986:	f002 ffa3 	bl	800c8d0 <netStopTimer>
   netStopTimer(&context->stateChangeReportTimer);
 800998a:	f105 0020 	add.w	r0, r5, #32
 800998e:	f002 ff9f 	bl	800c8d0 <netStopTimer>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009992:	2400      	movs	r4, #0
 8009994:	e000      	b.n	8009998 <mldNodeChangeCompatibilityMode+0x1a>
 8009996:	3401      	adds	r4, #1
 8009998:	2c07      	cmp	r4, #7
 800999a:	d819      	bhi.n	80099d0 <mldNodeChangeCompatibilityMode+0x52>
      if(group->state != MLD_NODE_GROUP_STATE_NON_LISTENER)
 800999c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 80099a0:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 80099a4:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d0f4      	beq.n	8009996 <mldNodeChangeCompatibilityMode+0x18>
         group->retransmitCount = 0;
 80099ac:	eb04 0644 	add.w	r6, r4, r4, lsl #1
 80099b0:	eb05 1606 	add.w	r6, r5, r6, lsl #4
 80099b4:	2300      	movs	r3, #0
 80099b6:	6473      	str	r3, [r6, #68]	@ 0x44
         netStopTimer(&group->timer);
 80099b8:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 80099bc:	0100      	lsls	r0, r0, #4
 80099be:	3040      	adds	r0, #64	@ 0x40
 80099c0:	4428      	add	r0, r5
 80099c2:	3008      	adds	r0, #8
 80099c4:	f002 ff84 	bl	800c8d0 <netStopTimer>
         group->state = MLD_NODE_GROUP_STATE_IDLE_LISTENER;
 80099c8:	2303      	movs	r3, #3
 80099ca:	f886 302c 	strb.w	r3, [r6, #44]	@ 0x2c
 80099ce:	e7e2      	b.n	8009996 <mldNodeChangeCompatibilityMode+0x18>
   mldNodeFlushUnusedGroups(context);
 80099d0:	4628      	mov	r0, r5
 80099d2:	f7ff ffa6 	bl	8009922 <mldNodeFlushUnusedGroups>
}
 80099d6:	bd70      	pop	{r4, r5, r6, pc}

080099d8 <mldNodeProcessListenerQuery>:
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 80099d8:	780b      	ldrb	r3, [r1, #0]
 80099da:	2bfe      	cmp	r3, #254	@ 0xfe
 80099dc:	d16c      	bne.n	8009ab8 <mldNodeProcessListenerQuery+0xe0>
{
 80099de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099e2:	4605      	mov	r5, r0
 80099e4:	4614      	mov	r4, r2
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 80099e6:	784b      	ldrb	r3, [r1, #1]
 80099e8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80099ec:	2b80      	cmp	r3, #128	@ 0x80
 80099ee:	d161      	bne.n	8009ab4 <mldNodeProcessListenerQuery+0xdc>
   if(!ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) &&
 80099f0:	f102 0608 	add.w	r6, r2, #8
 80099f4:	2210      	movs	r2, #16
 80099f6:	4931      	ldr	r1, [pc, #196]	@ (8009abc <mldNodeProcessListenerQuery+0xe4>)
 80099f8:	4630      	mov	r0, r6
 80099fa:	f00b f919 	bl	8014c30 <memcmp>
 80099fe:	b110      	cbz	r0, 8009a06 <mldNodeProcessListenerQuery+0x2e>
      !ipv6IsMulticastAddr(&message->multicastAddr))
 8009a00:	7a23      	ldrb	r3, [r4, #8]
   if(!ipv6CompAddr(&message->multicastAddr, &IPV6_UNSPECIFIED_ADDR) &&
 8009a02:	2bff      	cmp	r3, #255	@ 0xff
 8009a04:	d156      	bne.n	8009ab4 <mldNodeProcessListenerQuery+0xdc>
   netStartTimer(&context->olderVersionQuerierPresentTimer,
 8009a06:	492e      	ldr	r1, [pc, #184]	@ (8009ac0 <mldNodeProcessListenerQuery+0xe8>)
 8009a08:	f105 0008 	add.w	r0, r5, #8
 8009a0c:	f002 ff56 	bl	800c8bc <netStartTimer>
   if(context->compatibilityMode > MLD_VERSION_1)
 8009a10:	792b      	ldrb	r3, [r5, #4]
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d805      	bhi.n	8009a22 <mldNodeProcessListenerQuery+0x4a>
   maxRespDelay = ntohs(message->maxRespDelay);
 8009a16:	88a0      	ldrh	r0, [r4, #4]
 8009a18:	f7f6 fe00 	bl	800061c <swapInt16>
 8009a1c:	4607      	mov	r7, r0
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009a1e:	2400      	movs	r4, #0
 8009a20:	e013      	b.n	8009a4a <mldNodeProcessListenerQuery+0x72>
      mldNodeChangeCompatibilityMode(context, MLD_VERSION_1);
 8009a22:	2101      	movs	r1, #1
 8009a24:	4628      	mov	r0, r5
 8009a26:	f7ff ffaa 	bl	800997e <mldNodeChangeCompatibilityMode>
 8009a2a:	e7f4      	b.n	8009a16 <mldNodeProcessListenerQuery+0x3e>
            if(maxRespDelay < netGetRemainingTime(&group->timer))
 8009a2c:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8009a30:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8009a34:	f108 0840 	add.w	r8, r8, #64	@ 0x40
 8009a38:	44a8      	add	r8, r5
 8009a3a:	f108 0808 	add.w	r8, r8, #8
 8009a3e:	4640      	mov	r0, r8
 8009a40:	f002 ff5b 	bl	800c8fa <netGetRemainingTime>
 8009a44:	42b8      	cmp	r0, r7
 8009a46:	d82d      	bhi.n	8009aa4 <mldNodeProcessListenerQuery+0xcc>
   for(i = 0; i < IPV6_MULTICAST_FILTER_SIZE; i++)
 8009a48:	3401      	adds	r4, #1
 8009a4a:	2c07      	cmp	r4, #7
 8009a4c:	d832      	bhi.n	8009ab4 <mldNodeProcessListenerQuery+0xdc>
      group = &context->groups[i];
 8009a4e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009a52:	011b      	lsls	r3, r3, #4
 8009a54:	3328      	adds	r3, #40	@ 0x28
 8009a56:	442b      	add	r3, r5
      if(mldNodeMatchGroup(group, &message->multicastAddr))
 8009a58:	4631      	mov	r1, r6
 8009a5a:	1d18      	adds	r0, r3, #4
 8009a5c:	f7ff fdc2 	bl	80095e4 <mldNodeMatchGroup>
 8009a60:	2800      	cmp	r0, #0
 8009a62:	d0f1      	beq.n	8009a48 <mldNodeProcessListenerQuery+0x70>
         if(group->state == MLD_NODE_GROUP_STATE_DELAYING_LISTENER)
 8009a64:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009a68:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8009a6c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8009a70:	2b02      	cmp	r3, #2
 8009a72:	d0db      	beq.n	8009a2c <mldNodeProcessListenerQuery+0x54>
         else if(group->state == MLD_NODE_GROUP_STATE_IDLE_LISTENER)
 8009a74:	2b03      	cmp	r3, #3
 8009a76:	d1e7      	bne.n	8009a48 <mldNodeProcessListenerQuery+0x70>
            delay = mldGetRandomDelay(maxRespDelay);
 8009a78:	4638      	mov	r0, r7
 8009a7a:	f7ff fa99 	bl	8008fb0 <mldGetRandomDelay>
 8009a7e:	4601      	mov	r1, r0
            netStartTimer(&group->timer, delay);
 8009a80:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8009a84:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8009a88:	011b      	lsls	r3, r3, #4
 8009a8a:	3340      	adds	r3, #64	@ 0x40
 8009a8c:	442b      	add	r3, r5
 8009a8e:	f103 0008 	add.w	r0, r3, #8
 8009a92:	f002 ff13 	bl	800c8bc <netStartTimer>
            group->state = MLD_NODE_GROUP_STATE_DELAYING_LISTENER;
 8009a96:	44a0      	add	r8, r4
 8009a98:	eb05 1808 	add.w	r8, r5, r8, lsl #4
 8009a9c:	2302      	movs	r3, #2
 8009a9e:	f888 302c 	strb.w	r3, [r8, #44]	@ 0x2c
 8009aa2:	e7d1      	b.n	8009a48 <mldNodeProcessListenerQuery+0x70>
               delay = mldGetRandomDelay(maxRespDelay);
 8009aa4:	4638      	mov	r0, r7
 8009aa6:	f7ff fa83 	bl	8008fb0 <mldGetRandomDelay>
 8009aaa:	4601      	mov	r1, r0
               netStartTimer(&group->timer, delay);
 8009aac:	4640      	mov	r0, r8
 8009aae:	f002 ff05 	bl	800c8bc <netStartTimer>
 8009ab2:	e7c9      	b.n	8009a48 <mldNodeProcessListenerQuery+0x70>
}
 8009ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	08019f20 	.word	0x08019f20
 8009ac0:	00061a80 	.word	0x00061a80

08009ac4 <mldNodeProcessMessage>:
{
 8009ac4:	b508      	push	{r3, lr}
   if(message->type == ICMPV6_TYPE_MCAST_LISTENER_QUERY)
 8009ac6:	f892 c000 	ldrb.w	ip, [r2]
 8009aca:	f1bc 0f82 	cmp.w	ip, #130	@ 0x82
 8009ace:	d003      	beq.n	8009ad8 <mldNodeProcessMessage+0x14>
   else if(message->type == ICMPV6_TYPE_MCAST_LISTENER_REPORT_V1)
 8009ad0:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 8009ad4:	d00a      	beq.n	8009aec <mldNodeProcessMessage+0x28>
}
 8009ad6:	bd08      	pop	{r3, pc}
      if(length == sizeof(MldMessage))
 8009ad8:	2b18      	cmp	r3, #24
 8009ada:	d004      	beq.n	8009ae6 <mldNodeProcessMessage+0x22>
      else if(length >= sizeof(MldListenerQueryV2))
 8009adc:	2b1b      	cmp	r3, #27
 8009ade:	d9fa      	bls.n	8009ad6 <mldNodeProcessMessage+0x12>
         mldNodeProcessListenerQueryV2(context, pseudoHeader,
 8009ae0:	f7ff feac 	bl	800983c <mldNodeProcessListenerQueryV2>
 8009ae4:	e7f7      	b.n	8009ad6 <mldNodeProcessMessage+0x12>
         mldNodeProcessListenerQuery(context, pseudoHeader, message, length);
 8009ae6:	f7ff ff77 	bl	80099d8 <mldNodeProcessListenerQuery>
 8009aea:	e7f4      	b.n	8009ad6 <mldNodeProcessMessage+0x12>
      mldNodeProcessListenerReport(context, pseudoHeader, message, length);
 8009aec:	f7ff fd65 	bl	80095ba <mldNodeProcessListenerReport>
}
 8009af0:	e7f1      	b.n	8009ad6 <mldNodeProcessMessage+0x12>
	...

08009af4 <nbnsSendQuery>:
 * @param[in] entry Pointer to a valid DNS cache entry
 * @return Error code
 **/

error_t nbnsSendQuery(DnsCacheEntry *entry)
{
 8009af4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af8:	b092      	sub	sp, #72	@ 0x48
 8009afa:	4606      	mov	r6, r0
   DnsQuestion *dnsQuestion;
   IpAddr destIpAddr;
   NetTxAncillary ancillary;

   //Allocate a memory buffer to hold the NBNS query message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 8009afc:	a911      	add	r1, sp, #68	@ 0x44
 8009afe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8009b02:	f006 ff67 	bl	80109d4 <udpAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 8009b06:	2800      	cmp	r0, #0
 8009b08:	d073      	beq.n	8009bf2 <nbnsSendQuery+0xfe>
 8009b0a:	4607      	mov	r7, r0
      return ERROR_OUT_OF_MEMORY;

   //Point to the NBNS header
   message = netBufferAt(buffer, offset, 0);
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009b10:	f002 fb52 	bl	800c1b8 <netBufferAt>
 8009b14:	4604      	mov	r4, r0

   //Format NBNS query message
   message->id = htons(entry->id);
 8009b16:	89f0      	ldrh	r0, [r6, #14]
 8009b18:	f7f6 fd80 	bl	800061c <swapInt16>
 8009b1c:	8020      	strh	r0, [r4, #0]
   message->qr = 0;
 8009b1e:	78a3      	ldrb	r3, [r4, #2]
 8009b20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b24:	70a3      	strb	r3, [r4, #2]
   message->opcode = DNS_OPCODE_QUERY;
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 8009b2c:	70a3      	strb	r3, [r4, #2]
   message->aa = 0;
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	f023 0304 	bic.w	r3, r3, #4
 8009b34:	70a3      	strb	r3, [r4, #2]
   message->tc = 0;
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	f023 0302 	bic.w	r3, r3, #2
 8009b3c:	70a3      	strb	r3, [r4, #2]
   message->rd = 0;
 8009b3e:	b2db      	uxtb	r3, r3
 8009b40:	f023 0301 	bic.w	r3, r3, #1
 8009b44:	70a3      	strb	r3, [r4, #2]
   message->ra = 0;
 8009b46:	78e3      	ldrb	r3, [r4, #3]
 8009b48:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b4c:	70e3      	strb	r3, [r4, #3]
   message->z = 0;
 8009b4e:	b2db      	uxtb	r3, r3
 8009b50:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8009b54:	70e3      	strb	r3, [r4, #3]
   message->b = 1;
 8009b56:	b2db      	uxtb	r3, r3
 8009b58:	f043 0310 	orr.w	r3, r3, #16
 8009b5c:	70e3      	strb	r3, [r4, #3]
   message->rcode = DNS_RCODE_NOERROR;
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	f023 030f 	bic.w	r3, r3, #15
 8009b64:	70e3      	strb	r3, [r4, #3]

   //The NBNS query contains one question
   message->qdcount = HTONS(1);
 8009b66:	2500      	movs	r5, #0
 8009b68:	7125      	strb	r5, [r4, #4]
 8009b6a:	f04f 0801 	mov.w	r8, #1
 8009b6e:	f884 8005 	strb.w	r8, [r4, #5]
   message->ancount = 0;
 8009b72:	71a5      	strb	r5, [r4, #6]
 8009b74:	71e5      	strb	r5, [r4, #7]
   message->nscount = 0;
 8009b76:	7225      	strb	r5, [r4, #8]
 8009b78:	7265      	strb	r5, [r4, #9]
   message->arcount = 0;
 8009b7a:	72a5      	strb	r5, [r4, #10]
 8009b7c:	72e5      	strb	r5, [r4, #11]

   //Length of the NBNS query message
   length = sizeof(DnsHeader);

   //Encode the NetBIOS name
   length += nbnsEncodeName(entry->name, message->questions);
 8009b7e:	f104 010c 	add.w	r1, r4, #12
 8009b82:	f106 0010 	add.w	r0, r6, #16
 8009b86:	f000 f983 	bl	8009e90 <nbnsEncodeName>
 8009b8a:	f100 020c 	add.w	r2, r0, #12

   //Point to the corresponding question structure
   dnsQuestion = DNS_GET_QUESTION(message, length);
 8009b8e:	18a3      	adds	r3, r4, r2
   //Fill in question structure
   dnsQuestion->qtype = HTONS(DNS_RR_TYPE_NB);
 8009b90:	54a5      	strb	r5, [r4, r2]
 8009b92:	2220      	movs	r2, #32
 8009b94:	705a      	strb	r2, [r3, #1]
   dnsQuestion->qclass = HTONS(DNS_RR_CLASS_IN);
 8009b96:	709d      	strb	r5, [r3, #2]
 8009b98:	f883 8003 	strb.w	r8, [r3, #3]

   //Update the length of the NBNS query message
   length += sizeof(DnsQuestion);
 8009b9c:	3010      	adds	r0, #16

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 8009b9e:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8009ba0:	4401      	add	r1, r0
 8009ba2:	4638      	mov	r0, r7
 8009ba4:	f002 fa75 	bl	800c092 <netBufferSetLength>
   TRACE_INFO("Sending NBNS message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message
   dnsDumpMessage((DnsHeader *) message, length);

   //NBNS only supports IPv4
   destIpAddr.length = sizeof(Ipv4Addr);
 8009ba8:	2304      	movs	r3, #4
 8009baa:	930c      	str	r3, [sp, #48]	@ 0x30

   //The destination address is the broadcast address
   error = ipv4GetBroadcastAddr(entry->interface, &destIpAddr.ipv4Addr);
 8009bac:	a90d      	add	r1, sp, #52	@ 0x34
 8009bae:	6870      	ldr	r0, [r6, #4]
 8009bb0:	f7fc fcac 	bl	800650c <ipv4GetBroadcastAddr>

   //Check status code
   if(!error)
 8009bb4:	4604      	mov	r4, r0
 8009bb6:	b130      	cbz	r0, 8009bc6 <nbnsSendQuery+0xd2>
      error = udpSendBuffer(entry->interface, NULL, NBNS_PORT, &destIpAddr,
         NBNS_PORT, buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 8009bb8:	4638      	mov	r0, r7
 8009bba:	f002 fad5 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	b012      	add	sp, #72	@ 0x48
 8009bc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8009bc6:	ac04      	add	r4, sp, #16
 8009bc8:	4d0b      	ldr	r5, [pc, #44]	@ (8009bf8 <nbnsSendQuery+0x104>)
 8009bca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009bcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009bce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009bd2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      error = udpSendBuffer(entry->interface, NULL, NBNS_PORT, &destIpAddr,
 8009bd6:	ab04      	add	r3, sp, #16
 8009bd8:	9303      	str	r3, [sp, #12]
 8009bda:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009bdc:	9302      	str	r3, [sp, #8]
 8009bde:	9701      	str	r7, [sp, #4]
 8009be0:	2289      	movs	r2, #137	@ 0x89
 8009be2:	9200      	str	r2, [sp, #0]
 8009be4:	ab0c      	add	r3, sp, #48	@ 0x30
 8009be6:	2100      	movs	r1, #0
 8009be8:	6870      	ldr	r0, [r6, #4]
 8009bea:	f006 fe23 	bl	8010834 <udpSendBuffer>
 8009bee:	4604      	mov	r4, r0
 8009bf0:	e7e2      	b.n	8009bb8 <nbnsSendQuery+0xc4>
      return ERROR_OUT_OF_MEMORY;
 8009bf2:	2464      	movs	r4, #100	@ 0x64
 8009bf4:	e7e3      	b.n	8009bbe <nbnsSendQuery+0xca>
 8009bf6:	bf00      	nop
 8009bf8:	08019fc4 	.word	0x08019fc4

08009bfc <nbnsResolve>:
{
 8009bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c00:	4605      	mov	r5, r0
 8009c02:	460e      	mov	r6, r1
 8009c04:	4617      	mov	r7, r2
   osAcquireMutex(&netMutex);
 8009c06:	483b      	ldr	r0, [pc, #236]	@ (8009cf4 <nbnsResolve+0xf8>)
 8009c08:	f7f6 fde9 	bl	80007de <osAcquireMutex>
   entry = dnsFindEntry(interface, name, HOST_TYPE_IPV4,
 8009c0c:	2304      	movs	r3, #4
 8009c0e:	2210      	movs	r2, #16
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	f7f8 fc18 	bl	8002448 <dnsFindEntry>
   if(entry != NULL)
 8009c18:	b1b8      	cbz	r0, 8009c4a <nbnsResolve+0x4e>
 8009c1a:	4604      	mov	r4, r0
      if(entry->state == DNS_STATE_RESOLVED ||
 8009c1c:	7803      	ldrb	r3, [r0, #0]
 8009c1e:	3b02      	subs	r3, #2
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b01      	cmp	r3, #1
 8009c24:	d906      	bls.n	8009c34 <nbnsResolve+0x38>
         error = ERROR_IN_PROGRESS;
 8009c26:	f240 2803 	movw	r8, #515	@ 0x203
   osReleaseMutex(&netMutex);
 8009c2a:	4832      	ldr	r0, [pc, #200]	@ (8009cf4 <nbnsResolve+0xf8>)
 8009c2c:	f7f6 fdde 	bl	80007ec <osReleaseMutex>
   delay = DNS_CACHE_INIT_POLLING_INTERVAL;
 8009c30:	240a      	movs	r4, #10
   while(error == ERROR_IN_PROGRESS)
 8009c32:	e038      	b.n	8009ca6 <nbnsResolve+0xaa>
         *ipAddr = entry->ipAddr;
 8009c34:	46bc      	mov	ip, r7
 8009c36:	3450      	adds	r4, #80	@ 0x50
 8009c38:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009c3a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	f8cc 3000 	str.w	r3, [ip]
         error = NO_ERROR;
 8009c44:	f04f 0800 	mov.w	r8, #0
 8009c48:	e7ef      	b.n	8009c2a <nbnsResolve+0x2e>
      entry = dnsCreateEntry();
 8009c4a:	f7f8 fbcd 	bl	80023e8 <dnsCreateEntry>
 8009c4e:	4604      	mov	r4, r0
      osStrcpy(entry->name, name);
 8009c50:	4631      	mov	r1, r6
 8009c52:	3010      	adds	r0, #16
 8009c54:	f00b f91a 	bl	8014e8c <strcpy>
      entry->type = HOST_TYPE_IPV4;
 8009c58:	2310      	movs	r3, #16
 8009c5a:	7063      	strb	r3, [r4, #1]
      entry->protocol = HOST_NAME_RESOLVER_NBNS;
 8009c5c:	2304      	movs	r3, #4
 8009c5e:	70a3      	strb	r3, [r4, #2]
      entry->interface = interface;
 8009c60:	6065      	str	r5, [r4, #4]
      entry->retransmitCount = NBNS_CLIENT_MAX_RETRIES;
 8009c62:	2303      	movs	r3, #3
 8009c64:	6723      	str	r3, [r4, #112]	@ 0x70
      error = nbnsSendQuery(entry);
 8009c66:	4620      	mov	r0, r4
 8009c68:	f7ff ff44 	bl	8009af4 <nbnsSendQuery>
      if(!error)
 8009c6c:	4680      	mov	r8, r0
 8009c6e:	2800      	cmp	r0, #0
 8009c70:	d1db      	bne.n	8009c2a <nbnsResolve+0x2e>
         entry->timestamp = osGetSystemTime();
 8009c72:	f7f6 fdc3 	bl	80007fc <osGetSystemTime>
 8009c76:	6660      	str	r0, [r4, #100]	@ 0x64
         entry->timeout = NBNS_CLIENT_INIT_TIMEOUT;
 8009c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009c7c:	66a3      	str	r3, [r4, #104]	@ 0x68
         entry->maxTimeout = NBNS_CLIENT_MAX_TIMEOUT;
 8009c7e:	66e3      	str	r3, [r4, #108]	@ 0x6c
         entry->retransmitCount--;
 8009c80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8009c82:	3b01      	subs	r3, #1
 8009c84:	6723      	str	r3, [r4, #112]	@ 0x70
         entry->state = DNS_STATE_IN_PROGRESS;
 8009c86:	2301      	movs	r3, #1
 8009c88:	7023      	strb	r3, [r4, #0]
         error = ERROR_IN_PROGRESS;
 8009c8a:	f240 2803 	movw	r8, #515	@ 0x203
 8009c8e:	e7cc      	b.n	8009c2a <nbnsResolve+0x2e>
         error = ERROR_FAILURE;
 8009c90:	f04f 0801 	mov.w	r8, #1
      osReleaseMutex(&netMutex);
 8009c94:	4817      	ldr	r0, [pc, #92]	@ (8009cf4 <nbnsResolve+0xf8>)
 8009c96:	f7f6 fda9 	bl	80007ec <osReleaseMutex>
      delay = MIN(delay * 2, DNS_CACHE_MAX_POLLING_INTERVAL);
 8009c9a:	0064      	lsls	r4, r4, #1
 8009c9c:	f5b4 7f7a 	cmp.w	r4, #1000	@ 0x3e8
 8009ca0:	bf28      	it	cs
 8009ca2:	f44f 747a 	movcs.w	r4, #1000	@ 0x3e8
   while(error == ERROR_IN_PROGRESS)
 8009ca6:	f240 2303 	movw	r3, #515	@ 0x203
 8009caa:	4598      	cmp	r8, r3
 8009cac:	d11e      	bne.n	8009cec <nbnsResolve+0xf0>
      osDelayTask(delay);
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f7f6 fd3a 	bl	8000728 <osDelayTask>
      osAcquireMutex(&netMutex);
 8009cb4:	480f      	ldr	r0, [pc, #60]	@ (8009cf4 <nbnsResolve+0xf8>)
 8009cb6:	f7f6 fd92 	bl	80007de <osAcquireMutex>
      entry = dnsFindEntry(interface, name, HOST_TYPE_IPV4,
 8009cba:	2304      	movs	r3, #4
 8009cbc:	2210      	movs	r2, #16
 8009cbe:	4631      	mov	r1, r6
 8009cc0:	4628      	mov	r0, r5
 8009cc2:	f7f8 fbc1 	bl	8002448 <dnsFindEntry>
      if(entry != NULL)
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	d0e2      	beq.n	8009c90 <nbnsResolve+0x94>
         if(entry->state == DNS_STATE_RESOLVED)
 8009cca:	7802      	ldrb	r2, [r0, #0]
 8009ccc:	2a02      	cmp	r2, #2
 8009cce:	d1e1      	bne.n	8009c94 <nbnsResolve+0x98>
            *ipAddr = entry->ipAddr;
 8009cd0:	46be      	mov	lr, r7
 8009cd2:	f100 0c50 	add.w	ip, r0, #80	@ 0x50
 8009cd6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8009cda:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8009cde:	f8dc 3000 	ldr.w	r3, [ip]
 8009ce2:	f8ce 3000 	str.w	r3, [lr]
            error = NO_ERROR;
 8009ce6:	f04f 0800 	mov.w	r8, #0
 8009cea:	e7d3      	b.n	8009c94 <nbnsResolve+0x98>
}
 8009cec:	4640      	mov	r0, r8
 8009cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000b50 	.word	0x20000b50

08009cf8 <nbnsProcessResponse>:
 * @param[in] length Length of the message
 **/

void nbnsProcessResponse(NetInterface *interface, const Ipv4PseudoHeader *pseudoHeader,
   const UdpHeader *udpHeader, const NbnsHeader *message, size_t length)
{
 8009cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cfc:	461c      	mov	r4, r3
 8009cfe:	9d08      	ldr	r5, [sp, #32]
   DnsCacheEntry *entry;
   DnsResourceRecord *record;
   NbnsAddrEntry *addrEntry;

   //The NBNS response shall contain one answer
   if(ntohs(message->qdcount) != 0 && ntohs(message->ancount) != 1)
 8009d00:	8898      	ldrh	r0, [r3, #4]
 8009d02:	f7f6 fc8b 	bl	800061c <swapInt16>
 8009d06:	b120      	cbz	r0, 8009d12 <nbnsProcessResponse+0x1a>
 8009d08:	88e0      	ldrh	r0, [r4, #6]
 8009d0a:	f7f6 fc87 	bl	800061c <swapInt16>
 8009d0e:	2801      	cmp	r0, #1
 8009d10:	d10d      	bne.n	8009d2e <nbnsProcessResponse+0x36>
      return;

   //Parse NetBIOS name
   pos = nbnsParseName(message, length, sizeof(DnsHeader), NULL);
 8009d12:	2300      	movs	r3, #0
 8009d14:	220c      	movs	r2, #12
 8009d16:	4629      	mov	r1, r5
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f000 f8f3 	bl	8009f04 <nbnsParseName>
   //Invalid name?
   if(!pos)
 8009d1e:	4606      	mov	r6, r0
 8009d20:	b128      	cbz	r0, 8009d2e <nbnsProcessResponse+0x36>
      return;

   //Point to the associated resource record
   record = DNS_GET_RESOURCE_RECORD(message, pos);
 8009d22:	eb04 0800 	add.w	r8, r4, r0
   //Point to the resource data
   pos += sizeof(DnsResourceRecord);
 8009d26:	f100 070a 	add.w	r7, r0, #10

   //Make sure the resource record is valid
   if(pos > length)
 8009d2a:	42bd      	cmp	r5, r7
 8009d2c:	d201      	bcs.n	8009d32 <nbnsProcessResponse+0x3a>
               entry->state = DNS_STATE_RESOLVED;
            }
         }
      }
   }
}
 8009d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   if((pos + ntohs(record->rdlength)) > length)
 8009d32:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8009d36:	f7f6 fc71 	bl	800061c <swapInt16>
 8009d3a:	4438      	add	r0, r7
 8009d3c:	42a8      	cmp	r0, r5
 8009d3e:	d8f6      	bhi.n	8009d2e <nbnsProcessResponse+0x36>
   if(ntohs(record->rclass) != DNS_RR_CLASS_IN)
 8009d40:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8009d44:	f7f6 fc6a 	bl	800061c <swapInt16>
 8009d48:	2801      	cmp	r0, #1
 8009d4a:	d1f0      	bne.n	8009d2e <nbnsProcessResponse+0x36>
   if(ntohs(record->rtype) != DNS_RR_TYPE_NB)
 8009d4c:	5ba0      	ldrh	r0, [r4, r6]
 8009d4e:	f7f6 fc65 	bl	800061c <swapInt16>
 8009d52:	2820      	cmp	r0, #32
 8009d54:	d1eb      	bne.n	8009d2e <nbnsProcessResponse+0x36>
   if(ntohs(record->rdlength) < sizeof(NbnsAddrEntry))
 8009d56:	f8b8 0008 	ldrh.w	r0, [r8, #8]
 8009d5a:	f7f6 fc5f 	bl	800061c <swapInt16>
 8009d5e:	2805      	cmp	r0, #5
 8009d60:	d9e5      	bls.n	8009d2e <nbnsProcessResponse+0x36>
   for(i = 0; i < DNS_CACHE_SIZE; i++)
 8009d62:	2600      	movs	r6, #0
 8009d64:	e000      	b.n	8009d68 <nbnsProcessResponse+0x70>
 8009d66:	3601      	adds	r6, #1
 8009d68:	2e07      	cmp	r6, #7
 8009d6a:	d8e0      	bhi.n	8009d2e <nbnsProcessResponse+0x36>
      if(entry->state == DNS_STATE_IN_PROGRESS &&
 8009d6c:	2374      	movs	r3, #116	@ 0x74
 8009d6e:	fb06 f303 	mul.w	r3, r6, r3
 8009d72:	4a23      	ldr	r2, [pc, #140]	@ (8009e00 <nbnsProcessResponse+0x108>)
 8009d74:	58d3      	ldr	r3, [r2, r3]
 8009d76:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8009d7a:	4a22      	ldr	r2, [pc, #136]	@ (8009e04 <nbnsProcessResponse+0x10c>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d1f2      	bne.n	8009d66 <nbnsProcessResponse+0x6e>
         entry->type == HOST_TYPE_IPV4)
 8009d80:	4b1f      	ldr	r3, [pc, #124]	@ (8009e00 <nbnsProcessResponse+0x108>)
 8009d82:	2274      	movs	r2, #116	@ 0x74
 8009d84:	fb02 3306 	mla	r3, r2, r6, r3
 8009d88:	785b      	ldrb	r3, [r3, #1]
         entry->protocol == HOST_NAME_RESOLVER_NBNS &&
 8009d8a:	2b10      	cmp	r3, #16
 8009d8c:	d1eb      	bne.n	8009d66 <nbnsProcessResponse+0x6e>
         if(entry->id == ntohs(message->id))
 8009d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009e00 <nbnsProcessResponse+0x108>)
 8009d90:	fb02 3306 	mla	r3, r2, r6, r3
 8009d94:	89df      	ldrh	r7, [r3, #14]
 8009d96:	8820      	ldrh	r0, [r4, #0]
 8009d98:	f7f6 fc40 	bl	800061c <swapInt16>
 8009d9c:	4287      	cmp	r7, r0
 8009d9e:	d1e2      	bne.n	8009d66 <nbnsProcessResponse+0x6e>
            if(nbnsCompareName(message, length, sizeof(DnsHeader), entry->name))
 8009da0:	2374      	movs	r3, #116	@ 0x74
 8009da2:	fb06 f303 	mul.w	r3, r6, r3
 8009da6:	3310      	adds	r3, #16
 8009da8:	4a15      	ldr	r2, [pc, #84]	@ (8009e00 <nbnsProcessResponse+0x108>)
 8009daa:	4413      	add	r3, r2
 8009dac:	220c      	movs	r2, #12
 8009dae:	4629      	mov	r1, r5
 8009db0:	4620      	mov	r0, r4
 8009db2:	f000 f8fb 	bl	8009fac <nbnsCompareName>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d0d5      	beq.n	8009d66 <nbnsProcessResponse+0x6e>
               entry->ipAddr.length = sizeof(Ipv4Addr);
 8009dba:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8009e00 <nbnsProcessResponse+0x108>
 8009dbe:	f04f 0974 	mov.w	r9, #116	@ 0x74
 8009dc2:	fb09 f906 	mul.w	r9, r9, r6
 8009dc6:	eb0a 0709 	add.w	r7, sl, r9
 8009dca:	2304      	movs	r3, #4
 8009dcc:	653b      	str	r3, [r7, #80]	@ 0x50
               entry->ipAddr.ipv4Addr = addrEntry->addr;
 8009dce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009dd2:	657b      	str	r3, [r7, #84]	@ 0x54
               entry->timestamp = osGetSystemTime();
 8009dd4:	f7f6 fd12 	bl	80007fc <osGetSystemTime>
 8009dd8:	6678      	str	r0, [r7, #100]	@ 0x64
               entry->timeout = ntohl(record->ttl) * 1000;
 8009dda:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009dde:	f7f6 fc20 	bl	8000622 <swapInt32>
 8009de2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009de6:	fb00 f303 	mul.w	r3, r0, r3
 8009dea:	66bb      	str	r3, [r7, #104]	@ 0x68
               entry->timeout = MIN(entry->timeout, NBNS_MAX_LIFETIME);
 8009dec:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8009df0:	429a      	cmp	r2, r3
 8009df2:	bf28      	it	cs
 8009df4:	461a      	movcs	r2, r3
 8009df6:	66ba      	str	r2, [r7, #104]	@ 0x68
               entry->state = DNS_STATE_RESOLVED;
 8009df8:	2302      	movs	r3, #2
 8009dfa:	f80a 3009 	strb.w	r3, [sl, r9]
 8009dfe:	e7b2      	b.n	8009d66 <nbnsProcessResponse+0x6e>
 8009e00:	2000075c 	.word	0x2000075c
 8009e04:	00040001 	.word	0x00040001

08009e08 <nbnsProcessMessage>:

void nbnsProcessMessage(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *udpHeader,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary,
   void *param)
{
 8009e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e0c:	b082      	sub	sp, #8
 8009e0e:	461d      	mov	r5, r3
   size_t length;
   NbnsHeader *message;

   //Make sure the NBNS message was received from an IPv4 peer
   if(pseudoHeader->length != sizeof(Ipv4PseudoHeader))
 8009e10:	680b      	ldr	r3, [r1, #0]
 8009e12:	2b0c      	cmp	r3, #12
 8009e14:	d002      	beq.n	8009e1c <nbnsProcessMessage+0x14>
      //Process incoming NBNS response message
      nbnsProcessResponse(interface, &pseudoHeader->ipv4Data,
         udpHeader, message, length);
#endif
   }
}
 8009e16:	b002      	add	sp, #8
 8009e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e1c:	4607      	mov	r7, r0
 8009e1e:	460c      	mov	r4, r1
 8009e20:	4616      	mov	r6, r2
   length = netBufferGetLength(buffer) - offset;
 8009e22:	4628      	mov	r0, r5
 8009e24:	f002 f928 	bl	800c078 <netBufferGetLength>
 8009e28:	9b08      	ldr	r3, [sp, #32]
 8009e2a:	eba0 0803 	sub.w	r8, r0, r3
   if(length < sizeof(NbnsHeader))
 8009e2e:	f1b8 0f0b 	cmp.w	r8, #11
 8009e32:	d9f0      	bls.n	8009e16 <nbnsProcessMessage+0xe>
   message = netBufferAt(buffer, offset, length);
 8009e34:	4642      	mov	r2, r8
 8009e36:	4619      	mov	r1, r3
 8009e38:	4628      	mov	r0, r5
 8009e3a:	f002 f9bd 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2800      	cmp	r0, #0
 8009e42:	d0e8      	beq.n	8009e16 <nbnsProcessMessage+0xe>
   if(message->opcode != DNS_OPCODE_QUERY)
 8009e44:	7882      	ldrb	r2, [r0, #2]
 8009e46:	f012 0f78 	tst.w	r2, #120	@ 0x78
 8009e4a:	d1e4      	bne.n	8009e16 <nbnsProcessMessage+0xe>
   if(message->rcode != DNS_RCODE_NOERROR)
 8009e4c:	78c1      	ldrb	r1, [r0, #3]
 8009e4e:	f011 0f0f 	tst.w	r1, #15
 8009e52:	d1e0      	bne.n	8009e16 <nbnsProcessMessage+0xe>
   if(!message->qr)
 8009e54:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8009e58:	d107      	bne.n	8009e6a <nbnsProcessMessage+0x62>
      nbnsProcessQuery(interface, &pseudoHeader->ipv4Data,
 8009e5a:	f8cd 8000 	str.w	r8, [sp]
 8009e5e:	4632      	mov	r2, r6
 8009e60:	1d21      	adds	r1, r4, #4
 8009e62:	4638      	mov	r0, r7
 8009e64:	f000 f9c8 	bl	800a1f8 <nbnsProcessQuery>
 8009e68:	e7d5      	b.n	8009e16 <nbnsProcessMessage+0xe>
      nbnsProcessResponse(interface, &pseudoHeader->ipv4Data,
 8009e6a:	f8cd 8000 	str.w	r8, [sp]
 8009e6e:	4632      	mov	r2, r6
 8009e70:	1d21      	adds	r1, r4, #4
 8009e72:	4638      	mov	r0, r7
 8009e74:	f7ff ff40 	bl	8009cf8 <nbnsProcessResponse>
 8009e78:	e7cd      	b.n	8009e16 <nbnsProcessMessage+0xe>
	...

08009e7c <nbnsInit>:
{
 8009e7c:	b508      	push	{r3, lr}
   error = udpAttachRxCallback(interface, NBNS_PORT, nbnsProcessMessage, NULL);
 8009e7e:	2300      	movs	r3, #0
 8009e80:	4a02      	ldr	r2, [pc, #8]	@ (8009e8c <nbnsInit+0x10>)
 8009e82:	2189      	movs	r1, #137	@ 0x89
 8009e84:	f006 fed8 	bl	8010c38 <udpAttachRxCallback>
}
 8009e88:	bd08      	pop	{r3, pc}
 8009e8a:	bf00      	nop
 8009e8c:	08009e09 	.word	0x08009e09

08009e90 <nbnsEncodeName>:
 * @param[out] dest Pointer to the encoded NetBIOS name
 * @return Length of the encoded NetBIOS name
 **/

size_t nbnsEncodeName(const char_t *src, uint8_t *dest)
{
 8009e90:	b510      	push	{r4, lr}

   //Point to first byte of the output buffer
   j = 0;

   //NetBIOS names are 32-byte long
   dest[j++] = 32;
 8009e92:	2320      	movs	r3, #32
 8009e94:	700b      	strb	r3, [r1, #0]
 8009e96:	2201      	movs	r2, #1

   //Parse input name
   for(i = 0; i < 15 && src[i] != '\0'; i++)
 8009e98:	f04f 0c00 	mov.w	ip, #0
 8009e9c:	e00d      	b.n	8009eba <nbnsEncodeName+0x2a>
   {
      //Convert current character to uppercase
      c = osToupper(src[i]);

      //Encode character
      dest[j++] = NBNS_ENCODE_H(c);
 8009e9e:	f102 0e01 	add.w	lr, r2, #1
 8009ea2:	f3c3 1403 	ubfx	r4, r3, #4, #4
 8009ea6:	3441      	adds	r4, #65	@ 0x41
 8009ea8:	548c      	strb	r4, [r1, r2]
      dest[j++] = NBNS_ENCODE_L(c);
 8009eaa:	f003 030f 	and.w	r3, r3, #15
 8009eae:	3341      	adds	r3, #65	@ 0x41
 8009eb0:	f801 300e 	strb.w	r3, [r1, lr]
 8009eb4:	3202      	adds	r2, #2
   for(i = 0; i < 15 && src[i] != '\0'; i++)
 8009eb6:	f10c 0c01 	add.w	ip, ip, #1
 8009eba:	f1bc 0f0e 	cmp.w	ip, #14
 8009ebe:	d812      	bhi.n	8009ee6 <nbnsEncodeName+0x56>
 8009ec0:	f810 300c 	ldrb.w	r3, [r0, ip]
 8009ec4:	b17b      	cbz	r3, 8009ee6 <nbnsEncodeName+0x56>
      c = osToupper(src[i]);
 8009ec6:	4c0e      	ldr	r4, [pc, #56]	@ (8009f00 <nbnsEncodeName+0x70>)
 8009ec8:	5ce4      	ldrb	r4, [r4, r3]
 8009eca:	f004 0403 	and.w	r4, r4, #3
 8009ece:	2c02      	cmp	r4, #2
 8009ed0:	d1e5      	bne.n	8009e9e <nbnsEncodeName+0xe>
 8009ed2:	3b20      	subs	r3, #32
 8009ed4:	e7e3      	b.n	8009e9e <nbnsEncodeName+0xe>

   //Pad NetBIOS name with space characters
   for(; i < 15; i++)
   {
      //Encoded space character
      dest[j++] = NBNS_ENCODE_H(' ');
 8009ed6:	1c53      	adds	r3, r2, #1
 8009ed8:	2043      	movs	r0, #67	@ 0x43
 8009eda:	5488      	strb	r0, [r1, r2]
      dest[j++] = NBNS_ENCODE_L(' ');
 8009edc:	2041      	movs	r0, #65	@ 0x41
 8009ede:	54c8      	strb	r0, [r1, r3]
 8009ee0:	3202      	adds	r2, #2
   for(; i < 15; i++)
 8009ee2:	f10c 0c01 	add.w	ip, ip, #1
 8009ee6:	f1bc 0f0e 	cmp.w	ip, #14
 8009eea:	d9f4      	bls.n	8009ed6 <nbnsEncodeName+0x46>
   }

   //The 16th character is the NetBIOS suffix
   dest[j++] = NBNS_ENCODE_H(0);
 8009eec:	1c54      	adds	r4, r2, #1
 8009eee:	2341      	movs	r3, #65	@ 0x41
 8009ef0:	548b      	strb	r3, [r1, r2]
   dest[j++] = NBNS_ENCODE_L(0);
 8009ef2:	1c90      	adds	r0, r2, #2
 8009ef4:	550b      	strb	r3, [r1, r4]

   //Terminate the NetBIOS name with a zero length count
   dest[j++] = 0;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	540b      	strb	r3, [r1, r0]

   //Return the length of the encoded NetBIOS name
   return j;
}
 8009efa:	1cd0      	adds	r0, r2, #3
 8009efc:	bd10      	pop	{r4, pc}
 8009efe:	bf00      	nop
 8009f00:	0801a972 	.word	0x0801a972

08009f04 <nbnsParseName>:
 * @return The position of the resource record that immediately follows the NetBIOS name
 **/

size_t nbnsParseName(const NbnsHeader *message,
   size_t length, size_t pos, char_t *dest)
{
 8009f04:	b500      	push	{lr}
 8009f06:	4686      	mov	lr, r0

   //Cast the input NBNS message to byte array
   uint8_t *src = (uint8_t *) message;

   //Malformed NBNS message?
   if((pos + 34) >= length)
 8009f08:	f102 0022 	add.w	r0, r2, #34	@ 0x22
 8009f0c:	4288      	cmp	r0, r1
 8009f0e:	d23d      	bcs.n	8009f8c <nbnsParseName+0x88>
      return 0;

   //Retrieve the length of the first label
   n = src[pos++];
 8009f10:	1c51      	adds	r1, r2, #1
 8009f12:	f81e 2002 	ldrb.w	r2, [lr, r2]

   //NetBIOS names must be 32-byte long
   if(n != 32)
 8009f16:	2a20      	cmp	r2, #32
 8009f18:	d13b      	bne.n	8009f92 <nbnsParseName+0x8e>
      return 0;

   //Parse the NetBIOS name
   for(i = 0; i < 15; i++)
 8009f1a:	2000      	movs	r0, #0
 8009f1c:	e003      	b.n	8009f26 <nbnsParseName+0x22>
      if(c == ' ')
         break;

      //Save current ASCII character
      if(dest != NULL)
         *(dest++) = c;
 8009f1e:	f803 2b01 	strb.w	r2, [r3], #1

      //Advance data pointer
      pos += 2;
 8009f22:	3102      	adds	r1, #2
   for(i = 0; i < 15; i++)
 8009f24:	3001      	adds	r0, #1
 8009f26:	280e      	cmp	r0, #14
 8009f28:	d817      	bhi.n	8009f5a <nbnsParseName+0x56>
      if(src[pos] < 'A' || src[pos] > 'P')
 8009f2a:	f81e c001 	ldrb.w	ip, [lr, r1]
 8009f2e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8009f32:	fa5f fc8c 	uxtb.w	ip, ip
 8009f36:	f1bc 0f0f 	cmp.w	ip, #15
 8009f3a:	d82c      	bhi.n	8009f96 <nbnsParseName+0x92>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 8009f3c:	eb0e 0201 	add.w	r2, lr, r1
 8009f40:	7852      	ldrb	r2, [r2, #1]
 8009f42:	3a41      	subs	r2, #65	@ 0x41
 8009f44:	b2d2      	uxtb	r2, r2
 8009f46:	2a0f      	cmp	r2, #15
 8009f48:	d827      	bhi.n	8009f9a <nbnsParseName+0x96>
      c = ((src[pos] - 'A') << 4) | (src[pos + 1] - 'A');
 8009f4a:	ea42 120c 	orr.w	r2, r2, ip, lsl #4
 8009f4e:	b2d2      	uxtb	r2, r2
      if(c == ' ')
 8009f50:	2a20      	cmp	r2, #32
 8009f52:	d002      	beq.n	8009f5a <nbnsParseName+0x56>
      if(dest != NULL)
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d1e2      	bne.n	8009f1e <nbnsParseName+0x1a>
 8009f58:	e7e3      	b.n	8009f22 <nbnsParseName+0x1e>
   }

   //Skip padding characters
   for(; i < 16; i++)
 8009f5a:	280f      	cmp	r0, #15
 8009f5c:	d80f      	bhi.n	8009f7e <nbnsParseName+0x7a>
   {
      //Make sure the nibbles are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 8009f5e:	f81e 2001 	ldrb.w	r2, [lr, r1]
 8009f62:	3a41      	subs	r2, #65	@ 0x41
 8009f64:	b2d2      	uxtb	r2, r2
 8009f66:	2a0f      	cmp	r2, #15
 8009f68:	d819      	bhi.n	8009f9e <nbnsParseName+0x9a>
         return 0;
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 8009f6a:	eb0e 0201 	add.w	r2, lr, r1
 8009f6e:	7852      	ldrb	r2, [r2, #1]
 8009f70:	3a41      	subs	r2, #65	@ 0x41
 8009f72:	b2d2      	uxtb	r2, r2
 8009f74:	2a0f      	cmp	r2, #15
 8009f76:	d814      	bhi.n	8009fa2 <nbnsParseName+0x9e>
         return 0;

      //Advance data pointer
      pos += 2;
 8009f78:	3102      	adds	r1, #2
   for(; i < 16; i++)
 8009f7a:	3001      	adds	r0, #1
 8009f7c:	e7ed      	b.n	8009f5a <nbnsParseName+0x56>
   }

   //Retrieve the length of the next label
   n = src[pos++];
 8009f7e:	1c48      	adds	r0, r1, #1
 8009f80:	f81e 2001 	ldrb.w	r2, [lr, r1]

   //NetBIOS names are terminated with a zero length count
   if(n != 0)
 8009f84:	b97a      	cbnz	r2, 8009fa6 <nbnsParseName+0xa2>
      return 0;

   //Properly terminate the string
   if(dest != NULL)
 8009f86:	b113      	cbz	r3, 8009f8e <nbnsParseName+0x8a>
      *(dest++) = '\0';
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	e000      	b.n	8009f8e <nbnsParseName+0x8a>
      return 0;
 8009f8c:	2000      	movs	r0, #0

   //Return the position of the resource record that
   //is immediately following the NetBIOS name
   return pos;
}
 8009f8e:	f85d fb04 	ldr.w	pc, [sp], #4
      return 0;
 8009f92:	2000      	movs	r0, #0
 8009f94:	e7fb      	b.n	8009f8e <nbnsParseName+0x8a>
         return 0;
 8009f96:	2000      	movs	r0, #0
 8009f98:	e7f9      	b.n	8009f8e <nbnsParseName+0x8a>
         return 0;
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	e7f7      	b.n	8009f8e <nbnsParseName+0x8a>
         return 0;
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7f5      	b.n	8009f8e <nbnsParseName+0x8a>
         return 0;
 8009fa2:	2000      	movs	r0, #0
 8009fa4:	e7f3      	b.n	8009f8e <nbnsParseName+0x8a>
      return 0;
 8009fa6:	2000      	movs	r0, #0
 8009fa8:	e7f1      	b.n	8009f8e <nbnsParseName+0x8a>
	...

08009fac <nbnsCompareName>:
 * @return TRUE if the NetBIOS names match, else FALSE
 **/

bool_t nbnsCompareName(const NbnsHeader *message,
   size_t length, size_t pos, const char_t *name)
{
 8009fac:	b510      	push	{r4, lr}

   //Cast the input NBNS message to byte array
   uint8_t *src = (uint8_t *) message;

   //Malformed NBNS message?
   if((pos + 34) >= length)
 8009fae:	f102 0422 	add.w	r4, r2, #34	@ 0x22
 8009fb2:	428c      	cmp	r4, r1
 8009fb4:	d250      	bcs.n	800a058 <nbnsCompareName+0xac>
      return FALSE;

   //Retrieve the length of the first label
   n = src[pos++];
 8009fb6:	f102 0c01 	add.w	ip, r2, #1
 8009fba:	5c82      	ldrb	r2, [r0, r2]

   //NetBIOS names must be 32-byte long
   if(n != 32)
 8009fbc:	2a20      	cmp	r2, #32
 8009fbe:	d14d      	bne.n	800a05c <nbnsCompareName+0xb0>
      return FALSE;

   //Parse the NetBIOS name
   for(i = 0; i < 15; i++)
 8009fc0:	f04f 0e00 	mov.w	lr, #0
 8009fc4:	e01f      	b.n	800a006 <nbnsCompareName+0x5a>

      //Combine nibbles to restore the original ASCII character
      c = ((src[pos] - 'A') << 4) | (src[pos + 1] - 'A');

      //Padding character found?
      if(c == ' ' && *name == '\0')
 8009fc6:	7819      	ldrb	r1, [r3, #0]
 8009fc8:	bb91      	cbnz	r1, 800a030 <nbnsCompareName+0x84>
      pos += 2;
      name++;
   }

   //Skip padding characters
   for(; i < 16; i++)
 8009fca:	f1be 0f0f 	cmp.w	lr, #15
 8009fce:	d83e      	bhi.n	800a04e <nbnsCompareName+0xa2>
   {
      //Make sure the nibbles are valid
      if(src[pos] < 'A' || src[pos] > 'P')
 8009fd0:	f810 300c 	ldrb.w	r3, [r0, ip]
 8009fd4:	3b41      	subs	r3, #65	@ 0x41
 8009fd6:	b2db      	uxtb	r3, r3
 8009fd8:	2b0f      	cmp	r3, #15
 8009fda:	d847      	bhi.n	800a06c <nbnsCompareName+0xc0>
         return FALSE;
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 8009fdc:	eb00 030c 	add.w	r3, r0, ip
 8009fe0:	785b      	ldrb	r3, [r3, #1]
 8009fe2:	3b41      	subs	r3, #65	@ 0x41
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	2b0f      	cmp	r3, #15
 8009fe8:	d842      	bhi.n	800a070 <nbnsCompareName+0xc4>
         return FALSE;

      //Advance data pointer
      pos += 2;
 8009fea:	f10c 0c02 	add.w	ip, ip, #2
   for(; i < 16; i++)
 8009fee:	f10e 0e01 	add.w	lr, lr, #1
 8009ff2:	e7ea      	b.n	8009fca <nbnsCompareName+0x1e>
      if(osToupper(c) != osToupper(*name))
 8009ff4:	3a20      	subs	r2, #32
 8009ff6:	e021      	b.n	800a03c <nbnsCompareName+0x90>
 8009ff8:	428a      	cmp	r2, r1
 8009ffa:	d135      	bne.n	800a068 <nbnsCompareName+0xbc>
      pos += 2;
 8009ffc:	f10c 0c02 	add.w	ip, ip, #2
      name++;
 800a000:	3301      	adds	r3, #1
   for(i = 0; i < 15; i++)
 800a002:	f10e 0e01 	add.w	lr, lr, #1
 800a006:	f1be 0f0e 	cmp.w	lr, #14
 800a00a:	d8de      	bhi.n	8009fca <nbnsCompareName+0x1e>
      if(src[pos] < 'A' || src[pos] > 'P')
 800a00c:	f810 100c 	ldrb.w	r1, [r0, ip]
 800a010:	3941      	subs	r1, #65	@ 0x41
 800a012:	b2c9      	uxtb	r1, r1
 800a014:	290f      	cmp	r1, #15
 800a016:	d823      	bhi.n	800a060 <nbnsCompareName+0xb4>
      if(src[pos + 1] < 'A' || src[pos + 1] > 'P')
 800a018:	eb00 020c 	add.w	r2, r0, ip
 800a01c:	7852      	ldrb	r2, [r2, #1]
 800a01e:	3a41      	subs	r2, #65	@ 0x41
 800a020:	b2d2      	uxtb	r2, r2
 800a022:	2a0f      	cmp	r2, #15
 800a024:	d81e      	bhi.n	800a064 <nbnsCompareName+0xb8>
      c = ((src[pos] - 'A') << 4) | (src[pos + 1] - 'A');
 800a026:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800a02a:	b2d2      	uxtb	r2, r2
      if(c == ' ' && *name == '\0')
 800a02c:	2a20      	cmp	r2, #32
 800a02e:	d0ca      	beq.n	8009fc6 <nbnsCompareName+0x1a>
      if(osToupper(c) != osToupper(*name))
 800a030:	4911      	ldr	r1, [pc, #68]	@ (800a078 <nbnsCompareName+0xcc>)
 800a032:	5c89      	ldrb	r1, [r1, r2]
 800a034:	f001 0103 	and.w	r1, r1, #3
 800a038:	2902      	cmp	r1, #2
 800a03a:	d0db      	beq.n	8009ff4 <nbnsCompareName+0x48>
 800a03c:	7819      	ldrb	r1, [r3, #0]
 800a03e:	4c0e      	ldr	r4, [pc, #56]	@ (800a078 <nbnsCompareName+0xcc>)
 800a040:	5c64      	ldrb	r4, [r4, r1]
 800a042:	f004 0403 	and.w	r4, r4, #3
 800a046:	2c02      	cmp	r4, #2
 800a048:	d1d6      	bne.n	8009ff8 <nbnsCompareName+0x4c>
 800a04a:	3920      	subs	r1, #32
 800a04c:	e7d4      	b.n	8009ff8 <nbnsCompareName+0x4c>
   }

   //Retrieve the length of the next label
   n = src[pos];
 800a04e:	f810 300c 	ldrb.w	r3, [r0, ip]

   //NetBIOS names are terminated with a zero length count
   if(n != 0)
 800a052:	b97b      	cbnz	r3, 800a074 <nbnsCompareName+0xc8>
      return FALSE;

   //The NetBIOS names match
   return TRUE;
 800a054:	2001      	movs	r0, #1
 800a056:	e000      	b.n	800a05a <nbnsCompareName+0xae>
      return FALSE;
 800a058:	2000      	movs	r0, #0
}
 800a05a:	bd10      	pop	{r4, pc}
      return FALSE;
 800a05c:	2000      	movs	r0, #0
 800a05e:	e7fc      	b.n	800a05a <nbnsCompareName+0xae>
         return FALSE;
 800a060:	2000      	movs	r0, #0
 800a062:	e7fa      	b.n	800a05a <nbnsCompareName+0xae>
         return FALSE;
 800a064:	2000      	movs	r0, #0
 800a066:	e7f8      	b.n	800a05a <nbnsCompareName+0xae>
         return FALSE;
 800a068:	2000      	movs	r0, #0
 800a06a:	e7f6      	b.n	800a05a <nbnsCompareName+0xae>
         return FALSE;
 800a06c:	2000      	movs	r0, #0
 800a06e:	e7f4      	b.n	800a05a <nbnsCompareName+0xae>
         return FALSE;
 800a070:	2000      	movs	r0, #0
 800a072:	e7f2      	b.n	800a05a <nbnsCompareName+0xae>
      return FALSE;
 800a074:	2000      	movs	r0, #0
 800a076:	e7f0      	b.n	800a05a <nbnsCompareName+0xae>
 800a078:	0801a972 	.word	0x0801a972

0800a07c <nbnsSendResponse>:
 * @param[in] id 16-bit identifier to be used when sending NBNS query
 **/

error_t nbnsSendResponse(NetInterface *interface,
   const IpAddr *destIpAddr, uint16_t destPort, uint16_t id)
{
 800a07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a080:	b08e      	sub	sp, #56	@ 0x38
 800a082:	4606      	mov	r6, r0
 800a084:	460f      	mov	r7, r1
 800a086:	4690      	mov	r8, r2
 800a088:	461d      	mov	r5, r3

   //Initialize status code
   error = NO_ERROR;

   //Allocate a memory buffer to hold the NBNS response message
   buffer = udpAllocBuffer(DNS_MESSAGE_MAX_SIZE, &offset);
 800a08a:	a90d      	add	r1, sp, #52	@ 0x34
 800a08c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800a090:	f006 fca0 	bl	80109d4 <udpAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 800a094:	2800      	cmp	r0, #0
 800a096:	f000 80ab 	beq.w	800a1f0 <nbnsSendResponse+0x174>
 800a09a:	4681      	mov	r9, r0
      return ERROR_OUT_OF_MEMORY;

   //Point to the NBNS header
   message = netBufferAt(buffer, offset, 0);
 800a09c:	2200      	movs	r2, #0
 800a09e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a0a0:	f002 f88a 	bl	800c1b8 <netBufferAt>
 800a0a4:	4604      	mov	r4, r0

   //Take the identifier from the query message
   message->id = id;
 800a0a6:	8005      	strh	r5, [r0, #0]

   //Format NBNS response header
   message->qr = 1;
 800a0a8:	7883      	ldrb	r3, [r0, #2]
 800a0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0ae:	7083      	strb	r3, [r0, #2]
   message->opcode = DNS_OPCODE_QUERY;
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	f023 0378 	bic.w	r3, r3, #120	@ 0x78
 800a0b6:	7083      	strb	r3, [r0, #2]
   message->aa = 1;
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	f043 0304 	orr.w	r3, r3, #4
 800a0be:	7083      	strb	r3, [r0, #2]
   message->tc = 0;
 800a0c0:	b2db      	uxtb	r3, r3
 800a0c2:	f023 0302 	bic.w	r3, r3, #2
 800a0c6:	7083      	strb	r3, [r0, #2]
   message->rd = 1;
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f043 0301 	orr.w	r3, r3, #1
 800a0ce:	7083      	strb	r3, [r0, #2]
   message->ra = 1;
 800a0d0:	78c3      	ldrb	r3, [r0, #3]
 800a0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0d6:	70c3      	strb	r3, [r0, #3]
   message->z = 0;
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800a0de:	70c3      	strb	r3, [r0, #3]
   message->b = 0;
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	f023 0310 	bic.w	r3, r3, #16
 800a0e6:	70c3      	strb	r3, [r0, #3]
   message->rcode = DNS_RCODE_NOERROR;
 800a0e8:	b2db      	uxtb	r3, r3
 800a0ea:	f023 030f 	bic.w	r3, r3, #15
 800a0ee:	70c3      	strb	r3, [r0, #3]
   message->qdcount = 0;
 800a0f0:	f04f 0c00 	mov.w	ip, #0
 800a0f4:	f880 c004 	strb.w	ip, [r0, #4]
 800a0f8:	f880 c005 	strb.w	ip, [r0, #5]
   message->ancount = 0;
 800a0fc:	f880 c006 	strb.w	ip, [r0, #6]
 800a100:	f880 c007 	strb.w	ip, [r0, #7]
   message->nscount = 0;
 800a104:	f880 c008 	strb.w	ip, [r0, #8]
 800a108:	f880 c009 	strb.w	ip, [r0, #9]
   message->arcount = 0;
 800a10c:	f880 c00a 	strb.w	ip, [r0, #10]
 800a110:	f880 c00b 	strb.w	ip, [r0, #11]

   //NBNS response message length
   length = sizeof(DnsHeader);
 800a114:	f04f 0a0c 	mov.w	sl, #12

   //The NBNS response contains 1 answer resource record
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && message->ancount == 0; i++)
 800a118:	4665      	mov	r5, ip
 800a11a:	bbed      	cbnz	r5, 800a198 <nbnsSendResponse+0x11c>
 800a11c:	88e3      	ldrh	r3, [r4, #6]
 800a11e:	bbdb      	cbnz	r3, 800a198 <nbnsSendResponse+0x11c>
   {
      //Point to the current entry
      entry = &interface->ipv4Context.addrList[i];

      //Check the state of the address
      if(entry->state == IPV4_ADDR_STATE_VALID)
 800a120:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800a124:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a128:	f893 31a4 	ldrb.w	r3, [r3, #420]	@ 0x1a4
 800a12c:	2b02      	cmp	r3, #2
 800a12e:	d001      	beq.n	800a134 <nbnsSendResponse+0xb8>
   for(i = 0; i < IPV4_ADDR_LIST_SIZE && message->ancount == 0; i++)
 800a130:	3501      	adds	r5, #1
 800a132:	e7f2      	b.n	800a11a <nbnsSendResponse+0x9e>
      {
         //Check whether the address belongs to the same subnet as the source
         //address of the query
         if(ipv4IsOnSubnet(entry, destIpAddr->ipv4Addr))
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800a13a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a13e:	f8d3 11a0 	ldr.w	r1, [r3, #416]	@ 0x1a0
 800a142:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a146:	404a      	eors	r2, r1
 800a148:	421a      	tst	r2, r3
 800a14a:	d1f1      	bne.n	800a130 <nbnsSendResponse+0xb4>
         {
            //Encode the host name using the NBNS name notation
            length += nbnsEncodeName(interface->hostname,
 800a14c:	eb04 010a 	add.w	r1, r4, sl
 800a150:	f106 0019 	add.w	r0, r6, #25
 800a154:	f7ff fe9c 	bl	8009e90 <nbnsEncodeName>
 800a158:	4450      	add	r0, sl
               (uint8_t *) message + length);

            //Point to the corresponding resource record
            record = DNS_GET_RESOURCE_RECORD(message, length);
 800a15a:	1823      	adds	r3, r4, r0

            //Fill in resource record
            record->rtype = HTONS(DNS_RR_TYPE_NB);
 800a15c:	2200      	movs	r2, #0
 800a15e:	5422      	strb	r2, [r4, r0]
 800a160:	2120      	movs	r1, #32
 800a162:	7059      	strb	r1, [r3, #1]
            record->rclass = HTONS(DNS_RR_CLASS_IN);
 800a164:	709a      	strb	r2, [r3, #2]
 800a166:	2101      	movs	r1, #1
 800a168:	70d9      	strb	r1, [r3, #3]
            record->ttl = HTONL(NBNS_DEFAULT_RESOURCE_RECORD_TTL);
 800a16a:	711a      	strb	r2, [r3, #4]
 800a16c:	715a      	strb	r2, [r3, #5]
 800a16e:	719a      	strb	r2, [r3, #6]
 800a170:	2178      	movs	r1, #120	@ 0x78
 800a172:	71d9      	strb	r1, [r3, #7]
            record->rdlength = HTONS(sizeof(NbnsAddrEntry));
 800a174:	721a      	strb	r2, [r3, #8]
 800a176:	2106      	movs	r1, #6
 800a178:	7259      	strb	r1, [r3, #9]

            //Point to the address entry array
            addrEntry = (NbnsAddrEntry *) record->rdata;

            //Fill in address entry
            addrEntry->flags = HTONS(NBNS_G_UNIQUE | NBNS_ONT_BNODE);
 800a17a:	729a      	strb	r2, [r3, #10]
 800a17c:	72da      	strb	r2, [r3, #11]
            addrEntry->addr = entry->addr;
 800a17e:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 800a182:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800a186:	f8d2 21a0 	ldr.w	r2, [r2, #416]	@ 0x1a0
 800a18a:	60da      	str	r2, [r3, #12]

            //Update the length of the NBNS response message
            length += sizeof(DnsResourceRecord) + sizeof(NbnsAddrEntry);
 800a18c:	f100 0a10 	add.w	sl, r0, #16

            //Number of resource records in the answer section
            message->ancount++;
 800a190:	88e3      	ldrh	r3, [r4, #6]
 800a192:	3301      	adds	r3, #1
 800a194:	80e3      	strh	r3, [r4, #6]
 800a196:	e7cb      	b.n	800a130 <nbnsSendResponse+0xb4>
         }
      }
   }

   //Valid NBNS response?
   if(message->ancount > 0)
 800a198:	88e5      	ldrh	r5, [r4, #6]
 800a19a:	b935      	cbnz	r5, 800a1aa <nbnsSendResponse+0x12e>
      error = udpSendBuffer(interface, NULL, NBNS_PORT, destIpAddr, destPort,
         buffer, offset, &ancillary);
   }

   //Free previously allocated memory
   netBufferFree(buffer);
 800a19c:	4648      	mov	r0, r9
 800a19e:	f001 ffe3 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	b00e      	add	sp, #56	@ 0x38
 800a1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      message->ancount = htons(message->ancount);
 800a1aa:	4628      	mov	r0, r5
 800a1ac:	f7f6 fa36 	bl	800061c <swapInt16>
 800a1b0:	80e0      	strh	r0, [r4, #6]
      netBufferSetLength(buffer, offset + length);
 800a1b2:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800a1b4:	4451      	add	r1, sl
 800a1b6:	4648      	mov	r0, r9
 800a1b8:	f001 ff6b 	bl	800c092 <netBufferSetLength>
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 800a1bc:	ac05      	add	r4, sp, #20
 800a1be:	4d0d      	ldr	r5, [pc, #52]	@ (800a1f4 <nbnsSendResponse+0x178>)
 800a1c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a1c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a1c4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a1c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      ancillary.dontRoute = TRUE;
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	9308      	str	r3, [sp, #32]
      error = udpSendBuffer(interface, NULL, NBNS_PORT, destIpAddr, destPort,
 800a1d0:	ab05      	add	r3, sp, #20
 800a1d2:	9303      	str	r3, [sp, #12]
 800a1d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a1d6:	9302      	str	r3, [sp, #8]
 800a1d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a1dc:	f8cd 8000 	str.w	r8, [sp]
 800a1e0:	463b      	mov	r3, r7
 800a1e2:	2289      	movs	r2, #137	@ 0x89
 800a1e4:	2100      	movs	r1, #0
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	f006 fb24 	bl	8010834 <udpSendBuffer>
 800a1ec:	4605      	mov	r5, r0
 800a1ee:	e7d5      	b.n	800a19c <nbnsSendResponse+0x120>
      return ERROR_OUT_OF_MEMORY;
 800a1f0:	2564      	movs	r5, #100	@ 0x64
 800a1f2:	e7d6      	b.n	800a1a2 <nbnsSendResponse+0x126>
 800a1f4:	08019fc4 	.word	0x08019fc4

0800a1f8 <nbnsProcessQuery>:
{
 800a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1fc:	b086      	sub	sp, #24
 800a1fe:	4607      	mov	r7, r0
 800a200:	460e      	mov	r6, r1
 800a202:	4615      	mov	r5, r2
 800a204:	461c      	mov	r4, r3
   if(ntohs(message->qdcount) != 1)
 800a206:	8898      	ldrh	r0, [r3, #4]
 800a208:	f7f6 fa08 	bl	800061c <swapInt16>
 800a20c:	2801      	cmp	r0, #1
 800a20e:	d002      	beq.n	800a216 <nbnsProcessQuery+0x1e>
}
 800a210:	b006      	add	sp, #24
 800a212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   pos = nbnsParseName(message, length, sizeof(DnsHeader), NULL);
 800a216:	2300      	movs	r3, #0
 800a218:	220c      	movs	r2, #12
 800a21a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7ff fe71 	bl	8009f04 <nbnsParseName>
   if(!pos)
 800a222:	4680      	mov	r8, r0
 800a224:	2800      	cmp	r0, #0
 800a226:	d0f3      	beq.n	800a210 <nbnsProcessQuery+0x18>
   if((pos + sizeof(DnsQuestion)) > length)
 800a228:	1d03      	adds	r3, r0, #4
 800a22a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d8ef      	bhi.n	800a210 <nbnsProcessQuery+0x18>
   question = DNS_GET_QUESTION(message, pos);
 800a230:	1823      	adds	r3, r4, r0
   if(ntohs(question->qclass) != DNS_RR_CLASS_IN)
 800a232:	8858      	ldrh	r0, [r3, #2]
 800a234:	f7f6 f9f2 	bl	800061c <swapInt16>
 800a238:	2801      	cmp	r0, #1
 800a23a:	d1e9      	bne.n	800a210 <nbnsProcessQuery+0x18>
   if(ntohs(question->qtype) != DNS_RR_TYPE_NB)
 800a23c:	f834 0008 	ldrh.w	r0, [r4, r8]
 800a240:	f7f6 f9ec 	bl	800061c <swapInt16>
 800a244:	2820      	cmp	r0, #32
 800a246:	d1e3      	bne.n	800a210 <nbnsProcessQuery+0x18>
   if(nbnsCompareName(message, length, sizeof(DnsHeader), interface->hostname))
 800a248:	f107 0319 	add.w	r3, r7, #25
 800a24c:	220c      	movs	r2, #12
 800a24e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a250:	4620      	mov	r0, r4
 800a252:	f7ff feab 	bl	8009fac <nbnsCompareName>
 800a256:	2800      	cmp	r0, #0
 800a258:	d0da      	beq.n	800a210 <nbnsProcessQuery+0x18>
      destIpAddr.length = sizeof(Ipv4Addr);
 800a25a:	2304      	movs	r3, #4
 800a25c:	9301      	str	r3, [sp, #4]
      destIpAddr.ipv4Addr = pseudoHeader->srcAddr;
 800a25e:	6833      	ldr	r3, [r6, #0]
 800a260:	9302      	str	r3, [sp, #8]
      destPort = ntohs(udpHeader->srcPort);
 800a262:	8828      	ldrh	r0, [r5, #0]
 800a264:	f7f6 f9da 	bl	800061c <swapInt16>
 800a268:	4602      	mov	r2, r0
      nbnsSendResponse(interface, &destIpAddr, destPort, message->id);
 800a26a:	8823      	ldrh	r3, [r4, #0]
 800a26c:	a901      	add	r1, sp, #4
 800a26e:	4638      	mov	r0, r7
 800a270:	f7ff ff04 	bl	800a07c <nbnsSendResponse>
 800a274:	e7cc      	b.n	800a210 <nbnsProcessQuery+0x18>

0800a276 <ndpInit>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ndpInit(NetInterface *interface)
{
 800a276:	b510      	push	{r4, lr}
 800a278:	4604      	mov	r4, r0

   //Point to the NDP context
   context = &interface->ndpContext;

   //Clear the NDP context
   osMemset(context, 0, sizeof(NdpContext));
 800a27a:	f44f 62b2 	mov.w	r2, #1424	@ 0x590
 800a27e:	2100      	movs	r1, #0
 800a280:	f600 3064 	addw	r0, r0, #2916	@ 0xb64
 800a284:	f00a fcfe 	bl	8014c84 <memset>

   //Initialize interface specific variables
   context->reachableTime = NDP_REACHABLE_TIME;
 800a288:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a28c:	f8c4 3b64 	str.w	r3, [r4, #2916]	@ 0xb64
   context->retransTimer = NDP_RETRANS_TIMER;
 800a290:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a294:	f8c4 2b68 	str.w	r2, [r4, #2920]	@ 0xb68
   context->dupAddrDetectTransmits = NDP_DUP_ADDR_DETECT_TRANSMITS;
 800a298:	2301      	movs	r3, #1
 800a29a:	f8c4 3b6c 	str.w	r3, [r4, #2924]	@ 0xb6c
   context->minRtrSolicitationDelay = NDP_MIN_RTR_SOLICITATION_DELAY;
 800a29e:	2000      	movs	r0, #0
 800a2a0:	f8c4 0b70 	str.w	r0, [r4, #2928]	@ 0xb70
   context->maxRtrSolicitationDelay = NDP_MAX_RTR_SOLICITATION_DELAY;
 800a2a4:	f8c4 2b74 	str.w	r2, [r4, #2932]	@ 0xb74
   context->rtrSolicitationInterval = NDP_RTR_SOLICITATION_INTERVAL;
 800a2a8:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800a2ac:	f8c4 2b78 	str.w	r2, [r4, #2936]	@ 0xb78
   context->maxRtrSolicitations = NDP_MAX_RTR_SOLICITATIONS;
 800a2b0:	2203      	movs	r2, #3
 800a2b2:	f8c4 2b7c 	str.w	r2, [r4, #2940]	@ 0xb7c

   //Enable Neighbor Discovery protocol
   context->enable = TRUE;
 800a2b6:	f8c4 3b90 	str.w	r3, [r4, #2960]	@ 0xb90

   //Successful initialization
   return NO_ERROR;
}
 800a2ba:	bd10      	pop	{r4, pc}

0800a2bc <ndpEnqueuePacket>:
 **/

error_t ndpEnqueuePacket(NetInterface *srcInterface,
   NetInterface *destInterface, const Ipv6Addr *ipAddr, NetBuffer *buffer,
   size_t offset, NetTxAncillary *ancillary)
{
 800a2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2c0:	b082      	sub	sp, #8
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	460c      	mov	r4, r1
 800a2c6:	4615      	mov	r5, r2
 800a2c8:	461e      	mov	r6, r3
   uint_t i;
   size_t length;
   NdpNeighborCacheEntry *entry;

   //Retrieve the length of the multi-part buffer
   length = netBufferGetLength(buffer);
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	f001 fed4 	bl	800c078 <netBufferGetLength>
 800a2d0:	4680      	mov	r8, r0

   //Search the Neighbor cache for the specified IPv6 address
   entry = ndpFindNeighborCacheEntry(destInterface, ipAddr);
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	f000 ff1b 	bl	800b110 <ndpFindNeighborCacheEntry>

   //Check whether a matching entry exists
   if(entry != NULL)
 800a2da:	2800      	cmp	r0, #0
 800a2dc:	d059      	beq.n	800a392 <ndpEnqueuePacket+0xd6>
 800a2de:	4605      	mov	r5, r0
   {
      //Check the state of the Neighbor cache entry
      if(entry->state == NDP_STATE_INCOMPLETE)
 800a2e0:	7803      	ldrb	r3, [r0, #0]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d003      	beq.n	800a2ee <ndpEnqueuePacket+0x32>
         }
      }
      else
      {
         //The address is already resolved
         error = ERROR_UNEXPECTED_STATE;
 800a2e6:	20e0      	movs	r0, #224	@ 0xe0
      error = ERROR_NOT_FOUND;
   }

   //Return status code
   return error;
}
 800a2e8:	b002      	add	sp, #8
 800a2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         if(entry->queueSize >= NDP_MAX_PENDING_PACKETS)
 800a2ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d828      	bhi.n	800a348 <ndpEnqueuePacket+0x8c>
         i = entry->queueSize;
 800a2f6:	f8d5 4080 	ldr.w	r4, [r5, #128]	@ 0x80
         entry->queue[i].buffer = netBufferAlloc(length);
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f001 ff3d 	bl	800c17a <netBufferAlloc>
 800a300:	232c      	movs	r3, #44	@ 0x2c
 800a302:	fb03 5304 	mla	r3, r3, r4, r5
 800a306:	62d8      	str	r0, [r3, #44]	@ 0x2c
         if(entry->queue[i].buffer != NULL)
 800a308:	2800      	cmp	r0, #0
 800a30a:	d045      	beq.n	800a398 <ndpEnqueuePacket+0xdc>
            entry->queue[i].srcInterface = srcInterface;
 800a30c:	232c      	movs	r3, #44	@ 0x2c
 800a30e:	fb03 5404 	mla	r4, r3, r4, r5
 800a312:	62a7      	str	r7, [r4, #40]	@ 0x28
            netBufferCopy(entry->queue[i].buffer, 0, buffer, 0, length);
 800a314:	f8cd 8000 	str.w	r8, [sp]
 800a318:	2300      	movs	r3, #0
 800a31a:	4632      	mov	r2, r6
 800a31c:	4619      	mov	r1, r3
 800a31e:	f001 ffb2 	bl	800c286 <netBufferCopy>
            entry->queue[i].offset = offset;
 800a322:	9b08      	ldr	r3, [sp, #32]
 800a324:	6323      	str	r3, [r4, #48]	@ 0x30
            entry->queue[i].ancillary = *ancillary;
 800a326:	f104 0c34 	add.w	ip, r4, #52	@ 0x34
 800a32a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 800a32c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a32e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a332:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800a336:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            entry->queueSize++;
 800a33a:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a33e:	3301      	adds	r3, #1
 800a340:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
            error = NO_ERROR;
 800a344:	2000      	movs	r0, #0
 800a346:	e7cf      	b.n	800a2e8 <ndpEnqueuePacket+0x2c>
            netBufferFree(entry->queue[0].buffer);
 800a348:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800a34a:	f001 ff0d 	bl	800c168 <netBufferFree>
            for(i = 1; i < NDP_MAX_PENDING_PACKETS; i++)
 800a34e:	f04f 0e01 	mov.w	lr, #1
 800a352:	f1be 0f01 	cmp.w	lr, #1
 800a356:	d905      	bls.n	800a364 <ndpEnqueuePacket+0xa8>
            entry->queueSize--;
 800a358:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a35c:	3b01      	subs	r3, #1
 800a35e:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80
 800a362:	e7c8      	b.n	800a2f6 <ndpEnqueuePacket+0x3a>
               entry->queue[i - 1] = entry->queue[i];
 800a364:	f10e 3cff 	add.w	ip, lr, #4294967295
 800a368:	242c      	movs	r4, #44	@ 0x2c
 800a36a:	fb04 5c0c 	mla	ip, r4, ip, r5
 800a36e:	fb04 540e 	mla	r4, r4, lr, r5
 800a372:	f10c 0c28 	add.w	ip, ip, #40	@ 0x28
 800a376:	3428      	adds	r4, #40	@ 0x28
 800a378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a37a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a37e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a380:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a384:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a388:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            for(i = 1; i < NDP_MAX_PENDING_PACKETS; i++)
 800a38c:	f10e 0e01 	add.w	lr, lr, #1
 800a390:	e7df      	b.n	800a352 <ndpEnqueuePacket+0x96>
      error = ERROR_NOT_FOUND;
 800a392:	f240 100f 	movw	r0, #271	@ 0x10f
 800a396:	e7a7      	b.n	800a2e8 <ndpEnqueuePacket+0x2c>
            error = ERROR_OUT_OF_MEMORY;
 800a398:	2064      	movs	r0, #100	@ 0x64
 800a39a:	e7a5      	b.n	800a2e8 <ndpEnqueuePacket+0x2c>

0800a39c <ndpLinkChangeEvent>:
 * @brief Callback function for link change event
 * @param[in] interface Underlying network interface
 **/

void ndpLinkChangeEvent(NetInterface *interface)
{
 800a39c:	b510      	push	{r4, lr}
 800a39e:	4604      	mov	r4, r0

   //Point to the NDP context
   context = &interface->ndpContext;

   //Restore default parameters
   context->reachableTime = NDP_REACHABLE_TIME;
 800a3a0:	f247 5330 	movw	r3, #30000	@ 0x7530
 800a3a4:	f8c0 3b64 	str.w	r3, [r0, #2916]	@ 0xb64
   context->retransTimer = NDP_RETRANS_TIMER;
 800a3a8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800a3ac:	f8c0 2b68 	str.w	r2, [r0, #2920]	@ 0xb68
   context->dupAddrDetectTransmits = NDP_DUP_ADDR_DETECT_TRANSMITS;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	f8c0 3b6c 	str.w	r3, [r0, #2924]	@ 0xb6c
   context->minRtrSolicitationDelay = NDP_MIN_RTR_SOLICITATION_DELAY;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f8c0 3b70 	str.w	r3, [r0, #2928]	@ 0xb70
   context->maxRtrSolicitationDelay = NDP_MAX_RTR_SOLICITATION_DELAY;
 800a3bc:	f8c0 2b74 	str.w	r2, [r0, #2932]	@ 0xb74
   context->rtrSolicitationInterval = NDP_RTR_SOLICITATION_INTERVAL;
 800a3c0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 800a3c4:	f8c0 2b78 	str.w	r2, [r0, #2936]	@ 0xb78
   context->maxRtrSolicitations = NDP_MAX_RTR_SOLICITATIONS;
 800a3c8:	2203      	movs	r2, #3
 800a3ca:	f8c0 2b7c 	str.w	r2, [r0, #2940]	@ 0xb7c

   //Reset retransmission counter for RS messages
   context->rtrSolicitationCount = 0;
 800a3ce:	f8c0 3b80 	str.w	r3, [r0, #2944]	@ 0xb80
   //Valid RA message not yet received
   context->rtrAdvReceived = FALSE;
 800a3d2:	f8c0 3b84 	str.w	r3, [r0, #2948]	@ 0xb84

   //Flush the Neighbor Cache
   ndpFlushNeighborCache(interface);
 800a3d6:	f001 f865 	bl	800b4a4 <ndpFlushNeighborCache>
   //Flush the Destination Cache
   ndpFlushDestCache(interface);
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f001 f8d4 	bl	800b588 <ndpFlushDestCache>
}
 800a3e0:	bd10      	pop	{r4, pc}

0800a3e2 <ndpProcessRouterAdv>:
 **/

void ndpProcessRouterAdv(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset, const NetRxAncillary *ancillary)
{
 800a3e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e6:	4607      	mov	r7, r0
 800a3e8:	4688      	mov	r8, r1
 800a3ea:	4615      	mov	r5, r2
 800a3ec:	461e      	mov	r6, r3
   NdpLinkLayerAddrOption *linkLayerAddrOption;
   NdpNeighborCacheEntry *entry;
#endif

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800a3ee:	4610      	mov	r0, r2
 800a3f0:	f001 fe42 	bl	800c078 <netBufferGetLength>
 800a3f4:	1b84      	subs	r4, r0, r6

   //Check the length of the Router Advertisement message
   if(length < sizeof(NdpRouterAdvMessage))
 800a3f6:	2c0f      	cmp	r4, #15
 800a3f8:	d801      	bhi.n	800a3fe <ndpProcessRouterAdv+0x1c>
      //Process the valid advertisement
      slaacParseRouterAdv(interface->slaacContext, message,
         length + sizeof(NdpRouterAdvMessage));
   }
#endif
}
 800a3fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   message = netBufferAt(buffer, offset, length);
 800a3fe:	4622      	mov	r2, r4
 800a400:	4631      	mov	r1, r6
 800a402:	4628      	mov	r0, r5
 800a404:	f001 fed8 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 800a408:	4605      	mov	r5, r0
 800a40a:	2800      	cmp	r0, #0
 800a40c:	d0f5      	beq.n	800a3fa <ndpProcessRouterAdv+0x18>
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800a40e:	f898 3000 	ldrb.w	r3, [r8]
 800a412:	2bfe      	cmp	r3, #254	@ 0xfe
 800a414:	d1f1      	bne.n	800a3fa <ndpProcessRouterAdv+0x18>
 800a416:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a41a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a41e:	2b80      	cmp	r3, #128	@ 0x80
 800a420:	d1eb      	bne.n	800a3fa <ndpProcessRouterAdv+0x18>
   if(ancillary->ttl != NDP_HOP_LIMIT)
 800a422:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	2bff      	cmp	r3, #255	@ 0xff
 800a428:	d1e7      	bne.n	800a3fa <ndpProcessRouterAdv+0x18>
   if(message->code)
 800a42a:	7843      	ldrb	r3, [r0, #1]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d1e4      	bne.n	800a3fa <ndpProcessRouterAdv+0x18>
   length -= sizeof(NdpRouterAdvMessage);
 800a430:	f1a4 0910 	sub.w	r9, r4, #16
   error = ndpCheckOptions(message->options, length);
 800a434:	f100 0610 	add.w	r6, r0, #16
 800a438:	4649      	mov	r1, r9
 800a43a:	4630      	mov	r0, r6
 800a43c:	f001 fb8d 	bl	800bb5a <ndpCheckOptions>
   if(error)
 800a440:	2800      	cmp	r0, #0
 800a442:	d1da      	bne.n	800a3fa <ndpProcessRouterAdv+0x18>
   if(ntohs(message->routerLifetime) != 0)
 800a444:	88e8      	ldrh	r0, [r5, #6]
 800a446:	f7f6 f8e9 	bl	800061c <swapInt16>
 800a44a:	b190      	cbz	r0, 800a472 <ndpProcessRouterAdv+0x90>
      ipv6AddDefaultRouter(interface, &pseudoHeader->srcAddr,
 800a44c:	88e8      	ldrh	r0, [r5, #6]
 800a44e:	f7f6 f8e5 	bl	800061c <swapInt16>
 800a452:	4602      	mov	r2, r0
         ntohs(message->routerLifetime), message->prf);
 800a454:	796b      	ldrb	r3, [r5, #5]
      ipv6AddDefaultRouter(interface, &pseudoHeader->srcAddr,
 800a456:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a45a:	4641      	mov	r1, r8
 800a45c:	4638      	mov	r0, r7
 800a45e:	f7fd faff 	bl	8007a60 <ipv6AddDefaultRouter>
      if(interface->ndpContext.rtrSolicitationCount > 1)
 800a462:	f8d7 3b80 	ldr.w	r3, [r7, #2944]	@ 0xb80
 800a466:	2b01      	cmp	r3, #1
 800a468:	d907      	bls.n	800a47a <ndpProcessRouterAdv+0x98>
         interface->ndpContext.rtrAdvReceived = TRUE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 800a470:	e003      	b.n	800a47a <ndpProcessRouterAdv+0x98>
      ipv6RemoveDefaultRouter(interface, &pseudoHeader->srcAddr);
 800a472:	4641      	mov	r1, r8
 800a474:	4638      	mov	r0, r7
 800a476:	f7fd fb39 	bl	8007aec <ipv6RemoveDefaultRouter>
   if(interface->nicDriver != NULL &&
 800a47a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a47c:	b113      	cbz	r3, 800a484 <ndpProcessRouterAdv+0xa2>
      interface->nicDriver->type == NIC_TYPE_6LOWPAN)
 800a47e:	781b      	ldrb	r3, [r3, #0]
   if(interface->nicDriver != NULL &&
 800a480:	2b04      	cmp	r3, #4
 800a482:	d04f      	beq.n	800a524 <ndpProcessRouterAdv+0x142>
   if(message->curHopLimit != 0)
 800a484:	792b      	ldrb	r3, [r5, #4]
 800a486:	b10b      	cbz	r3, 800a48c <ndpProcessRouterAdv+0xaa>
      interface->ipv6Context.curHopLimit = message->curHopLimit;
 800a488:	f887 37ad 	strb.w	r3, [r7, #1965]	@ 0x7ad
   if(message->reachableTime != 0)
 800a48c:	68a8      	ldr	r0, [r5, #8]
 800a48e:	2800      	cmp	r0, #0
 800a490:	d14c      	bne.n	800a52c <ndpProcessRouterAdv+0x14a>
   if(message->retransTimer != 0)
 800a492:	68e8      	ldr	r0, [r5, #12]
 800a494:	2800      	cmp	r0, #0
 800a496:	d14e      	bne.n	800a536 <ndpProcessRouterAdv+0x154>
   linkLayerAddrOption = ndpGetOption(message->options, length,
 800a498:	2201      	movs	r2, #1
 800a49a:	4649      	mov	r1, r9
 800a49c:	4630      	mov	r0, r6
 800a49e:	f001 fb40 	bl	800bb22 <ndpGetOption>
   if(linkLayerAddrOption != NULL && linkLayerAddrOption->length == 1)
 800a4a2:	4682      	mov	sl, r0
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d04b      	beq.n	800a540 <ndpProcessRouterAdv+0x15e>
 800a4a8:	7843      	ldrb	r3, [r0, #1]
 800a4aa:	2b01      	cmp	r3, #1
 800a4ac:	d001      	beq.n	800a4b2 <ndpProcessRouterAdv+0xd0>
      linkLayerAddrOption = NULL;
 800a4ae:	f04f 0a00 	mov.w	sl, #0
   entry = ndpFindNeighborCacheEntry(interface, &pseudoHeader->srcAddr);
 800a4b2:	4641      	mov	r1, r8
 800a4b4:	4638      	mov	r0, r7
 800a4b6:	f000 fe2b 	bl	800b110 <ndpFindNeighborCacheEntry>
   if(entry == NULL)
 800a4ba:	4683      	mov	fp, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d042      	beq.n	800a546 <ndpProcessRouterAdv+0x164>
      entry->isRouter = TRUE;
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	6183      	str	r3, [r0, #24]
      if(linkLayerAddrOption)
 800a4c4:	f1ba 0f00 	cmp.w	sl, #0
 800a4c8:	d00c      	beq.n	800a4e4 <ndpProcessRouterAdv+0x102>
         if(entry->state == NDP_STATE_PERMANENT)
 800a4ca:	7803      	ldrb	r3, [r0, #0]
 800a4cc:	2b06      	cmp	r3, #6
 800a4ce:	d009      	beq.n	800a4e4 <ndpProcessRouterAdv+0x102>
         else if(entry->state == NDP_STATE_INCOMPLETE)
 800a4d0:	2b01      	cmp	r3, #1
 800a4d2:	d064      	beq.n	800a59e <ndpProcessRouterAdv+0x1bc>
            if(!macCompAddr(&entry->macAddr, &linkLayerAddrOption->linkLayerAddr))
 800a4d4:	2206      	movs	r2, #6
 800a4d6:	f10a 0102 	add.w	r1, sl, #2
 800a4da:	3011      	adds	r0, #17
 800a4dc:	f00a fba8 	bl	8014c30 <memcmp>
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d177      	bne.n	800a5d4 <ndpProcessRouterAdv+0x1f2>
   mtuOption = ndpGetOption(message->options, length, NDP_OPT_MTU);
 800a4e4:	2205      	movs	r2, #5
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	4630      	mov	r0, r6
 800a4ea:	f001 fb1a 	bl	800bb22 <ndpGetOption>
   if(mtuOption != NULL && mtuOption->length == 1)
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	b110      	cbz	r0, 800a4f8 <ndpProcessRouterAdv+0x116>
 800a4f2:	7843      	ldrb	r3, [r0, #1]
 800a4f4:	2b01      	cmp	r3, #1
 800a4f6:	d07a      	beq.n	800a5ee <ndpProcessRouterAdv+0x20c>
      linkLayerAddrOption = NULL;
 800a4f8:	2000      	movs	r0, #0
      prefixInfoOption = ndpGetOption(message->options + n, length - n,
 800a4fa:	2203      	movs	r2, #3
 800a4fc:	eba9 0100 	sub.w	r1, r9, r0
 800a500:	4430      	add	r0, r6
 800a502:	f001 fb0e 	bl	800bb22 <ndpGetOption>
      if(prefixInfoOption == NULL)
 800a506:	4680      	mov	r8, r0
 800a508:	2800      	cmp	r0, #0
 800a50a:	f000 8085 	beq.w	800a618 <ndpProcessRouterAdv+0x236>
      ndpParsePrefixInfoOption(interface, prefixInfoOption);
 800a50e:	4601      	mov	r1, r0
 800a510:	4638      	mov	r0, r7
 800a512:	f001 f843 	bl	800b59c <ndpParsePrefixInfoOption>
      n = (uint8_t *) prefixInfoOption - message->options;
 800a516:	eba8 0006 	sub.w	r0, r8, r6
      n += prefixInfoOption->length * 8;
 800a51a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a51e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
      prefixInfoOption = ndpGetOption(message->options + n, length - n,
 800a522:	e7ea      	b.n	800a4fa <ndpProcessRouterAdv+0x118>
      interface->ndpContext.rtrAdvReceived = TRUE;
 800a524:	2301      	movs	r3, #1
 800a526:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 800a52a:	e7ab      	b.n	800a484 <ndpProcessRouterAdv+0xa2>
      interface->ndpContext.reachableTime = ntohl(message->reachableTime);
 800a52c:	f7f6 f879 	bl	8000622 <swapInt32>
 800a530:	f8c7 0b64 	str.w	r0, [r7, #2916]	@ 0xb64
 800a534:	e7ad      	b.n	800a492 <ndpProcessRouterAdv+0xb0>
      interface->ndpContext.retransTimer = ntohl(message->retransTimer);
 800a536:	f7f6 f874 	bl	8000622 <swapInt32>
 800a53a:	f8c7 0b68 	str.w	r0, [r7, #2920]	@ 0xb68
 800a53e:	e7ab      	b.n	800a498 <ndpProcessRouterAdv+0xb6>
      linkLayerAddrOption = NULL;
 800a540:	f04f 0a00 	mov.w	sl, #0
 800a544:	e7b5      	b.n	800a4b2 <ndpProcessRouterAdv+0xd0>
      if(linkLayerAddrOption)
 800a546:	f1ba 0f00 	cmp.w	sl, #0
 800a54a:	d0cb      	beq.n	800a4e4 <ndpProcessRouterAdv+0x102>
         if(interface->ndpContext.enable)
 800a54c:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 800a550:	2b00      	cmp	r3, #0
 800a552:	d0c7      	beq.n	800a4e4 <ndpProcessRouterAdv+0x102>
            entry = ndpCreateNeighborCacheEntry(interface);
 800a554:	4638      	mov	r0, r7
 800a556:	f000 fe7a 	bl	800b24e <ndpCreateNeighborCacheEntry>
            if(entry != NULL)
 800a55a:	4603      	mov	r3, r0
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d0c1      	beq.n	800a4e4 <ndpProcessRouterAdv+0x102>
               entry->ipAddr = pseudoHeader->srcAddr;
 800a560:	f8d8 c000 	ldr.w	ip, [r8]
 800a564:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a568:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800a56c:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800a570:	f8c3 c001 	str.w	ip, [r3, #1]
 800a574:	f8c3 0005 	str.w	r0, [r3, #5]
 800a578:	f8c3 1009 	str.w	r1, [r3, #9]
 800a57c:	f8c3 200d 	str.w	r2, [r3, #13]
               entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800a580:	f8da 2002 	ldr.w	r2, [sl, #2]
 800a584:	f8c3 2011 	str.w	r2, [r3, #17]
 800a588:	f8ba 2006 	ldrh.w	r2, [sl, #6]
 800a58c:	f8a3 2015 	strh.w	r2, [r3, #21]
               entry->isRouter = TRUE;
 800a590:	2201      	movs	r2, #1
 800a592:	619a      	str	r2, [r3, #24]
               ndpChangeState(entry, NDP_STATE_STALE);
 800a594:	2103      	movs	r1, #3
 800a596:	4618      	mov	r0, r3
 800a598:	f000 fdb2 	bl	800b100 <ndpChangeState>
 800a59c:	e7a2      	b.n	800a4e4 <ndpProcessRouterAdv+0x102>
            entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800a59e:	f8da 3002 	ldr.w	r3, [sl, #2]
 800a5a2:	f8c0 3011 	str.w	r3, [r0, #17]
 800a5a6:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a5aa:	f8a0 3015 	strh.w	r3, [r0, #21]
            n = ndpSendQueuedPackets(interface, entry);
 800a5ae:	4601      	mov	r1, r0
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f000 fdd5 	bl	800b160 <ndpSendQueuedPackets>
            if(n > 0)
 800a5b6:	b140      	cbz	r0, 800a5ca <ndpProcessRouterAdv+0x1e8>
               entry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800a5b8:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a5bc:	f8cb 3020 	str.w	r3, [fp, #32]
               ndpChangeState(entry, NDP_STATE_DELAY);
 800a5c0:	2104      	movs	r1, #4
 800a5c2:	4658      	mov	r0, fp
 800a5c4:	f000 fd9c 	bl	800b100 <ndpChangeState>
 800a5c8:	e78c      	b.n	800a4e4 <ndpProcessRouterAdv+0x102>
               ndpChangeState(entry, NDP_STATE_STALE);
 800a5ca:	2103      	movs	r1, #3
 800a5cc:	4658      	mov	r0, fp
 800a5ce:	f000 fd97 	bl	800b100 <ndpChangeState>
 800a5d2:	e787      	b.n	800a4e4 <ndpProcessRouterAdv+0x102>
               entry->macAddr = linkLayerAddrOption->linkLayerAddr;
 800a5d4:	f8da 3002 	ldr.w	r3, [sl, #2]
 800a5d8:	f8cb 3011 	str.w	r3, [fp, #17]
 800a5dc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 800a5e0:	f8ab 3015 	strh.w	r3, [fp, #21]
               ndpChangeState(entry, NDP_STATE_STALE);
 800a5e4:	2103      	movs	r1, #3
 800a5e6:	4658      	mov	r0, fp
 800a5e8:	f000 fd8a 	bl	800b100 <ndpChangeState>
 800a5ec:	e77a      	b.n	800a4e4 <ndpProcessRouterAdv+0x102>
      physicalInterface = nicGetPhysicalInterface(interface);
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	f002 fa82 	bl	800caf8 <nicGetPhysicalInterface>
 800a5f4:	4682      	mov	sl, r0
      n = ntohl(mtuOption->mtu);
 800a5f6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5fa:	f7f6 f812 	bl	8000622 <swapInt32>
      if(n >= IPV6_DEFAULT_MTU && n <= physicalInterface->nicDriver->mtu)
 800a5fe:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 800a602:	f4ff af79 	bcc.w	800a4f8 <ndpProcessRouterAdv+0x116>
 800a606:	f8da 2034 	ldr.w	r2, [sl, #52]	@ 0x34
 800a60a:	6852      	ldr	r2, [r2, #4]
 800a60c:	4282      	cmp	r2, r0
 800a60e:	f4ff af73 	bcc.w	800a4f8 <ndpProcessRouterAdv+0x116>
         interface->ipv6Context.linkMtu = n;
 800a612:	f8c7 07a4 	str.w	r0, [r7, #1956]	@ 0x7a4
 800a616:	e76f      	b.n	800a4f8 <ndpProcessRouterAdv+0x116>
   if(interface->slaacContext != NULL)
 800a618:	f507 5780 	add.w	r7, r7, #4096	@ 0x1000
 800a61c:	f8d7 02a0 	ldr.w	r0, [r7, #672]	@ 0x2a0
 800a620:	2800      	cmp	r0, #0
 800a622:	f43f aeea 	beq.w	800a3fa <ndpProcessRouterAdv+0x18>
      slaacParseRouterAdv(interface->slaacContext, message,
 800a626:	4622      	mov	r2, r4
 800a628:	4629      	mov	r1, r5
 800a62a:	f002 fded 	bl	800d208 <slaacParseRouterAdv>
 800a62e:	e6e4      	b.n	800a3fa <ndpProcessRouterAdv+0x18>

0800a630 <ndpProcessNeighborAdv>:
 **/

void ndpProcessNeighborAdv(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset, const NetRxAncillary *ancillary)
{
 800a630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a634:	4607      	mov	r7, r0
 800a636:	4688      	mov	r8, r1
 800a638:	4615      	mov	r5, r2
 800a63a:	461e      	mov	r6, r3
   NdpLinkLayerAddrOption *option;
   NdpNeighborCacheEntry *neighborCacheEntry;
   Ipv6AddrEntry *addrEntry;

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800a63c:	4610      	mov	r0, r2
 800a63e:	f001 fd1b 	bl	800c078 <netBufferGetLength>
 800a642:	1b84      	subs	r4, r0, r6

   //Check the length of the Neighbor Advertisement message
   if(length < sizeof(NdpNeighborAdvMessage))
 800a644:	2c17      	cmp	r4, #23
 800a646:	d801      	bhi.n	800a64c <ndpProcessNeighborAdv+0x1c>
         //The neighbor is a host
         neighborCacheEntry->isRouter = FALSE;
      }
   }
#endif
}
 800a648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   message = netBufferAt(buffer, offset, length);
 800a64c:	4622      	mov	r2, r4
 800a64e:	4631      	mov	r1, r6
 800a650:	4628      	mov	r0, r5
 800a652:	f001 fdb1 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 800a656:	4605      	mov	r5, r0
 800a658:	2800      	cmp	r0, #0
 800a65a:	d0f5      	beq.n	800a648 <ndpProcessNeighborAdv+0x18>
   if(ancillary->ttl != NDP_HOP_LIMIT)
 800a65c:	9b06      	ldr	r3, [sp, #24]
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2bff      	cmp	r3, #255	@ 0xff
 800a662:	d1f1      	bne.n	800a648 <ndpProcessNeighborAdv+0x18>
   if(message->code)
 800a664:	7843      	ldrb	r3, [r0, #1]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1ee      	bne.n	800a648 <ndpProcessNeighborAdv+0x18>
   if(ipv6IsMulticastAddr(&message->targetAddr))
 800a66a:	7a03      	ldrb	r3, [r0, #8]
 800a66c:	2bff      	cmp	r3, #255	@ 0xff
 800a66e:	d0eb      	beq.n	800a648 <ndpProcessNeighborAdv+0x18>
   if(ipv6IsMulticastAddr(&pseudoHeader->destAddr) && message->s)
 800a670:	f898 3010 	ldrb.w	r3, [r8, #16]
 800a674:	2bff      	cmp	r3, #255	@ 0xff
 800a676:	d103      	bne.n	800a680 <ndpProcessNeighborAdv+0x50>
 800a678:	7903      	ldrb	r3, [r0, #4]
 800a67a:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800a67e:	d1e3      	bne.n	800a648 <ndpProcessNeighborAdv+0x18>
   length -= sizeof(NdpNeighborAdvMessage);
 800a680:	3c18      	subs	r4, #24
   error = ndpCheckOptions(message->options, length);
 800a682:	f105 0818 	add.w	r8, r5, #24
 800a686:	4621      	mov	r1, r4
 800a688:	4640      	mov	r0, r8
 800a68a:	f001 fa66 	bl	800bb5a <ndpCheckOptions>
   if(error)
 800a68e:	2800      	cmp	r0, #0
 800a690:	d1da      	bne.n	800a648 <ndpProcessNeighborAdv+0x18>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800a692:	2600      	movs	r6, #0
 800a694:	e000      	b.n	800a698 <ndpProcessNeighborAdv+0x68>
 800a696:	3601      	adds	r6, #1
 800a698:	2e02      	cmp	r6, #2
 800a69a:	d81d      	bhi.n	800a6d8 <ndpProcessNeighborAdv+0xa8>
      if(addrEntry->state != IPV6_ADDR_STATE_INVALID)
 800a69c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800a6a0:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800a6a4:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d0f4      	beq.n	800a696 <ndpProcessNeighborAdv+0x66>
         if(ipv6CompAddr(&addrEntry->addr, &message->targetAddr))
 800a6ac:	eb06 0046 	add.w	r0, r6, r6, lsl #1
 800a6b0:	0100      	lsls	r0, r0, #4
 800a6b2:	f500 60f6 	add.w	r0, r0, #1968	@ 0x7b0
 800a6b6:	4438      	add	r0, r7
 800a6b8:	2210      	movs	r2, #16
 800a6ba:	f105 0108 	add.w	r1, r5, #8
 800a6be:	3008      	adds	r0, #8
 800a6c0:	f00a fab6 	bl	8014c30 <memcmp>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d1e6      	bne.n	800a696 <ndpProcessNeighborAdv+0x66>
            addrEntry->duplicate = TRUE;
 800a6c8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800a6cc:	eb07 1306 	add.w	r3, r7, r6, lsl #4
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f8c3 27cc 	str.w	r2, [r3, #1996]	@ 0x7cc
            return;
 800a6d6:	e7b7      	b.n	800a648 <ndpProcessNeighborAdv+0x18>
   neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &message->targetAddr);
 800a6d8:	f105 0108 	add.w	r1, r5, #8
 800a6dc:	4638      	mov	r0, r7
 800a6de:	f000 fd17 	bl	800b110 <ndpFindNeighborCacheEntry>
   if(neighborCacheEntry != NULL)
 800a6e2:	4606      	mov	r6, r0
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d0af      	beq.n	800a648 <ndpProcessNeighborAdv+0x18>
      option = ndpGetOption(message->options, length,
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	f001 fa18 	bl	800bb22 <ndpGetOption>
      if(option != NULL && option->length == 1)
 800a6f2:	4604      	mov	r4, r0
 800a6f4:	b300      	cbz	r0, 800a738 <ndpProcessNeighborAdv+0x108>
 800a6f6:	7843      	ldrb	r3, [r0, #1]
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d012      	beq.n	800a722 <ndpProcessNeighborAdv+0xf2>
      differentLinkLayerAddr = FALSE;
 800a6fc:	2200      	movs	r2, #0
      if(neighborCacheEntry->state == NDP_STATE_PERMANENT)
 800a6fe:	7833      	ldrb	r3, [r6, #0]
 800a700:	2b06      	cmp	r3, #6
 800a702:	d056      	beq.n	800a7b2 <ndpProcessNeighborAdv+0x182>
      else if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800a704:	2b01      	cmp	r3, #1
 800a706:	d019      	beq.n	800a73c <ndpProcessNeighborAdv+0x10c>
         if(!message->o && differentLinkLayerAddr)
 800a708:	7929      	ldrb	r1, [r5, #4]
 800a70a:	f011 0f20 	tst.w	r1, #32
 800a70e:	d13e      	bne.n	800a78e <ndpProcessNeighborAdv+0x15e>
 800a710:	2a00      	cmp	r2, #0
 800a712:	d03c      	beq.n	800a78e <ndpProcessNeighborAdv+0x15e>
            if(neighborCacheEntry->state == NDP_STATE_REACHABLE)
 800a714:	2b02      	cmp	r3, #2
 800a716:	d14c      	bne.n	800a7b2 <ndpProcessNeighborAdv+0x182>
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a718:	2103      	movs	r1, #3
 800a71a:	4630      	mov	r0, r6
 800a71c:	f000 fcf0 	bl	800b100 <ndpChangeState>
 800a720:	e047      	b.n	800a7b2 <ndpProcessNeighborAdv+0x182>
         if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800a722:	2206      	movs	r2, #6
 800a724:	1c81      	adds	r1, r0, #2
 800a726:	f106 0011 	add.w	r0, r6, #17
 800a72a:	f00a fa81 	bl	8014c30 <memcmp>
 800a72e:	4602      	mov	r2, r0
 800a730:	2800      	cmp	r0, #0
 800a732:	d0e4      	beq.n	800a6fe <ndpProcessNeighborAdv+0xce>
            differentLinkLayerAddr = TRUE;
 800a734:	2201      	movs	r2, #1
 800a736:	e7e2      	b.n	800a6fe <ndpProcessNeighborAdv+0xce>
      differentLinkLayerAddr = FALSE;
 800a738:	2200      	movs	r2, #0
 800a73a:	e7e0      	b.n	800a6fe <ndpProcessNeighborAdv+0xce>
         if(option != NULL && option->length == 1)
 800a73c:	b3cc      	cbz	r4, 800a7b2 <ndpProcessNeighborAdv+0x182>
 800a73e:	7863      	ldrb	r3, [r4, #1]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d136      	bne.n	800a7b2 <ndpProcessNeighborAdv+0x182>
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a744:	f8d4 3002 	ldr.w	r3, [r4, #2]
 800a748:	f8c6 3011 	str.w	r3, [r6, #17]
 800a74c:	88e3      	ldrh	r3, [r4, #6]
 800a74e:	f8a6 3015 	strh.w	r3, [r6, #21]
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800a752:	4631      	mov	r1, r6
 800a754:	4638      	mov	r0, r7
 800a756:	f000 fd03 	bl	800b160 <ndpSendQueuedPackets>
            if(message->s)
 800a75a:	792a      	ldrb	r2, [r5, #4]
 800a75c:	f012 0f40 	tst.w	r2, #64	@ 0x40
 800a760:	d108      	bne.n	800a774 <ndpProcessNeighborAdv+0x144>
               if(n > 0)
 800a762:	b178      	cbz	r0, 800a784 <ndpProcessNeighborAdv+0x154>
                  neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800a764:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a768:	6233      	str	r3, [r6, #32]
                  ndpChangeState(neighborCacheEntry, NDP_STATE_DELAY);
 800a76a:	2104      	movs	r1, #4
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 fcc7 	bl	800b100 <ndpChangeState>
 800a772:	e01e      	b.n	800a7b2 <ndpProcessNeighborAdv+0x182>
               neighborCacheEntry->timeout = interface->ndpContext.reachableTime;
 800a774:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800a778:	6233      	str	r3, [r6, #32]
               ndpChangeState(neighborCacheEntry, NDP_STATE_REACHABLE);
 800a77a:	2102      	movs	r1, #2
 800a77c:	4630      	mov	r0, r6
 800a77e:	f000 fcbf 	bl	800b100 <ndpChangeState>
 800a782:	e016      	b.n	800a7b2 <ndpProcessNeighborAdv+0x182>
                  ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a784:	2103      	movs	r1, #3
 800a786:	4630      	mov	r0, r6
 800a788:	f000 fcba 	bl	800b100 <ndpChangeState>
 800a78c:	e011      	b.n	800a7b2 <ndpProcessNeighborAdv+0x182>
            if(message->s)
 800a78e:	f011 0f40 	tst.w	r1, #64	@ 0x40
 800a792:	d017      	beq.n	800a7c4 <ndpProcessNeighborAdv+0x194>
               if(differentLinkLayerAddr)
 800a794:	b132      	cbz	r2, 800a7a4 <ndpProcessNeighborAdv+0x174>
                  neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a796:	f8d4 3002 	ldr.w	r3, [r4, #2]
 800a79a:	f8c6 3011 	str.w	r3, [r6, #17]
 800a79e:	88e3      	ldrh	r3, [r4, #6]
 800a7a0:	f8a6 3015 	strh.w	r3, [r6, #21]
               neighborCacheEntry->timeout = interface->ndpContext.reachableTime;
 800a7a4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 800a7a8:	6233      	str	r3, [r6, #32]
               ndpChangeState(neighborCacheEntry, NDP_STATE_REACHABLE);
 800a7aa:	2102      	movs	r1, #2
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	f000 fca7 	bl	800b100 <ndpChangeState>
      if(message->r)
 800a7b2:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	db12      	blt.n	800a7e0 <ndpProcessNeighborAdv+0x1b0>
         if(neighborCacheEntry->isRouter)
 800a7ba:	69b3      	ldr	r3, [r6, #24]
 800a7bc:	b99b      	cbnz	r3, 800a7e6 <ndpProcessNeighborAdv+0x1b6>
         neighborCacheEntry->isRouter = FALSE;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	61b3      	str	r3, [r6, #24]
 800a7c2:	e741      	b.n	800a648 <ndpProcessNeighborAdv+0x18>
               if(differentLinkLayerAddr)
 800a7c4:	2a00      	cmp	r2, #0
 800a7c6:	d0f4      	beq.n	800a7b2 <ndpProcessNeighborAdv+0x182>
                  neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a7c8:	f8d4 3002 	ldr.w	r3, [r4, #2]
 800a7cc:	f8c6 3011 	str.w	r3, [r6, #17]
 800a7d0:	88e3      	ldrh	r3, [r4, #6]
 800a7d2:	f8a6 3015 	strh.w	r3, [r6, #21]
                  ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a7d6:	2103      	movs	r1, #3
 800a7d8:	4630      	mov	r0, r6
 800a7da:	f000 fc91 	bl	800b100 <ndpChangeState>
 800a7de:	e7e8      	b.n	800a7b2 <ndpProcessNeighborAdv+0x182>
         neighborCacheEntry->isRouter = TRUE;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	61b3      	str	r3, [r6, #24]
 800a7e4:	e730      	b.n	800a648 <ndpProcessNeighborAdv+0x18>
            ipv6RemoveDefaultRouter(interface, &neighborCacheEntry->ipAddr);
 800a7e6:	1c71      	adds	r1, r6, #1
 800a7e8:	4638      	mov	r0, r7
 800a7ea:	f7fd f97f 	bl	8007aec <ipv6RemoveDefaultRouter>
 800a7ee:	e7e6      	b.n	800a7be <ndpProcessNeighborAdv+0x18e>

0800a7f0 <ndpProcessRedirect>:
 **/

void ndpProcessRedirect(NetInterface *interface,
   const Ipv6PseudoHeader *pseudoHeader, const NetBuffer *buffer,
   size_t offset, const NetRxAncillary *ancillary)
{
 800a7f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7f4:	4607      	mov	r7, r0
 800a7f6:	4688      	mov	r8, r1
 800a7f8:	4615      	mov	r5, r2
 800a7fa:	461e      	mov	r6, r3
   NdpLinkLayerAddrOption *option;
   NdpNeighborCacheEntry *neighborCacheEntry;
   NdpDestCacheEntry *destCacheEntry;

   //Retrieve the length of the message
   length = netBufferGetLength(buffer) - offset;
 800a7fc:	4610      	mov	r0, r2
 800a7fe:	f001 fc3b 	bl	800c078 <netBufferGetLength>
 800a802:	1b84      	subs	r4, r0, r6

   //Check the length of the Redirect message
   if(length < sizeof(NdpRedirectMessage))
 800a804:	2c27      	cmp	r4, #39	@ 0x27
 800a806:	d801      	bhi.n	800a80c <ndpProcessRedirect+0x1c>
            }
         }
      }
   }
#endif
}
 800a808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   message = netBufferAt(buffer, offset, length);
 800a80c:	4622      	mov	r2, r4
 800a80e:	4631      	mov	r1, r6
 800a810:	4628      	mov	r0, r5
 800a812:	f001 fcd1 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 800a816:	4605      	mov	r5, r0
 800a818:	2800      	cmp	r0, #0
 800a81a:	d0f5      	beq.n	800a808 <ndpProcessRedirect+0x18>
   if(ancillary->ttl != NDP_HOP_LIMIT)
 800a81c:	9b08      	ldr	r3, [sp, #32]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2bff      	cmp	r3, #255	@ 0xff
 800a822:	d1f1      	bne.n	800a808 <ndpProcessRedirect+0x18>
   if(message->code)
 800a824:	7843      	ldrb	r3, [r0, #1]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1ee      	bne.n	800a808 <ndpProcessRedirect+0x18>
   if(!ipv6IsLinkLocalUnicastAddr(&pseudoHeader->srcAddr))
 800a82a:	f898 3000 	ldrb.w	r3, [r8]
 800a82e:	2bfe      	cmp	r3, #254	@ 0xfe
 800a830:	d1ea      	bne.n	800a808 <ndpProcessRedirect+0x18>
 800a832:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a836:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a83a:	2b80      	cmp	r3, #128	@ 0x80
 800a83c:	d1e4      	bne.n	800a808 <ndpProcessRedirect+0x18>
   if(!ndpIsFirstHopRouter(interface, &message->destAddr, &pseudoHeader->srcAddr))
 800a83e:	f100 0618 	add.w	r6, r0, #24
 800a842:	4642      	mov	r2, r8
 800a844:	4631      	mov	r1, r6
 800a846:	4638      	mov	r0, r7
 800a848:	f001 f8b1 	bl	800b9ae <ndpIsFirstHopRouter>
 800a84c:	2800      	cmp	r0, #0
 800a84e:	d0db      	beq.n	800a808 <ndpProcessRedirect+0x18>
   if(ipv6IsMulticastAddr(&message->destAddr))
 800a850:	7e2b      	ldrb	r3, [r5, #24]
 800a852:	2bff      	cmp	r3, #255	@ 0xff
 800a854:	d0d8      	beq.n	800a808 <ndpProcessRedirect+0x18>
   if(!ipv6IsLinkLocalUnicastAddr(&message->targetAddr) &&
 800a856:	7a2b      	ldrb	r3, [r5, #8]
 800a858:	2bfe      	cmp	r3, #254	@ 0xfe
 800a85a:	d05a      	beq.n	800a912 <ndpProcessRedirect+0x122>
      !ipv6CompAddr(&message->targetAddr, &message->destAddr))
 800a85c:	2210      	movs	r2, #16
 800a85e:	4631      	mov	r1, r6
 800a860:	f105 0008 	add.w	r0, r5, #8
 800a864:	f00a f9e4 	bl	8014c30 <memcmp>
   if(!ipv6IsLinkLocalUnicastAddr(&message->targetAddr) &&
 800a868:	2800      	cmp	r0, #0
 800a86a:	d1cd      	bne.n	800a808 <ndpProcessRedirect+0x18>
   length -= sizeof(NdpNeighborAdvMessage);
 800a86c:	3c18      	subs	r4, #24
   error = ndpCheckOptions(message->options, length);
 800a86e:	f105 0828 	add.w	r8, r5, #40	@ 0x28
 800a872:	4621      	mov	r1, r4
 800a874:	4640      	mov	r0, r8
 800a876:	f001 f970 	bl	800bb5a <ndpCheckOptions>
   if(error)
 800a87a:	2800      	cmp	r0, #0
 800a87c:	d1c4      	bne.n	800a808 <ndpProcessRedirect+0x18>
   destCacheEntry = ndpFindDestCacheEntry(interface, &message->destAddr);
 800a87e:	4631      	mov	r1, r6
 800a880:	4638      	mov	r0, r7
 800a882:	f000 fe69 	bl	800b558 <ndpFindDestCacheEntry>
   if(destCacheEntry != NULL)
 800a886:	4681      	mov	r9, r0
 800a888:	2800      	cmp	r0, #0
 800a88a:	d048      	beq.n	800a91e <ndpProcessRedirect+0x12e>
      destCacheEntry->nextHop = message->targetAddr;
 800a88c:	f100 0c10 	add.w	ip, r0, #16
 800a890:	68a8      	ldr	r0, [r5, #8]
 800a892:	68e9      	ldr	r1, [r5, #12]
 800a894:	692a      	ldr	r2, [r5, #16]
 800a896:	696b      	ldr	r3, [r5, #20]
 800a898:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
      destCacheEntry->timestamp = osGetSystemTime();
 800a89c:	f7f5 ffae 	bl	80007fc <osGetSystemTime>
 800a8a0:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
   option = ndpGetOption(message->options, length,
 800a8a4:	2202      	movs	r2, #2
 800a8a6:	4621      	mov	r1, r4
 800a8a8:	4640      	mov	r0, r8
 800a8aa:	f001 f93a 	bl	800bb22 <ndpGetOption>
   if(option != NULL && option->length == 1)
 800a8ae:	4680      	mov	r8, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d0a9      	beq.n	800a808 <ndpProcessRedirect+0x18>
 800a8b4:	7843      	ldrb	r3, [r0, #1]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d1a6      	bne.n	800a808 <ndpProcessRedirect+0x18>
         &message->targetAddr);
 800a8ba:	f105 0908 	add.w	r9, r5, #8
      neighborCacheEntry = ndpFindNeighborCacheEntry(interface,
 800a8be:	4649      	mov	r1, r9
 800a8c0:	4638      	mov	r0, r7
 800a8c2:	f000 fc25 	bl	800b110 <ndpFindNeighborCacheEntry>
      if(neighborCacheEntry == NULL)
 800a8c6:	4604      	mov	r4, r0
 800a8c8:	2800      	cmp	r0, #0
 800a8ca:	d044      	beq.n	800a956 <ndpProcessRedirect+0x166>
         if(!ipv6CompAddr(&message->targetAddr, &message->destAddr))
 800a8cc:	2210      	movs	r2, #16
 800a8ce:	4631      	mov	r1, r6
 800a8d0:	4648      	mov	r0, r9
 800a8d2:	f00a f9ad 	bl	8014c30 <memcmp>
 800a8d6:	b108      	cbz	r0, 800a8dc <ndpProcessRedirect+0xec>
            neighborCacheEntry->isRouter = TRUE;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	61a3      	str	r3, [r4, #24]
         if(neighborCacheEntry->state == NDP_STATE_PERMANENT)
 800a8dc:	7823      	ldrb	r3, [r4, #0]
 800a8de:	2b06      	cmp	r3, #6
 800a8e0:	d092      	beq.n	800a808 <ndpProcessRedirect+0x18>
         else if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	d05e      	beq.n	800a9a4 <ndpProcessRedirect+0x1b4>
            if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800a8e6:	2206      	movs	r2, #6
 800a8e8:	f108 0102 	add.w	r1, r8, #2
 800a8ec:	f104 0011 	add.w	r0, r4, #17
 800a8f0:	f00a f99e 	bl	8014c30 <memcmp>
 800a8f4:	2800      	cmp	r0, #0
 800a8f6:	d087      	beq.n	800a808 <ndpProcessRedirect+0x18>
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a8f8:	f8d8 3002 	ldr.w	r3, [r8, #2]
 800a8fc:	f8c4 3011 	str.w	r3, [r4, #17]
 800a900:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a904:	f8a4 3015 	strh.w	r3, [r4, #21]
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a908:	2103      	movs	r1, #3
 800a90a:	4620      	mov	r0, r4
 800a90c:	f000 fbf8 	bl	800b100 <ndpChangeState>
 800a910:	e77a      	b.n	800a808 <ndpProcessRedirect+0x18>
   if(!ipv6IsLinkLocalUnicastAddr(&message->targetAddr) &&
 800a912:	7a6b      	ldrb	r3, [r5, #9]
 800a914:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800a918:	2b80      	cmp	r3, #128	@ 0x80
 800a91a:	d19f      	bne.n	800a85c <ndpProcessRedirect+0x6c>
 800a91c:	e7a6      	b.n	800a86c <ndpProcessRedirect+0x7c>
      destCacheEntry = ndpCreateDestCacheEntry(interface);
 800a91e:	4638      	mov	r0, r7
 800a920:	f000 fde0 	bl	800b4e4 <ndpCreateDestCacheEntry>
      if(destCacheEntry != NULL)
 800a924:	4681      	mov	r9, r0
 800a926:	2800      	cmp	r0, #0
 800a928:	d0bc      	beq.n	800a8a4 <ndpProcessRedirect+0xb4>
         destCacheEntry->destAddr = message->destAddr;
 800a92a:	4684      	mov	ip, r0
 800a92c:	69a8      	ldr	r0, [r5, #24]
 800a92e:	69e9      	ldr	r1, [r5, #28]
 800a930:	6a2a      	ldr	r2, [r5, #32]
 800a932:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800a934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
         destCacheEntry->nextHop = message->targetAddr;
 800a938:	68a8      	ldr	r0, [r5, #8]
 800a93a:	68e9      	ldr	r1, [r5, #12]
 800a93c:	692a      	ldr	r2, [r5, #16]
 800a93e:	696b      	ldr	r3, [r5, #20]
 800a940:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
         destCacheEntry->pathMtu = interface->ipv6Context.linkMtu;
 800a944:	f8d7 37a4 	ldr.w	r3, [r7, #1956]	@ 0x7a4
 800a948:	f8c9 3020 	str.w	r3, [r9, #32]
         destCacheEntry->timestamp = osGetSystemTime();
 800a94c:	f7f5 ff56 	bl	80007fc <osGetSystemTime>
 800a950:	f8c9 0024 	str.w	r0, [r9, #36]	@ 0x24
 800a954:	e7a6      	b.n	800a8a4 <ndpProcessRedirect+0xb4>
         if(interface->ndpContext.enable)
 800a956:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	f43f af54 	beq.w	800a808 <ndpProcessRedirect+0x18>
            neighborCacheEntry = ndpCreateNeighborCacheEntry(interface);
 800a960:	4638      	mov	r0, r7
 800a962:	f000 fc74 	bl	800b24e <ndpCreateNeighborCacheEntry>
            if(neighborCacheEntry != NULL)
 800a966:	4603      	mov	r3, r0
 800a968:	2800      	cmp	r0, #0
 800a96a:	f43f af4d 	beq.w	800a808 <ndpProcessRedirect+0x18>
               neighborCacheEntry->ipAddr = message->targetAddr;
 800a96e:	68ac      	ldr	r4, [r5, #8]
 800a970:	68e8      	ldr	r0, [r5, #12]
 800a972:	6929      	ldr	r1, [r5, #16]
 800a974:	696a      	ldr	r2, [r5, #20]
 800a976:	f8c3 4001 	str.w	r4, [r3, #1]
 800a97a:	f8c3 0005 	str.w	r0, [r3, #5]
 800a97e:	f8c3 1009 	str.w	r1, [r3, #9]
 800a982:	f8c3 200d 	str.w	r2, [r3, #13]
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a986:	f8d8 2002 	ldr.w	r2, [r8, #2]
 800a98a:	f8c3 2011 	str.w	r2, [r3, #17]
 800a98e:	f8b8 2006 	ldrh.w	r2, [r8, #6]
 800a992:	f8a3 2015 	strh.w	r2, [r3, #21]
               neighborCacheEntry->isRouter = FALSE;
 800a996:	2200      	movs	r2, #0
 800a998:	619a      	str	r2, [r3, #24]
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a99a:	2103      	movs	r1, #3
 800a99c:	4618      	mov	r0, r3
 800a99e:	f000 fbaf 	bl	800b100 <ndpChangeState>
 800a9a2:	e731      	b.n	800a808 <ndpProcessRedirect+0x18>
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800a9a4:	f8d8 3002 	ldr.w	r3, [r8, #2]
 800a9a8:	f8c4 3011 	str.w	r3, [r4, #17]
 800a9ac:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 800a9b0:	f8a4 3015 	strh.w	r3, [r4, #21]
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800a9b4:	4621      	mov	r1, r4
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f000 fbd2 	bl	800b160 <ndpSendQueuedPackets>
            if(n > 0)
 800a9bc:	b138      	cbz	r0, 800a9ce <ndpProcessRedirect+0x1de>
               neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800a9be:	f241 3388 	movw	r3, #5000	@ 0x1388
 800a9c2:	6223      	str	r3, [r4, #32]
               ndpChangeState(neighborCacheEntry, NDP_STATE_DELAY);
 800a9c4:	2104      	movs	r1, #4
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fb9a 	bl	800b100 <ndpChangeState>
 800a9cc:	e71c      	b.n	800a808 <ndpProcessRedirect+0x18>
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800a9ce:	2103      	movs	r1, #3
 800a9d0:	4620      	mov	r0, r4
 800a9d2:	f000 fb95 	bl	800b100 <ndpChangeState>
 800a9d6:	e717      	b.n	800a808 <ndpProcessRedirect+0x18>

0800a9d8 <ndpSendRouterSol>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t ndpSendRouterSol(NetInterface *interface)
{
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	b098      	sub	sp, #96	@ 0x60
 800a9dc:	9003      	str	r0, [sp, #12]
   NdpRouterSolMessage *message;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //The destination address is typically the all-routers multicast address
   pseudoHeader.destAddr = IPV6_LINK_LOCAL_ALL_ROUTERS_ADDR;
 800a9de:	4b41      	ldr	r3, [pc, #260]	@ (800aae4 <ndpSendRouterSol+0x10c>)
 800a9e0:	ac10      	add	r4, sp, #64	@ 0x40
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	6859      	ldr	r1, [r3, #4]
 800a9e6:	689a      	ldr	r2, [r3, #8]
 800a9e8:	68db      	ldr	r3, [r3, #12]
 800a9ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}

   //Select the most appropriate source address to be used when sending the
   //Router Solicitation message
   error = ipv6SelectSourceAddr(&interface, &pseudoHeader.destAddr,
 800a9ec:	aa0c      	add	r2, sp, #48	@ 0x30
 800a9ee:	a910      	add	r1, sp, #64	@ 0x40
 800a9f0:	a803      	add	r0, sp, #12
 800a9f2:	f7fd fb3b 	bl	800806c <ipv6SelectSourceAddr>
      &pseudoHeader.srcAddr);

   //No address assigned to the interface?
   if(error)
 800a9f6:	b130      	cbz	r0, 800aa06 <ndpSendRouterSol+0x2e>
   {
      //Use the unspecified address if no address is assigned
      //to the sending interface
      pseudoHeader.srcAddr = IPV6_UNSPECIFIED_ADDR;
 800a9f8:	4b3b      	ldr	r3, [pc, #236]	@ (800aae8 <ndpSendRouterSol+0x110>)
 800a9fa:	ac0c      	add	r4, sp, #48	@ 0x30
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	6859      	ldr	r1, [r3, #4]
 800aa00:	689a      	ldr	r2, [r3, #8]
 800aa02:	68db      	ldr	r3, [r3, #12]
 800aa04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //The only defined option that may appear in a Router Solicitation
   //message is the Source Link-Layer Address option
   length = sizeof(NdpRouterSolMessage) + sizeof(NdpLinkLayerAddrOption);
 800aa06:	2010      	movs	r0, #16
 800aa08:	9016      	str	r0, [sp, #88]	@ 0x58

   //Allocate a memory buffer to hold the Router Solicitation message
   buffer = ipAllocBuffer(length, &offset);
 800aa0a:	a917      	add	r1, sp, #92	@ 0x5c
 800aa0c:	f7fa fdd1 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 800aa10:	4606      	mov	r6, r0
 800aa12:	2800      	cmp	r0, #0
 800aa14:	d063      	beq.n	800aade <ndpSendRouterSol+0x106>
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset, 0);
 800aa16:	2200      	movs	r2, #0
 800aa18:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800aa1a:	f001 fbcd 	bl	800c1b8 <netBufferAt>
 800aa1e:	4604      	mov	r4, r0

   //Format Router Solicitation message
   message->type = ICMPV6_TYPE_ROUTER_SOL;
 800aa20:	2385      	movs	r3, #133	@ 0x85
 800aa22:	7003      	strb	r3, [r0, #0]
   message->code = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 800aa28:	7083      	strb	r3, [r0, #2]
 800aa2a:	70c3      	strb	r3, [r0, #3]
   message->reserved = 0;
 800aa2c:	7103      	strb	r3, [r0, #4]
 800aa2e:	7143      	strb	r3, [r0, #5]
 800aa30:	7183      	strb	r3, [r0, #6]
 800aa32:	71c3      	strb	r3, [r0, #7]

   //Length of the message, excluding any option
   length = sizeof(NdpRouterSolMessage);
 800aa34:	2308      	movs	r3, #8
 800aa36:	9316      	str	r3, [sp, #88]	@ 0x58

   //The Source Link-Layer Address option must not be included
   //when the source IPv6 address is the unspecified address
   if(!ipv6CompAddr(&pseudoHeader.srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800aa38:	2210      	movs	r2, #16
 800aa3a:	492b      	ldr	r1, [pc, #172]	@ (800aae8 <ndpSendRouterSol+0x110>)
 800aa3c:	a80c      	add	r0, sp, #48	@ 0x30
 800aa3e:	f00a f8f7 	bl	8014c30 <memcmp>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	d136      	bne.n	800aab4 <ndpSendRouterSol+0xdc>
      }
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800aa46:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800aa48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa4a:	4419      	add	r1, r3
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f001 fb20 	bl	800c092 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800aa52:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800aa54:	f7f5 fde5 	bl	8000622 <swapInt32>
 800aa58:	9014      	str	r0, [sp, #80]	@ 0x50
   pseudoHeader.reserved[0] = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
   pseudoHeader.reserved[1] = 0;
 800aa60:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
   pseudoHeader.reserved[2] = 0;
 800aa64:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800aa68:	233a      	movs	r3, #58	@ 0x3a
 800aa6a:	f88d 3057 	strb.w	r3, [sp, #87]	@ 0x57

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800aa6e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800aa70:	9300      	str	r3, [sp, #0]
 800aa72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa74:	4632      	mov	r2, r6
 800aa76:	2128      	movs	r1, #40	@ 0x28
 800aa78:	a80c      	add	r0, sp, #48	@ 0x30
 800aa7a:	f7fa fd85 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800aa7e:	8060      	strh	r0, [r4, #2]
   TRACE_INFO("Sending Router Solicitation message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpRouterSolMessage(message);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800aa80:	ac04      	add	r4, sp, #16
 800aa82:	4d1a      	ldr	r5, [pc, #104]	@ (800aaec <ndpSendRouterSol+0x114>)
 800aa84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aa86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aa88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800aa8c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800aa90:	23ff      	movs	r3, #255	@ 0xff
 800aa92:	f88d 3014 	strb.w	r3, [sp, #20]

   //Send Router Solicitation message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800aa96:	ab04      	add	r3, sp, #16
 800aa98:	9300      	str	r3, [sp, #0]
 800aa9a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aa9c:	4632      	mov	r2, r6
 800aa9e:	a90c      	add	r1, sp, #48	@ 0x30
 800aaa0:	9803      	ldr	r0, [sp, #12]
 800aaa2:	f7fc fbe3 	bl	800726c <ipv6SendDatagram>
 800aaa6:	4604      	mov	r4, r0
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f001 fb5d 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 800aaae:	4620      	mov	r0, r4
 800aab0:	b018      	add	sp, #96	@ 0x60
 800aab2:	bd70      	pop	{r4, r5, r6, pc}
      logicalInterface = nicGetLogicalInterface(interface);
 800aab4:	9803      	ldr	r0, [sp, #12]
 800aab6:	f002 f81e 	bl	800caf6 <nicGetLogicalInterface>
      if(!macCompAddr(&logicalInterface->macAddr, &MAC_UNSPECIFIED_ADDR))
 800aaba:	f100 0588 	add.w	r5, r0, #136	@ 0x88
 800aabe:	2206      	movs	r2, #6
 800aac0:	490b      	ldr	r1, [pc, #44]	@ (800aaf0 <ndpSendRouterSol+0x118>)
 800aac2:	4628      	mov	r0, r5
 800aac4:	f00a f8b4 	bl	8014c30 <memcmp>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0bc      	beq.n	800aa46 <ndpSendRouterSol+0x6e>
         ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
 800aacc:	2306      	movs	r3, #6
 800aace:	9300      	str	r3, [sp, #0]
 800aad0:	462b      	mov	r3, r5
 800aad2:	2201      	movs	r2, #1
 800aad4:	a916      	add	r1, sp, #88	@ 0x58
 800aad6:	4620      	mov	r0, r4
 800aad8:	f000 fffc 	bl	800bad4 <ndpAddOption>
 800aadc:	e7b3      	b.n	800aa46 <ndpSendRouterSol+0x6e>
      return ERROR_OUT_OF_MEMORY;
 800aade:	2464      	movs	r4, #100	@ 0x64
 800aae0:	e7e5      	b.n	800aaae <ndpSendRouterSol+0xd6>
 800aae2:	bf00      	nop
 800aae4:	08019f50 	.word	0x08019f50
 800aae8:	08019f20 	.word	0x08019f20
 800aaec:	08019fc4 	.word	0x08019fc4
 800aaf0:	08019ea0 	.word	0x08019ea0

0800aaf4 <ndpTick>:
{
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4604      	mov	r4, r0
   time = osGetSystemTime();
 800aaf8:	f7f5 fe80 	bl	80007fc <osGetSystemTime>
   if(interface->linkState && !interface->ipv6Context.isRouter)
 800aafc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800aafe:	b11b      	cbz	r3, 800ab08 <ndpTick+0x14>
 800ab00:	4605      	mov	r5, r0
 800ab02:	f8d4 37a8 	ldr.w	r3, [r4, #1960]	@ 0x7a8
 800ab06:	b163      	cbz	r3, 800ab22 <ndpTick+0x2e>
   ndpUpdateNeighborCache(interface);
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 fbef 	bl	800b2ec <ndpUpdateNeighborCache>
   ndpUpdateAddrList(interface);
 800ab0e:	4620      	mov	r0, r4
 800ab10:	f000 fd8e 	bl	800b630 <ndpUpdateAddrList>
   ndpUpdatePrefixList(interface);
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fe85 	bl	800b824 <ndpUpdatePrefixList>
   ndpUpdateDefaultRouterList(interface);
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 feae 	bl	800b87c <ndpUpdateDefaultRouterList>
}
 800ab20:	bd38      	pop	{r3, r4, r5, pc}
      if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800ab22:	4620      	mov	r0, r4
 800ab24:	f7fb ff22 	bl	800696c <ipv6GetLinkLocalAddrState>
 800ab28:	2802      	cmp	r0, #2
 800ab2a:	d1ed      	bne.n	800ab08 <ndpTick+0x14>
         if(context->rtrSolicitationCount == 0)
 800ab2c:	f8d4 3b80 	ldr.w	r3, [r4, #2944]	@ 0xb80
 800ab30:	b9a3      	cbnz	r3, 800ab5c <ndpTick+0x68>
            context->timestamp = time;
 800ab32:	f8c4 5b88 	str.w	r5, [r4, #2952]	@ 0xb88
            if(context->dupAddrDetectTransmits > 0)
 800ab36:	f8d4 3b6c 	ldr.w	r3, [r4, #2924]	@ 0xb6c
 800ab3a:	b133      	cbz	r3, 800ab4a <ndpTick+0x56>
               context->timeout = 0;
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	f8c4 3b8c 	str.w	r3, [r4, #2956]	@ 0xb8c
            context->rtrSolicitationCount = 1;
 800ab42:	2301      	movs	r3, #1
 800ab44:	f8c4 3b80 	str.w	r3, [r4, #2944]	@ 0xb80
 800ab48:	e7de      	b.n	800ab08 <ndpTick+0x14>
               context->timeout = netGenerateRandRange(context->minRtrSolicitationDelay,
 800ab4a:	f8d4 1b74 	ldr.w	r1, [r4, #2932]	@ 0xb74
 800ab4e:	f8d4 0b70 	ldr.w	r0, [r4, #2928]	@ 0xb70
 800ab52:	f001 ffbf 	bl	800cad4 <netGenerateRandRange>
 800ab56:	f8c4 0b8c 	str.w	r0, [r4, #2956]	@ 0xb8c
 800ab5a:	e7f2      	b.n	800ab42 <ndpTick+0x4e>
         else if(context->rtrSolicitationCount <= context->maxRtrSolicitations)
 800ab5c:	f8d4 2b7c 	ldr.w	r2, [r4, #2940]	@ 0xb7c
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d8d1      	bhi.n	800ab08 <ndpTick+0x14>
            if(!context->rtrAdvReceived)
 800ab64:	f8d4 3b84 	ldr.w	r3, [r4, #2948]	@ 0xb84
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d1cd      	bne.n	800ab08 <ndpTick+0x14>
               if(timeCompare(time, context->timestamp + context->timeout) >= 0)
 800ab6c:	f8d4 3b88 	ldr.w	r3, [r4, #2952]	@ 0xb88
 800ab70:	f8d4 2b8c 	ldr.w	r2, [r4, #2956]	@ 0xb8c
 800ab74:	4413      	add	r3, r2
 800ab76:	1aeb      	subs	r3, r5, r3
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dbc5      	blt.n	800ab08 <ndpTick+0x14>
                  ndpSendRouterSol(interface);
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	f7ff ff2b 	bl	800a9d8 <ndpSendRouterSol>
                  context->timestamp = time;
 800ab82:	f8c4 5b88 	str.w	r5, [r4, #2952]	@ 0xb88
                  context->timeout = context->rtrSolicitationInterval;
 800ab86:	f8d4 3b78 	ldr.w	r3, [r4, #2936]	@ 0xb78
 800ab8a:	f8c4 3b8c 	str.w	r3, [r4, #2956]	@ 0xb8c
                  context->rtrSolicitationCount++;
 800ab8e:	f8d4 3b80 	ldr.w	r3, [r4, #2944]	@ 0xb80
 800ab92:	3301      	adds	r3, #1
 800ab94:	f8c4 3b80 	str.w	r3, [r4, #2944]	@ 0xb80
 800ab98:	e7b6      	b.n	800ab08 <ndpTick+0x14>
	...

0800ab9c <ndpSendNeighborSol>:
 * @return Error code
 **/

error_t ndpSendNeighborSol(NetInterface *interface,
   const Ipv6Addr *targetIpAddr, bool_t multicast)
{
 800ab9c:	b570      	push	{r4, r5, r6, lr}
 800ab9e:	b098      	sub	sp, #96	@ 0x60
 800aba0:	9003      	str	r0, [sp, #12]
 800aba2:	460d      	mov	r5, r1
   NdpNeighborSolMessage *message;
   Ipv6PseudoHeader pseudoHeader;
   NetTxAncillary ancillary;

   //Multicast Neighbor Solicitation message?
   if(multicast)
 800aba4:	2a00      	cmp	r2, #0
 800aba6:	d171      	bne.n	800ac8c <ndpSendNeighborSol+0xf0>
      ipv6ComputeSolicitedNodeAddr(targetIpAddr, &pseudoHeader.destAddr);
   }
   else
   {
      //Unicast Neighbor Solicitation message
      pseudoHeader.destAddr = *targetIpAddr;
 800aba8:	ac10      	add	r4, sp, #64	@ 0x40
 800abaa:	6808      	ldr	r0, [r1, #0]
 800abac:	6849      	ldr	r1, [r1, #4]
 800abae:	68aa      	ldr	r2, [r5, #8]
 800abb0:	68eb      	ldr	r3, [r5, #12]
 800abb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //Check whether the target address is a tentative address
   if(ipv6IsTentativeAddr(interface, targetIpAddr))
 800abb4:	4629      	mov	r1, r5
 800abb6:	9803      	ldr	r0, [sp, #12]
 800abb8:	f7fd f890 	bl	8007cdc <ipv6IsTentativeAddr>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d06a      	beq.n	800ac96 <ndpSendNeighborSol+0xfa>
   {
      //The IPv6 source is set to the unspecified address
      pseudoHeader.srcAddr = IPV6_UNSPECIFIED_ADDR;
 800abc0:	4b41      	ldr	r3, [pc, #260]	@ (800acc8 <ndpSendNeighborSol+0x12c>)
 800abc2:	ac0c      	add	r4, sp, #48	@ 0x30
 800abc4:	6818      	ldr	r0, [r3, #0]
 800abc6:	6859      	ldr	r1, [r3, #4]
 800abc8:	689a      	ldr	r2, [r3, #8]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
         return error;
   }

   //The only defined option that may appear in a Neighbor Solicitation
   //message is the Source Link-Layer Address option
   length = sizeof(NdpNeighborSolMessage) + sizeof(NdpLinkLayerAddrOption);
 800abce:	2020      	movs	r0, #32
 800abd0:	9016      	str	r0, [sp, #88]	@ 0x58

   //Allocate a memory buffer to hold the Neighbor Solicitation message
   buffer = ipAllocBuffer(length, &offset);
 800abd2:	a917      	add	r1, sp, #92	@ 0x5c
 800abd4:	f7fa fced 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 800abd8:	4606      	mov	r6, r0
 800abda:	2800      	cmp	r0, #0
 800abdc:	d071      	beq.n	800acc2 <ndpSendNeighborSol+0x126>
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset, 0);
 800abde:	2200      	movs	r2, #0
 800abe0:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800abe2:	f001 fae9 	bl	800c1b8 <netBufferAt>
 800abe6:	4604      	mov	r4, r0

   //Format Neighbor Solicitation message
   message->type = ICMPV6_TYPE_NEIGHBOR_SOL;
 800abe8:	2387      	movs	r3, #135	@ 0x87
 800abea:	7003      	strb	r3, [r0, #0]
   message->code = 0;
 800abec:	2300      	movs	r3, #0
 800abee:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 800abf0:	7083      	strb	r3, [r0, #2]
 800abf2:	70c3      	strb	r3, [r0, #3]
   message->reserved = 0;
 800abf4:	7103      	strb	r3, [r0, #4]
 800abf6:	7143      	strb	r3, [r0, #5]
 800abf8:	7183      	strb	r3, [r0, #6]
 800abfa:	71c3      	strb	r3, [r0, #7]
   message->targetAddr = *targetIpAddr;
 800abfc:	6828      	ldr	r0, [r5, #0]
 800abfe:	6869      	ldr	r1, [r5, #4]
 800ac00:	68aa      	ldr	r2, [r5, #8]
 800ac02:	68eb      	ldr	r3, [r5, #12]
 800ac04:	60a0      	str	r0, [r4, #8]
 800ac06:	60e1      	str	r1, [r4, #12]
 800ac08:	6122      	str	r2, [r4, #16]
 800ac0a:	6163      	str	r3, [r4, #20]

   //Length of the message, excluding any option
   length = sizeof(NdpNeighborSolMessage);
 800ac0c:	2318      	movs	r3, #24
 800ac0e:	9316      	str	r3, [sp, #88]	@ 0x58

   //The Source Link-Layer Address option must not be included
   //when the source IPv6 address is the unspecified address
   if(!ipv6CompAddr(&pseudoHeader.srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800ac10:	2210      	movs	r2, #16
 800ac12:	492d      	ldr	r1, [pc, #180]	@ (800acc8 <ndpSendNeighborSol+0x12c>)
 800ac14:	a80c      	add	r0, sp, #48	@ 0x30
 800ac16:	f00a f80b 	bl	8014c30 <memcmp>
 800ac1a:	2800      	cmp	r0, #0
 800ac1c:	d144      	bne.n	800aca8 <ndpSendNeighborSol+0x10c>
         &logicalInterface->macAddr, sizeof(MacAddr));
#endif
   }

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800ac1e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ac20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac22:	4419      	add	r1, r3
 800ac24:	4630      	mov	r0, r6
 800ac26:	f001 fa34 	bl	800c092 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800ac2a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ac2c:	f7f5 fcf9 	bl	8000622 <swapInt32>
 800ac30:	9014      	str	r0, [sp, #80]	@ 0x50
   pseudoHeader.reserved[0] = 0;
 800ac32:	2300      	movs	r3, #0
 800ac34:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
   pseudoHeader.reserved[1] = 0;
 800ac38:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
   pseudoHeader.reserved[2] = 0;
 800ac3c:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800ac40:	233a      	movs	r3, #58	@ 0x3a
 800ac42:	f88d 3057 	strb.w	r3, [sp, #87]	@ 0x57

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800ac46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ac48:	9300      	str	r3, [sp, #0]
 800ac4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac4c:	4632      	mov	r2, r6
 800ac4e:	2128      	movs	r1, #40	@ 0x28
 800ac50:	a80c      	add	r0, sp, #48	@ 0x30
 800ac52:	f7fa fc99 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800ac56:	8060      	strh	r0, [r4, #2]
   TRACE_INFO("Sending Neighbor Solicitation message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborSolMessage(message);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800ac58:	ac04      	add	r4, sp, #16
 800ac5a:	4d1c      	ldr	r5, [pc, #112]	@ (800accc <ndpSendNeighborSol+0x130>)
 800ac5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac60:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ac64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800ac68:	23ff      	movs	r3, #255	@ 0xff
 800ac6a:	f88d 3014 	strb.w	r3, [sp, #20]

   //Send Neighbor Solicitation message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800ac6e:	ab04      	add	r3, sp, #16
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ac74:	4632      	mov	r2, r6
 800ac76:	a90c      	add	r1, sp, #48	@ 0x30
 800ac78:	9803      	ldr	r0, [sp, #12]
 800ac7a:	f7fc faf7 	bl	800726c <ipv6SendDatagram>
 800ac7e:	4604      	mov	r4, r0
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800ac80:	4630      	mov	r0, r6
 800ac82:	f001 fa71 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 800ac86:	4620      	mov	r0, r4
 800ac88:	b018      	add	sp, #96	@ 0x60
 800ac8a:	bd70      	pop	{r4, r5, r6, pc}
      ipv6ComputeSolicitedNodeAddr(targetIpAddr, &pseudoHeader.destAddr);
 800ac8c:	a910      	add	r1, sp, #64	@ 0x40
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f7fd fa98 	bl	80081c4 <ipv6ComputeSolicitedNodeAddr>
 800ac94:	e78e      	b.n	800abb4 <ndpSendNeighborSol+0x18>
      error = ipv6SelectSourceAddr(&interface, targetIpAddr,
 800ac96:	aa0c      	add	r2, sp, #48	@ 0x30
 800ac98:	4629      	mov	r1, r5
 800ac9a:	a803      	add	r0, sp, #12
 800ac9c:	f7fd f9e6 	bl	800806c <ipv6SelectSourceAddr>
      if(error)
 800aca0:	4604      	mov	r4, r0
 800aca2:	2800      	cmp	r0, #0
 800aca4:	d093      	beq.n	800abce <ndpSendNeighborSol+0x32>
 800aca6:	e7ee      	b.n	800ac86 <ndpSendNeighborSol+0xea>
      logicalInterface = nicGetLogicalInterface(interface);
 800aca8:	9803      	ldr	r0, [sp, #12]
 800acaa:	f001 ff24 	bl	800caf6 <nicGetLogicalInterface>
      ndpAddOption(message, &length, NDP_OPT_SOURCE_LINK_LAYER_ADDR,
 800acae:	2306      	movs	r3, #6
 800acb0:	9300      	str	r3, [sp, #0]
 800acb2:	f100 0388 	add.w	r3, r0, #136	@ 0x88
 800acb6:	2201      	movs	r2, #1
 800acb8:	a916      	add	r1, sp, #88	@ 0x58
 800acba:	4620      	mov	r0, r4
 800acbc:	f000 ff0a 	bl	800bad4 <ndpAddOption>
 800acc0:	e7ad      	b.n	800ac1e <ndpSendNeighborSol+0x82>
      return ERROR_OUT_OF_MEMORY;
 800acc2:	2464      	movs	r4, #100	@ 0x64
 800acc4:	e7df      	b.n	800ac86 <ndpSendNeighborSol+0xea>
 800acc6:	bf00      	nop
 800acc8:	08019f20 	.word	0x08019f20
 800accc:	08019fc4 	.word	0x08019fc4

0800acd0 <ndpResolve>:
{
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	4606      	mov	r6, r0
 800acd4:	460d      	mov	r5, r1
 800acd6:	4614      	mov	r4, r2
   entry = ndpFindNeighborCacheEntry(interface, ipAddr);
 800acd8:	f000 fa1a 	bl	800b110 <ndpFindNeighborCacheEntry>
   if(entry != NULL)
 800acdc:	b1d0      	cbz	r0, 800ad14 <ndpResolve+0x44>
      if(entry->state == NDP_STATE_INCOMPLETE)
 800acde:	7802      	ldrb	r2, [r0, #0]
 800ace0:	2a01      	cmp	r2, #1
 800ace2:	d040      	beq.n	800ad66 <ndpResolve+0x96>
      else if(entry->state == NDP_STATE_STALE)
 800ace4:	2a03      	cmp	r2, #3
 800ace6:	d007      	beq.n	800acf8 <ndpResolve+0x28>
         *macAddr = entry->macAddr;
 800ace8:	f8d0 2011 	ldr.w	r2, [r0, #17]
 800acec:	6022      	str	r2, [r4, #0]
 800acee:	f8b0 3015 	ldrh.w	r3, [r0, #21]
 800acf2:	80a3      	strh	r3, [r4, #4]
         error = NO_ERROR;
 800acf4:	2000      	movs	r0, #0
}
 800acf6:	bd70      	pop	{r4, r5, r6, pc}
         *macAddr = entry->macAddr;
 800acf8:	f8d0 2011 	ldr.w	r2, [r0, #17]
 800acfc:	6022      	str	r2, [r4, #0]
 800acfe:	f8b0 2015 	ldrh.w	r2, [r0, #21]
 800ad02:	80a2      	strh	r2, [r4, #4]
         entry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800ad04:	f241 3288 	movw	r2, #5000	@ 0x1388
 800ad08:	6202      	str	r2, [r0, #32]
         ndpChangeState(entry, NDP_STATE_DELAY);
 800ad0a:	2104      	movs	r1, #4
 800ad0c:	f000 f9f8 	bl	800b100 <ndpChangeState>
         error = NO_ERROR;
 800ad10:	2000      	movs	r0, #0
 800ad12:	e7f0      	b.n	800acf6 <ndpResolve+0x26>
      if(interface->ndpContext.enable)
 800ad14:	f8d6 3b90 	ldr.w	r3, [r6, #2960]	@ 0xb90
 800ad18:	b90b      	cbnz	r3, 800ad1e <ndpResolve+0x4e>
         error = ERROR_INVALID_ADDRESS;
 800ad1a:	20e4      	movs	r0, #228	@ 0xe4
 800ad1c:	e7eb      	b.n	800acf6 <ndpResolve+0x26>
         entry = ndpCreateNeighborCacheEntry(interface);
 800ad1e:	4630      	mov	r0, r6
 800ad20:	f000 fa95 	bl	800b24e <ndpCreateNeighborCacheEntry>
         if(entry != NULL)
 800ad24:	4604      	mov	r4, r0
 800ad26:	b308      	cbz	r0, 800ad6c <ndpResolve+0x9c>
            entry->ipAddr = *ipAddr;
 800ad28:	6828      	ldr	r0, [r5, #0]
 800ad2a:	6869      	ldr	r1, [r5, #4]
 800ad2c:	68aa      	ldr	r2, [r5, #8]
 800ad2e:	68eb      	ldr	r3, [r5, #12]
 800ad30:	f8c4 0001 	str.w	r0, [r4, #1]
 800ad34:	f8c4 1005 	str.w	r1, [r4, #5]
 800ad38:	f8c4 2009 	str.w	r2, [r4, #9]
 800ad3c:	f8c4 300d 	str.w	r3, [r4, #13]
            entry->retransmitCount = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	6263      	str	r3, [r4, #36]	@ 0x24
            entry->queueSize = 0;
 800ad44:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
            ndpSendNeighborSol(interface, ipAddr, TRUE);
 800ad48:	2201      	movs	r2, #1
 800ad4a:	4629      	mov	r1, r5
 800ad4c:	4630      	mov	r0, r6
 800ad4e:	f7ff ff25 	bl	800ab9c <ndpSendNeighborSol>
            entry->timeout = interface->ndpContext.retransTimer;
 800ad52:	f8d6 3b68 	ldr.w	r3, [r6, #2920]	@ 0xb68
 800ad56:	6223      	str	r3, [r4, #32]
            ndpChangeState(entry, NDP_STATE_INCOMPLETE);
 800ad58:	2101      	movs	r1, #1
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	f000 f9d0 	bl	800b100 <ndpChangeState>
            error = ERROR_IN_PROGRESS;
 800ad60:	f240 2003 	movw	r0, #515	@ 0x203
 800ad64:	e7c7      	b.n	800acf6 <ndpResolve+0x26>
         error = ERROR_IN_PROGRESS;
 800ad66:	f240 2003 	movw	r0, #515	@ 0x203
 800ad6a:	e7c4      	b.n	800acf6 <ndpResolve+0x26>
            error = ERROR_OUT_OF_RESOURCES;
 800ad6c:	2065      	movs	r0, #101	@ 0x65
 800ad6e:	e7c2      	b.n	800acf6 <ndpResolve+0x26>

0800ad70 <ndpSendNeighborAdv>:
 * @return Error code
 **/

error_t ndpSendNeighborAdv(NetInterface *interface,
   const Ipv6Addr *targetIpAddr, const Ipv6Addr *destIpAddr)
{
 800ad70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad74:	b098      	sub	sp, #96	@ 0x60
 800ad76:	9003      	str	r0, [sp, #12]
 800ad78:	460d      	mov	r5, r1
 800ad7a:	4616      	mov	r6, r2
#if (ETH_SUPPORT == ENABLED)
   NetInterface *logicalInterface;
#endif

   //Destination IP address is the unspecified address?
   if(ipv6CompAddr(destIpAddr, &IPV6_UNSPECIFIED_ADDR))
 800ad7c:	2210      	movs	r2, #16
 800ad7e:	4962      	ldr	r1, [pc, #392]	@ (800af08 <ndpSendNeighborAdv+0x198>)
 800ad80:	4630      	mov	r0, r6
 800ad82:	f009 ff55 	bl	8014c30 <memcmp>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f040 809c 	bne.w	800aec4 <ndpSendNeighborAdv+0x154>
   {
      //If the destination is the unspecified address, the node must
      //multicast the advertisement to the all-nodes address
      pseudoHeader.destAddr = IPV6_LINK_LOCAL_ALL_NODES_ADDR;
 800ad8c:	4b5f      	ldr	r3, [pc, #380]	@ (800af0c <ndpSendNeighborAdv+0x19c>)
 800ad8e:	ac10      	add	r4, sp, #64	@ 0x40
 800ad90:	6818      	ldr	r0, [r3, #0]
 800ad92:	6859      	ldr	r1, [r3, #4]
 800ad94:	689a      	ldr	r2, [r3, #8]
 800ad96:	68db      	ldr	r3, [r3, #12]
 800ad98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
      pseudoHeader.destAddr = *destIpAddr;
   }

   //Check whether the target address is a valid anycast address assigned
   //to the interface
   if(ipv6IsAnycastAddr(interface, targetIpAddr))
 800ad9a:	4629      	mov	r1, r5
 800ad9c:	9803      	ldr	r0, [sp, #12]
 800ad9e:	f7fc ff81 	bl	8007ca4 <ipv6IsAnycastAddr>
 800ada2:	2800      	cmp	r0, #0
 800ada4:	f040 8095 	bne.w	800aed2 <ndpSendNeighborAdv+0x162>
         return error;
   }
   else
   {
      //Set the source IP address
      pseudoHeader.srcAddr = *targetIpAddr;
 800ada8:	ac0c      	add	r4, sp, #48	@ 0x30
 800adaa:	6828      	ldr	r0, [r5, #0]
 800adac:	6869      	ldr	r1, [r5, #4]
 800adae:	68aa      	ldr	r2, [r5, #8]
 800adb0:	68eb      	ldr	r3, [r5, #12]
 800adb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   }

   //The only defined option that may appear in a Neighbor Advertisement
   //message is the Target Link-Layer Address option
   length = sizeof(NdpNeighborAdvMessage) + sizeof(NdpLinkLayerAddrOption);
 800adb4:	2020      	movs	r0, #32
 800adb6:	9016      	str	r0, [sp, #88]	@ 0x58

   //Allocate a memory buffer to hold the Neighbor Advertisement message
   buffer = ipAllocBuffer(length, &offset);
 800adb8:	a917      	add	r1, sp, #92	@ 0x5c
 800adba:	f7fa fbfa 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 800adbe:	4607      	mov	r7, r0
 800adc0:	2800      	cmp	r0, #0
 800adc2:	f000 809f 	beq.w	800af04 <ndpSendNeighborAdv+0x194>
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the message
   message = netBufferAt(buffer, offset, 0);
 800adc6:	2200      	movs	r2, #0
 800adc8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800adca:	f001 f9f5 	bl	800c1b8 <netBufferAt>
 800adce:	4604      	mov	r4, r0

   //Format Neighbor Advertisement message
   message->type = ICMPV6_TYPE_NEIGHBOR_ADV;
 800add0:	2388      	movs	r3, #136	@ 0x88
 800add2:	7003      	strb	r3, [r0, #0]
   message->code = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	7043      	strb	r3, [r0, #1]
   message->checksum = 0;
 800add8:	7083      	strb	r3, [r0, #2]
 800adda:	70c3      	strb	r3, [r0, #3]
   message->reserved1 = 0;
 800addc:	7902      	ldrb	r2, [r0, #4]
 800adde:	f363 0204 	bfi	r2, r3, #0, #5
 800ade2:	7102      	strb	r2, [r0, #4]
   message->reserved2[0] = 0;
 800ade4:	7143      	strb	r3, [r0, #5]
   message->reserved2[1] = 0;
 800ade6:	7183      	strb	r3, [r0, #6]
   message->reserved2[2] = 0;
 800ade8:	71c3      	strb	r3, [r0, #7]
   message->targetAddr = *targetIpAddr;
 800adea:	6828      	ldr	r0, [r5, #0]
 800adec:	6869      	ldr	r1, [r5, #4]
 800adee:	68aa      	ldr	r2, [r5, #8]
 800adf0:	68eb      	ldr	r3, [r5, #12]
 800adf2:	60a0      	str	r0, [r4, #8]
 800adf4:	60e1      	str	r1, [r4, #12]
 800adf6:	6122      	str	r2, [r4, #16]
 800adf8:	6163      	str	r3, [r4, #20]

   //The Router flag indicates that the sender is a router
   if(interface->ipv6Context.isRouter)
 800adfa:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800adfe:	f8d8 37a8 	ldr.w	r3, [r8, #1960]	@ 0x7a8
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d06f      	beq.n	800aee6 <ndpSendNeighborAdv+0x176>
   {
      message->r = TRUE;
 800ae06:	7923      	ldrb	r3, [r4, #4]
 800ae08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae0c:	7123      	strb	r3, [r4, #4]
      message->r = FALSE;
   }

   //If the destination is the unspecified address, the node must set
   //the Solicited flag to zero
   if(ipv6CompAddr(destIpAddr, &IPV6_UNSPECIFIED_ADDR))
 800ae0e:	2210      	movs	r2, #16
 800ae10:	493d      	ldr	r1, [pc, #244]	@ (800af08 <ndpSendNeighborAdv+0x198>)
 800ae12:	4630      	mov	r0, r6
 800ae14:	f009 ff0c 	bl	8014c30 <memcmp>
 800ae18:	2800      	cmp	r0, #0
 800ae1a:	d169      	bne.n	800aef0 <ndpSendNeighborAdv+0x180>
   {
      message->s = FALSE;
 800ae1c:	7923      	ldrb	r3, [r4, #4]
 800ae1e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ae22:	7123      	strb	r3, [r4, #4]
      message->s = TRUE;
   }

   //The Override flag should not be set in solicited advertisements
   //for anycast addresses
   if(ipv6IsAnycastAddr(interface, targetIpAddr))
 800ae24:	4629      	mov	r1, r5
 800ae26:	4640      	mov	r0, r8
 800ae28:	f7fc ff3c 	bl	8007ca4 <ipv6IsAnycastAddr>
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	d064      	beq.n	800aefa <ndpSendNeighborAdv+0x18a>
   {
      message->o = FALSE;
 800ae30:	7923      	ldrb	r3, [r4, #4]
 800ae32:	f023 0320 	bic.w	r3, r3, #32
 800ae36:	7123      	strb	r3, [r4, #4]
   {
      message->o = TRUE;
   }

   //Length of the message, excluding any option
   length = sizeof(NdpNeighborAdvMessage);
 800ae38:	2318      	movs	r3, #24
 800ae3a:	9316      	str	r3, [sp, #88]	@ 0x58

#if (ETH_SUPPORT == ENABLED)
   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800ae3c:	9803      	ldr	r0, [sp, #12]
 800ae3e:	f001 fe5a 	bl	800caf6 <nicGetLogicalInterface>

   //Add Target Link-Layer Address option
   ndpAddOption(message, &length, NDP_OPT_TARGET_LINK_LAYER_ADDR,
 800ae42:	2306      	movs	r3, #6
 800ae44:	9300      	str	r3, [sp, #0]
 800ae46:	f100 0388 	add.w	r3, r0, #136	@ 0x88
 800ae4a:	2202      	movs	r2, #2
 800ae4c:	a916      	add	r1, sp, #88	@ 0x58
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 fe40 	bl	800bad4 <ndpAddOption>
      &logicalInterface->macAddr, sizeof(MacAddr));
#endif

   //Adjust the length of the multi-part buffer
   netBufferSetLength(buffer, offset + length);
 800ae54:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800ae56:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae58:	4419      	add	r1, r3
 800ae5a:	4638      	mov	r0, r7
 800ae5c:	f001 f919 	bl	800c092 <netBufferSetLength>

   //Format IPv6 pseudo header
   pseudoHeader.length = htonl(length);
 800ae60:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800ae62:	f7f5 fbde 	bl	8000622 <swapInt32>
 800ae66:	9014      	str	r0, [sp, #80]	@ 0x50
   pseudoHeader.reserved[0] = 0;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
   pseudoHeader.reserved[1] = 0;
 800ae6e:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
   pseudoHeader.reserved[2] = 0;
 800ae72:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
   pseudoHeader.nextHeader = IPV6_ICMPV6_HEADER;
 800ae76:	233a      	movs	r3, #58	@ 0x3a
 800ae78:	f88d 3057 	strb.w	r3, [sp, #87]	@ 0x57

   //Calculate ICMPv6 header checksum
   message->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader,
 800ae7c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae82:	463a      	mov	r2, r7
 800ae84:	2128      	movs	r1, #40	@ 0x28
 800ae86:	a80c      	add	r0, sp, #48	@ 0x30
 800ae88:	f7fa fb7e 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800ae8c:	8060      	strh	r0, [r4, #2]
   TRACE_INFO("Sending Neighbor Advertisement message (%" PRIuSIZE " bytes)...\r\n", length);
   //Dump message contents for debugging purpose
   ndpDumpNeighborAdvMessage(message);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800ae8e:	ac04      	add	r4, sp, #16
 800ae90:	4d1f      	ldr	r5, [pc, #124]	@ (800af10 <ndpSendNeighborAdv+0x1a0>)
 800ae92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ae94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae96:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ae9a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //By setting the Hop Limit to 255, Neighbor Discovery is immune to off-link
   //senders that accidentally or intentionally send NDP messages (refer to
   //RFC 4861, section 3.1)
   ancillary.ttl = NDP_HOP_LIMIT;
 800ae9e:	23ff      	movs	r3, #255	@ 0xff
 800aea0:	f88d 3014 	strb.w	r3, [sp, #20]

   //Send Neighbor Advertisement message
   error = ipv6SendDatagram(interface, &pseudoHeader, buffer, offset,
 800aea4:	ab04      	add	r3, sp, #16
 800aea6:	9300      	str	r3, [sp, #0]
 800aea8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800aeaa:	463a      	mov	r2, r7
 800aeac:	a90c      	add	r1, sp, #48	@ 0x30
 800aeae:	9803      	ldr	r0, [sp, #12]
 800aeb0:	f7fc f9dc 	bl	800726c <ipv6SendDatagram>
 800aeb4:	4604      	mov	r4, r0
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800aeb6:	4638      	mov	r0, r7
 800aeb8:	f001 f956 	bl	800c168 <netBufferFree>

   //Return status code
   return error;
}
 800aebc:	4620      	mov	r0, r4
 800aebe:	b018      	add	sp, #96	@ 0x60
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pseudoHeader.destAddr = *destIpAddr;
 800aec4:	ac10      	add	r4, sp, #64	@ 0x40
 800aec6:	6830      	ldr	r0, [r6, #0]
 800aec8:	6871      	ldr	r1, [r6, #4]
 800aeca:	68b2      	ldr	r2, [r6, #8]
 800aecc:	68f3      	ldr	r3, [r6, #12]
 800aece:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aed0:	e763      	b.n	800ad9a <ndpSendNeighborAdv+0x2a>
      error = ipv6SelectSourceAddr(&interface, targetIpAddr,
 800aed2:	aa0c      	add	r2, sp, #48	@ 0x30
 800aed4:	4629      	mov	r1, r5
 800aed6:	a803      	add	r0, sp, #12
 800aed8:	f7fd f8c8 	bl	800806c <ipv6SelectSourceAddr>
      if(error)
 800aedc:	4604      	mov	r4, r0
 800aede:	2800      	cmp	r0, #0
 800aee0:	f43f af68 	beq.w	800adb4 <ndpSendNeighborAdv+0x44>
 800aee4:	e7ea      	b.n	800aebc <ndpSendNeighborAdv+0x14c>
      message->r = FALSE;
 800aee6:	7923      	ldrb	r3, [r4, #4]
 800aee8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aeec:	7123      	strb	r3, [r4, #4]
 800aeee:	e78e      	b.n	800ae0e <ndpSendNeighborAdv+0x9e>
      message->s = TRUE;
 800aef0:	7923      	ldrb	r3, [r4, #4]
 800aef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aef6:	7123      	strb	r3, [r4, #4]
 800aef8:	e794      	b.n	800ae24 <ndpSendNeighborAdv+0xb4>
      message->o = TRUE;
 800aefa:	7923      	ldrb	r3, [r4, #4]
 800aefc:	f043 0320 	orr.w	r3, r3, #32
 800af00:	7123      	strb	r3, [r4, #4]
 800af02:	e799      	b.n	800ae38 <ndpSendNeighborAdv+0xc8>
      return ERROR_OUT_OF_MEMORY;
 800af04:	2464      	movs	r4, #100	@ 0x64
 800af06:	e7d9      	b.n	800aebc <ndpSendNeighborAdv+0x14c>
 800af08:	08019f20 	.word	0x08019f20
 800af0c:	08019f60 	.word	0x08019f60
 800af10:	08019fc4 	.word	0x08019fc4

0800af14 <ndpProcessNeighborSol>:
{
 800af14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af18:	4607      	mov	r7, r0
 800af1a:	4688      	mov	r8, r1
 800af1c:	4615      	mov	r5, r2
 800af1e:	461e      	mov	r6, r3
   length = netBufferGetLength(buffer) - offset;
 800af20:	4610      	mov	r0, r2
 800af22:	f001 f8a9 	bl	800c078 <netBufferGetLength>
 800af26:	1b84      	subs	r4, r0, r6
   if(length < sizeof(NdpNeighborSolMessage))
 800af28:	2c17      	cmp	r4, #23
 800af2a:	d801      	bhi.n	800af30 <ndpProcessNeighborSol+0x1c>
}
 800af2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   message = netBufferAt(buffer, offset, length);
 800af30:	4622      	mov	r2, r4
 800af32:	4631      	mov	r1, r6
 800af34:	4628      	mov	r0, r5
 800af36:	f001 f93f 	bl	800c1b8 <netBufferAt>
   if(message == NULL)
 800af3a:	4605      	mov	r5, r0
 800af3c:	2800      	cmp	r0, #0
 800af3e:	d0f5      	beq.n	800af2c <ndpProcessNeighborSol+0x18>
   if(ancillary->ttl != NDP_HOP_LIMIT)
 800af40:	9b06      	ldr	r3, [sp, #24]
 800af42:	781b      	ldrb	r3, [r3, #0]
 800af44:	2bff      	cmp	r3, #255	@ 0xff
 800af46:	d1f1      	bne.n	800af2c <ndpProcessNeighborSol+0x18>
   if(message->code)
 800af48:	7843      	ldrb	r3, [r0, #1]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1ee      	bne.n	800af2c <ndpProcessNeighborSol+0x18>
   if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800af4e:	2210      	movs	r2, #16
 800af50:	4969      	ldr	r1, [pc, #420]	@ (800b0f8 <ndpProcessNeighborSol+0x1e4>)
 800af52:	4640      	mov	r0, r8
 800af54:	f009 fe6c 	bl	8014c30 <memcmp>
 800af58:	b938      	cbnz	r0, 800af6a <ndpProcessNeighborSol+0x56>
      !ipv6IsSolicitedNodeAddr(&pseudoHeader->destAddr))
 800af5a:	2268      	movs	r2, #104	@ 0x68
 800af5c:	4967      	ldr	r1, [pc, #412]	@ (800b0fc <ndpProcessNeighborSol+0x1e8>)
 800af5e:	f108 0010 	add.w	r0, r8, #16
 800af62:	f7fc ff1d 	bl	8007da0 <ipv6CompPrefix>
   if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800af66:	2800      	cmp	r0, #0
 800af68:	d0e0      	beq.n	800af2c <ndpProcessNeighborSol+0x18>
   length -= sizeof(NdpNeighborSolMessage);
 800af6a:	3c18      	subs	r4, #24
   error = ndpCheckOptions(message->options, length);
 800af6c:	f105 0618 	add.w	r6, r5, #24
 800af70:	4621      	mov	r1, r4
 800af72:	4630      	mov	r0, r6
 800af74:	f000 fdf1 	bl	800bb5a <ndpCheckOptions>
   if(error)
 800af78:	2800      	cmp	r0, #0
 800af7a:	d1d7      	bne.n	800af2c <ndpProcessNeighborSol+0x18>
   option = ndpGetOption(message->options, length,
 800af7c:	2201      	movs	r2, #1
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f000 fdce 	bl	800bb22 <ndpGetOption>
 800af86:	4606      	mov	r6, r0
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800af88:	2400      	movs	r4, #0
 800af8a:	e010      	b.n	800afae <ndpProcessNeighborSol+0x9a>
            if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800af8c:	2210      	movs	r2, #16
 800af8e:	495a      	ldr	r1, [pc, #360]	@ (800b0f8 <ndpProcessNeighborSol+0x1e4>)
 800af90:	4640      	mov	r0, r8
 800af92:	f009 fe4d 	bl	8014c30 <memcmp>
 800af96:	2800      	cmp	r0, #0
 800af98:	d1c8      	bne.n	800af2c <ndpProcessNeighborSol+0x18>
               if(option == NULL)
 800af9a:	2e00      	cmp	r6, #0
 800af9c:	d1c6      	bne.n	800af2c <ndpProcessNeighborSol+0x18>
                  addrEntry->duplicate = TRUE;
 800af9e:	2330      	movs	r3, #48	@ 0x30
 800afa0:	fb03 7404 	mla	r4, r3, r4, r7
 800afa4:	2301      	movs	r3, #1
 800afa6:	f8c4 37cc 	str.w	r3, [r4, #1996]	@ 0x7cc
            return;
 800afaa:	e7bf      	b.n	800af2c <ndpProcessNeighborSol+0x18>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800afac:	3401      	adds	r4, #1
 800afae:	2c02      	cmp	r4, #2
 800afb0:	d819      	bhi.n	800afe6 <ndpProcessNeighborSol+0xd2>
      if(ipv6CompAddr(&addrEntry->addr, &message->targetAddr))
 800afb2:	eb04 0044 	add.w	r0, r4, r4, lsl #1
 800afb6:	0100      	lsls	r0, r0, #4
 800afb8:	f500 60f6 	add.w	r0, r0, #1968	@ 0x7b0
 800afbc:	4438      	add	r0, r7
 800afbe:	2210      	movs	r2, #16
 800afc0:	f105 0108 	add.w	r1, r5, #8
 800afc4:	3008      	adds	r0, #8
 800afc6:	f009 fe33 	bl	8014c30 <memcmp>
 800afca:	2800      	cmp	r0, #0
 800afcc:	d1ee      	bne.n	800afac <ndpProcessNeighborSol+0x98>
         if(addrEntry->state == IPV6_ADDR_STATE_TENTATIVE)
 800afce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800afd2:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800afd6:	f893 37c8 	ldrb.w	r3, [r3, #1992]	@ 0x7c8
 800afda:	2b01      	cmp	r3, #1
 800afdc:	d0d6      	beq.n	800af8c <ndpProcessNeighborSol+0x78>
         else if(addrEntry->state != IPV6_ADDR_STATE_INVALID)
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d0e4      	beq.n	800afac <ndpProcessNeighborSol+0x98>
            validTarget = TRUE;
 800afe2:	2301      	movs	r3, #1
 800afe4:	e000      	b.n	800afe8 <ndpProcessNeighborSol+0xd4>
   validTarget = FALSE;
 800afe6:	2300      	movs	r3, #0
   if(!validTarget)
 800afe8:	b1c3      	cbz	r3, 800b01c <ndpProcessNeighborSol+0x108>
   if(option != NULL && option->length == 1)
 800afea:	b116      	cbz	r6, 800aff2 <ndpProcessNeighborSol+0xde>
 800afec:	7873      	ldrb	r3, [r6, #1]
 800afee:	2b01      	cmp	r3, #1
 800aff0:	d01c      	beq.n	800b02c <ndpProcessNeighborSol+0x118>
      if(!ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800aff2:	2210      	movs	r2, #16
 800aff4:	4940      	ldr	r1, [pc, #256]	@ (800b0f8 <ndpProcessNeighborSol+0x1e4>)
 800aff6:	4640      	mov	r0, r8
 800aff8:	f009 fe1a 	bl	8014c30 <memcmp>
 800affc:	b118      	cbz	r0, 800b006 <ndpProcessNeighborSol+0xf2>
         ipv6IsMulticastAddr(&pseudoHeader->destAddr))
 800affe:	f898 3010 	ldrb.w	r3, [r8, #16]
      if(!ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR) &&
 800b002:	2bff      	cmp	r3, #255	@ 0xff
 800b004:	d092      	beq.n	800af2c <ndpProcessNeighborSol+0x18>
   if(interface->ndpContext.enable)
 800b006:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d08e      	beq.n	800af2c <ndpProcessNeighborSol+0x18>
      ndpSendNeighborAdv(interface, &message->targetAddr,
 800b00e:	4642      	mov	r2, r8
 800b010:	f105 0108 	add.w	r1, r5, #8
 800b014:	4638      	mov	r0, r7
 800b016:	f7ff feab 	bl	800ad70 <ndpSendNeighborAdv>
 800b01a:	e787      	b.n	800af2c <ndpProcessNeighborSol+0x18>
      if(!ipv6IsAnycastAddr(interface, &message->targetAddr))
 800b01c:	f105 0108 	add.w	r1, r5, #8
 800b020:	4638      	mov	r0, r7
 800b022:	f7fc fe3f 	bl	8007ca4 <ipv6IsAnycastAddr>
 800b026:	2800      	cmp	r0, #0
 800b028:	d1df      	bne.n	800afea <ndpProcessNeighborSol+0xd6>
 800b02a:	e77f      	b.n	800af2c <ndpProcessNeighborSol+0x18>
      if(ipv6CompAddr(&pseudoHeader->srcAddr, &IPV6_UNSPECIFIED_ADDR))
 800b02c:	2210      	movs	r2, #16
 800b02e:	4932      	ldr	r1, [pc, #200]	@ (800b0f8 <ndpProcessNeighborSol+0x1e4>)
 800b030:	4640      	mov	r0, r8
 800b032:	f009 fdfd 	bl	8014c30 <memcmp>
 800b036:	2800      	cmp	r0, #0
 800b038:	f43f af78 	beq.w	800af2c <ndpProcessNeighborSol+0x18>
      neighborCacheEntry = ndpFindNeighborCacheEntry(interface,
 800b03c:	4641      	mov	r1, r8
 800b03e:	4638      	mov	r0, r7
 800b040:	f000 f866 	bl	800b110 <ndpFindNeighborCacheEntry>
      if(neighborCacheEntry == NULL)
 800b044:	4604      	mov	r4, r0
 800b046:	b1b8      	cbz	r0, 800b078 <ndpProcessNeighborSol+0x164>
         if(neighborCacheEntry->state == NDP_STATE_PERMANENT)
 800b048:	7803      	ldrb	r3, [r0, #0]
 800b04a:	2b06      	cmp	r3, #6
 800b04c:	d0db      	beq.n	800b006 <ndpProcessNeighborSol+0xf2>
         else if(neighborCacheEntry->state == NDP_STATE_INCOMPLETE)
 800b04e:	2b01      	cmp	r3, #1
 800b050:	d038      	beq.n	800b0c4 <ndpProcessNeighborSol+0x1b0>
            if(!macCompAddr(&neighborCacheEntry->macAddr, &option->linkLayerAddr))
 800b052:	2206      	movs	r2, #6
 800b054:	1cb1      	adds	r1, r6, #2
 800b056:	3011      	adds	r0, #17
 800b058:	f009 fdea 	bl	8014c30 <memcmp>
 800b05c:	2800      	cmp	r0, #0
 800b05e:	d0d2      	beq.n	800b006 <ndpProcessNeighborSol+0xf2>
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800b060:	f8d6 3002 	ldr.w	r3, [r6, #2]
 800b064:	f8c4 3011 	str.w	r3, [r4, #17]
 800b068:	88f3      	ldrh	r3, [r6, #6]
 800b06a:	f8a4 3015 	strh.w	r3, [r4, #21]
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800b06e:	2103      	movs	r1, #3
 800b070:	4620      	mov	r0, r4
 800b072:	f000 f845 	bl	800b100 <ndpChangeState>
 800b076:	e7c6      	b.n	800b006 <ndpProcessNeighborSol+0xf2>
         if(interface->ndpContext.enable)
 800b078:	f8d7 3b90 	ldr.w	r3, [r7, #2960]	@ 0xb90
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d0c2      	beq.n	800b006 <ndpProcessNeighborSol+0xf2>
            neighborCacheEntry = ndpCreateNeighborCacheEntry(interface);
 800b080:	4638      	mov	r0, r7
 800b082:	f000 f8e4 	bl	800b24e <ndpCreateNeighborCacheEntry>
            if(neighborCacheEntry != NULL)
 800b086:	4603      	mov	r3, r0
 800b088:	2800      	cmp	r0, #0
 800b08a:	d0bc      	beq.n	800b006 <ndpProcessNeighborSol+0xf2>
               neighborCacheEntry->ipAddr = pseudoHeader->srcAddr;
 800b08c:	f8d8 4000 	ldr.w	r4, [r8]
 800b090:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b094:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800b098:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800b09c:	f8c3 4001 	str.w	r4, [r3, #1]
 800b0a0:	f8c3 0005 	str.w	r0, [r3, #5]
 800b0a4:	f8c3 1009 	str.w	r1, [r3, #9]
 800b0a8:	f8c3 200d 	str.w	r2, [r3, #13]
               neighborCacheEntry->macAddr = option->linkLayerAddr;
 800b0ac:	f8d6 2002 	ldr.w	r2, [r6, #2]
 800b0b0:	f8c3 2011 	str.w	r2, [r3, #17]
 800b0b4:	88f2      	ldrh	r2, [r6, #6]
 800b0b6:	f8a3 2015 	strh.w	r2, [r3, #21]
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800b0ba:	2103      	movs	r1, #3
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 f81f 	bl	800b100 <ndpChangeState>
 800b0c2:	e7a0      	b.n	800b006 <ndpProcessNeighborSol+0xf2>
            neighborCacheEntry->macAddr = option->linkLayerAddr;
 800b0c4:	f8d6 3002 	ldr.w	r3, [r6, #2]
 800b0c8:	f8c0 3011 	str.w	r3, [r0, #17]
 800b0cc:	88f3      	ldrh	r3, [r6, #6]
 800b0ce:	f8a0 3015 	strh.w	r3, [r0, #21]
            n = ndpSendQueuedPackets(interface, neighborCacheEntry);
 800b0d2:	4601      	mov	r1, r0
 800b0d4:	4638      	mov	r0, r7
 800b0d6:	f000 f843 	bl	800b160 <ndpSendQueuedPackets>
            if(n > 0)
 800b0da:	b138      	cbz	r0, 800b0ec <ndpProcessNeighborSol+0x1d8>
               neighborCacheEntry->timeout = NDP_DELAY_FIRST_PROBE_TIME;
 800b0dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 800b0e0:	6223      	str	r3, [r4, #32]
               ndpChangeState(neighborCacheEntry, NDP_STATE_DELAY);
 800b0e2:	2104      	movs	r1, #4
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	f000 f80b 	bl	800b100 <ndpChangeState>
 800b0ea:	e78c      	b.n	800b006 <ndpProcessNeighborSol+0xf2>
               ndpChangeState(neighborCacheEntry, NDP_STATE_STALE);
 800b0ec:	2103      	movs	r1, #3
 800b0ee:	4620      	mov	r0, r4
 800b0f0:	f000 f806 	bl	800b100 <ndpChangeState>
 800b0f4:	e787      	b.n	800b006 <ndpProcessNeighborSol+0xf2>
 800b0f6:	bf00      	nop
 800b0f8:	08019f20 	.word	0x08019f20
 800b0fc:	08019f30 	.word	0x08019f30

0800b100 <ndpChangeState>:
 * @param[in] entry Pointer to a Neighbor cache entry
 * @param[in] newState New state to switch to
 **/

void ndpChangeState(NdpNeighborCacheEntry *entry, NdpState newState)
{
 800b100:	b538      	push	{r3, r4, r5, lr}
 800b102:	4604      	mov	r4, r0
 800b104:	460d      	mov	r5, r1
#if defined(NDP_CHANGE_STATE_HOOK)
   NDP_CHANGE_STATE_HOOK(entry, newState);
#endif

   //Save current time
   entry->timestamp = osGetSystemTime();
 800b106:	f7f5 fb79 	bl	80007fc <osGetSystemTime>
 800b10a:	61e0      	str	r0, [r4, #28]
   //Switch to the new state
   entry->state = newState;
 800b10c:	7025      	strb	r5, [r4, #0]
}
 800b10e:	bd38      	pop	{r3, r4, r5, pc}

0800b110 <ndpFindNeighborCacheEntry>:
 *   the specified IPv6 address could not be found in the Neighbor cache
 **/

NdpNeighborCacheEntry *ndpFindNeighborCacheEntry(NetInterface *interface,
   const Ipv6Addr *ipAddr)
{
 800b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b112:	4606      	mov	r6, r0
 800b114:	460f      	mov	r7, r1
   uint_t i;
   NdpNeighborCacheEntry *entry;

   //Loop through Neighbor cache entries
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b116:	2500      	movs	r5, #0
 800b118:	e000      	b.n	800b11c <ndpFindNeighborCacheEntry+0xc>
 800b11a:	3501      	adds	r5, #1
 800b11c:	2d07      	cmp	r5, #7
 800b11e:	d81c      	bhi.n	800b15a <ndpFindNeighborCacheEntry+0x4a>
   {
      //Point to the current entry
      entry = &interface->ndpContext.neighborCache[i];
 800b120:	eb05 1345 	add.w	r3, r5, r5, lsl #5
 800b124:	009b      	lsls	r3, r3, #2
 800b126:	f503 6339 	add.w	r3, r3, #2960	@ 0xb90
 800b12a:	4433      	add	r3, r6
 800b12c:	1d1c      	adds	r4, r3, #4

      //Check whether the entry is currently in use
      if(entry->state != NDP_STATE_NONE)
 800b12e:	eb05 1345 	add.w	r3, r5, r5, lsl #5
 800b132:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b136:	f893 3b94 	ldrb.w	r3, [r3, #2964]	@ 0xb94
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d0ed      	beq.n	800b11a <ndpFindNeighborCacheEntry+0xa>
      {
         //Current entry matches the specified address?
         if(ipv6CompAddr(&entry->ipAddr, ipAddr))
 800b13e:	eb05 1045 	add.w	r0, r5, r5, lsl #5
 800b142:	0080      	lsls	r0, r0, #2
 800b144:	f500 6039 	add.w	r0, r0, #2960	@ 0xb90
 800b148:	4430      	add	r0, r6
 800b14a:	2210      	movs	r2, #16
 800b14c:	4639      	mov	r1, r7
 800b14e:	3005      	adds	r0, #5
 800b150:	f009 fd6e 	bl	8014c30 <memcmp>
 800b154:	2800      	cmp	r0, #0
 800b156:	d1e0      	bne.n	800b11a <ndpFindNeighborCacheEntry+0xa>
 800b158:	e000      	b.n	800b15c <ndpFindNeighborCacheEntry+0x4c>
         }
      }
   }

   //No matching entry in Neighbor cache
   return NULL;
 800b15a:	2400      	movs	r4, #0
}
 800b15c:	4620      	mov	r0, r4
 800b15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b160 <ndpSendQueuedPackets>:
 * @param[in] entry Pointer to a Neighbor cache entry
 * @return The number of packets that have been sent
 **/

uint_t ndpSendQueuedPackets(NetInterface *interface, NdpNeighborCacheEntry *entry)
{
 800b160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b164:	b083      	sub	sp, #12
 800b166:	4606      	mov	r6, r0
 800b168:	460c      	mov	r4, r1
   NdpQueueItem *item;
#if (ETH_SUPPORT == ENABLED)
   NetInterface *physicalInterface;

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800b16a:	f001 fcc5 	bl	800caf8 <nicGetPhysicalInterface>

   //Reset packet counter
   i = 0;

   //Check the state of the Neighbor cache entry
   if(entry->state == NDP_STATE_INCOMPLETE)
 800b16e:	7823      	ldrb	r3, [r4, #0]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d03b      	beq.n	800b1ec <ndpSendQueuedPackets+0x8c>
   i = 0;
 800b174:	2500      	movs	r5, #0
         netBufferFree(item->buffer);
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800b176:	2300      	movs	r3, #0
 800b178:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80

   //Return the number of packets that have been sent
   return i;
}
 800b17c:	4628      	mov	r0, r5
 800b17e:	b003      	add	sp, #12
 800b180:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         netBufferFree(item->buffer);
 800b184:	232c      	movs	r3, #44	@ 0x2c
 800b186:	fb03 4305 	mla	r3, r3, r5, r4
 800b18a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b18c:	f000 ffec 	bl	800c168 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800b190:	3501      	adds	r5, #1
 800b192:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b196:	42ab      	cmp	r3, r5
 800b198:	d9ed      	bls.n	800b176 <ndpSendQueuedPackets+0x16>
         if(physicalInterface->nicDriver != NULL &&
 800b19a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d0f1      	beq.n	800b184 <ndpSendQueuedPackets+0x24>
            physicalInterface->nicDriver->type == NIC_TYPE_ETHERNET)
 800b1a0:	781b      	ldrb	r3, [r3, #0]
         if(physicalInterface->nicDriver != NULL &&
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d1ee      	bne.n	800b184 <ndpSendQueuedPackets+0x24>
            length = netBufferGetLength(item->buffer) - item->offset;
 800b1a6:	f04f 082c 	mov.w	r8, #44	@ 0x2c
 800b1aa:	fb08 f805 	mul.w	r8, r8, r5
 800b1ae:	eb04 0908 	add.w	r9, r4, r8
 800b1b2:	f8d9 002c 	ldr.w	r0, [r9, #44]	@ 0x2c
 800b1b6:	f000 ff5f 	bl	800c078 <netBufferGetLength>
 800b1ba:	f8d9 2030 	ldr.w	r2, [r9, #48]	@ 0x30
            ipv6UpdateOutStats(interface, &entry->ipAddr, length);
 800b1be:	1a82      	subs	r2, r0, r2
 800b1c0:	1c61      	adds	r1, r4, #1
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f7fd f8fb 	bl	80083be <ipv6UpdateOutStats>
            ethSendFrame(interface, &entry->macAddr, ETH_TYPE_IPV6,
 800b1c8:	f8d9 302c 	ldr.w	r3, [r9, #44]	@ 0x2c
 800b1cc:	f108 0230 	add.w	r2, r8, #48	@ 0x30
 800b1d0:	4422      	add	r2, r4
 800b1d2:	3204      	adds	r2, #4
 800b1d4:	9201      	str	r2, [sp, #4]
 800b1d6:	f8d9 2030 	ldr.w	r2, [r9, #48]	@ 0x30
 800b1da:	9200      	str	r2, [sp, #0]
 800b1dc:	f248 62dd 	movw	r2, #34525	@ 0x86dd
 800b1e0:	f104 0111 	add.w	r1, r4, #17
 800b1e4:	4630      	mov	r0, r6
 800b1e6:	f7f7 fe6b 	bl	8002ec0 <ethSendFrame>
 800b1ea:	e7cb      	b.n	800b184 <ndpSendQueuedPackets+0x24>
 800b1ec:	4607      	mov	r7, r0
      for(i = 0; i < entry->queueSize; i++)
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	e7cf      	b.n	800b192 <ndpSendQueuedPackets+0x32>

0800b1f2 <ndpFlushQueuedPackets>:
 * @param[in] interface Underlying network interface
 * @param[in] entry Pointer to a Neighbor cache entry
 **/

void ndpFlushQueuedPackets(NetInterface *interface, NdpNeighborCacheEntry *entry)
{
 800b1f2:	b530      	push	{r4, r5, lr}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	460c      	mov	r4, r1
   uint_t i;
   NdpQueueItem *item;

   //Check the state of the Neighbor cache entry
   if(entry->state == NDP_STATE_INCOMPLETE)
 800b1f8:	780b      	ldrb	r3, [r1, #0]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d025      	beq.n	800b24a <ndpFlushQueuedPackets+0x58>
         netBufferFree(item->buffer);
      }
   }

   //The queue is now empty
   entry->queueSize = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
}
 800b204:	b003      	add	sp, #12
 800b206:	bd30      	pop	{r4, r5, pc}
         netBufferFree(item->buffer);
 800b208:	232c      	movs	r3, #44	@ 0x2c
 800b20a:	fb03 4305 	mla	r3, r3, r5, r4
 800b20e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800b210:	f000 ffaa 	bl	800c168 <netBufferFree>
      for(i = 0; i < entry->queueSize; i++)
 800b214:	3501      	adds	r5, #1
 800b216:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800b21a:	42ab      	cmp	r3, r5
 800b21c:	d9ef      	bls.n	800b1fe <ndpFlushQueuedPackets+0xc>
         if(entry->retransmitCount >= NDP_MAX_MULTICAST_SOLICIT)
 800b21e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b220:	2b02      	cmp	r3, #2
 800b222:	d9f1      	bls.n	800b208 <ndpFlushQueuedPackets+0x16>
            if(item->srcInterface != NULL)
 800b224:	232c      	movs	r3, #44	@ 0x2c
 800b226:	fb03 4305 	mla	r3, r3, r5, r4
 800b22a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800b22c:	2800      	cmp	r0, #0
 800b22e:	d0eb      	beq.n	800b208 <ndpFlushQueuedPackets+0x16>
                  ICMPV6_CODE_ADDR_UNREACHABLE, 0, item->buffer, item->offset);
 800b230:	232c      	movs	r3, #44	@ 0x2c
 800b232:	fb03 4305 	mla	r3, r3, r5, r4
 800b236:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               icmpv6SendErrorMessage(item->srcInterface, ICMPV6_TYPE_DEST_UNREACHABLE,
 800b238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b23a:	9301      	str	r3, [sp, #4]
 800b23c:	9200      	str	r2, [sp, #0]
 800b23e:	2300      	movs	r3, #0
 800b240:	2203      	movs	r2, #3
 800b242:	2101      	movs	r1, #1
 800b244:	f7f9 f98c 	bl	8004560 <icmpv6SendErrorMessage>
 800b248:	e7de      	b.n	800b208 <ndpFlushQueuedPackets+0x16>
      for(i = 0; i < entry->queueSize; i++)
 800b24a:	2500      	movs	r5, #0
 800b24c:	e7e3      	b.n	800b216 <ndpFlushQueuedPackets+0x24>

0800b24e <ndpCreateNeighborCacheEntry>:
{
 800b24e:	b570      	push	{r4, r5, r6, lr}
 800b250:	4605      	mov	r5, r0
   time = osGetSystemTime();
 800b252:	f7f5 fad3 	bl	80007fc <osGetSystemTime>
   oldestEntry = NULL;
 800b256:	2600      	movs	r6, #0
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b258:	4632      	mov	r2, r6
 800b25a:	e00d      	b.n	800b278 <ndpCreateNeighborCacheEntry+0x2a>
         osMemset(entry, 0, sizeof(NdpNeighborCacheEntry));
 800b25c:	2284      	movs	r2, #132	@ 0x84
 800b25e:	2100      	movs	r1, #0
 800b260:	4620      	mov	r0, r4
 800b262:	f009 fd0f 	bl	8014c84 <memset>
         return entry;
 800b266:	4626      	mov	r6, r4
 800b268:	e03d      	b.n	800b2e6 <ndpCreateNeighborCacheEntry+0x98>
            oldestEntry->state != NDP_STATE_STALE)
 800b26a:	7831      	ldrb	r1, [r6, #0]
         else if(entry->state == NDP_STATE_STALE &&
 800b26c:	2903      	cmp	r1, #3
 800b26e:	d01a      	beq.n	800b2a6 <ndpCreateNeighborCacheEntry+0x58>
            oldestEntry = entry;
 800b270:	4626      	mov	r6, r4
 800b272:	e000      	b.n	800b276 <ndpCreateNeighborCacheEntry+0x28>
            oldestEntry = entry;
 800b274:	4626      	mov	r6, r4
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b276:	3201      	adds	r2, #1
 800b278:	2a07      	cmp	r2, #7
 800b27a:	d826      	bhi.n	800b2ca <ndpCreateNeighborCacheEntry+0x7c>
      entry = &interface->ndpContext.neighborCache[i];
 800b27c:	eb02 1342 	add.w	r3, r2, r2, lsl #5
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	f503 6339 	add.w	r3, r3, #2960	@ 0xb90
 800b286:	442b      	add	r3, r5
 800b288:	1d1c      	adds	r4, r3, #4
      if(entry->state == NDP_STATE_NONE)
 800b28a:	eb02 1342 	add.w	r3, r2, r2, lsl #5
 800b28e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b292:	f893 3b94 	ldrb.w	r3, [r3, #2964]	@ 0xb94
 800b296:	2b00      	cmp	r3, #0
 800b298:	d0e0      	beq.n	800b25c <ndpCreateNeighborCacheEntry+0xe>
      else if(entry->state == NDP_STATE_PERMANENT)
 800b29a:	2b06      	cmp	r3, #6
 800b29c:	d0eb      	beq.n	800b276 <ndpCreateNeighborCacheEntry+0x28>
         if(oldestEntry == NULL)
 800b29e:	2e00      	cmp	r6, #0
 800b2a0:	d0e8      	beq.n	800b274 <ndpCreateNeighborCacheEntry+0x26>
         else if(entry->state == NDP_STATE_STALE &&
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d0e1      	beq.n	800b26a <ndpCreateNeighborCacheEntry+0x1c>
         else if(entry->state != NDP_STATE_STALE &&
 800b2a6:	2b03      	cmp	r3, #3
 800b2a8:	d002      	beq.n	800b2b0 <ndpCreateNeighborCacheEntry+0x62>
            oldestEntry->state == NDP_STATE_STALE)
 800b2aa:	7833      	ldrb	r3, [r6, #0]
         else if(entry->state != NDP_STATE_STALE &&
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d0e2      	beq.n	800b276 <ndpCreateNeighborCacheEntry+0x28>
         else if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 800b2b0:	eb02 1342 	add.w	r3, r2, r2, lsl #5
 800b2b4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b2b8:	f8d3 1bb0 	ldr.w	r1, [r3, #2992]	@ 0xbb0
 800b2bc:	1a41      	subs	r1, r0, r1
 800b2be:	69f3      	ldr	r3, [r6, #28]
 800b2c0:	1ac3      	subs	r3, r0, r3
 800b2c2:	4299      	cmp	r1, r3
 800b2c4:	d9d7      	bls.n	800b276 <ndpCreateNeighborCacheEntry+0x28>
            oldestEntry = entry;
 800b2c6:	4626      	mov	r6, r4
 800b2c8:	e7d5      	b.n	800b276 <ndpCreateNeighborCacheEntry+0x28>
   if(oldestEntry != NULL)
 800b2ca:	b166      	cbz	r6, 800b2e6 <ndpCreateNeighborCacheEntry+0x98>
      ndpFlushQueuedPackets(interface, oldestEntry);
 800b2cc:	4631      	mov	r1, r6
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f7ff ff8f 	bl	800b1f2 <ndpFlushQueuedPackets>
      ndpChangeState(oldestEntry, NDP_STATE_NONE);
 800b2d4:	2100      	movs	r1, #0
 800b2d6:	4630      	mov	r0, r6
 800b2d8:	f7ff ff12 	bl	800b100 <ndpChangeState>
      osMemset(oldestEntry, 0, sizeof(NdpNeighborCacheEntry));
 800b2dc:	2284      	movs	r2, #132	@ 0x84
 800b2de:	2100      	movs	r1, #0
 800b2e0:	4630      	mov	r0, r6
 800b2e2:	f009 fccf 	bl	8014c84 <memset>
}
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b2ec <ndpUpdateNeighborCache>:
{
 800b2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2f0:	4606      	mov	r6, r0
   time = osGetSystemTime();
 800b2f2:	f7f5 fa83 	bl	80007fc <osGetSystemTime>
 800b2f6:	4607      	mov	r7, r0
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b2f8:	2400      	movs	r4, #0
 800b2fa:	e042      	b.n	800b382 <ndpUpdateNeighborCache+0x96>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800b2fc:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b300:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b304:	f8d2 3bb0 	ldr.w	r3, [r2, #2992]	@ 0xbb0
 800b308:	f8d2 2bb4 	ldr.w	r2, [r2, #2996]	@ 0xbb4
 800b30c:	4413      	add	r3, r2
 800b30e:	1afb      	subs	r3, r7, r3
 800b310:	2b00      	cmp	r3, #0
 800b312:	db35      	blt.n	800b380 <ndpUpdateNeighborCache+0x94>
            entry->retransmitCount++;
 800b314:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b318:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b31c:	f8d2 3bb8 	ldr.w	r3, [r2, #3000]	@ 0xbb8
 800b320:	3301      	adds	r3, #1
 800b322:	f8c2 3bb8 	str.w	r3, [r2, #3000]	@ 0xbb8
            if(entry->retransmitCount < NDP_MAX_MULTICAST_SOLICIT)
 800b326:	2b02      	cmp	r3, #2
 800b328:	d815      	bhi.n	800b356 <ndpUpdateNeighborCache+0x6a>
               ndpSendNeighborSol(interface, &entry->ipAddr, TRUE);
 800b32a:	0165      	lsls	r5, r4, #5
 800b32c:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 800b330:	0089      	lsls	r1, r1, #2
 800b332:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b336:	4431      	add	r1, r6
 800b338:	2201      	movs	r2, #1
 800b33a:	3105      	adds	r1, #5
 800b33c:	4630      	mov	r0, r6
 800b33e:	f7ff fc2d 	bl	800ab9c <ndpSendNeighborSol>
               entry->timestamp = time;
 800b342:	192b      	adds	r3, r5, r4
 800b344:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b348:	f8c3 7bb0 	str.w	r7, [r3, #2992]	@ 0xbb0
               entry->timeout = interface->ndpContext.retransTimer;
 800b34c:	f8d6 2b68 	ldr.w	r2, [r6, #2920]	@ 0xb68
 800b350:	f8c3 2bb4 	str.w	r2, [r3, #2996]	@ 0xbb4
 800b354:	e014      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
               ndpFlushQueuedPackets(interface, entry);
 800b356:	4629      	mov	r1, r5
 800b358:	4630      	mov	r0, r6
 800b35a:	f7ff ff4a 	bl	800b1f2 <ndpFlushQueuedPackets>
               ndpChangeState(entry, NDP_STATE_NONE);
 800b35e:	2100      	movs	r1, #0
 800b360:	4628      	mov	r0, r5
 800b362:	f7ff fecd 	bl	800b100 <ndpChangeState>
 800b366:	e00b      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800b368:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b36c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b370:	f8d2 3bb0 	ldr.w	r3, [r2, #2992]	@ 0xbb0
 800b374:	f8d2 2bb4 	ldr.w	r2, [r2, #2996]	@ 0xbb4
 800b378:	4413      	add	r3, r2
 800b37a:	1afb      	subs	r3, r7, r3
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	da23      	bge.n	800b3c8 <ndpUpdateNeighborCache+0xdc>
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b380:	3401      	adds	r4, #1
 800b382:	2c07      	cmp	r4, #7
 800b384:	f200 808c 	bhi.w	800b4a0 <ndpUpdateNeighborCache+0x1b4>
      entry = &interface->ndpContext.neighborCache[i];
 800b388:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 800b38c:	0089      	lsls	r1, r1, #2
 800b38e:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b392:	4431      	add	r1, r6
 800b394:	1d0d      	adds	r5, r1, #4
      if(entry->state == NDP_STATE_PERMANENT)
 800b396:	eb04 1344 	add.w	r3, r4, r4, lsl #5
 800b39a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b39e:	f893 3b94 	ldrb.w	r3, [r3, #2964]	@ 0xb94
 800b3a2:	3b01      	subs	r3, #1
 800b3a4:	2b05      	cmp	r3, #5
 800b3a6:	d876      	bhi.n	800b496 <ndpUpdateNeighborCache+0x1aa>
 800b3a8:	a201      	add	r2, pc, #4	@ (adr r2, 800b3b0 <ndpUpdateNeighborCache+0xc4>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b2fd 	.word	0x0800b2fd
 800b3b4:	0800b369 	.word	0x0800b369
 800b3b8:	0800b381 	.word	0x0800b381
 800b3bc:	0800b3d3 	.word	0x0800b3d3
 800b3c0:	0800b41f 	.word	0x0800b41f
 800b3c4:	0800b381 	.word	0x0800b381
            ndpChangeState(entry, NDP_STATE_STALE);
 800b3c8:	2103      	movs	r1, #3
 800b3ca:	4628      	mov	r0, r5
 800b3cc:	f7ff fe98 	bl	800b100 <ndpChangeState>
 800b3d0:	e7d6      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800b3d2:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b3d6:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b3da:	f8d2 3bb0 	ldr.w	r3, [r2, #2992]	@ 0xbb0
 800b3de:	f8d2 2bb4 	ldr.w	r2, [r2, #2996]	@ 0xbb4
 800b3e2:	4413      	add	r3, r2
 800b3e4:	1afb      	subs	r3, r7, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	dbca      	blt.n	800b380 <ndpUpdateNeighborCache+0x94>
            entry->retransmitCount = 0;
 800b3ea:	eb04 1844 	add.w	r8, r4, r4, lsl #5
 800b3ee:	eb06 0888 	add.w	r8, r6, r8, lsl #2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c8 2bb8 	str.w	r2, [r8, #3000]	@ 0xbb8
            ndpSendNeighborSol(interface, &entry->ipAddr, FALSE);
 800b3f8:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 800b3fc:	0089      	lsls	r1, r1, #2
 800b3fe:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b402:	4431      	add	r1, r6
 800b404:	3105      	adds	r1, #5
 800b406:	4630      	mov	r0, r6
 800b408:	f7ff fbc8 	bl	800ab9c <ndpSendNeighborSol>
            entry->timeout = interface->ndpContext.retransTimer;
 800b40c:	f8d6 3b68 	ldr.w	r3, [r6, #2920]	@ 0xb68
 800b410:	f8c8 3bb4 	str.w	r3, [r8, #2996]	@ 0xbb4
            ndpChangeState(entry, NDP_STATE_PROBE);
 800b414:	2105      	movs	r1, #5
 800b416:	4628      	mov	r0, r5
 800b418:	f7ff fe72 	bl	800b100 <ndpChangeState>
 800b41c:	e7b0      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
         if(timeCompare(time, entry->timestamp + entry->timeout) >= 0)
 800b41e:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b422:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b426:	f8d2 3bb0 	ldr.w	r3, [r2, #2992]	@ 0xbb0
 800b42a:	f8d2 2bb4 	ldr.w	r2, [r2, #2996]	@ 0xbb4
 800b42e:	4413      	add	r3, r2
 800b430:	1afb      	subs	r3, r7, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	dba4      	blt.n	800b380 <ndpUpdateNeighborCache+0x94>
            entry->retransmitCount++;
 800b436:	eb04 1244 	add.w	r2, r4, r4, lsl #5
 800b43a:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 800b43e:	f8d2 3bb8 	ldr.w	r3, [r2, #3000]	@ 0xbb8
 800b442:	3301      	adds	r3, #1
 800b444:	f8c2 3bb8 	str.w	r3, [r2, #3000]	@ 0xbb8
            if(entry->retransmitCount < NDP_MAX_UNICAST_SOLICIT)
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d815      	bhi.n	800b478 <ndpUpdateNeighborCache+0x18c>
               ndpSendNeighborSol(interface, &entry->ipAddr, FALSE);
 800b44c:	0165      	lsls	r5, r4, #5
 800b44e:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 800b452:	0089      	lsls	r1, r1, #2
 800b454:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b458:	4431      	add	r1, r6
 800b45a:	2200      	movs	r2, #0
 800b45c:	3105      	adds	r1, #5
 800b45e:	4630      	mov	r0, r6
 800b460:	f7ff fb9c 	bl	800ab9c <ndpSendNeighborSol>
               entry->timestamp = time;
 800b464:	192b      	adds	r3, r5, r4
 800b466:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b46a:	f8c3 7bb0 	str.w	r7, [r3, #2992]	@ 0xbb0
               entry->timeout = interface->ndpContext.retransTimer;
 800b46e:	f8d6 2b68 	ldr.w	r2, [r6, #2920]	@ 0xb68
 800b472:	f8c3 2bb4 	str.w	r2, [r3, #2996]	@ 0xbb4
 800b476:	e783      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
               ndpChangeState(entry, NDP_STATE_NONE);
 800b478:	2100      	movs	r1, #0
 800b47a:	4628      	mov	r0, r5
 800b47c:	f7ff fe40 	bl	800b100 <ndpChangeState>
               ndpUpdateNextHop(interface, &entry->ipAddr);
 800b480:	eb04 1144 	add.w	r1, r4, r4, lsl #5
 800b484:	0089      	lsls	r1, r1, #2
 800b486:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b48a:	4431      	add	r1, r6
 800b48c:	3105      	adds	r1, #5
 800b48e:	4630      	mov	r0, r6
 800b490:	f000 fae8 	bl	800ba64 <ndpUpdateNextHop>
 800b494:	e774      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
         ndpChangeState(entry, NDP_STATE_NONE);
 800b496:	2100      	movs	r1, #0
 800b498:	4628      	mov	r0, r5
 800b49a:	f7ff fe31 	bl	800b100 <ndpChangeState>
 800b49e:	e76f      	b.n	800b380 <ndpUpdateNeighborCache+0x94>
}
 800b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b4a4 <ndpFlushNeighborCache>:
{
 800b4a4:	b570      	push	{r4, r5, r6, lr}
 800b4a6:	4606      	mov	r6, r0
   for(i = 0; i < NDP_NEIGHBOR_CACHE_SIZE; i++)
 800b4a8:	2500      	movs	r5, #0
 800b4aa:	e000      	b.n	800b4ae <ndpFlushNeighborCache+0xa>
 800b4ac:	3501      	adds	r5, #1
 800b4ae:	2d07      	cmp	r5, #7
 800b4b0:	d817      	bhi.n	800b4e2 <ndpFlushNeighborCache+0x3e>
      entry = &interface->ndpContext.neighborCache[i];
 800b4b2:	eb05 1145 	add.w	r1, r5, r5, lsl #5
 800b4b6:	0089      	lsls	r1, r1, #2
 800b4b8:	f501 6139 	add.w	r1, r1, #2960	@ 0xb90
 800b4bc:	4431      	add	r1, r6
 800b4be:	1d0c      	adds	r4, r1, #4
      if(entry->state == NDP_STATE_PERMANENT)
 800b4c0:	eb05 1345 	add.w	r3, r5, r5, lsl #5
 800b4c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4c8:	f893 3b94 	ldrb.w	r3, [r3, #2964]	@ 0xb94
 800b4cc:	2b06      	cmp	r3, #6
 800b4ce:	d0ed      	beq.n	800b4ac <ndpFlushNeighborCache+0x8>
         ndpFlushQueuedPackets(interface, entry);
 800b4d0:	4621      	mov	r1, r4
 800b4d2:	4630      	mov	r0, r6
 800b4d4:	f7ff fe8d 	bl	800b1f2 <ndpFlushQueuedPackets>
         ndpChangeState(entry, NDP_STATE_NONE);
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f7ff fe10 	bl	800b100 <ndpChangeState>
 800b4e0:	e7e4      	b.n	800b4ac <ndpFlushNeighborCache+0x8>
}
 800b4e2:	bd70      	pop	{r4, r5, r6, pc}

0800b4e4 <ndpCreateDestCacheEntry>:
 * @param[in] interface Underlying network interface
 * @return Pointer to the newly created entry
 **/

NdpDestCacheEntry *ndpCreateDestCacheEntry(NetInterface *interface)
{
 800b4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e8:	4606      	mov	r6, r0
   systime_t time;
   NdpDestCacheEntry *entry;
   NdpDestCacheEntry *oldestEntry;

   //Get current time
   time = osGetSystemTime();
 800b4ea:	f7f5 f987 	bl	80007fc <osGetSystemTime>
 800b4ee:	4607      	mov	r7, r0

   //Keep track of the oldest entry
   oldestEntry = &interface->ndpContext.destCache[0];
 800b4f0:	f606 78b4 	addw	r8, r6, #4020	@ 0xfb4

   //Loop through Destination cache entries
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800b4f4:	2500      	movs	r5, #0
 800b4f6:	e007      	b.n	800b508 <ndpCreateDestCacheEntry+0x24>

      //Check whether the entry is currently in use or not
      if(ipv6CompAddr(&entry->destAddr, &IPV6_UNSPECIFIED_ADDR))
      {
         //Erase contents
         osMemset(entry, 0, sizeof(NdpDestCacheEntry));
 800b4f8:	2228      	movs	r2, #40	@ 0x28
 800b4fa:	2100      	movs	r1, #0
 800b4fc:	4620      	mov	r0, r4
 800b4fe:	f009 fbc1 	bl	8014c84 <memset>
         //Return a pointer to the Destination cache entry
         return entry;
 800b502:	46a0      	mov	r8, r4
 800b504:	e023      	b.n	800b54e <ndpCreateDestCacheEntry+0x6a>
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800b506:	3501      	adds	r5, #1
 800b508:	2d07      	cmp	r5, #7
 800b50a:	d81b      	bhi.n	800b544 <ndpCreateDestCacheEntry+0x60>
      entry = &interface->ndpContext.destCache[i];
 800b50c:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800b510:	00e4      	lsls	r4, r4, #3
 800b512:	f504 647b 	add.w	r4, r4, #4016	@ 0xfb0
 800b516:	4434      	add	r4, r6
 800b518:	3404      	adds	r4, #4
      if(ipv6CompAddr(&entry->destAddr, &IPV6_UNSPECIFIED_ADDR))
 800b51a:	2210      	movs	r2, #16
 800b51c:	490d      	ldr	r1, [pc, #52]	@ (800b554 <ndpCreateDestCacheEntry+0x70>)
 800b51e:	4620      	mov	r0, r4
 800b520:	f009 fb86 	bl	8014c30 <memcmp>
 800b524:	2800      	cmp	r0, #0
 800b526:	d0e7      	beq.n	800b4f8 <ndpCreateDestCacheEntry+0x14>
      }

      //Keep track of the oldest entry in the table
      if((time - entry->timestamp) > (time - oldestEntry->timestamp))
 800b528:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800b52c:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800b530:	f8d3 2fd8 	ldr.w	r2, [r3, #4056]	@ 0xfd8
 800b534:	1aba      	subs	r2, r7, r2
 800b536:	f8d8 3024 	ldr.w	r3, [r8, #36]	@ 0x24
 800b53a:	1afb      	subs	r3, r7, r3
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d9e2      	bls.n	800b506 <ndpCreateDestCacheEntry+0x22>
      {
         oldestEntry = entry;
 800b540:	46a0      	mov	r8, r4
 800b542:	e7e0      	b.n	800b506 <ndpCreateDestCacheEntry+0x22>
      }
   }

   //The oldest entry is removed whenever the table runs out of space
   osMemset(oldestEntry, 0, sizeof(NdpDestCacheEntry));
 800b544:	2228      	movs	r2, #40	@ 0x28
 800b546:	2100      	movs	r1, #0
 800b548:	4640      	mov	r0, r8
 800b54a:	f009 fb9b 	bl	8014c84 <memset>

   //Return a pointer to the Destination cache entry
   return oldestEntry;
}
 800b54e:	4640      	mov	r0, r8
 800b550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b554:	08019f20 	.word	0x08019f20

0800b558 <ndpFindDestCacheEntry>:
 *   the specified address could not be found in the Destination cache
 **/

NdpDestCacheEntry *ndpFindDestCacheEntry(NetInterface *interface,
   const Ipv6Addr *destAddr)
{
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	4607      	mov	r7, r0
 800b55c:	460e      	mov	r6, r1
   uint_t i;
   NdpDestCacheEntry *entry;

   //Loop through Destination Cache entries
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800b55e:	2500      	movs	r5, #0
 800b560:	2d07      	cmp	r5, #7
 800b562:	d80e      	bhi.n	800b582 <ndpFindDestCacheEntry+0x2a>
   {
      //Point to the current entry
      entry = &interface->ndpContext.destCache[i];
 800b564:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800b568:	00e4      	lsls	r4, r4, #3
 800b56a:	f504 647b 	add.w	r4, r4, #4016	@ 0xfb0
 800b56e:	443c      	add	r4, r7
 800b570:	3404      	adds	r4, #4

      //Current entry matches the specified destination address?
      if(ipv6CompAddr(&entry->destAddr, destAddr))
 800b572:	2210      	movs	r2, #16
 800b574:	4631      	mov	r1, r6
 800b576:	4620      	mov	r0, r4
 800b578:	f009 fb5a 	bl	8014c30 <memcmp>
 800b57c:	b110      	cbz	r0, 800b584 <ndpFindDestCacheEntry+0x2c>
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800b57e:	3501      	adds	r5, #1
 800b580:	e7ee      	b.n	800b560 <ndpFindDestCacheEntry+0x8>
         return entry;
      }
   }

   //No matching entry in Destination Cache
   return NULL;
 800b582:	2400      	movs	r4, #0
}
 800b584:	4620      	mov	r0, r4
 800b586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b588 <ndpFlushDestCache>:
 * @brief Flush Destination Cache
 * @param[in] interface Underlying network interface
 **/

void ndpFlushDestCache(NetInterface *interface)
{
 800b588:	b508      	push	{r3, lr}
   //Clear the Destination Cache
   osMemset(interface->ndpContext.destCache, 0,
 800b58a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 800b58e:	2100      	movs	r1, #0
 800b590:	f600 70b4 	addw	r0, r0, #4020	@ 0xfb4
 800b594:	f009 fb76 	bl	8014c84 <memset>
      sizeof(interface->ndpContext.destCache));
}
 800b598:	bd08      	pop	{r3, pc}
	...

0800b59c <ndpParsePrefixInfoOption>:
 **/

void ndpParsePrefixInfoOption(NetInterface *interface, NdpPrefixInfoOption *option)
{
   //Make sure the Prefix Information option is valid
   if(option == NULL || option->length != 4)
 800b59c:	2900      	cmp	r1, #0
 800b59e:	d043      	beq.n	800b628 <ndpParsePrefixInfoOption+0x8c>
{
 800b5a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b5a4:	b084      	sub	sp, #16
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	460d      	mov	r5, r1
   if(option == NULL || option->length != 4)
 800b5aa:	784b      	ldrb	r3, [r1, #1]
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d103      	bne.n	800b5b8 <ndpParsePrefixInfoOption+0x1c>
      return;

   //A prefix Information option that have the on-link flag set indicates a
   //prefix identifying a range of addresses that should be considered on-link
   if(!option->l)
 800b5b0:	f991 3003 	ldrsb.w	r3, [r1, #3]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	db02      	blt.n	800b5be <ndpParsePrefixInfoOption+0x22>
   else
   {
      //If the new Lifetime value is zero, time-out the prefix immediately
      ipv6RemovePrefix(interface, &option->prefix, option->prefixLength);
   }
}
 800b5b8:	b004      	add	sp, #16
 800b5ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   if(ipv6CompPrefix(&option->prefix, &IPV6_LINK_LOCAL_ADDR_PREFIX, 10))
 800b5be:	f101 0610 	add.w	r6, r1, #16
 800b5c2:	220a      	movs	r2, #10
 800b5c4:	4919      	ldr	r1, [pc, #100]	@ (800b62c <ndpParsePrefixInfoOption+0x90>)
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7fc fbea 	bl	8007da0 <ipv6CompPrefix>
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	d1f3      	bne.n	800b5b8 <ndpParsePrefixInfoOption+0x1c>
   if(ntohl(option->preferredLifetime) > ntohl(option->validLifetime))
 800b5d0:	68a8      	ldr	r0, [r5, #8]
 800b5d2:	f7f5 f826 	bl	8000622 <swapInt32>
 800b5d6:	4607      	mov	r7, r0
 800b5d8:	6868      	ldr	r0, [r5, #4]
 800b5da:	f7f5 f822 	bl	8000622 <swapInt32>
 800b5de:	4287      	cmp	r7, r0
 800b5e0:	d8ea      	bhi.n	800b5b8 <ndpParsePrefixInfoOption+0x1c>
   if(ntohl(option->validLifetime) != 0)
 800b5e2:	6868      	ldr	r0, [r5, #4]
 800b5e4:	f7f5 f81d 	bl	8000622 <swapInt32>
 800b5e8:	b1c0      	cbz	r0, 800b61c <ndpParsePrefixInfoOption+0x80>
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800b5ea:	f895 8002 	ldrb.w	r8, [r5, #2]
 800b5ee:	78eb      	ldrb	r3, [r5, #3]
 800b5f0:	ea4f 19d3 	mov.w	r9, r3, lsr #7
         option->a, ntohl(option->validLifetime), ntohl(option->preferredLifetime));
 800b5f4:	f3c3 1a80 	ubfx	sl, r3, #6, #1
      ipv6AddPrefix(interface, &option->prefix, option->prefixLength, option->l,
 800b5f8:	6868      	ldr	r0, [r5, #4]
 800b5fa:	f7f5 f812 	bl	8000622 <swapInt32>
 800b5fe:	4607      	mov	r7, r0
 800b600:	68a8      	ldr	r0, [r5, #8]
 800b602:	f7f5 f80e 	bl	8000622 <swapInt32>
 800b606:	9002      	str	r0, [sp, #8]
 800b608:	9701      	str	r7, [sp, #4]
 800b60a:	f8cd a000 	str.w	sl, [sp]
 800b60e:	464b      	mov	r3, r9
 800b610:	4642      	mov	r2, r8
 800b612:	4631      	mov	r1, r6
 800b614:	4620      	mov	r0, r4
 800b616:	f7fc fbe7 	bl	8007de8 <ipv6AddPrefix>
 800b61a:	e7cd      	b.n	800b5b8 <ndpParsePrefixInfoOption+0x1c>
      ipv6RemovePrefix(interface, &option->prefix, option->prefixLength);
 800b61c:	78aa      	ldrb	r2, [r5, #2]
 800b61e:	4631      	mov	r1, r6
 800b620:	4620      	mov	r0, r4
 800b622:	f7fc fc5b 	bl	8007edc <ipv6RemovePrefix>
 800b626:	e7c7      	b.n	800b5b8 <ndpParsePrefixInfoOption+0x1c>
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	08019f40 	.word	0x08019f40

0800b630 <ndpUpdateAddrList>:
 * @brief Manage the lifetime of IPv6 addresses
 * @param[in] interface Underlying network interface
 **/

void ndpUpdateAddrList(NetInterface *interface)
{
 800b630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b634:	b088      	sub	sp, #32
 800b636:	4605      	mov	r5, r0

   //Point to the NDP context
   context = &interface->ndpContext;

   //Get current time
   time = osGetSystemTime();
 800b638:	f7f5 f8e0 	bl	80007fc <osGetSystemTime>
 800b63c:	4606      	mov	r6, r0

   //Go through the list of IPv6 addresses
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800b63e:	2400      	movs	r4, #0
 800b640:	e0b3      	b.n	800b7aa <ndpUpdateAddrList+0x17a>

      //Tentative address?
      if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
      {
         //Check whether the link is up
         if(interface->linkState)
 800b642:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800b644:	2a00      	cmp	r2, #0
 800b646:	f000 80af 	beq.w	800b7a8 <ndpUpdateAddrList+0x178>
         {
            //To check an address, a node should send Neighbor Solicitation messages
            if(entry->dadRetransmitCount == 0)
 800b64a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b64e:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b652:	f8d2 07e4 	ldr.w	r0, [r2, #2020]	@ 0x7e4
 800b656:	bb68      	cbnz	r0, 800b6b4 <ndpUpdateAddrList+0x84>
            {
               //Set time stamp
               entry->timestamp = time;
 800b658:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b65c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b660:	f8c2 67dc 	str.w	r6, [r2, #2012]	@ 0x7dc

               //Check whether Duplicate Address Detection should be performed
               if(context->dupAddrDetectTransmits > 0)
 800b664:	f8d5 2b6c 	ldr.w	r2, [r5, #2924]	@ 0xb6c
 800b668:	b1fa      	cbz	r2, 800b6aa <ndpUpdateAddrList+0x7a>
               {
                  //Link-local address?
                  if(i == 0)
 800b66a:	b184      	cbz	r4, 800b68e <ndpUpdateAddrList+0x5e>
                     entry->dadRetransmitCount = 1;
                  }
                  else
                  {
                     //Valid link-local address?
                     if(ipv6GetLinkLocalAddrState(interface) == IPV6_ADDR_STATE_PREFERRED)
 800b66c:	4628      	mov	r0, r5
 800b66e:	f7fb f97d 	bl	800696c <ipv6GetLinkLocalAddrState>
 800b672:	2802      	cmp	r0, #2
 800b674:	f040 8098 	bne.w	800b7a8 <ndpUpdateAddrList+0x178>
                     {
                        //Prepare to send the first Neighbor Solicitation message
                        entry->dadTimeout = 0;
 800b678:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b67c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b680:	2200      	movs	r2, #0
 800b682:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
                        entry->dadRetransmitCount = 1;
 800b686:	2201      	movs	r2, #1
 800b688:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
 800b68c:	e08c      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                     entry->dadTimeout = netGenerateRandRange(0,
 800b68e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800b692:	f001 fa1f 	bl	800cad4 <netGenerateRandRange>
 800b696:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b69a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b69e:	f8c3 07e0 	str.w	r0, [r3, #2016]	@ 0x7e0
                     entry->dadRetransmitCount = 1;
 800b6a2:	2201      	movs	r2, #1
 800b6a4:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
 800b6a8:	e07e      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                  }
               }
               else
               {
                  //Do not perform Duplicate Address Detection
                  ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_PREFERRED);
 800b6aa:	2102      	movs	r1, #2
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fc f9d2 	bl	8007a56 <ipv6ChangeAddrState>
 800b6b2:	e079      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
               }
            }
            else
            {
               //Check current time
               if(timeCompare(time, entry->timestamp + entry->dadTimeout) >= 0)
 800b6b4:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b6b8:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 800b6bc:	f8d1 27dc 	ldr.w	r2, [r1, #2012]	@ 0x7dc
 800b6c0:	f8d1 17e0 	ldr.w	r1, [r1, #2016]	@ 0x7e0
 800b6c4:	440a      	add	r2, r1
 800b6c6:	1ab2      	subs	r2, r6, r2
 800b6c8:	2a00      	cmp	r2, #0
 800b6ca:	db6d      	blt.n	800b7a8 <ndpUpdateAddrList+0x178>
               {
                  //Duplicate Address Detection failed?
                  if(entry->duplicate)
 800b6cc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b6d0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b6d4:	f8d2 27cc 	ldr.w	r2, [r2, #1996]	@ 0x7cc
 800b6d8:	b30a      	cbz	r2, 800b71e <ndpUpdateAddrList+0xee>
                  {
                     //A tentative address that is determined to be a duplicate
                     //must not be assigned to an interface
                     if(entry->permanent)
 800b6da:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b6de:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b6e2:	f8d3 37d8 	ldr.w	r3, [r3, #2008]	@ 0x7d8
 800b6e6:	b183      	cbz	r3, 800b70a <ndpUpdateAddrList+0xda>
                     {
                        //The IPv6 address should be preserved if it has been
                        //manually assigned
                        ipv6SetAddr(interface, i, &entry->addr,
 800b6e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b6ec:	0112      	lsls	r2, r2, #4
 800b6ee:	f502 62f6 	add.w	r2, r2, #1968	@ 0x7b0
 800b6f2:	442a      	add	r2, r5
 800b6f4:	2301      	movs	r3, #1
 800b6f6:	9302      	str	r3, [sp, #8]
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	9301      	str	r3, [sp, #4]
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	3208      	adds	r2, #8
 800b700:	4621      	mov	r1, r4
 800b702:	4628      	mov	r0, r5
 800b704:	f7fc fd7c 	bl	8008200 <ipv6SetAddr>
 800b708:	e04e      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                     }
                     else
                     {
                        //The IPv6 address is no more valid and should be
                        //removed from the list
                        ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 800b70a:	2300      	movs	r3, #0
 800b70c:	9302      	str	r3, [sp, #8]
 800b70e:	9301      	str	r3, [sp, #4]
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4a43      	ldr	r2, [pc, #268]	@ (800b820 <ndpUpdateAddrList+0x1f0>)
 800b714:	4621      	mov	r1, r4
 800b716:	4628      	mov	r0, r5
 800b718:	f7fc fd72 	bl	8008200 <ipv6SetAddr>
 800b71c:	e044      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                           IPV6_ADDR_STATE_INVALID, 0, 0, FALSE);
                     }
                  }
                  //Duplicate Address Detection is on-going?
                  else if(entry->dadRetransmitCount <= context->dupAddrDetectTransmits)
 800b71e:	f8d5 2b6c 	ldr.w	r2, [r5, #2924]	@ 0xb6c
 800b722:	4290      	cmp	r0, r2
 800b724:	d828      	bhi.n	800b778 <ndpUpdateAddrList+0x148>
                  {
#if (MLD_NODE_SUPPORT == ENABLED)
                     Ipv6Addr solicitedNodeAddr;

                     //Form the Solicited-Node address
                     ipv6ComputeSolicitedNodeAddr(&entry->addr,
 800b726:	0067      	lsls	r7, r4, #1
 800b728:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 800b72c:	ea4f 1808 	mov.w	r8, r8, lsl #4
 800b730:	f508 68f6 	add.w	r8, r8, #1968	@ 0x7b0
 800b734:	44a8      	add	r8, r5
 800b736:	f108 0808 	add.w	r8, r8, #8
 800b73a:	a904      	add	r1, sp, #16
 800b73c:	4640      	mov	r0, r8
 800b73e:	f7fc fd41 	bl	80081c4 <ipv6ComputeSolicitedNodeAddr>
                        &solicitedNodeAddr);

                     //Send a MLD report message for the multicast address
                     mldNodeSendUnsolicitedReport(&interface->mldNodeContext,
 800b742:	a904      	add	r1, sp, #16
 800b744:	f241 00f4 	movw	r0, #4340	@ 0x10f4
 800b748:	4428      	add	r0, r5
 800b74a:	f7fe f860 	bl	800980e <mldNodeSendUnsolicitedReport>
                        &solicitedNodeAddr);
#endif
                     //Send a multicast Neighbor Solicitation message
                     ndpSendNeighborSol(interface, &entry->addr, TRUE);
 800b74e:	2201      	movs	r2, #1
 800b750:	4641      	mov	r1, r8
 800b752:	4628      	mov	r0, r5
 800b754:	f7ff fa22 	bl	800ab9c <ndpSendNeighborSol>

                     //Set timeout value
                     entry->dadTimeout += context->retransTimer;
 800b758:	193b      	adds	r3, r7, r4
 800b75a:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b75e:	f8d3 27e0 	ldr.w	r2, [r3, #2016]	@ 0x7e0
 800b762:	f8d5 1b68 	ldr.w	r1, [r5, #2920]	@ 0xb68
 800b766:	440a      	add	r2, r1
 800b768:	f8c3 27e0 	str.w	r2, [r3, #2016]	@ 0x7e0
                     //Increment retransmission counter
                     entry->dadRetransmitCount++;
 800b76c:	f8d3 27e4 	ldr.w	r2, [r3, #2020]	@ 0x7e4
 800b770:	3201      	adds	r2, #1
 800b772:	f8c3 27e4 	str.w	r2, [r3, #2020]	@ 0x7e4
 800b776:	e017      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                  }
                  //Duplicate Address Detection is complete?
                  else
                  {
                     //The use of the IPv6 address is now unrestricted
                     ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_PREFERRED);
 800b778:	2102      	movs	r1, #2
 800b77a:	4618      	mov	r0, r3
 800b77c:	f7fc f96b 	bl	8007a56 <ipv6ChangeAddrState>
 800b780:	e012      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
      }
      //Preferred address?
      else if(entry->state == IPV6_ADDR_STATE_PREFERRED)
      {
         //An IPv6 address with an infinite preferred lifetime is never timed out
         if(entry->preferredLifetime != NDP_INFINITE_LIFETIME)
 800b782:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b786:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b78a:	f8d2 27d4 	ldr.w	r2, [r2, #2004]	@ 0x7d4
 800b78e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b792:	d009      	beq.n	800b7a8 <ndpUpdateAddrList+0x178>
         {
            //When the preferred lifetime expires, the address becomes deprecated
            if(timeCompare(time, entry->timestamp + entry->preferredLifetime) >= 0)
 800b794:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800b798:	eb05 1101 	add.w	r1, r5, r1, lsl #4
 800b79c:	f8d1 17dc 	ldr.w	r1, [r1, #2012]	@ 0x7dc
 800b7a0:	440a      	add	r2, r1
 800b7a2:	1ab2      	subs	r2, r6, r2
 800b7a4:	2a00      	cmp	r2, #0
 800b7a6:	da33      	bge.n	800b810 <ndpUpdateAddrList+0x1e0>
   for(i = 0; i < IPV6_ADDR_LIST_SIZE; i++)
 800b7a8:	3401      	adds	r4, #1
 800b7aa:	2c02      	cmp	r4, #2
 800b7ac:	d835      	bhi.n	800b81a <ndpUpdateAddrList+0x1ea>
      entry = &interface->ipv6Context.addrList[i];
 800b7ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b7b2:	011b      	lsls	r3, r3, #4
 800b7b4:	f503 63f6 	add.w	r3, r3, #1968	@ 0x7b0
 800b7b8:	442b      	add	r3, r5
 800b7ba:	3308      	adds	r3, #8
      if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 800b7bc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b7c0:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b7c4:	f892 27c8 	ldrb.w	r2, [r2, #1992]	@ 0x7c8
 800b7c8:	2a01      	cmp	r2, #1
 800b7ca:	f43f af3a 	beq.w	800b642 <ndpUpdateAddrList+0x12>
      else if(entry->state == IPV6_ADDR_STATE_PREFERRED)
 800b7ce:	2a02      	cmp	r2, #2
 800b7d0:	d0d7      	beq.n	800b782 <ndpUpdateAddrList+0x152>
               ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_DEPRECATED);
            }
         }
      }
      //Deprecated address?
      else if(entry->state == IPV6_ADDR_STATE_DEPRECATED)
 800b7d2:	2a03      	cmp	r2, #3
 800b7d4:	d1e8      	bne.n	800b7a8 <ndpUpdateAddrList+0x178>
      {
         //An IPv6 address with an infinite valid lifetime is never timed out
         if(entry->validLifetime != NDP_INFINITE_LIFETIME)
 800b7d6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800b7da:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 800b7de:	f8d3 37d0 	ldr.w	r3, [r3, #2000]	@ 0x7d0
 800b7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7e6:	d0df      	beq.n	800b7a8 <ndpUpdateAddrList+0x178>
         {
            //When the valid lifetime expires, the address becomes invalid
            if(timeCompare(time, entry->timestamp + entry->validLifetime) >= 0)
 800b7e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800b7ec:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 800b7f0:	f8d2 27dc 	ldr.w	r2, [r2, #2012]	@ 0x7dc
 800b7f4:	4413      	add	r3, r2
 800b7f6:	1af3      	subs	r3, r6, r3
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	dbd5      	blt.n	800b7a8 <ndpUpdateAddrList+0x178>
            {
               //The IPv6 address is no more valid and should be removed from the list
               ipv6SetAddr(interface, i, &IPV6_UNSPECIFIED_ADDR,
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9302      	str	r3, [sp, #8]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	4a06      	ldr	r2, [pc, #24]	@ (800b820 <ndpUpdateAddrList+0x1f0>)
 800b806:	4621      	mov	r1, r4
 800b808:	4628      	mov	r0, r5
 800b80a:	f7fc fcf9 	bl	8008200 <ipv6SetAddr>
 800b80e:	e7cb      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
               ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_DEPRECATED);
 800b810:	2103      	movs	r1, #3
 800b812:	4618      	mov	r0, r3
 800b814:	f7fc f91f 	bl	8007a56 <ipv6ChangeAddrState>
 800b818:	e7c6      	b.n	800b7a8 <ndpUpdateAddrList+0x178>
                  IPV6_ADDR_STATE_INVALID, 0, 0, FALSE);
            }
         }
      }
   }
}
 800b81a:	b008      	add	sp, #32
 800b81c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b820:	08019f20 	.word	0x08019f20

0800b824 <ndpUpdatePrefixList>:
 * @brief Periodically update Prefix List
 * @param[in] interface Underlying network interface
 **/

void ndpUpdatePrefixList(NetInterface *interface)
{
 800b824:	b570      	push	{r4, r5, r6, lr}
 800b826:	4605      	mov	r5, r0
   uint_t i;
   systime_t time;
   Ipv6PrefixEntry *entry;

   //Get current time
   time = osGetSystemTime();
 800b828:	f7f4 ffe8 	bl	80007fc <osGetSystemTime>
 800b82c:	4606      	mov	r6, r0

   //Go through the Prefix List
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800b82e:	2400      	movs	r4, #0
 800b830:	e000      	b.n	800b834 <ndpUpdatePrefixList+0x10>
 800b832:	3401      	adds	r4, #1
 800b834:	2c01      	cmp	r4, #1
 800b836:	d81f      	bhi.n	800b878 <ndpUpdatePrefixList+0x54>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.prefixList[i];

      //Check the lifetime value
      if(entry->validLifetime > 0 && entry->validLifetime < INFINITE_DELAY)
 800b838:	232c      	movs	r3, #44	@ 0x2c
 800b83a:	fb03 5304 	mla	r3, r3, r4, r5
 800b83e:	f8d3 3874 	ldr.w	r3, [r3, #2164]	@ 0x874
 800b842:	1e5a      	subs	r2, r3, #1
 800b844:	f112 0f03 	cmn.w	r2, #3
 800b848:	d8f3      	bhi.n	800b832 <ndpUpdatePrefixList+0xe>
      {
         //A node should retain entries in the Prefix List until their
         //lifetimes expire
         if(timeCompare(time, entry->timestamp + entry->validLifetime) >= 0)
 800b84a:	222c      	movs	r2, #44	@ 0x2c
 800b84c:	fb02 5204 	mla	r2, r2, r4, r5
 800b850:	f8d2 2880 	ldr.w	r2, [r2, #2176]	@ 0x880
 800b854:	4413      	add	r3, r2
 800b856:	1af3      	subs	r3, r6, r3
 800b858:	2b00      	cmp	r3, #0
 800b85a:	dbea      	blt.n	800b832 <ndpUpdatePrefixList+0xe>
         {
            //When removing an entry from the Prefix List, there is no need
            //to purge any entries from the Destination or Neighbor Caches
            ipv6RemovePrefix(interface, &entry->prefix, entry->prefixLen);
 800b85c:	232c      	movs	r3, #44	@ 0x2c
 800b85e:	fb04 f303 	mul.w	r3, r4, r3
 800b862:	f503 6105 	add.w	r1, r3, #2128	@ 0x850
 800b866:	4429      	add	r1, r5
 800b868:	442b      	add	r3, r5
 800b86a:	f893 2868 	ldrb.w	r2, [r3, #2152]	@ 0x868
 800b86e:	3108      	adds	r1, #8
 800b870:	4628      	mov	r0, r5
 800b872:	f7fc fb33 	bl	8007edc <ipv6RemovePrefix>
 800b876:	e7dc      	b.n	800b832 <ndpUpdatePrefixList+0xe>
         }
      }
   }
}
 800b878:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b87c <ndpUpdateDefaultRouterList>:
 * @brief Periodically update Default Router List
 * @param[in] interface Underlying network interface
 **/

void ndpUpdateDefaultRouterList(NetInterface *interface)
{
 800b87c:	b570      	push	{r4, r5, r6, lr}
 800b87e:	4604      	mov	r4, r0
   //This flag will be set if any entry has been removed from
   //the Default Router List
   flag = FALSE;

   //Get current time
   time = osGetSystemTime();
 800b880:	f7f4 ffbc 	bl	80007fc <osGetSystemTime>
 800b884:	4605      	mov	r5, r0
   flag = FALSE;
 800b886:	2100      	movs	r1, #0

   //Go through the Default Router List
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800b888:	468c      	mov	ip, r1
 800b88a:	e001      	b.n	800b890 <ndpUpdateDefaultRouterList+0x14>
 800b88c:	f10c 0c01 	add.w	ip, ip, #1
 800b890:	f1bc 0f01 	cmp.w	ip, #1
 800b894:	d820      	bhi.n	800b8d8 <ndpUpdateDefaultRouterList+0x5c>
   {
      //Point to the current entry
      entry = &interface->ipv6Context.routerList[i];

      //Check the lifetime value
      if(entry->lifetime > 0 && entry->lifetime < INFINITE_DELAY)
 800b896:	eb04 134c 	add.w	r3, r4, ip, lsl #5
 800b89a:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 800b89e:	1e5a      	subs	r2, r3, #1
 800b8a0:	f112 0f03 	cmn.w	r2, #3
 800b8a4:	d8f2      	bhi.n	800b88c <ndpUpdateDefaultRouterList+0x10>
      {
         //A node should retain entries in the Default Router List until
         //their lifetimes expire
         if(timeCompare(time, entry->timestamp + entry->lifetime) >= 0)
 800b8a6:	f10c 0246 	add.w	r2, ip, #70	@ 0x46
 800b8aa:	eb04 1242 	add.w	r2, r4, r2, lsl #5
 800b8ae:	68d2      	ldr	r2, [r2, #12]
 800b8b0:	4413      	add	r3, r2
 800b8b2:	1aeb      	subs	r3, r5, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dbe9      	blt.n	800b88c <ndpUpdateDefaultRouterList+0x10>
         {
            //Immediately time-out the entry
            entry->addr = IPV6_UNSPECIFIED_ADDR;
 800b8b8:	eb04 164c 	add.w	r6, r4, ip, lsl #5
 800b8bc:	4b09      	ldr	r3, [pc, #36]	@ (800b8e4 <ndpUpdateDefaultRouterList+0x68>)
 800b8be:	f506 6e0b 	add.w	lr, r6, #2224	@ 0x8b0
 800b8c2:	6818      	ldr	r0, [r3, #0]
 800b8c4:	6859      	ldr	r1, [r3, #4]
 800b8c6:	689a      	ldr	r2, [r3, #8]
 800b8c8:	68db      	ldr	r3, [r3, #12]
 800b8ca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
            entry->lifetime = 0;
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	f8c6 38c0 	str.w	r3, [r6, #2240]	@ 0x8c0

            //Set flag
            flag = TRUE;
 800b8d4:	2101      	movs	r1, #1
 800b8d6:	e7d9      	b.n	800b88c <ndpUpdateDefaultRouterList+0x10>
         }
      }
   }

   //Check whether an entry has been removed from the list
   if(flag)
 800b8d8:	b901      	cbnz	r1, 800b8dc <ndpUpdateDefaultRouterList+0x60>
      //When removing an entry from the Default Router List, any entries
      //in the Destination Cache that go through that router must perform
      //next-hop determination again to select a new default router
      ndpFlushDestCache(interface);
   }
}
 800b8da:	bd70      	pop	{r4, r5, r6, pc}
      ndpFlushDestCache(interface);
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f7ff fe53 	bl	800b588 <ndpFlushDestCache>
}
 800b8e2:	e7fa      	b.n	800b8da <ndpUpdateDefaultRouterList+0x5e>
 800b8e4:	08019f20 	.word	0x08019f20

0800b8e8 <ndpSelectDefaultRouter>:
 * @return Error code
 **/

error_t ndpSelectDefaultRouter(NetInterface *interface,
   const Ipv6Addr *unreachableAddr, Ipv6Addr *addr)
{
 800b8e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8ec:	4680      	mov	r8, r0
 800b8ee:	4617      	mov	r7, r2

   //Initialize index
   i = 0;

   //This parameter is optional...
   if(unreachableAddr != NULL)
 800b8f0:	b111      	cbz	r1, 800b8f8 <ndpSelectDefaultRouter+0x10>
 800b8f2:	460c      	mov	r4, r1
   {
      //Search the Default Router List for the router whose reachability is suspect
      for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800b8f4:	2600      	movs	r6, #0
 800b8f6:	e002      	b.n	800b8fe <ndpSelectDefaultRouter+0x16>
   i = 0;
 800b8f8:	2600      	movs	r6, #0
 800b8fa:	e016      	b.n	800b92a <ndpSelectDefaultRouter+0x42>
      for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800b8fc:	3601      	adds	r6, #1
 800b8fe:	2e01      	cmp	r6, #1
 800b900:	d812      	bhi.n	800b928 <ndpSelectDefaultRouter+0x40>
      {
         //Point to the current entry
         routerEntry = &interface->ipv6Context.routerList[j];

         //Check the lifetime associated with the default router
         if(routerEntry->lifetime)
 800b902:	eb08 1346 	add.w	r3, r8, r6, lsl #5
 800b906:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d0f6      	beq.n	800b8fc <ndpSelectDefaultRouter+0x14>
         {
            //Check the router address against the address whose reachability is suspect
            if(ipv6CompAddr(&routerEntry->addr, unreachableAddr))
 800b90e:	0170      	lsls	r0, r6, #5
 800b910:	f600 00a8 	addw	r0, r0, #2216	@ 0x8a8
 800b914:	4440      	add	r0, r8
 800b916:	2210      	movs	r2, #16
 800b918:	4621      	mov	r1, r4
 800b91a:	3008      	adds	r0, #8
 800b91c:	f009 f988 	bl	8014c30 <memcmp>
 800b920:	2800      	cmp	r0, #0
 800b922:	d1eb      	bne.n	800b8fc <ndpSelectDefaultRouter+0x14>
            {
               //Routers should be selected in a round-robin fashion
               i = j + 1;
 800b924:	3601      	adds	r6, #1
               //We are done
               break;
 800b926:	e000      	b.n	800b92a <ndpSelectDefaultRouter+0x42>
   i = 0;
 800b928:	2600      	movs	r6, #0
      }
   }

   //Routers that are reachable or probably reachable should be preferred
   //over routers whose reachability is unknown or suspect
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800b92a:	2400      	movs	r4, #0
 800b92c:	e000      	b.n	800b930 <ndpSelectDefaultRouter+0x48>
 800b92e:	3401      	adds	r4, #1
 800b930:	2c01      	cmp	r4, #1
 800b932:	d820      	bhi.n	800b976 <ndpSelectDefaultRouter+0x8e>
   {
      //Get current index
      k = (i + j) % IPV6_ROUTER_LIST_SIZE;
 800b934:	1935      	adds	r5, r6, r4
 800b936:	f005 0501 	and.w	r5, r5, #1

      //Point to the corresponding entry
      routerEntry = &interface->ipv6Context.routerList[k];

      //Check the lifetime associated with the default router
      if(routerEntry->lifetime)
 800b93a:	eb08 1345 	add.w	r3, r8, r5, lsl #5
 800b93e:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0f3      	beq.n	800b92e <ndpSelectDefaultRouter+0x46>
      {
         //Search the Neighbor Cache for the router address
         neighborCacheEntry = ndpFindNeighborCacheEntry(interface, &routerEntry->addr);
 800b946:	0169      	lsls	r1, r5, #5
 800b948:	f601 01a8 	addw	r1, r1, #2216	@ 0x8a8
 800b94c:	4441      	add	r1, r8
 800b94e:	3108      	adds	r1, #8
 800b950:	4640      	mov	r0, r8
 800b952:	f7ff fbdd 	bl	800b110 <ndpFindNeighborCacheEntry>

         //Check whether the router is reachable or probably reachable
         if(neighborCacheEntry != NULL)
 800b956:	2800      	cmp	r0, #0
 800b958:	d0e9      	beq.n	800b92e <ndpSelectDefaultRouter+0x46>
         {
            //Any state other than INCOMPLETE?
            if(neighborCacheEntry->state != NDP_STATE_INCOMPLETE)
 800b95a:	7803      	ldrb	r3, [r0, #0]
 800b95c:	2b01      	cmp	r3, #1
 800b95e:	d0e6      	beq.n	800b92e <ndpSelectDefaultRouter+0x46>
            {
               //Return the IPv6 address of the default router
               *addr = routerEntry->addr;
 800b960:	eb08 1445 	add.w	r4, r8, r5, lsl #5
 800b964:	f504 640b 	add.w	r4, r4, #2224	@ 0x8b0
 800b968:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b96a:	6038      	str	r0, [r7, #0]
 800b96c:	6079      	str	r1, [r7, #4]
 800b96e:	60ba      	str	r2, [r7, #8]
 800b970:	60fb      	str	r3, [r7, #12]
               //Successful default router selection
               return NO_ERROR;
 800b972:	2000      	movs	r0, #0
 800b974:	e019      	b.n	800b9aa <ndpSelectDefaultRouter+0xc2>

   //When no routers on the list are known to be reachable or probably
   //reachable, routers should be selected in a round-robin fashion, so
   //that subsequent requests for a default router do not return the
   //same router until all other routers have been selected
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800b976:	2300      	movs	r3, #0
 800b978:	2b01      	cmp	r3, #1
 800b97a:	d814      	bhi.n	800b9a6 <ndpSelectDefaultRouter+0xbe>
   {
      //Get current index
      k = (i + j) % IPV6_ROUTER_LIST_SIZE;
 800b97c:	18f2      	adds	r2, r6, r3
 800b97e:	f002 0201 	and.w	r2, r2, #1

      //Point to the corresponding entry
      routerEntry = &interface->ipv6Context.routerList[k];

      //Check the lifetime associated with the default router
      if(routerEntry->lifetime)
 800b982:	eb08 1142 	add.w	r1, r8, r2, lsl #5
 800b986:	f8d1 18c0 	ldr.w	r1, [r1, #2240]	@ 0x8c0
 800b98a:	b909      	cbnz	r1, 800b990 <ndpSelectDefaultRouter+0xa8>
   for(j = 0; j < IPV6_ROUTER_LIST_SIZE; j++)
 800b98c:	3301      	adds	r3, #1
 800b98e:	e7f3      	b.n	800b978 <ndpSelectDefaultRouter+0x90>
      {
         //Return the IPv6 address of the default router
         *addr = routerEntry->addr;
 800b990:	eb08 1442 	add.w	r4, r8, r2, lsl #5
 800b994:	f504 640b 	add.w	r4, r4, #2224	@ 0x8b0
 800b998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b99a:	6038      	str	r0, [r7, #0]
 800b99c:	6079      	str	r1, [r7, #4]
 800b99e:	60ba      	str	r2, [r7, #8]
 800b9a0:	60fb      	str	r3, [r7, #12]
         //Successful default router selection
         return NO_ERROR;
 800b9a2:	2000      	movs	r0, #0
 800b9a4:	e001      	b.n	800b9aa <ndpSelectDefaultRouter+0xc2>
      }
   }

   //No default router found
   return ERROR_NO_ROUTE;
 800b9a6:	f240 2009 	movw	r0, #521	@ 0x209
}
 800b9aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b9ae <ndpIsFirstHopRouter>:
 * @return TRUE if the address is the first-hop router, else FALSE
 **/

bool_t ndpIsFirstHopRouter(NetInterface *interface,
   const Ipv6Addr *destAddr, const Ipv6Addr *nextHop)
{
 800b9ae:	b570      	push	{r4, r5, r6, lr}
 800b9b0:	4606      	mov	r6, r0
 800b9b2:	4615      	mov	r5, r2

   //Clear flag
   isFirstHopRouter = FALSE;

   //Search the cache for the specified destination address
   destCacheEntry = ndpFindDestCacheEntry(interface, destAddr);
 800b9b4:	f7ff fdd0 	bl	800b558 <ndpFindDestCacheEntry>

   //Any matching entry?
   if(destCacheEntry != NULL)
 800b9b8:	b1e8      	cbz	r0, 800b9f6 <ndpIsFirstHopRouter+0x48>
   {
      //Check if the address is the same as the current first-hop
      //router for the specified destination
      if(ipv6CompAddr(&destCacheEntry->nextHop, nextHop))
 800b9ba:	2210      	movs	r2, #16
 800b9bc:	4629      	mov	r1, r5
 800b9be:	4410      	add	r0, r2
 800b9c0:	f009 f936 	bl	8014c30 <memcmp>
 800b9c4:	b1d8      	cbz	r0, 800b9fe <ndpIsFirstHopRouter+0x50>
   isFirstHopRouter = FALSE;
 800b9c6:	2000      	movs	r0, #0
   }

   //Return TRUE if the address is the same as the current first-hop
   //router for the specified destination
   return isFirstHopRouter;
}
 800b9c8:	bd70      	pop	{r4, r5, r6, pc}
      for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800b9ca:	3401      	adds	r4, #1
 800b9cc:	2c01      	cmp	r4, #1
 800b9ce:	d814      	bhi.n	800b9fa <ndpIsFirstHopRouter+0x4c>
         if(routerEntry->lifetime)
 800b9d0:	eb06 1344 	add.w	r3, r6, r4, lsl #5
 800b9d4:	f8d3 38c0 	ldr.w	r3, [r3, #2240]	@ 0x8c0
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d0f6      	beq.n	800b9ca <ndpIsFirstHopRouter+0x1c>
            if(ipv6CompAddr(&routerEntry->addr, nextHop))
 800b9dc:	0160      	lsls	r0, r4, #5
 800b9de:	f600 00a8 	addw	r0, r0, #2216	@ 0x8a8
 800b9e2:	4430      	add	r0, r6
 800b9e4:	2210      	movs	r2, #16
 800b9e6:	4629      	mov	r1, r5
 800b9e8:	3008      	adds	r0, #8
 800b9ea:	f009 f921 	bl	8014c30 <memcmp>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d1eb      	bne.n	800b9ca <ndpIsFirstHopRouter+0x1c>
               isFirstHopRouter = TRUE;
 800b9f2:	2001      	movs	r0, #1
   return isFirstHopRouter;
 800b9f4:	e7e8      	b.n	800b9c8 <ndpIsFirstHopRouter+0x1a>
      for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800b9f6:	2400      	movs	r4, #0
 800b9f8:	e7e8      	b.n	800b9cc <ndpIsFirstHopRouter+0x1e>
   isFirstHopRouter = FALSE;
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	e7e4      	b.n	800b9c8 <ndpIsFirstHopRouter+0x1a>
         isFirstHopRouter = TRUE;
 800b9fe:	2001      	movs	r0, #1
 800ba00:	e7e2      	b.n	800b9c8 <ndpIsFirstHopRouter+0x1a>

0800ba02 <ndpSelectNextHop>:
 * @return Error code
 **/

error_t ndpSelectNextHop(NetInterface *interface, const Ipv6Addr *destAddr,
   const Ipv6Addr *unreachableNextHop, Ipv6Addr *nextHop, bool_t dontRoute)
{
 800ba02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba04:	460c      	mov	r4, r1
 800ba06:	461d      	mov	r5, r3

   //Initialize status code
   error = NO_ERROR;

   //Destination IPv6 address is a multicast address?
   if(ipv6IsMulticastAddr(destAddr))
 800ba08:	780b      	ldrb	r3, [r1, #0]
 800ba0a:	2bff      	cmp	r3, #255	@ 0xff
 800ba0c:	d109      	bne.n	800ba22 <ndpSelectNextHop+0x20>
   {
      //For multicast packets, the next-hop is always the multicast destination
      //address and is considered to be on-link
      *nextHop = *destAddr;
 800ba0e:	6808      	ldr	r0, [r1, #0]
 800ba10:	6849      	ldr	r1, [r1, #4]
 800ba12:	68a2      	ldr	r2, [r4, #8]
 800ba14:	68e3      	ldr	r3, [r4, #12]
 800ba16:	6028      	str	r0, [r5, #0]
 800ba18:	6069      	str	r1, [r5, #4]
 800ba1a:	60aa      	str	r2, [r5, #8]
 800ba1c:	60eb      	str	r3, [r5, #12]
   error = NO_ERROR;
 800ba1e:	2000      	movs	r0, #0
      }
   }

   //Return status code
   return error;
}
 800ba20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba22:	4607      	mov	r7, r0
 800ba24:	4616      	mov	r6, r2
      if(ipv6IsOnLink(interface, destAddr))
 800ba26:	f7fc fa9b 	bl	8007f60 <ipv6IsOnLink>
 800ba2a:	b148      	cbz	r0, 800ba40 <ndpSelectNextHop+0x3e>
         *nextHop = *destAddr;
 800ba2c:	6820      	ldr	r0, [r4, #0]
 800ba2e:	6861      	ldr	r1, [r4, #4]
 800ba30:	68a2      	ldr	r2, [r4, #8]
 800ba32:	68e3      	ldr	r3, [r4, #12]
 800ba34:	6028      	str	r0, [r5, #0]
 800ba36:	6069      	str	r1, [r5, #4]
 800ba38:	60aa      	str	r2, [r5, #8]
 800ba3a:	60eb      	str	r3, [r5, #12]
   error = NO_ERROR;
 800ba3c:	2000      	movs	r0, #0
 800ba3e:	e7ef      	b.n	800ba20 <ndpSelectNextHop+0x1e>
      else if(dontRoute)
 800ba40:	9b06      	ldr	r3, [sp, #24]
 800ba42:	b14b      	cbz	r3, 800ba58 <ndpSelectNextHop+0x56>
         *nextHop = *destAddr;
 800ba44:	6820      	ldr	r0, [r4, #0]
 800ba46:	6861      	ldr	r1, [r4, #4]
 800ba48:	68a2      	ldr	r2, [r4, #8]
 800ba4a:	68e3      	ldr	r3, [r4, #12]
 800ba4c:	6028      	str	r0, [r5, #0]
 800ba4e:	6069      	str	r1, [r5, #4]
 800ba50:	60aa      	str	r2, [r5, #8]
 800ba52:	60eb      	str	r3, [r5, #12]
   error = NO_ERROR;
 800ba54:	2000      	movs	r0, #0
 800ba56:	e7e3      	b.n	800ba20 <ndpSelectNextHop+0x1e>
         error = ndpSelectDefaultRouter(interface, unreachableNextHop, nextHop);
 800ba58:	462a      	mov	r2, r5
 800ba5a:	4631      	mov	r1, r6
 800ba5c:	4638      	mov	r0, r7
 800ba5e:	f7ff ff43 	bl	800b8e8 <ndpSelectDefaultRouter>
 800ba62:	e7dd      	b.n	800ba20 <ndpSelectNextHop+0x1e>

0800ba64 <ndpUpdateNextHop>:
 * @param[in] interface Underlying network interface
 * @param[in] unreachableNextHop Address of the unreachable next-hop
 **/

void ndpUpdateNextHop(NetInterface *interface, const Ipv6Addr *unreachableNextHop)
{
 800ba64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ba66:	b083      	sub	sp, #12
 800ba68:	4606      	mov	r6, r0
 800ba6a:	460f      	mov	r7, r1
   error_t error;
   uint_t i;
   NdpDestCacheEntry *entry;

   //Go through Destination Cache
   for(i = 0; i < NDP_DEST_CACHE_SIZE; i++)
 800ba6c:	2500      	movs	r5, #0
 800ba6e:	e000      	b.n	800ba72 <ndpUpdateNextHop+0xe>
 800ba70:	3501      	adds	r5, #1
 800ba72:	2d07      	cmp	r5, #7
 800ba74:	d82a      	bhi.n	800bacc <ndpUpdateNextHop+0x68>
   {
      //Point to the current entry
      entry = &interface->ndpContext.destCache[i];

      //Check whether the unreachable IPv6 address is used a first-hop router
      if(ipv6CompAddr(&entry->nextHop, unreachableNextHop))
 800ba76:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800ba7a:	00e4      	lsls	r4, r4, #3
 800ba7c:	f504 647c 	add.w	r4, r4, #4032	@ 0xfc0
 800ba80:	4434      	add	r4, r6
 800ba82:	3404      	adds	r4, #4
 800ba84:	2210      	movs	r2, #16
 800ba86:	4639      	mov	r1, r7
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f009 f8d1 	bl	8014c30 <memcmp>
 800ba8e:	2800      	cmp	r0, #0
 800ba90:	d1ee      	bne.n	800ba70 <ndpUpdateNextHop+0xc>
      {
         //Perform next-hop determination
         error = ndpSelectNextHop(interface, &entry->destAddr, &entry->nextHop,
 800ba92:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 800ba96:	00c9      	lsls	r1, r1, #3
 800ba98:	f501 617b 	add.w	r1, r1, #4016	@ 0xfb0
 800ba9c:	4431      	add	r1, r6
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	4623      	mov	r3, r4
 800baa4:	4622      	mov	r2, r4
 800baa6:	3104      	adds	r1, #4
 800baa8:	4630      	mov	r0, r6
 800baaa:	f7ff ffaa 	bl	800ba02 <ndpSelectNextHop>
            &entry->nextHop, FALSE);

         //Next-hop determination failed?
         if(error)
 800baae:	2800      	cmp	r0, #0
 800bab0:	d0de      	beq.n	800ba70 <ndpUpdateNextHop+0xc>
         {
            //Remove the current entry from the Destination Cache
            entry->destAddr = IPV6_UNSPECIFIED_ADDR;
 800bab2:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 800bab6:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
 800baba:	4b05      	ldr	r3, [pc, #20]	@ (800bad0 <ndpUpdateNextHop+0x6c>)
 800babc:	f604 74b4 	addw	r4, r4, #4020	@ 0xfb4
 800bac0:	6818      	ldr	r0, [r3, #0]
 800bac2:	6859      	ldr	r1, [r3, #4]
 800bac4:	689a      	ldr	r2, [r3, #8]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baca:	e7d1      	b.n	800ba70 <ndpUpdateNextHop+0xc>
         }
      }
   }
}
 800bacc:	b003      	add	sp, #12
 800bace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bad0:	08019f20 	.word	0x08019f20

0800bad4 <ndpAddOption>:
 * @param[in] length Length of the option value
 **/

void ndpAddOption(void *message, size_t *messageLen, uint8_t type,
   const void *value, size_t length)
{
 800bad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bad6:	9e06      	ldr	r6, [sp, #24]
   size_t optionLen;
   size_t paddingLen;
   NdpOption *option;

   //Length of the option in units of 8 bytes including the type and length fields
   optionLen = (length + sizeof(NdpOption) + 7) / 8;
 800bad8:	f106 0409 	add.w	r4, r6, #9

   //Sanity check
   if(optionLen <= UINT8_MAX)
 800badc:	f5b4 6f00 	cmp.w	r4, #2048	@ 0x800
 800bae0:	d300      	bcc.n	800bae4 <ndpAddOption+0x10>
      }

      //Adjust the length of the NDP message
      *messageLen += optionLen * 8;
   }
}
 800bae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bae4:	460d      	mov	r5, r1
 800bae6:	08e7      	lsrs	r7, r4, #3
      option = (NdpOption *) ((uint8_t *) message + *messageLen);
 800bae8:	f8d1 c000 	ldr.w	ip, [r1]
 800baec:	eb00 010c 	add.w	r1, r0, ip
      option->type = type;
 800baf0:	f800 200c 	strb.w	r2, [r0, ip]
      option->length = (uint8_t) optionLen;
 800baf4:	704f      	strb	r7, [r1, #1]
      osMemcpy(option->value, value, length);
 800baf6:	1c8f      	adds	r7, r1, #2
 800baf8:	4632      	mov	r2, r6
 800bafa:	4619      	mov	r1, r3
 800bafc:	4638      	mov	r0, r7
 800bafe:	f009 f9cd 	bl	8014e9c <memcpy>
      if((length + sizeof(NdpOption)) < (optionLen * 8))
 800bb02:	1cb3      	adds	r3, r6, #2
 800bb04:	f024 0407 	bic.w	r4, r4, #7
 800bb08:	42a3      	cmp	r3, r4
 800bb0a:	d303      	bcc.n	800bb14 <ndpAddOption+0x40>
      *messageLen += optionLen * 8;
 800bb0c:	682b      	ldr	r3, [r5, #0]
 800bb0e:	441c      	add	r4, r3
 800bb10:	602c      	str	r4, [r5, #0]
}
 800bb12:	e7e6      	b.n	800bae2 <ndpAddOption+0xe>
         paddingLen = (optionLen * 8) - length - sizeof(NdpOption);
 800bb14:	1ba2      	subs	r2, r4, r6
         osMemset(option->value + length, 0, paddingLen);
 800bb16:	3a02      	subs	r2, #2
 800bb18:	2100      	movs	r1, #0
 800bb1a:	19b8      	adds	r0, r7, r6
 800bb1c:	f009 f8b2 	bl	8014c84 <memset>
 800bb20:	e7f4      	b.n	800bb0c <ndpAddOption+0x38>

0800bb22 <ndpGetOption>:
 * @return If the specified option is found, a pointer to the corresponding
 *   option is returned. Otherwise NULL pointer is returned
 **/

void *ndpGetOption(uint8_t *options, size_t length, uint8_t type)
{
 800bb22:	b410      	push	{r4}
 800bb24:	4684      	mov	ip, r0
   size_t i;
   NdpOption *option;

   //Point to the very first option of the NDP message
   i = 0;
 800bb26:	2300      	movs	r3, #0

   //Parse options
   while((i + sizeof(NdpOption)) <= length)
 800bb28:	1c9c      	adds	r4, r3, #2
 800bb2a:	428c      	cmp	r4, r1
 800bb2c:	d80d      	bhi.n	800bb4a <ndpGetOption+0x28>
   {
      //Point to the current option
      option = (NdpOption *) (options + i);
 800bb2e:	eb0c 0003 	add.w	r0, ip, r3

      //Nodes must silently discard an NDP message that contains an option
      //with length zero
      if(option->length == 0)
 800bb32:	7844      	ldrb	r4, [r0, #1]
 800bb34:	b16c      	cbz	r4, 800bb52 <ndpGetOption+0x30>
         break;

      //Check option length
      if((i + option->length * 8) > length)
 800bb36:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb3a:	428b      	cmp	r3, r1
 800bb3c:	d80b      	bhi.n	800bb56 <ndpGetOption+0x34>
         break;

      //Check whether the option type matches the specified value
      if(option->type == type || type == NDP_OPT_ANY)
 800bb3e:	7804      	ldrb	r4, [r0, #0]
 800bb40:	4294      	cmp	r4, r2
 800bb42:	d003      	beq.n	800bb4c <ndpGetOption+0x2a>
 800bb44:	2aff      	cmp	r2, #255	@ 0xff
 800bb46:	d1ef      	bne.n	800bb28 <ndpGetOption+0x6>
 800bb48:	e000      	b.n	800bb4c <ndpGetOption+0x2a>
      //Jump to the next option
      i += option->length * 8;
   }

   //The specified option type was not found
   return NULL;
 800bb4a:	2000      	movs	r0, #0
}
 800bb4c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb50:	4770      	bx	lr
   return NULL;
 800bb52:	2000      	movs	r0, #0
 800bb54:	e7fa      	b.n	800bb4c <ndpGetOption+0x2a>
 800bb56:	2000      	movs	r0, #0
 800bb58:	e7f8      	b.n	800bb4c <ndpGetOption+0x2a>

0800bb5a <ndpCheckOptions>:
{
   size_t i;
   NdpOption *option;

   //Point to the very first option of the NDP message
   i = 0;
 800bb5a:	2300      	movs	r3, #0

   //Parse options
   while((i + sizeof(NdpOption)) <= length)
 800bb5c:	e001      	b.n	800bb62 <ndpCheckOptions+0x8>
      //an option with length zero
      if(option->length == 0)
         return ERROR_INVALID_OPTION;

      //Jump to the next option
      i += option->length * 8;
 800bb5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   while((i + sizeof(NdpOption)) <= length)
 800bb62:	1c9a      	adds	r2, r3, #2
 800bb64:	428a      	cmp	r2, r1
 800bb66:	d805      	bhi.n	800bb74 <ndpCheckOptions+0x1a>
      option = (NdpOption *) (options + i);
 800bb68:	18c2      	adds	r2, r0, r3
      if(option->length == 0)
 800bb6a:	7852      	ldrb	r2, [r2, #1]
 800bb6c:	2a00      	cmp	r2, #0
 800bb6e:	d1f6      	bne.n	800bb5e <ndpCheckOptions+0x4>
         return ERROR_INVALID_OPTION;
 800bb70:	20df      	movs	r0, #223	@ 0xdf
   }

   //The Options field is valid
   return NO_ERROR;
}
 800bb72:	4770      	bx	lr
   return NO_ERROR;
 800bb74:	2000      	movs	r0, #0
 800bb76:	4770      	bx	lr

0800bb78 <netTaskEx>:
 * @brief TCP/IP events handling
 * @param[in] context Pointer to the TCP/IP stack context
 **/

void netTaskEx(NetContext *context)
{
 800bb78:	b570      	push	{r4, r5, r6, lr}
#if (NET_RTOS_SUPPORT == ENABLED)
   //Task prologue
   osEnterTask();

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800bb7a:	4c57      	ldr	r4, [pc, #348]	@ (800bcd8 <netTaskEx+0x160>)
 800bb7c:	4620      	mov	r0, r4
 800bb7e:	f7f4 fe2e 	bl	80007de <osAcquireMutex>

   //The TCP/IP process is now running
   netTaskRunning = TRUE;
 800bb82:	2301      	movs	r3, #1
 800bb84:	60a3      	str	r3, [r4, #8]

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bb86:	2400      	movs	r4, #0
 800bb88:	b314      	cbz	r4, 800bbd0 <netTaskEx+0x58>
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800bb8a:	4853      	ldr	r0, [pc, #332]	@ (800bcd8 <netTaskEx+0x160>)
 800bb8c:	f7f4 fe2e 	bl	80007ec <osReleaseMutex>
   //Main loop
   while(1)
   {
#endif
      //Get current time
      time = osGetSystemTime();
 800bb90:	f7f4 fe34 	bl	80007fc <osGetSystemTime>

      //Compute the maximum blocking time when waiting for an event
      if(timeCompare(time, netTimestamp) < 0)
 800bb94:	4b50      	ldr	r3, [pc, #320]	@ (800bcd8 <netTaskEx+0x160>)
 800bb96:	69d9      	ldr	r1, [r3, #28]
 800bb98:	1a43      	subs	r3, r0, r1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	db30      	blt.n	800bc00 <netTaskEx+0x88>
      {
         timeout = netTimestamp - time;
      }
      else
      {
         timeout = 0;
 800bb9e:	2100      	movs	r1, #0
      }

      //Receive notifications when a frame has been received, or the
      //link state of any network interfaces has changed
      status = osWaitForEvent(&netEvent, timeout);
 800bba0:	484e      	ldr	r0, [pc, #312]	@ (800bcdc <netTaskEx+0x164>)
 800bba2:	f7f4 fdf9 	bl	8000798 <osWaitForEvent>

      //Check whether the specified event is in signaled state
      if(status)
 800bba6:	bb68      	cbnz	r0, 800bc04 <netTaskEx+0x8c>
         //Release exclusive access
         osReleaseMutex(&netMutex);
      }

      //Get current time
      time = osGetSystemTime();
 800bba8:	f7f4 fe28 	bl	80007fc <osGetSystemTime>
 800bbac:	4604      	mov	r4, r0

      //Check current time
      if(timeCompare(time, netTimestamp) >= 0)
 800bbae:	4b4a      	ldr	r3, [pc, #296]	@ (800bcd8 <netTaskEx+0x160>)
 800bbb0:	69db      	ldr	r3, [r3, #28]
 800bbb2:	1ac3      	subs	r3, r0, r3
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	dbeb      	blt.n	800bb90 <netTaskEx+0x18>
      {
         //Get exclusive access
         osAcquireMutex(&netMutex);
 800bbb8:	4d47      	ldr	r5, [pc, #284]	@ (800bcd8 <netTaskEx+0x160>)
 800bbba:	4628      	mov	r0, r5
 800bbbc:	f7f4 fe0f 	bl	80007de <osAcquireMutex>
         //Handle periodic operations
         netTick();
 800bbc0:	f000 fd24 	bl	800c60c <netTick>
         //Release exclusive access
         osReleaseMutex(&netMutex);
 800bbc4:	4628      	mov	r0, r5
 800bbc6:	f7f4 fe11 	bl	80007ec <osReleaseMutex>

         //Next event
         netTimestamp = time + NET_TICK_INTERVAL;
 800bbca:	3464      	adds	r4, #100	@ 0x64
 800bbcc:	61ec      	str	r4, [r5, #28]
 800bbce:	e7df      	b.n	800bb90 <netTaskEx+0x18>
      interface = &netInterface[i];
 800bbd0:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bbd4:	fb04 f202 	mul.w	r2, r4, r2
 800bbd8:	f102 0158 	add.w	r1, r2, #88	@ 0x58
 800bbdc:	4b3e      	ldr	r3, [pc, #248]	@ (800bcd8 <netTaskEx+0x160>)
 800bbde:	18c8      	adds	r0, r1, r3
      if(interface->configured)
 800bbe0:	4413      	add	r3, r2
 800bbe2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800bbe6:	b14b      	cbz	r3, 800bbfc <netTaskEx+0x84>
         if(interface->nicDriver != NULL)
 800bbe8:	4b3b      	ldr	r3, [pc, #236]	@ (800bcd8 <netTaskEx+0x160>)
 800bbea:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bbee:	fb02 3304 	mla	r3, r2, r4, r3
 800bbf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bbf6:	b10b      	cbz	r3, 800bbfc <netTaskEx+0x84>
            interface->nicDriver->enableIrq(interface);
 800bbf8:	691b      	ldr	r3, [r3, #16]
 800bbfa:	4798      	blx	r3
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bbfc:	3401      	adds	r4, #1
 800bbfe:	e7c3      	b.n	800bb88 <netTaskEx+0x10>
         timeout = netTimestamp - time;
 800bc00:	1a09      	subs	r1, r1, r0
 800bc02:	e7cd      	b.n	800bba0 <netTaskEx+0x28>
         osAcquireMutex(&netMutex);
 800bc04:	4834      	ldr	r0, [pc, #208]	@ (800bcd8 <netTaskEx+0x160>)
 800bc06:	f7f4 fdea 	bl	80007de <osAcquireMutex>
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bc0a:	2400      	movs	r4, #0
 800bc0c:	b11c      	cbz	r4, 800bc16 <netTaskEx+0x9e>
         osReleaseMutex(&netMutex);
 800bc0e:	4832      	ldr	r0, [pc, #200]	@ (800bcd8 <netTaskEx+0x160>)
 800bc10:	f7f4 fdec 	bl	80007ec <osReleaseMutex>
 800bc14:	e7c8      	b.n	800bba8 <netTaskEx+0x30>
            interface = &netInterface[i];
 800bc16:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bc1a:	fb04 f202 	mul.w	r2, r4, r2
 800bc1e:	f102 0558 	add.w	r5, r2, #88	@ 0x58
 800bc22:	4b2d      	ldr	r3, [pc, #180]	@ (800bcd8 <netTaskEx+0x160>)
 800bc24:	441d      	add	r5, r3
            if(interface->nicEvent)
 800bc26:	4413      	add	r3, r2
 800bc28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800bc2c:	b1e3      	cbz	r3, 800bc68 <netTaskEx+0xf0>
               interface->nicEvent = FALSE;
 800bc2e:	4b2a      	ldr	r3, [pc, #168]	@ (800bcd8 <netTaskEx+0x160>)
 800bc30:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bc34:	fb02 3304 	mla	r3, r2, r4, r3
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
               if(interface->nicDriver != NULL)
 800bc3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc42:	b18b      	cbz	r3, 800bc68 <netTaskEx+0xf0>
                  interface->nicDriver->disableIrq(interface);
 800bc44:	695b      	ldr	r3, [r3, #20]
 800bc46:	4628      	mov	r0, r5
 800bc48:	4798      	blx	r3
                  interface->nicDriver->eventHandler(interface);
 800bc4a:	4e23      	ldr	r6, [pc, #140]	@ (800bcd8 <netTaskEx+0x160>)
 800bc4c:	f241 23a4 	movw	r3, #4772	@ 0x12a4
 800bc50:	fb03 6604 	mla	r6, r3, r4, r6
 800bc54:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800bc58:	699b      	ldr	r3, [r3, #24]
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	4798      	blx	r3
                  interface->nicDriver->enableIrq(interface);
 800bc5e:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 800bc62:	691b      	ldr	r3, [r3, #16]
 800bc64:	4628      	mov	r0, r5
 800bc66:	4798      	blx	r3
            if(interface->phyEvent)
 800bc68:	4b1b      	ldr	r3, [pc, #108]	@ (800bcd8 <netTaskEx+0x160>)
 800bc6a:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bc6e:	fb02 3304 	mla	r3, r2, r4, r3
 800bc72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800bc76:	b303      	cbz	r3, 800bcba <netTaskEx+0x142>
               interface->phyEvent = FALSE;
 800bc78:	4b17      	ldr	r3, [pc, #92]	@ (800bcd8 <netTaskEx+0x160>)
 800bc7a:	fb02 3304 	mla	r3, r2, r4, r3
 800bc7e:	2200      	movs	r2, #0
 800bc80:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
               if(interface->nicDriver != NULL)
 800bc84:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bc88:	b1bb      	cbz	r3, 800bcba <netTaskEx+0x142>
                  interface->nicDriver->disableIrq(interface);
 800bc8a:	695b      	ldr	r3, [r3, #20]
 800bc8c:	4628      	mov	r0, r5
 800bc8e:	4798      	blx	r3
                  if(interface->phyDriver != NULL)
 800bc90:	4b11      	ldr	r3, [pc, #68]	@ (800bcd8 <netTaskEx+0x160>)
 800bc92:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bc96:	fb02 3304 	mla	r3, r2, r4, r3
 800bc9a:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800bc9e:	b173      	cbz	r3, 800bcbe <netTaskEx+0x146>
                     interface->phyDriver->eventHandler(interface);
 800bca0:	691b      	ldr	r3, [r3, #16]
 800bca2:	4628      	mov	r0, r5
 800bca4:	4798      	blx	r3
                  interface->nicDriver->enableIrq(interface);
 800bca6:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd8 <netTaskEx+0x160>)
 800bca8:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bcac:	fb02 3304 	mla	r3, r2, r4, r3
 800bcb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	4628      	mov	r0, r5
 800bcb8:	4798      	blx	r3
         for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bcba:	3401      	adds	r4, #1
 800bcbc:	e7a6      	b.n	800bc0c <netTaskEx+0x94>
                  else if(interface->switchDriver != NULL)
 800bcbe:	4b06      	ldr	r3, [pc, #24]	@ (800bcd8 <netTaskEx+0x160>)
 800bcc0:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bcc4:	fb02 3304 	mla	r3, r2, r4, r3
 800bcc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d0ea      	beq.n	800bca6 <netTaskEx+0x12e>
                     interface->switchDriver->eventHandler(interface);
 800bcd0:	691b      	ldr	r3, [r3, #16]
 800bcd2:	4628      	mov	r0, r5
 800bcd4:	4798      	blx	r3
 800bcd6:	e7e6      	b.n	800bca6 <netTaskEx+0x12e>
 800bcd8:	20000b50 	.word	0x20000b50
 800bcdc:	20000b54 	.word	0x20000b54

0800bce0 <netGetDefaultSettings>:
{
 800bce0:	4603      	mov	r3, r0
   settings->task = OS_TASK_DEFAULT_PARAMS;
 800bce2:	4a05      	ldr	r2, [pc, #20]	@ (800bcf8 <netGetDefaultSettings+0x18>)
 800bce4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bce8:	e883 0003 	stmia.w	r3, {r0, r1}
   settings->task.stackSize = NET_TASK_STACK_SIZE;
 800bcec:	f240 228a 	movw	r2, #650	@ 0x28a
 800bcf0:	601a      	str	r2, [r3, #0]
   settings->task.priority = NET_TASK_PRIORITY;
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	605a      	str	r2, [r3, #4]
}
 800bcf6:	4770      	bx	lr
 800bcf8:	08019e68 	.word	0x08019e68

0800bcfc <netInitEx>:
{
 800bcfc:	b570      	push	{r4, r5, r6, lr}
 800bcfe:	4604      	mov	r4, r0
 800bd00:	460d      	mov	r5, r1
   osMemset(context, 0, sizeof(NetContext));
 800bd02:	f241 32a4 	movw	r2, #5028	@ 0x13a4
 800bd06:	2100      	movs	r1, #0
 800bd08:	f008 ffbc 	bl	8014c84 <memset>
   context->taskParams = settings->task;
 800bd0c:	f104 030c 	add.w	r3, r4, #12
 800bd10:	e895 0003 	ldmia.w	r5, {r0, r1}
 800bd14:	e883 0003 	stmia.w	r3, {r0, r1}
   netTaskRunning = FALSE;
 800bd18:	4c2f      	ldr	r4, [pc, #188]	@ (800bdd8 <netInitEx+0xdc>)
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	60a3      	str	r3, [r4, #8]
   netTimestamp = osGetSystemTime();
 800bd1e:	f7f4 fd6d 	bl	80007fc <osGetSystemTime>
 800bd22:	61e0      	str	r0, [r4, #28]
   if(!osCreateMutex(&netMutex))
 800bd24:	4620      	mov	r0, r4
 800bd26:	f7f4 fd4f 	bl	80007c8 <osCreateMutex>
 800bd2a:	2800      	cmp	r0, #0
 800bd2c:	d04f      	beq.n	800bdce <netInitEx+0xd2>
   if(!osCreateEvent(&netEvent))
 800bd2e:	1d20      	adds	r0, r4, #4
 800bd30:	f7f4 fd10 	bl	8000754 <osCreateEvent>
 800bd34:	2800      	cmp	r0, #0
 800bd36:	d04c      	beq.n	800bdd2 <netInitEx+0xd6>
   error = memPoolInit();
 800bd38:	f000 f980 	bl	800c03c <memPoolInit>
   if(error)
 800bd3c:	2800      	cmp	r0, #0
 800bd3e:	d147      	bne.n	800bdd0 <netInitEx+0xd4>
   osMemset(netInterface, 0, sizeof(netInterface));
 800bd40:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800bd44:	2100      	movs	r1, #0
 800bd46:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bd4a:	f008 ff9b 	bl	8014c84 <memset>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bd4e:	2400      	movs	r4, #0
 800bd50:	2c00      	cmp	r4, #0
 800bd52:	d024      	beq.n	800bd9e <netInitEx+0xa2>
   error = socketInit();
 800bd54:	f001 faba 	bl	800d2cc <socketInit>
   if(error)
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d139      	bne.n	800bdd0 <netInitEx+0xd4>
   error = udpInit();
 800bd5c:	f004 fd3c 	bl	80107d8 <udpInit>
   if(error)
 800bd60:	2800      	cmp	r0, #0
 800bd62:	d135      	bne.n	800bdd0 <netInitEx+0xd4>
   error = tcpInit();
 800bd64:	f002 f982 	bl	800e06c <tcpInit>
   if(error)
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d131      	bne.n	800bdd0 <netInitEx+0xd4>
   error = dnsInit();
 800bd6c:	f7f6 fb04 	bl	8002378 <dnsInit>
   if(error)
 800bd70:	2800      	cmp	r0, #0
 800bd72:	d12d      	bne.n	800bdd0 <netInitEx+0xd4>
   nicTickCounter = 0;
 800bd74:	4a19      	ldr	r2, [pc, #100]	@ (800bddc <netInitEx+0xe0>)
 800bd76:	6010      	str	r0, [r2, #0]
   arpTickCounter = 0;
 800bd78:	4a19      	ldr	r2, [pc, #100]	@ (800bde0 <netInitEx+0xe4>)
 800bd7a:	6010      	str	r0, [r2, #0]
   ipv4FragTickCounter = 0;
 800bd7c:	4a19      	ldr	r2, [pc, #100]	@ (800bde4 <netInitEx+0xe8>)
 800bd7e:	6010      	str	r0, [r2, #0]
   igmpTickCounter = 0;
 800bd80:	4a19      	ldr	r2, [pc, #100]	@ (800bde8 <netInitEx+0xec>)
 800bd82:	6010      	str	r0, [r2, #0]
   dhcpClientTickCounter = 0;
 800bd84:	4a19      	ldr	r2, [pc, #100]	@ (800bdec <netInitEx+0xf0>)
 800bd86:	6010      	str	r0, [r2, #0]
   ipv6FragTickCounter = 0;
 800bd88:	4a19      	ldr	r2, [pc, #100]	@ (800bdf0 <netInitEx+0xf4>)
 800bd8a:	6010      	str	r0, [r2, #0]
   mldTickCounter = 0;
 800bd8c:	4a19      	ldr	r2, [pc, #100]	@ (800bdf4 <netInitEx+0xf8>)
 800bd8e:	6010      	str	r0, [r2, #0]
   ndpTickCounter = 0;
 800bd90:	4a19      	ldr	r2, [pc, #100]	@ (800bdf8 <netInitEx+0xfc>)
 800bd92:	6010      	str	r0, [r2, #0]
   tcpTickCounter = 0;
 800bd94:	4a19      	ldr	r2, [pc, #100]	@ (800bdfc <netInitEx+0x100>)
 800bd96:	6010      	str	r0, [r2, #0]
   dnsTickCounter = 0;
 800bd98:	4a19      	ldr	r2, [pc, #100]	@ (800be00 <netInitEx+0x104>)
 800bd9a:	6010      	str	r0, [r2, #0]
   return NO_ERROR;
 800bd9c:	e018      	b.n	800bdd0 <netInitEx+0xd4>
      osSprintf(interface->name, "eth%u", i);
 800bd9e:	f241 26a4 	movw	r6, #4772	@ 0x12a4
 800bda2:	fb04 f606 	mul.w	r6, r4, r6
 800bda6:	f106 0068 	add.w	r0, r6, #104	@ 0x68
 800bdaa:	4d0b      	ldr	r5, [pc, #44]	@ (800bdd8 <netInitEx+0xdc>)
 800bdac:	4622      	mov	r2, r4
 800bdae:	4915      	ldr	r1, [pc, #84]	@ (800be04 <netInitEx+0x108>)
 800bdb0:	4428      	add	r0, r5
 800bdb2:	f008 fe81 	bl	8014ab8 <sprintf>
      interface->index = i;
 800bdb6:	19ab      	adds	r3, r5, r6
 800bdb8:	659c      	str	r4, [r3, #88]	@ 0x58
      interface->id = i;
 800bdba:	65dc      	str	r4, [r3, #92]	@ 0x5c
      interface->phyAddr = UINT8_MAX;
 800bdbc:	22ff      	movs	r2, #255	@ 0xff
 800bdbe:	f883 20d0 	strb.w	r2, [r3, #208]	@ 0xd0
      interface->initialRto = TCP_INITIAL_RTO;
 800bdc2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800bdc6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800bdca:	3401      	adds	r4, #1
 800bdcc:	e7c0      	b.n	800bd50 <netInitEx+0x54>
      return ERROR_OUT_OF_RESOURCES;
 800bdce:	2065      	movs	r0, #101	@ 0x65
}
 800bdd0:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_OUT_OF_RESOURCES;
 800bdd2:	2065      	movs	r0, #101	@ 0x65
 800bdd4:	e7fc      	b.n	800bdd0 <netInitEx+0xd4>
 800bdd6:	bf00      	nop
 800bdd8:	20000b50 	.word	0x20000b50
 800bddc:	20001ef4 	.word	0x20001ef4
 800bde0:	20000754 	.word	0x20000754
 800bde4:	20000b18 	.word	0x20000b18
 800bde8:	20000b00 	.word	0x20000b00
 800bdec:	20000758 	.word	0x20000758
 800bdf0:	20000b44 	.word	0x20000b44
 800bdf4:	20000b48 	.word	0x20000b48
 800bdf8:	20000b4c 	.word	0x20000b4c
 800bdfc:	20003768 	.word	0x20003768
 800be00:	20000afc 	.word	0x20000afc
 800be04:	0801a4c0 	.word	0x0801a4c0

0800be08 <netStart>:
{
 800be08:	b510      	push	{r4, lr}
 800be0a:	4604      	mov	r4, r0
   context->taskId = osCreateTask("TCP/IP", (OsTaskCode) netTaskEx, context,
 800be0c:	f100 030c 	add.w	r3, r0, #12
 800be10:	4602      	mov	r2, r0
 800be12:	4905      	ldr	r1, [pc, #20]	@ (800be28 <netStart+0x20>)
 800be14:	4805      	ldr	r0, [pc, #20]	@ (800be2c <netStart+0x24>)
 800be16:	f7f4 fc72 	bl	80006fe <osCreateTask>
 800be1a:	6160      	str	r0, [r4, #20]
   if(context->taskId == OS_INVALID_TASK_ID)
 800be1c:	b108      	cbz	r0, 800be22 <netStart+0x1a>
   return NO_ERROR;
 800be1e:	2000      	movs	r0, #0
}
 800be20:	bd10      	pop	{r4, pc}
      return ERROR_OUT_OF_RESOURCES;
 800be22:	2065      	movs	r0, #101	@ 0x65
 800be24:	e7fc      	b.n	800be20 <netStart+0x18>
 800be26:	bf00      	nop
 800be28:	0800bb79 	.word	0x0800bb79
 800be2c:	0801a4c8 	.word	0x0801a4c8

0800be30 <netInit>:
{
 800be30:	b500      	push	{lr}
 800be32:	b083      	sub	sp, #12
   netGetDefaultSettings(&netSettings);
 800be34:	4668      	mov	r0, sp
 800be36:	f7ff ff53 	bl	800bce0 <netGetDefaultSettings>
   error = netInitEx(&netContext, &netSettings);
 800be3a:	4669      	mov	r1, sp
 800be3c:	4805      	ldr	r0, [pc, #20]	@ (800be54 <netInit+0x24>)
 800be3e:	f7ff ff5d 	bl	800bcfc <netInitEx>
   if(!error)
 800be42:	b110      	cbz	r0, 800be4a <netInit+0x1a>
}
 800be44:	b003      	add	sp, #12
 800be46:	f85d fb04 	ldr.w	pc, [sp], #4
      error = netStart(&netContext);
 800be4a:	4802      	ldr	r0, [pc, #8]	@ (800be54 <netInit+0x24>)
 800be4c:	f7ff ffdc 	bl	800be08 <netStart>
 800be50:	e7f8      	b.n	800be44 <netInit+0x14>
 800be52:	bf00      	nop
 800be54:	20000b50 	.word	0x20000b50

0800be58 <netGetDefaultInterface>:
}
 800be58:	4800      	ldr	r0, [pc, #0]	@ (800be5c <netGetDefaultInterface+0x4>)
 800be5a:	4770      	bx	lr
 800be5c:	20000ba8 	.word	0x20000ba8

0800be60 <netSetMacAddr>:
   if(interface == NULL || macAddr == NULL)
 800be60:	2900      	cmp	r1, #0
 800be62:	bf18      	it	ne
 800be64:	2800      	cmpne	r0, #0
 800be66:	d016      	beq.n	800be96 <netSetMacAddr+0x36>
{
 800be68:	b570      	push	{r4, r5, r6, lr}
 800be6a:	4605      	mov	r5, r0
 800be6c:	460c      	mov	r4, r1
   osAcquireMutex(&netMutex);
 800be6e:	4e0b      	ldr	r6, [pc, #44]	@ (800be9c <netSetMacAddr+0x3c>)
 800be70:	4630      	mov	r0, r6
 800be72:	f7f4 fcb4 	bl	80007de <osAcquireMutex>
   interface->macAddr = *macAddr;
 800be76:	6820      	ldr	r0, [r4, #0]
 800be78:	f8c5 0088 	str.w	r0, [r5, #136]	@ 0x88
 800be7c:	88a3      	ldrh	r3, [r4, #4]
 800be7e:	f8a5 308c 	strh.w	r3, [r5, #140]	@ 0x8c
   macAddrToEui64(macAddr, &interface->eui64);
 800be82:	f105 0108 	add.w	r1, r5, #8
 800be86:	4620      	mov	r0, r4
 800be88:	f7f7 f958 	bl	800313c <macAddrToEui64>
   osReleaseMutex(&netMutex);
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7f4 fcad 	bl	80007ec <osReleaseMutex>
   return NO_ERROR;
 800be92:	2000      	movs	r0, #0
}
 800be94:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800be96:	2002      	movs	r0, #2
}
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	20000b50 	.word	0x20000b50

0800bea0 <netSetInterfaceName>:
   if(interface == NULL || name == NULL)
 800bea0:	2900      	cmp	r1, #0
 800bea2:	bf18      	it	ne
 800bea4:	2800      	cmpne	r0, #0
 800bea6:	d015      	beq.n	800bed4 <netSetInterfaceName+0x34>
{
 800bea8:	b570      	push	{r4, r5, r6, lr}
 800beaa:	4606      	mov	r6, r0
 800beac:	460c      	mov	r4, r1
   if(osStrlen(name) > NET_MAX_IF_NAME_LEN)
 800beae:	4608      	mov	r0, r1
 800beb0:	f7f4 fa16 	bl	80002e0 <strlen>
 800beb4:	2808      	cmp	r0, #8
 800beb6:	d80f      	bhi.n	800bed8 <netSetInterfaceName+0x38>
   osAcquireMutex(&netMutex);
 800beb8:	4d08      	ldr	r5, [pc, #32]	@ (800bedc <netSetInterfaceName+0x3c>)
 800beba:	4628      	mov	r0, r5
 800bebc:	f7f4 fc8f 	bl	80007de <osAcquireMutex>
   osStrcpy(interface->name, name);
 800bec0:	4621      	mov	r1, r4
 800bec2:	f106 0010 	add.w	r0, r6, #16
 800bec6:	f008 ffe1 	bl	8014e8c <strcpy>
   osReleaseMutex(&netMutex);
 800beca:	4628      	mov	r0, r5
 800becc:	f7f4 fc8e 	bl	80007ec <osReleaseMutex>
   return NO_ERROR;
 800bed0:	2000      	movs	r0, #0
}
 800bed2:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800bed4:	2002      	movs	r0, #2
}
 800bed6:	4770      	bx	lr
      return ERROR_INVALID_LENGTH;
 800bed8:	20ec      	movs	r0, #236	@ 0xec
 800beda:	e7fa      	b.n	800bed2 <netSetInterfaceName+0x32>
 800bedc:	20000b50 	.word	0x20000b50

0800bee0 <netSetHostname>:
   if(interface == NULL || name == NULL)
 800bee0:	2900      	cmp	r1, #0
 800bee2:	bf18      	it	ne
 800bee4:	2800      	cmpne	r0, #0
 800bee6:	d015      	beq.n	800bf14 <netSetHostname+0x34>
{
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	4606      	mov	r6, r0
 800beec:	460c      	mov	r4, r1
   if(osStrlen(name) > NET_MAX_HOSTNAME_LEN)
 800beee:	4608      	mov	r0, r1
 800bef0:	f7f4 f9f6 	bl	80002e0 <strlen>
 800bef4:	2818      	cmp	r0, #24
 800bef6:	d80f      	bhi.n	800bf18 <netSetHostname+0x38>
   osAcquireMutex(&netMutex);
 800bef8:	4d08      	ldr	r5, [pc, #32]	@ (800bf1c <netSetHostname+0x3c>)
 800befa:	4628      	mov	r0, r5
 800befc:	f7f4 fc6f 	bl	80007de <osAcquireMutex>
   osStrcpy(interface->hostname, name);
 800bf00:	4621      	mov	r1, r4
 800bf02:	f106 0019 	add.w	r0, r6, #25
 800bf06:	f008 ffc1 	bl	8014e8c <strcpy>
   osReleaseMutex(&netMutex);
 800bf0a:	4628      	mov	r0, r5
 800bf0c:	f7f4 fc6e 	bl	80007ec <osReleaseMutex>
   return NO_ERROR;
 800bf10:	2000      	movs	r0, #0
}
 800bf12:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800bf14:	2002      	movs	r0, #2
}
 800bf16:	4770      	bx	lr
      return ERROR_INVALID_LENGTH;
 800bf18:	20ec      	movs	r0, #236	@ 0xec
 800bf1a:	e7fa      	b.n	800bf12 <netSetHostname+0x32>
 800bf1c:	20000b50 	.word	0x20000b50

0800bf20 <netSetDriver>:
   if(interface == NULL || driver == NULL)
 800bf20:	2900      	cmp	r1, #0
 800bf22:	bf18      	it	ne
 800bf24:	2800      	cmpne	r0, #0
 800bf26:	d00c      	beq.n	800bf42 <netSetDriver+0x22>
{
 800bf28:	b570      	push	{r4, r5, r6, lr}
 800bf2a:	4605      	mov	r5, r0
 800bf2c:	460e      	mov	r6, r1
   osAcquireMutex(&netMutex);
 800bf2e:	4c06      	ldr	r4, [pc, #24]	@ (800bf48 <netSetDriver+0x28>)
 800bf30:	4620      	mov	r0, r4
 800bf32:	f7f4 fc54 	bl	80007de <osAcquireMutex>
   interface->nicDriver = driver;
 800bf36:	636e      	str	r6, [r5, #52]	@ 0x34
   osReleaseMutex(&netMutex);
 800bf38:	4620      	mov	r0, r4
 800bf3a:	f7f4 fc57 	bl	80007ec <osReleaseMutex>
   return NO_ERROR;
 800bf3e:	2000      	movs	r0, #0
}
 800bf40:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800bf42:	2002      	movs	r0, #2
}
 800bf44:	4770      	bx	lr
 800bf46:	bf00      	nop
 800bf48:	20000b50 	.word	0x20000b50

0800bf4c <netSetPhyDriver>:
   if(interface == NULL || driver == NULL)
 800bf4c:	2900      	cmp	r1, #0
 800bf4e:	bf18      	it	ne
 800bf50:	2800      	cmpne	r0, #0
 800bf52:	d00c      	beq.n	800bf6e <netSetPhyDriver+0x22>
{
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	4605      	mov	r5, r0
 800bf58:	460e      	mov	r6, r1
   osAcquireMutex(&netMutex);
 800bf5a:	4c06      	ldr	r4, [pc, #24]	@ (800bf74 <netSetPhyDriver+0x28>)
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f7f4 fc3e 	bl	80007de <osAcquireMutex>
   interface->phyDriver = driver;
 800bf62:	676e      	str	r6, [r5, #116]	@ 0x74
   osReleaseMutex(&netMutex);
 800bf64:	4620      	mov	r0, r4
 800bf66:	f7f4 fc41 	bl	80007ec <osReleaseMutex>
   return NO_ERROR;
 800bf6a:	2000      	movs	r0, #0
}
 800bf6c:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800bf6e:	2002      	movs	r0, #2
}
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	20000b50 	.word	0x20000b50

0800bf78 <netConfigInterface>:
{
 800bf78:	b570      	push	{r4, r5, r6, lr}
   if(interface == NULL)
 800bf7a:	2800      	cmp	r0, #0
 800bf7c:	d05a      	beq.n	800c034 <netConfigInterface+0xbc>
 800bf7e:	4604      	mov	r4, r0
   osAcquireMutex(&netMutex);
 800bf80:	482d      	ldr	r0, [pc, #180]	@ (800c038 <netConfigInterface+0xc0>)
 800bf82:	f7f4 fc2c 	bl	80007de <osAcquireMutex>
   if(interface->nicDriver != NULL)
 800bf86:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf88:	b113      	cbz	r3, 800bf90 <netConfigInterface+0x18>
      interface->nicDriver->disableIrq(interface);
 800bf8a:	695b      	ldr	r3, [r3, #20]
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	4798      	blx	r3
      if(!osCreateEvent(&interface->nicTxEvent))
 800bf90:	f104 0554 	add.w	r5, r4, #84	@ 0x54
 800bf94:	4628      	mov	r0, r5
 800bf96:	f7f4 fbdd 	bl	8000754 <osCreateEvent>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	d041      	beq.n	800c022 <netConfigInterface+0xaa>
      if(interface->nicDriver != NULL)
 800bf9e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfa0:	b12b      	cbz	r3, 800bfae <netConfigInterface+0x36>
         error = interface->nicDriver->init(interface);
 800bfa2:	689b      	ldr	r3, [r3, #8]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4798      	blx	r3
         if(error)
 800bfa8:	4606      	mov	r6, r0
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d13a      	bne.n	800c024 <netConfigInterface+0xac>
      error = ethInit(interface);
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f7f6 ff00 	bl	8002db4 <ethInit>
      if(error)
 800bfb4:	4606      	mov	r6, r0
 800bfb6:	bba8      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = ipv4Init(interface);
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f7f9 fb3b 	bl	8005634 <ipv4Init>
      if(error)
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	bb80      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = arpInit(interface);
 800bfc2:	4620      	mov	r0, r4
 800bfc4:	f7f4 fc45 	bl	8000852 <arpInit>
      if(error)
 800bfc8:	4606      	mov	r6, r0
 800bfca:	bb58      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = igmpInit(interface);
 800bfcc:	4620      	mov	r0, r4
 800bfce:	f7f8 fb81 	bl	80046d4 <igmpInit>
      if(error)
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	bb30      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = nbnsInit(interface);
 800bfd6:	4620      	mov	r0, r4
 800bfd8:	f7fd ff50 	bl	8009e7c <nbnsInit>
      if(error)
 800bfdc:	4606      	mov	r6, r0
 800bfde:	bb08      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = ipv6Init(interface);
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	f7fa fc7c 	bl	80068de <ipv6Init>
      if(error)
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	b9e0      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = ndpInit(interface);
 800bfea:	4620      	mov	r0, r4
 800bfec:	f7fe f943 	bl	800a276 <ndpInit>
      if(error)
 800bff0:	4606      	mov	r6, r0
 800bff2:	b9b8      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = mldInit(interface);
 800bff4:	4620      	mov	r0, r4
 800bff6:	f7fc ff2b 	bl	8008e50 <mldInit>
      if(error)
 800bffa:	4606      	mov	r6, r0
 800bffc:	b990      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      error = llmnrResponderInit(interface);
 800bffe:	4620      	mov	r0, r4
 800c000:	f7fc fcd4 	bl	80089ac <llmnrResponderInit>
   if(!error)
 800c004:	4606      	mov	r6, r0
 800c006:	b968      	cbnz	r0, 800c024 <netConfigInterface+0xac>
      netInitRand();
 800c008:	f000 fcec 	bl	800c9e4 <netInitRand>
      interface->configured = TRUE;
 800c00c:	2301      	movs	r3, #1
 800c00e:	66e3      	str	r3, [r4, #108]	@ 0x6c
      if(netTaskRunning)
 800c010:	4b09      	ldr	r3, [pc, #36]	@ (800c038 <netConfigInterface+0xc0>)
 800c012:	689b      	ldr	r3, [r3, #8]
 800c014:	b14b      	cbz	r3, 800c02a <netConfigInterface+0xb2>
         if(interface->nicDriver != NULL)
 800c016:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c018:	b13b      	cbz	r3, 800c02a <netConfigInterface+0xb2>
            interface->nicDriver->enableIrq(interface);
 800c01a:	691b      	ldr	r3, [r3, #16]
 800c01c:	4620      	mov	r0, r4
 800c01e:	4798      	blx	r3
 800c020:	e003      	b.n	800c02a <netConfigInterface+0xb2>
         error = ERROR_OUT_OF_RESOURCES;
 800c022:	2665      	movs	r6, #101	@ 0x65
      osDeleteEvent(&interface->nicTxEvent);
 800c024:	4628      	mov	r0, r5
 800c026:	f7f4 fba2 	bl	800076e <osDeleteEvent>
   osReleaseMutex(&netMutex);
 800c02a:	4803      	ldr	r0, [pc, #12]	@ (800c038 <netConfigInterface+0xc0>)
 800c02c:	f7f4 fbde 	bl	80007ec <osReleaseMutex>
}
 800c030:	4630      	mov	r0, r6
 800c032:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800c034:	2602      	movs	r6, #2
 800c036:	e7fb      	b.n	800c030 <netConfigInterface+0xb8>
 800c038:	20000b50 	.word	0x20000b50

0800c03c <memPoolInit>:
   memPoolMaxUsage = 0;
#endif

   //Successful initialization
   return NO_ERROR;
}
 800c03c:	2000      	movs	r0, #0
 800c03e:	4770      	bx	lr

0800c040 <memPoolAlloc>:
 * @param[in] size Bytes to allocate
 * @return Pointer to the allocated space or NULL if there is insufficient memory available
 **/

void *memPoolAlloc(size_t size)
{
 800c040:	b510      	push	{r4, lr}

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Allocate a memory block
   p = osAllocMem(size);
 800c042:	f7f4 fbdf 	bl	8000804 <osAllocMem>
#endif

   //Failed to allocate memory?
   if(!p)
 800c046:	4604      	mov	r4, r0
 800c048:	b108      	cbz	r0, 800c04e <memPoolAlloc+0xe>
      TRACE_WARNING("Memory allocation failed!\r\n");
   }

   //Return a pointer to the allocated memory block
   return p;
}
 800c04a:	4620      	mov	r0, r4
 800c04c:	bd10      	pop	{r4, pc}
      TRACE_WARNING("Memory allocation failed!\r\n");
 800c04e:	f7f4 fb6f 	bl	8000730 <osSuspendAllTasks>
 800c052:	4b05      	ldr	r3, [pc, #20]	@ (800c068 <memPoolAlloc+0x28>)
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68db      	ldr	r3, [r3, #12]
 800c058:	221b      	movs	r2, #27
 800c05a:	2101      	movs	r1, #1
 800c05c:	4803      	ldr	r0, [pc, #12]	@ (800c06c <memPoolAlloc+0x2c>)
 800c05e:	f008 fd1d 	bl	8014a9c <fwrite>
 800c062:	f7f4 fb6e 	bl	8000742 <osResumeAllTasks>
   return p;
 800c066:	e7f0      	b.n	800c04a <memPoolAlloc+0xa>
 800c068:	20000440 	.word	0x20000440
 800c06c:	0801a4d0 	.word	0x0801a4d0

0800c070 <memPoolFree>:
 * @brief Release a memory block
 * @param[in] p Previously allocated memory block to be freed
 **/

void memPoolFree(void *p)
{
 800c070:	b508      	push	{r3, lr}

   //Release exclusive access to the memory pool
   osReleaseMutex(&memPoolMutex);
#else
   //Release memory block
   osFreeMem(p);
 800c072:	f7f4 fbcb 	bl	800080c <osFreeMem>
#endif
}
 800c076:	bd08      	pop	{r3, pc}

0800c078 <netBufferGetLength>:
 * @param[in] buffer Pointer to a multi-part buffer
 * @return Actual length in bytes
 **/

size_t netBufferGetLength(const NetBuffer *buffer)
{
 800c078:	4602      	mov	r2, r0
   uint_t i;

   //Total length
   size_t length = 0;
 800c07a:	2000      	movs	r0, #0

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800c07c:	4603      	mov	r3, r0
 800c07e:	e004      	b.n	800c08a <netBufferGetLength+0x12>
   {
      length += buffer->chunk[i].length;
 800c080:	3301      	adds	r3, #1
 800c082:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800c086:	8889      	ldrh	r1, [r1, #4]
 800c088:	4408      	add	r0, r1
   for(i = 0; i < buffer->chunkCount; i++)
 800c08a:	6811      	ldr	r1, [r2, #0]
 800c08c:	4299      	cmp	r1, r3
 800c08e:	d8f7      	bhi.n	800c080 <netBufferGetLength+0x8>
   }

   //Return total length
   return length;
}
 800c090:	4770      	bx	lr

0800c092 <netBufferSetLength>:
 * @param[in] length Desired length
 * @return Error code
 **/

error_t netBufferSetLength(NetBuffer *buffer, size_t length)
{
 800c092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c094:	4605      	mov	r5, r0
 800c096:	460e      	mov	r6, r1
   uint_t i;
   uint_t chunkCount;
   ChunkDesc *chunk;

   //Get the actual number of chunks
   chunkCount = buffer->chunkCount;
 800c098:	6807      	ldr	r7, [r0, #0]

   //Loop through data chunks
   for(i = 0; i < chunkCount && length > 0; i++)
 800c09a:	2400      	movs	r4, #0
 800c09c:	e00c      	b.n	800c0b8 <netBufferSetLength+0x26>
      //Adjust the length of the current chunk when possible
      if(length <= chunk->length)
      {
         chunk->length = length;
      }
      else if(chunk->size > 0 && i == (chunkCount - 1))
 800c09e:	1c63      	adds	r3, r4, #1
 800c0a0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800c0a4:	88db      	ldrh	r3, [r3, #6]
 800c0a6:	b113      	cbz	r3, 800c0ae <netBufferSetLength+0x1c>
 800c0a8:	1e7a      	subs	r2, r7, #1
 800c0aa:	42a2      	cmp	r2, r4
 800c0ac:	d015      	beq.n	800c0da <netBufferSetLength+0x48>
      {
         chunk->length = MIN(length, chunk->size);
      }

      //Prepare to process next chunk
      length -= chunk->length;
 800c0ae:	3401      	adds	r4, #1
 800c0b0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800c0b4:	889b      	ldrh	r3, [r3, #4]
 800c0b6:	1af6      	subs	r6, r6, r3
   for(i = 0; i < chunkCount && length > 0; i++)
 800c0b8:	1e33      	subs	r3, r6, #0
 800c0ba:	bf18      	it	ne
 800c0bc:	2301      	movne	r3, #1
 800c0be:	42bc      	cmp	r4, r7
 800c0c0:	d213      	bcs.n	800c0ea <netBufferSetLength+0x58>
 800c0c2:	b193      	cbz	r3, 800c0ea <netBufferSetLength+0x58>
      if(length <= chunk->length)
 800c0c4:	1c63      	adds	r3, r4, #1
 800c0c6:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800c0ca:	889b      	ldrh	r3, [r3, #4]
 800c0cc:	42b3      	cmp	r3, r6
 800c0ce:	d3e6      	bcc.n	800c09e <netBufferSetLength+0xc>
         chunk->length = length;
 800c0d0:	1c63      	adds	r3, r4, #1
 800c0d2:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800c0d6:	809e      	strh	r6, [r3, #4]
 800c0d8:	e7e9      	b.n	800c0ae <netBufferSetLength+0x1c>
         chunk->length = MIN(length, chunk->size);
 800c0da:	42b3      	cmp	r3, r6
 800c0dc:	bf28      	it	cs
 800c0de:	4633      	movcs	r3, r6
 800c0e0:	1c62      	adds	r2, r4, #1
 800c0e2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800c0e6:	8093      	strh	r3, [r2, #4]
 800c0e8:	e7e1      	b.n	800c0ae <netBufferSetLength+0x1c>
   }

   //The size of the buffer should be decreased?
   if(!length)
 800c0ea:	bb4e      	cbnz	r6, 800c140 <netBufferSetLength+0xae>
   {
      //Adjust the number of chunks
      buffer->chunkCount = i;
 800c0ec:	602c      	str	r4, [r5, #0]

      //Delete unnecessary data chunks
      while(i < chunkCount)
 800c0ee:	e007      	b.n	800c100 <netBufferSetLength+0x6e>
         {
            memPoolFree(chunk->address);
         }

         //Mark the current chunk as free
         chunk->address = NULL;
 800c0f0:	3401      	adds	r4, #1
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	f845 3034 	str.w	r3, [r5, r4, lsl #3]
         chunk->length = 0;
 800c0f8:	eb05 02c4 	add.w	r2, r5, r4, lsl #3
 800c0fc:	8093      	strh	r3, [r2, #4]
         chunk->size = 0;
 800c0fe:	80d3      	strh	r3, [r2, #6]
      while(i < chunkCount)
 800c100:	42bc      	cmp	r4, r7
 800c102:	d22c      	bcs.n	800c15e <netBufferSetLength+0xcc>
         if(chunk->size > 0)
 800c104:	1c63      	adds	r3, r4, #1
 800c106:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
 800c10a:	88db      	ldrh	r3, [r3, #6]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d0ef      	beq.n	800c0f0 <netBufferSetLength+0x5e>
            memPoolFree(chunk->address);
 800c110:	1c63      	adds	r3, r4, #1
 800c112:	f855 0033 	ldr.w	r0, [r5, r3, lsl #3]
 800c116:	f7ff ffab 	bl	800c070 <memPoolFree>
 800c11a:	e7e9      	b.n	800c0f0 <netBufferSetLength+0x5e>
         //Failed to allocate memory?
         if(!chunk->address)
            return ERROR_OUT_OF_MEMORY;

         //Allocated memory
         chunk->size = NET_MEM_POOL_BUFFER_SIZE;
 800c11c:	461c      	mov	r4, r3
 800c11e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 800c122:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800c126:	80d3      	strh	r3, [r2, #6]
         //Actual length of the data chunk
         chunk->length = MIN(length, NET_MEM_POOL_BUFFER_SIZE);
 800c128:	4633      	mov	r3, r6
 800c12a:	f5b6 6fc0 	cmp.w	r6, #1536	@ 0x600
 800c12e:	bf28      	it	cs
 800c130:	f44f 63c0 	movcs.w	r3, #1536	@ 0x600
 800c134:	8093      	strh	r3, [r2, #4]

         //Prepare to process next chunk
         length -= chunk->length;
 800c136:	b29b      	uxth	r3, r3
 800c138:	1af6      	subs	r6, r6, r3
         buffer->chunkCount++;
 800c13a:	682b      	ldr	r3, [r5, #0]
 800c13c:	3301      	adds	r3, #1
 800c13e:	602b      	str	r3, [r5, #0]
      while(i < buffer->maxChunkCount && length > 0)
 800c140:	686b      	ldr	r3, [r5, #4]
 800c142:	42a3      	cmp	r3, r4
 800c144:	d90b      	bls.n	800c15e <netBufferSetLength+0xcc>
 800c146:	b156      	cbz	r6, 800c15e <netBufferSetLength+0xcc>
         chunk->address = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 800c148:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800c14c:	f7ff ff78 	bl	800c040 <memPoolAlloc>
 800c150:	1c63      	adds	r3, r4, #1
 800c152:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
         if(!chunk->address)
 800c156:	2800      	cmp	r0, #0
 800c158:	d1e0      	bne.n	800c11c <netBufferSetLength+0x8a>
            return ERROR_OUT_OF_MEMORY;
 800c15a:	2064      	movs	r0, #100	@ 0x64
 800c15c:	e001      	b.n	800c162 <netBufferSetLength+0xd0>
         i++;
      }
   }

   //Return status code
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 800c15e:	b90e      	cbnz	r6, 800c164 <netBufferSetLength+0xd2>
 800c160:	2000      	movs	r0, #0
}
 800c162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   return (length > 0) ? ERROR_OUT_OF_RESOURCES : NO_ERROR;
 800c164:	2065      	movs	r0, #101	@ 0x65
 800c166:	e7fc      	b.n	800c162 <netBufferSetLength+0xd0>

0800c168 <netBufferFree>:
{
 800c168:	b510      	push	{r4, lr}
 800c16a:	4604      	mov	r4, r0
   netBufferSetLength(buffer, 0);
 800c16c:	2100      	movs	r1, #0
 800c16e:	f7ff ff90 	bl	800c092 <netBufferSetLength>
   memPoolFree(buffer);
 800c172:	4620      	mov	r0, r4
 800c174:	f7ff ff7c 	bl	800c070 <memPoolFree>
}
 800c178:	bd10      	pop	{r4, pc}

0800c17a <netBufferAlloc>:
{
 800c17a:	b538      	push	{r3, r4, r5, lr}
 800c17c:	4605      	mov	r5, r0
   buffer = memPoolAlloc(NET_MEM_POOL_BUFFER_SIZE);
 800c17e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 800c182:	f7ff ff5d 	bl	800c040 <memPoolAlloc>
   if(buffer == NULL)
 800c186:	4604      	mov	r4, r0
 800c188:	b178      	cbz	r0, 800c1aa <netBufferAlloc+0x30>
   buffer->chunkCount = 1;
 800c18a:	2301      	movs	r3, #1
 800c18c:	6003      	str	r3, [r0, #0]
   buffer->maxChunkCount = MAX_CHUNK_COUNT;
 800c18e:	2309      	movs	r3, #9
 800c190:	6043      	str	r3, [r0, #4]
   buffer->chunk[0].address = (uint8_t *) buffer + CHUNKED_BUFFER_HEADER_SIZE;
 800c192:	f100 0350 	add.w	r3, r0, #80	@ 0x50
 800c196:	6083      	str	r3, [r0, #8]
   buffer->chunk[0].length = NET_MEM_POOL_BUFFER_SIZE - CHUNKED_BUFFER_HEADER_SIZE;
 800c198:	f44f 63b6 	mov.w	r3, #1456	@ 0x5b0
 800c19c:	8183      	strh	r3, [r0, #12]
   buffer->chunk[0].size = 0;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	81c3      	strh	r3, [r0, #14]
   error = netBufferSetLength(buffer, length);
 800c1a2:	4629      	mov	r1, r5
 800c1a4:	f7ff ff75 	bl	800c092 <netBufferSetLength>
   if(error)
 800c1a8:	b908      	cbnz	r0, 800c1ae <netBufferAlloc+0x34>
}
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	bd38      	pop	{r3, r4, r5, pc}
      netBufferFree(buffer);
 800c1ae:	4620      	mov	r0, r4
 800c1b0:	f7ff ffda 	bl	800c168 <netBufferFree>
      return NULL;
 800c1b4:	2400      	movs	r4, #0
 800c1b6:	e7f8      	b.n	800c1aa <netBufferAlloc+0x30>

0800c1b8 <netBufferAt>:
 * @param[in] length Length of the data segment
 * @return Pointer the data segment
 **/

void *netBufferAt(const NetBuffer *buffer, size_t offset, size_t length)
{
 800c1b8:	b410      	push	{r4}

   //Initialize pointer
   data = NULL;

   //Loop through data chunks
   for(i = 0; i < buffer->chunkCount; i++)
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	e002      	b.n	800c1c4 <netBufferAt+0xc>
         //Exit immediately
         break;
      }

      //Jump to the next chunk
      offset -= buffer->chunk[i].length;
 800c1be:	eba1 010c 	sub.w	r1, r1, ip
   for(i = 0; i < buffer->chunkCount; i++)
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	6804      	ldr	r4, [r0, #0]
 800c1c6:	429c      	cmp	r4, r3
 800c1c8:	d90f      	bls.n	800c1ea <netBufferAt+0x32>
      if(offset < buffer->chunk[i].length)
 800c1ca:	f103 0c01 	add.w	ip, r3, #1
 800c1ce:	eb00 0ccc 	add.w	ip, r0, ip, lsl #3
 800c1d2:	f8bc c004 	ldrh.w	ip, [ip, #4]
 800c1d6:	458c      	cmp	ip, r1
 800c1d8:	d9f1      	bls.n	800c1be <netBufferAt+0x6>
         if((offset + length) <= buffer->chunk[i].length)
 800c1da:	440a      	add	r2, r1
 800c1dc:	4594      	cmp	ip, r2
 800c1de:	d308      	bcc.n	800c1f2 <netBufferAt+0x3a>
            data = (uint8_t *) buffer->chunk[i].address + offset;
 800c1e0:	3301      	adds	r3, #1
 800c1e2:	f850 0033 	ldr.w	r0, [r0, r3, lsl #3]
 800c1e6:	4408      	add	r0, r1
 800c1e8:	e000      	b.n	800c1ec <netBufferAt+0x34>
   data = NULL;
 800c1ea:	2000      	movs	r0, #0
   }

   //Return a pointer to the data segment
   return data;
}
 800c1ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1f0:	4770      	bx	lr
   data = NULL;
 800c1f2:	2000      	movs	r0, #0
   return data;
 800c1f4:	e7fa      	b.n	800c1ec <netBufferAt+0x34>

0800c1f6 <netBufferConcat>:
 * @return Error code
 **/

error_t netBufferConcat(NetBuffer *dest,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 800c1f6:	b570      	push	{r4, r5, r6, lr}
   uint_t i;
   uint_t j;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 800c1f8:	f04f 0c00 	mov.w	ip, #0
 800c1fc:	e002      	b.n	800c204 <netBufferConcat+0xe>
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 800c1fe:	1b12      	subs	r2, r2, r4
   for(j = 0; j < src->chunkCount; j++)
 800c200:	f10c 0c01 	add.w	ip, ip, #1
 800c204:	680d      	ldr	r5, [r1, #0]
 800c206:	4565      	cmp	r5, ip
 800c208:	d906      	bls.n	800c218 <netBufferConcat+0x22>
      if(srcOffset < src->chunk[j].length)
 800c20a:	f10c 0401 	add.w	r4, ip, #1
 800c20e:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800c212:	88a4      	ldrh	r4, [r4, #4]
 800c214:	4294      	cmp	r4, r2
 800c216:	d9f2      	bls.n	800c1fe <netBufferConcat+0x8>
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 800c218:	4565      	cmp	r5, ip
 800c21a:	d932      	bls.n	800c282 <netBufferConcat+0x8c>
      return ERROR_INVALID_PARAMETER;

   //Position to the end of the destination data
   i = dest->chunkCount;
 800c21c:	6804      	ldr	r4, [r0, #0]

   //Copy data blocks
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 800c21e:	e00a      	b.n	800c236 <netBufferConcat+0x40>
      //Limit the number of bytes to copy
      if(length < dest->chunk[i].length)
         dest->chunk[i].length = length;

      //Decrement the number of remaining bytes
      length -= dest->chunk[i].length;
 800c220:	3401      	adds	r4, #1
 800c222:	eb00 02c4 	add.w	r2, r0, r4, lsl #3
 800c226:	8892      	ldrh	r2, [r2, #4]
 800c228:	1a9b      	subs	r3, r3, r2
      //Increment the number of chunks
      dest->chunkCount++;
 800c22a:	6802      	ldr	r2, [r0, #0]
 800c22c:	3201      	adds	r2, #1
 800c22e:	6002      	str	r2, [r0, #0]

      //Adjust variables
      srcOffset = 0;
      i++;
      j++;
 800c230:	f10c 0c01 	add.w	ip, ip, #1
      srcOffset = 0;
 800c234:	2200      	movs	r2, #0
   while(length > 0 && i < dest->maxChunkCount && j < src->chunkCount)
 800c236:	b303      	cbz	r3, 800c27a <netBufferConcat+0x84>
 800c238:	6845      	ldr	r5, [r0, #4]
 800c23a:	42a5      	cmp	r5, r4
 800c23c:	d91d      	bls.n	800c27a <netBufferConcat+0x84>
 800c23e:	680d      	ldr	r5, [r1, #0]
 800c240:	4565      	cmp	r5, ip
 800c242:	d91a      	bls.n	800c27a <netBufferConcat+0x84>
      dest->chunk[i].address = (uint8_t *) src->chunk[j].address + srcOffset;
 800c244:	f10c 0e01 	add.w	lr, ip, #1
 800c248:	f851 503e 	ldr.w	r5, [r1, lr, lsl #3]
 800c24c:	18ae      	adds	r6, r5, r2
 800c24e:	1c65      	adds	r5, r4, #1
 800c250:	f840 6035 	str.w	r6, [r0, r5, lsl #3]
      dest->chunk[i].length = src->chunk[j].length - srcOffset;
 800c254:	eb01 0ece 	add.w	lr, r1, lr, lsl #3
 800c258:	f8be e004 	ldrh.w	lr, [lr, #4]
 800c25c:	ebae 0202 	sub.w	r2, lr, r2
 800c260:	b292      	uxth	r2, r2
 800c262:	eb00 0ec5 	add.w	lr, r0, r5, lsl #3
 800c266:	f8ae 2004 	strh.w	r2, [lr, #4]
      dest->chunk[i].size = 0;
 800c26a:	2500      	movs	r5, #0
 800c26c:	f8ae 5006 	strh.w	r5, [lr, #6]
      if(length < dest->chunk[i].length)
 800c270:	429a      	cmp	r2, r3
 800c272:	d9d5      	bls.n	800c220 <netBufferConcat+0x2a>
         dest->chunk[i].length = length;
 800c274:	f8ae 3004 	strh.w	r3, [lr, #4]
 800c278:	e7d2      	b.n	800c220 <netBufferConcat+0x2a>
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 800c27a:	1e18      	subs	r0, r3, #0
 800c27c:	bf18      	it	ne
 800c27e:	2001      	movne	r0, #1
}
 800c280:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800c282:	2002      	movs	r0, #2
 800c284:	e7fc      	b.n	800c280 <netBufferConcat+0x8a>

0800c286 <netBufferCopy>:
 * @return Error code
 **/

error_t netBufferCopy(NetBuffer *dest, size_t destOffset,
   const NetBuffer *src, size_t srcOffset, size_t length)
{
 800c286:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c28a:	b083      	sub	sp, #12
 800c28c:	4682      	mov	sl, r0
 800c28e:	460c      	mov	r4, r1
 800c290:	4691      	mov	r9, r2
 800c292:	461e      	mov	r6, r3
 800c294:	f8dd b030 	ldr.w	fp, [sp, #48]	@ 0x30
   uint_t n;
   uint8_t *p;
   uint8_t *q;

   //Skip the beginning of the source data
   for(i = 0; i < dest->chunkCount; i++)
 800c298:	2500      	movs	r5, #0
 800c29a:	e001      	b.n	800c2a0 <netBufferCopy+0x1a>
      //The data at the specified offset resides in the current chunk?
      if(destOffset < dest->chunk[i].length)
         break;

      //Jump to the next chunk
      destOffset -= dest->chunk[i].length;
 800c29c:	1ae4      	subs	r4, r4, r3
   for(i = 0; i < dest->chunkCount; i++)
 800c29e:	3501      	adds	r5, #1
 800c2a0:	f8da 2000 	ldr.w	r2, [sl]
 800c2a4:	42aa      	cmp	r2, r5
 800c2a6:	d905      	bls.n	800c2b4 <netBufferCopy+0x2e>
      if(destOffset < dest->chunk[i].length)
 800c2a8:	1c6b      	adds	r3, r5, #1
 800c2aa:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 800c2ae:	889b      	ldrh	r3, [r3, #4]
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	d9f3      	bls.n	800c29c <netBufferCopy+0x16>
   }

   //Invalid offset?
   if(i >= dest->chunkCount)
 800c2b4:	42aa      	cmp	r2, r5
 800c2b6:	d950      	bls.n	800c35a <netBufferCopy+0xd4>
      return ERROR_INVALID_PARAMETER;

   //Skip the beginning of the source data
   for(j = 0; j < src->chunkCount; j++)
 800c2b8:	2700      	movs	r7, #0
 800c2ba:	f8d9 2000 	ldr.w	r2, [r9]
 800c2be:	42ba      	cmp	r2, r7
 800c2c0:	d908      	bls.n	800c2d4 <netBufferCopy+0x4e>
   {
      //The data at the specified offset resides in the current chunk?
      if(srcOffset < src->chunk[j].length)
 800c2c2:	1c7b      	adds	r3, r7, #1
 800c2c4:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 800c2c8:	889b      	ldrh	r3, [r3, #4]
 800c2ca:	42b3      	cmp	r3, r6
 800c2cc:	d802      	bhi.n	800c2d4 <netBufferCopy+0x4e>
         break;

      //Jump to the next chunk
      srcOffset -= src->chunk[j].length;
 800c2ce:	1af6      	subs	r6, r6, r3
   for(j = 0; j < src->chunkCount; j++)
 800c2d0:	3701      	adds	r7, #1
 800c2d2:	e7f2      	b.n	800c2ba <netBufferCopy+0x34>
   }

   //Invalid offset?
   if(j >= src->chunkCount)
 800c2d4:	42ba      	cmp	r2, r7
 800c2d6:	d942      	bls.n	800c35e <netBufferCopy+0xd8>
      return ERROR_INVALID_PARAMETER;

   while(length > 0 && i < dest->chunkCount && j < src->chunkCount)
 800c2d8:	f1bb 0f00 	cmp.w	fp, #0
 800c2dc:	d036      	beq.n	800c34c <netBufferCopy+0xc6>
 800c2de:	f8da 3000 	ldr.w	r3, [sl]
 800c2e2:	42ab      	cmp	r3, r5
 800c2e4:	d932      	bls.n	800c34c <netBufferCopy+0xc6>
 800c2e6:	f8d9 3000 	ldr.w	r3, [r9]
 800c2ea:	42bb      	cmp	r3, r7
 800c2ec:	d92e      	bls.n	800c34c <netBufferCopy+0xc6>
   {
      //Point to the first data byte
      p = (uint8_t *) dest->chunk[i].address + destOffset;
 800c2ee:	1c6b      	adds	r3, r5, #1
 800c2f0:	f85a 0033 	ldr.w	r0, [sl, r3, lsl #3]
      q = (uint8_t *) src->chunk[j].address + srcOffset;
 800c2f4:	1c7a      	adds	r2, r7, #1
 800c2f6:	f859 1032 	ldr.w	r1, [r9, r2, lsl #3]

      //Compute the number of bytes to copy
      n = MIN(length, dest->chunk[i].length - destOffset);
 800c2fa:	eb0a 03c3 	add.w	r3, sl, r3, lsl #3
 800c2fe:	9301      	str	r3, [sp, #4]
 800c300:	889b      	ldrh	r3, [r3, #4]
 800c302:	1b1b      	subs	r3, r3, r4
 800c304:	455b      	cmp	r3, fp
 800c306:	bf28      	it	cs
 800c308:	465b      	movcs	r3, fp
      n = MIN(n, src->chunk[j].length - srcOffset);
 800c30a:	eb09 02c2 	add.w	r2, r9, r2, lsl #3
 800c30e:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 800c312:	eba8 0806 	sub.w	r8, r8, r6
 800c316:	4598      	cmp	r8, r3
 800c318:	bf28      	it	cs
 800c31a:	4698      	movcs	r8, r3

      //Copy data
      osMemcpy(p, q, n);
 800c31c:	4642      	mov	r2, r8
 800c31e:	4431      	add	r1, r6
 800c320:	4420      	add	r0, r4
 800c322:	f008 fdbb 	bl	8014e9c <memcpy>

      destOffset += n;
 800c326:	4444      	add	r4, r8
      srcOffset += n;
 800c328:	4446      	add	r6, r8
      length -= n;
 800c32a:	ebab 0b08 	sub.w	fp, fp, r8

      if(destOffset >= dest->chunk[i].length)
 800c32e:	9b01      	ldr	r3, [sp, #4]
 800c330:	889b      	ldrh	r3, [r3, #4]
 800c332:	42a3      	cmp	r3, r4
 800c334:	d801      	bhi.n	800c33a <netBufferCopy+0xb4>
      {
         destOffset = 0;
         i++;
 800c336:	3501      	adds	r5, #1
         destOffset = 0;
 800c338:	2400      	movs	r4, #0
      }

      if(srcOffset >= src->chunk[j].length)
 800c33a:	1c7b      	adds	r3, r7, #1
 800c33c:	eb09 03c3 	add.w	r3, r9, r3, lsl #3
 800c340:	889b      	ldrh	r3, [r3, #4]
 800c342:	42b3      	cmp	r3, r6
 800c344:	d8c8      	bhi.n	800c2d8 <netBufferCopy+0x52>
      {
         srcOffset = 0;
         j++;
 800c346:	3701      	adds	r7, #1
         srcOffset = 0;
 800c348:	2600      	movs	r6, #0
 800c34a:	e7c5      	b.n	800c2d8 <netBufferCopy+0x52>
      }
   }

   //Return status code
   return (length > 0) ? ERROR_FAILURE : NO_ERROR;
 800c34c:	f1bb 0000 	subs.w	r0, fp, #0
 800c350:	bf18      	it	ne
 800c352:	2001      	movne	r0, #1
}
 800c354:	b003      	add	sp, #12
 800c356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_INVALID_PARAMETER;
 800c35a:	2002      	movs	r0, #2
 800c35c:	e7fa      	b.n	800c354 <netBufferCopy+0xce>
      return ERROR_INVALID_PARAMETER;
 800c35e:	2002      	movs	r0, #2
 800c360:	e7f8      	b.n	800c354 <netBufferCopy+0xce>

0800c362 <netBufferAppend>:
 * @param[in] length Number of bytes in the user buffer
 * @return Error code
 **/

error_t netBufferAppend(NetBuffer *dest, const void *src, size_t length)
{
 800c362:	b410      	push	{r4}
   uint_t i;

   //Make sure there is enough space to add an extra chunk
   if(dest->chunkCount >= dest->maxChunkCount)
 800c364:	6803      	ldr	r3, [r0, #0]
 800c366:	6844      	ldr	r4, [r0, #4]
 800c368:	42a3      	cmp	r3, r4
 800c36a:	d20c      	bcs.n	800c386 <netBufferAppend+0x24>

   //Position to the end of the buffer
   i = dest->chunkCount;

   //Insert a new chunk at the end of the list
   dest->chunk[i].address = (void *) src;
 800c36c:	3301      	adds	r3, #1
 800c36e:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
   dest->chunk[i].length = length;
 800c372:	eb00 01c3 	add.w	r1, r0, r3, lsl #3
 800c376:	808a      	strh	r2, [r1, #4]
   dest->chunk[i].size = 0;
 800c378:	2200      	movs	r2, #0
 800c37a:	80ca      	strh	r2, [r1, #6]

   //Increment the number of chunks
   dest->chunkCount++;
 800c37c:	6003      	str	r3, [r0, #0]

   //Successful processing
   return NO_ERROR;
 800c37e:	4610      	mov	r0, r2
}
 800c380:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c384:	4770      	bx	lr
      return ERROR_FAILURE;
 800c386:	2001      	movs	r0, #1
 800c388:	e7fa      	b.n	800c380 <netBufferAppend+0x1e>

0800c38a <netBufferWrite>:
 * @return Actual number of bytes copied
 **/

size_t netBufferWrite(NetBuffer *dest,
   size_t destOffset, const void *src, size_t length)
{
 800c38a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c38e:	4606      	mov	r6, r0
 800c390:	4608      	mov	r0, r1
 800c392:	4691      	mov	r9, r2
 800c394:	4698      	mov	r8, r3
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes written
   totalLength = 0;
 800c396:	2700      	movs	r7, #0

   //Loop through data chunks
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 800c398:	463d      	mov	r5, r7
 800c39a:	e012      	b.n	800c3c2 <netBufferWrite+0x38>
   {
      //Is there any data to copy in the current chunk?
      if(destOffset < dest->chunk[i].length)
      {
         //Point to the first byte to be written
         p = (uint8_t *) dest->chunk[i].address + destOffset;
 800c39c:	1c6b      	adds	r3, r5, #1
 800c39e:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, dest->chunk[i].length - destOffset);
 800c3a2:	ebac 0400 	sub.w	r4, ip, r0
 800c3a6:	eba8 0207 	sub.w	r2, r8, r7
 800c3aa:	4294      	cmp	r4, r2
 800c3ac:	bf28      	it	cs
 800c3ae:	4614      	movcs	r4, r2

         //Copy data
         osMemcpy(p, src, n);
 800c3b0:	4622      	mov	r2, r4
 800c3b2:	4649      	mov	r1, r9
 800c3b4:	4418      	add	r0, r3
 800c3b6:	f008 fd71 	bl	8014e9c <memcpy>

         //Advance read pointer
         src = (uint8_t *) src + n;
 800c3ba:	44a1      	add	r9, r4
         //Total number of bytes written
         totalLength += n;
 800c3bc:	4427      	add	r7, r4
         //Process the next block from the start
         destOffset = 0;
 800c3be:	2000      	movs	r0, #0
   for(i = 0; i < dest->chunkCount && totalLength < length; i++)
 800c3c0:	3501      	adds	r5, #1
 800c3c2:	6833      	ldr	r3, [r6, #0]
 800c3c4:	42ab      	cmp	r3, r5
 800c3c6:	d90b      	bls.n	800c3e0 <netBufferWrite+0x56>
 800c3c8:	4547      	cmp	r7, r8
 800c3ca:	d209      	bcs.n	800c3e0 <netBufferWrite+0x56>
      if(destOffset < dest->chunk[i].length)
 800c3cc:	1c6b      	adds	r3, r5, #1
 800c3ce:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c3d2:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 800c3d6:	4584      	cmp	ip, r0
 800c3d8:	d8e0      	bhi.n	800c39c <netBufferWrite+0x12>
      }
      else
      {
         //Skip the current chunk
         destOffset -= dest->chunk[i].length;
 800c3da:	eba0 000c 	sub.w	r0, r0, ip
 800c3de:	e7ef      	b.n	800c3c0 <netBufferWrite+0x36>
      }
   }

   //Return the actual number of bytes written
   return totalLength;
}
 800c3e0:	4638      	mov	r0, r7
 800c3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800c3e6 <netBufferRead>:
 * @return Actual number of bytes copied
 **/

size_t netBufferRead(void *dest, const NetBuffer *src,
   size_t srcOffset, size_t length)
{
 800c3e6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ea:	4681      	mov	r9, r0
 800c3ec:	460e      	mov	r6, r1
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4698      	mov	r8, r3
   uint_t n;
   size_t totalLength;
   uint8_t *p;

   //Total number of bytes copied
   totalLength = 0;
 800c3f2:	2700      	movs	r7, #0

   //Loop through data chunks
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 800c3f4:	463d      	mov	r5, r7
 800c3f6:	e012      	b.n	800c41e <netBufferRead+0x38>
   {
      //Is there any data to copy from the current chunk?
      if(srcOffset < src->chunk[i].length)
      {
         //Point to the first byte to be read
         p = (uint8_t *) src->chunk[i].address + srcOffset;
 800c3f8:	1c6b      	adds	r3, r5, #1
 800c3fa:	f856 3033 	ldr.w	r3, [r6, r3, lsl #3]
         //Compute the number of bytes to copy at a time
         n = MIN(length - totalLength, src->chunk[i].length - srcOffset);
 800c3fe:	ebac 0401 	sub.w	r4, ip, r1
 800c402:	eba8 0207 	sub.w	r2, r8, r7
 800c406:	4294      	cmp	r4, r2
 800c408:	bf28      	it	cs
 800c40a:	4614      	movcs	r4, r2

         //Copy data
         osMemcpy(dest, p, n);
 800c40c:	4622      	mov	r2, r4
 800c40e:	4419      	add	r1, r3
 800c410:	4648      	mov	r0, r9
 800c412:	f008 fd43 	bl	8014e9c <memcpy>

         //Advance write pointer
         dest = (uint8_t *) dest + n;
 800c416:	44a1      	add	r9, r4
         //Total number of bytes copied
         totalLength += n;
 800c418:	4427      	add	r7, r4
         //Process the next block from the start
         srcOffset = 0;
 800c41a:	2100      	movs	r1, #0
   for(i = 0; i < src->chunkCount && totalLength < length; i++)
 800c41c:	3501      	adds	r5, #1
 800c41e:	6833      	ldr	r3, [r6, #0]
 800c420:	42ab      	cmp	r3, r5
 800c422:	d90b      	bls.n	800c43c <netBufferRead+0x56>
 800c424:	4547      	cmp	r7, r8
 800c426:	d209      	bcs.n	800c43c <netBufferRead+0x56>
      if(srcOffset < src->chunk[i].length)
 800c428:	1c6b      	adds	r3, r5, #1
 800c42a:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 800c42e:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 800c432:	458c      	cmp	ip, r1
 800c434:	d8e0      	bhi.n	800c3f8 <netBufferRead+0x12>
      }
      else
      {
         //Skip the current chunk
         srcOffset -= src->chunk[i].length;
 800c436:	eba1 010c 	sub.w	r1, r1, ip
 800c43a:	e7ef      	b.n	800c41c <netBufferRead+0x36>
      }
   }

   //Return the actual number of bytes copied
   return totalLength;
}
 800c43c:	4638      	mov	r0, r7
 800c43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0800c444 <netProcessLinkChange>:
 * @brief Process link state change event
 * @param[in] interface Underlying network interface
 **/

void netProcessLinkChange(NetInterface *interface)
{
 800c444:	b570      	push	{r4, r5, r6, lr}
 800c446:	4605      	mov	r5, r0
   uint_t i;
   Socket *socket;

   //Check link state
   if(interface->linkState)
 800c448:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d06a      	beq.n	800c524 <netProcessLinkChange+0xe0>
   {
      //Display link state
      TRACE_INFO("Link is up (%s)...\r\n", interface->name);
 800c44e:	f7f4 f96f 	bl	8000730 <osSuspendAllTasks>
 800c452:	4b60      	ldr	r3, [pc, #384]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	f105 0210 	add.w	r2, r5, #16
 800c45a:	495f      	ldr	r1, [pc, #380]	@ (800c5d8 <netProcessLinkChange+0x194>)
 800c45c:	68d8      	ldr	r0, [r3, #12]
 800c45e:	f008 f903 	bl	8014668 <fprintf>
 800c462:	f7f4 f96e 	bl	8000742 <osResumeAllTasks>

      //Display link speed
      if(interface->linkSpeed == NIC_LINK_SPEED_1GBPS)
 800c466:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c468:	4a5c      	ldr	r2, [pc, #368]	@ (800c5dc <netProcessLinkChange+0x198>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d01a      	beq.n	800c4a4 <netProcessLinkChange+0x60>
      {
         //1000BASE-T
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 800c46e:	4a5c      	ldr	r2, [pc, #368]	@ (800c5e0 <netProcessLinkChange+0x19c>)
 800c470:	4293      	cmp	r3, r2
 800c472:	d024      	beq.n	800c4be <netProcessLinkChange+0x7a>
      {
         //100BASE-TX
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
      }
      else if(interface->linkSpeed == NIC_LINK_SPEED_10MBPS)
 800c474:	4a5b      	ldr	r2, [pc, #364]	@ (800c5e4 <netProcessLinkChange+0x1a0>)
 800c476:	4293      	cmp	r3, r2
 800c478:	d02e      	beq.n	800c4d8 <netProcessLinkChange+0x94>
      {
         //10BASE-T
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
      }
      else if(interface->linkSpeed != NIC_LINK_SPEED_UNKNOWN)
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d139      	bne.n	800c4f2 <netProcessLinkChange+0xae>
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
            interface->linkSpeed);
      }

      //Display duplex mode
      if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 800c47e:	f895 3068 	ldrb.w	r3, [r5, #104]	@ 0x68
 800c482:	2b02      	cmp	r3, #2
 800c484:	d041      	beq.n	800c50a <netProcessLinkChange+0xc6>
      {
         //1000BASE-T
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
      }
      else if(interface->duplexMode == NIC_HALF_DUPLEX_MODE)
 800c486:	2b01      	cmp	r3, #1
 800c488:	d158      	bne.n	800c53c <netProcessLinkChange+0xf8>
      {
         //100BASE-TX
         TRACE_INFO("  Duplex mode = Half-Duplex\r\n");
 800c48a:	f7f4 f951 	bl	8000730 <osSuspendAllTasks>
 800c48e:	4b51      	ldr	r3, [pc, #324]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	68db      	ldr	r3, [r3, #12]
 800c494:	221d      	movs	r2, #29
 800c496:	2101      	movs	r1, #1
 800c498:	4853      	ldr	r0, [pc, #332]	@ (800c5e8 <netProcessLinkChange+0x1a4>)
 800c49a:	f008 faff 	bl	8014a9c <fwrite>
 800c49e:	f7f4 f950 	bl	8000742 <osResumeAllTasks>
 800c4a2:	e04b      	b.n	800c53c <netProcessLinkChange+0xf8>
         TRACE_INFO("  Link speed = 1000 Mbps\r\n");
 800c4a4:	f7f4 f944 	bl	8000730 <osSuspendAllTasks>
 800c4a8:	4b4a      	ldr	r3, [pc, #296]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68db      	ldr	r3, [r3, #12]
 800c4ae:	221a      	movs	r2, #26
 800c4b0:	2101      	movs	r1, #1
 800c4b2:	484e      	ldr	r0, [pc, #312]	@ (800c5ec <netProcessLinkChange+0x1a8>)
 800c4b4:	f008 faf2 	bl	8014a9c <fwrite>
 800c4b8:	f7f4 f943 	bl	8000742 <osResumeAllTasks>
 800c4bc:	e7df      	b.n	800c47e <netProcessLinkChange+0x3a>
         TRACE_INFO("  Link speed = 100 Mbps\r\n");
 800c4be:	f7f4 f937 	bl	8000730 <osSuspendAllTasks>
 800c4c2:	4b44      	ldr	r3, [pc, #272]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68db      	ldr	r3, [r3, #12]
 800c4c8:	2219      	movs	r2, #25
 800c4ca:	2101      	movs	r1, #1
 800c4cc:	4848      	ldr	r0, [pc, #288]	@ (800c5f0 <netProcessLinkChange+0x1ac>)
 800c4ce:	f008 fae5 	bl	8014a9c <fwrite>
 800c4d2:	f7f4 f936 	bl	8000742 <osResumeAllTasks>
 800c4d6:	e7d2      	b.n	800c47e <netProcessLinkChange+0x3a>
         TRACE_INFO("  Link speed = 10 Mbps\r\n");
 800c4d8:	f7f4 f92a 	bl	8000730 <osSuspendAllTasks>
 800c4dc:	4b3d      	ldr	r3, [pc, #244]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	2218      	movs	r2, #24
 800c4e4:	2101      	movs	r1, #1
 800c4e6:	4843      	ldr	r0, [pc, #268]	@ (800c5f4 <netProcessLinkChange+0x1b0>)
 800c4e8:	f008 fad8 	bl	8014a9c <fwrite>
 800c4ec:	f7f4 f929 	bl	8000742 <osResumeAllTasks>
 800c4f0:	e7c5      	b.n	800c47e <netProcessLinkChange+0x3a>
         TRACE_INFO("  Link speed = %" PRIu32 " bps\r\n",
 800c4f2:	f7f4 f91d 	bl	8000730 <osSuspendAllTasks>
 800c4f6:	4b37      	ldr	r3, [pc, #220]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	6e6a      	ldr	r2, [r5, #100]	@ 0x64
 800c4fc:	493e      	ldr	r1, [pc, #248]	@ (800c5f8 <netProcessLinkChange+0x1b4>)
 800c4fe:	68d8      	ldr	r0, [r3, #12]
 800c500:	f008 f8b2 	bl	8014668 <fprintf>
 800c504:	f7f4 f91d 	bl	8000742 <osResumeAllTasks>
 800c508:	e7b9      	b.n	800c47e <netProcessLinkChange+0x3a>
         TRACE_INFO("  Duplex mode = Full-Duplex\r\n");
 800c50a:	f7f4 f911 	bl	8000730 <osSuspendAllTasks>
 800c50e:	4b31      	ldr	r3, [pc, #196]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	221d      	movs	r2, #29
 800c516:	2101      	movs	r1, #1
 800c518:	4838      	ldr	r0, [pc, #224]	@ (800c5fc <netProcessLinkChange+0x1b8>)
 800c51a:	f008 fabf 	bl	8014a9c <fwrite>
 800c51e:	f7f4 f910 	bl	8000742 <osResumeAllTasks>
 800c522:	e00b      	b.n	800c53c <netProcessLinkChange+0xf8>
      }
   }
   else
   {
      //Display link state
      TRACE_INFO("Link is down (%s)...\r\n", interface->name);
 800c524:	f7f4 f904 	bl	8000730 <osSuspendAllTasks>
 800c528:	4b2a      	ldr	r3, [pc, #168]	@ (800c5d4 <netProcessLinkChange+0x190>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f105 0210 	add.w	r2, r5, #16
 800c530:	4933      	ldr	r1, [pc, #204]	@ (800c600 <netProcessLinkChange+0x1bc>)
 800c532:	68d8      	ldr	r0, [r3, #12]
 800c534:	f008 f898 	bl	8014668 <fprintf>
 800c538:	f7f4 f903 	bl	8000742 <osResumeAllTasks>
   IF_MIB_SET_TIME_TICKS(ifTable[interface->index].ifLastChange,
      osGetSystemTime64() / 10);

#if (IPV4_SUPPORT == ENABLED)
   //Notify IPv4 of link state changes
   ipv4LinkChangeEvent(interface);
 800c53c:	4628      	mov	r0, r5
 800c53e:	f7f9 f8a9 	bl	8005694 <ipv4LinkChangeEvent>
#endif

#if (IPV6_SUPPORT == ENABLED)
   //Notify IPv6 of link state changes
   ipv6LinkChangeEvent(interface);
 800c542:	4628      	mov	r0, r5
 800c544:	f7fa fa18 	bl	8006978 <ipv6LinkChangeEvent>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED)
   //Flush DNS cache
   dnsFlushCache(interface);
 800c548:	4628      	mov	r0, r5
 800c54a:	f7f5 ff35 	bl	80023b8 <dnsFlushCache>
   //Perform probing and announcing
   dnsSdResponderLinkChangeEvent(interface->dnsSdResponderContext);
#endif

   //Loop through the link change callback table
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 800c54e:	2400      	movs	r4, #0
 800c550:	e00b      	b.n	800c56a <netProcessLinkChange+0x126>
      {
         //Check whether the network interface matches the current entry
         if(entry->interface == NULL || entry->interface == interface)
         {
            //Invoke user callback function
            entry->callback(interface, interface->linkState, entry->param);
 800c552:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800c556:	4b2b      	ldr	r3, [pc, #172]	@ (800c604 <netProcessLinkChange+0x1c0>)
 800c558:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c55c:	f241 3204 	movw	r2, #4868	@ 0x1304
 800c560:	589a      	ldr	r2, [r3, r2]
 800c562:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c564:	4628      	mov	r0, r5
 800c566:	47b0      	blx	r6
   for(i = 0; i < NET_MAX_LINK_CHANGE_CALLBACKS; i++)
 800c568:	3401      	adds	r4, #1
 800c56a:	2c05      	cmp	r4, #5
 800c56c:	d814      	bhi.n	800c598 <netProcessLinkChange+0x154>
      if(entry->callback != NULL)
 800c56e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 800c572:	4b24      	ldr	r3, [pc, #144]	@ (800c604 <netProcessLinkChange+0x1c0>)
 800c574:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c578:	f503 5398 	add.w	r3, r3, #4864	@ 0x1300
 800c57c:	681e      	ldr	r6, [r3, #0]
 800c57e:	2e00      	cmp	r6, #0
 800c580:	d0f2      	beq.n	800c568 <netProcessLinkChange+0x124>
         if(entry->interface == NULL || entry->interface == interface)
 800c582:	4b20      	ldr	r3, [pc, #128]	@ (800c604 <netProcessLinkChange+0x1c0>)
 800c584:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800c588:	f241 22fc 	movw	r2, #4860	@ 0x12fc
 800c58c:	589b      	ldr	r3, [r3, r2]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d0df      	beq.n	800c552 <netProcessLinkChange+0x10e>
 800c592:	42ab      	cmp	r3, r5
 800c594:	d1e8      	bne.n	800c568 <netProcessLinkChange+0x124>
 800c596:	e7dc      	b.n	800c552 <netProcessLinkChange+0x10e>
         }
      }
   }

   //Loop through opened sockets
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800c598:	2400      	movs	r4, #0
 800c59a:	e004      	b.n	800c5a6 <netProcessLinkChange+0x162>

#if (TCP_SUPPORT == ENABLED)
      //Connection-oriented socket?
      if(socket->type == SOCKET_TYPE_STREAM)
      {
         tcpUpdateEvents(socket);
 800c59c:	4628      	mov	r0, r5
 800c59e:	f003 f97b 	bl	800f898 <tcpUpdateEvents>
 800c5a2:	e00a      	b.n	800c5ba <netProcessLinkChange+0x176>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800c5a4:	3401      	adds	r4, #1
 800c5a6:	2c09      	cmp	r4, #9
 800c5a8:	d813      	bhi.n	800c5d2 <netProcessLinkChange+0x18e>
      socket = &socketTable[i];
 800c5aa:	f44f 731c 	mov.w	r3, #624	@ 0x270
 800c5ae:	4d16      	ldr	r5, [pc, #88]	@ (800c608 <netProcessLinkChange+0x1c4>)
 800c5b0:	fb03 5504 	mla	r5, r3, r4, r5
      if(socket->type == SOCKET_TYPE_STREAM)
 800c5b4:	686b      	ldr	r3, [r5, #4]
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d0f0      	beq.n	800c59c <netProcessLinkChange+0x158>
      }
#endif

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 800c5ba:	4b13      	ldr	r3, [pc, #76]	@ (800c608 <netProcessLinkChange+0x1c4>)
 800c5bc:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800c5c0:	fb02 3304 	mla	r3, r2, r4, r3
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d1ec      	bne.n	800c5a4 <netProcessLinkChange+0x160>
      {
         udpUpdateEvents(socket);
 800c5ca:	4628      	mov	r0, r5
 800c5cc:	f004 fa9c 	bl	8010b08 <udpUpdateEvents>
 800c5d0:	e7e8      	b.n	800c5a4 <netProcessLinkChange+0x160>
      {
         rawSocketUpdateEvents(socket);
      }
#endif
   }
}
 800c5d2:	bd70      	pop	{r4, r5, r6, pc}
 800c5d4:	20000440 	.word	0x20000440
 800c5d8:	0801a4ec 	.word	0x0801a4ec
 800c5dc:	3b9aca00 	.word	0x3b9aca00
 800c5e0:	05f5e100 	.word	0x05f5e100
 800c5e4:	00989680 	.word	0x00989680
 800c5e8:	0801a594 	.word	0x0801a594
 800c5ec:	0801a504 	.word	0x0801a504
 800c5f0:	0801a520 	.word	0x0801a520
 800c5f4:	0801a53c 	.word	0x0801a53c
 800c5f8:	0801a558 	.word	0x0801a558
 800c5fc:	0801a574 	.word	0x0801a574
 800c600:	0801a5b4 	.word	0x0801a5b4
 800c604:	20000b50 	.word	0x20000b50
 800c608:	20001ef8 	.word	0x20001ef8

0800c60c <netTick>:
/**
 * @brief Manage TCP/IP timers
 **/

void netTick(void)
{
 800c60c:	b538      	push	{r3, r4, r5, lr}
   uint_t i;
   NetTimerCallbackEntry *entry;

   //Increment tick counter
   nicTickCounter += NET_TICK_INTERVAL;
 800c60e:	4aa0      	ldr	r2, [pc, #640]	@ (800c890 <netTick+0x284>)
 800c610:	6813      	ldr	r3, [r2, #0]
 800c612:	3364      	adds	r3, #100	@ 0x64
 800c614:	6013      	str	r3, [r2, #0]

   //Handle periodic operations such as polling the link state
   if(nicTickCounter >= NIC_TICK_INTERVAL)
 800c616:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c61a:	d258      	bcs.n	800c6ce <netTick+0xc2>
   }
#endif

#if (IPV4_SUPPORT == ENABLED && ETH_SUPPORT == ENABLED)
   //Increment tick counter
   arpTickCounter += NET_TICK_INTERVAL;
 800c61c:	4a9d      	ldr	r2, [pc, #628]	@ (800c894 <netTick+0x288>)
 800c61e:	6813      	ldr	r3, [r2, #0]
 800c620:	3364      	adds	r3, #100	@ 0x64
 800c622:	6013      	str	r3, [r2, #0]

   //Manage ARP cache
   if(arpTickCounter >= ARP_TICK_INTERVAL)
 800c624:	2bc7      	cmp	r3, #199	@ 0xc7
 800c626:	d86c      	bhi.n	800c702 <netTick+0xf6>
   }
#endif

#if (IPV4_SUPPORT == ENABLED && IPV4_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv4FragTickCounter += NET_TICK_INTERVAL;
 800c628:	4a9b      	ldr	r2, [pc, #620]	@ (800c898 <netTick+0x28c>)
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	3364      	adds	r3, #100	@ 0x64
 800c62e:	6013      	str	r3, [r2, #0]

   //Handle IPv4 fragment reassembly timeout
   if(ipv4FragTickCounter >= IPV4_FRAG_TICK_INTERVAL)
 800c630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c634:	d27f      	bcs.n	800c736 <netTick+0x12a>
#endif

#if (IPV4_SUPPORT == ENABLED && (IGMP_HOST_SUPPORT == ENABLED || \
   IGMP_ROUTER_SUPPORT == ENABLED || IGMP_SNOOPING_SUPPORT == ENABLED))
   //Increment tick counter
   igmpTickCounter += NET_TICK_INTERVAL;
 800c636:	4a99      	ldr	r2, [pc, #612]	@ (800c89c <netTick+0x290>)
 800c638:	6813      	ldr	r3, [r2, #0]
 800c63a:	3364      	adds	r3, #100	@ 0x64
 800c63c:	6013      	str	r3, [r2, #0]

   //Handle IGMP related timers
   if(igmpTickCounter >= IGMP_TICK_INTERVAL)
 800c63e:	2bc7      	cmp	r3, #199	@ 0xc7
 800c640:	f200 8093 	bhi.w	800c76a <netTick+0x15e>
   }
#endif

#if (IPV4_SUPPORT == ENABLED && DHCP_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dhcpClientTickCounter += NET_TICK_INTERVAL;
 800c644:	4a96      	ldr	r2, [pc, #600]	@ (800c8a0 <netTick+0x294>)
 800c646:	6813      	ldr	r3, [r2, #0]
 800c648:	3364      	adds	r3, #100	@ 0x64
 800c64a:	6013      	str	r3, [r2, #0]

   //Handle DHCP client related timers
   if(dhcpClientTickCounter >= DHCP_CLIENT_TICK_INTERVAL)
 800c64c:	2bc7      	cmp	r3, #199	@ 0xc7
 800c64e:	f200 809e 	bhi.w	800c78e <netTick+0x182>
   }
#endif

#if (IPV6_SUPPORT == ENABLED && IPV6_FRAG_SUPPORT == ENABLED)
   //Increment tick counter
   ipv6FragTickCounter += NET_TICK_INTERVAL;
 800c652:	4a94      	ldr	r2, [pc, #592]	@ (800c8a4 <netTick+0x298>)
 800c654:	6813      	ldr	r3, [r2, #0]
 800c656:	3364      	adds	r3, #100	@ 0x64
 800c658:	6013      	str	r3, [r2, #0]

   //Handle IPv6 fragment reassembly timeout
   if(ipv6FragTickCounter >= IPV6_FRAG_TICK_INTERVAL)
 800c65a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c65e:	f080 80b0 	bcs.w	800c7c2 <netTick+0x1b6>
   }
#endif

#if (IPV6_SUPPORT == ENABLED && MLD_NODE_SUPPORT == ENABLED)
   //Increment tick counter
   mldTickCounter += NET_TICK_INTERVAL;
 800c662:	4a91      	ldr	r2, [pc, #580]	@ (800c8a8 <netTick+0x29c>)
 800c664:	6813      	ldr	r3, [r2, #0]
 800c666:	3364      	adds	r3, #100	@ 0x64
 800c668:	6013      	str	r3, [r2, #0]

   //Handle MLD related timers
   if(mldTickCounter >= MLD_TICK_INTERVAL)
 800c66a:	2bc7      	cmp	r3, #199	@ 0xc7
 800c66c:	f200 80c3 	bhi.w	800c7f6 <netTick+0x1ea>
   }
#endif

#if (IPV6_SUPPORT == ENABLED && NDP_SUPPORT == ENABLED)
   //Increment tick counter
   ndpTickCounter += NET_TICK_INTERVAL;
 800c670:	4a8e      	ldr	r2, [pc, #568]	@ (800c8ac <netTick+0x2a0>)
 800c672:	6813      	ldr	r3, [r2, #0]
 800c674:	3364      	adds	r3, #100	@ 0x64
 800c676:	6013      	str	r3, [r2, #0]

   //Handle NDP related timers
   if(ndpTickCounter >= NDP_TICK_INTERVAL)
 800c678:	2bc7      	cmp	r3, #199	@ 0xc7
 800c67a:	f200 80d6 	bhi.w	800c82a <netTick+0x21e>
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Increment tick counter
   tcpTickCounter += NET_TICK_INTERVAL;
 800c67e:	4a8c      	ldr	r2, [pc, #560]	@ (800c8b0 <netTick+0x2a4>)
 800c680:	6813      	ldr	r3, [r2, #0]
 800c682:	3364      	adds	r3, #100	@ 0x64
 800c684:	6013      	str	r3, [r2, #0]

   //Manage TCP related timers
   if(tcpTickCounter >= TCP_TICK_INTERVAL)
 800c686:	2b63      	cmp	r3, #99	@ 0x63
 800c688:	f200 80d1 	bhi.w	800c82e <netTick+0x222>
#endif

#if (DNS_CLIENT_SUPPORT == ENABLED || MDNS_CLIENT_SUPPORT == ENABLED || \
   NBNS_CLIENT_SUPPORT == ENABLED || LLMNR_CLIENT_SUPPORT == ENABLED)
   //Increment tick counter
   dnsTickCounter += NET_TICK_INTERVAL;
 800c68c:	4a89      	ldr	r2, [pc, #548]	@ (800c8b4 <netTick+0x2a8>)
 800c68e:	6813      	ldr	r3, [r2, #0]
 800c690:	3364      	adds	r3, #100	@ 0x64
 800c692:	6013      	str	r3, [r2, #0]

   //Manage DNS cache
   if(dnsTickCounter >= DNS_TICK_INTERVAL)
 800c694:	2bc7      	cmp	r3, #199	@ 0xc7
 800c696:	f200 80d0 	bhi.w	800c83a <netTick+0x22e>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c69a:	2400      	movs	r4, #0
 800c69c:	e0d4      	b.n	800c848 <netTick+0x23c>
         if(netInterface[i].configured)
 800c69e:	4b86      	ldr	r3, [pc, #536]	@ (800c8b8 <netTick+0x2ac>)
 800c6a0:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c6a4:	fb02 3304 	mla	r3, r2, r4, r3
 800c6a8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c6ac:	b933      	cbnz	r3, 800c6bc <netTick+0xb0>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c6ae:	3401      	adds	r4, #1
 800c6b0:	2c00      	cmp	r4, #0
 800c6b2:	d0f4      	beq.n	800c69e <netTick+0x92>
      nicTickCounter = 0;
 800c6b4:	4b76      	ldr	r3, [pc, #472]	@ (800c890 <netTick+0x284>)
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	e7af      	b.n	800c61c <netTick+0x10>
            nicTick(&netInterface[i]);
 800c6bc:	4613      	mov	r3, r2
 800c6be:	fb04 f303 	mul.w	r3, r4, r3
 800c6c2:	3358      	adds	r3, #88	@ 0x58
 800c6c4:	487c      	ldr	r0, [pc, #496]	@ (800c8b8 <netTick+0x2ac>)
 800c6c6:	4418      	add	r0, r3
 800c6c8:	f000 fa1e 	bl	800cb08 <nicTick>
 800c6cc:	e7ef      	b.n	800c6ae <netTick+0xa2>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c6ce:	2400      	movs	r4, #0
 800c6d0:	e7ee      	b.n	800c6b0 <netTick+0xa4>
         if(netInterface[i].configured)
 800c6d2:	4b79      	ldr	r3, [pc, #484]	@ (800c8b8 <netTick+0x2ac>)
 800c6d4:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c6d8:	fb02 3304 	mla	r3, r2, r4, r3
 800c6dc:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c6e0:	b933      	cbnz	r3, 800c6f0 <netTick+0xe4>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c6e2:	3401      	adds	r4, #1
 800c6e4:	2c00      	cmp	r4, #0
 800c6e6:	d0f4      	beq.n	800c6d2 <netTick+0xc6>
      arpTickCounter = 0;
 800c6e8:	4b6a      	ldr	r3, [pc, #424]	@ (800c894 <netTick+0x288>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]
 800c6ee:	e79b      	b.n	800c628 <netTick+0x1c>
            arpTick(&netInterface[i]);
 800c6f0:	4613      	mov	r3, r2
 800c6f2:	fb04 f303 	mul.w	r3, r4, r3
 800c6f6:	3358      	adds	r3, #88	@ 0x58
 800c6f8:	486f      	ldr	r0, [pc, #444]	@ (800c8b8 <netTick+0x2ac>)
 800c6fa:	4418      	add	r0, r3
 800c6fc:	f7f4 fa92 	bl	8000c24 <arpTick>
 800c700:	e7ef      	b.n	800c6e2 <netTick+0xd6>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c702:	2400      	movs	r4, #0
 800c704:	e7ee      	b.n	800c6e4 <netTick+0xd8>
         if(netInterface[i].configured)
 800c706:	4b6c      	ldr	r3, [pc, #432]	@ (800c8b8 <netTick+0x2ac>)
 800c708:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c70c:	fb02 3304 	mla	r3, r2, r4, r3
 800c710:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c714:	b933      	cbnz	r3, 800c724 <netTick+0x118>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c716:	3401      	adds	r4, #1
 800c718:	2c00      	cmp	r4, #0
 800c71a:	d0f4      	beq.n	800c706 <netTick+0xfa>
      ipv4FragTickCounter = 0;
 800c71c:	4b5e      	ldr	r3, [pc, #376]	@ (800c898 <netTick+0x28c>)
 800c71e:	2200      	movs	r2, #0
 800c720:	601a      	str	r2, [r3, #0]
 800c722:	e788      	b.n	800c636 <netTick+0x2a>
            ipv4FragTick(&netInterface[i]);
 800c724:	4613      	mov	r3, r2
 800c726:	fb04 f303 	mul.w	r3, r4, r3
 800c72a:	3358      	adds	r3, #88	@ 0x58
 800c72c:	4862      	ldr	r0, [pc, #392]	@ (800c8b8 <netTick+0x2ac>)
 800c72e:	4418      	add	r0, r3
 800c730:	f7f9 fad7 	bl	8005ce2 <ipv4FragTick>
 800c734:	e7ef      	b.n	800c716 <netTick+0x10a>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c736:	2400      	movs	r4, #0
 800c738:	e7ee      	b.n	800c718 <netTick+0x10c>
         if(netInterface[i].configured)
 800c73a:	4b5f      	ldr	r3, [pc, #380]	@ (800c8b8 <netTick+0x2ac>)
 800c73c:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c740:	fb02 3304 	mla	r3, r2, r4, r3
 800c744:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c748:	b933      	cbnz	r3, 800c758 <netTick+0x14c>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c74a:	3401      	adds	r4, #1
 800c74c:	2c00      	cmp	r4, #0
 800c74e:	d0f4      	beq.n	800c73a <netTick+0x12e>
      igmpTickCounter = 0;
 800c750:	4b52      	ldr	r3, [pc, #328]	@ (800c89c <netTick+0x290>)
 800c752:	2200      	movs	r2, #0
 800c754:	601a      	str	r2, [r3, #0]
 800c756:	e775      	b.n	800c644 <netTick+0x38>
            igmpTick(&netInterface[i]);
 800c758:	4613      	mov	r3, r2
 800c75a:	fb04 f303 	mul.w	r3, r4, r3
 800c75e:	3358      	adds	r3, #88	@ 0x58
 800c760:	4855      	ldr	r0, [pc, #340]	@ (800c8b8 <netTick+0x2ac>)
 800c762:	4418      	add	r0, r3
 800c764:	f7f7 ffc4 	bl	80046f0 <igmpTick>
 800c768:	e7ef      	b.n	800c74a <netTick+0x13e>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c76a:	2400      	movs	r4, #0
 800c76c:	e7ee      	b.n	800c74c <netTick+0x140>
         dhcpClientTick(netInterface[i].dhcpClientContext);
 800c76e:	4b52      	ldr	r3, [pc, #328]	@ (800c8b8 <netTick+0x2ac>)
 800c770:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c774:	fb02 3304 	mla	r3, r2, r4, r3
 800c778:	f8d3 07f8 	ldr.w	r0, [r3, #2040]	@ 0x7f8
 800c77c:	f7f4 ff7c 	bl	8001678 <dhcpClientTick>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c780:	3401      	adds	r4, #1
 800c782:	2c00      	cmp	r4, #0
 800c784:	d0f3      	beq.n	800c76e <netTick+0x162>
      dhcpClientTickCounter = 0;
 800c786:	4b46      	ldr	r3, [pc, #280]	@ (800c8a0 <netTick+0x294>)
 800c788:	2200      	movs	r2, #0
 800c78a:	601a      	str	r2, [r3, #0]
 800c78c:	e761      	b.n	800c652 <netTick+0x46>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c78e:	2400      	movs	r4, #0
 800c790:	e7f7      	b.n	800c782 <netTick+0x176>
         if(netInterface[i].configured)
 800c792:	4b49      	ldr	r3, [pc, #292]	@ (800c8b8 <netTick+0x2ac>)
 800c794:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c798:	fb02 3304 	mla	r3, r2, r4, r3
 800c79c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c7a0:	b933      	cbnz	r3, 800c7b0 <netTick+0x1a4>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c7a2:	3401      	adds	r4, #1
 800c7a4:	2c00      	cmp	r4, #0
 800c7a6:	d0f4      	beq.n	800c792 <netTick+0x186>
      ipv6FragTickCounter = 0;
 800c7a8:	4b3e      	ldr	r3, [pc, #248]	@ (800c8a4 <netTick+0x298>)
 800c7aa:	2200      	movs	r2, #0
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	e758      	b.n	800c662 <netTick+0x56>
            ipv6FragTick(&netInterface[i]);
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	fb04 f303 	mul.w	r3, r4, r3
 800c7b6:	3358      	adds	r3, #88	@ 0x58
 800c7b8:	483f      	ldr	r0, [pc, #252]	@ (800c8b8 <netTick+0x2ac>)
 800c7ba:	4418      	add	r0, r3
 800c7bc:	f7fa ff07 	bl	80075ce <ipv6FragTick>
 800c7c0:	e7ef      	b.n	800c7a2 <netTick+0x196>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c7c2:	2400      	movs	r4, #0
 800c7c4:	e7ee      	b.n	800c7a4 <netTick+0x198>
         if(netInterface[i].configured)
 800c7c6:	4b3c      	ldr	r3, [pc, #240]	@ (800c8b8 <netTick+0x2ac>)
 800c7c8:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c7cc:	fb02 3304 	mla	r3, r2, r4, r3
 800c7d0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c7d4:	b933      	cbnz	r3, 800c7e4 <netTick+0x1d8>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c7d6:	3401      	adds	r4, #1
 800c7d8:	2c00      	cmp	r4, #0
 800c7da:	d0f4      	beq.n	800c7c6 <netTick+0x1ba>
      mldTickCounter = 0;
 800c7dc:	4b32      	ldr	r3, [pc, #200]	@ (800c8a8 <netTick+0x29c>)
 800c7de:	2200      	movs	r2, #0
 800c7e0:	601a      	str	r2, [r3, #0]
 800c7e2:	e745      	b.n	800c670 <netTick+0x64>
            mldTick(&netInterface[i]);
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	fb04 f303 	mul.w	r3, r4, r3
 800c7ea:	3358      	adds	r3, #88	@ 0x58
 800c7ec:	4832      	ldr	r0, [pc, #200]	@ (800c8b8 <netTick+0x2ac>)
 800c7ee:	4418      	add	r0, r3
 800c7f0:	f7fc fb3c 	bl	8008e6c <mldTick>
 800c7f4:	e7ef      	b.n	800c7d6 <netTick+0x1ca>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c7f6:	2400      	movs	r4, #0
 800c7f8:	e7ee      	b.n	800c7d8 <netTick+0x1cc>
         if(netInterface[i].configured)
 800c7fa:	4b2f      	ldr	r3, [pc, #188]	@ (800c8b8 <netTick+0x2ac>)
 800c7fc:	f241 22a4 	movw	r2, #4772	@ 0x12a4
 800c800:	fb02 3304 	mla	r3, r2, r4, r3
 800c804:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800c808:	b933      	cbnz	r3, 800c818 <netTick+0x20c>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c80a:	3401      	adds	r4, #1
 800c80c:	2c00      	cmp	r4, #0
 800c80e:	d0f4      	beq.n	800c7fa <netTick+0x1ee>
      ndpTickCounter = 0;
 800c810:	4b26      	ldr	r3, [pc, #152]	@ (800c8ac <netTick+0x2a0>)
 800c812:	2200      	movs	r2, #0
 800c814:	601a      	str	r2, [r3, #0]
 800c816:	e732      	b.n	800c67e <netTick+0x72>
            ndpTick(&netInterface[i]);
 800c818:	4613      	mov	r3, r2
 800c81a:	fb04 f303 	mul.w	r3, r4, r3
 800c81e:	3358      	adds	r3, #88	@ 0x58
 800c820:	4825      	ldr	r0, [pc, #148]	@ (800c8b8 <netTick+0x2ac>)
 800c822:	4418      	add	r0, r3
 800c824:	f7fe f966 	bl	800aaf4 <ndpTick>
 800c828:	e7ef      	b.n	800c80a <netTick+0x1fe>
      for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800c82a:	2400      	movs	r4, #0
 800c82c:	e7ee      	b.n	800c80c <netTick+0x200>
      tcpTick();
 800c82e:	f003 ffad 	bl	801078c <tcpTick>
      tcpTickCounter = 0;
 800c832:	4b1f      	ldr	r3, [pc, #124]	@ (800c8b0 <netTick+0x2a4>)
 800c834:	2200      	movs	r2, #0
 800c836:	601a      	str	r2, [r3, #0]
 800c838:	e728      	b.n	800c68c <netTick+0x80>
   {
      //DNS timer handler
      dnsTick();
 800c83a:	f7f5 fe45 	bl	80024c8 <dnsTick>
      //Reset tick counter
      dnsTickCounter = 0;
 800c83e:	4b1d      	ldr	r3, [pc, #116]	@ (800c8b4 <netTick+0x2a8>)
 800c840:	2200      	movs	r2, #0
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	e729      	b.n	800c69a <netTick+0x8e>
      dnsSdResponderTickCounter = 0;
   }
#endif

   //Loop through the timer callback table
   for(i = 0; i < NET_MAX_TIMER_CALLBACKS; i++)
 800c846:	3401      	adds	r4, #1
 800c848:	2c05      	cmp	r4, #5
 800c84a:	d820      	bhi.n	800c88e <netTick+0x282>
   {
      //Point to the current entry
      entry = &netContext.timerCallbacks[i];

      //Any registered callback?
      if(entry->callback != NULL)
 800c84c:	4b1a      	ldr	r3, [pc, #104]	@ (800c8b8 <netTick+0x2ac>)
 800c84e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800c852:	f241 324c 	movw	r2, #4940	@ 0x134c
 800c856:	5899      	ldr	r1, [r3, r2]
 800c858:	2900      	cmp	r1, #0
 800c85a:	d0f4      	beq.n	800c846 <netTick+0x23a>
      {
         //Increment timer value
         entry->timerValue += NET_TICK_INTERVAL;
 800c85c:	f504 729a 	add.w	r2, r4, #308	@ 0x134
 800c860:	4b15      	ldr	r3, [pc, #84]	@ (800c8b8 <netTick+0x2ac>)
 800c862:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800c866:	685a      	ldr	r2, [r3, #4]
 800c868:	3264      	adds	r2, #100	@ 0x64
 800c86a:	605a      	str	r2, [r3, #4]

         //Timer period elapsed?
         if(entry->timerValue >= entry->timerPeriod)
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	429a      	cmp	r2, r3
 800c870:	d3e9      	bcc.n	800c846 <netTick+0x23a>
         {
            //Invoke user callback function
            entry->callback(entry->param);
 800c872:	4d11      	ldr	r5, [pc, #68]	@ (800c8b8 <netTick+0x2ac>)
 800c874:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 800c878:	f241 3350 	movw	r3, #4944	@ 0x1350
 800c87c:	58d0      	ldr	r0, [r2, r3]
 800c87e:	4788      	blx	r1
            //Reload timer
            entry->timerValue = 0;
 800c880:	f504 739a 	add.w	r3, r4, #308	@ 0x134
 800c884:	eb05 1503 	add.w	r5, r5, r3, lsl #4
 800c888:	2300      	movs	r3, #0
 800c88a:	606b      	str	r3, [r5, #4]
 800c88c:	e7db      	b.n	800c846 <netTick+0x23a>
         }
      }
   }
}
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	20001ef4 	.word	0x20001ef4
 800c894:	20000754 	.word	0x20000754
 800c898:	20000b18 	.word	0x20000b18
 800c89c:	20000b00 	.word	0x20000b00
 800c8a0:	20000758 	.word	0x20000758
 800c8a4:	20000b44 	.word	0x20000b44
 800c8a8:	20000b48 	.word	0x20000b48
 800c8ac:	20000b4c 	.word	0x20000b4c
 800c8b0:	20003768 	.word	0x20003768
 800c8b4:	20000afc 	.word	0x20000afc
 800c8b8:	20000b50 	.word	0x20000b50

0800c8bc <netStartTimer>:
 * @param[in] timer Pointer to the timer structure
 * @param[in] interval Time interval
 **/

void netStartTimer(NetTimer *timer, systime_t interval)
{
 800c8bc:	b538      	push	{r3, r4, r5, lr}
 800c8be:	4604      	mov	r4, r0
 800c8c0:	460d      	mov	r5, r1
   //Start timer
   timer->startTime = osGetSystemTime();
 800c8c2:	f7f3 ff9b 	bl	80007fc <osGetSystemTime>
 800c8c6:	6060      	str	r0, [r4, #4]
   timer->interval = interval;
 800c8c8:	60a5      	str	r5, [r4, #8]
   timer->running = TRUE;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	6023      	str	r3, [r4, #0]
}
 800c8ce:	bd38      	pop	{r3, r4, r5, pc}

0800c8d0 <netStopTimer>:
 **/

void netStopTimer(NetTimer *timer)
{
   //Stop timer
   timer->running = FALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	6003      	str	r3, [r0, #0]
}
 800c8d4:	4770      	bx	lr

0800c8d6 <netTimerRunning>:

bool_t netTimerRunning(NetTimer *timer)
{
   //Return TRUE if the timer is running
   return timer->running;
}
 800c8d6:	6800      	ldr	r0, [r0, #0]
 800c8d8:	4770      	bx	lr

0800c8da <netTimerExpired>:
 * @param[in] timer Pointer to the timer structure
 * @return TRUE if the timer has expired, else FALSE
 **/

bool_t netTimerExpired(NetTimer *timer)
{
 800c8da:	b510      	push	{r4, lr}
 800c8dc:	4604      	mov	r4, r0
   systime_t time;

   //Initialize flag
   expired = FALSE;
   //Get current time
   time = osGetSystemTime();
 800c8de:	f7f3 ff8d 	bl	80007fc <osGetSystemTime>
 800c8e2:	4603      	mov	r3, r0

   //Check whether the timer is running
   if(timer->running)
 800c8e4:	6820      	ldr	r0, [r4, #0]
 800c8e6:	b128      	cbz	r0, 800c8f4 <netTimerExpired+0x1a>
   {
      //Check whether the specified time interval has elapsed
      if((time - timer->startTime) >= timer->interval)
 800c8e8:	6862      	ldr	r2, [r4, #4]
 800c8ea:	1a98      	subs	r0, r3, r2
 800c8ec:	68a3      	ldr	r3, [r4, #8]
 800c8ee:	4298      	cmp	r0, r3
 800c8f0:	d201      	bcs.n	800c8f6 <netTimerExpired+0x1c>
   expired = FALSE;
 800c8f2:	2000      	movs	r0, #0
      }
   }

   //Return TRUE if the timer has expired
   return expired;
}
 800c8f4:	bd10      	pop	{r4, pc}
         expired = TRUE;
 800c8f6:	2001      	movs	r0, #1
   return expired;
 800c8f8:	e7fc      	b.n	800c8f4 <netTimerExpired+0x1a>

0800c8fa <netGetRemainingTime>:
 * @param[in] timer Pointer to the timer structure
 * @return Remaining time
 **/

systime_t netGetRemainingTime(NetTimer *timer)
{
 800c8fa:	b510      	push	{r4, lr}
 800c8fc:	4604      	mov	r4, r0
   systime_t remaining;

   //Initialize variable
   remaining = 0;
   //Get current time
   time = osGetSystemTime();
 800c8fe:	f7f3 ff7d 	bl	80007fc <osGetSystemTime>

   //Check whether the timer is running
   if(timer->running)
 800c902:	6823      	ldr	r3, [r4, #0]
 800c904:	b13b      	cbz	r3, 800c916 <netGetRemainingTime+0x1c>
   {
      //Calculate remaining time
      if((time - timer->startTime) < timer->interval)
 800c906:	6863      	ldr	r3, [r4, #4]
 800c908:	1ac1      	subs	r1, r0, r3
 800c90a:	68a2      	ldr	r2, [r4, #8]
 800c90c:	4291      	cmp	r1, r2
 800c90e:	d204      	bcs.n	800c91a <netGetRemainingTime+0x20>
      {
         remaining = timer->startTime + timer->interval - time;
 800c910:	4413      	add	r3, r2
 800c912:	1a18      	subs	r0, r3, r0
 800c914:	e000      	b.n	800c918 <netGetRemainingTime+0x1e>
   remaining = 0;
 800c916:	2000      	movs	r0, #0
      }
   }

   //Return remaining time
   return remaining;
}
 800c918:	bd10      	pop	{r4, pc}
   remaining = 0;
 800c91a:	2000      	movs	r0, #0
   return remaining;
 800c91c:	e7fc      	b.n	800c918 <netGetRemainingTime+0x1e>

0800c91e <netGenerateRandBit>:
 * @param[in] state Pointer to the PRNG state
 * @return Key stream bit
 **/

uint32_t netGenerateRandBit(NetRandState *state)
{
 800c91e:	b570      	push	{r4, r5, r6, lr}
 800c920:	4684      	mov	ip, r0
   uint8_t t2;
   uint8_t t3;
   uint8_t z;

   //Let t1 = s66 + s93
   t1 = NET_RAND_GET_BIT(state->s, 66);
 800c922:	7a83      	ldrb	r3, [r0, #10]
   t1 ^= NET_RAND_GET_BIT(state->s, 93);
 800c924:	f890 e00d 	ldrb.w	lr, [r0, #13]
 800c928:	ea4f 151e 	mov.w	r5, lr, lsr #4
 800c92c:	ea85 0553 	eor.w	r5, r5, r3, lsr #1

   //Let t2 = s162 + s177
   t2 = NET_RAND_GET_BIT(state->s, 162);
 800c930:	7d82      	ldrb	r2, [r0, #22]
   t2 ^= NET_RAND_GET_BIT(state->s, 177);
 800c932:	7e01      	ldrb	r1, [r0, #24]
 800c934:	ea81 0152 	eor.w	r1, r1, r2, lsr #1

   //Let t3 = s243 + s288
   t3 = NET_RAND_GET_BIT(state->s, 243);
 800c938:	f890 4020 	ldrb.w	r4, [r0, #32]
 800c93c:	f3c4 0480 	ubfx	r4, r4, #2, #1
   t3 ^= NET_RAND_GET_BIT(state->s, 288);
 800c940:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800c944:	ea84 14d2 	eor.w	r4, r4, r2, lsr #7

   //Generate a key stream bit z
   z = t1 ^ t2 ^ t3;
 800c948:	ea85 0001 	eor.w	r0, r5, r1
 800c94c:	f000 0001 	and.w	r0, r0, #1
 800c950:	4060      	eors	r0, r4

   //Let t1 = t1 + s91.s92 + s171
   t1 ^= NET_RAND_GET_BIT(state->s, 91) & NET_RAND_GET_BIT(state->s, 92);
 800c952:	ea4f 06de 	mov.w	r6, lr, lsr #3
 800c956:	ea06 069e 	and.w	r6, r6, lr, lsr #2
   t1 ^= NET_RAND_GET_BIT(state->s, 171);
 800c95a:	f89c e017 	ldrb.w	lr, [ip, #23]
 800c95e:	406e      	eors	r6, r5
 800c960:	ea86 069e 	eor.w	r6, r6, lr, lsr #2
 800c964:	f006 0601 	and.w	r6, r6, #1

   //Let t2 = t2 + s175.s176 + s264
   t2 ^= NET_RAND_GET_BIT(state->s, 175) & NET_RAND_GET_BIT(state->s, 176);
 800c968:	ea4f 15de 	mov.w	r5, lr, lsr #7
 800c96c:	ea05 159e 	and.w	r5, r5, lr, lsr #6
   t2 ^= NET_RAND_GET_BIT(state->s, 264);
 800c970:	f89c e022 	ldrb.w	lr, [ip, #34]	@ 0x22
 800c974:	404d      	eors	r5, r1
 800c976:	f005 0501 	and.w	r5, r5, #1
 800c97a:	ea85 15de 	eor.w	r5, r5, lr, lsr #7

   //Let t3 = t3 + s286.s287 + s69
   t3 ^= NET_RAND_GET_BIT(state->s, 286) & NET_RAND_GET_BIT(state->s, 287);
 800c97e:	0991      	lsrs	r1, r2, #6
 800c980:	ea01 1252 	and.w	r2, r1, r2, lsr #5
   t3 ^= NET_RAND_GET_BIT(state->s, 69);
 800c984:	f002 0201 	and.w	r2, r2, #1
 800c988:	4054      	eors	r4, r2
 800c98a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800c98e:	405c      	eors	r4, r3

   //Rotate the internal state
   for(i = 35; i > 0; i--)
 800c990:	2323      	movs	r3, #35	@ 0x23
 800c992:	e00b      	b.n	800c9ac <netGenerateRandBit+0x8e>
   {
      state->s[i] = (state->s[i] << 1) | (state->s[i - 1] >> 7);
 800c994:	eb0c 0103 	add.w	r1, ip, r3
 800c998:	788a      	ldrb	r2, [r1, #2]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	eb0c 0e03 	add.w	lr, ip, r3
 800c9a0:	f89e e002 	ldrb.w	lr, [lr, #2]
 800c9a4:	0052      	lsls	r2, r2, #1
 800c9a6:	ea42 12de 	orr.w	r2, r2, lr, lsr #7
 800c9aa:	708a      	strb	r2, [r1, #2]
   for(i = 35; i > 0; i--)
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f1      	bne.n	800c994 <netGenerateRandBit+0x76>
   }

   state->s[0] = state->s[0] << 1;
 800c9b0:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800c9b4:	005b      	lsls	r3, r3, #1
 800c9b6:	b2db      	uxtb	r3, r3
 800c9b8:	f88c 3002 	strb.w	r3, [ip, #2]

   //Let s1 = t3
   NET_RAND_STATE_SET_BIT(state->s, 1, t3);
 800c9bc:	4323      	orrs	r3, r4
 800c9be:	f88c 3002 	strb.w	r3, [ip, #2]
   //Let s94 = t1
   NET_RAND_STATE_SET_BIT(state->s, 94, t1);
 800c9c2:	f89c 300d 	ldrb.w	r3, [ip, #13]
 800c9c6:	f023 0320 	bic.w	r3, r3, #32
 800c9ca:	ea43 1346 	orr.w	r3, r3, r6, lsl #5
 800c9ce:	f88c 300d 	strb.w	r3, [ip, #13]
   //Let s178 = t2
   NET_RAND_STATE_SET_BIT(state->s, 178, t2);
 800c9d2:	f89c 3018 	ldrb.w	r3, [ip, #24]
 800c9d6:	f023 0302 	bic.w	r3, r3, #2
 800c9da:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
 800c9de:	f88c 3018 	strb.w	r3, [ip, #24]

   //Return one bit of key stream
   return z;
}
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}

0800c9e4 <netInitRand>:
{
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	b084      	sub	sp, #16
   state->counter++;
 800c9e8:	4c2e      	ldr	r4, [pc, #184]	@ (800caa4 <netInitRand+0xc0>)
 800c9ea:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	b29b      	uxth	r3, r3
 800c9f0:	8623      	strh	r3, [r4, #48]	@ 0x30
   eui64CopyAddr(iv, &netInterface[0].eui64);
 800c9f2:	aa01      	add	r2, sp, #4
 800c9f4:	f104 0160 	add.w	r1, r4, #96	@ 0x60
 800c9f8:	c903      	ldmia	r1, {r0, r1}
 800c9fa:	e882 0003 	stmia.w	r2, {r0, r1}
   STORE16BE(state->counter, iv + sizeof(Eui64));
 800c9fe:	0a1a      	lsrs	r2, r3, #8
 800ca00:	f88d 200c 	strb.w	r2, [sp, #12]
 800ca04:	f88d 300d 	strb.w	r3, [sp, #13]
   osMemset(state->s, 0, 36);
 800ca08:	2224      	movs	r2, #36	@ 0x24
 800ca0a:	2100      	movs	r1, #0
 800ca0c:	f104 0032 	add.w	r0, r4, #50	@ 0x32
 800ca10:	f008 f938 	bl	8014c84 <memset>
   for(i = 0; i < 10; i++)
 800ca14:	2200      	movs	r2, #0
 800ca16:	e006      	b.n	800ca26 <netInitRand+0x42>
      state->s[i] = netContext.randSeed[i];
 800ca18:	4b22      	ldr	r3, [pc, #136]	@ (800caa4 <netInitRand+0xc0>)
 800ca1a:	4413      	add	r3, r2
 800ca1c:	f893 1020 	ldrb.w	r1, [r3, #32]
 800ca20:	f883 1032 	strb.w	r1, [r3, #50]	@ 0x32
   for(i = 0; i < 10; i++)
 800ca24:	3201      	adds	r2, #1
 800ca26:	2a09      	cmp	r2, #9
 800ca28:	d9f6      	bls.n	800ca18 <netInitRand+0x34>
   for(i = 0; i < 10; i++)
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	e00b      	b.n	800ca46 <netInitRand+0x62>
      state->s[12 + i] = iv[i];
 800ca2e:	f103 000c 	add.w	r0, r3, #12
 800ca32:	f103 0210 	add.w	r2, r3, #16
 800ca36:	446a      	add	r2, sp
 800ca38:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 800ca3c:	4a19      	ldr	r2, [pc, #100]	@ (800caa4 <netInitRand+0xc0>)
 800ca3e:	4402      	add	r2, r0
 800ca40:	f882 1032 	strb.w	r1, [r2, #50]	@ 0x32
   for(i = 0; i < 10; i++)
 800ca44:	3301      	adds	r3, #1
 800ca46:	2b09      	cmp	r3, #9
 800ca48:	d9f1      	bls.n	800ca2e <netInitRand+0x4a>
   for(i = 11; i < 22; i++)
 800ca4a:	210b      	movs	r1, #11
 800ca4c:	e00d      	b.n	800ca6a <netInitRand+0x86>
      state->s[i] = (state->s[i + 1] << 5) | (state->s[i] >> 3);
 800ca4e:	1c48      	adds	r0, r1, #1
 800ca50:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <netInitRand+0xc0>)
 800ca52:	181a      	adds	r2, r3, r0
 800ca54:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800ca58:	440b      	add	r3, r1
 800ca5a:	f893 1032 	ldrb.w	r1, [r3, #50]	@ 0x32
 800ca5e:	0152      	lsls	r2, r2, #5
 800ca60:	ea42 02d1 	orr.w	r2, r2, r1, lsr #3
 800ca64:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
   for(i = 11; i < 22; i++)
 800ca68:	4601      	mov	r1, r0
 800ca6a:	2915      	cmp	r1, #21
 800ca6c:	d9ef      	bls.n	800ca4e <netInitRand+0x6a>
   NET_RAND_STATE_SET_BIT(state->s, 286, 1);
 800ca6e:	4a0d      	ldr	r2, [pc, #52]	@ (800caa4 <netInitRand+0xc0>)
 800ca70:	f892 3055 	ldrb.w	r3, [r2, #85]	@ 0x55
 800ca74:	f043 0120 	orr.w	r1, r3, #32
 800ca78:	f882 1055 	strb.w	r1, [r2, #85]	@ 0x55
   NET_RAND_STATE_SET_BIT(state->s, 287, 1);
 800ca7c:	f043 0160 	orr.w	r1, r3, #96	@ 0x60
 800ca80:	f882 1055 	strb.w	r1, [r2, #85]	@ 0x55
   NET_RAND_STATE_SET_BIT(state->s, 288, 1);
 800ca84:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800ca88:	f882 3055 	strb.w	r3, [r2, #85]	@ 0x55
   for(i = 0; i < (4 * 288); i++)
 800ca8c:	2400      	movs	r4, #0
 800ca8e:	e003      	b.n	800ca98 <netInitRand+0xb4>
      netGenerateRandBit(state);
 800ca90:	4805      	ldr	r0, [pc, #20]	@ (800caa8 <netInitRand+0xc4>)
 800ca92:	f7ff ff44 	bl	800c91e <netGenerateRandBit>
   for(i = 0; i < (4 * 288); i++)
 800ca96:	3401      	adds	r4, #1
 800ca98:	f5b4 6f90 	cmp.w	r4, #1152	@ 0x480
 800ca9c:	d3f8      	bcc.n	800ca90 <netInitRand+0xac>
}
 800ca9e:	b004      	add	sp, #16
 800caa0:	bd10      	pop	{r4, pc}
 800caa2:	bf00      	nop
 800caa4:	20000b50 	.word	0x20000b50
 800caa8:	20000b80 	.word	0x20000b80

0800caac <netGenerateRand>:
{
 800caac:	b538      	push	{r3, r4, r5, lr}
   value = 0;
 800caae:	2500      	movs	r5, #0
   for(i = 0; i < 32; i++)
 800cab0:	462c      	mov	r4, r5
 800cab2:	e005      	b.n	800cac0 <netGenerateRand+0x14>
      value |= netGenerateRandBit(&netContext.randState) << i;
 800cab4:	4805      	ldr	r0, [pc, #20]	@ (800cacc <netGenerateRand+0x20>)
 800cab6:	f7ff ff32 	bl	800c91e <netGenerateRandBit>
 800caba:	40a0      	lsls	r0, r4
 800cabc:	4305      	orrs	r5, r0
   for(i = 0; i < 32; i++)
 800cabe:	3401      	adds	r4, #1
 800cac0:	2c1f      	cmp	r4, #31
 800cac2:	d9f7      	bls.n	800cab4 <netGenerateRand+0x8>
   return value + netContext.entropy;
 800cac4:	4b02      	ldr	r3, [pc, #8]	@ (800cad0 <netGenerateRand+0x24>)
 800cac6:	6998      	ldr	r0, [r3, #24]
}
 800cac8:	4428      	add	r0, r5
 800caca:	bd38      	pop	{r3, r4, r5, pc}
 800cacc:	20000b80 	.word	0x20000b80
 800cad0:	20000b50 	.word	0x20000b50

0800cad4 <netGenerateRandRange>:
{
 800cad4:	b538      	push	{r3, r4, r5, lr}
 800cad6:	4604      	mov	r4, r0
   if(max > min)
 800cad8:	4281      	cmp	r1, r0
 800cada:	d801      	bhi.n	800cae0 <netGenerateRandRange+0xc>
}
 800cadc:	4620      	mov	r0, r4
 800cade:	bd38      	pop	{r3, r4, r5, pc}
 800cae0:	460d      	mov	r5, r1
      value = min + (netGenerateRand() % (max - min + 1));
 800cae2:	f7ff ffe3 	bl	800caac <netGenerateRand>
 800cae6:	1b2d      	subs	r5, r5, r4
 800cae8:	3501      	adds	r5, #1
 800caea:	fbb0 f3f5 	udiv	r3, r0, r5
 800caee:	fb05 0013 	mls	r0, r5, r3, r0
 800caf2:	4404      	add	r4, r0
 800caf4:	e7f2      	b.n	800cadc <netGenerateRandRange+0x8>

0800caf6 <nicGetLogicalInterface>:
   }
#endif

   //Return a pointer to the logical interface
   return interface;
}
 800caf6:	4770      	bx	lr

0800caf8 <nicGetPhysicalInterface>:
   }
#endif

   //Return a pointer to the physical interface
   return interface;
}
 800caf8:	4770      	bx	lr

0800cafa <nicGetSwitchPort>:
   return interface->port;
#else
   //Ethernet port multiplication (VLAN or tail tagging) is not supported
   return 0;
#endif
}
 800cafa:	2000      	movs	r0, #0
 800cafc:	4770      	bx	lr

0800cafe <nicIsParentInterface>:
   return flag;
#else
   //Virtual interfaces are not supported
   return (interface == parent) ? TRUE : FALSE;
#endif
}
 800cafe:	4281      	cmp	r1, r0
 800cb00:	bf14      	ite	ne
 800cb02:	2000      	movne	r0, #0
 800cb04:	2001      	moveq	r0, #1
 800cb06:	4770      	bx	lr

0800cb08 <nicTick>:
 **/

void nicTick(NetInterface *interface)
{
   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 800cb08:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cb0a:	b173      	cbz	r3, 800cb2a <nicTick+0x22>
{
 800cb0c:	b510      	push	{r4, lr}
 800cb0e:	4604      	mov	r4, r0
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	4798      	blx	r3

      //Handle periodic operations
      interface->nicDriver->tick(interface);
 800cb14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	4620      	mov	r0, r4
 800cb1a:	4798      	blx	r3

      //Re-enable interrupts if necessary
      if(interface->configured)
 800cb1c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cb1e:	b11b      	cbz	r3, 800cb28 <nicTick+0x20>
      {
         interface->nicDriver->enableIrq(interface);
 800cb20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	4620      	mov	r0, r4
 800cb26:	4798      	blx	r3
      }
   }
}
 800cb28:	bd10      	pop	{r4, pc}
 800cb2a:	4770      	bx	lr

0800cb2c <nicSendPacket>:
 * @return Error code
 **/

error_t nicSendPacket(NetInterface *interface, const NetBuffer *buffer,
   size_t offset, NetTxAncillary *ancillary)
{
 800cb2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb30:	4604      	mov	r4, r0
 800cb32:	460d      	mov	r5, r1
 800cb34:	4616      	mov	r6, r2
 800cb36:	461f      	mov	r7, r3
   TRACE_DEBUG("Sending packet (%" PRIuSIZE " bytes)...\r\n", length);
   TRACE_DEBUG_NET_BUFFER("  ", buffer, offset, length);
#endif

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 800cb38:	f7f3 fe60 	bl	80007fc <osGetSystemTime>
 800cb3c:	4b17      	ldr	r3, [pc, #92]	@ (800cb9c <nicSendPacket+0x70>)
 800cb3e:	699a      	ldr	r2, [r3, #24]
 800cb40:	4410      	add	r0, r2
 800cb42:	6198      	str	r0, [r3, #24]

   //Check whether the interface is enabled for operation
   if(interface->configured && interface->nicDriver != NULL)
 800cb44:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cb46:	b313      	cbz	r3, 800cb8e <nicSendPacket+0x62>
 800cb48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb4a:	b323      	cbz	r3, 800cb96 <nicSendPacket+0x6a>
   {
      //Loopback interface?
      if(interface->nicDriver->type == NIC_TYPE_LOOPBACK)
 800cb4c:	781b      	ldrb	r3, [r3, #0]
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d113      	bne.n	800cb7a <nicSendPacket+0x4e>

      //Check whether the specified event is in signaled state
      if(status)
      {
         //Disable interrupts
         interface->nicDriver->disableIrq(interface);
 800cb52:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb54:	695b      	ldr	r3, [r3, #20]
 800cb56:	4620      	mov	r0, r4
 800cb58:	4798      	blx	r3

         //Send the packet
         error = interface->nicDriver->sendPacket(interface, buffer, offset,
 800cb5a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb5c:	f8d3 801c 	ldr.w	r8, [r3, #28]
 800cb60:	463b      	mov	r3, r7
 800cb62:	4632      	mov	r2, r6
 800cb64:	4629      	mov	r1, r5
 800cb66:	4620      	mov	r0, r4
 800cb68:	47c0      	blx	r8
 800cb6a:	4605      	mov	r5, r0
            ancillary);

         //Re-enable interrupts if necessary
         if(interface->configured)
 800cb6c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cb6e:	b17b      	cbz	r3, 800cb90 <nicSendPacket+0x64>
         {
            interface->nicDriver->enableIrq(interface);
 800cb70:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cb72:	691b      	ldr	r3, [r3, #16]
 800cb74:	4620      	mov	r0, r4
 800cb76:	4798      	blx	r3
 800cb78:	e00a      	b.n	800cb90 <nicSendPacket+0x64>
         status = osWaitForEvent(&interface->nicTxEvent, NIC_MAX_BLOCKING_TIME);
 800cb7a:	f04f 31ff 	mov.w	r1, #4294967295
 800cb7e:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800cb82:	f7f3 fe09 	bl	8000798 <osWaitForEvent>
      if(status)
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d1e3      	bne.n	800cb52 <nicSendPacket+0x26>
         }
      }
      else
      {
         //If the transmitter is busy, then drop the packet
         error = NO_ERROR;
 800cb8a:	2500      	movs	r5, #0
 800cb8c:	e000      	b.n	800cb90 <nicSendPacket+0x64>
      }
   }
   else
   {
      //Report an error
      error = ERROR_INVALID_INTERFACE;
 800cb8e:	2507      	movs	r5, #7
   }

   //Return status code
   return error;
}
 800cb90:	4628      	mov	r0, r5
 800cb92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      error = ERROR_INVALID_INTERFACE;
 800cb96:	2507      	movs	r5, #7
 800cb98:	e7fa      	b.n	800cb90 <nicSendPacket+0x64>
 800cb9a:	bf00      	nop
 800cb9c:	20000b50 	.word	0x20000b50

0800cba0 <nicUpdateMacAddrFilter>:
 * @param[in] interface Underlying network interface
 * @return Error code
 **/

error_t nicUpdateMacAddrFilter(NetInterface *interface)
{
 800cba0:	b538      	push	{r3, r4, r5, lr}
   error_t error;

   //Valid NIC driver?
   if(interface->nicDriver != NULL)
 800cba2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cba4:	b17b      	cbz	r3, 800cbc6 <nicUpdateMacAddrFilter+0x26>
 800cba6:	4604      	mov	r4, r0
   {
      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 800cba8:	695b      	ldr	r3, [r3, #20]
 800cbaa:	4798      	blx	r3

      //Update MAC filter table
      error = interface->nicDriver->updateMacAddrFilter(interface);
 800cbac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbae:	6a1b      	ldr	r3, [r3, #32]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	4798      	blx	r3
 800cbb4:	4605      	mov	r5, r0

      //Re-enable interrupts if necessary
      if(interface->configured)
 800cbb6:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cbb8:	b11b      	cbz	r3, 800cbc2 <nicUpdateMacAddrFilter+0x22>
      {
         interface->nicDriver->enableIrq(interface);
 800cbba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbbc:	691b      	ldr	r3, [r3, #16]
 800cbbe:	4620      	mov	r0, r4
 800cbc0:	4798      	blx	r3
      error = ERROR_INVALID_INTERFACE;
   }

   //Return status code
   return error;
}
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	bd38      	pop	{r3, r4, r5, pc}
      error = ERROR_INVALID_INTERFACE;
 800cbc6:	2507      	movs	r5, #7
 800cbc8:	e7fb      	b.n	800cbc2 <nicUpdateMacAddrFilter+0x22>
	...

0800cbcc <nicProcessPacket>:
 *   the packet
 **/

void nicProcessPacket(NetInterface *interface, uint8_t *packet, size_t length,
   NetRxAncillary *ancillary)
{
 800cbcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	460f      	mov	r7, r1
 800cbd4:	4616      	mov	r6, r2
 800cbd6:	461d      	mov	r5, r3
   NicType type;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 800cbd8:	f7f3 fe10 	bl	80007fc <osGetSystemTime>
 800cbdc:	4b1a      	ldr	r3, [pc, #104]	@ (800cc48 <nicProcessPacket+0x7c>)
 800cbde:	699a      	ldr	r2, [r3, #24]
 800cbe0:	4410      	add	r0, r2
 800cbe2:	6198      	str	r0, [r3, #24]

   //Check whether the interface is enabled for operation
   if(interface->configured)
 800cbe4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800cbe6:	b17b      	cbz	r3, 800cc08 <nicProcessPacket+0x3c>
   {
      //Re-enable interrupts
      interface->nicDriver->enableIrq(interface);
 800cbe8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbea:	691b      	ldr	r3, [r3, #16]
 800cbec:	4620      	mov	r0, r4
 800cbee:	4798      	blx	r3
      //Debug message
      TRACE_DEBUG("Packet received (%" PRIuSIZE " bytes)...\r\n", length);
      TRACE_DEBUG_ARRAY("  ", packet, length);

      //Retrieve network interface type
      type = interface->nicDriver->type;
 800cbf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbf2:	781b      	ldrb	r3, [r3, #0]

#if (ETH_SUPPORT == ENABLED)
      //Ethernet interface?
      if(type == NIC_TYPE_ETHERNET)
 800cbf4:	2b01      	cmp	r3, #1
 800cbf6:	d009      	beq.n	800cc0c <nicProcessPacket+0x40>
      }
      else
#endif
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 interface?
      if(type == NIC_TYPE_IPV4)
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d00e      	beq.n	800cc1a <nicProcessPacket+0x4e>
      }
      else
#endif
#if (IPV6_SUPPORT == ENABLED)
      //6LoWPAN interface?
      if(type == NIC_TYPE_6LOWPAN)
 800cbfc:	2b04      	cmp	r3, #4
 800cbfe:	d013      	beq.n	800cc28 <nicProcessPacket+0x5c>
      {
         //Silently discard the received packet
      }

      //Disable interrupts
      interface->nicDriver->disableIrq(interface);
 800cc00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cc02:	695b      	ldr	r3, [r3, #20]
 800cc04:	4620      	mov	r0, r4
 800cc06:	4798      	blx	r3
   }
}
 800cc08:	b005      	add	sp, #20
 800cc0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
         ethProcessFrame(interface, packet, length, ancillary);
 800cc0c:	462b      	mov	r3, r5
 800cc0e:	4632      	mov	r2, r6
 800cc10:	4639      	mov	r1, r7
 800cc12:	4620      	mov	r0, r4
 800cc14:	f7f6 f8d6 	bl	8002dc4 <ethProcessFrame>
 800cc18:	e7f2      	b.n	800cc00 <nicProcessPacket+0x34>
         ipv4ProcessPacket(interface, (Ipv4Header *) packet, length,
 800cc1a:	462b      	mov	r3, r5
 800cc1c:	4632      	mov	r2, r6
 800cc1e:	4639      	mov	r1, r7
 800cc20:	4620      	mov	r0, r4
 800cc22:	f7f8 fdd0 	bl	80057c6 <ipv4ProcessPacket>
 800cc26:	e7eb      	b.n	800cc00 <nicProcessPacket+0x34>
         buffer.chunkCount = 1;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	9300      	str	r3, [sp, #0]
         buffer.maxChunkCount = 1;
 800cc2c:	9301      	str	r3, [sp, #4]
         buffer.chunk[0].address = packet;
 800cc2e:	9702      	str	r7, [sp, #8]
         buffer.chunk[0].length = (uint16_t) length;
 800cc30:	f8ad 600c 	strh.w	r6, [sp, #12]
         buffer.chunk[0].size = 0;
 800cc34:	2200      	movs	r2, #0
 800cc36:	f8ad 200e 	strh.w	r2, [sp, #14]
         ipv6ProcessPacket(interface, (NetBuffer *) &buffer, 0, ancillary);
 800cc3a:	462b      	mov	r3, r5
 800cc3c:	4669      	mov	r1, sp
 800cc3e:	4620      	mov	r0, r4
 800cc40:	f7fa f816 	bl	8006c70 <ipv6ProcessPacket>
 800cc44:	e7dc      	b.n	800cc00 <nicProcessPacket+0x34>
 800cc46:	bf00      	nop
 800cc48:	20000b50 	.word	0x20000b50

0800cc4c <nicNotifyLinkChange>:
 * @brief Process link state change notification
 * @param[in] interface Underlying network interface
 **/

void nicNotifyLinkChange(NetInterface *interface)
{
 800cc4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc50:	4607      	mov	r7, r0
   uint_t i;
   NetInterface *physicalInterface;
   NetInterface *virtualInterface;

   //Gather entropy
   netContext.entropy += netGetSystemTickCount();
 800cc52:	f7f3 fdd3 	bl	80007fc <osGetSystemTime>
 800cc56:	4a1f      	ldr	r2, [pc, #124]	@ (800ccd4 <nicNotifyLinkChange+0x88>)
 800cc58:	6993      	ldr	r3, [r2, #24]
 800cc5a:	4403      	add	r3, r0
 800cc5c:	6193      	str	r3, [r2, #24]

   //Point to the physical interface
   physicalInterface = nicGetPhysicalInterface(interface);
 800cc5e:	4638      	mov	r0, r7
 800cc60:	f7ff ff4a 	bl	800caf8 <nicGetPhysicalInterface>
 800cc64:	4605      	mov	r5, r0

   //Re-enable interrupts if necessary
   if(physicalInterface->configured)
 800cc66:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800cc68:	b113      	cbz	r3, 800cc70 <nicNotifyLinkChange+0x24>
   {
      physicalInterface->nicDriver->enableIrq(physicalInterface);
 800cc6a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	4798      	blx	r3
{
 800cc70:	2600      	movs	r6, #0
   }

   //Loop through network interfaces
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800cc72:	b12e      	cbz	r6, 800cc80 <nicNotifyLinkChange+0x34>
         netProcessLinkChange(virtualInterface);
      }
   }

   //Disable interrupts
   physicalInterface->nicDriver->disableIrq(physicalInterface);
 800cc74:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800cc76:	695b      	ldr	r3, [r3, #20]
 800cc78:	4628      	mov	r0, r5
 800cc7a:	4798      	blx	r3
}
 800cc7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      virtualInterface = &netInterface[i];
 800cc80:	f241 24a4 	movw	r4, #4772	@ 0x12a4
 800cc84:	fb06 f404 	mul.w	r4, r6, r4
 800cc88:	3458      	adds	r4, #88	@ 0x58
 800cc8a:	4b12      	ldr	r3, [pc, #72]	@ (800ccd4 <nicNotifyLinkChange+0x88>)
 800cc8c:	441c      	add	r4, r3
      if(nicIsParentInterface(virtualInterface, interface) &&
 800cc8e:	4639      	mov	r1, r7
 800cc90:	4620      	mov	r0, r4
 800cc92:	f7ff ff34 	bl	800cafe <nicIsParentInterface>
 800cc96:	b140      	cbz	r0, 800ccaa <nicNotifyLinkChange+0x5e>
         nicGetSwitchPort(virtualInterface) == nicGetSwitchPort(interface))
 800cc98:	4620      	mov	r0, r4
 800cc9a:	f7ff ff2e 	bl	800cafa <nicGetSwitchPort>
 800cc9e:	4680      	mov	r8, r0
 800cca0:	4638      	mov	r0, r7
 800cca2:	f7ff ff2a 	bl	800cafa <nicGetSwitchPort>
      if(nicIsParentInterface(virtualInterface, interface) &&
 800cca6:	4580      	cmp	r8, r0
 800cca8:	d001      	beq.n	800ccae <nicNotifyLinkChange+0x62>
   for(i = 0; i < NET_INTERFACE_COUNT; i++)
 800ccaa:	3601      	adds	r6, #1
 800ccac:	e7e1      	b.n	800cc72 <nicNotifyLinkChange+0x26>
         virtualInterface->linkSpeed = interface->linkSpeed;
 800ccae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800ccb0:	4b08      	ldr	r3, [pc, #32]	@ (800ccd4 <nicNotifyLinkChange+0x88>)
 800ccb2:	f241 21a4 	movw	r1, #4772	@ 0x12a4
 800ccb6:	fb01 3306 	mla	r3, r1, r6, r3
 800ccba:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
         virtualInterface->duplexMode = interface->duplexMode;
 800ccbe:	f897 2068 	ldrb.w	r2, [r7, #104]	@ 0x68
 800ccc2:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
         virtualInterface->linkState = interface->linkState;
 800ccc6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ccc8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
         netProcessLinkChange(virtualInterface);
 800cccc:	4620      	mov	r0, r4
 800ccce:	f7ff fbb9 	bl	800c444 <netProcessLinkChange>
 800ccd2:	e7ea      	b.n	800ccaa <nicNotifyLinkChange+0x5e>
 800ccd4:	20000b50 	.word	0x20000b50

0800ccd8 <slaacGetDefaultSettings>:
 * @brief Initialize settings with default values
 * @param[out] settings Structure that contains SLAAC settings
 **/

void slaacGetDefaultSettings(SlaacSettings *settings)
{
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	4604      	mov	r4, r0
   //Use default interface
   settings->interface = netGetDefaultInterface();
 800ccdc:	f7ff f8bc 	bl	800be58 <netGetDefaultInterface>
 800cce0:	6020      	str	r0, [r4, #0]

   //Use the DNS servers specified by the RDNSS option
   settings->manualDnsConfig = FALSE;
 800cce2:	2300      	movs	r3, #0
 800cce4:	6063      	str	r3, [r4, #4]
   //Link state change event
   settings->linkChangeEvent = NULL;
 800cce6:	60a3      	str	r3, [r4, #8]
   //Router Advertisement parsing callback
   settings->parseRouterAdvCallback = NULL;
 800cce8:	60e3      	str	r3, [r4, #12]
}
 800ccea:	bd10      	pop	{r4, pc}

0800ccec <slaacInit>:
 * @param[in] settings SLAAC specific settings
 * @return Error code
 **/

error_t slaacInit(SlaacContext *context, const SlaacSettings *settings)
{
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	4604      	mov	r4, r0
 800ccf0:	460d      	mov	r5, r1
   NetInterface *interface;

   //Debug message
   TRACE_INFO("Initializing SLAAC...\r\n");
 800ccf2:	f7f3 fd1d 	bl	8000730 <osSuspendAllTasks>
 800ccf6:	4b16      	ldr	r3, [pc, #88]	@ (800cd50 <slaacInit+0x64>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	68db      	ldr	r3, [r3, #12]
 800ccfc:	2217      	movs	r2, #23
 800ccfe:	2101      	movs	r1, #1
 800cd00:	4814      	ldr	r0, [pc, #80]	@ (800cd54 <slaacInit+0x68>)
 800cd02:	f007 fecb 	bl	8014a9c <fwrite>
 800cd06:	f7f3 fd1c 	bl	8000742 <osResumeAllTasks>

   //Ensure the parameters are valid
   if(context == NULL || settings == NULL)
 800cd0a:	2d00      	cmp	r5, #0
 800cd0c:	bf18      	it	ne
 800cd0e:	2c00      	cmpne	r4, #0
 800cd10:	d019      	beq.n	800cd46 <slaacInit+0x5a>
      return ERROR_INVALID_PARAMETER;

   //The SLAAC service must be bound to a valid interface
   if(settings->interface == NULL)
 800cd12:	682e      	ldr	r6, [r5, #0]
 800cd14:	b1ce      	cbz	r6, 800cd4a <slaacInit+0x5e>

   //Point to the underlying network interface
   interface = settings->interface;

   //Clear the SLAAC context
   osMemset(context, 0, sizeof(SlaacContext));
 800cd16:	f04f 0c00 	mov.w	ip, #0
 800cd1a:	f8c4 c000 	str.w	ip, [r4]
 800cd1e:	f8c4 c004 	str.w	ip, [r4, #4]
 800cd22:	f8c4 c008 	str.w	ip, [r4, #8]
 800cd26:	f8c4 c00c 	str.w	ip, [r4, #12]
 800cd2a:	f8c4 c010 	str.w	ip, [r4, #16]
 800cd2e:	f8c4 c014 	str.w	ip, [r4, #20]
   //Save user settings
   context->settings = *settings;
 800cd32:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800cd36:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //SLAAC operation is currently suspended
   context->running = FALSE;

   //Attach the SLAAC context to the network interface
   interface->slaacContext = context;
 800cd3a:	f506 5680 	add.w	r6, r6, #4096	@ 0x1000
 800cd3e:	f8c6 42a0 	str.w	r4, [r6, #672]	@ 0x2a0

   //Successful initialization
   return NO_ERROR;
 800cd42:	4660      	mov	r0, ip
}
 800cd44:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800cd46:	2002      	movs	r0, #2
 800cd48:	e7fc      	b.n	800cd44 <slaacInit+0x58>
      return ERROR_INVALID_PARAMETER;
 800cd4a:	2002      	movs	r0, #2
 800cd4c:	e7fa      	b.n	800cd44 <slaacInit+0x58>
 800cd4e:	bf00      	nop
 800cd50:	20000440 	.word	0x20000440
 800cd54:	0801a5cc 	.word	0x0801a5cc

0800cd58 <slaacStart>:
error_t slaacStart(SlaacContext *context)
{
   NetInterface *interface;

   //Make sure the SLAAC context is valid
   if(context == NULL)
 800cd58:	b338      	cbz	r0, 800cdaa <slaacStart+0x52>
{
 800cd5a:	b538      	push	{r3, r4, r5, lr}
 800cd5c:	4604      	mov	r4, r0
      return ERROR_INVALID_PARAMETER;

   //Debug message
   TRACE_INFO("Starting SLAAC...\r\n");
 800cd5e:	f7f3 fce7 	bl	8000730 <osSuspendAllTasks>
 800cd62:	4b13      	ldr	r3, [pc, #76]	@ (800cdb0 <slaacStart+0x58>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	68db      	ldr	r3, [r3, #12]
 800cd68:	2213      	movs	r2, #19
 800cd6a:	2101      	movs	r1, #1
 800cd6c:	4811      	ldr	r0, [pc, #68]	@ (800cdb4 <slaacStart+0x5c>)
 800cd6e:	f007 fe95 	bl	8014a9c <fwrite>
 800cd72:	f7f3 fce6 	bl	8000742 <osResumeAllTasks>

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800cd76:	4810      	ldr	r0, [pc, #64]	@ (800cdb8 <slaacStart+0x60>)
 800cd78:	f7f3 fd31 	bl	80007de <osAcquireMutex>

   //Point to the underlying network interface
   interface = context->settings.interface;
 800cd7c:	6825      	ldr	r5, [r4, #0]

   //Clear the list of IPv6 addresses
   ipv6FlushAddrList(interface);
 800cd7e:	4628      	mov	r0, r5
 800cd80:	f7fb fae0 	bl	8008344 <ipv6FlushAddrList>

   //Automatic DNS server configuration?
   if(!context->settings.manualDnsConfig)
 800cd84:	6863      	ldr	r3, [r4, #4]
 800cd86:	b143      	cbz	r3, 800cd9a <slaacStart+0x42>
      //Clear the list of DNS servers
      ipv6FlushDnsServerList(interface);
   }

   //Check if the link is up?
   if(interface->linkState)
 800cd88:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800cd8a:	b953      	cbnz	r3, 800cda2 <slaacStart+0x4a>
      //link-local prefix fe80::/10 with the interface identifier
      slaacGenerateLinkLocalAddr(context);
   }

   //Start SLAAC operation
   context->running = TRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	6123      	str	r3, [r4, #16]

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800cd90:	4809      	ldr	r0, [pc, #36]	@ (800cdb8 <slaacStart+0x60>)
 800cd92:	f7f3 fd2b 	bl	80007ec <osReleaseMutex>

   //Successful processing
   return NO_ERROR;
 800cd96:	2000      	movs	r0, #0
}
 800cd98:	bd38      	pop	{r3, r4, r5, pc}
      ipv6FlushDnsServerList(interface);
 800cd9a:	4628      	mov	r0, r5
 800cd9c:	f7fa ff32 	bl	8007c04 <ipv6FlushDnsServerList>
 800cda0:	e7f2      	b.n	800cd88 <slaacStart+0x30>
      slaacGenerateLinkLocalAddr(context);
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 f90e 	bl	800cfc4 <slaacGenerateLinkLocalAddr>
 800cda8:	e7f0      	b.n	800cd8c <slaacStart+0x34>
      return ERROR_INVALID_PARAMETER;
 800cdaa:	2002      	movs	r0, #2
}
 800cdac:	4770      	bx	lr
 800cdae:	bf00      	nop
 800cdb0:	20000440 	.word	0x20000440
 800cdb4:	0801a5e4 	.word	0x0801a5e4
 800cdb8:	20000b50 	.word	0x20000b50

0800cdbc <slaacParsePrefixInfoOption>:
   NetInterface *logicalInterface;
   Ipv6AddrEntry *entry;
   Ipv6Addr addr;

   //Make sure the Prefix Information option is valid
   if(option == NULL || option->length != 4)
 800cdbc:	2900      	cmp	r1, #0
 800cdbe:	f000 80f9 	beq.w	800cfb4 <slaacParsePrefixInfoOption+0x1f8>
{
 800cdc2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc6:	b08b      	sub	sp, #44	@ 0x2c
 800cdc8:	4604      	mov	r4, r0
 800cdca:	460d      	mov	r5, r1
   if(option == NULL || option->length != 4)
 800cdcc:	784b      	ldrb	r3, [r1, #1]
 800cdce:	2b04      	cmp	r3, #4
 800cdd0:	d103      	bne.n	800cdda <slaacParsePrefixInfoOption+0x1e>
      return;

   //If the Autonomous flag is not set, silently ignore the Prefix
   //Information option
   if(!option->a)
 800cdd2:	78cb      	ldrb	r3, [r1, #3]
 800cdd4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 800cdd8:	d102      	bne.n	800cde0 <slaacParsePrefixInfoOption+0x24>
            //We are done
            break;
         }
      }
   }
}
 800cdda:	b00b      	add	sp, #44	@ 0x2c
 800cddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   if(ipv6CompPrefix(&option->prefix, &IPV6_LINK_LOCAL_ADDR_PREFIX, 10))
 800cde0:	f101 0610 	add.w	r6, r1, #16
 800cde4:	220a      	movs	r2, #10
 800cde6:	4974      	ldr	r1, [pc, #464]	@ (800cfb8 <slaacParsePrefixInfoOption+0x1fc>)
 800cde8:	4630      	mov	r0, r6
 800cdea:	f7fa ffd9 	bl	8007da0 <ipv6CompPrefix>
 800cdee:	4607      	mov	r7, r0
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1f2      	bne.n	800cdda <slaacParsePrefixInfoOption+0x1e>
   if(ntohl(option->validLifetime) == 0)
 800cdf4:	6868      	ldr	r0, [r5, #4]
 800cdf6:	f7f3 fc14 	bl	8000622 <swapInt32>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	d0ed      	beq.n	800cdda <slaacParsePrefixInfoOption+0x1e>
   if(ntohl(option->preferredLifetime) > ntohl(option->validLifetime))
 800cdfe:	68a8      	ldr	r0, [r5, #8]
 800ce00:	f7f3 fc0f 	bl	8000622 <swapInt32>
 800ce04:	4680      	mov	r8, r0
 800ce06:	6868      	ldr	r0, [r5, #4]
 800ce08:	f7f3 fc0b 	bl	8000622 <swapInt32>
 800ce0c:	4580      	cmp	r8, r0
 800ce0e:	d8e4      	bhi.n	800cdda <slaacParsePrefixInfoOption+0x1e>
   if(option->prefixLength != 64)
 800ce10:	78ab      	ldrb	r3, [r5, #2]
 800ce12:	2b40      	cmp	r3, #64	@ 0x40
 800ce14:	d1e1      	bne.n	800cdda <slaacParsePrefixInfoOption+0x1e>
   time = osGetSystemTime();
 800ce16:	f7f3 fcf1 	bl	80007fc <osGetSystemTime>
 800ce1a:	9005      	str	r0, [sp, #20]
   interface = context->settings.interface;
 800ce1c:	f8d4 a000 	ldr.w	sl, [r4]
   logicalInterface = nicGetLogicalInterface(interface);
 800ce20:	4650      	mov	r0, sl
 800ce22:	f7ff fe68 	bl	800caf6 <nicGetLogicalInterface>
   addr.w[0] = option->prefix.w[0];
 800ce26:	8a2b      	ldrh	r3, [r5, #16]
 800ce28:	f8ad 3018 	strh.w	r3, [sp, #24]
   addr.w[1] = option->prefix.w[1];
 800ce2c:	8a6b      	ldrh	r3, [r5, #18]
 800ce2e:	f8ad 301a 	strh.w	r3, [sp, #26]
   addr.w[2] = option->prefix.w[2];
 800ce32:	8aab      	ldrh	r3, [r5, #20]
 800ce34:	f8ad 301c 	strh.w	r3, [sp, #28]
   addr.w[3] = option->prefix.w[3];
 800ce38:	8aeb      	ldrh	r3, [r5, #22]
 800ce3a:	f8ad 301e 	strh.w	r3, [sp, #30]
   addr.w[4] = logicalInterface->eui64.w[0];
 800ce3e:	8903      	ldrh	r3, [r0, #8]
 800ce40:	f8ad 3020 	strh.w	r3, [sp, #32]
   addr.w[5] = logicalInterface->eui64.w[1];
 800ce44:	8943      	ldrh	r3, [r0, #10]
 800ce46:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
   addr.w[6] = logicalInterface->eui64.w[2];
 800ce4a:	8983      	ldrh	r3, [r0, #12]
 800ce4c:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
   addr.w[7] = logicalInterface->eui64.w[3];
 800ce50:	89c3      	ldrh	r3, [r0, #14]
 800ce52:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
   validLifetime = ntohl(option->validLifetime);
 800ce56:	6868      	ldr	r0, [r5, #4]
 800ce58:	f7f3 fbe3 	bl	8000622 <swapInt32>
 800ce5c:	4683      	mov	fp, r0
   if(validLifetime != NDP_INFINITE_LIFETIME)
 800ce5e:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce62:	d006      	beq.n	800ce72 <slaacParsePrefixInfoOption+0xb6>
      if(validLifetime < (MAX_DELAY / 1000))
 800ce64:	4b55      	ldr	r3, [pc, #340]	@ (800cfbc <slaacParsePrefixInfoOption+0x200>)
 800ce66:	4298      	cmp	r0, r3
 800ce68:	d817      	bhi.n	800ce9a <slaacParsePrefixInfoOption+0xde>
         validLifetime *= 1000;
 800ce6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800ce6e:	fb03 fb00 	mul.w	fp, r3, r0
   preferredLifetime = ntohl(option->preferredLifetime);
 800ce72:	68a8      	ldr	r0, [r5, #8]
 800ce74:	f7f3 fbd5 	bl	8000622 <swapInt32>
 800ce78:	4603      	mov	r3, r0
   if(preferredLifetime != NDP_INFINITE_LIFETIME)
 800ce7a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ce7e:	d006      	beq.n	800ce8e <slaacParsePrefixInfoOption+0xd2>
      if(preferredLifetime < (MAX_DELAY / 1000))
 800ce80:	4a4e      	ldr	r2, [pc, #312]	@ (800cfbc <slaacParsePrefixInfoOption+0x200>)
 800ce82:	4290      	cmp	r0, r2
 800ce84:	d80c      	bhi.n	800cea0 <slaacParsePrefixInfoOption+0xe4>
         preferredLifetime *= 1000;
 800ce86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ce8a:	fb02 f303 	mul.w	r3, r2, r3
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800ce8e:	f04f 0901 	mov.w	r9, #1
 800ce92:	4698      	mov	r8, r3
 800ce94:	9404      	str	r4, [sp, #16]
 800ce96:	4634      	mov	r4, r6
 800ce98:	e021      	b.n	800cede <slaacParsePrefixInfoOption+0x122>
         validLifetime = MAX_DELAY;
 800ce9a:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ce9e:	e7e8      	b.n	800ce72 <slaacParsePrefixInfoOption+0xb6>
         preferredLifetime = MAX_DELAY;
 800cea0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cea4:	e7f3      	b.n	800ce8e <slaacParsePrefixInfoOption+0xd2>
            entry->preferredLifetime = preferredLifetime;
 800cea6:	eb09 0249 	add.w	r2, r9, r9, lsl #1
 800ceaa:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
 800ceae:	f8c2 87d4 	str.w	r8, [r2, #2004]	@ 0x7d4
            if(timeCompare(time, entry->timestamp + entry->validLifetime) < 0)
 800ceb2:	f8d2 37dc 	ldr.w	r3, [r2, #2012]	@ 0x7dc
 800ceb6:	f8d2 27d0 	ldr.w	r2, [r2, #2000]	@ 0x7d0
 800ceba:	4413      	add	r3, r2
 800cebc:	9905      	ldr	r1, [sp, #20]
 800cebe:	1aca      	subs	r2, r1, r3
 800cec0:	2a00      	cmp	r2, #0
 800cec2:	db2b      	blt.n	800cf1c <slaacParsePrefixInfoOption+0x160>
               remainingLifetime = 0;
 800cec4:	2300      	movs	r3, #0
            if(validLifetime > SLAAC_LIFETIME_2_HOURS ||
 800cec6:	4a3e      	ldr	r2, [pc, #248]	@ (800cfc0 <slaacParsePrefixInfoOption+0x204>)
 800cec8:	429a      	cmp	r2, r3
 800ceca:	bf28      	it	cs
 800cecc:	461a      	movcs	r2, r3
 800cece:	4593      	cmp	fp, r2
 800ced0:	d826      	bhi.n	800cf20 <slaacParsePrefixInfoOption+0x164>
            else if(remainingLifetime <= SLAAC_LIFETIME_2_HOURS)
 800ced2:	4a3b      	ldr	r2, [pc, #236]	@ (800cfc0 <slaacParsePrefixInfoOption+0x204>)
 800ced4:	4293      	cmp	r3, r2
 800ced6:	d832      	bhi.n	800cf3e <slaacParsePrefixInfoOption+0x182>
            found = TRUE;
 800ced8:	2701      	movs	r7, #1
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800ceda:	f109 0901 	add.w	r9, r9, #1
 800cede:	f1b9 0f02 	cmp.w	r9, #2
 800cee2:	d83a      	bhi.n	800cf5a <slaacParsePrefixInfoOption+0x19e>
      entry = &interface->ipv6Context.addrList[i];
 800cee4:	eb09 0649 	add.w	r6, r9, r9, lsl #1
 800cee8:	0136      	lsls	r6, r6, #4
 800ceea:	f506 66f6 	add.w	r6, r6, #1968	@ 0x7b0
 800ceee:	4456      	add	r6, sl
 800cef0:	3608      	adds	r6, #8
      if(ipv6CompPrefix(&entry->addr, &option->prefix, option->prefixLength))
 800cef2:	78aa      	ldrb	r2, [r5, #2]
 800cef4:	4621      	mov	r1, r4
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7fa ff52 	bl	8007da0 <ipv6CompPrefix>
 800cefc:	2800      	cmp	r0, #0
 800cefe:	d0ec      	beq.n	800ceda <slaacParsePrefixInfoOption+0x11e>
         if(entry->state == IPV6_ADDR_STATE_PREFERRED ||
 800cf00:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800cf04:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
 800cf08:	f893 27c8 	ldrb.w	r2, [r3, #1992]	@ 0x7c8
 800cf0c:	1e93      	subs	r3, r2, #2
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d9c8      	bls.n	800cea6 <slaacParsePrefixInfoOption+0xea>
         else if(entry->state == IPV6_ADDR_STATE_TENTATIVE)
 800cf14:	2a01      	cmp	r2, #1
 800cf16:	d1e0      	bne.n	800ceda <slaacParsePrefixInfoOption+0x11e>
            found = TRUE;
 800cf18:	2701      	movs	r7, #1
 800cf1a:	e7de      	b.n	800ceda <slaacParsePrefixInfoOption+0x11e>
               remainingLifetime = entry->timestamp + entry->validLifetime - time;
 800cf1c:	1a5b      	subs	r3, r3, r1
 800cf1e:	e7d2      	b.n	800cec6 <slaacParsePrefixInfoOption+0x10a>
               entry->validLifetime = validLifetime;
 800cf20:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 800cf24:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
 800cf28:	f8c3 b7d0 	str.w	fp, [r3, #2000]	@ 0x7d0
               entry->timestamp = time;
 800cf2c:	9a05      	ldr	r2, [sp, #20]
 800cf2e:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
               ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_PREFERRED);
 800cf32:	2102      	movs	r1, #2
 800cf34:	4630      	mov	r0, r6
 800cf36:	f7fa fd8e 	bl	8007a56 <ipv6ChangeAddrState>
            found = TRUE;
 800cf3a:	2701      	movs	r7, #1
 800cf3c:	e7cd      	b.n	800ceda <slaacParsePrefixInfoOption+0x11e>
               entry->validLifetime = SLAAC_LIFETIME_2_HOURS;
 800cf3e:	2330      	movs	r3, #48	@ 0x30
 800cf40:	fb03 a309 	mla	r3, r3, r9, sl
 800cf44:	f8c3 27d0 	str.w	r2, [r3, #2000]	@ 0x7d0
               entry->timestamp = time;
 800cf48:	9a05      	ldr	r2, [sp, #20]
 800cf4a:	f8c3 27dc 	str.w	r2, [r3, #2012]	@ 0x7dc
               ipv6ChangeAddrState(entry, IPV6_ADDR_STATE_PREFERRED);
 800cf4e:	2102      	movs	r1, #2
 800cf50:	4630      	mov	r0, r6
 800cf52:	f7fa fd80 	bl	8007a56 <ipv6ChangeAddrState>
            found = TRUE;
 800cf56:	2701      	movs	r7, #1
 800cf58:	e7bf      	b.n	800ceda <slaacParsePrefixInfoOption+0x11e>
   if(!found)
 800cf5a:	4643      	mov	r3, r8
 800cf5c:	9c04      	ldr	r4, [sp, #16]
 800cf5e:	2f00      	cmp	r7, #0
 800cf60:	f47f af3b 	bne.w	800cdda <slaacParsePrefixInfoOption+0x1e>
      for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800cf64:	2101      	movs	r1, #1
 800cf66:	2902      	cmp	r1, #2
 800cf68:	f63f af37 	bhi.w	800cdda <slaacParsePrefixInfoOption+0x1e>
         if(entry->state == IPV6_ADDR_STATE_INVALID)
 800cf6c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800cf70:	eb0a 1202 	add.w	r2, sl, r2, lsl #4
 800cf74:	f892 27c8 	ldrb.w	r2, [r2, #1992]	@ 0x7c8
 800cf78:	b10a      	cbz	r2, 800cf7e <slaacParsePrefixInfoOption+0x1c2>
      for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800cf7a:	3101      	adds	r1, #1
 800cf7c:	e7f3      	b.n	800cf66 <slaacParsePrefixInfoOption+0x1aa>
            if(interface->ndpContext.dupAddrDetectTransmits > 0)
 800cf7e:	f8da 2b6c 	ldr.w	r2, [sl, #2924]	@ 0xb6c
 800cf82:	b162      	cbz	r2, 800cf9e <slaacParsePrefixInfoOption+0x1e2>
               ipv6SetAddr(interface, i, &addr, IPV6_ADDR_STATE_TENTATIVE,
 800cf84:	2200      	movs	r2, #0
 800cf86:	9202      	str	r2, [sp, #8]
 800cf88:	9301      	str	r3, [sp, #4]
 800cf8a:	f8cd b000 	str.w	fp, [sp]
 800cf8e:	2301      	movs	r3, #1
 800cf90:	aa06      	add	r2, sp, #24
 800cf92:	4650      	mov	r0, sl
 800cf94:	f7fb f934 	bl	8008200 <ipv6SetAddr>
            context->configUpdated = TRUE;
 800cf98:	2301      	movs	r3, #1
 800cf9a:	6163      	str	r3, [r4, #20]
            break;
 800cf9c:	e71d      	b.n	800cdda <slaacParsePrefixInfoOption+0x1e>
               ipv6SetAddr(interface, i, &addr, IPV6_ADDR_STATE_PREFERRED,
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	9202      	str	r2, [sp, #8]
 800cfa2:	9301      	str	r3, [sp, #4]
 800cfa4:	f8cd b000 	str.w	fp, [sp]
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	aa06      	add	r2, sp, #24
 800cfac:	4650      	mov	r0, sl
 800cfae:	f7fb f927 	bl	8008200 <ipv6SetAddr>
 800cfb2:	e7f1      	b.n	800cf98 <slaacParsePrefixInfoOption+0x1dc>
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	08019f40 	.word	0x08019f40
 800cfbc:	0020c49a 	.word	0x0020c49a
 800cfc0:	006ddd00 	.word	0x006ddd00

0800cfc4 <slaacGenerateLinkLocalAddr>:
 * @param[in] context Pointer to the SLAAC context
 * @return Error code
 **/

error_t slaacGenerateLinkLocalAddr(SlaacContext *context)
{
 800cfc4:	b510      	push	{r4, lr}
 800cfc6:	b088      	sub	sp, #32
   NetInterface *interface;
   NetInterface *logicalInterface;
   Ipv6Addr addr;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800cfc8:	6804      	ldr	r4, [r0, #0]

   //Point to the logical interface
   logicalInterface = nicGetLogicalInterface(interface);
 800cfca:	4620      	mov	r0, r4
 800cfcc:	f7ff fd93 	bl	800caf6 <nicGetLogicalInterface>

   //Check whether a link-local address has been manually assigned
   if(interface->ipv6Context.addrList[0].state != IPV6_ADDR_STATE_INVALID &&
 800cfd0:	f894 37c8 	ldrb.w	r3, [r4, #1992]	@ 0x7c8
 800cfd4:	b113      	cbz	r3, 800cfdc <slaacGenerateLinkLocalAddr+0x18>
      interface->ipv6Context.addrList[0].permanent)
 800cfd6:	f8d4 37d8 	ldr.w	r3, [r4, #2008]	@ 0x7d8
   if(interface->ipv6Context.addrList[0].state != IPV6_ADDR_STATE_INVALID &&
 800cfda:	b9f3      	cbnz	r3, 800d01a <slaacGenerateLinkLocalAddr+0x56>
   }
   else
   {
      //A link-local address is formed by combining the well-known link-local
      //prefix fe80::/10 with the interface identifier
      ipv6GenerateLinkLocalAddr(&logicalInterface->eui64, &addr);
 800cfdc:	a904      	add	r1, sp, #16
 800cfde:	3008      	adds	r0, #8
 800cfe0:	f7fb f9d6 	bl	8008390 <ipv6GenerateLinkLocalAddr>

      //Check whether Duplicate Address Detection should be performed
      if(interface->ndpContext.dupAddrDetectTransmits > 0)
 800cfe4:	f8d4 3b6c 	ldr.w	r3, [r4, #2924]	@ 0xb6c
 800cfe8:	b15b      	cbz	r3, 800d002 <slaacGenerateLinkLocalAddr+0x3e>
      {
         //Use the link-local address as a tentative address
         error = ipv6SetAddr(interface, 0, &addr, IPV6_ADDR_STATE_TENTATIVE,
 800cfea:	2100      	movs	r1, #0
 800cfec:	9102      	str	r1, [sp, #8]
 800cfee:	f04f 33ff 	mov.w	r3, #4294967295
 800cff2:	9301      	str	r3, [sp, #4]
 800cff4:	9300      	str	r3, [sp, #0]
 800cff6:	2301      	movs	r3, #1
 800cff8:	aa04      	add	r2, sp, #16
 800cffa:	4620      	mov	r0, r4
 800cffc:	f7fb f900 	bl	8008200 <ipv6SetAddr>
 800d000:	e00c      	b.n	800d01c <slaacGenerateLinkLocalAddr+0x58>
            NDP_INFINITE_LIFETIME, NDP_INFINITE_LIFETIME, FALSE);
      }
      else
      {
         //The use of the link-local address is now unrestricted
         error = ipv6SetAddr(interface, 0, &addr, IPV6_ADDR_STATE_PREFERRED,
 800d002:	2100      	movs	r1, #0
 800d004:	9102      	str	r1, [sp, #8]
 800d006:	f04f 33ff 	mov.w	r3, #4294967295
 800d00a:	9301      	str	r3, [sp, #4]
 800d00c:	9300      	str	r3, [sp, #0]
 800d00e:	2302      	movs	r3, #2
 800d010:	aa04      	add	r2, sp, #16
 800d012:	4620      	mov	r0, r4
 800d014:	f7fb f8f4 	bl	8008200 <ipv6SetAddr>
 800d018:	e000      	b.n	800d01c <slaacGenerateLinkLocalAddr+0x58>
      error = NO_ERROR;
 800d01a:	2000      	movs	r0, #0
      }
   }

   //Return status code
   return error;
}
 800d01c:	b008      	add	sp, #32
 800d01e:	bd10      	pop	{r4, pc}

0800d020 <slaacLinkChangeEvent>:
   if(context == NULL)
 800d020:	b1f8      	cbz	r0, 800d062 <slaacLinkChangeEvent+0x42>
{
 800d022:	b570      	push	{r4, r5, r6, lr}
 800d024:	4604      	mov	r4, r0
   interface = context->settings.interface;
 800d026:	6805      	ldr	r5, [r0, #0]
   if(context->running)
 800d028:	6903      	ldr	r3, [r0, #16]
 800d02a:	b11b      	cbz	r3, 800d034 <slaacLinkChangeEvent+0x14>
      if(!context->settings.manualDnsConfig)
 800d02c:	6843      	ldr	r3, [r0, #4]
 800d02e:	b183      	cbz	r3, 800d052 <slaacLinkChangeEvent+0x32>
      if(interface->linkState)
 800d030:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800d032:	b993      	cbnz	r3, 800d05a <slaacLinkChangeEvent+0x3a>
   if(context->settings.linkChangeEvent != NULL)
 800d034:	68a3      	ldr	r3, [r4, #8]
 800d036:	b15b      	cbz	r3, 800d050 <slaacLinkChangeEvent+0x30>
      osReleaseMutex(&netMutex);
 800d038:	4e0a      	ldr	r6, [pc, #40]	@ (800d064 <slaacLinkChangeEvent+0x44>)
 800d03a:	4630      	mov	r0, r6
 800d03c:	f7f3 fbd6 	bl	80007ec <osReleaseMutex>
      context->settings.linkChangeEvent(context, interface, interface->linkState);
 800d040:	68a3      	ldr	r3, [r4, #8]
 800d042:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
 800d044:	4629      	mov	r1, r5
 800d046:	4620      	mov	r0, r4
 800d048:	4798      	blx	r3
      osAcquireMutex(&netMutex);
 800d04a:	4630      	mov	r0, r6
 800d04c:	f7f3 fbc7 	bl	80007de <osAcquireMutex>
}
 800d050:	bd70      	pop	{r4, r5, r6, pc}
         ipv6FlushDnsServerList(interface);
 800d052:	4628      	mov	r0, r5
 800d054:	f7fa fdd6 	bl	8007c04 <ipv6FlushDnsServerList>
 800d058:	e7ea      	b.n	800d030 <slaacLinkChangeEvent+0x10>
         slaacGenerateLinkLocalAddr(context);
 800d05a:	4620      	mov	r0, r4
 800d05c:	f7ff ffb2 	bl	800cfc4 <slaacGenerateLinkLocalAddr>
 800d060:	e7e8      	b.n	800d034 <slaacLinkChangeEvent+0x14>
 800d062:	4770      	bx	lr
 800d064:	20000b50 	.word	0x20000b50

0800d068 <slaacDumpConfig>:
 * @brief Dump IPv6 configuration for debugging purpose
 * @param[in] context Pointer to the SLAAC context
 **/

void slaacDumpConfig(SlaacContext *context)
{
 800d068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d06a:	b083      	sub	sp, #12
   uint_t i;
   NetInterface *interface;
   Ipv6Context *ipv6Context;

   //Point to the underlying network interface
   interface = context->settings.interface;
 800d06c:	6805      	ldr	r5, [r0, #0]
   //Point to the IPv6 context
   ipv6Context = &interface->ipv6Context;

   //Debug message
   TRACE_INFO("\r\n");
 800d06e:	f7f3 fb5f 	bl	8000730 <osSuspendAllTasks>
 800d072:	4c5c      	ldr	r4, [pc, #368]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d074:	6823      	ldr	r3, [r4, #0]
 800d076:	68db      	ldr	r3, [r3, #12]
 800d078:	2202      	movs	r2, #2
 800d07a:	2101      	movs	r1, #1
 800d07c:	485a      	ldr	r0, [pc, #360]	@ (800d1e8 <slaacDumpConfig+0x180>)
 800d07e:	f007 fd0d 	bl	8014a9c <fwrite>
 800d082:	f7f3 fb5e 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("SLAAC configuration:\r\n");
 800d086:	f7f3 fb53 	bl	8000730 <osSuspendAllTasks>
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	68db      	ldr	r3, [r3, #12]
 800d08e:	2216      	movs	r2, #22
 800d090:	2101      	movs	r1, #1
 800d092:	4856      	ldr	r0, [pc, #344]	@ (800d1ec <slaacDumpConfig+0x184>)
 800d094:	f007 fd02 	bl	8014a9c <fwrite>
 800d098:	f7f3 fb53 	bl	8000742 <osResumeAllTasks>

   //Link-local address
   TRACE_INFO("  Link-local Address = %s\r\n",
 800d09c:	f7f3 fb48 	bl	8000730 <osSuspendAllTasks>
 800d0a0:	6823      	ldr	r3, [r4, #0]
 800d0a2:	68dc      	ldr	r4, [r3, #12]
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	f505 60f7 	add.w	r0, r5, #1976	@ 0x7b8
 800d0aa:	f7fa f9bb 	bl	8007424 <ipv6AddrToString>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	494f      	ldr	r1, [pc, #316]	@ (800d1f0 <slaacDumpConfig+0x188>)
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	f007 fad8 	bl	8014668 <fprintf>
 800d0b8:	f7f3 fb43 	bl	8000742 <osResumeAllTasks>
      ipv6AddrToString(&ipv6Context->addrList[0].addr, NULL));

   //Global addresses
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800d0bc:	2401      	movs	r4, #1
 800d0be:	e018      	b.n	800d0f2 <slaacDumpConfig+0x8a>
   {
      TRACE_INFO("  Global Address %u = %s\r\n", i,
 800d0c0:	f7f3 fb36 	bl	8000730 <osSuspendAllTasks>
 800d0c4:	4b47      	ldr	r3, [pc, #284]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	68de      	ldr	r6, [r3, #12]
 800d0ca:	f205 70a4 	addw	r0, r5, #1956	@ 0x7a4
 800d0ce:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800d0d2:	011b      	lsls	r3, r3, #4
 800d0d4:	3310      	adds	r3, #16
 800d0d6:	4418      	add	r0, r3
 800d0d8:	2100      	movs	r1, #0
 800d0da:	3004      	adds	r0, #4
 800d0dc:	f7fa f9a2 	bl	8007424 <ipv6AddrToString>
 800d0e0:	4603      	mov	r3, r0
 800d0e2:	4622      	mov	r2, r4
 800d0e4:	4943      	ldr	r1, [pc, #268]	@ (800d1f4 <slaacDumpConfig+0x18c>)
 800d0e6:	4630      	mov	r0, r6
 800d0e8:	f007 fabe 	bl	8014668 <fprintf>
 800d0ec:	f7f3 fb29 	bl	8000742 <osResumeAllTasks>
   for(i = 1; i < IPV6_ADDR_LIST_SIZE; i++)
 800d0f0:	3401      	adds	r4, #1
 800d0f2:	2c02      	cmp	r4, #2
 800d0f4:	d9e4      	bls.n	800d0c0 <slaacDumpConfig+0x58>
         ipv6AddrToString(&ipv6Context->addrList[i].addr, NULL));
   }

   //IPv6 prefixes
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800d0f6:	2400      	movs	r4, #0
 800d0f8:	e01e      	b.n	800d138 <slaacDumpConfig+0xd0>
   {
      TRACE_INFO("  Prefix %u = %s/%" PRIu8 "\r\n", i + 1,
 800d0fa:	f7f3 fb19 	bl	8000730 <osSuspendAllTasks>
 800d0fe:	4b39      	ldr	r3, [pc, #228]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	68df      	ldr	r7, [r3, #12]
 800d104:	1c66      	adds	r6, r4, #1
 800d106:	f205 70a4 	addw	r0, r5, #1956	@ 0x7a4
 800d10a:	232c      	movs	r3, #44	@ 0x2c
 800d10c:	fb03 f404 	mul.w	r4, r3, r4
 800d110:	f104 03b0 	add.w	r3, r4, #176	@ 0xb0
 800d114:	4418      	add	r0, r3
 800d116:	2100      	movs	r1, #0
 800d118:	3004      	adds	r0, #4
 800d11a:	f7fa f983 	bl	8007424 <ipv6AddrToString>
 800d11e:	4603      	mov	r3, r0
 800d120:	442c      	add	r4, r5
 800d122:	f894 2868 	ldrb.w	r2, [r4, #2152]	@ 0x868
 800d126:	9200      	str	r2, [sp, #0]
 800d128:	4632      	mov	r2, r6
 800d12a:	4933      	ldr	r1, [pc, #204]	@ (800d1f8 <slaacDumpConfig+0x190>)
 800d12c:	4638      	mov	r0, r7
 800d12e:	f007 fa9b 	bl	8014668 <fprintf>
 800d132:	f7f3 fb06 	bl	8000742 <osResumeAllTasks>
   for(i = 0; i < IPV6_PREFIX_LIST_SIZE; i++)
 800d136:	4634      	mov	r4, r6
 800d138:	2c01      	cmp	r4, #1
 800d13a:	d9de      	bls.n	800d0fa <slaacDumpConfig+0x92>
         ipv6AddrToString(&ipv6Context->prefixList[i].prefix, NULL),
         ipv6Context->prefixList[i].prefixLen);
   }

   //Default routers
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800d13c:	2400      	movs	r4, #0
 800d13e:	e018      	b.n	800d172 <slaacDumpConfig+0x10a>
   {
      TRACE_INFO("  Default Router %u = %s\r\n", i + 1,
 800d140:	f7f3 faf6 	bl	8000730 <osSuspendAllTasks>
 800d144:	4b27      	ldr	r3, [pc, #156]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	68df      	ldr	r7, [r3, #12]
 800d14a:	1c66      	adds	r6, r4, #1
 800d14c:	f205 70a4 	addw	r0, r5, #1956	@ 0x7a4
 800d150:	0164      	lsls	r4, r4, #5
 800d152:	f504 7484 	add.w	r4, r4, #264	@ 0x108
 800d156:	4420      	add	r0, r4
 800d158:	2100      	movs	r1, #0
 800d15a:	3004      	adds	r0, #4
 800d15c:	f7fa f962 	bl	8007424 <ipv6AddrToString>
 800d160:	4603      	mov	r3, r0
 800d162:	4632      	mov	r2, r6
 800d164:	4925      	ldr	r1, [pc, #148]	@ (800d1fc <slaacDumpConfig+0x194>)
 800d166:	4638      	mov	r0, r7
 800d168:	f007 fa7e 	bl	8014668 <fprintf>
 800d16c:	f7f3 fae9 	bl	8000742 <osResumeAllTasks>
   for(i = 0; i < IPV6_ROUTER_LIST_SIZE; i++)
 800d170:	4634      	mov	r4, r6
 800d172:	2c01      	cmp	r4, #1
 800d174:	d9e4      	bls.n	800d140 <slaacDumpConfig+0xd8>
         ipv6AddrToString(&ipv6Context->routerList[i].addr, NULL));
   }

   //DNS servers
   for(i = 0; i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 800d176:	2400      	movs	r4, #0
 800d178:	e018      	b.n	800d1ac <slaacDumpConfig+0x144>
   {
      TRACE_INFO("  DNS Server %u = %s\r\n", i + 1,
 800d17a:	f7f3 fad9 	bl	8000730 <osSuspendAllTasks>
 800d17e:	4b19      	ldr	r3, [pc, #100]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	68df      	ldr	r7, [r3, #12]
 800d184:	1c66      	adds	r6, r4, #1
 800d186:	f205 70a4 	addw	r0, r5, #1956	@ 0x7a4
 800d18a:	0124      	lsls	r4, r4, #4
 800d18c:	f504 74a4 	add.w	r4, r4, #328	@ 0x148
 800d190:	4420      	add	r0, r4
 800d192:	2100      	movs	r1, #0
 800d194:	3004      	adds	r0, #4
 800d196:	f7fa f945 	bl	8007424 <ipv6AddrToString>
 800d19a:	4603      	mov	r3, r0
 800d19c:	4632      	mov	r2, r6
 800d19e:	4918      	ldr	r1, [pc, #96]	@ (800d200 <slaacDumpConfig+0x198>)
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	f007 fa61 	bl	8014668 <fprintf>
 800d1a6:	f7f3 facc 	bl	8000742 <osResumeAllTasks>
   for(i = 0; i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 800d1aa:	4634      	mov	r4, r6
 800d1ac:	2c01      	cmp	r4, #1
 800d1ae:	d9e4      	bls.n	800d17a <slaacDumpConfig+0x112>
         ipv6AddrToString(&ipv6Context->dnsServerList[i], NULL));
   }

   //Maximum transmit unit
   TRACE_INFO("  MTU = %" PRIuSIZE "\r\n", ipv6Context->linkMtu);
 800d1b0:	f7f3 fabe 	bl	8000730 <osSuspendAllTasks>
 800d1b4:	4c0b      	ldr	r4, [pc, #44]	@ (800d1e4 <slaacDumpConfig+0x17c>)
 800d1b6:	6823      	ldr	r3, [r4, #0]
 800d1b8:	f8d5 27a4 	ldr.w	r2, [r5, #1956]	@ 0x7a4
 800d1bc:	4911      	ldr	r1, [pc, #68]	@ (800d204 <slaacDumpConfig+0x19c>)
 800d1be:	68d8      	ldr	r0, [r3, #12]
 800d1c0:	f007 fa52 	bl	8014668 <fprintf>
 800d1c4:	f7f3 fabd 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 800d1c8:	f7f3 fab2 	bl	8000730 <osSuspendAllTasks>
 800d1cc:	6823      	ldr	r3, [r4, #0]
 800d1ce:	68db      	ldr	r3, [r3, #12]
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	4804      	ldr	r0, [pc, #16]	@ (800d1e8 <slaacDumpConfig+0x180>)
 800d1d6:	f007 fc61 	bl	8014a9c <fwrite>
 800d1da:	f7f3 fab2 	bl	8000742 <osResumeAllTasks>
#endif
}
 800d1de:	b003      	add	sp, #12
 800d1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	20000440 	.word	0x20000440
 800d1e8:	0801a310 	.word	0x0801a310
 800d1ec:	0801a60c 	.word	0x0801a60c
 800d1f0:	0801a624 	.word	0x0801a624
 800d1f4:	0801a640 	.word	0x0801a640
 800d1f8:	0801a65c 	.word	0x0801a65c
 800d1fc:	0801a674 	.word	0x0801a674
 800d200:	0801a210 	.word	0x0801a210
 800d204:	0801a228 	.word	0x0801a228

0800d208 <slaacParseRouterAdv>:
{
 800d208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   interface = context->settings.interface;
 800d20c:	f8d0 8000 	ldr.w	r8, [r0]
   if(!context->running)
 800d210:	6903      	ldr	r3, [r0, #16]
 800d212:	b90b      	cbnz	r3, 800d218 <slaacParseRouterAdv+0x10>
}
 800d214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d218:	4604      	mov	r4, r0
 800d21a:	460f      	mov	r7, r1
 800d21c:	4616      	mov	r6, r2
   if(ipv6GetLinkLocalAddrState(interface) != IPV6_ADDR_STATE_PREFERRED)
 800d21e:	4640      	mov	r0, r8
 800d220:	f7f9 fba4 	bl	800696c <ipv6GetLinkLocalAddrState>
 800d224:	2802      	cmp	r0, #2
 800d226:	d1f5      	bne.n	800d214 <slaacParseRouterAdv+0xc>
   length -= sizeof(NdpRouterAdvMessage);
 800d228:	3e10      	subs	r6, #16
   context->configUpdated = FALSE;
 800d22a:	2000      	movs	r0, #0
 800d22c:	6160      	str	r0, [r4, #20]
   n = 0;
 800d22e:	e008      	b.n	800d242 <slaacParseRouterAdv+0x3a>
      slaacParsePrefixInfoOption(context, prefixInfoOption);
 800d230:	4601      	mov	r1, r0
 800d232:	4620      	mov	r0, r4
 800d234:	f7ff fdc2 	bl	800cdbc <slaacParsePrefixInfoOption>
      n = (uint8_t *) prefixInfoOption - message->options;
 800d238:	eba5 0009 	sub.w	r0, r5, r9
      n += prefixInfoOption->length * 8;
 800d23c:	786b      	ldrb	r3, [r5, #1]
 800d23e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
      prefixInfoOption = ndpGetOption(message->options + n, length - n,
 800d242:	f107 0910 	add.w	r9, r7, #16
 800d246:	2203      	movs	r2, #3
 800d248:	1a31      	subs	r1, r6, r0
 800d24a:	4448      	add	r0, r9
 800d24c:	f7fe fc69 	bl	800bb22 <ndpGetOption>
      if(prefixInfoOption == NULL)
 800d250:	4605      	mov	r5, r0
 800d252:	2800      	cmp	r0, #0
 800d254:	d1ec      	bne.n	800d230 <slaacParseRouterAdv+0x28>
   if(!context->settings.manualDnsConfig)
 800d256:	6863      	ldr	r3, [r4, #4]
 800d258:	b163      	cbz	r3, 800d274 <slaacParseRouterAdv+0x6c>
   if(context->settings.parseRouterAdvCallback != NULL)
 800d25a:	68e3      	ldr	r3, [r4, #12]
 800d25c:	b11b      	cbz	r3, 800d266 <slaacParseRouterAdv+0x5e>
      context->settings.parseRouterAdvCallback(context, message, length);
 800d25e:	4632      	mov	r2, r6
 800d260:	4639      	mov	r1, r7
 800d262:	4620      	mov	r0, r4
 800d264:	4798      	blx	r3
   if(context->configUpdated)
 800d266:	6963      	ldr	r3, [r4, #20]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d0d3      	beq.n	800d214 <slaacParseRouterAdv+0xc>
      slaacDumpConfig(context);
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7ff fefb 	bl	800d068 <slaacDumpConfig>
 800d272:	e7cf      	b.n	800d214 <slaacParseRouterAdv+0xc>
      rdnssOption = ndpGetOption(message->options, length,
 800d274:	2219      	movs	r2, #25
 800d276:	4631      	mov	r1, r6
 800d278:	4648      	mov	r0, r9
 800d27a:	f7fe fc52 	bl	800bb22 <ndpGetOption>
      if(rdnssOption != NULL && rdnssOption->length >= 1)
 800d27e:	4686      	mov	lr, r0
 800d280:	2800      	cmp	r0, #0
 800d282:	d0ea      	beq.n	800d25a <slaacParseRouterAdv+0x52>
 800d284:	7843      	ldrb	r3, [r0, #1]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d0e7      	beq.n	800d25a <slaacParseRouterAdv+0x52>
         n = (rdnssOption->length - 1) / 2;
 800d28a:	3b01      	subs	r3, #1
 800d28c:	d404      	bmi.n	800d298 <slaacParseRouterAdv+0x90>
 800d28e:	ea4f 0963 	mov.w	r9, r3, asr #1
         for(i = 0; i < n && i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 800d292:	f04f 0c00 	mov.w	ip, #0
 800d296:	e00e      	b.n	800d2b6 <slaacParseRouterAdv+0xae>
         n = (rdnssOption->length - 1) / 2;
 800d298:	3301      	adds	r3, #1
 800d29a:	e7f8      	b.n	800d28e <slaacParseRouterAdv+0x86>
            interface->ipv6Context.dnsServerList[i] = rdnssOption->address[i];
 800d29c:	eb08 150c 	add.w	r5, r8, ip, lsl #4
 800d2a0:	eb0e 130c 	add.w	r3, lr, ip, lsl #4
 800d2a4:	f505 650f 	add.w	r5, r5, #2288	@ 0x8f0
 800d2a8:	6898      	ldr	r0, [r3, #8]
 800d2aa:	68d9      	ldr	r1, [r3, #12]
 800d2ac:	691a      	ldr	r2, [r3, #16]
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
         for(i = 0; i < n && i < IPV6_DNS_SERVER_LIST_SIZE; i++)
 800d2b2:	f10c 0c01 	add.w	ip, ip, #1
 800d2b6:	f1bc 0f01 	cmp.w	ip, #1
 800d2ba:	bf8c      	ite	hi
 800d2bc:	2300      	movhi	r3, #0
 800d2be:	2301      	movls	r3, #1
 800d2c0:	45cc      	cmp	ip, r9
 800d2c2:	d2ca      	bcs.n	800d25a <slaacParseRouterAdv+0x52>
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d1e9      	bne.n	800d29c <slaacParseRouterAdv+0x94>
 800d2c8:	e7c7      	b.n	800d25a <slaacParseRouterAdv+0x52>
	...

0800d2cc <socketInit>:
 * @brief Socket related initialization
 * @return Error code
 **/

error_t socketInit(void)
{
 800d2cc:	b538      	push	{r3, r4, r5, lr}
   uint_t i;
   uint_t j;

   //Initialize socket descriptors
   osMemset(socketTable, 0, sizeof(socketTable));
 800d2ce:	f44f 52c3 	mov.w	r2, #6240	@ 0x1860
 800d2d2:	2100      	movs	r1, #0
 800d2d4:	4813      	ldr	r0, [pc, #76]	@ (800d324 <socketInit+0x58>)
 800d2d6:	f007 fcd5 	bl	8014c84 <memset>

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800d2da:	2400      	movs	r4, #0
 800d2dc:	2c09      	cmp	r4, #9
 800d2de:	d81e      	bhi.n	800d31e <socketInit+0x52>
   {
      //Set socket identifier
      socketTable[i].descriptor = i;
 800d2e0:	4b10      	ldr	r3, [pc, #64]	@ (800d324 <socketInit+0x58>)
 800d2e2:	f44f 701c 	mov.w	r0, #624	@ 0x270
 800d2e6:	fb04 f000 	mul.w	r0, r4, r0
 800d2ea:	501c      	str	r4, [r3, r0]

      //Create an event object to track socket events
      if(!osCreateEvent(&socketTable[i].event))
 800d2ec:	3060      	adds	r0, #96	@ 0x60
 800d2ee:	4418      	add	r0, r3
 800d2f0:	3004      	adds	r0, #4
 800d2f2:	f7f3 fa2f 	bl	8000754 <osCreateEvent>
 800d2f6:	b180      	cbz	r0, 800d31a <socketInit+0x4e>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800d2f8:	3401      	adds	r4, #1
 800d2fa:	e7ef      	b.n	800d2dc <socketInit+0x10>
      {
         //Clean up side effects
         for(j = 0; j < i; j++)
         {
            osDeleteEvent(&socketTable[j].event);
 800d2fc:	f44f 701c 	mov.w	r0, #624	@ 0x270
 800d300:	fb05 f000 	mul.w	r0, r5, r0
 800d304:	3060      	adds	r0, #96	@ 0x60
 800d306:	4b07      	ldr	r3, [pc, #28]	@ (800d324 <socketInit+0x58>)
 800d308:	4418      	add	r0, r3
 800d30a:	3004      	adds	r0, #4
 800d30c:	f7f3 fa2f 	bl	800076e <osDeleteEvent>
         for(j = 0; j < i; j++)
 800d310:	3501      	adds	r5, #1
 800d312:	42ac      	cmp	r4, r5
 800d314:	d8f2      	bhi.n	800d2fc <socketInit+0x30>
         }

         //Report an error
         return ERROR_OUT_OF_RESOURCES;
 800d316:	2065      	movs	r0, #101	@ 0x65
 800d318:	e002      	b.n	800d320 <socketInit+0x54>
         for(j = 0; j < i; j++)
 800d31a:	2500      	movs	r5, #0
 800d31c:	e7f9      	b.n	800d312 <socketInit+0x46>
      }
   }

   //Successful initialization
   return NO_ERROR;
 800d31e:	2000      	movs	r0, #0
}
 800d320:	bd38      	pop	{r3, r4, r5, pc}
 800d322:	bf00      	nop
 800d324:	20001ef8 	.word	0x20001ef8

0800d328 <socketOpen>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketOpen(uint_t type, uint_t protocol)
{
 800d328:	b570      	push	{r4, r5, r6, lr}
 800d32a:	4604      	mov	r4, r0
 800d32c:	460d      	mov	r5, r1
   Socket *socket;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d32e:	4e07      	ldr	r6, [pc, #28]	@ (800d34c <socketOpen+0x24>)
 800d330:	4630      	mov	r0, r6
 800d332:	f7f3 fa54 	bl	80007de <osAcquireMutex>
   //Allocate a new socket
   socket = socketAllocate(type, protocol);
 800d336:	4629      	mov	r1, r5
 800d338:	4620      	mov	r0, r4
 800d33a:	f000 fa87 	bl	800d84c <socketAllocate>
 800d33e:	4604      	mov	r4, r0
   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d340:	4630      	mov	r0, r6
 800d342:	f7f3 fa53 	bl	80007ec <osReleaseMutex>

   //Return a handle to the freshly created socket
   return socket;
}
 800d346:	4620      	mov	r0, r4
 800d348:	bd70      	pop	{r4, r5, r6, pc}
 800d34a:	bf00      	nop
 800d34c:	20000b50 	.word	0x20000b50

0800d350 <socketSetTimeout>:
 **/

error_t socketSetTimeout(Socket *socket, systime_t timeout)
{
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d350:	b160      	cbz	r0, 800d36c <socketSetTimeout+0x1c>
{
 800d352:	b570      	push	{r4, r5, r6, lr}
 800d354:	460c      	mov	r4, r1
 800d356:	4606      	mov	r6, r0
      return ERROR_INVALID_PARAMETER;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d358:	4d05      	ldr	r5, [pc, #20]	@ (800d370 <socketSetTimeout+0x20>)
 800d35a:	4628      	mov	r0, r5
 800d35c:	f7f3 fa3f 	bl	80007de <osAcquireMutex>
   //Record timeout value
   socket->timeout = timeout;
 800d360:	6474      	str	r4, [r6, #68]	@ 0x44
   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d362:	4628      	mov	r0, r5
 800d364:	f7f3 fa42 	bl	80007ec <osReleaseMutex>

   //No error to report
   return NO_ERROR;
 800d368:	2000      	movs	r0, #0
}
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800d36c:	2002      	movs	r0, #2
}
 800d36e:	4770      	bx	lr
 800d370:	20000b50 	.word	0x20000b50

0800d374 <socketSetTxBufferSize>:

error_t socketSetTxBufferSize(Socket *socket, size_t size)
{
#if (TCP_SUPPORT == ENABLED)
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d374:	b190      	cbz	r0, 800d39c <socketSetTxBufferSize+0x28>
{
 800d376:	b538      	push	{r3, r4, r5, lr}
 800d378:	460c      	mov	r4, r1
 800d37a:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //This function shall be used with connection-oriented sockets
   if(socket->type != SOCKET_TYPE_STREAM)
 800d37c:	6843      	ldr	r3, [r0, #4]
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d001      	beq.n	800d386 <socketSetTxBufferSize+0x12>
      return ERROR_INVALID_SOCKET;
 800d382:	20d0      	movs	r0, #208	@ 0xd0
   //No error to report
   return NO_ERROR;
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 800d384:	bd38      	pop	{r3, r4, r5, pc}
   if(tcpGetState(socket) != TCP_STATE_CLOSED)
 800d386:	f001 f941 	bl	800e60c <tcpGetState>
 800d38a:	b948      	cbnz	r0, 800d3a0 <socketSetTxBufferSize+0x2c>
   if(size < 1 || size > TCP_MAX_TX_BUFFER_SIZE)
 800d38c:	1e62      	subs	r2, r4, #1
 800d38e:	f645 135f 	movw	r3, #22879	@ 0x595f
 800d392:	429a      	cmp	r2, r3
 800d394:	d806      	bhi.n	800d3a4 <socketSetTxBufferSize+0x30>
   socket->txBufferSize = size;
 800d396:	f8c5 4190 	str.w	r4, [r5, #400]	@ 0x190
   return NO_ERROR;
 800d39a:	e7f3      	b.n	800d384 <socketSetTxBufferSize+0x10>
      return ERROR_INVALID_PARAMETER;
 800d39c:	2002      	movs	r0, #2
}
 800d39e:	4770      	bx	lr
      return ERROR_INVALID_SOCKET;
 800d3a0:	20d0      	movs	r0, #208	@ 0xd0
 800d3a2:	e7ef      	b.n	800d384 <socketSetTxBufferSize+0x10>
      return ERROR_INVALID_PARAMETER;
 800d3a4:	2002      	movs	r0, #2
 800d3a6:	e7ed      	b.n	800d384 <socketSetTxBufferSize+0x10>

0800d3a8 <socketSetRxBufferSize>:

error_t socketSetRxBufferSize(Socket *socket, size_t size)
{
#if (TCP_SUPPORT == ENABLED)
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d3a8:	b1b0      	cbz	r0, 800d3d8 <socketSetRxBufferSize+0x30>
{
 800d3aa:	b538      	push	{r3, r4, r5, lr}
 800d3ac:	460c      	mov	r4, r1
 800d3ae:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //This function shall be used with connection-oriented sockets
   if(socket->type != SOCKET_TYPE_STREAM)
 800d3b0:	6843      	ldr	r3, [r0, #4]
 800d3b2:	2b01      	cmp	r3, #1
 800d3b4:	d001      	beq.n	800d3ba <socketSetRxBufferSize+0x12>
      return ERROR_INVALID_SOCKET;
 800d3b6:	20d0      	movs	r0, #208	@ 0xd0
   //No error to report
   return NO_ERROR;
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 800d3b8:	bd38      	pop	{r3, r4, r5, pc}
   if(tcpGetState(socket) != TCP_STATE_CLOSED)
 800d3ba:	f001 f927 	bl	800e60c <tcpGetState>
 800d3be:	b968      	cbnz	r0, 800d3dc <socketSetRxBufferSize+0x34>
   if(size < 1 || size > TCP_MAX_RX_BUFFER_SIZE)
 800d3c0:	1e62      	subs	r2, r4, #1
 800d3c2:	f645 135f 	movw	r3, #22879	@ 0x595f
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d80a      	bhi.n	800d3e0 <socketSetRxBufferSize+0x38>
   socket->rxBufferSize = size;
 800d3ca:	f8c5 4214 	str.w	r4, [r5, #532]	@ 0x214
   tcpComputeWindowScaleFactor(socket);
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	f002 f975 	bl	800f6be <tcpComputeWindowScaleFactor>
   return NO_ERROR;
 800d3d4:	2000      	movs	r0, #0
 800d3d6:	e7ef      	b.n	800d3b8 <socketSetRxBufferSize+0x10>
      return ERROR_INVALID_PARAMETER;
 800d3d8:	2002      	movs	r0, #2
}
 800d3da:	4770      	bx	lr
      return ERROR_INVALID_SOCKET;
 800d3dc:	20d0      	movs	r0, #208	@ 0xd0
 800d3de:	e7eb      	b.n	800d3b8 <socketSetRxBufferSize+0x10>
      return ERROR_INVALID_PARAMETER;
 800d3e0:	2002      	movs	r0, #2
 800d3e2:	e7e9      	b.n	800d3b8 <socketSetRxBufferSize+0x10>

0800d3e4 <socketSetInterface>:
 **/

error_t socketSetInterface(Socket *socket, NetInterface *interface)
{
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d3e4:	b110      	cbz	r0, 800d3ec <socketSetInterface+0x8>
      return ERROR_INVALID_PARAMETER;

   //Explicitly associate the socket with the specified interface
   socket->interface = interface;
 800d3e6:	60c1      	str	r1, [r0, #12]

   //No error to report
   return NO_ERROR;
 800d3e8:	2000      	movs	r0, #0
 800d3ea:	4770      	bx	lr
      return ERROR_INVALID_PARAMETER;
 800d3ec:	2002      	movs	r0, #2
}
 800d3ee:	4770      	bx	lr

0800d3f0 <socketConnect>:
 * @return Error code
 **/

error_t socketConnect(Socket *socket, const IpAddr *remoteIpAddr,
   uint16_t remotePort)
{
 800d3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   error_t error;

   //Check input parameters
   if(socket == NULL || remoteIpAddr == NULL)
 800d3f4:	2900      	cmp	r1, #0
 800d3f6:	bf18      	it	ne
 800d3f8:	2800      	cmpne	r0, #0
 800d3fa:	d033      	beq.n	800d464 <socketConnect+0x74>
 800d3fc:	4617      	mov	r7, r2
 800d3fe:	4606      	mov	r6, r0
 800d400:	460d      	mov	r5, r1
      return ERROR_INVALID_PARAMETER;

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800d402:	6843      	ldr	r3, [r0, #4]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d005      	beq.n	800d414 <socketConnect+0x24>
      osReleaseMutex(&netMutex);
   }
   else
#endif
   //Connectionless socket?
   if(socket->type == SOCKET_TYPE_DGRAM)
 800d408:	2b02      	cmp	r3, #2
 800d40a:	d012      	beq.n	800d432 <socketConnect+0x42>
      socket->remotePort = remotePort;
      //No error to report
      error = NO_ERROR;
   }
   //Raw socket?
   else if(socket->type == SOCKET_TYPE_RAW_IP)
 800d40c:	2b03      	cmp	r3, #3
 800d40e:	d01c      	beq.n	800d44a <socketConnect+0x5a>
   }
   //Invalid socket type?
   else
   {
      //Report an error
      error = ERROR_INVALID_SOCKET;
 800d410:	24d0      	movs	r4, #208	@ 0xd0
 800d412:	e028      	b.n	800d466 <socketConnect+0x76>
      osAcquireMutex(&netMutex);
 800d414:	f8df 8054 	ldr.w	r8, [pc, #84]	@ 800d46c <socketConnect+0x7c>
 800d418:	4640      	mov	r0, r8
 800d41a:	f7f3 f9e0 	bl	80007de <osAcquireMutex>
      error = tcpConnect(socket, remoteIpAddr, remotePort);
 800d41e:	463a      	mov	r2, r7
 800d420:	4629      	mov	r1, r5
 800d422:	4630      	mov	r0, r6
 800d424:	f000 fe48 	bl	800e0b8 <tcpConnect>
 800d428:	4604      	mov	r4, r0
      osReleaseMutex(&netMutex);
 800d42a:	4640      	mov	r0, r8
 800d42c:	f7f3 f9de 	bl	80007ec <osReleaseMutex>
 800d430:	e019      	b.n	800d466 <socketConnect+0x76>
      socket->remoteIpAddr = *remoteIpAddr;
 800d432:	f100 0428 	add.w	r4, r0, #40	@ 0x28
 800d436:	468e      	mov	lr, r1
 800d438:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d43c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d43e:	f8de 3000 	ldr.w	r3, [lr]
 800d442:	6023      	str	r3, [r4, #0]
      socket->remotePort = remotePort;
 800d444:	87b7      	strh	r7, [r6, #60]	@ 0x3c
      error = NO_ERROR;
 800d446:	2400      	movs	r4, #0
 800d448:	e00d      	b.n	800d466 <socketConnect+0x76>
      socket->remoteIpAddr = *remoteIpAddr;
 800d44a:	f100 0c28 	add.w	ip, r0, #40	@ 0x28
 800d44e:	468e      	mov	lr, r1
 800d450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d458:	f8de 3000 	ldr.w	r3, [lr]
 800d45c:	f8cc 3000 	str.w	r3, [ip]
      error = NO_ERROR;
 800d460:	2400      	movs	r4, #0
 800d462:	e000      	b.n	800d466 <socketConnect+0x76>
      return ERROR_INVALID_PARAMETER;
 800d464:	2402      	movs	r4, #2
   }

   //Return status code
   return error;
}
 800d466:	4620      	mov	r0, r4
 800d468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d46c:	20000b50 	.word	0x20000b50

0800d470 <socketListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t socketListen(Socket *socket, uint_t backlog)
{
 800d470:	b570      	push	{r4, r5, r6, lr}
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 800d472:	b1a0      	cbz	r0, 800d49e <socketListen+0x2e>
 800d474:	460c      	mov	r4, r1
 800d476:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //This function shall be used with connection-oriented sockets
   if(socket->type != SOCKET_TYPE_STREAM)
 800d478:	6843      	ldr	r3, [r0, #4]
 800d47a:	2b01      	cmp	r3, #1
 800d47c:	d002      	beq.n	800d484 <socketListen+0x14>
      return ERROR_INVALID_SOCKET;
 800d47e:	24d0      	movs	r4, #208	@ 0xd0
   //Return status code
   return error;
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 800d480:	4620      	mov	r0, r4
 800d482:	bd70      	pop	{r4, r5, r6, pc}
   osAcquireMutex(&netMutex);
 800d484:	4e07      	ldr	r6, [pc, #28]	@ (800d4a4 <socketListen+0x34>)
 800d486:	4630      	mov	r0, r6
 800d488:	f7f3 f9a9 	bl	80007de <osAcquireMutex>
   error = tcpListen(socket, backlog);
 800d48c:	4621      	mov	r1, r4
 800d48e:	4628      	mov	r0, r5
 800d490:	f000 fecf 	bl	800e232 <tcpListen>
 800d494:	4604      	mov	r4, r0
   osReleaseMutex(&netMutex);
 800d496:	4630      	mov	r0, r6
 800d498:	f7f3 f9a8 	bl	80007ec <osReleaseMutex>
   return error;
 800d49c:	e7f0      	b.n	800d480 <socketListen+0x10>
      return ERROR_INVALID_PARAMETER;
 800d49e:	2402      	movs	r4, #2
 800d4a0:	e7ee      	b.n	800d480 <socketListen+0x10>
 800d4a2:	bf00      	nop
 800d4a4:	20000b50 	.word	0x20000b50

0800d4a8 <socketAccept>:
 * @return Handle to the socket in which the actual connection is made
 **/

Socket *socketAccept(Socket *socket, IpAddr *clientIpAddr,
   uint16_t *clientPort)
{
 800d4a8:	b508      	push	{r3, lr}
#if (TCP_SUPPORT == ENABLED)
   Socket *newSocket;

   //Make sure the socket handle is valid
   if(socket == NULL)
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	b128      	cbz	r0, 800d4ba <socketAccept+0x12>
      return NULL;

   //This function shall be used with connection-oriented sockets
   if(socket->type != SOCKET_TYPE_STREAM)
 800d4ae:	6840      	ldr	r0, [r0, #4]
 800d4b0:	2801      	cmp	r0, #1
 800d4b2:	d103      	bne.n	800d4bc <socketAccept+0x14>
      return NULL;

   //Accept an incoming connection attempt
   newSocket = tcpAccept(socket, clientIpAddr, clientPort);
 800d4b4:	4618      	mov	r0, r3
 800d4b6:	f001 f8b9 	bl	800e62c <tcpAccept>
   //Return a handle to the newly created socket
   return newSocket;
#else
   return NULL;
#endif
}
 800d4ba:	bd08      	pop	{r3, pc}
      return NULL;
 800d4bc:	2000      	movs	r0, #0
 800d4be:	e7fc      	b.n	800d4ba <socketAccept+0x12>

0800d4c0 <socketSendTo>:
 * @return Error code
 **/

error_t socketSendTo(Socket *socket, const IpAddr *destIpAddr, uint16_t destPort,
   const void *data, size_t length, size_t *written, uint_t flags)
{
 800d4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c4:	b098      	sub	sp, #96	@ 0x60
 800d4c6:	4605      	mov	r5, r0
 800d4c8:	460c      	mov	r4, r1
 800d4ca:	4690      	mov	r8, r2
 800d4cc:	461e      	mov	r6, r3
 800d4ce:	9f1f      	ldr	r7, [sp, #124]	@ 0x7c
   error_t error;

   //No data has been transmitted yet
   if(written != NULL)
 800d4d0:	b10f      	cbz	r7, 800d4d6 <socketSendTo+0x16>
   {
      *written = 0;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	603b      	str	r3, [r7, #0]
   }

   //Make sure the socket handle is valid
   if(socket == NULL)
 800d4d6:	2d00      	cmp	r5, #0
 800d4d8:	d03d      	beq.n	800d556 <socketSendTo+0x96>
      return ERROR_INVALID_PARAMETER;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d4da:	4820      	ldr	r0, [pc, #128]	@ (800d55c <socketSendTo+0x9c>)
 800d4dc:	f7f3 f97f 	bl	80007de <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800d4e0:	686b      	ldr	r3, [r5, #4]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d01d      	beq.n	800d522 <socketSendTo+0x62>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 800d4e6:	2254      	movs	r2, #84	@ 0x54
 800d4e8:	2100      	movs	r1, #0
 800d4ea:	a803      	add	r0, sp, #12
 800d4ec:	f007 fbca 	bl	8014c84 <memset>

      //Set destination IP address
      if(destIpAddr != NULL)
 800d4f0:	b154      	cbz	r4, 800d508 <socketSendTo+0x48>
      {
         message.destIpAddr = *destIpAddr;
 800d4f2:	f10d 0e3c 	add.w	lr, sp, #60	@ 0x3c
 800d4f6:	46a4      	mov	ip, r4
 800d4f8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d4fc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800d500:	f8dc 3000 	ldr.w	r3, [ip]
 800d504:	f8ce 3000 	str.w	r3, [lr]
      }

      //Set destination port
      message.destPort = destPort;
 800d508:	f8ad 8050 	strh.w	r8, [sp, #80]	@ 0x50

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 800d50c:	686b      	ldr	r3, [r5, #4]
 800d50e:	2b02      	cmp	r3, #2
 800d510:	d011      	beq.n	800d536 <socketSendTo+0x76>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 800d512:	24d0      	movs	r4, #208	@ 0xd0
         }
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d514:	4811      	ldr	r0, [pc, #68]	@ (800d55c <socketSendTo+0x9c>)
 800d516:	f7f3 f969 	bl	80007ec <osReleaseMutex>

   //Return status code
   return error;
}
 800d51a:	4620      	mov	r0, r4
 800d51c:	b018      	add	sp, #96	@ 0x60
 800d51e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      error = tcpSend(socket, data, length, written, flags);
 800d522:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d524:	9300      	str	r3, [sp, #0]
 800d526:	463b      	mov	r3, r7
 800d528:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 800d52a:	4631      	mov	r1, r6
 800d52c:	4628      	mov	r0, r5
 800d52e:	f000 fe94 	bl	800e25a <tcpSend>
 800d532:	4604      	mov	r4, r0
 800d534:	e7ee      	b.n	800d514 <socketSendTo+0x54>
         message.data = (uint8_t *) data;
 800d536:	9603      	str	r6, [sp, #12]
         message.length = length;
 800d538:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d53a:	9305      	str	r3, [sp, #20]
         error = udpSendDatagram(socket, &message, flags);
 800d53c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d53e:	a903      	add	r1, sp, #12
 800d540:	4628      	mov	r0, r5
 800d542:	f003 fa51 	bl	80109e8 <udpSendDatagram>
      if(!error)
 800d546:	4604      	mov	r4, r0
 800d548:	2800      	cmp	r0, #0
 800d54a:	d1e3      	bne.n	800d514 <socketSendTo+0x54>
         if(written != NULL)
 800d54c:	2f00      	cmp	r7, #0
 800d54e:	d0e1      	beq.n	800d514 <socketSendTo+0x54>
            *written = message.length;
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	603b      	str	r3, [r7, #0]
 800d554:	e7de      	b.n	800d514 <socketSendTo+0x54>
      return ERROR_INVALID_PARAMETER;
 800d556:	2402      	movs	r4, #2
 800d558:	e7df      	b.n	800d51a <socketSendTo+0x5a>
 800d55a:	bf00      	nop
 800d55c:	20000b50 	.word	0x20000b50

0800d560 <socketSend>:
{
 800d560:	b510      	push	{r4, lr}
 800d562:	b084      	sub	sp, #16
   return socketSendTo(socket, &socket->remoteIpAddr, socket->remotePort,
 800d564:	9c06      	ldr	r4, [sp, #24]
 800d566:	9402      	str	r4, [sp, #8]
 800d568:	9301      	str	r3, [sp, #4]
 800d56a:	9200      	str	r2, [sp, #0]
 800d56c:	460b      	mov	r3, r1
 800d56e:	8f82      	ldrh	r2, [r0, #60]	@ 0x3c
 800d570:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 800d574:	f7ff ffa4 	bl	800d4c0 <socketSendTo>
}
 800d578:	b004      	add	sp, #16
 800d57a:	bd10      	pop	{r4, pc}

0800d57c <socketReceiveEx>:
 * @return Error code
 **/

error_t socketReceiveEx(Socket *socket, IpAddr *srcIpAddr, uint16_t *srcPort,
   IpAddr *destIpAddr, void *data, size_t size, size_t *received, uint_t flags)
{
 800d57c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d580:	b099      	sub	sp, #100	@ 0x64
 800d582:	4604      	mov	r4, r0
 800d584:	460f      	mov	r7, r1
 800d586:	4690      	mov	r8, r2
 800d588:	461e      	mov	r6, r3
 800d58a:	f8dd 9088 	ldr.w	r9, [sp, #136]	@ 0x88
   error_t error;

   //No data has been received yet
   if(received != NULL)
 800d58e:	f1b9 0f00 	cmp.w	r9, #0
 800d592:	d002      	beq.n	800d59a <socketReceiveEx+0x1e>
      *received = 0;
 800d594:	2300      	movs	r3, #0
 800d596:	f8c9 3000 	str.w	r3, [r9]

   //Make sure the socket handle is valid
   if(socket == NULL)
 800d59a:	2c00      	cmp	r4, #0
 800d59c:	d058      	beq.n	800d650 <socketReceiveEx+0xd4>
      return ERROR_INVALID_PARAMETER;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d59e:	482d      	ldr	r0, [pc, #180]	@ (800d654 <socketReceiveEx+0xd8>)
 800d5a0:	f7f3 f91d 	bl	80007de <osAcquireMutex>

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800d5a4:	6863      	ldr	r3, [r4, #4]
 800d5a6:	2b01      	cmp	r3, #1
 800d5a8:	d00f      	beq.n	800d5ca <socketReceiveEx+0x4e>
#endif
   {
      SocketMsg message;

      //Initialize structure
      message = SOCKET_DEFAULT_MSG;
 800d5aa:	2254      	movs	r2, #84	@ 0x54
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	a803      	add	r0, sp, #12
 800d5b0:	f007 fb68 	bl	8014c84 <memset>

#if (UDP_SUPPORT == ENABLED)
      //Connectionless socket?
      if(socket->type == SOCKET_TYPE_DGRAM)
 800d5b4:	6863      	ldr	r3, [r4, #4]
 800d5b6:	2b02      	cmp	r3, #2
 800d5b8:	d027      	beq.n	800d60a <socketReceiveEx+0x8e>
      else
#endif
      //Invalid socket type?
      {
         //Report an error
         error = ERROR_INVALID_SOCKET;
 800d5ba:	25d0      	movs	r5, #208	@ 0xd0
         *received = message.length;
      }
   }

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d5bc:	4825      	ldr	r0, [pc, #148]	@ (800d654 <socketReceiveEx+0xd8>)
 800d5be:	f7f3 f915 	bl	80007ec <osReleaseMutex>

   //Return status code
   return error;
}
 800d5c2:	4628      	mov	r0, r5
 800d5c4:	b019      	add	sp, #100	@ 0x64
 800d5c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      error = tcpReceive(socket, data, size, received, flags);
 800d5ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	464b      	mov	r3, r9
 800d5d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5d2:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f000 febf 	bl	800e358 <tcpReceive>
 800d5da:	4605      	mov	r5, r0
      if(srcIpAddr != NULL)
 800d5dc:	b13f      	cbz	r7, 800d5ee <socketReceiveEx+0x72>
         *srcIpAddr = socket->remoteIpAddr;
 800d5de:	f104 0c28 	add.w	ip, r4, #40	@ 0x28
 800d5e2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5e6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d5e8:	f8dc 3000 	ldr.w	r3, [ip]
 800d5ec:	603b      	str	r3, [r7, #0]
      if(srcPort != NULL)
 800d5ee:	f1b8 0f00 	cmp.w	r8, #0
 800d5f2:	d002      	beq.n	800d5fa <socketReceiveEx+0x7e>
         *srcPort = socket->remotePort;
 800d5f4:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 800d5f6:	f8a8 3000 	strh.w	r3, [r8]
      if(destIpAddr != NULL)
 800d5fa:	2e00      	cmp	r6, #0
 800d5fc:	d0de      	beq.n	800d5bc <socketReceiveEx+0x40>
         *destIpAddr = socket->localIpAddr;
 800d5fe:	3410      	adds	r4, #16
 800d600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d602:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d604:	6823      	ldr	r3, [r4, #0]
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	e7d8      	b.n	800d5bc <socketReceiveEx+0x40>
         message.data = data;
 800d60a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800d60c:	9303      	str	r3, [sp, #12]
         message.size = size;
 800d60e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d610:	9304      	str	r3, [sp, #16]
         error = udpReceiveDatagram(socket, &message, flags);
 800d612:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d614:	a903      	add	r1, sp, #12
 800d616:	4620      	mov	r0, r4
 800d618:	f003 fa9c 	bl	8010b54 <udpReceiveDatagram>
      if(!error)
 800d61c:	4605      	mov	r5, r0
 800d61e:	2800      	cmp	r0, #0
 800d620:	d1cc      	bne.n	800d5bc <socketReceiveEx+0x40>
         if(srcIpAddr != NULL)
 800d622:	b127      	cbz	r7, 800d62e <socketReceiveEx+0xb2>
            *srcIpAddr = message.srcIpAddr;
 800d624:	ac09      	add	r4, sp, #36	@ 0x24
 800d626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d628:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 800d62a:	6823      	ldr	r3, [r4, #0]
 800d62c:	603b      	str	r3, [r7, #0]
         if(srcPort != NULL)
 800d62e:	f1b8 0f00 	cmp.w	r8, #0
 800d632:	d003      	beq.n	800d63c <socketReceiveEx+0xc0>
            *srcPort = message.srcPort;
 800d634:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800d638:	f8a8 3000 	strh.w	r3, [r8]
         if(destIpAddr != NULL)
 800d63c:	b126      	cbz	r6, 800d648 <socketReceiveEx+0xcc>
            *destIpAddr = message.destIpAddr;
 800d63e:	ac0f      	add	r4, sp, #60	@ 0x3c
 800d640:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d642:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	6033      	str	r3, [r6, #0]
         *received = message.length;
 800d648:	9b05      	ldr	r3, [sp, #20]
 800d64a:	f8c9 3000 	str.w	r3, [r9]
 800d64e:	e7b5      	b.n	800d5bc <socketReceiveEx+0x40>
      return ERROR_INVALID_PARAMETER;
 800d650:	2502      	movs	r5, #2
 800d652:	e7b6      	b.n	800d5c2 <socketReceiveEx+0x46>
 800d654:	20000b50 	.word	0x20000b50

0800d658 <socketReceive>:
{
 800d658:	b510      	push	{r4, lr}
 800d65a:	b084      	sub	sp, #16
   return socketReceiveEx(socket, NULL, NULL, NULL, data, size, received,
 800d65c:	9c06      	ldr	r4, [sp, #24]
 800d65e:	9403      	str	r4, [sp, #12]
 800d660:	9302      	str	r3, [sp, #8]
 800d662:	9201      	str	r2, [sp, #4]
 800d664:	9100      	str	r1, [sp, #0]
 800d666:	2300      	movs	r3, #0
 800d668:	461a      	mov	r2, r3
 800d66a:	4619      	mov	r1, r3
 800d66c:	f7ff ff86 	bl	800d57c <socketReceiveEx>
}
 800d670:	b004      	add	sp, #16
 800d672:	bd10      	pop	{r4, pc}

0800d674 <socketGetLocalAddr>:

error_t socketGetLocalAddr(Socket *socket, IpAddr *localIpAddr,
   uint16_t *localPort)
{
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d674:	b198      	cbz	r0, 800d69e <socketGetLocalAddr+0x2a>
{
 800d676:	b530      	push	{r4, r5, lr}
 800d678:	4614      	mov	r4, r2
 800d67a:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //Retrieve local IP address
   if(localIpAddr != NULL)
 800d67c:	b151      	cbz	r1, 800d694 <socketGetLocalAddr+0x20>
   {
      *localIpAddr = socket->localIpAddr;
 800d67e:	468c      	mov	ip, r1
 800d680:	f100 0e10 	add.w	lr, r0, #16
 800d684:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d688:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d68c:	f8de 3000 	ldr.w	r3, [lr]
 800d690:	f8cc 3000 	str.w	r3, [ip]
   }

   //Retrieve local port number
   if(localPort != NULL)
 800d694:	b12c      	cbz	r4, 800d6a2 <socketGetLocalAddr+0x2e>
   {
      *localPort = socket->localPort;
 800d696:	8cab      	ldrh	r3, [r5, #36]	@ 0x24
 800d698:	8023      	strh	r3, [r4, #0]
   }

   //Successful processing
   return NO_ERROR;
 800d69a:	2000      	movs	r0, #0
}
 800d69c:	bd30      	pop	{r4, r5, pc}
      return ERROR_INVALID_PARAMETER;
 800d69e:	2002      	movs	r0, #2
}
 800d6a0:	4770      	bx	lr
   return NO_ERROR;
 800d6a2:	2000      	movs	r0, #0
 800d6a4:	e7fa      	b.n	800d69c <socketGetLocalAddr+0x28>
	...

0800d6a8 <socketShutdown>:
 * @param[in] how Flag that describes what types of operation will no longer be allowed
 * @return Error code
 **/

error_t socketShutdown(Socket *socket, uint_t how)
{
 800d6a8:	b570      	push	{r4, r5, r6, lr}
#if (TCP_SUPPORT == ENABLED)
   error_t error;

   //Make sure the socket handle is valid
   if(socket == NULL)
 800d6aa:	b1a0      	cbz	r0, 800d6d6 <socketShutdown+0x2e>
 800d6ac:	460c      	mov	r4, r1
 800d6ae:	4605      	mov	r5, r0
      return ERROR_INVALID_PARAMETER;

   //Make sure the socket type is correct
   if(socket->type != SOCKET_TYPE_STREAM)
 800d6b0:	6843      	ldr	r3, [r0, #4]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d111      	bne.n	800d6da <socketShutdown+0x32>
      return ERROR_INVALID_SOCKET;

   //Check flags
   if(how != SOCKET_SD_SEND && how != SOCKET_SD_RECEIVE &&
 800d6b6:	2902      	cmp	r1, #2
 800d6b8:	d811      	bhi.n	800d6de <socketShutdown+0x36>
   {
      return ERROR_INVALID_PARAMETER;
   }

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d6ba:	4e0a      	ldr	r6, [pc, #40]	@ (800d6e4 <socketShutdown+0x3c>)
 800d6bc:	4630      	mov	r0, r6
 800d6be:	f7f3 f88e 	bl	80007de <osAcquireMutex>

   //Graceful shutdown
   error = tcpShutdown(socket, how);
 800d6c2:	4621      	mov	r1, r4
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	f000 feef 	bl	800e4a8 <tcpShutdown>
 800d6ca:	4604      	mov	r4, r0

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d6cc:	4630      	mov	r0, r6
 800d6ce:	f7f3 f88d 	bl	80007ec <osReleaseMutex>
   //Return status code
   return error;
#else
   return ERROR_NOT_IMPLEMENTED;
#endif
}
 800d6d2:	4620      	mov	r0, r4
 800d6d4:	bd70      	pop	{r4, r5, r6, pc}
      return ERROR_INVALID_PARAMETER;
 800d6d6:	2402      	movs	r4, #2
 800d6d8:	e7fb      	b.n	800d6d2 <socketShutdown+0x2a>
      return ERROR_INVALID_SOCKET;
 800d6da:	24d0      	movs	r4, #208	@ 0xd0
 800d6dc:	e7f9      	b.n	800d6d2 <socketShutdown+0x2a>
      return ERROR_INVALID_PARAMETER;
 800d6de:	2402      	movs	r4, #2
 800d6e0:	e7f7      	b.n	800d6d2 <socketShutdown+0x2a>
 800d6e2:	bf00      	nop
 800d6e4:	20000b50 	.word	0x20000b50

0800d6e8 <socketClose>:
 **/

void socketClose(Socket *socket)
{
   //Make sure the socket handle is valid
   if(socket == NULL)
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d047      	beq.n	800d77c <socketClose+0x94>
{
 800d6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d6ee:	b087      	sub	sp, #28
 800d6f0:	4605      	mov	r5, r0
      return;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800d6f2:	4823      	ldr	r0, [pc, #140]	@ (800d780 <socketClose+0x98>)
 800d6f4:	f7f3 f873 	bl	80007de <osAcquireMutex>

#if (SOCKET_MAX_MULTICAST_GROUPS > 0)
   //Connectionless or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 800d6f8:	686b      	ldr	r3, [r5, #4]
 800d6fa:	3b02      	subs	r3, #2
 800d6fc:	2b01      	cmp	r3, #1
 800d6fe:	d92a      	bls.n	800d756 <socketClose+0x6e>
   }
#endif

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(socket->type == SOCKET_TYPE_STREAM)
 800d700:	686b      	ldr	r3, [r5, #4]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d029      	beq.n	800d75a <socketClose+0x72>
      tcpAbort(socket);
   }
#endif
#if (UDP_SUPPORT == ENABLED || RAW_SOCKET_SUPPORT == ENABLED)
   //Connectionless socket or raw socket?
   if(socket->type == SOCKET_TYPE_DGRAM ||
 800d706:	686b      	ldr	r3, [r5, #4]
      socket->type == SOCKET_TYPE_RAW_IP ||
 800d708:	3b02      	subs	r3, #2
   if(socket->type == SOCKET_TYPE_DGRAM ||
 800d70a:	2b02      	cmp	r3, #2
 800d70c:	d831      	bhi.n	800d772 <socketClose+0x8a>
      socket->type == SOCKET_TYPE_RAW_ETH)
   {
      //Point to the first item in the receive queue
      SocketQueueItem *queueItem = socket->receiveQueue;
 800d70e:	f8d5 326c 	ldr.w	r3, [r5, #620]	@ 0x26c

      //Purge the receive queue
      while(queueItem != NULL)
 800d712:	e02b      	b.n	800d76c <socketClose+0x84>
            socket->multicastGroups[i].addr = IP_ADDR_UNSPECIFIED;
 800d714:	eb06 0486 	add.w	r4, r6, r6, lsl #2
 800d718:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800d71c:	344c      	adds	r4, #76	@ 0x4c
 800d71e:	4f19      	ldr	r7, [pc, #100]	@ (800d784 <socketClose+0x9c>)
 800d720:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d722:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	6023      	str	r3, [r4, #0]
            ipUpdateMulticastFilter(socket->interface, &groupAddr);
 800d728:	a901      	add	r1, sp, #4
 800d72a:	68e8      	ldr	r0, [r5, #12]
 800d72c:	f7f7 fe70 	bl	8005410 <ipUpdateMulticastFilter>
      for(i = 0; i < SOCKET_MAX_MULTICAST_GROUPS; i++)
 800d730:	3601      	adds	r6, #1
 800d732:	2e00      	cmp	r6, #0
 800d734:	d1e4      	bne.n	800d700 <socketClose+0x18>
         groupAddr = socket->multicastGroups[i].addr;
 800d736:	eb06 0486 	add.w	r4, r6, r6, lsl #2
 800d73a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800d73e:	f10d 0c04 	add.w	ip, sp, #4
 800d742:	344c      	adds	r4, #76	@ 0x4c
 800d744:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d746:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d74a:	6823      	ldr	r3, [r4, #0]
 800d74c:	f8cc 3000 	str.w	r3, [ip]
         if(groupAddr.length != 0)
 800d750:	2800      	cmp	r0, #0
 800d752:	d0ed      	beq.n	800d730 <socketClose+0x48>
 800d754:	e7de      	b.n	800d714 <socketClose+0x2c>
      for(i = 0; i < SOCKET_MAX_MULTICAST_GROUPS; i++)
 800d756:	2600      	movs	r6, #0
 800d758:	e7eb      	b.n	800d732 <socketClose+0x4a>
      tcpAbort(socket);
 800d75a:	4628      	mov	r0, r5
 800d75c:	f000 ff2a 	bl	800e5b4 <tcpAbort>
 800d760:	e7d1      	b.n	800d706 <socketClose+0x1e>
      {
         //Keep track of the next item in the queue
         SocketQueueItem *nextQueueItem = queueItem->next;
 800d762:	681c      	ldr	r4, [r3, #0]
         //Free previously allocated memory
         netBufferFree(queueItem->buffer);
 800d764:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800d766:	f7fe fcff 	bl	800c168 <netBufferFree>
         //Point to the next item
         queueItem = nextQueueItem;
 800d76a:	4623      	mov	r3, r4
      while(queueItem != NULL)
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1f8      	bne.n	800d762 <socketClose+0x7a>
      }

      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
 800d770:	606b      	str	r3, [r5, #4]
   }
#endif

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800d772:	4803      	ldr	r0, [pc, #12]	@ (800d780 <socketClose+0x98>)
 800d774:	f7f3 f83a 	bl	80007ec <osReleaseMutex>
}
 800d778:	b007      	add	sp, #28
 800d77a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d77c:	4770      	bx	lr
 800d77e:	bf00      	nop
 800d780:	20000b50 	.word	0x20000b50
 800d784:	08019ef8 	.word	0x08019ef8

0800d788 <getHostByName>:
#else
   protocol = HOST_NAME_RESOLVER_ANY;
#endif

   //Check parameters
   if(name == NULL || ipAddr == NULL)
 800d788:	2a00      	cmp	r2, #0
 800d78a:	bf18      	it	ne
 800d78c:	2900      	cmpne	r1, #0
 800d78e:	d058      	beq.n	800d842 <getHostByName+0xba>
{
 800d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d794:	4605      	mov	r5, r0
 800d796:	461c      	mov	r4, r3
 800d798:	460e      	mov	r6, r1
 800d79a:	4617      	mov	r7, r2
      return ERROR_INVALID_PARAMETER;

   //Use default network interface?
   if(interface == NULL)
 800d79c:	b168      	cbz	r0, 800d7ba <getHostByName+0x32>
   {
      interface = netGetDefaultInterface();
   }

   //The specified name can be either an IP or a host name
   error = ipStringToAddr(name, ipAddr);
 800d79e:	4639      	mov	r1, r7
 800d7a0:	4630      	mov	r0, r6
 800d7a2:	f7f7 ff10 	bl	80055c6 <ipStringToAddr>

   //Perform name resolution if necessary
   if(error)
 800d7a6:	b398      	cbz	r0, 800d810 <getHostByName+0x88>
   {
      //The user may provide a hint to choose between IPv4 and IPv6
      if((flags & HOST_TYPE_IPV4) != 0)
 800d7a8:	f014 0f10 	tst.w	r4, #16
 800d7ac:	d109      	bne.n	800d7c2 <getHostByName+0x3a>
      {
         type = HOST_TYPE_IPV4;
      }
      else if((flags & HOST_TYPE_IPV6) != 0)
 800d7ae:	f014 0f20 	tst.w	r4, #32
 800d7b2:	d12f      	bne.n	800d814 <getHostByName+0x8c>
   type = HOST_TYPE_IPV4;
 800d7b4:	f04f 0810 	mov.w	r8, #16
 800d7b8:	e005      	b.n	800d7c6 <getHostByName+0x3e>
      interface = netGetDefaultInterface();
 800d7ba:	f7fe fb4d 	bl	800be58 <netGetDefaultInterface>
 800d7be:	4605      	mov	r5, r0
 800d7c0:	e7ed      	b.n	800d79e <getHostByName+0x16>
         type = HOST_TYPE_IPV4;
 800d7c2:	f04f 0810 	mov.w	r8, #16
      {
         //Just for sanity
      }

      //The user may provide a hint to to select the desired protocol to be used
      if((flags & HOST_NAME_RESOLVER_DNS) != 0)
 800d7c6:	f014 0f01 	tst.w	r4, #1
 800d7ca:	d11b      	bne.n	800d804 <getHostByName+0x7c>
      {
         //Use DNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_DNS;
      }
      else if((flags & HOST_NAME_RESOLVER_MDNS) != 0)
 800d7cc:	f014 0f02 	tst.w	r4, #2
 800d7d0:	d128      	bne.n	800d824 <getHostByName+0x9c>
      {
         //Use mDNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_MDNS;
      }
      else if((flags & HOST_NAME_RESOLVER_NBNS) != 0)
 800d7d2:	f014 0f04 	tst.w	r4, #4
 800d7d6:	d12a      	bne.n	800d82e <getHostByName+0xa6>
      {
         //Use NBNS to resolve the specified host name
         protocol = HOST_NAME_RESOLVER_NBNS;
      }
      else if((flags & HOST_NAME_RESOLVER_LLMNR) != 0)
 800d7d8:	f014 0f08 	tst.w	r4, #8
 800d7dc:	d129      	bne.n	800d832 <getHostByName+0xaa>
         protocol = HOST_NAME_RESOLVER_LLMNR;
      }
      else
      {
         //Retrieve the length of the host name to be resolved
         size_t n = osStrlen(name);
 800d7de:	4630      	mov	r0, r6
 800d7e0:	f7f2 fd7e 	bl	80002e0 <strlen>
 800d7e4:	4604      	mov	r4, r0

         //Select the most suitable protocol
         if(n >= 6 && osStrcasecmp(name + n - 6, ".local") == 0)
 800d7e6:	2805      	cmp	r0, #5
 800d7e8:	d907      	bls.n	800d7fa <getHostByName+0x72>
 800d7ea:	3806      	subs	r0, #6
 800d7ec:	4916      	ldr	r1, [pc, #88]	@ (800d848 <getHostByName+0xc0>)
 800d7ee:	4430      	add	r0, r6
 800d7f0:	f007 fa50 	bl	8014c94 <strcasecmp>
 800d7f4:	b130      	cbz	r0, 800d804 <getHostByName+0x7c>
#if (MDNS_CLIENT_SUPPORT == ENABLED)
            //Use mDNS to resolve the specified host name
            protocol = HOST_NAME_RESOLVER_MDNS;
#endif
         }
         else if(n <= 15 && osStrchr(name, '.') == NULL &&
 800d7f6:	2c0f      	cmp	r4, #15
 800d7f8:	d804      	bhi.n	800d804 <getHostByName+0x7c>
 800d7fa:	212e      	movs	r1, #46	@ 0x2e
 800d7fc:	4630      	mov	r0, r6
 800d7fe:	f007 fa65 	bl	8014ccc <strchr>
 800d802:	b150      	cbz	r0, 800d81a <getHostByName+0x92>
#if (DNS_CLIENT_SUPPORT == ENABLED)
      //Use DNS protocol?
      if(protocol == HOST_NAME_RESOLVER_DNS)
      {
         //Perform host name resolution
         error = dnsResolve(interface, name, type, ipAddr);
 800d804:	463b      	mov	r3, r7
 800d806:	4642      	mov	r2, r8
 800d808:	4631      	mov	r1, r6
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7f4 ff8a 	bl	8002724 <dnsResolve>
      }
   }

   //Return status code
   return error;
}
 800d810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         type = HOST_TYPE_IPV6;
 800d814:	f04f 0820 	mov.w	r8, #32
 800d818:	e7d5      	b.n	800d7c6 <getHostByName+0x3e>
         else if(n <= 15 && osStrchr(name, '.') == NULL &&
 800d81a:	f1b8 0f10 	cmp.w	r8, #16
 800d81e:	d1f1      	bne.n	800d804 <getHostByName+0x7c>
            protocol = HOST_NAME_RESOLVER_NBNS;
 800d820:	2304      	movs	r3, #4
 800d822:	e000      	b.n	800d826 <getHostByName+0x9e>
         protocol = HOST_NAME_RESOLVER_MDNS;
 800d824:	2302      	movs	r3, #2
      if(protocol == HOST_NAME_RESOLVER_NBNS)
 800d826:	2b04      	cmp	r3, #4
 800d828:	d005      	beq.n	800d836 <getHostByName+0xae>
         error = ERROR_INVALID_PARAMETER;
 800d82a:	2002      	movs	r0, #2
 800d82c:	e7f0      	b.n	800d810 <getHostByName+0x88>
         protocol = HOST_NAME_RESOLVER_NBNS;
 800d82e:	2304      	movs	r3, #4
 800d830:	e7f9      	b.n	800d826 <getHostByName+0x9e>
         protocol = HOST_NAME_RESOLVER_LLMNR;
 800d832:	2308      	movs	r3, #8
 800d834:	e7f7      	b.n	800d826 <getHostByName+0x9e>
         error = nbnsResolve(interface, name, ipAddr);
 800d836:	463a      	mov	r2, r7
 800d838:	4631      	mov	r1, r6
 800d83a:	4628      	mov	r0, r5
 800d83c:	f7fc f9de 	bl	8009bfc <nbnsResolve>
 800d840:	e7e6      	b.n	800d810 <getHostByName+0x88>
      return ERROR_INVALID_PARAMETER;
 800d842:	2002      	movs	r0, #2
}
 800d844:	4770      	bx	lr
 800d846:	bf00      	nop
 800d848:	0801a690 	.word	0x0801a690

0800d84c <socketAllocate>:
 * @param[in] protocol Protocol to be used
 * @return Handle referencing the new socket
 **/

Socket *socketAllocate(uint_t type, uint_t protocol)
{
 800d84c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d850:	4605      	mov	r5, r0
   //Initialize socket handle
   socket = NULL;

#if (TCP_SUPPORT == ENABLED)
   //Connection-oriented socket?
   if(type == SOCKET_TYPE_STREAM)
 800d852:	2801      	cmp	r0, #1
 800d854:	d005      	beq.n	800d862 <socketAllocate+0x16>
   }
   else
#endif
#if (UDP_SUPPORT == ENABLED)
   //Connectionless socket?
   if(type == SOCKET_TYPE_DGRAM)
 800d856:	2802      	cmp	r0, #2
 800d858:	d008      	beq.n	800d86c <socketAllocate+0x20>
   socket = NULL;
 800d85a:	2400      	movs	r4, #0
      }
   }

   //Return a handle to the freshly created socket
   return socket;
}
 800d85c:	4620      	mov	r0, r4
 800d85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      port = tcpGetDynamicPort();
 800d862:	f000 fc09 	bl	800e078 <tcpGetDynamicPort>
 800d866:	4606      	mov	r6, r0
      protocol = SOCKET_IP_PROTO_TCP;
 800d868:	2706      	movs	r7, #6
 800d86a:	e003      	b.n	800d874 <socketAllocate+0x28>
      port = udpGetDynamicPort();
 800d86c:	f002 ffc2 	bl	80107f4 <udpGetDynamicPort>
 800d870:	4606      	mov	r6, r0
      protocol = SOCKET_IP_PROTO_UDP;
 800d872:	2711      	movs	r7, #17
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800d874:	2300      	movs	r3, #0
 800d876:	2b09      	cmp	r3, #9
 800d878:	d80c      	bhi.n	800d894 <socketAllocate+0x48>
         if(socketTable[i].type == SOCKET_TYPE_UNUSED)
 800d87a:	4a1b      	ldr	r2, [pc, #108]	@ (800d8e8 <socketAllocate+0x9c>)
 800d87c:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800d880:	fb01 2203 	mla	r2, r1, r3, r2
 800d884:	6852      	ldr	r2, [r2, #4]
 800d886:	b10a      	cbz	r2, 800d88c <socketAllocate+0x40>
      for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800d888:	3301      	adds	r3, #1
 800d88a:	e7f4      	b.n	800d876 <socketAllocate+0x2a>
            socket = &socketTable[i];
 800d88c:	4c16      	ldr	r4, [pc, #88]	@ (800d8e8 <socketAllocate+0x9c>)
 800d88e:	fb01 4403 	mla	r4, r1, r3, r4
      if(socket != NULL)
 800d892:	e004      	b.n	800d89e <socketAllocate+0x52>
         socket = tcpKillOldestConnection();
 800d894:	f000 ffbe 	bl	800e814 <tcpKillOldestConnection>
      if(socket != NULL)
 800d898:	4604      	mov	r4, r0
 800d89a:	2800      	cmp	r0, #0
 800d89c:	d0de      	beq.n	800d85c <socketAllocate+0x10>
         i = socket->descriptor;
 800d89e:	f8d4 8000 	ldr.w	r8, [r4]
         osMemset(socket, 0, offsetof(Socket, event));
 800d8a2:	2264      	movs	r2, #100	@ 0x64
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	f007 f9ec 	bl	8014c84 <memset>
         osMemset((uint8_t *) socket + offsetof(Socket, event) + sizeof(OsEvent),
 800d8ac:	f44f 7202 	mov.w	r2, #520	@ 0x208
 800d8b0:	2100      	movs	r1, #0
 800d8b2:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d8b6:	f007 f9e5 	bl	8014c84 <memset>
         socket->descriptor = i;
 800d8ba:	f8c4 8000 	str.w	r8, [r4]
         socket->type = type;
 800d8be:	6065      	str	r5, [r4, #4]
         socket->protocol = protocol;
 800d8c0:	60a7      	str	r7, [r4, #8]
         socket->localPort = port;
 800d8c2:	84a6      	strh	r6, [r4, #36]	@ 0x24
         socket->timeout = INFINITE_DELAY;
 800d8c4:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c8:	6463      	str	r3, [r4, #68]	@ 0x44
         socket->mss = TCP_MAX_MSS;
 800d8ca:	f240 5396 	movw	r3, #1430	@ 0x596
 800d8ce:	f8a4 3084 	strh.w	r3, [r4, #132]	@ 0x84
         socket->txBufferSize = MIN(TCP_DEFAULT_TX_BUFFER_SIZE, TCP_MAX_TX_BUFFER_SIZE);
 800d8d2:	f640 332c 	movw	r3, #2860	@ 0xb2c
 800d8d6:	f8c4 3190 	str.w	r3, [r4, #400]	@ 0x190
         socket->rxBufferSize = MIN(TCP_DEFAULT_RX_BUFFER_SIZE, TCP_MAX_RX_BUFFER_SIZE);
 800d8da:	f8c4 3214 	str.w	r3, [r4, #532]	@ 0x214
         tcpComputeWindowScaleFactor(socket);
 800d8de:	4620      	mov	r0, r4
 800d8e0:	f001 feed 	bl	800f6be <tcpComputeWindowScaleFactor>
 800d8e4:	e7ba      	b.n	800d85c <socketAllocate+0x10>
 800d8e6:	bf00      	nop
 800d8e8:	20001ef8 	.word	0x20001ef8

0800d8ec <socketMulticastFilter>:
 * @return Return TRUE if the multicast packet should be accepted, else FALSE
 **/

bool_t socketMulticastFilter(Socket *socket, const IpAddr *destAddr,
   const IpAddr *srcAddr)
{
 800d8ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8ee:	4606      	mov	r6, r0
 800d8f0:	460d      	mov	r5, r1
   uint_t i;
   bool_t acceptable;
   SocketMulticastGroup *group;

   //Initialize flag
   acceptable = FALSE;
 800d8f2:	2700      	movs	r7, #0

   //Loop through multicast groups
   for(i = 0; i < SOCKET_MAX_MULTICAST_GROUPS; i++)
 800d8f4:	463c      	mov	r4, r7
 800d8f6:	b10c      	cbz	r4, 800d8fc <socketMulticastFilter+0x10>
   return acceptable;
#else
   //Not implemented
   return FALSE;
#endif
}
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(ipCompAddr(&group->addr, destAddr))
 800d8fc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800d900:	009b      	lsls	r3, r3, #2
 800d902:	3348      	adds	r3, #72	@ 0x48
 800d904:	4433      	add	r3, r6
 800d906:	4629      	mov	r1, r5
 800d908:	1d18      	adds	r0, r3, #4
 800d90a:	f7f7 fd5c 	bl	80053c6 <ipCompAddr>
 800d90e:	b100      	cbz	r0, 800d912 <socketMulticastFilter+0x26>
         acceptable = TRUE;
 800d910:	2701      	movs	r7, #1
   for(i = 0; i < SOCKET_MAX_MULTICAST_GROUPS; i++)
 800d912:	3401      	adds	r4, #1
 800d914:	e7ef      	b.n	800d8f6 <socketMulticastFilter+0xa>

0800d916 <stm32f7xxEthTick>:
 *
 * @param[in] interface Underlying network interface
 **/

void stm32f7xxEthTick(NetInterface *interface)
{
 800d916:	b508      	push	{r3, lr}
   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 800d918:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d91a:	b113      	cbz	r3, 800d922 <stm32f7xxEthTick+0xc>
   {
      //Handle periodic operations
      interface->phyDriver->tick(interface);
 800d91c:	685b      	ldr	r3, [r3, #4]
 800d91e:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 800d920:	bd08      	pop	{r3, pc}
   else if(interface->switchDriver != NULL)
 800d922:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800d926:	2b00      	cmp	r3, #0
 800d928:	d0fa      	beq.n	800d920 <stm32f7xxEthTick+0xa>
      interface->switchDriver->tick(interface);
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	4798      	blx	r3
}
 800d92e:	e7f7      	b.n	800d920 <stm32f7xxEthTick+0xa>

0800d930 <stm32f7xxEthEnableIrq>:
 * @brief Enable interrupts
 * @param[in] interface Underlying network interface
 **/

void stm32f7xxEthEnableIrq(NetInterface *interface)
{
 800d930:	b508      	push	{r3, lr}
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d932:	4b08      	ldr	r3, [pc, #32]	@ (800d954 <stm32f7xxEthEnableIrq+0x24>)
 800d934:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d938:	605a      	str	r2, [r3, #4]
   //Enable Ethernet MAC interrupts
   NVIC_EnableIRQ(ETH_IRQn);

   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 800d93a:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d93c:	b113      	cbz	r3, 800d944 <stm32f7xxEthEnableIrq+0x14>
   {
      //Enable Ethernet PHY interrupts
      interface->phyDriver->enableIrq(interface);
 800d93e:	689b      	ldr	r3, [r3, #8]
 800d940:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 800d942:	bd08      	pop	{r3, pc}
   else if(interface->switchDriver != NULL)
 800d944:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d0fa      	beq.n	800d942 <stm32f7xxEthEnableIrq+0x12>
      interface->switchDriver->enableIrq(interface);
 800d94c:	689b      	ldr	r3, [r3, #8]
 800d94e:	4798      	blx	r3
}
 800d950:	e7f7      	b.n	800d942 <stm32f7xxEthEnableIrq+0x12>
 800d952:	bf00      	nop
 800d954:	e000e100 	.word	0xe000e100

0800d958 <stm32f7xxEthDisableIrq>:
 * @brief Disable interrupts
 * @param[in] interface Underlying network interface
 **/

void stm32f7xxEthDisableIrq(NetInterface *interface)
{
 800d958:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d95a:	4b0a      	ldr	r3, [pc, #40]	@ (800d984 <stm32f7xxEthDisableIrq+0x2c>)
 800d95c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800d960:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800d964:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800d968:	f3bf 8f6f 	isb	sy
   //Disable Ethernet MAC interrupts
   NVIC_DisableIRQ(ETH_IRQn);

   //Valid Ethernet PHY or switch driver?
   if(interface->phyDriver != NULL)
 800d96c:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800d96e:	b113      	cbz	r3, 800d976 <stm32f7xxEthDisableIrq+0x1e>
   {
      //Disable Ethernet PHY interrupts
      interface->phyDriver->disableIrq(interface);
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	4798      	blx	r3
   }
   else
   {
      //Just for sanity
   }
}
 800d974:	bd08      	pop	{r3, pc}
   else if(interface->switchDriver != NULL)
 800d976:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d0fa      	beq.n	800d974 <stm32f7xxEthDisableIrq+0x1c>
      interface->switchDriver->disableIrq(interface);
 800d97e:	68db      	ldr	r3, [r3, #12]
 800d980:	4798      	blx	r3
}
 800d982:	e7f7      	b.n	800d974 <stm32f7xxEthDisableIrq+0x1c>
 800d984:	e000e100 	.word	0xe000e100

0800d988 <stm32f7xxEthUpdateMacConfig>:
error_t stm32f7xxEthUpdateMacConfig(NetInterface *interface)
{
   uint32_t config;

   //Read current MAC configuration
   config = ETH->MACCR;
 800d988:	4b0b      	ldr	r3, [pc, #44]	@ (800d9b8 <stm32f7xxEthUpdateMacConfig+0x30>)
 800d98a:	681b      	ldr	r3, [r3, #0]

   //10BASE-T or 100BASE-TX operation mode?
   if(interface->linkSpeed == NIC_LINK_SPEED_100MBPS)
 800d98c:	6e41      	ldr	r1, [r0, #100]	@ 0x64
 800d98e:	4a0b      	ldr	r2, [pc, #44]	@ (800d9bc <stm32f7xxEthUpdateMacConfig+0x34>)
 800d990:	4291      	cmp	r1, r2
 800d992:	d00b      	beq.n	800d9ac <stm32f7xxEthUpdateMacConfig+0x24>
   {
      config |= ETH_MACCR_FES;
   }
   else
   {
      config &= ~ETH_MACCR_FES;
 800d994:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
   }

   //Half-duplex or full-duplex mode?
   if(interface->duplexMode == NIC_FULL_DUPLEX_MODE)
 800d998:	f890 2068 	ldrb.w	r2, [r0, #104]	@ 0x68
 800d99c:	2a02      	cmp	r2, #2
 800d99e:	d008      	beq.n	800d9b2 <stm32f7xxEthUpdateMacConfig+0x2a>
   {
      config |= ETH_MACCR_DM;
   }
   else
   {
      config &= ~ETH_MACCR_DM;
 800d9a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
   }

   //Update MAC configuration register
   ETH->MACCR = config;
 800d9a4:	4a04      	ldr	r2, [pc, #16]	@ (800d9b8 <stm32f7xxEthUpdateMacConfig+0x30>)
 800d9a6:	6013      	str	r3, [r2, #0]

   //Successful processing
   return NO_ERROR;
}
 800d9a8:	2000      	movs	r0, #0
 800d9aa:	4770      	bx	lr
      config |= ETH_MACCR_FES;
 800d9ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d9b0:	e7f2      	b.n	800d998 <stm32f7xxEthUpdateMacConfig+0x10>
      config |= ETH_MACCR_DM;
 800d9b2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800d9b6:	e7f5      	b.n	800d9a4 <stm32f7xxEthUpdateMacConfig+0x1c>
 800d9b8:	40028000 	.word	0x40028000
 800d9bc:	05f5e100 	.word	0x05f5e100

0800d9c0 <stm32f7xxEthWritePhyReg>:
   uint8_t regAddr, uint16_t data)
{
   uint32_t temp;

   //Valid opcode?
   if(opcode == SMI_OPCODE_WRITE)
 800d9c0:	2801      	cmp	r0, #1
 800d9c2:	d000      	beq.n	800d9c6 <stm32f7xxEthWritePhyReg+0x6>
 800d9c4:	4770      	bx	lr
{
 800d9c6:	b410      	push	{r4}
   {
      //Take care not to alter MDC clock configuration
      temp = ETH->MACMIIAR & ETH_MACMIIAR_CR;
 800d9c8:	4c0b      	ldr	r4, [pc, #44]	@ (800d9f8 <stm32f7xxEthWritePhyReg+0x38>)
 800d9ca:	6920      	ldr	r0, [r4, #16]
 800d9cc:	f000 001c 	and.w	r0, r0, #28
      //Set up a write operation
      temp |= ETH_MACMIIAR_MW | ETH_MACMIIAR_MB;
 800d9d0:	f040 0003 	orr.w	r0, r0, #3
      //PHY address
      temp |= (phyAddr << 11) & ETH_MACMIIAR_PA;
 800d9d4:	02c9      	lsls	r1, r1, #11
 800d9d6:	b289      	uxth	r1, r1
 800d9d8:	4301      	orrs	r1, r0
      //Register address
      temp |= (regAddr << 6) & ETH_MACMIIAR_MR;
 800d9da:	0192      	lsls	r2, r2, #6
 800d9dc:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 800d9e0:	430a      	orrs	r2, r1

      //Data to be written in the PHY register
      ETH->MACMIIDR = data & ETH_MACMIIDR_MD;
 800d9e2:	6163      	str	r3, [r4, #20]

      //Start a write operation
      ETH->MACMIIAR = temp;
 800d9e4:	6122      	str	r2, [r4, #16]
      //Wait for the write to complete
      while((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 800d9e6:	4b04      	ldr	r3, [pc, #16]	@ (800d9f8 <stm32f7xxEthWritePhyReg+0x38>)
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	f013 0f01 	tst.w	r3, #1
 800d9ee:	d1fa      	bne.n	800d9e6 <stm32f7xxEthWritePhyReg+0x26>
   }
   else
   {
      //The MAC peripheral only supports standard Clause 22 opcodes
   }
}
 800d9f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9f4:	4770      	bx	lr
 800d9f6:	bf00      	nop
 800d9f8:	40028000 	.word	0x40028000

0800d9fc <stm32f7xxEthReadPhyReg>:
{
   uint16_t data;
   uint32_t temp;

   //Valid opcode?
   if(opcode == SMI_OPCODE_READ)
 800d9fc:	2802      	cmp	r0, #2
 800d9fe:	d001      	beq.n	800da04 <stm32f7xxEthReadPhyReg+0x8>
      data = ETH->MACMIIDR & ETH_MACMIIDR_MD;
   }
   else
   {
      //The MAC peripheral only supports standard Clause 22 opcodes
      data = 0;
 800da00:	2000      	movs	r0, #0
   }

   //Return the value of the PHY register
   return data;
}
 800da02:	4770      	bx	lr
      temp = ETH->MACMIIAR & ETH_MACMIIAR_CR;
 800da04:	480b      	ldr	r0, [pc, #44]	@ (800da34 <stm32f7xxEthReadPhyReg+0x38>)
 800da06:	6903      	ldr	r3, [r0, #16]
 800da08:	f003 031c 	and.w	r3, r3, #28
      temp |= ETH_MACMIIAR_MB;
 800da0c:	f043 0301 	orr.w	r3, r3, #1
      temp |= (phyAddr << 11) & ETH_MACMIIAR_PA;
 800da10:	02c9      	lsls	r1, r1, #11
 800da12:	b289      	uxth	r1, r1
 800da14:	4319      	orrs	r1, r3
      temp |= (regAddr << 6) & ETH_MACMIIAR_MR;
 800da16:	0192      	lsls	r2, r2, #6
 800da18:	f402 62f8 	and.w	r2, r2, #1984	@ 0x7c0
 800da1c:	430a      	orrs	r2, r1
      ETH->MACMIIAR = temp;
 800da1e:	6102      	str	r2, [r0, #16]
      while((ETH->MACMIIAR & ETH_MACMIIAR_MB) != 0)
 800da20:	4b04      	ldr	r3, [pc, #16]	@ (800da34 <stm32f7xxEthReadPhyReg+0x38>)
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	f013 0f01 	tst.w	r3, #1
 800da28:	d1fa      	bne.n	800da20 <stm32f7xxEthReadPhyReg+0x24>
      data = ETH->MACMIIDR & ETH_MACMIIDR_MD;
 800da2a:	4b02      	ldr	r3, [pc, #8]	@ (800da34 <stm32f7xxEthReadPhyReg+0x38>)
 800da2c:	6958      	ldr	r0, [r3, #20]
 800da2e:	b280      	uxth	r0, r0
 800da30:	4770      	bx	lr
 800da32:	bf00      	nop
 800da34:	40028000 	.word	0x40028000

0800da38 <stm32f7xxEthSendPacket>:
{
 800da38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3c:	4606      	mov	r6, r0
 800da3e:	4688      	mov	r8, r1
 800da40:	4615      	mov	r5, r2
   length = netBufferGetLength(buffer) - offset;
 800da42:	4608      	mov	r0, r1
 800da44:	f7fe fb18 	bl	800c078 <netBufferGetLength>
 800da48:	1b44      	subs	r4, r0, r5
   if(length > STM32F7XX_ETH_TX_BUFFER_SIZE)
 800da4a:	f5b4 6fc0 	cmp.w	r4, #1536	@ 0x600
 800da4e:	d825      	bhi.n	800da9c <stm32f7xxEthSendPacket+0x64>
   if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) != 0)
 800da50:	4b1a      	ldr	r3, [pc, #104]	@ (800dabc <stm32f7xxEthSendPacket+0x84>)
 800da52:	681f      	ldr	r7, [r3, #0]
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	2b00      	cmp	r3, #0
 800da58:	db2c      	blt.n	800dab4 <stm32f7xxEthSendPacket+0x7c>
   netBufferRead((uint8_t *) txCurDmaDesc->tdes2, buffer, offset, length);
 800da5a:	4623      	mov	r3, r4
 800da5c:	462a      	mov	r2, r5
 800da5e:	4641      	mov	r1, r8
 800da60:	68b8      	ldr	r0, [r7, #8]
 800da62:	f7fe fcc0 	bl	800c3e6 <netBufferRead>
   txCurDmaDesc->tdes1 = length & ETH_TDES1_TBS1;
 800da66:	4915      	ldr	r1, [pc, #84]	@ (800dabc <stm32f7xxEthSendPacket+0x84>)
 800da68:	680b      	ldr	r3, [r1, #0]
 800da6a:	f3c4 040c 	ubfx	r4, r4, #0, #13
 800da6e:	605c      	str	r4, [r3, #4]
   txCurDmaDesc->tdes0 |= ETH_TDES0_LS | ETH_TDES0_FS;
 800da70:	681a      	ldr	r2, [r3, #0]
 800da72:	f042 5040 	orr.w	r0, r2, #805306368	@ 0x30000000
 800da76:	6018      	str	r0, [r3, #0]
   txCurDmaDesc->tdes0 |= ETH_TDES0_OWN;
 800da78:	f042 4230 	orr.w	r2, r2, #2952790016	@ 0xb0000000
 800da7c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800da7e:	f3bf 8f4f 	dsb	sy
   ETH->DMASR = ETH_DMASR_TBUS;
 800da82:	4b0f      	ldr	r3, [pc, #60]	@ (800dac0 <stm32f7xxEthSendPacket+0x88>)
 800da84:	2204      	movs	r2, #4
 800da86:	615a      	str	r2, [r3, #20]
   ETH->DMATPDR = 0;
 800da88:	2200      	movs	r2, #0
 800da8a:	605a      	str	r2, [r3, #4]
   txCurDmaDesc = (Stm32f7xxTxDmaDesc *) txCurDmaDesc->tdes3;
 800da8c:	680b      	ldr	r3, [r1, #0]
 800da8e:	68db      	ldr	r3, [r3, #12]
 800da90:	600b      	str	r3, [r1, #0]
   if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) == 0)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4293      	cmp	r3, r2
 800da96:	da07      	bge.n	800daa8 <stm32f7xxEthSendPacket+0x70>
   return NO_ERROR;
 800da98:	2000      	movs	r0, #0
 800da9a:	e00c      	b.n	800dab6 <stm32f7xxEthSendPacket+0x7e>
      osSetEvent(&interface->nicTxEvent);
 800da9c:	f106 0054 	add.w	r0, r6, #84	@ 0x54
 800daa0:	f7f2 fe6c 	bl	800077c <osSetEvent>
      return ERROR_INVALID_LENGTH;
 800daa4:	20ec      	movs	r0, #236	@ 0xec
 800daa6:	e006      	b.n	800dab6 <stm32f7xxEthSendPacket+0x7e>
      osSetEvent(&interface->nicTxEvent);
 800daa8:	f106 0054 	add.w	r0, r6, #84	@ 0x54
 800daac:	f7f2 fe66 	bl	800077c <osSetEvent>
   return NO_ERROR;
 800dab0:	2000      	movs	r0, #0
 800dab2:	e000      	b.n	800dab6 <stm32f7xxEthSendPacket+0x7e>
      return ERROR_FAILURE;
 800dab4:	2001      	movs	r0, #1
}
 800dab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daba:	bf00      	nop
 800dabc:	20003758 	.word	0x20003758
 800dac0:	40029000 	.word	0x40029000

0800dac4 <stm32f7xxEthInitGpio>:
{
 800dac4:	b500      	push	{lr}
 800dac6:	b08b      	sub	sp, #44	@ 0x2c
   __HAL_RCC_SYSCFG_CLK_ENABLE();
 800dac8:	4b2b      	ldr	r3, [pc, #172]	@ (800db78 <stm32f7xxEthInitGpio+0xb4>)
 800daca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dacc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800dad0:	645a      	str	r2, [r3, #68]	@ 0x44
 800dad2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dad4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800dad8:	9200      	str	r2, [sp, #0]
 800dada:	9a00      	ldr	r2, [sp, #0]
   __HAL_RCC_GPIOA_CLK_ENABLE();
 800dadc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dade:	f042 0201 	orr.w	r2, r2, #1
 800dae2:	631a      	str	r2, [r3, #48]	@ 0x30
 800dae4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dae6:	f002 0201 	and.w	r2, r2, #1
 800daea:	9201      	str	r2, [sp, #4]
 800daec:	9a01      	ldr	r2, [sp, #4]
   __HAL_RCC_GPIOB_CLK_ENABLE();
 800daee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daf0:	f042 0202 	orr.w	r2, r2, #2
 800daf4:	631a      	str	r2, [r3, #48]	@ 0x30
 800daf6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daf8:	f002 0202 	and.w	r2, r2, #2
 800dafc:	9202      	str	r2, [sp, #8]
 800dafe:	9a02      	ldr	r2, [sp, #8]
   __HAL_RCC_GPIOC_CLK_ENABLE();
 800db00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db02:	f042 0204 	orr.w	r2, r2, #4
 800db06:	631a      	str	r2, [r3, #48]	@ 0x30
 800db08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db0a:	f002 0204 	and.w	r2, r2, #4
 800db0e:	9203      	str	r2, [sp, #12]
 800db10:	9a03      	ldr	r2, [sp, #12]
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800db12:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800db14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db18:	631a      	str	r2, [r3, #48]	@ 0x30
 800db1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800db1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db20:	9304      	str	r3, [sp, #16]
 800db22:	9b04      	ldr	r3, [sp, #16]
   SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800db24:	4a15      	ldr	r2, [pc, #84]	@ (800db7c <stm32f7xxEthInitGpio+0xb8>)
 800db26:	6853      	ldr	r3, [r2, #4]
 800db28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800db2c:	6053      	str	r3, [r2, #4]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800db2e:	2302      	movs	r3, #2
 800db30:	9306      	str	r3, [sp, #24]
   GPIO_InitStructure.Pull = GPIO_NOPULL;
 800db32:	2300      	movs	r3, #0
 800db34:	9307      	str	r3, [sp, #28]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800db36:	2303      	movs	r3, #3
 800db38:	9308      	str	r3, [sp, #32]
   GPIO_InitStructure.Alternate = GPIO_AF11_ETH;
 800db3a:	230b      	movs	r3, #11
 800db3c:	9309      	str	r3, [sp, #36]	@ 0x24
   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_7;
 800db3e:	2386      	movs	r3, #134	@ 0x86
 800db40:	9305      	str	r3, [sp, #20]
   HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800db42:	a905      	add	r1, sp, #20
 800db44:	480e      	ldr	r0, [pc, #56]	@ (800db80 <stm32f7xxEthInitGpio+0xbc>)
 800db46:	f005 f9d1 	bl	8012eec <HAL_GPIO_Init>
   GPIO_InitStructure.Pin = GPIO_PIN_13;
 800db4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800db4e:	9305      	str	r3, [sp, #20]
   HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800db50:	a905      	add	r1, sp, #20
 800db52:	480c      	ldr	r0, [pc, #48]	@ (800db84 <stm32f7xxEthInitGpio+0xc0>)
 800db54:	f005 f9ca 	bl	8012eec <HAL_GPIO_Init>
   GPIO_InitStructure.Pin = GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 800db58:	2332      	movs	r3, #50	@ 0x32
 800db5a:	9305      	str	r3, [sp, #20]
   HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800db5c:	a905      	add	r1, sp, #20
 800db5e:	480a      	ldr	r0, [pc, #40]	@ (800db88 <stm32f7xxEthInitGpio+0xc4>)
 800db60:	f005 f9c4 	bl	8012eec <HAL_GPIO_Init>
   GPIO_InitStructure.Pin = GPIO_PIN_11 | GPIO_PIN_13;
 800db64:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800db68:	9305      	str	r3, [sp, #20]
   HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800db6a:	a905      	add	r1, sp, #20
 800db6c:	4807      	ldr	r0, [pc, #28]	@ (800db8c <stm32f7xxEthInitGpio+0xc8>)
 800db6e:	f005 f9bd 	bl	8012eec <HAL_GPIO_Init>
}
 800db72:	b00b      	add	sp, #44	@ 0x2c
 800db74:	f85d fb04 	ldr.w	pc, [sp], #4
 800db78:	40023800 	.word	0x40023800
 800db7c:	40013800 	.word	0x40013800
 800db80:	40020000 	.word	0x40020000
 800db84:	40020400 	.word	0x40020400
 800db88:	40020800 	.word	0x40020800
 800db8c:	40021800 	.word	0x40021800

0800db90 <stm32f7xxEthInitDmaDesc>:
{
 800db90:	b410      	push	{r4}
   for(i = 0; i < STM32F7XX_ETH_TX_BUFFER_COUNT; i++)
 800db92:	2300      	movs	r3, #0
 800db94:	2b02      	cmp	r3, #2
 800db96:	d817      	bhi.n	800dbc8 <stm32f7xxEthInitDmaDesc+0x38>
      txDmaDesc[i].tdes0 = ETH_TDES0_IC | ETH_TDES0_TCH;
 800db98:	4825      	ldr	r0, [pc, #148]	@ (800dc30 <stm32f7xxEthInitDmaDesc+0xa0>)
 800db9a:	0159      	lsls	r1, r3, #5
 800db9c:	eb00 1243 	add.w	r2, r0, r3, lsl #5
 800dba0:	4c24      	ldr	r4, [pc, #144]	@ (800dc34 <stm32f7xxEthInitDmaDesc+0xa4>)
 800dba2:	5044      	str	r4, [r0, r1]
      txDmaDesc[i].tdes1 = 0;
 800dba4:	2100      	movs	r1, #0
 800dba6:	6051      	str	r1, [r2, #4]
      txDmaDesc[i].tdes2 = (uint32_t) txBuffer[i];
 800dba8:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800dbac:	ea4f 2c44 	mov.w	ip, r4, lsl #9
 800dbb0:	4c21      	ldr	r4, [pc, #132]	@ (800dc38 <stm32f7xxEthInitDmaDesc+0xa8>)
 800dbb2:	4464      	add	r4, ip
 800dbb4:	6094      	str	r4, [r2, #8]
      txDmaDesc[i].tdes3 = (uint32_t) &txDmaDesc[i + 1];
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800dbbc:	60d0      	str	r0, [r2, #12]
      txDmaDesc[i].tdes4 = 0;
 800dbbe:	6111      	str	r1, [r2, #16]
      txDmaDesc[i].tdes5 = 0;
 800dbc0:	6151      	str	r1, [r2, #20]
      txDmaDesc[i].tdes6 = 0;
 800dbc2:	6191      	str	r1, [r2, #24]
      txDmaDesc[i].tdes7 = 0;
 800dbc4:	61d1      	str	r1, [r2, #28]
   for(i = 0; i < STM32F7XX_ETH_TX_BUFFER_COUNT; i++)
 800dbc6:	e7e5      	b.n	800db94 <stm32f7xxEthInitDmaDesc+0x4>
   txDmaDesc[i - 1].tdes3 = (uint32_t) &txDmaDesc[0];
 800dbc8:	3b01      	subs	r3, #1
 800dbca:	4a19      	ldr	r2, [pc, #100]	@ (800dc30 <stm32f7xxEthInitDmaDesc+0xa0>)
 800dbcc:	eb02 1343 	add.w	r3, r2, r3, lsl #5
 800dbd0:	60da      	str	r2, [r3, #12]
   txCurDmaDesc = &txDmaDesc[0];
 800dbd2:	4b1a      	ldr	r3, [pc, #104]	@ (800dc3c <stm32f7xxEthInitDmaDesc+0xac>)
 800dbd4:	601a      	str	r2, [r3, #0]
   for(i = 0; i < STM32F7XX_ETH_RX_BUFFER_COUNT; i++)
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	e019      	b.n	800dc0e <stm32f7xxEthInitDmaDesc+0x7e>
      rxDmaDesc[i].rdes0 = ETH_RDES0_OWN;
 800dbda:	4915      	ldr	r1, [pc, #84]	@ (800dc30 <stm32f7xxEthInitDmaDesc+0xa0>)
 800dbdc:	eb01 1243 	add.w	r2, r1, r3, lsl #5
 800dbe0:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800dbe4:	6610      	str	r0, [r2, #96]	@ 0x60
      rxDmaDesc[i].rdes1 = ETH_RDES1_RCH | (STM32F7XX_ETH_RX_BUFFER_SIZE & ETH_RDES1_RBS1);
 800dbe6:	f44f 408c 	mov.w	r0, #17920	@ 0x4600
 800dbea:	6650      	str	r0, [r2, #100]	@ 0x64
      rxDmaDesc[i].rdes2 = (uint32_t) rxBuffer[i];
 800dbec:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800dbf0:	ea4f 204c 	mov.w	r0, ip, lsl #9
 800dbf4:	4c12      	ldr	r4, [pc, #72]	@ (800dc40 <stm32f7xxEthInitDmaDesc+0xb0>)
 800dbf6:	4420      	add	r0, r4
 800dbf8:	6690      	str	r0, [r2, #104]	@ 0x68
      rxDmaDesc[i].rdes3 = (uint32_t) &rxDmaDesc[i + 1];
 800dbfa:	3301      	adds	r3, #1
 800dbfc:	3160      	adds	r1, #96	@ 0x60
 800dbfe:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 800dc02:	66d1      	str	r1, [r2, #108]	@ 0x6c
      rxDmaDesc[i].rdes4 = 0;
 800dc04:	2100      	movs	r1, #0
 800dc06:	6711      	str	r1, [r2, #112]	@ 0x70
      rxDmaDesc[i].rdes5 = 0;
 800dc08:	6751      	str	r1, [r2, #116]	@ 0x74
      rxDmaDesc[i].rdes6 = 0;
 800dc0a:	6791      	str	r1, [r2, #120]	@ 0x78
      rxDmaDesc[i].rdes7 = 0;
 800dc0c:	67d1      	str	r1, [r2, #124]	@ 0x7c
   for(i = 0; i < STM32F7XX_ETH_RX_BUFFER_COUNT; i++)
 800dc0e:	2b05      	cmp	r3, #5
 800dc10:	d9e3      	bls.n	800dbda <stm32f7xxEthInitDmaDesc+0x4a>
   rxDmaDesc[i - 1].rdes3 = (uint32_t) &rxDmaDesc[0];
 800dc12:	3b01      	subs	r3, #1
 800dc14:	4906      	ldr	r1, [pc, #24]	@ (800dc30 <stm32f7xxEthInitDmaDesc+0xa0>)
 800dc16:	f101 0260 	add.w	r2, r1, #96	@ 0x60
 800dc1a:	eb01 1343 	add.w	r3, r1, r3, lsl #5
 800dc1e:	66da      	str	r2, [r3, #108]	@ 0x6c
   rxCurDmaDesc = &rxDmaDesc[0];
 800dc20:	4b06      	ldr	r3, [pc, #24]	@ (800dc3c <stm32f7xxEthInitDmaDesc+0xac>)
 800dc22:	605a      	str	r2, [r3, #4]
   ETH->DMATDLAR = (uint32_t) txDmaDesc;
 800dc24:	4b07      	ldr	r3, [pc, #28]	@ (800dc44 <stm32f7xxEthInitDmaDesc+0xb4>)
 800dc26:	6119      	str	r1, [r3, #16]
   ETH->DMARDLAR = (uint32_t) rxDmaDesc;
 800dc28:	60da      	str	r2, [r3, #12]
}
 800dc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dc2e:	4770      	bx	lr
 800dc30:	2007c000 	.word	0x2007c000
 800dc34:	40100000 	.word	0x40100000
 800dc38:	2007e520 	.word	0x2007e520
 800dc3c:	20003758 	.word	0x20003758
 800dc40:	2007c120 	.word	0x2007c120
 800dc44:	40029000 	.word	0x40029000

0800dc48 <ETH_IRQHandler>:
{
 800dc48:	b538      	push	{r3, r4, r5, lr}
   status = ETH->DMASR;
 800dc4a:	4b1a      	ldr	r3, [pc, #104]	@ (800dcb4 <ETH_IRQHandler+0x6c>)
 800dc4c:	695d      	ldr	r5, [r3, #20]
   if((status & ETH_DMASR_TS) != 0)
 800dc4e:	f015 0f01 	tst.w	r5, #1
 800dc52:	d00f      	beq.n	800dc74 <ETH_IRQHandler+0x2c>
      ETH->DMASR = ETH_DMASR_TS;
 800dc54:	2201      	movs	r2, #1
 800dc56:	615a      	str	r2, [r3, #20]
      if((txCurDmaDesc->tdes0 & ETH_TDES0_OWN) == 0)
 800dc58:	4b17      	ldr	r3, [pc, #92]	@ (800dcb8 <ETH_IRQHandler+0x70>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	da01      	bge.n	800dc66 <ETH_IRQHandler+0x1e>
   flag = FALSE;
 800dc62:	2400      	movs	r4, #0
 800dc64:	e007      	b.n	800dc76 <ETH_IRQHandler+0x2e>
         flag |= osSetEventFromIsr(&nicDriverInterface->nicTxEvent);
 800dc66:	4b14      	ldr	r3, [pc, #80]	@ (800dcb8 <ETH_IRQHandler+0x70>)
 800dc68:	6898      	ldr	r0, [r3, #8]
 800dc6a:	3054      	adds	r0, #84	@ 0x54
 800dc6c:	f7f2 fda0 	bl	80007b0 <osSetEventFromIsr>
 800dc70:	4604      	mov	r4, r0
 800dc72:	e000      	b.n	800dc76 <ETH_IRQHandler+0x2e>
   flag = FALSE;
 800dc74:	2400      	movs	r4, #0
   if((status & ETH_DMASR_RS) != 0)
 800dc76:	f015 0f40 	tst.w	r5, #64	@ 0x40
 800dc7a:	d10f      	bne.n	800dc9c <ETH_IRQHandler+0x54>
   ETH->DMASR = ETH_DMASR_NIS;
 800dc7c:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb4 <ETH_IRQHandler+0x6c>)
 800dc7e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800dc82:	615a      	str	r2, [r3, #20]
   osExitIsr(flag);
 800dc84:	b14c      	cbz	r4, 800dc9a <ETH_IRQHandler+0x52>
 800dc86:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc8e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc92:	f3bf 8f4f 	dsb	sy
 800dc96:	f3bf 8f6f 	isb	sy
}
 800dc9a:	bd38      	pop	{r3, r4, r5, pc}
      ETH->DMASR = ETH_DMASR_RS;
 800dc9c:	4b05      	ldr	r3, [pc, #20]	@ (800dcb4 <ETH_IRQHandler+0x6c>)
 800dc9e:	2240      	movs	r2, #64	@ 0x40
 800dca0:	615a      	str	r2, [r3, #20]
      nicDriverInterface->nicEvent = TRUE;
 800dca2:	4b05      	ldr	r3, [pc, #20]	@ (800dcb8 <ETH_IRQHandler+0x70>)
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	2201      	movs	r2, #1
 800dca8:	659a      	str	r2, [r3, #88]	@ 0x58
      flag |= osSetEventFromIsr(&netEvent);
 800dcaa:	4804      	ldr	r0, [pc, #16]	@ (800dcbc <ETH_IRQHandler+0x74>)
 800dcac:	f7f2 fd80 	bl	80007b0 <osSetEventFromIsr>
 800dcb0:	4304      	orrs	r4, r0
 800dcb2:	e7e3      	b.n	800dc7c <ETH_IRQHandler+0x34>
 800dcb4:	40029000 	.word	0x40029000
 800dcb8:	20003758 	.word	0x20003758
 800dcbc:	20000b54 	.word	0x20000b54

0800dcc0 <stm32f7xxEthReceivePacket>:
{
 800dcc0:	b530      	push	{r4, r5, lr}
 800dcc2:	b085      	sub	sp, #20
   if((rxCurDmaDesc->rdes0 & ETH_RDES0_OWN) == 0)
 800dcc4:	4b1c      	ldr	r3, [pc, #112]	@ (800dd38 <stm32f7xxEthReceivePacket+0x78>)
 800dcc6:	685c      	ldr	r4, [r3, #4]
 800dcc8:	6822      	ldr	r2, [r4, #0]
 800dcca:	2a00      	cmp	r2, #0
 800dccc:	db31      	blt.n	800dd32 <stm32f7xxEthReceivePacket+0x72>
 800dcce:	4686      	mov	lr, r0
      if((rxCurDmaDesc->rdes0 & ETH_RDES0_FS) != 0 &&
 800dcd0:	f402 7340 	and.w	r3, r2, #768	@ 0x300
 800dcd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dcd8:	d00f      	beq.n	800dcfa <stm32f7xxEthReceivePacket+0x3a>
         error = ERROR_INVALID_PACKET;
 800dcda:	f240 1009 	movw	r0, #265	@ 0x109
      rxCurDmaDesc->rdes0 = ETH_RDES0_OWN;
 800dcde:	4b16      	ldr	r3, [pc, #88]	@ (800dd38 <stm32f7xxEthReceivePacket+0x78>)
 800dce0:	685a      	ldr	r2, [r3, #4]
 800dce2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 800dce6:	6011      	str	r1, [r2, #0]
      rxCurDmaDesc = (Stm32f7xxRxDmaDesc *) rxCurDmaDesc->rdes3;
 800dce8:	68d2      	ldr	r2, [r2, #12]
 800dcea:	605a      	str	r2, [r3, #4]
   ETH->DMASR = ETH_DMASR_RBUS;
 800dcec:	4b13      	ldr	r3, [pc, #76]	@ (800dd3c <stm32f7xxEthReceivePacket+0x7c>)
 800dcee:	2280      	movs	r2, #128	@ 0x80
 800dcf0:	615a      	str	r2, [r3, #20]
   ETH->DMARPDR = 0;
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	609a      	str	r2, [r3, #8]
}
 800dcf6:	b005      	add	sp, #20
 800dcf8:	bd30      	pop	{r4, r5, pc}
         if((rxCurDmaDesc->rdes0 & ETH_RDES0_ES) == 0)
 800dcfa:	f412 4f00 	tst.w	r2, #32768	@ 0x8000
 800dcfe:	d002      	beq.n	800dd06 <stm32f7xxEthReceivePacket+0x46>
            error = ERROR_INVALID_PACKET;
 800dd00:	f240 1009 	movw	r0, #265	@ 0x109
 800dd04:	e7eb      	b.n	800dcde <stm32f7xxEthReceivePacket+0x1e>
            n = (rxCurDmaDesc->rdes0 & ETH_RDES0_FL) >> 16;
 800dd06:	f3c2 4c0d 	ubfx	ip, r2, #16, #14
            ancillary = NET_DEFAULT_RX_ANCILLARY;
 800dd0a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd40 <stm32f7xxEthReceivePacket+0x80>)
 800dd0c:	466d      	mov	r5, sp
 800dd0e:	6818      	ldr	r0, [r3, #0]
 800dd10:	6859      	ldr	r1, [r3, #4]
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	68db      	ldr	r3, [r3, #12]
 800dd16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            nicProcessPacket(interface, (uint8_t *) rxCurDmaDesc->rdes2, n,
 800dd18:	466b      	mov	r3, sp
 800dd1a:	4662      	mov	r2, ip
 800dd1c:	f5bc 6fc0 	cmp.w	ip, #1536	@ 0x600
 800dd20:	bf28      	it	cs
 800dd22:	f44f 62c0 	movcs.w	r2, #1536	@ 0x600
 800dd26:	68a1      	ldr	r1, [r4, #8]
 800dd28:	4670      	mov	r0, lr
 800dd2a:	f7fe ff4f 	bl	800cbcc <nicProcessPacket>
            error = NO_ERROR;
 800dd2e:	2000      	movs	r0, #0
 800dd30:	e7d5      	b.n	800dcde <stm32f7xxEthReceivePacket+0x1e>
      error = ERROR_BUFFER_EMPTY;
 800dd32:	f44f 7085 	mov.w	r0, #266	@ 0x10a
 800dd36:	e7d9      	b.n	800dcec <stm32f7xxEthReceivePacket+0x2c>
 800dd38:	20003758 	.word	0x20003758
 800dd3c:	40029000 	.word	0x40029000
 800dd40:	08019fb4 	.word	0x08019fb4

0800dd44 <stm32f7xxEthEventHandler>:
{
 800dd44:	b510      	push	{r4, lr}
 800dd46:	4604      	mov	r4, r0
      error = stm32f7xxEthReceivePacket(interface);
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f7ff ffb9 	bl	800dcc0 <stm32f7xxEthReceivePacket>
   } while(error != ERROR_BUFFER_EMPTY);
 800dd4e:	f5b0 7f85 	cmp.w	r0, #266	@ 0x10a
 800dd52:	d1f9      	bne.n	800dd48 <stm32f7xxEthEventHandler+0x4>
}
 800dd54:	bd10      	pop	{r4, pc}
	...

0800dd58 <stm32f7xxEthCalcCrc>:
 * @param[in] length Number of bytes to process
 * @return Resulting CRC value
 **/

uint32_t stm32f7xxEthCalcCrc(const void *data, size_t length)
{
 800dd58:	b500      	push	{lr}
   const uint8_t *p;

   //Point to the data over which to calculate the CRC
   p = (uint8_t *) data;
   //CRC preset value
   crc = 0xFFFFFFFF;
 800dd5a:	f04f 3cff 	mov.w	ip, #4294967295

   //Loop through data
   for(i = 0; i < length; i++)
 800dd5e:	f04f 0e00 	mov.w	lr, #0
 800dd62:	e012      	b.n	800dd8a <stm32f7xxEthCalcCrc+0x32>
         {
            crc = (crc << 1) ^ 0x04C11DB7;
         }
         else
         {
            crc = crc << 1;
 800dd64:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
      for(j = 0; j < 8; j++)
 800dd68:	3201      	adds	r2, #1
 800dd6a:	2a07      	cmp	r2, #7
 800dd6c:	d80b      	bhi.n	800dd86 <stm32f7xxEthCalcCrc+0x2e>
         if((((crc >> 31) ^ (p[i] >> j)) & 0x01) != 0)
 800dd6e:	f810 300e 	ldrb.w	r3, [r0, lr]
 800dd72:	4113      	asrs	r3, r2
 800dd74:	ea83 73dc 	eor.w	r3, r3, ip, lsr #31
 800dd78:	f013 0f01 	tst.w	r3, #1
 800dd7c:	d0f2      	beq.n	800dd64 <stm32f7xxEthCalcCrc+0xc>
            crc = (crc << 1) ^ 0x04C11DB7;
 800dd7e:	4b07      	ldr	r3, [pc, #28]	@ (800dd9c <stm32f7xxEthCalcCrc+0x44>)
 800dd80:	ea83 0c4c 	eor.w	ip, r3, ip, lsl #1
 800dd84:	e7f0      	b.n	800dd68 <stm32f7xxEthCalcCrc+0x10>
   for(i = 0; i < length; i++)
 800dd86:	f10e 0e01 	add.w	lr, lr, #1
 800dd8a:	458e      	cmp	lr, r1
 800dd8c:	d201      	bcs.n	800dd92 <stm32f7xxEthCalcCrc+0x3a>
      for(j = 0; j < 8; j++)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	e7eb      	b.n	800dd6a <stm32f7xxEthCalcCrc+0x12>
      }
   }

   //Return CRC value
   return ~crc;
}
 800dd92:	ea6f 000c 	mvn.w	r0, ip
 800dd96:	f85d fb04 	ldr.w	pc, [sp], #4
 800dd9a:	bf00      	nop
 800dd9c:	04c11db7 	.word	0x04c11db7

0800dda0 <stm32f7xxEthUpdateMacAddrFilter>:
   if(interface->promiscuous)
 800dda0:	f8d0 3180 	ldr.w	r3, [r0, #384]	@ 0x180
 800dda4:	b123      	cbz	r3, 800ddb0 <stm32f7xxEthUpdateMacAddrFilter+0x10>
      ETH->MACFFR = ETH_MACFFR_PM;
 800dda6:	4b59      	ldr	r3, [pc, #356]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800dda8:	2201      	movs	r2, #1
 800ddaa:	605a      	str	r2, [r3, #4]
}
 800ddac:	2000      	movs	r0, #0
 800ddae:	4770      	bx	lr
{
 800ddb0:	b570      	push	{r4, r5, r6, lr}
 800ddb2:	b088      	sub	sp, #32
 800ddb4:	4605      	mov	r5, r0
      ETH->MACA0LR = interface->macAddr.w[0] | (interface->macAddr.w[1] << 16);
 800ddb6:	f8b0 3088 	ldrh.w	r3, [r0, #136]	@ 0x88
 800ddba:	f8b0 208a 	ldrh.w	r2, [r0, #138]	@ 0x8a
 800ddbe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ddc2:	4a52      	ldr	r2, [pc, #328]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800ddc4:	6453      	str	r3, [r2, #68]	@ 0x44
      ETH->MACA0HR = interface->macAddr.w[2];
 800ddc6:	f8b0 308c 	ldrh.w	r3, [r0, #140]	@ 0x8c
 800ddca:	6413      	str	r3, [r2, #64]	@ 0x40
      unicastMacAddr[0] = MAC_UNSPECIFIED_ADDR;
 800ddcc:	4b50      	ldr	r3, [pc, #320]	@ (800df10 <stm32f7xxEthUpdateMacAddrFilter+0x170>)
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	9001      	str	r0, [sp, #4]
 800ddd2:	889b      	ldrh	r3, [r3, #4]
 800ddd4:	f8ad 3008 	strh.w	r3, [sp, #8]
      unicastMacAddr[1] = MAC_UNSPECIFIED_ADDR;
 800ddd8:	f8cd 000a 	str.w	r0, [sp, #10]
 800dddc:	f8ad 300e 	strh.w	r3, [sp, #14]
      unicastMacAddr[2] = MAC_UNSPECIFIED_ADDR;
 800dde0:	9004      	str	r0, [sp, #16]
 800dde2:	f8ad 3014 	strh.w	r3, [sp, #20]
      hashTable[0] = 0;
 800dde6:	2400      	movs	r4, #0
 800dde8:	9406      	str	r4, [sp, #24]
      hashTable[1] = 0;
 800ddea:	9407      	str	r4, [sp, #28]
      for(i = 0, j = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800ddec:	4626      	mov	r6, r4
 800ddee:	e014      	b.n	800de1a <stm32f7xxEthUpdateMacAddrFilter+0x7a>
               if(j < 3)
 800ddf0:	2e02      	cmp	r6, #2
 800ddf2:	d811      	bhi.n	800de18 <stm32f7xxEthUpdateMacAddrFilter+0x78>
                  unicastMacAddr[j++] = entry->addr;
 800ddf4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 800ddf8:	aa08      	add	r2, sp, #32
 800ddfa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800ddfe:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 800de02:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800de06:	f8d2 0090 	ldr.w	r0, [r2, #144]	@ 0x90
 800de0a:	f843 0c1c 	str.w	r0, [r3, #-28]
 800de0e:	f8b2 2094 	ldrh.w	r2, [r2, #148]	@ 0x94
 800de12:	f823 2c18 	strh.w	r2, [r3, #-24]
 800de16:	3601      	adds	r6, #1
      for(i = 0, j = 0; i < MAC_ADDR_FILTER_SIZE; i++)
 800de18:	3401      	adds	r4, #1
 800de1a:	2c0b      	cmp	r4, #11
 800de1c:	d826      	bhi.n	800de6c <stm32f7xxEthUpdateMacAddrFilter+0xcc>
         if(entry->refCount > 0)
 800de1e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800de22:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d0f4      	beq.n	800de18 <stm32f7xxEthUpdateMacAddrFilter+0x78>
            if(macIsMulticastAddr(&entry->addr))
 800de2e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800de32:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800de36:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800de3a:	f013 0f01 	tst.w	r3, #1
 800de3e:	d0d7      	beq.n	800ddf0 <stm32f7xxEthUpdateMacAddrFilter+0x50>
               crc = stm32f7xxEthCalcCrc(&entry->addr, sizeof(MacAddr));
 800de40:	eb04 0084 	add.w	r0, r4, r4, lsl #2
 800de44:	0080      	lsls	r0, r0, #2
 800de46:	3090      	adds	r0, #144	@ 0x90
 800de48:	2106      	movs	r1, #6
 800de4a:	4428      	add	r0, r5
 800de4c:	f7ff ff84 	bl	800dd58 <stm32f7xxEthCalcCrc>
               hashTable[k / 32] |= (1 << (k % 32));
 800de50:	0fc3      	lsrs	r3, r0, #31
 800de52:	aa08      	add	r2, sp, #32
 800de54:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800de58:	f853 2c08 	ldr.w	r2, [r3, #-8]
 800de5c:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800de60:	2101      	movs	r1, #1
 800de62:	4081      	lsls	r1, r0
 800de64:	430a      	orrs	r2, r1
 800de66:	f843 2c08 	str.w	r2, [r3, #-8]
 800de6a:	e7d5      	b.n	800de18 <stm32f7xxEthUpdateMacAddrFilter+0x78>
      if(j >= 1)
 800de6c:	2e00      	cmp	r6, #0
 800de6e:	d034      	beq.n	800deda <stm32f7xxEthUpdateMacAddrFilter+0x13a>
         ETH->MACA1LR = unicastMacAddr[0].w[0] | (unicastMacAddr[0].w[1] << 16);
 800de70:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800de74:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800de78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de7c:	4a23      	ldr	r2, [pc, #140]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800de7e:	64d3      	str	r3, [r2, #76]	@ 0x4c
         ETH->MACA1HR = unicastMacAddr[0].w[2] | ETH_MACA1HR_AE;
 800de80:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800de84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800de88:	6493      	str	r3, [r2, #72]	@ 0x48
      if(j >= 2)
 800de8a:	2e01      	cmp	r6, #1
 800de8c:	d92a      	bls.n	800dee4 <stm32f7xxEthUpdateMacAddrFilter+0x144>
         ETH->MACA2LR = unicastMacAddr[1].w[0] | (unicastMacAddr[1].w[1] << 16);
 800de8e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800de92:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800de96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800de9a:	4a1c      	ldr	r2, [pc, #112]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800de9c:	6553      	str	r3, [r2, #84]	@ 0x54
         ETH->MACA2HR = unicastMacAddr[1].w[2] | ETH_MACA2HR_AE;
 800de9e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800dea2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dea6:	6513      	str	r3, [r2, #80]	@ 0x50
      if(j >= 3)
 800dea8:	2e02      	cmp	r6, #2
 800deaa:	d920      	bls.n	800deee <stm32f7xxEthUpdateMacAddrFilter+0x14e>
         ETH->MACA3LR = unicastMacAddr[2].w[0] | (unicastMacAddr[2].w[1] << 16);
 800deac:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 800deb0:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800deb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800deb8:	4a14      	ldr	r2, [pc, #80]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800deba:	65d3      	str	r3, [r2, #92]	@ 0x5c
         ETH->MACA3HR = unicastMacAddr[2].w[2] | ETH_MACA3HR_AE;
 800debc:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800dec0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800dec4:	6593      	str	r3, [r2, #88]	@ 0x58
      if(interface->acceptAllMulticast)
 800dec6:	f8d5 3184 	ldr.w	r3, [r5, #388]	@ 0x184
 800deca:	b1ab      	cbz	r3, 800def8 <stm32f7xxEthUpdateMacAddrFilter+0x158>
         ETH->MACFFR = ETH_MACFFR_HPF | ETH_MACFFR_PAM;
 800decc:	4b0f      	ldr	r3, [pc, #60]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800dece:	f44f 6282 	mov.w	r2, #1040	@ 0x410
 800ded2:	605a      	str	r2, [r3, #4]
}
 800ded4:	2000      	movs	r0, #0
 800ded6:	b008      	add	sp, #32
 800ded8:	bd70      	pop	{r4, r5, r6, pc}
         ETH->MACA1LR = 0;
 800deda:	4b0c      	ldr	r3, [pc, #48]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800dedc:	2200      	movs	r2, #0
 800dede:	64da      	str	r2, [r3, #76]	@ 0x4c
         ETH->MACA1HR = 0;
 800dee0:	649a      	str	r2, [r3, #72]	@ 0x48
 800dee2:	e7d2      	b.n	800de8a <stm32f7xxEthUpdateMacAddrFilter+0xea>
         ETH->MACA2LR = 0;
 800dee4:	4b09      	ldr	r3, [pc, #36]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800dee6:	2200      	movs	r2, #0
 800dee8:	655a      	str	r2, [r3, #84]	@ 0x54
         ETH->MACA2HR = 0;
 800deea:	651a      	str	r2, [r3, #80]	@ 0x50
 800deec:	e7dc      	b.n	800dea8 <stm32f7xxEthUpdateMacAddrFilter+0x108>
         ETH->MACA3LR = 0;
 800deee:	4b07      	ldr	r3, [pc, #28]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800def0:	2200      	movs	r2, #0
 800def2:	65da      	str	r2, [r3, #92]	@ 0x5c
         ETH->MACA3HR = 0;
 800def4:	659a      	str	r2, [r3, #88]	@ 0x58
 800def6:	e7e6      	b.n	800dec6 <stm32f7xxEthUpdateMacAddrFilter+0x126>
         ETH->MACFFR = ETH_MACFFR_HPF | ETH_MACFFR_HM;
 800def8:	4b04      	ldr	r3, [pc, #16]	@ (800df0c <stm32f7xxEthUpdateMacAddrFilter+0x16c>)
 800defa:	f240 4204 	movw	r2, #1028	@ 0x404
 800defe:	605a      	str	r2, [r3, #4]
         ETH->MACHTLR = hashTable[0];
 800df00:	9a06      	ldr	r2, [sp, #24]
 800df02:	60da      	str	r2, [r3, #12]
         ETH->MACHTHR = hashTable[1];
 800df04:	9a07      	ldr	r2, [sp, #28]
 800df06:	609a      	str	r2, [r3, #8]
 800df08:	e7e4      	b.n	800ded4 <stm32f7xxEthUpdateMacAddrFilter+0x134>
 800df0a:	bf00      	nop
 800df0c:	40028000 	.word	0x40028000
 800df10:	08019ea0 	.word	0x08019ea0

0800df14 <stm32f7xxEthInit>:
{
 800df14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df16:	b085      	sub	sp, #20
 800df18:	4604      	mov	r4, r0
   TRACE_INFO("Initializing STM32F7 Ethernet MAC...\r\n");
 800df1a:	f7f2 fc09 	bl	8000730 <osSuspendAllTasks>
 800df1e:	4b47      	ldr	r3, [pc, #284]	@ (800e03c <stm32f7xxEthInit+0x128>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	2226      	movs	r2, #38	@ 0x26
 800df26:	2101      	movs	r1, #1
 800df28:	4845      	ldr	r0, [pc, #276]	@ (800e040 <stm32f7xxEthInit+0x12c>)
 800df2a:	f006 fdb7 	bl	8014a9c <fwrite>
 800df2e:	f7f2 fc08 	bl	8000742 <osResumeAllTasks>
   nicDriverInterface = interface;
 800df32:	4b44      	ldr	r3, [pc, #272]	@ (800e044 <stm32f7xxEthInit+0x130>)
 800df34:	609c      	str	r4, [r3, #8]
   stm32f7xxEthInitGpio(interface);
 800df36:	4620      	mov	r0, r4
 800df38:	f7ff fdc4 	bl	800dac4 <stm32f7xxEthInitGpio>
   __HAL_RCC_ETHMAC_CLK_ENABLE();
 800df3c:	4b42      	ldr	r3, [pc, #264]	@ (800e048 <stm32f7xxEthInit+0x134>)
 800df3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df40:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800df44:	631a      	str	r2, [r3, #48]	@ 0x30
 800df46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df48:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 800df4c:	9201      	str	r2, [sp, #4]
 800df4e:	9a01      	ldr	r2, [sp, #4]
   __HAL_RCC_ETHMACTX_CLK_ENABLE();
 800df50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df52:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 800df56:	631a      	str	r2, [r3, #48]	@ 0x30
 800df58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df5a:	f002 6280 	and.w	r2, r2, #67108864	@ 0x4000000
 800df5e:	9202      	str	r2, [sp, #8]
 800df60:	9a02      	ldr	r2, [sp, #8]
   __HAL_RCC_ETHMACRX_CLK_ENABLE();
 800df62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df64:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800df68:	631a      	str	r2, [r3, #48]	@ 0x30
 800df6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800df6c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 800df70:	9203      	str	r2, [sp, #12]
 800df72:	9a03      	ldr	r2, [sp, #12]
   __HAL_RCC_ETHMAC_FORCE_RESET();
 800df74:	691a      	ldr	r2, [r3, #16]
 800df76:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800df7a:	611a      	str	r2, [r3, #16]
   __HAL_RCC_ETHMAC_RELEASE_RESET();
 800df7c:	691a      	ldr	r2, [r3, #16]
 800df7e:	f022 7200 	bic.w	r2, r2, #33554432	@ 0x2000000
 800df82:	611a      	str	r2, [r3, #16]
   ETH->DMABMR |= ETH_DMABMR_SR;
 800df84:	4a31      	ldr	r2, [pc, #196]	@ (800e04c <stm32f7xxEthInit+0x138>)
 800df86:	6813      	ldr	r3, [r2, #0]
 800df88:	f043 0301 	orr.w	r3, r3, #1
 800df8c:	6013      	str	r3, [r2, #0]
   while((ETH->DMABMR & ETH_DMABMR_SR) != 0)
 800df8e:	4b2f      	ldr	r3, [pc, #188]	@ (800e04c <stm32f7xxEthInit+0x138>)
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	f013 0f01 	tst.w	r3, #1
 800df96:	d1fa      	bne.n	800df8e <stm32f7xxEthInit+0x7a>
   ETH->MACMIIAR = ETH_MACMIIAR_CR_Div102;
 800df98:	4b2d      	ldr	r3, [pc, #180]	@ (800e050 <stm32f7xxEthInit+0x13c>)
 800df9a:	2210      	movs	r2, #16
 800df9c:	611a      	str	r2, [r3, #16]
   if(interface->phyDriver != NULL)
 800df9e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dfa0:	b13b      	cbz	r3, 800dfb2 <stm32f7xxEthInit+0x9e>
      error = interface->phyDriver->init(interface);
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	4620      	mov	r0, r4
 800dfa6:	4798      	blx	r3
 800dfa8:	4605      	mov	r5, r0
   if(error)
 800dfaa:	b165      	cbz	r5, 800dfc6 <stm32f7xxEthInit+0xb2>
}
 800dfac:	4628      	mov	r0, r5
 800dfae:	b005      	add	sp, #20
 800dfb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   else if(interface->switchDriver != NULL)
 800dfb2:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dfb6:	b123      	cbz	r3, 800dfc2 <stm32f7xxEthInit+0xae>
      error = interface->switchDriver->init(interface);
 800dfb8:	681b      	ldr	r3, [r3, #0]
 800dfba:	4620      	mov	r0, r4
 800dfbc:	4798      	blx	r3
 800dfbe:	4605      	mov	r5, r0
 800dfc0:	e7f3      	b.n	800dfaa <stm32f7xxEthInit+0x96>
      error = ERROR_FAILURE;
 800dfc2:	2501      	movs	r5, #1
      return error;
 800dfc4:	e7f2      	b.n	800dfac <stm32f7xxEthInit+0x98>
   ETH->MACCR = ETH_MACCR_RESERVED15 | ETH_MACCR_ROD;
 800dfc6:	4e22      	ldr	r6, [pc, #136]	@ (800e050 <stm32f7xxEthInit+0x13c>)
 800dfc8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800dfcc:	6033      	str	r3, [r6, #0]
   stm32f7xxEthUpdateMacAddrFilter(interface);
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f7ff fee6 	bl	800dda0 <stm32f7xxEthUpdateMacAddrFilter>
   ETH->MACFCR = 0;
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	61b3      	str	r3, [r6, #24]
   ETH->DMAOMR = ETH_DMAOMR_RSF | ETH_DMAOMR_TSF;
 800dfd8:	f506 5780 	add.w	r7, r6, #4096	@ 0x1000
 800dfdc:	f04f 7308 	mov.w	r3, #35651584	@ 0x2200000
 800dfe0:	61bb      	str	r3, [r7, #24]
   ETH->DMABMR = ETH_DMABMR_AAB | ETH_DMABMR_USP | ETH_DMABMR_RDP_32Beat |
 800dfe2:	4b1c      	ldr	r3, [pc, #112]	@ (800e054 <stm32f7xxEthInit+0x140>)
 800dfe4:	603b      	str	r3, [r7, #0]
   stm32f7xxEthInitDmaDesc(interface);
 800dfe6:	4620      	mov	r0, r4
 800dfe8:	f7ff fdd2 	bl	800db90 <stm32f7xxEthInitDmaDesc>
   ETH->MMCTIMR = ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | ETH_MMCTIMR_TGFSCM;
 800dfec:	f44f 1303 	mov.w	r3, #2146304	@ 0x20c000
 800dff0:	f8c6 3110 	str.w	r3, [r6, #272]	@ 0x110
   ETH->MMCRIMR = ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | ETH_MMCRIMR_RFCEM;
 800dff4:	4b18      	ldr	r3, [pc, #96]	@ (800e058 <stm32f7xxEthInit+0x144>)
 800dff6:	f8c6 310c 	str.w	r3, [r6, #268]	@ 0x10c
   ETH->MACIMR = ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM;
 800dffa:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800dffe:	63f3      	str	r3, [r6, #60]	@ 0x3c
   ETH->DMAIER = ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE;
 800e000:	4b16      	ldr	r3, [pc, #88]	@ (800e05c <stm32f7xxEthInit+0x148>)
 800e002:	61fb      	str	r3, [r7, #28]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800e004:	4916      	ldr	r1, [pc, #88]	@ (800e060 <stm32f7xxEthInit+0x14c>)
 800e006:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800e008:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800e00c:	0412      	lsls	r2, r2, #16
 800e00e:	0c12      	lsrs	r2, r2, #16
  reg_value  =  (reg_value                                   |
 800e010:	4b14      	ldr	r3, [pc, #80]	@ (800e064 <stm32f7xxEthInit+0x150>)
 800e012:	4313      	orrs	r3, r2
  SCB->AIRCR =  reg_value;
 800e014:	60cb      	str	r3, [r1, #12]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e016:	4b14      	ldr	r3, [pc, #80]	@ (800e068 <stm32f7xxEthInit+0x154>)
 800e018:	22c0      	movs	r2, #192	@ 0xc0
 800e01a:	f883 233d 	strb.w	r2, [r3, #829]	@ 0x33d
   ETH->MACCR |= ETH_MACCR_TE | ETH_MACCR_RE;
 800e01e:	6833      	ldr	r3, [r6, #0]
 800e020:	f043 030c 	orr.w	r3, r3, #12
 800e024:	6033      	str	r3, [r6, #0]
   ETH->DMAOMR |= ETH_DMAOMR_ST | ETH_DMAOMR_SR;
 800e026:	69ba      	ldr	r2, [r7, #24]
 800e028:	f242 0302 	movw	r3, #8194	@ 0x2002
 800e02c:	4313      	orrs	r3, r2
 800e02e:	61bb      	str	r3, [r7, #24]
   osSetEvent(&interface->nicTxEvent);
 800e030:	f104 0054 	add.w	r0, r4, #84	@ 0x54
 800e034:	f7f2 fba2 	bl	800077c <osSetEvent>
   return NO_ERROR;
 800e038:	e7b8      	b.n	800dfac <stm32f7xxEthInit+0x98>
 800e03a:	bf00      	nop
 800e03c:	20000440 	.word	0x20000440
 800e040:	0801a698 	.word	0x0801a698
 800e044:	20003758 	.word	0x20003758
 800e048:	40023800 	.word	0x40023800
 800e04c:	40029000 	.word	0x40029000
 800e050:	40028000 	.word	0x40028000
 800e054:	02c02080 	.word	0x02c02080
 800e058:	00020060 	.word	0x00020060
 800e05c:	00010041 	.word	0x00010041
 800e060:	e000ed00 	.word	0xe000ed00
 800e064:	05fa0300 	.word	0x05fa0300
 800e068:	e000e100 	.word	0xe000e100

0800e06c <tcpInit>:
 **/

error_t tcpInit(void)
{
   //Reset ephemeral port number
   tcpDynamicPort = 0;
 800e06c:	2000      	movs	r0, #0
 800e06e:	4b01      	ldr	r3, [pc, #4]	@ (800e074 <tcpInit+0x8>)
 800e070:	8018      	strh	r0, [r3, #0]

   //Successful initialization
   return NO_ERROR;
}
 800e072:	4770      	bx	lr
 800e074:	20003764 	.word	0x20003764

0800e078 <tcpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t tcpGetDynamicPort(void)
{
 800e078:	b508      	push	{r3, lr}
   uint_t port;

   //Retrieve current port number
   port = tcpDynamicPort;
 800e07a:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b4 <tcpGetDynamicPort+0x3c>)
 800e07c:	8818      	ldrh	r0, [r3, #0]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 800e07e:	f5a0 4340 	sub.w	r3, r0, #49152	@ 0xc000
 800e082:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e086:	d208      	bcs.n	800e09a <tcpGetDynamicPort+0x22>
      port = netGenerateRandRange(SOCKET_EPHEMERAL_PORT_MIN,
         SOCKET_EPHEMERAL_PORT_MAX);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 800e088:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800e08c:	4298      	cmp	r0, r3
 800e08e:	d80b      	bhi.n	800e0a8 <tcpGetDynamicPort+0x30>
   {
      //Increment port number
      tcpDynamicPort = port + 1;
 800e090:	1c43      	adds	r3, r0, #1
 800e092:	4a08      	ldr	r2, [pc, #32]	@ (800e0b4 <tcpGetDynamicPort+0x3c>)
 800e094:	8013      	strh	r3, [r2, #0]
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
   }

   //Return an ephemeral port number
   return port;
}
 800e096:	b280      	uxth	r0, r0
 800e098:	bd08      	pop	{r3, pc}
      port = netGenerateRandRange(SOCKET_EPHEMERAL_PORT_MIN,
 800e09a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800e09e:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 800e0a2:	f7fe fd17 	bl	800cad4 <netGenerateRandRange>
 800e0a6:	e7ef      	b.n	800e088 <tcpGetDynamicPort+0x10>
      tcpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 800e0a8:	4b02      	ldr	r3, [pc, #8]	@ (800e0b4 <tcpGetDynamicPort+0x3c>)
 800e0aa:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800e0ae:	801a      	strh	r2, [r3, #0]
 800e0b0:	e7f1      	b.n	800e096 <tcpGetDynamicPort+0x1e>
 800e0b2:	bf00      	nop
 800e0b4:	20003764 	.word	0x20003764

0800e0b8 <tcpConnect>:
 * @return Error code
 **/

error_t tcpConnect(Socket *socket, const IpAddr *remoteIpAddr,
   uint16_t remotePort)
{
 800e0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0ba:	b083      	sub	sp, #12
 800e0bc:	4604      	mov	r4, r0
   error_t error;
   uint_t event;

   //Check current TCP state
   if(socket->state == TCP_STATE_CLOSED && !socket->resetFlag)
 800e0be:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800e0c2:	b923      	cbnz	r3, 800e0ce <tcpConnect+0x16>
 800e0c4:	460e      	mov	r6, r1
 800e0c6:	4615      	mov	r5, r2
 800e0c8:	f8d0 3080 	ldr.w	r3, [r0, #128]	@ 0x80
 800e0cc:	b173      	cbz	r3, 800e0ec <tcpConnect+0x34>
      MIB2_TCP_INC_COUNTER32(tcpActiveOpens, 1);
      TCP_MIB_INC_COUNTER32(tcpActiveOpens, 1);
   }

   //Wait for the connection to be established
   event = tcpWaitForEvents(socket, SOCKET_EVENT_CONNECTED |
 800e0ce:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e0d0:	2106      	movs	r1, #6
 800e0d2:	4620      	mov	r0, r4
 800e0d4:	f001 fc90 	bl	800f9f8 <tcpWaitForEvents>
      SOCKET_EVENT_CLOSED, socket->timeout);

   //Return status code
   if(event == SOCKET_EVENT_CONNECTED)
 800e0d8:	2802      	cmp	r0, #2
 800e0da:	f000 80a8 	beq.w	800e22e <tcpConnect+0x176>
   {
      //Connection successfully established
      return NO_ERROR;
   }
   else if(event == SOCKET_EVENT_CLOSED)
 800e0de:	2804      	cmp	r0, #4
 800e0e0:	f000 80a3 	beq.w	800e22a <tcpConnect+0x172>
      return ERROR_CONNECTION_FAILED;
   }
   else
   {
      //Timeout exception
      return ERROR_TIMEOUT;
 800e0e4:	25dc      	movs	r5, #220	@ 0xdc
   }
}
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	b003      	add	sp, #12
 800e0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(ipIsUnspecifiedAddr(remoteIpAddr) || ipIsMulticastAddr(remoteIpAddr) ||
 800e0ec:	4608      	mov	r0, r1
 800e0ee:	f7f7 f911 	bl	8005314 <ipIsUnspecifiedAddr>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d145      	bne.n	800e182 <tcpConnect+0xca>
 800e0f6:	4630      	mov	r0, r6
 800e0f8:	f7f7 f943 	bl	8005382 <ipIsMulticastAddr>
 800e0fc:	2800      	cmp	r0, #0
 800e0fe:	d140      	bne.n	800e182 <tcpConnect+0xca>
         ipIsBroadcastAddr(remoteIpAddr))
 800e100:	4630      	mov	r0, r6
 800e102:	f7f7 f953 	bl	80053ac <ipIsBroadcastAddr>
      if(ipIsUnspecifiedAddr(remoteIpAddr) || ipIsMulticastAddr(remoteIpAddr) ||
 800e106:	2800      	cmp	r0, #0
 800e108:	d13b      	bne.n	800e182 <tcpConnect+0xca>
      if(ipIsMulticastAddr(&socket->localIpAddr) ||
 800e10a:	f104 0710 	add.w	r7, r4, #16
 800e10e:	4638      	mov	r0, r7
 800e110:	f7f7 f937 	bl	8005382 <ipIsMulticastAddr>
 800e114:	bbb8      	cbnz	r0, 800e186 <tcpConnect+0xce>
         ipIsBroadcastAddr(&socket->localIpAddr))
 800e116:	4638      	mov	r0, r7
 800e118:	f7f7 f948 	bl	80053ac <ipIsBroadcastAddr>
      if(ipIsMulticastAddr(&socket->localIpAddr) ||
 800e11c:	bb98      	cbnz	r0, 800e186 <tcpConnect+0xce>
      socket->remoteIpAddr = *remoteIpAddr;
 800e11e:	f104 0c28 	add.w	ip, r4, #40	@ 0x28
 800e122:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e128:	6833      	ldr	r3, [r6, #0]
 800e12a:	f8cc 3000 	str.w	r3, [ip]
      socket->remotePort = remotePort;
 800e12e:	87a5      	strh	r5, [r4, #60]	@ 0x3c
      if(ipIsUnspecifiedAddr(&socket->localIpAddr))
 800e130:	4638      	mov	r0, r7
 800e132:	f7f7 f8ef 	bl	8005314 <ipIsUnspecifiedAddr>
 800e136:	b148      	cbz	r0, 800e14c <tcpConnect+0x94>
         error = ipSelectSourceAddr(&socket->interface, &socket->remoteIpAddr,
 800e138:	463a      	mov	r2, r7
 800e13a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 800e13e:	f104 000c 	add.w	r0, r4, #12
 800e142:	f7f7 f8d3 	bl	80052ec <ipSelectSourceAddr>
         if(error)
 800e146:	4605      	mov	r5, r0
 800e148:	2800      	cmp	r0, #0
 800e14a:	d1cc      	bne.n	800e0e6 <tcpConnect+0x2e>
      socket->ownedFlag = TRUE;
 800e14c:	2301      	movs	r3, #1
 800e14e:	67a3      	str	r3, [r4, #120]	@ 0x78
      socket->txBuffer.maxChunkCount = arraysize(socket->txBuffer.chunk);
 800e150:	230f      	movs	r3, #15
 800e152:	f8c4 3114 	str.w	r3, [r4, #276]	@ 0x114
      socket->rxBuffer.maxChunkCount = arraysize(socket->rxBuffer.chunk);
 800e156:	f8c4 3198 	str.w	r3, [r4, #408]	@ 0x198
      error = netBufferSetLength((NetBuffer *) &socket->txBuffer,
 800e15a:	f8d4 1190 	ldr.w	r1, [r4, #400]	@ 0x190
 800e15e:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800e162:	f7fd ff96 	bl	800c092 <netBufferSetLength>
      if(!error)
 800e166:	4605      	mov	r5, r0
 800e168:	b938      	cbnz	r0, 800e17a <tcpConnect+0xc2>
         error = netBufferSetLength((NetBuffer *) &socket->rxBuffer,
 800e16a:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800e16e:	f504 70ca 	add.w	r0, r4, #404	@ 0x194
 800e172:	f7fd ff8e 	bl	800c092 <netBufferSetLength>
      if(error)
 800e176:	4605      	mov	r5, r0
 800e178:	b138      	cbz	r0, 800e18a <tcpConnect+0xd2>
         tcpDeleteControlBlock(socket);
 800e17a:	4620      	mov	r0, r4
 800e17c:	f001 fa8d 	bl	800f69a <tcpDeleteControlBlock>
         return error;
 800e180:	e7b1      	b.n	800e0e6 <tcpConnect+0x2e>
         return ERROR_INVALID_ADDRESS;
 800e182:	25e4      	movs	r5, #228	@ 0xe4
 800e184:	e7af      	b.n	800e0e6 <tcpConnect+0x2e>
         return ERROR_INVALID_ADDRESS;
 800e186:	25e4      	movs	r5, #228	@ 0xe4
 800e188:	e7ad      	b.n	800e0e6 <tcpConnect+0x2e>
      socket->smss = MIN(socket->mss, TCP_DEFAULT_MSS);
 800e18a:	f8b4 3084 	ldrh.w	r3, [r4, #132]	@ 0x84
 800e18e:	461a      	mov	r2, r3
 800e190:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e194:	bf28      	it	cs
 800e196:	f44f 7206 	movcs.w	r2, #536	@ 0x218
 800e19a:	f8a4 2086 	strh.w	r2, [r4, #134]	@ 0x86
      socket->rmss = MIN(socket->mss, socket->rxBufferSize);
 800e19e:	f8d4 2214 	ldr.w	r2, [r4, #532]	@ 0x214
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	bf28      	it	cs
 800e1a6:	4613      	movcs	r3, r2
 800e1a8:	f8a4 3088 	strh.w	r3, [r4, #136]	@ 0x88
      socket->iss = tcpGenerateInitialSeqNum(&socket->localIpAddr,
 800e1ac:	8fa3      	ldrh	r3, [r4, #60]	@ 0x3c
 800e1ae:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800e1b2:	8ca1      	ldrh	r1, [r4, #36]	@ 0x24
 800e1b4:	4638      	mov	r0, r7
 800e1b6:	f001 f9a1 	bl	800f4fc <tcpGenerateInitialSeqNum>
 800e1ba:	4602      	mov	r2, r0
 800e1bc:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
      socket->sndUna = socket->iss;
 800e1c0:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
      socket->sndNxt = socket->iss + 1;
 800e1c4:	1c43      	adds	r3, r0, #1
 800e1c6:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
      socket->rcvNxt = 0;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      socket->rcvUser = 0;
 800e1d0:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
      socket->rcvWnd = socket->rxBufferSize;
 800e1d4:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800e1d8:	f8c4 10b8 	str.w	r1, [r4, #184]	@ 0xb8
      socket->rto = socket->interface->initialRto;
 800e1dc:	68e1      	ldr	r1, [r4, #12]
 800e1de:	6f09      	ldr	r1, [r1, #112]	@ 0x70
 800e1e0:	f8c4 10d0 	str.w	r1, [r4, #208]	@ 0xd0
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 800e1e4:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
      socket->cwnd = MIN((uint32_t) socket->smss * TCP_INITIAL_WINDOW,
 800e1e8:	f8d4 0190 	ldr.w	r0, [r4, #400]	@ 0x190
 800e1ec:	f8b4 1086 	ldrh.w	r1, [r4, #134]	@ 0x86
 800e1f0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e1f4:	4281      	cmp	r1, r0
 800e1f6:	bf28      	it	cs
 800e1f8:	4601      	movcs	r1, r0
 800e1fa:	f8c4 10d8 	str.w	r1, [r4, #216]	@ 0xd8
      socket->ssthresh = UINT32_MAX;
 800e1fe:	f04f 31ff 	mov.w	r1, #4294967295
 800e202:	f8c4 10dc 	str.w	r1, [r4, #220]	@ 0xdc
      socket->recover = socket->iss;
 800e206:	f8c4 20e8 	str.w	r2, [r4, #232]	@ 0xe8
      error = tcpSendSegment(socket, TCP_FLAG_SYN, socket->iss, 0, 0, TRUE);
 800e20a:	2101      	movs	r1, #1
 800e20c:	9101      	str	r1, [sp, #4]
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	2102      	movs	r1, #2
 800e212:	4620      	mov	r0, r4
 800e214:	f001 fc6e 	bl	800faf4 <tcpSendSegment>
      if(error)
 800e218:	4605      	mov	r5, r0
 800e21a:	2800      	cmp	r0, #0
 800e21c:	f47f af63 	bne.w	800e0e6 <tcpConnect+0x2e>
      tcpChangeState(socket, TCP_STATE_SYN_SENT);
 800e220:	2102      	movs	r1, #2
 800e222:	4620      	mov	r0, r4
 800e224:	f001 fbd3 	bl	800f9ce <tcpChangeState>
 800e228:	e751      	b.n	800e0ce <tcpConnect+0x16>
      return ERROR_CONNECTION_FAILED;
 800e22a:	25c9      	movs	r5, #201	@ 0xc9
 800e22c:	e75b      	b.n	800e0e6 <tcpConnect+0x2e>
      return NO_ERROR;
 800e22e:	2500      	movs	r5, #0
 800e230:	e759      	b.n	800e0e6 <tcpConnect+0x2e>

0800e232 <tcpListen>:
 *   If this parameter is zero, then the default backlog value is used instead
 * @return Error code
 **/

error_t tcpListen(Socket *socket, uint_t backlog)
{
 800e232:	b508      	push	{r3, lr}
   //Socket already connected?
   if(socket->state != TCP_STATE_CLOSED)
 800e234:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800e238:	b96b      	cbnz	r3, 800e256 <tcpListen+0x24>
      return ERROR_ALREADY_CONNECTED;

   //Set the size of the SYN queue
   socket->synQueueSize = (backlog > 0) ? backlog : TCP_DEFAULT_SYN_QUEUE_SIZE;
 800e23a:	b901      	cbnz	r1, 800e23e <tcpListen+0xc>
 800e23c:	2104      	movs	r1, #4
 800e23e:	f8c0 1230 	str.w	r1, [r0, #560]	@ 0x230
   //Limit the number of pending connections
   socket->synQueueSize = MIN(socket->synQueueSize, TCP_MAX_SYN_QUEUE_SIZE);
 800e242:	2910      	cmp	r1, #16
 800e244:	bf28      	it	cs
 800e246:	2110      	movcs	r1, #16
 800e248:	f8c0 1230 	str.w	r1, [r0, #560]	@ 0x230

   //Place the socket in the listening state
   tcpChangeState(socket, TCP_STATE_LISTEN);
 800e24c:	2101      	movs	r1, #1
 800e24e:	f001 fbbe 	bl	800f9ce <tcpChangeState>

   //Successful processing
   return NO_ERROR;
 800e252:	2000      	movs	r0, #0
}
 800e254:	bd08      	pop	{r3, pc}
      return ERROR_ALREADY_CONNECTED;
 800e256:	20cf      	movs	r0, #207	@ 0xcf
 800e258:	e7fc      	b.n	800e254 <tcpListen+0x22>

0800e25a <tcpSend>:
 * @return Error code
 **/

error_t tcpSend(Socket *socket, const uint8_t *data, size_t length,
   size_t *written, uint_t flags)
{
 800e25a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e25e:	461f      	mov	r7, r3
   uint_t n;
   uint_t totalLength;
   uint_t event;

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 800e260:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800e264:	2b01      	cmp	r3, #1
 800e266:	d06b      	beq.n	800e340 <tcpSend+0xe6>
 800e268:	4604      	mov	r4, r0
 800e26a:	460e      	mov	r6, r1
 800e26c:	4615      	mov	r5, r2
      return ERROR_NOT_CONNECTED;

   //Actual number of bytes written
   totalLength = 0;
 800e26e:	f04f 0800 	mov.w	r8, #0

   //Send as much data as possible
   do
   {
      //Wait until there is more room in the send buffer
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_READY, socket->timeout);
 800e272:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e274:	2108      	movs	r1, #8
 800e276:	4620      	mov	r0, r4
 800e278:	f001 fbbe 	bl	800f9f8 <tcpWaitForEvents>

      //A timeout exception occurred?
      if(event != SOCKET_EVENT_TX_READY)
 800e27c:	2808      	cmp	r0, #8
 800e27e:	d161      	bne.n	800e344 <tcpSend+0xea>
         return ERROR_TIMEOUT;

      //Check current TCP state
      switch(socket->state)
 800e280:	f894 0074 	ldrb.w	r0, [r4, #116]	@ 0x74
 800e284:	2805      	cmp	r0, #5
 800e286:	d906      	bls.n	800e296 <tcpSend+0x3c>
 800e288:	3806      	subs	r0, #6
 800e28a:	b2c0      	uxtb	r0, r0
 800e28c:	2804      	cmp	r0, #4
 800e28e:	d826      	bhi.n	800e2de <tcpSend+0x84>
 800e290:	20cb      	movs	r0, #203	@ 0xcb
         return ERROR_NOT_CONNECTED;
   }

   //Successful write operation
   return NO_ERROR;
}
 800e292:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      switch(socket->state)
 800e296:	2804      	cmp	r0, #4
 800e298:	d321      	bcc.n	800e2de <tcpSend+0x84>
      n = socket->sndUser + socket->sndNxt - socket->sndUna;
 800e29a:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800e29e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800e2a2:	4419      	add	r1, r3
 800e2a4:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 800e2a8:	1a88      	subs	r0, r1, r2
      if(n >= socket->txBufferSize)
 800e2aa:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 800e2ae:	4283      	cmp	r3, r0
 800e2b0:	d94c      	bls.n	800e34c <tcpSend+0xf2>
      n = socket->txBufferSize - n;
 800e2b2:	1a52      	subs	r2, r2, r1
 800e2b4:	441a      	add	r2, r3
      n = MIN(n, length - totalLength);
 800e2b6:	eba5 0908 	sub.w	r9, r5, r8
 800e2ba:	4591      	cmp	r9, r2
 800e2bc:	bf28      	it	cs
 800e2be:	4691      	movcs	r9, r2
      if(n > 0)
 800e2c0:	f1b9 0f00 	cmp.w	r9, #0
 800e2c4:	d110      	bne.n	800e2e8 <tcpSend+0x8e>
      tcpNagleAlgo(socket, flags);
 800e2c6:	9908      	ldr	r1, [sp, #32]
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f001 fe12 	bl	800fef2 <tcpNagleAlgo>
   } while(totalLength < length);
 800e2ce:	45a8      	cmp	r8, r5
 800e2d0:	d3cf      	bcc.n	800e272 <tcpSend+0x18>
   if((flags & SOCKET_FLAG_WAIT_ACK) != 0)
 800e2d2:	9b08      	ldr	r3, [sp, #32]
 800e2d4:	f413 5f00 	tst.w	r3, #8192	@ 0x2000
 800e2d8:	d123      	bne.n	800e322 <tcpSend+0xc8>
   return NO_ERROR;
 800e2da:	2000      	movs	r0, #0
 800e2dc:	e7d9      	b.n	800e292 <tcpSend+0x38>
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 800e2de:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800e2e2:	b38b      	cbz	r3, 800e348 <tcpSend+0xee>
 800e2e4:	20cc      	movs	r0, #204	@ 0xcc
 800e2e6:	e7d4      	b.n	800e292 <tcpSend+0x38>
         tcpWriteTxBuffer(socket, socket->sndNxt + socket->sndUser, data, n);
 800e2e8:	464b      	mov	r3, r9
 800e2ea:	4632      	mov	r2, r6
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	f001 fba3 	bl	800fa38 <tcpWriteTxBuffer>
         socket->sndUser += n;
 800e2f2:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800e2f6:	444b      	add	r3, r9
 800e2f8:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
         data += n;
 800e2fc:	444e      	add	r6, r9
         totalLength += n;
 800e2fe:	44c8      	add	r8, r9
         if(written != NULL)
 800e300:	b10f      	cbz	r7, 800e306 <tcpSend+0xac>
            *written = totalLength;
 800e302:	f8c7 8000 	str.w	r8, [r7]
         tcpUpdateEvents(socket);
 800e306:	4620      	mov	r0, r4
 800e308:	f001 fac6 	bl	800f898 <tcpUpdateEvents>
         if(socket->sndUser == n)
 800e30c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800e310:	454b      	cmp	r3, r9
 800e312:	d1d8      	bne.n	800e2c6 <tcpSend+0x6c>
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 800e314:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800e318:	f504 7012 	add.w	r0, r4, #584	@ 0x248
 800e31c:	f7fe face 	bl	800c8bc <netStartTimer>
 800e320:	e7d1      	b.n	800e2c6 <tcpSend+0x6c>
      event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_ACKED, socket->timeout);
 800e322:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e324:	2120      	movs	r1, #32
 800e326:	4620      	mov	r0, r4
 800e328:	f001 fb66 	bl	800f9f8 <tcpWaitForEvents>
      if(event != SOCKET_EVENT_TX_ACKED)
 800e32c:	2820      	cmp	r0, #32
 800e32e:	d10f      	bne.n	800e350 <tcpSend+0xf6>
      if(socket->state != TCP_STATE_ESTABLISHED && socket->state != TCP_STATE_CLOSE_WAIT)
 800e330:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800e334:	3b04      	subs	r3, #4
 800e336:	b2db      	uxtb	r3, r3
 800e338:	2b01      	cmp	r3, #1
 800e33a:	d80b      	bhi.n	800e354 <tcpSend+0xfa>
   return NO_ERROR;
 800e33c:	2000      	movs	r0, #0
 800e33e:	e7a8      	b.n	800e292 <tcpSend+0x38>
      return ERROR_NOT_CONNECTED;
 800e340:	20cd      	movs	r0, #205	@ 0xcd
 800e342:	e7a6      	b.n	800e292 <tcpSend+0x38>
         return ERROR_TIMEOUT;
 800e344:	20dc      	movs	r0, #220	@ 0xdc
 800e346:	e7a4      	b.n	800e292 <tcpSend+0x38>
         return (socket->resetFlag) ? ERROR_CONNECTION_RESET : ERROR_NOT_CONNECTED;
 800e348:	20cd      	movs	r0, #205	@ 0xcd
 800e34a:	e7a2      	b.n	800e292 <tcpSend+0x38>
         return ERROR_FAILURE;
 800e34c:	2001      	movs	r0, #1
 800e34e:	e7a0      	b.n	800e292 <tcpSend+0x38>
         return ERROR_TIMEOUT;
 800e350:	20dc      	movs	r0, #220	@ 0xdc
 800e352:	e79e      	b.n	800e292 <tcpSend+0x38>
         return ERROR_NOT_CONNECTED;
 800e354:	20cd      	movs	r0, #205	@ 0xcd
 800e356:	e79c      	b.n	800e292 <tcpSend+0x38>

0800e358 <tcpReceive>:
 * @return Error code
 **/

error_t tcpReceive(Socket *socket, uint8_t *data, size_t size,
   size_t *received, uint_t flags)
{
 800e358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e35c:	4605      	mov	r5, r0
 800e35e:	460e      	mov	r6, r1
 800e360:	4692      	mov	sl, r2
 800e362:	461f      	mov	r7, r3
 800e364:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
   uint_t event;
   uint32_t seqNum;
   systime_t timeout;

   //Retrieve the break character code
   char_t c = LSB(flags);
 800e368:	fa5f f988 	uxtb.w	r9, r8
   //No data has been read yet
   *received = 0;
 800e36c:	2300      	movs	r3, #0
 800e36e:	603b      	str	r3, [r7, #0]

   //Check whether the socket is in the listening state
   if(socket->state == TCP_STATE_LISTEN)
 800e370:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800e374:	2b01      	cmp	r3, #1
 800e376:	d132      	bne.n	800e3de <tcpReceive+0x86>
      return ERROR_NOT_CONNECTED;
 800e378:	20cd      	movs	r0, #205	@ 0xcd
 800e37a:	e083      	b.n	800e484 <tcpReceive+0x12c>

   //Read as much data as possible
   while(*received < size)
   {
      //The SOCKET_FLAG_DONT_WAIT enables non-blocking operation
      timeout = (flags & SOCKET_FLAG_DONT_WAIT) ? 0 : socket->timeout;
 800e37c:	2200      	movs	r2, #0
 800e37e:	e035      	b.n	800e3ec <tcpReceive+0x94>
      //ESTABLISHED, FIN-WAIT-1 or FIN-WAIT-2 state?
      case TCP_STATE_ESTABLISHED:
      case TCP_STATE_FIN_WAIT_1:
      case TCP_STATE_FIN_WAIT_2:
         //Sequence number of the first byte to read
         seqNum = socket->rcvNxt - socket->rcvUser;
 800e380:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800e384:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e388:	1ac9      	subs	r1, r1, r3
         //Data is available in the receive buffer
         break;
      }

      //Sanity check
      if(socket->rcvUser == 0)
 800e38a:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 8086 	beq.w	800e4a0 <tcpReceive+0x148>
         return ERROR_FAILURE;

      //Calculate the number of bytes to read at a time
      n = MIN(socket->rcvUser, size - *received);
 800e394:	683c      	ldr	r4, [r7, #0]
 800e396:	ebaa 0404 	sub.w	r4, sl, r4
 800e39a:	429c      	cmp	r4, r3
 800e39c:	bf28      	it	cs
 800e39e:	461c      	movcs	r4, r3
      //Copy data from circular buffer
      tcpReadRxBuffer(socket, seqNum, data, n);
 800e3a0:	4623      	mov	r3, r4
 800e3a2:	4632      	mov	r2, r6
 800e3a4:	4628      	mov	r0, r5
 800e3a6:	f002 f89f 	bl	80104e8 <tcpReadRxBuffer>

      //Read data until a break character is encountered?
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 800e3aa:	f418 5b80 	ands.w	fp, r8, #4096	@ 0x1000
 800e3ae:	d161      	bne.n	800e474 <tcpReceive+0x11c>
         //Adjust the number of data to read
         n = MIN(n, i + 1);
      }

      //Total number of data that have been read
      *received += n;
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	4423      	add	r3, r4
 800e3b4:	603b      	str	r3, [r7, #0]
      //Remaining data still available in the receive buffer
      socket->rcvUser -= n;
 800e3b6:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e3ba:	1b1b      	subs	r3, r3, r4
 800e3bc:	f8c5 30b4 	str.w	r3, [r5, #180]	@ 0xb4

      //Update the receive window
      tcpUpdateReceiveWindow(socket);
 800e3c0:	4628      	mov	r0, r5
 800e3c2:	f001 fd72 	bl	800feaa <tcpUpdateReceiveWindow>
      //Update RX event state
      tcpUpdateEvents(socket);
 800e3c6:	4628      	mov	r0, r5
 800e3c8:	f001 fa66 	bl	800f898 <tcpUpdateEvents>

      //The SOCKET_FLAG_BREAK_CHAR flag causes the function to stop reading
      //data as soon as the specified break character is encountered
      if((flags & SOCKET_FLAG_BREAK_CHAR) != 0)
 800e3cc:	f1bb 0f00 	cmp.w	fp, #0
 800e3d0:	d052      	beq.n	800e478 <tcpReceive+0x120>
      {
         //Check whether a break character has been found
         if(data[n - 1] == c)
 800e3d2:	1933      	adds	r3, r6, r4
 800e3d4:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e3d8:	454b      	cmp	r3, r9
 800e3da:	d063      	beq.n	800e4a4 <tcpReceive+0x14c>
      {
         break;
      }

      //Advance data pointer
      data += n;
 800e3dc:	4426      	add	r6, r4
   while(*received < size)
 800e3de:	683b      	ldr	r3, [r7, #0]
 800e3e0:	4553      	cmp	r3, sl
 800e3e2:	d24e      	bcs.n	800e482 <tcpReceive+0x12a>
      timeout = (flags & SOCKET_FLAG_DONT_WAIT) ? 0 : socket->timeout;
 800e3e4:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800e3e8:	d1c8      	bne.n	800e37c <tcpReceive+0x24>
 800e3ea:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
      event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_READY, timeout);
 800e3ec:	2180      	movs	r1, #128	@ 0x80
 800e3ee:	4628      	mov	r0, r5
 800e3f0:	f001 fb02 	bl	800f9f8 <tcpWaitForEvents>
      if(event != SOCKET_EVENT_RX_READY)
 800e3f4:	2880      	cmp	r0, #128	@ 0x80
 800e3f6:	d147      	bne.n	800e488 <tcpReceive+0x130>
      switch(socket->state)
 800e3f8:	f895 3074 	ldrb.w	r3, [r5, #116]	@ 0x74
 800e3fc:	3b04      	subs	r3, #4
 800e3fe:	2b06      	cmp	r3, #6
 800e400:	d81c      	bhi.n	800e43c <tcpReceive+0xe4>
 800e402:	a201      	add	r2, pc, #4	@ (adr r2, 800e408 <tcpReceive+0xb0>)
 800e404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e408:	0800e381 	.word	0x0800e381
 800e40c:	0800e425 	.word	0x0800e425
 800e410:	0800e425 	.word	0x0800e425
 800e414:	0800e381 	.word	0x0800e381
 800e418:	0800e381 	.word	0x0800e381
 800e41c:	0800e425 	.word	0x0800e425
 800e420:	0800e425 	.word	0x0800e425
         if(socket->rcvUser == 0)
 800e424:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800e428:	b123      	cbz	r3, 800e434 <tcpReceive+0xdc>
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 800e42a:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800e42e:	1ac9      	subs	r1, r1, r3
 800e430:	3901      	subs	r1, #1
         break;
 800e432:	e7aa      	b.n	800e38a <tcpReceive+0x32>
            if(*received > 0)
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	b34b      	cbz	r3, 800e48c <tcpReceive+0x134>
               return NO_ERROR;
 800e438:	2000      	movs	r0, #0
 800e43a:	e023      	b.n	800e484 <tcpReceive+0x12c>
         if(socket->resetFlag)
 800e43c:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800e440:	bb3b      	cbnz	r3, 800e492 <tcpReceive+0x13a>
         if(!socket->closedFlag)
 800e442:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800e444:	b33b      	cbz	r3, 800e496 <tcpReceive+0x13e>
         if(socket->rcvUser == 0)
 800e446:	f8d5 20b4 	ldr.w	r2, [r5, #180]	@ 0xb4
 800e44a:	b91a      	cbnz	r2, 800e454 <tcpReceive+0xfc>
            if(*received > 0)
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	b323      	cbz	r3, 800e49a <tcpReceive+0x142>
               return NO_ERROR;
 800e450:	2000      	movs	r0, #0
 800e452:	e017      	b.n	800e484 <tcpReceive+0x12c>
         seqNum = (socket->rcvNxt - 1) - socket->rcvUser;
 800e454:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800e458:	1a9b      	subs	r3, r3, r2
 800e45a:	1e59      	subs	r1, r3, #1
         break;
 800e45c:	e795      	b.n	800e38a <tcpReceive+0x32>
         for(i = 0; i < n && data[i] != c; i++)
 800e45e:	3301      	adds	r3, #1
 800e460:	42a3      	cmp	r3, r4
 800e462:	d202      	bcs.n	800e46a <tcpReceive+0x112>
 800e464:	5cf2      	ldrb	r2, [r6, r3]
 800e466:	454a      	cmp	r2, r9
 800e468:	d1f9      	bne.n	800e45e <tcpReceive+0x106>
         n = MIN(n, i + 1);
 800e46a:	3301      	adds	r3, #1
 800e46c:	429c      	cmp	r4, r3
 800e46e:	bf28      	it	cs
 800e470:	461c      	movcs	r4, r3
 800e472:	e79d      	b.n	800e3b0 <tcpReceive+0x58>
         for(i = 0; i < n && data[i] != c; i++)
 800e474:	2300      	movs	r3, #0
 800e476:	e7f3      	b.n	800e460 <tcpReceive+0x108>
      else if((flags & SOCKET_FLAG_WAIT_ALL) == 0)
 800e478:	f418 6f00 	tst.w	r8, #2048	@ 0x800
 800e47c:	d1ae      	bne.n	800e3dc <tcpReceive+0x84>
   }

   //Successful read operation
   return NO_ERROR;
 800e47e:	2000      	movs	r0, #0
 800e480:	e000      	b.n	800e484 <tcpReceive+0x12c>
 800e482:	2000      	movs	r0, #0
}
 800e484:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
         return ERROR_TIMEOUT;
 800e488:	20dc      	movs	r0, #220	@ 0xdc
 800e48a:	e7fb      	b.n	800e484 <tcpReceive+0x12c>
               return ERROR_END_OF_STREAM;
 800e48c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e490:	e7f8      	b.n	800e484 <tcpReceive+0x12c>
            return ERROR_CONNECTION_RESET;
 800e492:	20cc      	movs	r0, #204	@ 0xcc
 800e494:	e7f6      	b.n	800e484 <tcpReceive+0x12c>
            return ERROR_NOT_CONNECTED;
 800e496:	20cd      	movs	r0, #205	@ 0xcd
 800e498:	e7f4      	b.n	800e484 <tcpReceive+0x12c>
               return ERROR_END_OF_STREAM;
 800e49a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800e49e:	e7f1      	b.n	800e484 <tcpReceive+0x12c>
         return ERROR_FAILURE;
 800e4a0:	2001      	movs	r0, #1
 800e4a2:	e7ef      	b.n	800e484 <tcpReceive+0x12c>
   return NO_ERROR;
 800e4a4:	2000      	movs	r0, #0
 800e4a6:	e7ed      	b.n	800e484 <tcpReceive+0x12c>

0800e4a8 <tcpShutdown>:
 *   be allowed
 * @return Error code
 **/

error_t tcpShutdown(Socket *socket, uint_t how)
{
 800e4a8:	b570      	push	{r4, r5, r6, lr}
 800e4aa:	b082      	sub	sp, #8
 800e4ac:	4604      	mov	r4, r0
 800e4ae:	460d      	mov	r5, r1

   //Initialize status code
   error = NO_ERROR;

   //Check whether transmission should be disabled
   if(how == SOCKET_SD_SEND || how == SOCKET_SD_BOTH)
 800e4b0:	1e4b      	subs	r3, r1, #1
 800e4b2:	2b01      	cmp	r3, #1
 800e4b4:	d959      	bls.n	800e56a <tcpShutdown+0xc2>
   error = NO_ERROR;
 800e4b6:	2600      	movs	r6, #0

   //Check status code
   if(!error)
   {
      //Check whether reception should be disabled
      if(how == SOCKET_SD_RECEIVE || how == SOCKET_SD_BOTH)
 800e4b8:	2d02      	cmp	r5, #2
 800e4ba:	bf18      	it	ne
 800e4bc:	2d00      	cmpne	r5, #0
 800e4be:	d174      	bne.n	800e5aa <tcpShutdown+0x102>
      {
         //LISTEN state?
         if(socket->state == TCP_STATE_LISTEN)
 800e4c0:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800e4c4:	2b01      	cmp	r3, #1
 800e4c6:	d073      	beq.n	800e5b0 <tcpShutdown+0x108>
            error = ERROR_NOT_CONNECTED;
         }
         //SYN-SENT, SYN-RECEIVED, ESTABLISHED, FIN-WAIT-1 or FIN-WAIT-2 state?
         else if(socket->state == TCP_STATE_SYN_SENT ||
            socket->state == TCP_STATE_SYN_RECEIVED ||
            socket->state == TCP_STATE_ESTABLISHED ||
 800e4c8:	1e9a      	subs	r2, r3, #2
 800e4ca:	b2d2      	uxtb	r2, r2
         else if(socket->state == TCP_STATE_SYN_SENT ||
 800e4cc:	2b07      	cmp	r3, #7
 800e4ce:	bf18      	it	ne
 800e4d0:	2a02      	cmpne	r2, #2
 800e4d2:	d901      	bls.n	800e4d8 <tcpShutdown+0x30>
            socket->state == TCP_STATE_FIN_WAIT_1 ||
 800e4d4:	2b08      	cmp	r3, #8
 800e4d6:	d168      	bne.n	800e5aa <tcpShutdown+0x102>
            socket->state == TCP_STATE_FIN_WAIT_2)
         {
            //Wait for a FIN to be received
            event = tcpWaitForEvents(socket, SOCKET_EVENT_RX_SHUTDOWN,
 800e4d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e4da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800e4de:	4620      	mov	r0, r4
 800e4e0:	f001 fa8a 	bl	800f9f8 <tcpWaitForEvents>
               socket->timeout);

            //Timeout interval elapsed?
            if(event != SOCKET_EVENT_RX_SHUTDOWN)
 800e4e4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800e4e8:	d05f      	beq.n	800e5aa <tcpShutdown+0x102>
            {
               error = ERROR_TIMEOUT;
 800e4ea:	26dc      	movs	r6, #220	@ 0xdc
 800e4ec:	e05d      	b.n	800e5aa <tcpShutdown+0x102>
            if(socket->sndUser > 0)
 800e4ee:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800e4f2:	b16b      	cbz	r3, 800e510 <tcpShutdown+0x68>
               tcpNagleAlgo(socket, SOCKET_FLAG_NO_DELAY);
 800e4f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e4f8:	4620      	mov	r0, r4
 800e4fa:	f001 fcfa 	bl	800fef2 <tcpNagleAlgo>
               event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_DONE,
 800e4fe:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e500:	2110      	movs	r1, #16
 800e502:	4620      	mov	r0, r4
 800e504:	f001 fa78 	bl	800f9f8 <tcpWaitForEvents>
               if(event != SOCKET_EVENT_TX_DONE)
 800e508:	2810      	cmp	r0, #16
 800e50a:	d02f      	beq.n	800e56c <tcpShutdown+0xc4>
                  error = ERROR_TIMEOUT;
 800e50c:	26dc      	movs	r6, #220	@ 0xdc
 800e50e:	e04a      	b.n	800e5a6 <tcpShutdown+0xfe>
               error = tcpSendSegment(socket, TCP_FLAG_FIN | TCP_FLAG_ACK,
 800e510:	2301      	movs	r3, #1
 800e512:	9301      	str	r3, [sp, #4]
 800e514:	2300      	movs	r3, #0
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800e51c:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800e520:	2111      	movs	r1, #17
 800e522:	4620      	mov	r0, r4
 800e524:	f001 fae6 	bl	800faf4 <tcpSendSegment>
               if(!error)
 800e528:	4606      	mov	r6, r0
 800e52a:	2800      	cmp	r0, #0
 800e52c:	d13b      	bne.n	800e5a6 <tcpShutdown+0xfe>
                  socket->sndNxt++;
 800e52e:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800e532:	3301      	adds	r3, #1
 800e534:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
                  if(socket->state == TCP_STATE_SYN_RECEIVED ||
 800e538:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800e53c:	3b03      	subs	r3, #3
 800e53e:	b2db      	uxtb	r3, r3
 800e540:	2b01      	cmp	r3, #1
 800e542:	d904      	bls.n	800e54e <tcpShutdown+0xa6>
                     tcpChangeState(socket, TCP_STATE_LAST_ACK);
 800e544:	2106      	movs	r1, #6
 800e546:	4620      	mov	r0, r4
 800e548:	f001 fa41 	bl	800f9ce <tcpChangeState>
 800e54c:	e00e      	b.n	800e56c <tcpShutdown+0xc4>
                     tcpChangeState(socket, TCP_STATE_FIN_WAIT_1);
 800e54e:	2107      	movs	r1, #7
 800e550:	4620      	mov	r0, r4
 800e552:	f001 fa3c 	bl	800f9ce <tcpChangeState>
 800e556:	e009      	b.n	800e56c <tcpShutdown+0xc4>
            event = tcpWaitForEvents(socket, SOCKET_EVENT_TX_SHUTDOWN,
 800e558:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800e55a:	2140      	movs	r1, #64	@ 0x40
 800e55c:	4620      	mov	r0, r4
 800e55e:	f001 fa4b 	bl	800f9f8 <tcpWaitForEvents>
            if(event != SOCKET_EVENT_TX_SHUTDOWN)
 800e562:	2840      	cmp	r0, #64	@ 0x40
 800e564:	d002      	beq.n	800e56c <tcpShutdown+0xc4>
               error = ERROR_TIMEOUT;
 800e566:	26dc      	movs	r6, #220	@ 0xdc
 800e568:	e01d      	b.n	800e5a6 <tcpShutdown+0xfe>
   error = NO_ERROR;
 800e56a:	2600      	movs	r6, #0
      while(!error)
 800e56c:	b9de      	cbnz	r6, 800e5a6 <tcpShutdown+0xfe>
         if(socket->state == TCP_STATE_LISTEN)
 800e56e:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 800e572:	3b01      	subs	r3, #1
 800e574:	2b08      	cmp	r3, #8
 800e576:	d816      	bhi.n	800e5a6 <tcpShutdown+0xfe>
 800e578:	a201      	add	r2, pc, #4	@ (adr r2, 800e580 <tcpShutdown+0xd8>)
 800e57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e57e:	bf00      	nop
 800e580:	0800e5a5 	.word	0x0800e5a5
 800e584:	0800e5a7 	.word	0x0800e5a7
 800e588:	0800e4ef 	.word	0x0800e4ef
 800e58c:	0800e4ef 	.word	0x0800e4ef
 800e590:	0800e4ef 	.word	0x0800e4ef
 800e594:	0800e559 	.word	0x0800e559
 800e598:	0800e559 	.word	0x0800e559
 800e59c:	0800e5a7 	.word	0x0800e5a7
 800e5a0:	0800e559 	.word	0x0800e559
 800e5a4:	26cd      	movs	r6, #205	@ 0xcd
   if(!error)
 800e5a6:	2e00      	cmp	r6, #0
 800e5a8:	d086      	beq.n	800e4b8 <tcpShutdown+0x10>
      }
   }

   //Return status code
   return error;
}
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	b002      	add	sp, #8
 800e5ae:	bd70      	pop	{r4, r5, r6, pc}
            error = ERROR_NOT_CONNECTED;
 800e5b0:	26cd      	movs	r6, #205	@ 0xcd
 800e5b2:	e7fa      	b.n	800e5aa <tcpShutdown+0x102>

0800e5b4 <tcpAbort>:
 * @param[in] socket Handle identifying the socket to close
 * @return Error code
 **/

error_t tcpAbort(Socket *socket)
{
 800e5b4:	b538      	push	{r3, r4, r5, lr}
 800e5b6:	4604      	mov	r4, r0
   error_t error;

   //Check current state
   switch(socket->state)
 800e5b8:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800e5bc:	2b08      	cmp	r3, #8
 800e5be:	d904      	bls.n	800e5ca <tcpAbort+0x16>
 800e5c0:	2b0a      	cmp	r3, #10
 800e5c2:	d119      	bne.n	800e5f8 <tcpAbort+0x44>

   //TIME-WAIT state?
   case TCP_STATE_TIME_WAIT:
#if (TCP_2MSL_TIMER > 0)
      //The user doe not own the socket anymore...
      socket->ownedFlag = FALSE;
 800e5c4:	2500      	movs	r5, #0
 800e5c6:	6785      	str	r5, [r0, #120]	@ 0x78
      //TCB will be deleted and socket will be closed
      //when the 2MSL timer will elapse
      return NO_ERROR;
 800e5c8:	e014      	b.n	800e5f4 <tcpAbort+0x40>
   switch(socket->state)
 800e5ca:	2b07      	cmp	r3, #7
 800e5cc:	d203      	bcs.n	800e5d6 <tcpAbort+0x22>
 800e5ce:	3b03      	subs	r3, #3
 800e5d0:	b2db      	uxtb	r3, r3
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d810      	bhi.n	800e5f8 <tcpAbort+0x44>
      error = tcpSendResetSegment(socket, socket->sndNxt);
 800e5d6:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 800e5da:	4620      	mov	r0, r4
 800e5dc:	f001 fbd8 	bl	800fd90 <tcpSendResetSegment>
 800e5e0:	4605      	mov	r5, r0
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800e5e2:	2100      	movs	r1, #0
 800e5e4:	4620      	mov	r0, r4
 800e5e6:	f001 f9f2 	bl	800f9ce <tcpChangeState>
      tcpDeleteControlBlock(socket);
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	f001 f855 	bl	800f69a <tcpDeleteControlBlock>
      socket->type = SOCKET_TYPE_UNUSED;
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	6063      	str	r3, [r4, #4]
      //Mark the socket as closed
      socket->type = SOCKET_TYPE_UNUSED;
      //No error to report
      return NO_ERROR;
   }
}
 800e5f4:	4628      	mov	r0, r5
 800e5f6:	bd38      	pop	{r3, r4, r5, pc}
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800e5f8:	2100      	movs	r1, #0
 800e5fa:	4620      	mov	r0, r4
 800e5fc:	f001 f9e7 	bl	800f9ce <tcpChangeState>
      tcpDeleteControlBlock(socket);
 800e600:	4620      	mov	r0, r4
 800e602:	f001 f84a 	bl	800f69a <tcpDeleteControlBlock>
      socket->type = SOCKET_TYPE_UNUSED;
 800e606:	2500      	movs	r5, #0
 800e608:	6065      	str	r5, [r4, #4]
      return NO_ERROR;
 800e60a:	e7f3      	b.n	800e5f4 <tcpAbort+0x40>

0800e60c <tcpGetState>:
 * @param[in] socket Handle identifying the socket
 * @return TCP FSM state
 **/

TcpState tcpGetState(Socket *socket)
{
 800e60c:	b538      	push	{r3, r4, r5, lr}
 800e60e:	4604      	mov	r4, r0
   TcpState state;

   //Get exclusive access
   osAcquireMutex(&netMutex);
 800e610:	4d05      	ldr	r5, [pc, #20]	@ (800e628 <tcpGetState+0x1c>)
 800e612:	4628      	mov	r0, r5
 800e614:	f7f2 f8e3 	bl	80007de <osAcquireMutex>

   //Get TCP FSM current state
   state = socket->state;
 800e618:	f894 4074 	ldrb.w	r4, [r4, #116]	@ 0x74

   //Release exclusive access
   osReleaseMutex(&netMutex);
 800e61c:	4628      	mov	r0, r5
 800e61e:	f7f2 f8e5 	bl	80007ec <osReleaseMutex>

   //Return current state
   return state;
}
 800e622:	4620      	mov	r0, r4
 800e624:	bd38      	pop	{r3, r4, r5, pc}
 800e626:	bf00      	nop
 800e628:	20000b50 	.word	0x20000b50

0800e62c <tcpAccept>:
{
 800e62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e630:	b083      	sub	sp, #12
 800e632:	4606      	mov	r6, r0
 800e634:	460f      	mov	r7, r1
 800e636:	4690      	mov	r8, r2
   if(tcpGetState(socket) != TCP_STATE_LISTEN)
 800e638:	f7ff ffe8 	bl	800e60c <tcpGetState>
 800e63c:	2801      	cmp	r0, #1
 800e63e:	f040 80e4 	bne.w	800e80a <tcpAccept+0x1de>
   osAcquireMutex(&netMutex);
 800e642:	4873      	ldr	r0, [pc, #460]	@ (800e810 <tcpAccept+0x1e4>)
 800e644:	f7f2 f8cb 	bl	80007de <osAcquireMutex>
 800e648:	e01b      	b.n	800e682 <tcpAccept+0x56>
         socket->eventMask = SOCKET_EVENT_RX_READY;
 800e64a:	2380      	movs	r3, #128	@ 0x80
 800e64c:	66b3      	str	r3, [r6, #104]	@ 0x68
         osResetEvent(&socket->event);
 800e64e:	f106 0564 	add.w	r5, r6, #100	@ 0x64
 800e652:	4628      	mov	r0, r5
 800e654:	f7f2 f89a 	bl	800078c <osResetEvent>
         osReleaseMutex(&netMutex);
 800e658:	4c6d      	ldr	r4, [pc, #436]	@ (800e810 <tcpAccept+0x1e4>)
 800e65a:	4620      	mov	r0, r4
 800e65c:	f7f2 f8c6 	bl	80007ec <osReleaseMutex>
         osWaitForEvent(&socket->event, socket->timeout);
 800e660:	6c71      	ldr	r1, [r6, #68]	@ 0x44
 800e662:	4628      	mov	r0, r5
 800e664:	f7f2 f898 	bl	8000798 <osWaitForEvent>
         osAcquireMutex(&netMutex);
 800e668:	4620      	mov	r0, r4
 800e66a:	f7f2 f8b8 	bl	80007de <osAcquireMutex>
 800e66e:	e00c      	b.n	800e68a <tcpAccept+0x5e>
         tcpAbort(newSocket);
 800e670:	4620      	mov	r0, r4
 800e672:	f7ff ff9f 	bl	800e5b4 <tcpAbort>
      socket->synQueue = queueItem->next;
 800e676:	682b      	ldr	r3, [r5, #0]
 800e678:	f8c6 322c 	str.w	r3, [r6, #556]	@ 0x22c
      memPoolFree(queueItem);
 800e67c:	4628      	mov	r0, r5
 800e67e:	f7fd fcf7 	bl	800c070 <memPoolFree>
      if(socket->synQueue == NULL)
 800e682:	f8d6 322c 	ldr.w	r3, [r6, #556]	@ 0x22c
 800e686:	2b00      	cmp	r3, #0
 800e688:	d0df      	beq.n	800e64a <tcpAccept+0x1e>
      if(socket->synQueue == NULL)
 800e68a:	f8d6 522c 	ldr.w	r5, [r6, #556]	@ 0x22c
 800e68e:	2d00      	cmp	r5, #0
 800e690:	f000 80b4 	beq.w	800e7fc <tcpAccept+0x1d0>
      if(clientIpAddr != NULL)
 800e694:	b147      	cbz	r7, 800e6a8 <tcpAccept+0x7c>
         *clientIpAddr = queueItem->srcAddr;
 800e696:	463c      	mov	r4, r7
 800e698:	f105 0c08 	add.w	ip, r5, #8
 800e69c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e6a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e6a2:	f8dc 3000 	ldr.w	r3, [ip]
 800e6a6:	6023      	str	r3, [r4, #0]
      if(clientPort != NULL)
 800e6a8:	f1b8 0f00 	cmp.w	r8, #0
 800e6ac:	d002      	beq.n	800e6b4 <tcpAccept+0x88>
         *clientPort = queueItem->srcPort;
 800e6ae:	8bab      	ldrh	r3, [r5, #28]
 800e6b0:	f8a8 3000 	strh.w	r3, [r8]
      newSocket = socketAllocate(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 800e6b4:	2106      	movs	r1, #6
 800e6b6:	2001      	movs	r0, #1
 800e6b8:	f7ff f8c8 	bl	800d84c <socketAllocate>
      if(newSocket != NULL)
 800e6bc:	4604      	mov	r4, r0
 800e6be:	2800      	cmp	r0, #0
 800e6c0:	d0d9      	beq.n	800e676 <tcpAccept+0x4a>
         newSocket->ownedFlag = TRUE;
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	6783      	str	r3, [r0, #120]	@ 0x78
         newSocket->mss = socket->mss;
 800e6c6:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 800e6ca:	f8a0 3084 	strh.w	r3, [r0, #132]	@ 0x84
         newSocket->txBufferSize = socket->txBufferSize;
 800e6ce:	f8d6 1190 	ldr.w	r1, [r6, #400]	@ 0x190
 800e6d2:	f8c0 1190 	str.w	r1, [r0, #400]	@ 0x190
         newSocket->rxBufferSize = socket->rxBufferSize;
 800e6d6:	f8d6 3214 	ldr.w	r3, [r6, #532]	@ 0x214
 800e6da:	f8c0 3214 	str.w	r3, [r0, #532]	@ 0x214
         newSocket->txBuffer.maxChunkCount = arraysize(newSocket->txBuffer.chunk);
 800e6de:	230f      	movs	r3, #15
 800e6e0:	f8c0 3114 	str.w	r3, [r0, #276]	@ 0x114
         newSocket->rxBuffer.maxChunkCount = arraysize(newSocket->rxBuffer.chunk);
 800e6e4:	f8c0 3198 	str.w	r3, [r0, #408]	@ 0x198
         error = netBufferSetLength((NetBuffer *) &newSocket->txBuffer,
 800e6e8:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800e6ec:	f7fd fcd1 	bl	800c092 <netBufferSetLength>
         if(!error)
 800e6f0:	2800      	cmp	r0, #0
 800e6f2:	d1bd      	bne.n	800e670 <tcpAccept+0x44>
            error = netBufferSetLength((NetBuffer *) &newSocket->rxBuffer,
 800e6f4:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800e6f8:	f504 70ca 	add.w	r0, r4, #404	@ 0x194
 800e6fc:	f7fd fcc9 	bl	800c092 <netBufferSetLength>
         if(!error)
 800e700:	2800      	cmp	r0, #0
 800e702:	d1b5      	bne.n	800e670 <tcpAccept+0x44>
            newSocket->interface = queueItem->interface;
 800e704:	686b      	ldr	r3, [r5, #4]
 800e706:	60e3      	str	r3, [r4, #12]
            newSocket->localIpAddr = queueItem->destAddr;
 800e708:	f104 0c10 	add.w	ip, r4, #16
 800e70c:	f105 0e20 	add.w	lr, r5, #32
 800e710:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e714:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e718:	f8de 3000 	ldr.w	r3, [lr]
 800e71c:	f8cc 3000 	str.w	r3, [ip]
            newSocket->localPort = socket->localPort;
 800e720:	f8b6 9024 	ldrh.w	r9, [r6, #36]	@ 0x24
 800e724:	f8a4 9024 	strh.w	r9, [r4, #36]	@ 0x24
            newSocket->remoteIpAddr = queueItem->srcAddr;
 800e728:	f104 0c28 	add.w	ip, r4, #40	@ 0x28
 800e72c:	f105 0e08 	add.w	lr, r5, #8
 800e730:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e734:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e738:	f8de 3000 	ldr.w	r3, [lr]
 800e73c:	f8cc 3000 	str.w	r3, [ip]
            newSocket->remotePort = queueItem->srcPort;
 800e740:	8bab      	ldrh	r3, [r5, #28]
 800e742:	87a3      	strh	r3, [r4, #60]	@ 0x3c
            newSocket->smss = queueItem->mss;
 800e744:	8f2a      	ldrh	r2, [r5, #56]	@ 0x38
 800e746:	f8a4 2086 	strh.w	r2, [r4, #134]	@ 0x86
            newSocket->rmss = MIN(newSocket->mss, newSocket->rxBufferSize);
 800e74a:	f8d4 1214 	ldr.w	r1, [r4, #532]	@ 0x214
 800e74e:	f8b4 2084 	ldrh.w	r2, [r4, #132]	@ 0x84
 800e752:	428a      	cmp	r2, r1
 800e754:	bf28      	it	cs
 800e756:	460a      	movcs	r2, r1
 800e758:	f8a4 2088 	strh.w	r2, [r4, #136]	@ 0x88
            newSocket->iss = tcpGenerateInitialSeqNum(&newSocket->localIpAddr,
 800e75c:	f104 0228 	add.w	r2, r4, #40	@ 0x28
 800e760:	4649      	mov	r1, r9
 800e762:	f104 0010 	add.w	r0, r4, #16
 800e766:	f000 fec9 	bl	800f4fc <tcpGenerateInitialSeqNum>
 800e76a:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
            newSocket->irs = queueItem->isn;
 800e76e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800e770:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
            newSocket->sndUna = newSocket->iss;
 800e774:	f8c4 0094 	str.w	r0, [r4, #148]	@ 0x94
            newSocket->sndNxt = newSocket->iss + 1;
 800e778:	1c42      	adds	r2, r0, #1
 800e77a:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
            newSocket->rcvNxt = newSocket->irs + 1;
 800e77e:	3301      	adds	r3, #1
 800e780:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
            newSocket->rcvUser = 0;
 800e784:	f04f 0900 	mov.w	r9, #0
 800e788:	f8c4 90b4 	str.w	r9, [r4, #180]	@ 0xb4
            newSocket->rcvWnd = newSocket->rxBufferSize;
 800e78c:	f8d4 3214 	ldr.w	r3, [r4, #532]	@ 0x214
 800e790:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
            newSocket->rto = newSocket->interface->initialRto;
 800e794:	68e3      	ldr	r3, [r4, #12]
 800e796:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e798:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
            newSocket->congestState = TCP_CONGEST_STATE_IDLE;
 800e79c:	f884 90d4 	strb.w	r9, [r4, #212]	@ 0xd4
            newSocket->cwnd = MIN((uint32_t) newSocket->smss * TCP_INITIAL_WINDOW,
 800e7a0:	f8d4 2190 	ldr.w	r2, [r4, #400]	@ 0x190
 800e7a4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 800e7a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e7ac:	4293      	cmp	r3, r2
 800e7ae:	bf28      	it	cs
 800e7b0:	4613      	movcs	r3, r2
 800e7b2:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
            newSocket->ssthresh = UINT32_MAX;
 800e7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ba:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
            newSocket->recover = newSocket->iss;
 800e7be:	f8c4 00e8 	str.w	r0, [r4, #232]	@ 0xe8
            tcpChangeState(newSocket, TCP_STATE_SYN_RECEIVED);
 800e7c2:	2103      	movs	r1, #3
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f001 f902 	bl	800f9ce <tcpChangeState>
            error = tcpSendSegment(newSocket, TCP_FLAG_SYN | TCP_FLAG_ACK,
 800e7ca:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800e7ce:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800e7d2:	2101      	movs	r1, #1
 800e7d4:	9101      	str	r1, [sp, #4]
 800e7d6:	f8cd 9000 	str.w	r9, [sp]
 800e7da:	2112      	movs	r1, #18
 800e7dc:	4620      	mov	r0, r4
 800e7de:	f001 f989 	bl	800faf4 <tcpSendSegment>
            if(!error)
 800e7e2:	2800      	cmp	r0, #0
 800e7e4:	f47f af44 	bne.w	800e670 <tcpAccept+0x44>
               socket->synQueue = queueItem->next;
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	f8c6 322c 	str.w	r3, [r6, #556]	@ 0x22c
               memPoolFree(queueItem);
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	f7fd fc3e 	bl	800c070 <memPoolFree>
               tcpUpdateEvents(socket);
 800e7f4:	4630      	mov	r0, r6
 800e7f6:	f001 f84f 	bl	800f898 <tcpUpdateEvents>
      newSocket = socketAllocate(SOCKET_TYPE_STREAM, SOCKET_IP_PROTO_TCP);
 800e7fa:	4625      	mov	r5, r4
   osReleaseMutex(&netMutex);
 800e7fc:	4804      	ldr	r0, [pc, #16]	@ (800e810 <tcpAccept+0x1e4>)
 800e7fe:	f7f1 fff5 	bl	80007ec <osReleaseMutex>
}
 800e802:	4628      	mov	r0, r5
 800e804:	b003      	add	sp, #12
 800e806:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return NULL;
 800e80a:	2500      	movs	r5, #0
 800e80c:	e7f9      	b.n	800e802 <tcpAccept+0x1d6>
 800e80e:	bf00      	nop
 800e810:	20000b50 	.word	0x20000b50

0800e814 <tcpKillOldestConnection>:
 * @return Handle identifying the oldest TCP connection in the TIME-WAIT state.
 *   NULL is returned if no socket is currently in the TIME-WAIT state
 **/

Socket *tcpKillOldestConnection(void)
{
 800e814:	b510      	push	{r4, lr}
   systime_t time;
   Socket *socket;
   Socket *oldestSocket;

   //Get current time
   time = osGetSystemTime();
 800e816:	f7f1 fff1 	bl	80007fc <osGetSystemTime>

   //Keep track of the oldest socket in the TIME-WAIT state
   oldestSocket = NULL;
 800e81a:	2400      	movs	r4, #0

   //Loop through socket descriptors
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800e81c:	4623      	mov	r3, r4
 800e81e:	e002      	b.n	800e826 <tcpKillOldestConnection+0x12>
         {
            //Keep track of the oldest socket in the TIME-WAIT state
            if(oldestSocket == NULL)
            {
               //Save socket handle
               oldestSocket = socket;
 800e820:	4614      	mov	r4, r2
 800e822:	e010      	b.n	800e846 <tcpKillOldestConnection+0x32>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800e824:	3301      	adds	r3, #1
 800e826:	2b09      	cmp	r3, #9
 800e828:	d81d      	bhi.n	800e866 <tcpKillOldestConnection+0x52>
      socket = &socketTable[i];
 800e82a:	f44f 711c 	mov.w	r1, #624	@ 0x270
 800e82e:	4a14      	ldr	r2, [pc, #80]	@ (800e880 <tcpKillOldestConnection+0x6c>)
 800e830:	fb01 2203 	mla	r2, r1, r3, r2
      if(socket->type == SOCKET_TYPE_STREAM)
 800e834:	6851      	ldr	r1, [r2, #4]
 800e836:	2901      	cmp	r1, #1
 800e838:	d1f4      	bne.n	800e824 <tcpKillOldestConnection+0x10>
         if(socket->state == TCP_STATE_TIME_WAIT)
 800e83a:	f892 1074 	ldrb.w	r1, [r2, #116]	@ 0x74
 800e83e:	290a      	cmp	r1, #10
 800e840:	d1f0      	bne.n	800e824 <tcpKillOldestConnection+0x10>
            if(oldestSocket == NULL)
 800e842:	2c00      	cmp	r4, #0
 800e844:	d0ec      	beq.n	800e820 <tcpKillOldestConnection+0xc>
            }
            if((time - socket->timeWaitTimer.startTime) >
 800e846:	490e      	ldr	r1, [pc, #56]	@ (800e880 <tcpKillOldestConnection+0x6c>)
 800e848:	f44f 7c1c 	mov.w	ip, #624	@ 0x270
 800e84c:	fb0c 1103 	mla	r1, ip, r3, r1
 800e850:	f8d1 1264 	ldr.w	r1, [r1, #612]	@ 0x264
 800e854:	eba0 0c01 	sub.w	ip, r0, r1
               (time - oldestSocket->timeWaitTimer.startTime))
 800e858:	f8d4 1264 	ldr.w	r1, [r4, #612]	@ 0x264
 800e85c:	1a41      	subs	r1, r0, r1
            if((time - socket->timeWaitTimer.startTime) >
 800e85e:	458c      	cmp	ip, r1
 800e860:	d9e0      	bls.n	800e824 <tcpKillOldestConnection+0x10>
            {
               //Save socket handle
               oldestSocket = socket;
 800e862:	4614      	mov	r4, r2
 800e864:	e7de      	b.n	800e824 <tcpKillOldestConnection+0x10>
         }
      }
   }

   //Any connection in the TIME-WAIT state?
   if(oldestSocket != NULL)
 800e866:	b144      	cbz	r4, 800e87a <tcpKillOldestConnection+0x66>
   {
      //Enter CLOSED state
      tcpChangeState(oldestSocket, TCP_STATE_CLOSED);
 800e868:	2100      	movs	r1, #0
 800e86a:	4620      	mov	r0, r4
 800e86c:	f001 f8af 	bl	800f9ce <tcpChangeState>
      //Delete TCB
      tcpDeleteControlBlock(oldestSocket);
 800e870:	4620      	mov	r0, r4
 800e872:	f000 ff12 	bl	800f69a <tcpDeleteControlBlock>
      //Mark the socket as closed
      oldestSocket->type = SOCKET_TYPE_UNUSED;
 800e876:	2300      	movs	r3, #0
 800e878:	6063      	str	r3, [r4, #4]
   }

   //The oldest connection in the TIME-WAIT state can be reused
   //when the socket table runs out of space
   return oldestSocket;
}
 800e87a:	4620      	mov	r0, r4
 800e87c:	bd10      	pop	{r4, pc}
 800e87e:	bf00      	nop
 800e880:	20001ef8 	.word	0x20001ef8

0800e884 <tcpStateClosed>:
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSED state\r\n");

   //An incoming segment not containing a RST causes a reset to be sent in
   //response
   if((segment->flags & TCP_FLAG_RST) == 0)
 800e884:	f892 c00d 	ldrb.w	ip, [r2, #13]
 800e888:	f01c 0f04 	tst.w	ip, #4
 800e88c:	d000      	beq.n	800e890 <tcpStateClosed+0xc>
 800e88e:	4770      	bx	lr
{
 800e890:	b508      	push	{r3, lr}
   {
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 800e892:	f000 fd07 	bl	800f2a4 <tcpRejectSegment>
   }
}
 800e896:	bd08      	pop	{r3, pc}

0800e898 <tcpStateListen>:
 * @param[in] length Length of the segment data
 **/

void tcpStateListen(Socket *socket, NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const TcpHeader *segment, size_t length)
{
 800e898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e89c:	461c      	mov	r4, r3

   //Debug message
   TRACE_DEBUG("TCP FSM: LISTEN state\r\n");

   //An incoming RST should be ignored
   if((segment->flags & TCP_FLAG_RST) != 0)
 800e89e:	7b5b      	ldrb	r3, [r3, #13]
 800e8a0:	f013 0f04 	tst.w	r3, #4
 800e8a4:	d10a      	bne.n	800e8bc <tcpStateListen+0x24>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	460f      	mov	r7, r1
 800e8aa:	4615      	mov	r5, r2
 800e8ac:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
      return;

   //Any acknowledgment is bad if it arrives on a connection still in the
   //LISTEN state
   if((segment->flags & TCP_FLAG_ACK) != 0)
 800e8b0:	f012 0f10 	tst.w	r2, #16
 800e8b4:	d104      	bne.n	800e8c0 <tcpStateListen+0x28>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 800e8b6:	f012 0f02 	tst.w	r2, #2
 800e8ba:	d108      	bne.n	800e8ce <tcpStateListen+0x36>
      tcpUpdateEvents(socket);

      //The rest of the processing described in RFC 793 will be done
      //asynchronously when socketAccept() function is called
   }
}
 800e8bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      tcpRejectSegment(interface, pseudoHeader, segment, length);
 800e8c0:	9b08      	ldr	r3, [sp, #32]
 800e8c2:	4622      	mov	r2, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	4638      	mov	r0, r7
 800e8c8:	f000 fcec 	bl	800f2a4 <tcpRejectSegment>
      return;
 800e8cc:	e7f6      	b.n	800e8bc <tcpStateListen+0x24>
      if(tcpIsDuplicateSyn(socket, pseudoHeader, segment))
 800e8ce:	4622      	mov	r2, r4
 800e8d0:	4629      	mov	r1, r5
 800e8d2:	f000 fe17 	bl	800f504 <tcpIsDuplicateSyn>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d1f0      	bne.n	800e8bc <tcpStateListen+0x24>
      if(socket->synQueue != NULL)
 800e8da:	f8d6 022c 	ldr.w	r0, [r6, #556]	@ 0x22c
 800e8de:	b150      	cbz	r0, 800e8f6 <tcpStateListen+0x5e>
         queueItem = socket->synQueue;
 800e8e0:	4603      	mov	r3, r0
         for(i = 1; queueItem->next != NULL; i++)
 800e8e2:	2201      	movs	r2, #1
 800e8e4:	e000      	b.n	800e8e8 <tcpStateListen+0x50>
 800e8e6:	3201      	adds	r2, #1
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d1fb      	bne.n	800e8e6 <tcpStateListen+0x4e>
         if(i >= socket->synQueueSize)
 800e8ee:	f8d6 3230 	ldr.w	r3, [r6, #560]	@ 0x230
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d928      	bls.n	800e948 <tcpStateListen+0xb0>
      if(socket->synQueue == NULL)
 800e8f6:	f8d6 322c 	ldr.w	r3, [r6, #556]	@ 0x22c
 800e8fa:	b35b      	cbz	r3, 800e954 <tcpStateListen+0xbc>
         for(i = 1; queueItem->next != NULL; i++)
 800e8fc:	4699      	mov	r9, r3
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d1fb      	bne.n	800e8fc <tcpStateListen+0x64>
         queueItem->next = memPoolAlloc(sizeof(TcpSynQueueItem));
 800e904:	203c      	movs	r0, #60	@ 0x3c
 800e906:	f7fd fb9b 	bl	800c040 <memPoolAlloc>
 800e90a:	4680      	mov	r8, r0
 800e90c:	f8c9 0000 	str.w	r0, [r9]
      if(queueItem == NULL)
 800e910:	f1b8 0f00 	cmp.w	r8, #0
 800e914:	d0d2      	beq.n	800e8bc <tcpStateListen+0x24>
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800e916:	682b      	ldr	r3, [r5, #0]
 800e918:	2b0c      	cmp	r3, #12
 800e91a:	d022      	beq.n	800e962 <tcpStateListen+0xca>
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800e91c:	2b28      	cmp	r3, #40	@ 0x28
 800e91e:	d1cd      	bne.n	800e8bc <tcpStateListen+0x24>
         queueItem->srcAddr.length = sizeof(Ipv6Addr);
 800e920:	f04f 0e10 	mov.w	lr, #16
 800e924:	f8c8 e008 	str.w	lr, [r8, #8]
         queueItem->srcAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 800e928:	f108 0c0c 	add.w	ip, r8, #12
 800e92c:	1d2b      	adds	r3, r5, #4
 800e92e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e930:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
         queueItem->destAddr.length = sizeof(Ipv6Addr);
 800e934:	f8c8 e020 	str.w	lr, [r8, #32]
         queueItem->destAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
 800e938:	f108 0c24 	add.w	ip, r8, #36	@ 0x24
 800e93c:	3514      	adds	r5, #20
 800e93e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e942:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 800e946:	e017      	b.n	800e978 <tcpStateListen+0xe0>
            socket->synQueue = queueItem->next;
 800e948:	6803      	ldr	r3, [r0, #0]
 800e94a:	f8c6 322c 	str.w	r3, [r6, #556]	@ 0x22c
            memPoolFree(queueItem);
 800e94e:	f7fd fb8f 	bl	800c070 <memPoolFree>
 800e952:	e7d0      	b.n	800e8f6 <tcpStateListen+0x5e>
         queueItem = memPoolAlloc(sizeof(TcpSynQueueItem));
 800e954:	203c      	movs	r0, #60	@ 0x3c
 800e956:	f7fd fb73 	bl	800c040 <memPoolAlloc>
 800e95a:	4680      	mov	r8, r0
         socket->synQueue = queueItem;
 800e95c:	f8c6 022c 	str.w	r0, [r6, #556]	@ 0x22c
 800e960:	e7d6      	b.n	800e910 <tcpStateListen+0x78>
         queueItem->srcAddr.length = sizeof(Ipv4Addr);
 800e962:	2304      	movs	r3, #4
 800e964:	f8c8 3008 	str.w	r3, [r8, #8]
         queueItem->srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 800e968:	686a      	ldr	r2, [r5, #4]
 800e96a:	f8c8 200c 	str.w	r2, [r8, #12]
         queueItem->destAddr.length = sizeof(Ipv4Addr);
 800e96e:	f8c8 3020 	str.w	r3, [r8, #32]
         queueItem->destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 800e972:	68ab      	ldr	r3, [r5, #8]
 800e974:	f8c8 3024 	str.w	r3, [r8, #36]	@ 0x24
      queueItem->next = NULL;
 800e978:	2300      	movs	r3, #0
 800e97a:	f8c8 3000 	str.w	r3, [r8]
      queueItem->interface = interface;
 800e97e:	f8c8 7004 	str.w	r7, [r8, #4]
      queueItem->srcPort = segment->srcPort;
 800e982:	8823      	ldrh	r3, [r4, #0]
 800e984:	f8a8 301c 	strh.w	r3, [r8, #28]
      queueItem->isn = segment->seqNum;
 800e988:	6863      	ldr	r3, [r4, #4]
 800e98a:	f8c8 3034 	str.w	r3, [r8, #52]	@ 0x34
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 800e98e:	2102      	movs	r1, #2
 800e990:	4620      	mov	r0, r4
 800e992:	f000 fd81 	bl	800f498 <tcpGetOption>
      if(option != NULL && option->length == 4)
 800e996:	b110      	cbz	r0, 800e99e <tcpStateListen+0x106>
 800e998:	7842      	ldrb	r2, [r0, #1]
 800e99a:	2a04      	cmp	r2, #4
 800e99c:	d00c      	beq.n	800e9b8 <tcpStateListen+0x120>
         queueItem->mss = MIN(socket->mss, TCP_DEFAULT_MSS);
 800e99e:	f8b6 3084 	ldrh.w	r3, [r6, #132]	@ 0x84
 800e9a2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800e9a6:	bf28      	it	cs
 800e9a8:	f44f 7306 	movcs.w	r3, #536	@ 0x218
 800e9ac:	f8a8 3038 	strh.w	r3, [r8, #56]	@ 0x38
      tcpUpdateEvents(socket);
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	f000 ff71 	bl	800f898 <tcpUpdateEvents>
 800e9b6:	e781      	b.n	800e8bc <tcpStateListen+0x24>
         queueItem->mss = LOAD16BE(option->value);
 800e9b8:	7882      	ldrb	r2, [r0, #2]
 800e9ba:	78c3      	ldrb	r3, [r0, #3]
 800e9bc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800e9c0:	f8a8 3038 	strh.w	r3, [r8, #56]	@ 0x38
         queueItem->mss = MIN(queueItem->mss, socket->mss);
 800e9c4:	f8b6 2084 	ldrh.w	r2, [r6, #132]	@ 0x84
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	bf28      	it	cs
 800e9cc:	4613      	movcs	r3, r2
 800e9ce:	f8a8 3038 	strh.w	r3, [r8, #56]	@ 0x38
         queueItem->mss = MAX(queueItem->mss, TCP_MIN_MSS);
 800e9d2:	2b40      	cmp	r3, #64	@ 0x40
 800e9d4:	bf38      	it	cc
 800e9d6:	2340      	movcc	r3, #64	@ 0x40
 800e9d8:	f8a8 3038 	strh.w	r3, [r8, #56]	@ 0x38
 800e9dc:	e7e8      	b.n	800e9b0 <tcpStateListen+0x118>

0800e9de <tcpStateSynSent>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateSynSent(Socket *socket, const TcpHeader *segment, size_t length)
{
 800e9de:	b530      	push	{r4, r5, lr}
 800e9e0:	b083      	sub	sp, #12
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	460d      	mov	r5, r1

   //Debug message
   TRACE_DEBUG("TCP FSM: SYN-SENT state\r\n");

   //Check the ACK bit
   if((segment->flags & TCP_FLAG_ACK) != 0)
 800e9e6:	7b4b      	ldrb	r3, [r1, #13]
 800e9e8:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e9ec:	f013 0310 	ands.w	r3, r3, #16
 800e9f0:	d00b      	beq.n	800ea0a <tcpStateSynSent+0x2c>
   {
      //Make sure the acknowledgment number is valid
      if(segment->ackNum != socket->sndNxt)
 800e9f2:	6889      	ldr	r1, [r1, #8]
 800e9f4:	f8d0 0098 	ldr.w	r0, [r0, #152]	@ 0x98
 800e9f8:	4281      	cmp	r1, r0
 800e9fa:	d006      	beq.n	800ea0a <tcpStateSynSent+0x2c>
      {
         //Send a reset segment unless the RST bit is set
         if((segment->flags & TCP_FLAG_RST) == 0)
 800e9fc:	f012 0f04 	tst.w	r2, #4
 800ea00:	d154      	bne.n	800eaac <tcpStateSynSent+0xce>
         {
            tcpSendResetSegment(socket, segment->ackNum);
 800ea02:	4620      	mov	r0, r4
 800ea04:	f001 f9c4 	bl	800fd90 <tcpSendResetSegment>
         }

         //Drop the segment and return
         return;
 800ea08:	e050      	b.n	800eaac <tcpStateSynSent+0xce>
      }
   }

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800ea0a:	f012 0f04 	tst.w	r2, #4
 800ea0e:	d14c      	bne.n	800eaaa <tcpStateSynSent+0xcc>
      //Drop the segment and return
      return;
   }

   //Check the SYN bit
   if((segment->flags & TCP_FLAG_SYN) != 0)
 800ea10:	f012 0f02 	tst.w	r2, #2
 800ea14:	d04a      	beq.n	800eaac <tcpStateSynSent+0xce>
   {
      //Save initial receive sequence number
      socket->irs = segment->seqNum;
 800ea16:	686b      	ldr	r3, [r5, #4]
 800ea18:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
      //Initialize RCV.NXT pointer
      socket->rcvNxt = segment->seqNum + 1;
 800ea1c:	686b      	ldr	r3, [r5, #4]
 800ea1e:	3301      	adds	r3, #1
 800ea20:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0

      //If there is an ACK, SND.UNA should be advanced to equal SEG.ACK
      if((segment->flags & TCP_FLAG_ACK) != 0)
 800ea24:	7b6b      	ldrb	r3, [r5, #13]
 800ea26:	f013 0f10 	tst.w	r3, #16
 800ea2a:	d002      	beq.n	800ea32 <tcpStateSynSent+0x54>
      {
         socket->sndUna = segment->ackNum;
 800ea2c:	68ab      	ldr	r3, [r5, #8]
 800ea2e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      }

      //Compute retransmission timeout
      tcpComputeRto(socket);
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fee2 	bl	800f7fc <tcpComputeRto>

      //Any segments on the retransmission queue which are thereby acknowledged
      //should be removed
      tcpUpdateRetransmitQueue(socket);
 800ea38:	4620      	mov	r0, r4
 800ea3a:	f000 fdc2 	bl	800f5c2 <tcpUpdateRetransmitQueue>

      //Get the Maximum Segment Size option
      option = tcpGetOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE);
 800ea3e:	2102      	movs	r1, #2
 800ea40:	4628      	mov	r0, r5
 800ea42:	f000 fd29 	bl	800f498 <tcpGetOption>

      //Specified option found?
      if(option != NULL && option->length == 4)
 800ea46:	b110      	cbz	r0, 800ea4e <tcpStateSynSent+0x70>
 800ea48:	7842      	ldrb	r2, [r0, #1]
 800ea4a:	2a04      	cmp	r2, #4
 800ea4c:	d035      	beq.n	800eaba <tcpStateSynSent+0xdc>
      }
#endif

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
      //Initial congestion window
      socket->cwnd = MIN((uint32_t) socket->smss * TCP_INITIAL_WINDOW,
 800ea4e:	f8d4 2190 	ldr.w	r2, [r4, #400]	@ 0x190
 800ea52:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 800ea56:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800ea5a:	4293      	cmp	r3, r2
 800ea5c:	bf28      	it	cs
 800ea5e:	4613      	movcs	r3, r2
 800ea60:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
         socket->txBufferSize);
#endif

      //Check whether our SYN has been acknowledged (SND.UNA > ISS)
      if(TCP_CMP_SEQ(socket->sndUna, socket->iss) > 0)
 800ea64:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800ea68:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 800ea6c:	1a9b      	subs	r3, r3, r2
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	dd36      	ble.n	800eae0 <tcpStateSynSent+0x102>
      {
         //Update the send window before entering ESTABLISHED state (refer to
         //RFC 1122, section 4.2.2.20)
         socket->sndWnd = segment->window;
 800ea72:	89eb      	ldrh	r3, [r5, #14]
 800ea74:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
         socket->sndWl1 = segment->seqNum;
 800ea78:	686b      	ldr	r3, [r5, #4]
 800ea7a:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
         socket->sndWl2 = segment->ackNum;
 800ea7e:	68ab      	ldr	r3, [r5, #8]
 800ea80:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac

         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = segment->window;
 800ea84:	89eb      	ldrh	r3, [r5, #14]
 800ea86:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4

         //Form an ACK segment and send it
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	9301      	str	r3, [sp, #4]
 800ea8e:	9300      	str	r3, [sp, #0]
 800ea90:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ea94:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800ea98:	2110      	movs	r1, #16
 800ea9a:	4620      	mov	r0, r4
 800ea9c:	f001 f82a 	bl	800faf4 <tcpSendSegment>
            0, FALSE);

         //Switch to the ESTABLISHED state
         tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 800eaa0:	2104      	movs	r1, #4
 800eaa2:	4620      	mov	r0, r4
 800eaa4:	f000 ff93 	bl	800f9ce <tcpChangeState>
 800eaa8:	e000      	b.n	800eaac <tcpStateSynSent+0xce>
      if((segment->flags & TCP_FLAG_ACK) != 0)
 800eaaa:	b90b      	cbnz	r3, 800eab0 <tcpStateSynSent+0xd2>

         //Enter SYN-RECEIVED state
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
      }
   }
}
 800eaac:	b003      	add	sp, #12
 800eaae:	bd30      	pop	{r4, r5, pc}
         tcpChangeState(socket, TCP_STATE_CLOSED);
 800eab0:	2100      	movs	r1, #0
 800eab2:	4620      	mov	r0, r4
 800eab4:	f000 ff8b 	bl	800f9ce <tcpChangeState>
      return;
 800eab8:	e7f8      	b.n	800eaac <tcpStateSynSent+0xce>
         socket->smss = LOAD16BE(option->value);
 800eaba:	7882      	ldrb	r2, [r0, #2]
 800eabc:	78c3      	ldrb	r3, [r0, #3]
 800eabe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800eac2:	f8a4 3086 	strh.w	r3, [r4, #134]	@ 0x86
         socket->smss = MIN(socket->smss, socket->mss);
 800eac6:	f8b4 2084 	ldrh.w	r2, [r4, #132]	@ 0x84
 800eaca:	4293      	cmp	r3, r2
 800eacc:	bf28      	it	cs
 800eace:	4613      	movcs	r3, r2
 800ead0:	f8a4 3086 	strh.w	r3, [r4, #134]	@ 0x86
         socket->smss = MAX(socket->smss, TCP_MIN_MSS);
 800ead4:	2b40      	cmp	r3, #64	@ 0x40
 800ead6:	bf38      	it	cc
 800ead8:	2340      	movcc	r3, #64	@ 0x40
 800eada:	f8a4 3086 	strh.w	r3, [r4, #134]	@ 0x86
 800eade:	e7b6      	b.n	800ea4e <tcpStateSynSent+0x70>
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss,
 800eae0:	2301      	movs	r3, #1
 800eae2:	9301      	str	r3, [sp, #4]
 800eae4:	2300      	movs	r3, #0
 800eae6:	9300      	str	r3, [sp, #0]
 800eae8:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800eaec:	2112      	movs	r1, #18
 800eaee:	4620      	mov	r0, r4
 800eaf0:	f001 f800 	bl	800faf4 <tcpSendSegment>
         tcpChangeState(socket, TCP_STATE_SYN_RECEIVED);
 800eaf4:	2103      	movs	r1, #3
 800eaf6:	4620      	mov	r0, r4
 800eaf8:	f000 ff69 	bl	800f9ce <tcpChangeState>
 800eafc:	e7d6      	b.n	800eaac <tcpStateSynSent+0xce>

0800eafe <tcpStateEstablished>:
 * @param[in] length Length of the segment data
 **/

void tcpStateEstablished(Socket *socket, const TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 800eafe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb02:	b082      	sub	sp, #8
 800eb04:	4605      	mov	r5, r0
 800eb06:	460c      	mov	r4, r1
 800eb08:	4690      	mov	r8, r2
 800eb0a:	461f      	mov	r7, r3
 800eb0c:	9e08      	ldr	r6, [sp, #32]

   //Debug message
   TRACE_DEBUG("TCP FSM: ESTABLISHED state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800eb0e:	4632      	mov	r2, r6
 800eb10:	f001 f95b 	bl	800fdca <tcpCheckSeqNum>
 800eb14:	bb38      	cbnz	r0, 800eb66 <tcpStateEstablished+0x68>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800eb16:	7b63      	ldrb	r3, [r4, #13]
 800eb18:	f013 0f04 	tst.w	r3, #4
 800eb1c:	d11f      	bne.n	800eb5e <tcpStateEstablished+0x60>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800eb1e:	4632      	mov	r2, r6
 800eb20:	4621      	mov	r1, r4
 800eb22:	4628      	mov	r0, r5
 800eb24:	f001 f9a3 	bl	800fe6e <tcpCheckSyn>
 800eb28:	b9e8      	cbnz	r0, 800eb66 <tcpStateEstablished+0x68>
      return;

   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800eb2a:	4632      	mov	r2, r6
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f001 fb7f 	bl	8010232 <tcpCheckAck>
 800eb34:	b9b8      	cbnz	r0, 800eb66 <tcpStateEstablished+0x68>
      return;

   //Process the segment text
   if(length > 0)
 800eb36:	b9ce      	cbnz	r6, 800eb6c <tcpStateEstablished+0x6e>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800eb38:	7b63      	ldrb	r3, [r4, #13]
 800eb3a:	f013 0f01 	tst.w	r3, #1
 800eb3e:	d005      	beq.n	800eb4c <tcpStateEstablished+0x4e>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800eb40:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 800eb44:	6863      	ldr	r3, [r4, #4]
 800eb46:	4433      	add	r3, r6
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d017      	beq.n	800eb7c <tcpStateEstablished+0x7e>
      }
   }

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 800eb4c:	f8d5 10e0 	ldr.w	r1, [r5, #224]	@ 0xe0
 800eb50:	b109      	cbz	r1, 800eb56 <tcpStateEstablished+0x58>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 800eb52:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
   }
#endif

   //The Nagle algorithm should be implemented to coalesce short segments (refer
   //to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 800eb56:	4628      	mov	r0, r5
 800eb58:	f001 f9cb 	bl	800fef2 <tcpNagleAlgo>
 800eb5c:	e003      	b.n	800eb66 <tcpStateEstablished+0x68>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800eb5e:	2100      	movs	r1, #0
 800eb60:	4628      	mov	r0, r5
 800eb62:	f000 ff34 	bl	800f9ce <tcpChangeState>
}
 800eb66:	b002      	add	sp, #8
 800eb68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800eb6c:	9600      	str	r6, [sp, #0]
 800eb6e:	463b      	mov	r3, r7
 800eb70:	4642      	mov	r2, r8
 800eb72:	4621      	mov	r1, r4
 800eb74:	4628      	mov	r0, r5
 800eb76:	f001 fc63 	bl	8010440 <tcpProcessSegmentData>
 800eb7a:	e7dd      	b.n	800eb38 <tcpStateEstablished+0x3a>
         socket->rcvNxt++;
 800eb7c:	1c53      	adds	r3, r2, #1
 800eb7e:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800eb82:	2200      	movs	r2, #0
 800eb84:	9201      	str	r2, [sp, #4]
 800eb86:	9200      	str	r2, [sp, #0]
 800eb88:	f8d5 2098 	ldr.w	r2, [r5, #152]	@ 0x98
 800eb8c:	2110      	movs	r1, #16
 800eb8e:	4628      	mov	r0, r5
 800eb90:	f000 ffb0 	bl	800faf4 <tcpSendSegment>
         tcpChangeState(socket, TCP_STATE_CLOSE_WAIT);
 800eb94:	2105      	movs	r1, #5
 800eb96:	4628      	mov	r0, r5
 800eb98:	f000 ff19 	bl	800f9ce <tcpChangeState>
 800eb9c:	e7d6      	b.n	800eb4c <tcpStateEstablished+0x4e>

0800eb9e <tcpStateSynReceived>:
{
 800eb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eba2:	b088      	sub	sp, #32
 800eba4:	4605      	mov	r5, r0
 800eba6:	460c      	mov	r4, r1
 800eba8:	4617      	mov	r7, r2
 800ebaa:	4698      	mov	r8, r3
 800ebac:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
   segment2 = *segment;
 800ebae:	f10d 0c0c 	add.w	ip, sp, #12
 800ebb2:	6808      	ldr	r0, [r1, #0]
 800ebb4:	6849      	ldr	r1, [r1, #4]
 800ebb6:	68a2      	ldr	r2, [r4, #8]
 800ebb8:	68e3      	ldr	r3, [r4, #12]
 800ebba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebbe:	6920      	ldr	r0, [r4, #16]
 800ebc0:	f8cc 0000 	str.w	r0, [ip]
   segment2.dataOffset = sizeof(TcpHeader) / 4;
 800ebc4:	f89d 3018 	ldrb.w	r3, [sp, #24]
 800ebc8:	2205      	movs	r2, #5
 800ebca:	f362 1307 	bfi	r3, r2, #4, #4
 800ebce:	f88d 3018 	strb.w	r3, [sp, #24]
   if((segment->flags & TCP_FLAG_SYN) != 0 &&
 800ebd2:	7b63      	ldrb	r3, [r4, #13]
 800ebd4:	f013 0f02 	tst.w	r3, #2
 800ebd8:	d006      	beq.n	800ebe8 <tcpStateSynReceived+0x4a>
 800ebda:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
      segment->seqNum == socket->irs)
 800ebde:	6862      	ldr	r2, [r4, #4]
 800ebe0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
   if((segment->flags & TCP_FLAG_SYN) != 0 &&
 800ebe4:	429a      	cmp	r2, r3
 800ebe6:	d01c      	beq.n	800ec22 <tcpStateSynReceived+0x84>
   if(tcpCheckSeqNum(socket, &segment2, length))
 800ebe8:	4632      	mov	r2, r6
 800ebea:	a903      	add	r1, sp, #12
 800ebec:	4628      	mov	r0, r5
 800ebee:	f001 f8ec 	bl	800fdca <tcpCheckSeqNum>
 800ebf2:	bba8      	cbnz	r0, 800ec60 <tcpStateSynReceived+0xc2>
   if((segment->flags & TCP_FLAG_RST) != 0)
 800ebf4:	7b63      	ldrb	r3, [r4, #13]
 800ebf6:	f013 0f04 	tst.w	r3, #4
 800ebfa:	d12d      	bne.n	800ec58 <tcpStateSynReceived+0xba>
   if(tcpCheckSyn(socket, &segment2, length))
 800ebfc:	4632      	mov	r2, r6
 800ebfe:	a903      	add	r1, sp, #12
 800ec00:	4628      	mov	r0, r5
 800ec02:	f001 f934 	bl	800fe6e <tcpCheckSyn>
 800ec06:	bb58      	cbnz	r0, 800ec60 <tcpStateSynReceived+0xc2>
   if((segment->flags & TCP_FLAG_ACK) == 0)
 800ec08:	7b63      	ldrb	r3, [r4, #13]
 800ec0a:	f013 0f10 	tst.w	r3, #16
 800ec0e:	d027      	beq.n	800ec60 <tcpStateSynReceived+0xc2>
   if(segment->ackNum != socket->sndNxt)
 800ec10:	68a1      	ldr	r1, [r4, #8]
 800ec12:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ec16:	4299      	cmp	r1, r3
 800ec18:	d025      	beq.n	800ec66 <tcpStateSynReceived+0xc8>
      tcpSendResetSegment(socket, segment->ackNum);
 800ec1a:	4628      	mov	r0, r5
 800ec1c:	f001 f8b8 	bl	800fd90 <tcpSendResetSegment>
      return;
 800ec20:	e01e      	b.n	800ec60 <tcpStateSynReceived+0xc2>
      if((segment->flags & TCP_FLAG_ACK) != 0)
 800ec22:	f011 0f10 	tst.w	r1, #16
 800ec26:	d00b      	beq.n	800ec40 <tcpStateSynReceived+0xa2>
         segment2.flags &= ~TCP_FLAG_SYN;
 800ec28:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ec2c:	f003 023d 	and.w	r2, r3, #61	@ 0x3d
 800ec30:	f362 0305 	bfi	r3, r2, #0, #6
 800ec34:	f88d 3019 	strb.w	r3, [sp, #25]
         segment2.seqNum++;
 800ec38:	9b04      	ldr	r3, [sp, #16]
 800ec3a:	3301      	adds	r3, #1
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	e7d3      	b.n	800ebe8 <tcpStateSynReceived+0x4a>
         tcpSendSegment(socket, TCP_FLAG_SYN | TCP_FLAG_ACK, socket->iss,
 800ec40:	2300      	movs	r3, #0
 800ec42:	9301      	str	r3, [sp, #4]
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800ec4a:	f8d5 208c 	ldr.w	r2, [r5, #140]	@ 0x8c
 800ec4e:	2112      	movs	r1, #18
 800ec50:	4628      	mov	r0, r5
 800ec52:	f000 ff4f 	bl	800faf4 <tcpSendSegment>
         return;
 800ec56:	e003      	b.n	800ec60 <tcpStateSynReceived+0xc2>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800ec58:	2100      	movs	r1, #0
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f000 feb7 	bl	800f9ce <tcpChangeState>
}
 800ec60:	b008      	add	sp, #32
 800ec62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   window = segment->window;
 800ec66:	89e3      	ldrh	r3, [r4, #14]
   socket->sndWnd = window;
 800ec68:	f8c5 30a0 	str.w	r3, [r5, #160]	@ 0xa0
   socket->sndWl1 = segment->seqNum;
 800ec6c:	6862      	ldr	r2, [r4, #4]
 800ec6e:	f8c5 20a8 	str.w	r2, [r5, #168]	@ 0xa8
   socket->sndWl2 = segment->ackNum;
 800ec72:	68a2      	ldr	r2, [r4, #8]
 800ec74:	f8c5 20ac 	str.w	r2, [r5, #172]	@ 0xac
   socket->maxSndWnd = window;
 800ec78:	f8c5 30a4 	str.w	r3, [r5, #164]	@ 0xa4
   tcpChangeState(socket, TCP_STATE_ESTABLISHED);
 800ec7c:	2104      	movs	r1, #4
 800ec7e:	4628      	mov	r0, r5
 800ec80:	f000 fea5 	bl	800f9ce <tcpChangeState>
   tcpStateEstablished(socket, &segment2, buffer, offset, length);
 800ec84:	9600      	str	r6, [sp, #0]
 800ec86:	4643      	mov	r3, r8
 800ec88:	463a      	mov	r2, r7
 800ec8a:	a903      	add	r1, sp, #12
 800ec8c:	4628      	mov	r0, r5
 800ec8e:	f7ff ff36 	bl	800eafe <tcpStateEstablished>
 800ec92:	e7e5      	b.n	800ec60 <tcpStateSynReceived+0xc2>

0800ec94 <tcpStateCloseWait>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateCloseWait(Socket *socket, const TcpHeader *segment, size_t length)
{
 800ec94:	b570      	push	{r4, r5, r6, lr}
 800ec96:	4605      	mov	r5, r0
 800ec98:	460c      	mov	r4, r1
 800ec9a:	4616      	mov	r6, r2

   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSE-WAIT state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800ec9c:	f001 f895 	bl	800fdca <tcpCheckSeqNum>
 800eca0:	b9e0      	cbnz	r0, 800ecdc <tcpStateCloseWait+0x48>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800eca2:	7b63      	ldrb	r3, [r4, #13]
 800eca4:	f013 0f04 	tst.w	r3, #4
 800eca8:	d114      	bne.n	800ecd4 <tcpStateCloseWait+0x40>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800ecaa:	4632      	mov	r2, r6
 800ecac:	4621      	mov	r1, r4
 800ecae:	4628      	mov	r0, r5
 800ecb0:	f001 f8dd 	bl	800fe6e <tcpCheckSyn>
 800ecb4:	b990      	cbnz	r0, 800ecdc <tcpStateCloseWait+0x48>
      return;

   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800ecb6:	4632      	mov	r2, r6
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4628      	mov	r0, r5
 800ecbc:	f001 fab9 	bl	8010232 <tcpCheckAck>
 800ecc0:	b960      	cbnz	r0, 800ecdc <tcpStateCloseWait+0x48>
      return;

#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
   //Duplicate ACK received?
   if(socket->dupAckCount > 0)
 800ecc2:	f8d5 10e0 	ldr.w	r1, [r5, #224]	@ 0xe0
 800ecc6:	b109      	cbz	r1, 800eccc <tcpStateCloseWait+0x38>
   {
      flags = SOCKET_FLAG_NO_DELAY;
 800ecc8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
   }
#endif

   //The Nagle algorithm should be implemented to coalesce short segments (refer
   //to RFC 1122 4.2.3.4)
   tcpNagleAlgo(socket, flags);
 800eccc:	4628      	mov	r0, r5
 800ecce:	f001 f910 	bl	800fef2 <tcpNagleAlgo>
 800ecd2:	e003      	b.n	800ecdc <tcpStateCloseWait+0x48>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800ecd4:	2100      	movs	r1, #0
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	f000 fe79 	bl	800f9ce <tcpChangeState>
}
 800ecdc:	bd70      	pop	{r4, r5, r6, pc}

0800ecde <tcpStateLastAck>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateLastAck(Socket *socket, const TcpHeader *segment, size_t length)
{
 800ecde:	b570      	push	{r4, r5, r6, lr}
 800ece0:	4606      	mov	r6, r0
 800ece2:	460c      	mov	r4, r1
 800ece4:	4615      	mov	r5, r2
   //Debug message
   TRACE_DEBUG("TCP FSM: LAST-ACK state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800ece6:	f001 f870 	bl	800fdca <tcpCheckSeqNum>
 800ecea:	b9d8      	cbnz	r0, 800ed24 <tcpStateLastAck+0x46>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800ecec:	7b63      	ldrb	r3, [r4, #13]
 800ecee:	f013 0f04 	tst.w	r3, #4
 800ecf2:	d113      	bne.n	800ed1c <tcpStateLastAck+0x3e>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800ecf4:	462a      	mov	r2, r5
 800ecf6:	4621      	mov	r1, r4
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	f001 f8b8 	bl	800fe6e <tcpCheckSyn>
 800ecfe:	b988      	cbnz	r0, 800ed24 <tcpStateLastAck+0x46>
      return;

   //If the ACK bit is off drop the segment and return
   if((segment->flags & TCP_FLAG_ACK) == 0)
 800ed00:	7b63      	ldrb	r3, [r4, #13]
 800ed02:	f013 0f10 	tst.w	r3, #16
 800ed06:	d00d      	beq.n	800ed24 <tcpStateLastAck+0x46>
      return;

   //The only thing that can arrive in this state is an acknowledgment of
   //our FIN
   if(segment->ackNum == socket->sndNxt)
 800ed08:	68a2      	ldr	r2, [r4, #8]
 800ed0a:	f8d6 3098 	ldr.w	r3, [r6, #152]	@ 0x98
 800ed0e:	429a      	cmp	r2, r3
 800ed10:	d108      	bne.n	800ed24 <tcpStateLastAck+0x46>
   {
      //Enter CLOSED state
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800ed12:	2100      	movs	r1, #0
 800ed14:	4630      	mov	r0, r6
 800ed16:	f000 fe5a 	bl	800f9ce <tcpChangeState>
 800ed1a:	e003      	b.n	800ed24 <tcpStateLastAck+0x46>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800ed1c:	2100      	movs	r1, #0
 800ed1e:	4630      	mov	r0, r6
 800ed20:	f000 fe55 	bl	800f9ce <tcpChangeState>
   }
}
 800ed24:	bd70      	pop	{r4, r5, r6, pc}

0800ed26 <tcpStateFinWait1>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait1(Socket *socket, const TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 800ed26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	4605      	mov	r5, r0
 800ed2e:	460c      	mov	r4, r1
 800ed30:	4690      	mov	r8, r2
 800ed32:	461f      	mov	r7, r3
 800ed34:	9e08      	ldr	r6, [sp, #32]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-1 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800ed36:	4632      	mov	r2, r6
 800ed38:	f001 f847 	bl	800fdca <tcpCheckSeqNum>
 800ed3c:	bbc8      	cbnz	r0, 800edb2 <tcpStateFinWait1+0x8c>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800ed3e:	7b63      	ldrb	r3, [r4, #13]
 800ed40:	f013 0f04 	tst.w	r3, #4
 800ed44:	d131      	bne.n	800edaa <tcpStateFinWait1+0x84>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800ed46:	4632      	mov	r2, r6
 800ed48:	4621      	mov	r1, r4
 800ed4a:	4628      	mov	r0, r5
 800ed4c:	f001 f88f 	bl	800fe6e <tcpCheckSyn>
 800ed50:	bb78      	cbnz	r0, 800edb2 <tcpStateFinWait1+0x8c>
      return;

   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800ed52:	4632      	mov	r2, r6
 800ed54:	4621      	mov	r1, r4
 800ed56:	4628      	mov	r0, r5
 800ed58:	f001 fa6b 	bl	8010232 <tcpCheckAck>
 800ed5c:	bb48      	cbnz	r0, 800edb2 <tcpStateFinWait1+0x8c>
      return;

   //Check whether our FIN is now acknowledged
   if(segment->ackNum == socket->sndNxt)
 800ed5e:	68a2      	ldr	r2, [r4, #8]
 800ed60:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ed64:	429a      	cmp	r2, r3
 800ed66:	d027      	beq.n	800edb8 <tcpStateFinWait1+0x92>
      //enter FIN-WAIT-2 and continue processing in that state
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
   }

   //Process the segment text
   if(length > 0)
 800ed68:	bb8e      	cbnz	r6, 800edce <tcpStateFinWait1+0xa8>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800ed6a:	7b63      	ldrb	r3, [r4, #13]
 800ed6c:	f013 0f01 	tst.w	r3, #1
 800ed70:	d01f      	beq.n	800edb2 <tcpStateFinWait1+0x8c>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800ed72:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 800ed76:	6863      	ldr	r3, [r4, #4]
 800ed78:	4433      	add	r3, r6
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d119      	bne.n	800edb2 <tcpStateFinWait1+0x8c>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800ed7e:	1c53      	adds	r3, r2, #1
 800ed80:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800ed84:	2200      	movs	r2, #0
 800ed86:	9201      	str	r2, [sp, #4]
 800ed88:	9200      	str	r2, [sp, #0]
 800ed8a:	f8d5 2098 	ldr.w	r2, [r5, #152]	@ 0x98
 800ed8e:	2110      	movs	r1, #16
 800ed90:	4628      	mov	r0, r5
 800ed92:	f000 feaf 	bl	800faf4 <tcpSendSegment>
            FALSE);

         //Check if our FIN has been acknowledged
         if(segment->ackNum == socket->sndNxt)
 800ed96:	68a2      	ldr	r2, [r4, #8]
 800ed98:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d01e      	beq.n	800edde <tcpStateFinWait1+0xb8>
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
         }
         else
         {
            //If our FIN has not been acknowledged, then enter CLOSING state
            tcpChangeState(socket, TCP_STATE_CLOSING);
 800eda0:	2109      	movs	r1, #9
 800eda2:	4628      	mov	r0, r5
 800eda4:	f000 fe13 	bl	800f9ce <tcpChangeState>
 800eda8:	e003      	b.n	800edb2 <tcpStateFinWait1+0x8c>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800edaa:	2100      	movs	r1, #0
 800edac:	4628      	mov	r0, r5
 800edae:	f000 fe0e 	bl	800f9ce <tcpChangeState>
         }
      }
   }
}
 800edb2:	b002      	add	sp, #8
 800edb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netStartTimer(&socket->finWait2Timer, TCP_FIN_WAIT_2_TIMER);
 800edb8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800edbc:	f505 7015 	add.w	r0, r5, #596	@ 0x254
 800edc0:	f7fd fd7c 	bl	800c8bc <netStartTimer>
      tcpChangeState(socket, TCP_STATE_FIN_WAIT_2);
 800edc4:	2108      	movs	r1, #8
 800edc6:	4628      	mov	r0, r5
 800edc8:	f000 fe01 	bl	800f9ce <tcpChangeState>
 800edcc:	e7cc      	b.n	800ed68 <tcpStateFinWait1+0x42>
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800edce:	9600      	str	r6, [sp, #0]
 800edd0:	463b      	mov	r3, r7
 800edd2:	4642      	mov	r2, r8
 800edd4:	4621      	mov	r1, r4
 800edd6:	4628      	mov	r0, r5
 800edd8:	f001 fb32 	bl	8010440 <tcpProcessSegmentData>
 800eddc:	e7c5      	b.n	800ed6a <tcpStateFinWait1+0x44>
            tcpDeleteControlBlock(socket);
 800edde:	4628      	mov	r0, r5
 800ede0:	f000 fc5b 	bl	800f69a <tcpDeleteControlBlock>
            netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800ede4:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800ede8:	f505 7018 	add.w	r0, r5, #608	@ 0x260
 800edec:	f7fd fd66 	bl	800c8bc <netStartTimer>
            tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800edf0:	210a      	movs	r1, #10
 800edf2:	4628      	mov	r0, r5
 800edf4:	f000 fdeb 	bl	800f9ce <tcpChangeState>
 800edf8:	e7db      	b.n	800edb2 <tcpStateFinWait1+0x8c>

0800edfa <tcpStateFinWait2>:
 * @param[in] length Length of the segment data
 **/

void tcpStateFinWait2(Socket *socket, const TcpHeader *segment,
   const NetBuffer *buffer, size_t offset, size_t length)
{
 800edfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfe:	b082      	sub	sp, #8
 800ee00:	4605      	mov	r5, r0
 800ee02:	460c      	mov	r4, r1
 800ee04:	4690      	mov	r8, r2
 800ee06:	461f      	mov	r7, r3
 800ee08:	9e08      	ldr	r6, [sp, #32]
   //Debug message
   TRACE_DEBUG("TCP FSM: FIN-WAIT-2 state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800ee0a:	4632      	mov	r2, r6
 800ee0c:	f000 ffdd 	bl	800fdca <tcpCheckSeqNum>
 800ee10:	bbc0      	cbnz	r0, 800ee84 <tcpStateFinWait2+0x8a>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800ee12:	7b63      	ldrb	r3, [r4, #13]
 800ee14:	f013 0f04 	tst.w	r3, #4
 800ee18:	d130      	bne.n	800ee7c <tcpStateFinWait2+0x82>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800ee1a:	4632      	mov	r2, r6
 800ee1c:	4621      	mov	r1, r4
 800ee1e:	4628      	mov	r0, r5
 800ee20:	f001 f825 	bl	800fe6e <tcpCheckSyn>
 800ee24:	bb70      	cbnz	r0, 800ee84 <tcpStateFinWait2+0x8a>
      return;

   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800ee26:	4632      	mov	r2, r6
 800ee28:	4621      	mov	r1, r4
 800ee2a:	4628      	mov	r0, r5
 800ee2c:	f001 fa01 	bl	8010232 <tcpCheckAck>
 800ee30:	bb40      	cbnz	r0, 800ee84 <tcpStateFinWait2+0x8a>
      return;

   //Process the segment text
   if(length > 0)
 800ee32:	bb56      	cbnz	r6, 800ee8a <tcpStateFinWait2+0x90>
   {
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
   }

   //Check the FIN bit
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800ee34:	7b63      	ldrb	r3, [r4, #13]
 800ee36:	f013 0f01 	tst.w	r3, #1
 800ee3a:	d023      	beq.n	800ee84 <tcpStateFinWait2+0x8a>
   {
      //The FIN can only be acknowledged if all the segment data has been
      //successfully transferred to the receive buffer
      if(socket->rcvNxt == (segment->seqNum + length))
 800ee3c:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 800ee40:	6863      	ldr	r3, [r4, #4]
 800ee42:	4433      	add	r3, r6
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d11d      	bne.n	800ee84 <tcpStateFinWait2+0x8a>
      {
         //Advance RCV.NXT over the FIN
         socket->rcvNxt++;
 800ee48:	1c53      	adds	r3, r2, #1
 800ee4a:	f8c5 30b0 	str.w	r3, [r5, #176]	@ 0xb0

         //Send an acknowledgment for the FIN
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800ee4e:	2200      	movs	r2, #0
 800ee50:	9201      	str	r2, [sp, #4]
 800ee52:	9200      	str	r2, [sp, #0]
 800ee54:	f8d5 2098 	ldr.w	r2, [r5, #152]	@ 0x98
 800ee58:	2110      	movs	r1, #16
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f000 fe4a 	bl	800faf4 <tcpSendSegment>
            FALSE);

         //Release previously allocated resources
         tcpDeleteControlBlock(socket);
 800ee60:	4628      	mov	r0, r5
 800ee62:	f000 fc1a 	bl	800f69a <tcpDeleteControlBlock>
         //Start the 2MSL timer
         netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800ee66:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800ee6a:	f505 7018 	add.w	r0, r5, #608	@ 0x260
 800ee6e:	f7fd fd25 	bl	800c8bc <netStartTimer>
         //Switch to the TIME_WAIT state
         tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800ee72:	210a      	movs	r1, #10
 800ee74:	4628      	mov	r0, r5
 800ee76:	f000 fdaa 	bl	800f9ce <tcpChangeState>
 800ee7a:	e003      	b.n	800ee84 <tcpStateFinWait2+0x8a>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800ee7c:	2100      	movs	r1, #0
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f000 fda5 	bl	800f9ce <tcpChangeState>
      }
   }
}
 800ee84:	b002      	add	sp, #8
 800ee86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      tcpProcessSegmentData(socket, segment, buffer, offset, length);
 800ee8a:	9600      	str	r6, [sp, #0]
 800ee8c:	463b      	mov	r3, r7
 800ee8e:	4642      	mov	r2, r8
 800ee90:	4621      	mov	r1, r4
 800ee92:	4628      	mov	r0, r5
 800ee94:	f001 fad4 	bl	8010440 <tcpProcessSegmentData>
 800ee98:	e7cc      	b.n	800ee34 <tcpStateFinWait2+0x3a>

0800ee9a <tcpStateClosing>:
 * @param[in] segment Incoming TCP segment
 * @param[in] length Length of the segment data
 **/

void tcpStateClosing(Socket *socket, const TcpHeader *segment, size_t length)
{
 800ee9a:	b570      	push	{r4, r5, r6, lr}
 800ee9c:	4605      	mov	r5, r0
 800ee9e:	460c      	mov	r4, r1
 800eea0:	4616      	mov	r6, r2
   //Debug message
   TRACE_DEBUG("TCP FSM: CLOSING state\r\n");

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800eea2:	f000 ff92 	bl	800fdca <tcpCheckSeqNum>
 800eea6:	bb30      	cbnz	r0, 800eef6 <tcpStateClosing+0x5c>
      return;

   //Check the RST bit
   if((segment->flags & TCP_FLAG_RST) != 0)
 800eea8:	7b63      	ldrb	r3, [r4, #13]
 800eeaa:	f013 0f04 	tst.w	r3, #4
 800eeae:	d11e      	bne.n	800eeee <tcpStateClosing+0x54>
      //Return immediately
      return;
   }

   //Check the SYN bit
   if(tcpCheckSyn(socket, segment, length))
 800eeb0:	4632      	mov	r2, r6
 800eeb2:	4621      	mov	r1, r4
 800eeb4:	4628      	mov	r0, r5
 800eeb6:	f000 ffda 	bl	800fe6e <tcpCheckSyn>
 800eeba:	b9e0      	cbnz	r0, 800eef6 <tcpStateClosing+0x5c>
      return;

   //Check the ACK field
   if(tcpCheckAck(socket, segment, length))
 800eebc:	4632      	mov	r2, r6
 800eebe:	4621      	mov	r1, r4
 800eec0:	4628      	mov	r0, r5
 800eec2:	f001 f9b6 	bl	8010232 <tcpCheckAck>
 800eec6:	b9b0      	cbnz	r0, 800eef6 <tcpStateClosing+0x5c>
      return;

   //If the ACK acknowledges our FIN then enter the TIME-WAIT state, otherwise
   //ignore the segment
   if(segment->ackNum == socket->sndNxt)
 800eec8:	68a2      	ldr	r2, [r4, #8]
 800eeca:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800eece:	429a      	cmp	r2, r3
 800eed0:	d111      	bne.n	800eef6 <tcpStateClosing+0x5c>
   {
      //Release previously allocated resources
      tcpDeleteControlBlock(socket);
 800eed2:	4628      	mov	r0, r5
 800eed4:	f000 fbe1 	bl	800f69a <tcpDeleteControlBlock>
      //Start the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800eed8:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800eedc:	f505 7018 	add.w	r0, r5, #608	@ 0x260
 800eee0:	f7fd fcec 	bl	800c8bc <netStartTimer>
      //Switch to the TIME-WAIT state
      tcpChangeState(socket, TCP_STATE_TIME_WAIT);
 800eee4:	210a      	movs	r1, #10
 800eee6:	4628      	mov	r0, r5
 800eee8:	f000 fd71 	bl	800f9ce <tcpChangeState>
 800eeec:	e003      	b.n	800eef6 <tcpStateClosing+0x5c>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800eeee:	2100      	movs	r1, #0
 800eef0:	4628      	mov	r0, r5
 800eef2:	f000 fd6c 	bl	800f9ce <tcpChangeState>
   }
}
 800eef6:	bd70      	pop	{r4, r5, r6, pc}

0800eef8 <tcpStateTimeWait>:
{
   //Debug message
   TRACE_DEBUG("TCP FSM: TIME-WAIT state\r\n");

   //Ignore RST segments in TIME-WAIT state (refer to RFC 1337, section 3)
   if((segment->flags & TCP_FLAG_RST) != 0)
 800eef8:	7b4b      	ldrb	r3, [r1, #13]
 800eefa:	f013 0f04 	tst.w	r3, #4
 800eefe:	d000      	beq.n	800ef02 <tcpStateTimeWait+0xa>
 800ef00:	4770      	bx	lr
{
 800ef02:	b570      	push	{r4, r5, r6, lr}
 800ef04:	b082      	sub	sp, #8
 800ef06:	4606      	mov	r6, r0
 800ef08:	460c      	mov	r4, r1
 800ef0a:	4615      	mov	r5, r2
      return;

   //First check sequence number
   if(tcpCheckSeqNum(socket, segment, length))
 800ef0c:	f000 ff5d 	bl	800fdca <tcpCheckSeqNum>
 800ef10:	b108      	cbz	r0, 800ef16 <tcpStateTimeWait+0x1e>
         FALSE);

      //Restart the 2MSL timer
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
   }
}
 800ef12:	b002      	add	sp, #8
 800ef14:	bd70      	pop	{r4, r5, r6, pc}
   if(tcpCheckSyn(socket, segment, length))
 800ef16:	462a      	mov	r2, r5
 800ef18:	4621      	mov	r1, r4
 800ef1a:	4630      	mov	r0, r6
 800ef1c:	f000 ffa7 	bl	800fe6e <tcpCheckSyn>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	d1f6      	bne.n	800ef12 <tcpStateTimeWait+0x1a>
   if((segment->flags & TCP_FLAG_ACK) == 0)
 800ef24:	7b63      	ldrb	r3, [r4, #13]
 800ef26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800ef2a:	f013 0f10 	tst.w	r3, #16
 800ef2e:	d0f0      	beq.n	800ef12 <tcpStateTimeWait+0x1a>
   if((segment->flags & TCP_FLAG_FIN) != 0)
 800ef30:	f012 0f01 	tst.w	r2, #1
 800ef34:	d0ed      	beq.n	800ef12 <tcpStateTimeWait+0x1a>
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 800ef36:	2300      	movs	r3, #0
 800ef38:	9301      	str	r3, [sp, #4]
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	f8d6 30b0 	ldr.w	r3, [r6, #176]	@ 0xb0
 800ef40:	f8d6 2098 	ldr.w	r2, [r6, #152]	@ 0x98
 800ef44:	2110      	movs	r1, #16
 800ef46:	4630      	mov	r0, r6
 800ef48:	f000 fdd4 	bl	800faf4 <tcpSendSegment>
      netStartTimer(&socket->timeWaitTimer, TCP_2MSL_TIMER);
 800ef4c:	f44f 617a 	mov.w	r1, #4000	@ 0xfa0
 800ef50:	f506 7018 	add.w	r0, r6, #608	@ 0x260
 800ef54:	f7fd fcb2 	bl	800c8bc <netStartTimer>
 800ef58:	e7db      	b.n	800ef12 <tcpStateTimeWait+0x1a>
	...

0800ef5c <tcpProcessSegment>:
{
 800ef5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef60:	b085      	sub	sp, #20
 800ef62:	4683      	mov	fp, r0
 800ef64:	460c      	mov	r4, r1
 800ef66:	4616      	mov	r6, r2
 800ef68:	461d      	mov	r5, r3
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800ef6a:	680b      	ldr	r3, [r1, #0]
 800ef6c:	2b0c      	cmp	r3, #12
 800ef6e:	d01d      	beq.n	800efac <tcpProcessSegment+0x50>
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800ef70:	2b28      	cmp	r3, #40	@ 0x28
 800ef72:	d118      	bne.n	800efa6 <tcpProcessSegment+0x4a>
      if(ipv6IsMulticastAddr(&pseudoHeader->ipv6Data.destAddr))
 800ef74:	7d0b      	ldrb	r3, [r1, #20]
 800ef76:	2bff      	cmp	r3, #255	@ 0xff
 800ef78:	d015      	beq.n	800efa6 <tcpProcessSegment+0x4a>
   length = netBufferGetLength(buffer) - offset;
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f7fd f87c 	bl	800c078 <netBufferGetLength>
 800ef80:	eba0 0805 	sub.w	r8, r0, r5
   segment = netBufferAt(buffer, offset, 0);
 800ef84:	2200      	movs	r2, #0
 800ef86:	4629      	mov	r1, r5
 800ef88:	4630      	mov	r0, r6
 800ef8a:	f7fd f915 	bl	800c1b8 <netBufferAt>
   if(segment == NULL)
 800ef8e:	4682      	mov	sl, r0
 800ef90:	b148      	cbz	r0, 800efa6 <tcpProcessSegment+0x4a>
   if(length < sizeof(TcpHeader))
 800ef92:	f1b8 0f13 	cmp.w	r8, #19
 800ef96:	d906      	bls.n	800efa6 <tcpProcessSegment+0x4a>
   if(segment->dataOffset < 5 || ((size_t) segment->dataOffset * 4) > length)
 800ef98:	7b03      	ldrb	r3, [r0, #12]
 800ef9a:	091a      	lsrs	r2, r3, #4
 800ef9c:	2b4f      	cmp	r3, #79	@ 0x4f
 800ef9e:	d902      	bls.n	800efa6 <tcpProcessSegment+0x4a>
 800efa0:	ebb8 0f82 	cmp.w	r8, r2, lsl #2
 800efa4:	d20d      	bcs.n	800efc2 <tcpProcessSegment+0x66>
}
 800efa6:	b005      	add	sp, #20
 800efa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 800efac:	6889      	ldr	r1, [r1, #8]
 800efae:	f7f7 f8f0 	bl	8006192 <ipv4IsBroadcastAddr>
 800efb2:	2800      	cmp	r0, #0
 800efb4:	d1f7      	bne.n	800efa6 <tcpProcessSegment+0x4a>
      if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 800efb6:	68a3      	ldr	r3, [r4, #8]
 800efb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800efbc:	2be0      	cmp	r3, #224	@ 0xe0
 800efbe:	d1dc      	bne.n	800ef7a <tcpProcessSegment+0x1e>
 800efc0:	e7f1      	b.n	800efa6 <tcpProcessSegment+0x4a>
   if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 800efc2:	4620      	mov	r0, r4
 800efc4:	f8cd 8000 	str.w	r8, [sp]
 800efc8:	462b      	mov	r3, r5
 800efca:	4632      	mov	r2, r6
 800efcc:	f850 1b04 	ldr.w	r1, [r0], #4
 800efd0:	f7f6 fada 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800efd4:	2800      	cmp	r0, #0
 800efd6:	d1e6      	bne.n	800efa6 <tcpProcessSegment+0x4a>
   passiveSocket = NULL;
 800efd8:	2300      	movs	r3, #0
 800efda:	9302      	str	r3, [sp, #8]
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800efdc:	461f      	mov	r7, r3
 800efde:	f8cd 800c 	str.w	r8, [sp, #12]
 800efe2:	46a0      	mov	r8, r4
 800efe4:	e02d      	b.n	800f042 <tcpProcessSegment+0xe6>
         if((socket->options & SOCKET_OPTION_IPV6_ONLY) != 0)
 800efe6:	4bad      	ldr	r3, [pc, #692]	@ (800f29c <tcpProcessSegment+0x340>)
 800efe8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800efec:	fb02 3307 	mla	r3, r2, r7, r3
 800eff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800eff2:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800eff6:	d123      	bne.n	800f040 <tcpProcessSegment+0xe4>
         if(socket->localIpAddr.length != 0)
 800eff8:	4ba8      	ldr	r3, [pc, #672]	@ (800f29c <tcpProcessSegment+0x340>)
 800effa:	fb02 3307 	mla	r3, r2, r7, r3
 800effe:	691b      	ldr	r3, [r3, #16]
 800f000:	b153      	cbz	r3, 800f018 <tcpProcessSegment+0xbc>
            if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 800f002:	2b04      	cmp	r3, #4
 800f004:	d11c      	bne.n	800f040 <tcpProcessSegment+0xe4>
            if(socket->localIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 800f006:	4ba5      	ldr	r3, [pc, #660]	@ (800f29c <tcpProcessSegment+0x340>)
 800f008:	fb02 3307 	mla	r3, r2, r7, r3
 800f00c:	695b      	ldr	r3, [r3, #20]
 800f00e:	b11b      	cbz	r3, 800f018 <tcpProcessSegment+0xbc>
               socket->localIpAddr.ipv4Addr != pseudoHeader->ipv4Data.destAddr)
 800f010:	f8d8 2008 	ldr.w	r2, [r8, #8]
            if(socket->localIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 800f014:	4293      	cmp	r3, r2
 800f016:	d113      	bne.n	800f040 <tcpProcessSegment+0xe4>
         if(socket->remoteIpAddr.length != 0)
 800f018:	4ba0      	ldr	r3, [pc, #640]	@ (800f29c <tcpProcessSegment+0x340>)
 800f01a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f01e:	fb02 3307 	mla	r3, r2, r7, r3
 800f022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f024:	2b00      	cmp	r3, #0
 800f026:	d06c      	beq.n	800f102 <tcpProcessSegment+0x1a6>
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 800f028:	2b04      	cmp	r3, #4
 800f02a:	d109      	bne.n	800f040 <tcpProcessSegment+0xe4>
            if(socket->remoteIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 800f02c:	4b9b      	ldr	r3, [pc, #620]	@ (800f29c <tcpProcessSegment+0x340>)
 800f02e:	fb02 3307 	mla	r3, r2, r7, r3
 800f032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d064      	beq.n	800f102 <tcpProcessSegment+0x1a6>
               socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 800f038:	f8d8 2004 	ldr.w	r2, [r8, #4]
            if(socket->remoteIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 800f03c:	4293      	cmp	r3, r2
 800f03e:	d060      	beq.n	800f102 <tcpProcessSegment+0x1a6>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 800f040:	3701      	adds	r7, #1
 800f042:	2f09      	cmp	r7, #9
 800f044:	d872      	bhi.n	800f12c <tcpProcessSegment+0x1d0>
      socket = &socketTable[i];
 800f046:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f04a:	4b94      	ldr	r3, [pc, #592]	@ (800f29c <tcpProcessSegment+0x340>)
 800f04c:	fb02 3907 	mla	r9, r2, r7, r3
      if(socket->type != SOCKET_TYPE_STREAM)
 800f050:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f054:	2b01      	cmp	r3, #1
 800f056:	d1f3      	bne.n	800f040 <tcpProcessSegment+0xe4>
      if(socket->interface != NULL && socket->interface != interface)
 800f058:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800f05c:	b10b      	cbz	r3, 800f062 <tcpProcessSegment+0x106>
 800f05e:	455b      	cmp	r3, fp
 800f060:	d1ee      	bne.n	800f040 <tcpProcessSegment+0xe4>
      if(socket->localPort == 0 || socket->localPort != ntohs(segment->destPort))
 800f062:	4b8e      	ldr	r3, [pc, #568]	@ (800f29c <tcpProcessSegment+0x340>)
 800f064:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f068:	fb02 3307 	mla	r3, r2, r7, r3
 800f06c:	8c9c      	ldrh	r4, [r3, #36]	@ 0x24
 800f06e:	2c00      	cmp	r4, #0
 800f070:	d0e6      	beq.n	800f040 <tcpProcessSegment+0xe4>
 800f072:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800f076:	f7f1 fad1 	bl	800061c <swapInt16>
 800f07a:	4284      	cmp	r4, r0
 800f07c:	d1e0      	bne.n	800f040 <tcpProcessSegment+0xe4>
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800f07e:	f8d8 3000 	ldr.w	r3, [r8]
 800f082:	2b0c      	cmp	r3, #12
 800f084:	d0af      	beq.n	800efe6 <tcpProcessSegment+0x8a>
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800f086:	2b28      	cmp	r3, #40	@ 0x28
 800f088:	d1da      	bne.n	800f040 <tcpProcessSegment+0xe4>
         if(socket->localIpAddr.length != 0)
 800f08a:	4b84      	ldr	r3, [pc, #528]	@ (800f29c <tcpProcessSegment+0x340>)
 800f08c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f090:	fb02 3307 	mla	r3, r2, r7, r3
 800f094:	691b      	ldr	r3, [r3, #16]
 800f096:	b1b3      	cbz	r3, 800f0c6 <tcpProcessSegment+0x16a>
            if(socket->localIpAddr.length != sizeof(Ipv6Addr))
 800f098:	2b10      	cmp	r3, #16
 800f09a:	d1d1      	bne.n	800f040 <tcpProcessSegment+0xe4>
            if(!ipv6CompAddr(&socket->localIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR) &&
 800f09c:	4614      	mov	r4, r2
 800f09e:	fb07 f404 	mul.w	r4, r7, r4
 800f0a2:	3410      	adds	r4, #16
 800f0a4:	4b7d      	ldr	r3, [pc, #500]	@ (800f29c <tcpProcessSegment+0x340>)
 800f0a6:	441c      	add	r4, r3
 800f0a8:	3404      	adds	r4, #4
 800f0aa:	2210      	movs	r2, #16
 800f0ac:	497c      	ldr	r1, [pc, #496]	@ (800f2a0 <tcpProcessSegment+0x344>)
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f005 fdbe 	bl	8014c30 <memcmp>
 800f0b4:	b138      	cbz	r0, 800f0c6 <tcpProcessSegment+0x16a>
               !ipv6CompAddr(&socket->localIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.destAddr))
 800f0b6:	2210      	movs	r2, #16
 800f0b8:	f108 0114 	add.w	r1, r8, #20
 800f0bc:	4620      	mov	r0, r4
 800f0be:	f005 fdb7 	bl	8014c30 <memcmp>
            if(!ipv6CompAddr(&socket->localIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR) &&
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	d1bc      	bne.n	800f040 <tcpProcessSegment+0xe4>
         if(socket->remoteIpAddr.length != 0)
 800f0c6:	4b75      	ldr	r3, [pc, #468]	@ (800f29c <tcpProcessSegment+0x340>)
 800f0c8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f0cc:	fb02 3307 	mla	r3, r2, r7, r3
 800f0d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0d2:	b1b3      	cbz	r3, 800f102 <tcpProcessSegment+0x1a6>
            if(socket->remoteIpAddr.length != sizeof(Ipv6Addr))
 800f0d4:	2b10      	cmp	r3, #16
 800f0d6:	d1b3      	bne.n	800f040 <tcpProcessSegment+0xe4>
            if(!ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR) &&
 800f0d8:	4614      	mov	r4, r2
 800f0da:	fb07 f404 	mul.w	r4, r7, r4
 800f0de:	3428      	adds	r4, #40	@ 0x28
 800f0e0:	4b6e      	ldr	r3, [pc, #440]	@ (800f29c <tcpProcessSegment+0x340>)
 800f0e2:	441c      	add	r4, r3
 800f0e4:	3404      	adds	r4, #4
 800f0e6:	2210      	movs	r2, #16
 800f0e8:	496d      	ldr	r1, [pc, #436]	@ (800f2a0 <tcpProcessSegment+0x344>)
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f005 fda0 	bl	8014c30 <memcmp>
 800f0f0:	b138      	cbz	r0, 800f102 <tcpProcessSegment+0x1a6>
               !ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr))
 800f0f2:	2210      	movs	r2, #16
 800f0f4:	f108 0104 	add.w	r1, r8, #4
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f005 fd99 	bl	8014c30 <memcmp>
            if(!ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr, &IPV6_UNSPECIFIED_ADDR) &&
 800f0fe:	2800      	cmp	r0, #0
 800f100:	d19e      	bne.n	800f040 <tcpProcessSegment+0xe4>
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 800f102:	4b66      	ldr	r3, [pc, #408]	@ (800f29c <tcpProcessSegment+0x340>)
 800f104:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f108:	fb02 3307 	mla	r3, r2, r7, r3
 800f10c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f110:	2b01      	cmp	r3, #1
 800f112:	d058      	beq.n	800f1c6 <tcpProcessSegment+0x26a>
      if(socket->remotePort != ntohs(segment->srcPort))
 800f114:	4b61      	ldr	r3, [pc, #388]	@ (800f29c <tcpProcessSegment+0x340>)
 800f116:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800f11a:	fb02 3307 	mla	r3, r2, r7, r3
 800f11e:	8f9c      	ldrh	r4, [r3, #60]	@ 0x3c
 800f120:	f8ba 0000 	ldrh.w	r0, [sl]
 800f124:	f7f1 fa7a 	bl	800061c <swapInt16>
 800f128:	4284      	cmp	r4, r0
 800f12a:	d189      	bne.n	800f040 <tcpProcessSegment+0xe4>
   if(i >= SOCKET_MAX_COUNT)
 800f12c:	4644      	mov	r4, r8
 800f12e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f132:	2f09      	cmp	r7, #9
 800f134:	d801      	bhi.n	800f13a <tcpProcessSegment+0x1de>
 800f136:	f8cd 9008 	str.w	r9, [sp, #8]
   offset += segment->dataOffset * 4;
 800f13a:	f89a 100c 	ldrb.w	r1, [sl, #12]
 800f13e:	0909      	lsrs	r1, r1, #4
 800f140:	eb05 0581 	add.w	r5, r5, r1, lsl #2
   length -= segment->dataOffset * 4;
 800f144:	eba8 0781 	sub.w	r7, r8, r1, lsl #2
   if(socket == NULL)
 800f148:	9b02      	ldr	r3, [sp, #8]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d041      	beq.n	800f1d2 <tcpProcessSegment+0x276>
      tcpDumpHeader(segment, length, socket->irs, socket->iss);
 800f14e:	9a02      	ldr	r2, [sp, #8]
 800f150:	f8d2 308c 	ldr.w	r3, [r2, #140]	@ 0x8c
 800f154:	f8d2 2090 	ldr.w	r2, [r2, #144]	@ 0x90
 800f158:	4639      	mov	r1, r7
 800f15a:	4650      	mov	r0, sl
 800f15c:	f001 f9f2 	bl	8010544 <tcpDumpHeader>
   segment->srcPort = ntohs(segment->srcPort);
 800f160:	f8ba 0000 	ldrh.w	r0, [sl]
 800f164:	f7f1 fa5a 	bl	800061c <swapInt16>
 800f168:	f8aa 0000 	strh.w	r0, [sl]
   segment->destPort = ntohs(segment->destPort);
 800f16c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 800f170:	f7f1 fa54 	bl	800061c <swapInt16>
 800f174:	f8aa 0002 	strh.w	r0, [sl, #2]
   segment->seqNum = ntohl(segment->seqNum);
 800f178:	f8da 0004 	ldr.w	r0, [sl, #4]
 800f17c:	f7f1 fa51 	bl	8000622 <swapInt32>
 800f180:	f8ca 0004 	str.w	r0, [sl, #4]
   segment->ackNum = ntohl(segment->ackNum);
 800f184:	f8da 0008 	ldr.w	r0, [sl, #8]
 800f188:	f7f1 fa4b 	bl	8000622 <swapInt32>
 800f18c:	f8ca 0008 	str.w	r0, [sl, #8]
   segment->window = ntohs(segment->window);
 800f190:	f8ba 000e 	ldrh.w	r0, [sl, #14]
 800f194:	f7f1 fa42 	bl	800061c <swapInt16>
 800f198:	f8aa 000e 	strh.w	r0, [sl, #14]
   segment->urgentPointer = ntohs(segment->urgentPointer);
 800f19c:	f8ba 0012 	ldrh.w	r0, [sl, #18]
 800f1a0:	f7f1 fa3c 	bl	800061c <swapInt16>
 800f1a4:	f8aa 0012 	strh.w	r0, [sl, #18]
   if(socket == NULL)
 800f1a8:	9b02      	ldr	r3, [sp, #8]
 800f1aa:	b1c3      	cbz	r3, 800f1de <tcpProcessSegment+0x282>
   switch(socket->state)
 800f1ac:	9b02      	ldr	r3, [sp, #8]
 800f1ae:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f1b2:	2b0a      	cmp	r3, #10
 800f1b4:	d86d      	bhi.n	800f292 <tcpProcessSegment+0x336>
 800f1b6:	e8df f003 	tbb	[pc, r3]
 800f1ba:	261f      	.short	0x261f
 800f1bc:	443c342e 	.word	0x443c342e
 800f1c0:	6058504a 	.word	0x6058504a
 800f1c4:	66          	.byte	0x66
 800f1c5:	00          	.byte	0x00
      if(socket->state == TCP_STATE_LISTEN && passiveSocket == NULL)
 800f1c6:	9b02      	ldr	r3, [sp, #8]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1a3      	bne.n	800f114 <tcpProcessSegment+0x1b8>
         passiveSocket = socket;
 800f1cc:	f8cd 9008 	str.w	r9, [sp, #8]
 800f1d0:	e7a0      	b.n	800f114 <tcpProcessSegment+0x1b8>
      tcpDumpHeader(segment, length, 0, 0);
 800f1d2:	461a      	mov	r2, r3
 800f1d4:	4639      	mov	r1, r7
 800f1d6:	4650      	mov	r0, sl
 800f1d8:	f001 f9b4 	bl	8010544 <tcpDumpHeader>
 800f1dc:	e7c0      	b.n	800f160 <tcpProcessSegment+0x204>
      if((segment->flags & TCP_FLAG_RST) == 0)
 800f1de:	f89a 300d 	ldrb.w	r3, [sl, #13]
 800f1e2:	f013 0f04 	tst.w	r3, #4
 800f1e6:	f47f aede 	bne.w	800efa6 <tcpProcessSegment+0x4a>
         tcpRejectSegment(interface, pseudoHeader, segment, length);
 800f1ea:	463b      	mov	r3, r7
 800f1ec:	4652      	mov	r2, sl
 800f1ee:	4621      	mov	r1, r4
 800f1f0:	4658      	mov	r0, fp
 800f1f2:	f000 f857 	bl	800f2a4 <tcpRejectSegment>
      return;
 800f1f6:	e6d6      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateClosed(interface, pseudoHeader, segment, length);
 800f1f8:	463b      	mov	r3, r7
 800f1fa:	4652      	mov	r2, sl
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	4658      	mov	r0, fp
 800f200:	f7ff fb40 	bl	800e884 <tcpStateClosed>
      break;
 800f204:	e6cf      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateListen(socket, interface, pseudoHeader, segment, length);
 800f206:	9700      	str	r7, [sp, #0]
 800f208:	4653      	mov	r3, sl
 800f20a:	4622      	mov	r2, r4
 800f20c:	4659      	mov	r1, fp
 800f20e:	9802      	ldr	r0, [sp, #8]
 800f210:	f7ff fb42 	bl	800e898 <tcpStateListen>
      break;
 800f214:	e6c7      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateSynSent(socket, segment, length);
 800f216:	463a      	mov	r2, r7
 800f218:	4651      	mov	r1, sl
 800f21a:	9802      	ldr	r0, [sp, #8]
 800f21c:	f7ff fbdf 	bl	800e9de <tcpStateSynSent>
      break;
 800f220:	e6c1      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateSynReceived(socket, segment, buffer, offset, length);
 800f222:	9700      	str	r7, [sp, #0]
 800f224:	462b      	mov	r3, r5
 800f226:	4632      	mov	r2, r6
 800f228:	4651      	mov	r1, sl
 800f22a:	9802      	ldr	r0, [sp, #8]
 800f22c:	f7ff fcb7 	bl	800eb9e <tcpStateSynReceived>
      break;
 800f230:	e6b9      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateEstablished(socket, segment, buffer, offset, length);
 800f232:	9700      	str	r7, [sp, #0]
 800f234:	462b      	mov	r3, r5
 800f236:	4632      	mov	r2, r6
 800f238:	4651      	mov	r1, sl
 800f23a:	9802      	ldr	r0, [sp, #8]
 800f23c:	f7ff fc5f 	bl	800eafe <tcpStateEstablished>
      break;
 800f240:	e6b1      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateCloseWait(socket, segment, length);
 800f242:	463a      	mov	r2, r7
 800f244:	4651      	mov	r1, sl
 800f246:	9802      	ldr	r0, [sp, #8]
 800f248:	f7ff fd24 	bl	800ec94 <tcpStateCloseWait>
      break;
 800f24c:	e6ab      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateLastAck(socket, segment, length);
 800f24e:	463a      	mov	r2, r7
 800f250:	4651      	mov	r1, sl
 800f252:	9802      	ldr	r0, [sp, #8]
 800f254:	f7ff fd43 	bl	800ecde <tcpStateLastAck>
      break;
 800f258:	e6a5      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateFinWait1(socket, segment, buffer, offset, length);
 800f25a:	9700      	str	r7, [sp, #0]
 800f25c:	462b      	mov	r3, r5
 800f25e:	4632      	mov	r2, r6
 800f260:	4651      	mov	r1, sl
 800f262:	9802      	ldr	r0, [sp, #8]
 800f264:	f7ff fd5f 	bl	800ed26 <tcpStateFinWait1>
      break;
 800f268:	e69d      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateFinWait2(socket, segment, buffer, offset, length);
 800f26a:	9700      	str	r7, [sp, #0]
 800f26c:	462b      	mov	r3, r5
 800f26e:	4632      	mov	r2, r6
 800f270:	4651      	mov	r1, sl
 800f272:	9802      	ldr	r0, [sp, #8]
 800f274:	f7ff fdc1 	bl	800edfa <tcpStateFinWait2>
      break;
 800f278:	e695      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateClosing(socket, segment, length);
 800f27a:	463a      	mov	r2, r7
 800f27c:	4651      	mov	r1, sl
 800f27e:	9802      	ldr	r0, [sp, #8]
 800f280:	f7ff fe0b 	bl	800ee9a <tcpStateClosing>
      break;
 800f284:	e68f      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpStateTimeWait(socket, segment, length);
 800f286:	463a      	mov	r2, r7
 800f288:	4651      	mov	r1, sl
 800f28a:	9802      	ldr	r0, [sp, #8]
 800f28c:	f7ff fe34 	bl	800eef8 <tcpStateTimeWait>
      break;
 800f290:	e689      	b.n	800efa6 <tcpProcessSegment+0x4a>
      tcpChangeState(socket, TCP_STATE_CLOSED);
 800f292:	2100      	movs	r1, #0
 800f294:	9802      	ldr	r0, [sp, #8]
 800f296:	f000 fb9a 	bl	800f9ce <tcpChangeState>
      break;
 800f29a:	e684      	b.n	800efa6 <tcpProcessSegment+0x4a>
 800f29c:	20001ef8 	.word	0x20001ef8
 800f2a0:	08019f20 	.word	0x08019f20

0800f2a4 <tcpRejectSegment>:
 * @return Error code
 **/

error_t tcpRejectSegment(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const TcpHeader *segment, size_t length)
{
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	b097      	sub	sp, #92	@ 0x5c
 800f2aa:	4680      	mov	r8, r0
 800f2ac:	460d      	mov	r5, r1
 800f2ae:	4616      	mov	r6, r2
   TcpHeader *segment2;
   IpPseudoHeader pseudoHeader2;
   NetTxAncillary ancillary;

   //Check whether the ACK bit is set
   if((segment->flags & TCP_FLAG_ACK) != 0)
 800f2b0:	7b52      	ldrb	r2, [r2, #13]
 800f2b2:	f012 0f10 	tst.w	r2, #16
 800f2b6:	d07e      	beq.n	800f3b6 <tcpRejectSegment+0x112>
   {
      //If the incoming segment has an ACK field, the reset takes
      //its sequence number from the ACK field of the segment
      flags = TCP_FLAG_RST;
      seqNum = segment->ackNum;
 800f2b8:	f8d6 b008 	ldr.w	fp, [r6, #8]
      ackNum = 0;
 800f2bc:	f04f 0900 	mov.w	r9, #0
      flags = TCP_FLAG_RST;
 800f2c0:	f04f 0a04 	mov.w	sl, #4
         ackNum++;
      }
   }

   //Allocate a memory buffer to hold the reset segment
   buffer = ipAllocBuffer(sizeof(TcpHeader), &offset);
 800f2c4:	a915      	add	r1, sp, #84	@ 0x54
 800f2c6:	2014      	movs	r0, #20
 800f2c8:	f7f6 f973 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate memory?
   if(buffer == NULL)
 800f2cc:	4607      	mov	r7, r0
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	f000 80a8 	beq.w	800f424 <tcpRejectSegment+0x180>
      return ERROR_OUT_OF_MEMORY;

   //Point to the beginning of the TCP segment
   segment2 = netBufferAt(buffer, offset, 0);
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	9915      	ldr	r1, [sp, #84]	@ 0x54
 800f2d8:	f7fc ff6e 	bl	800c1b8 <netBufferAt>
 800f2dc:	4604      	mov	r4, r0

   //Format TCP header
   segment2->srcPort = htons(segment->destPort);
 800f2de:	8870      	ldrh	r0, [r6, #2]
 800f2e0:	f7f1 f99c 	bl	800061c <swapInt16>
 800f2e4:	8020      	strh	r0, [r4, #0]
   segment2->destPort = htons(segment->srcPort);
 800f2e6:	8830      	ldrh	r0, [r6, #0]
 800f2e8:	f7f1 f998 	bl	800061c <swapInt16>
 800f2ec:	8060      	strh	r0, [r4, #2]
   segment2->seqNum = htonl(seqNum);
 800f2ee:	4658      	mov	r0, fp
 800f2f0:	f7f1 f997 	bl	8000622 <swapInt32>
 800f2f4:	6060      	str	r0, [r4, #4]
   segment2->ackNum = htonl(ackNum);
 800f2f6:	4648      	mov	r0, r9
 800f2f8:	f7f1 f993 	bl	8000622 <swapInt32>
 800f2fc:	60a0      	str	r0, [r4, #8]
   segment2->reserved1 = 0;
 800f2fe:	7b23      	ldrb	r3, [r4, #12]
 800f300:	f023 030f 	bic.w	r3, r3, #15
 800f304:	7323      	strb	r3, [r4, #12]
   segment2->dataOffset = 5;
 800f306:	b2db      	uxtb	r3, r3
 800f308:	2205      	movs	r2, #5
 800f30a:	f362 1307 	bfi	r3, r2, #4, #4
 800f30e:	7323      	strb	r3, [r4, #12]
   segment2->flags = flags;
 800f310:	7b63      	ldrb	r3, [r4, #13]
 800f312:	f36a 0305 	bfi	r3, sl, #0, #6
 800f316:	7363      	strb	r3, [r4, #13]
   segment2->reserved2 = 0;
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800f31e:	7363      	strb	r3, [r4, #13]
   segment2->window = 0;
 800f320:	2300      	movs	r3, #0
 800f322:	73a3      	strb	r3, [r4, #14]
 800f324:	73e3      	strb	r3, [r4, #15]
   segment2->checksum = 0;
 800f326:	7423      	strb	r3, [r4, #16]
 800f328:	7463      	strb	r3, [r4, #17]
   segment2->urgentPointer = 0;
 800f32a:	74a3      	strb	r3, [r4, #18]
 800f32c:	74e3      	strb	r3, [r4, #19]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800f32e:	682b      	ldr	r3, [r5, #0]
 800f330:	2b0c      	cmp	r3, #12
 800f332:	d059      	beq.n	800f3e8 <tcpRejectSegment+0x144>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800f334:	2b28      	cmp	r3, #40	@ 0x28
 800f336:	d170      	bne.n	800f41a <tcpRejectSegment+0x176>
   {
      //Format IPv6 pseudo header
      pseudoHeader2.length = sizeof(Ipv6PseudoHeader);
 800f338:	f04f 0e28 	mov.w	lr, #40	@ 0x28
 800f33c:	f8cd e028 	str.w	lr, [sp, #40]	@ 0x28
      pseudoHeader2.ipv6Data.srcAddr = pseudoHeader->ipv6Data.destAddr;
 800f340:	ae0b      	add	r6, sp, #44	@ 0x2c
 800f342:	f105 0314 	add.w	r3, r5, #20
 800f346:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800f348:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
      pseudoHeader2.ipv6Data.destAddr = pseudoHeader->ipv6Data.srcAddr;
 800f34c:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800f350:	3504      	adds	r5, #4
 800f352:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f356:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      pseudoHeader2.ipv6Data.length = HTONL(sizeof(TcpHeader));
 800f35a:	f04f 53a0 	mov.w	r3, #335544320	@ 0x14000000
 800f35e:	9313      	str	r3, [sp, #76]	@ 0x4c
      pseudoHeader2.ipv6Data.reserved[0] = 0;
 800f360:	2300      	movs	r3, #0
 800f362:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
      pseudoHeader2.ipv6Data.reserved[1] = 0;
 800f366:	f88d 3051 	strb.w	r3, [sp, #81]	@ 0x51
      pseudoHeader2.ipv6Data.reserved[2] = 0;
 800f36a:	f88d 3052 	strb.w	r3, [sp, #82]	@ 0x52
      pseudoHeader2.ipv6Data.nextHeader = IPV6_TCP_HEADER;
 800f36e:	2306      	movs	r3, #6
 800f370:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53

      //Calculate TCP header checksum
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv6Data,
 800f374:	2314      	movs	r3, #20
 800f376:	9300      	str	r3, [sp, #0]
 800f378:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f37a:	463a      	mov	r2, r7
 800f37c:	4671      	mov	r1, lr
 800f37e:	4630      	mov	r0, r6
 800f380:	f7f6 f902 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800f384:	8220      	strh	r0, [r4, #16]

   //Dump TCP header contents for debugging purpose
   tcpDumpHeader(segment2, length, 0, 0);

   //Additional options can be passed to the stack along with the packet
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800f386:	ac02      	add	r4, sp, #8
 800f388:	4d27      	ldr	r5, [pc, #156]	@ (800f428 <tcpRejectSegment+0x184>)
 800f38a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f38c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f38e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800f392:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

   //Send TCP segment
   error = ipSendDatagram(interface, &pseudoHeader2, buffer, offset,
 800f396:	ab02      	add	r3, sp, #8
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f39c:	463a      	mov	r2, r7
 800f39e:	a90a      	add	r1, sp, #40	@ 0x28
 800f3a0:	4640      	mov	r0, r8
 800f3a2:	f7f5 ff8d 	bl	80052c0 <ipSendDatagram>
 800f3a6:	4604      	mov	r4, r0
      &ancillary);

   //Free previously allocated memory
   netBufferFree(buffer);
 800f3a8:	4638      	mov	r0, r7
 800f3aa:	f7fc fedd 	bl	800c168 <netBufferFree>

   //Return error code
   return error;
}
 800f3ae:	4620      	mov	r0, r4
 800f3b0:	b017      	add	sp, #92	@ 0x5c
 800f3b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3b6:	f002 013f 	and.w	r1, r2, #63	@ 0x3f
      ackNum = segment->seqNum + length;
 800f3ba:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800f3be:	4499      	add	r9, r3
      if((segment->flags & TCP_FLAG_SYN) != 0)
 800f3c0:	f011 0f02 	tst.w	r1, #2
 800f3c4:	d001      	beq.n	800f3ca <tcpRejectSegment+0x126>
         ackNum++;
 800f3c6:	f109 0901 	add.w	r9, r9, #1
      if((segment->flags & TCP_FLAG_FIN) != 0)
 800f3ca:	f011 0f01 	tst.w	r1, #1
 800f3ce:	d006      	beq.n	800f3de <tcpRejectSegment+0x13a>
         ackNum++;
 800f3d0:	f109 0901 	add.w	r9, r9, #1
      seqNum = 0;
 800f3d4:	f04f 0b00 	mov.w	fp, #0
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 800f3d8:	f04f 0a14 	mov.w	sl, #20
 800f3dc:	e772      	b.n	800f2c4 <tcpRejectSegment+0x20>
      seqNum = 0;
 800f3de:	f04f 0b00 	mov.w	fp, #0
      flags = TCP_FLAG_RST | TCP_FLAG_ACK;
 800f3e2:	f04f 0a14 	mov.w	sl, #20
 800f3e6:	e76d      	b.n	800f2c4 <tcpRejectSegment+0x20>
      pseudoHeader2.length = sizeof(Ipv4PseudoHeader);
 800f3e8:	210c      	movs	r1, #12
 800f3ea:	910a      	str	r1, [sp, #40]	@ 0x28
      pseudoHeader2.ipv4Data.srcAddr = pseudoHeader->ipv4Data.destAddr;
 800f3ec:	68ab      	ldr	r3, [r5, #8]
 800f3ee:	930b      	str	r3, [sp, #44]	@ 0x2c
      pseudoHeader2.ipv4Data.destAddr = pseudoHeader->ipv4Data.srcAddr;
 800f3f0:	686b      	ldr	r3, [r5, #4]
 800f3f2:	930c      	str	r3, [sp, #48]	@ 0x30
      pseudoHeader2.ipv4Data.reserved = 0;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
      pseudoHeader2.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 800f3fa:	2306      	movs	r3, #6
 800f3fc:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
      pseudoHeader2.ipv4Data.length = HTONS(sizeof(TcpHeader));
 800f400:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800f404:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
      segment2->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader2.ipv4Data,
 800f408:	2314      	movs	r3, #20
 800f40a:	9300      	str	r3, [sp, #0]
 800f40c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f40e:	463a      	mov	r2, r7
 800f410:	a80b      	add	r0, sp, #44	@ 0x2c
 800f412:	f7f6 f8b9 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800f416:	8220      	strh	r0, [r4, #16]
 800f418:	e7b5      	b.n	800f386 <tcpRejectSegment+0xe2>
      netBufferFree(buffer);
 800f41a:	4638      	mov	r0, r7
 800f41c:	f7fc fea4 	bl	800c168 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 800f420:	24e4      	movs	r4, #228	@ 0xe4
 800f422:	e7c4      	b.n	800f3ae <tcpRejectSegment+0x10a>
      return ERROR_OUT_OF_MEMORY;
 800f424:	2464      	movs	r4, #100	@ 0x64
 800f426:	e7c2      	b.n	800f3ae <tcpRejectSegment+0x10a>
 800f428:	08019fc4 	.word	0x08019fc4

0800f42c <tcpAddOption>:
 * @return Error code
 **/

error_t tcpAddOption(TcpHeader *segment, uint8_t kind, const void *value,
   uint8_t length)
{
 800f42c:	b570      	push	{r4, r5, r6, lr}
   size_t paddingSize;
   TcpOption *option;

   //The option-length counts the two octets of option-kind and option-length
   //as well as the option-data octets (refer to RFC 793, section 3.1)
   length += sizeof(TcpOption);
 800f42e:	1c9d      	adds	r5, r3, #2
 800f430:	b2ed      	uxtb	r5, r5

   //Make sure there is enough room to add the option
   if((segment->dataOffset * 4 + length) <= TCP_MAX_HEADER_LENGTH)
 800f432:	7b03      	ldrb	r3, [r0, #12]
 800f434:	091b      	lsrs	r3, r3, #4
 800f436:	009c      	lsls	r4, r3, #2
 800f438:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f43c:	2b3c      	cmp	r3, #60	@ 0x3c
 800f43e:	dc29      	bgt.n	800f494 <tcpAddOption+0x68>
 800f440:	4606      	mov	r6, r0
 800f442:	468e      	mov	lr, r1
 800f444:	4611      	mov	r1, r2
   {
      //Index of the first available byte
      i = (segment->dataOffset * 4) - sizeof(TcpHeader);
 800f446:	3c14      	subs	r4, #20

      //Calculate the number of padding bytes
      paddingSize = (length % 4) ? 4 - (length % 4) : 0;
 800f448:	f015 0303 	ands.w	r3, r5, #3
 800f44c:	d002      	beq.n	800f454 <tcpAddOption+0x28>
 800f44e:	f1c3 0304 	rsb	r3, r3, #4
 800f452:	e008      	b.n	800f466 <tcpAddOption+0x3a>
 800f454:	2300      	movs	r3, #0
 800f456:	e006      	b.n	800f466 <tcpAddOption+0x3a>

      //Write padding bytes
      while(paddingSize--)
      {
         segment->options[i++] = TCP_OPTION_NOP;
 800f458:	1933      	adds	r3, r6, r4
 800f45a:	f04f 0c01 	mov.w	ip, #1
 800f45e:	f883 c014 	strb.w	ip, [r3, #20]
      while(paddingSize--)
 800f462:	4603      	mov	r3, r0
         segment->options[i++] = TCP_OPTION_NOP;
 800f464:	4464      	add	r4, ip
      while(paddingSize--)
 800f466:	1e58      	subs	r0, r3, #1
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d1f5      	bne.n	800f458 <tcpAddOption+0x2c>
      }

      //Point to the current location
      option = (TcpOption *) (segment->options + i);
 800f46c:	f106 0314 	add.w	r3, r6, #20
 800f470:	1918      	adds	r0, r3, r4

      //Format option
      option->kind = kind;
 800f472:	f803 e004 	strb.w	lr, [r3, r4]
      option->length = length;
 800f476:	7045      	strb	r5, [r0, #1]
      osMemcpy(option->value, value, length - sizeof(TcpOption));
 800f478:	1eaa      	subs	r2, r5, #2
 800f47a:	3002      	adds	r0, #2
 800f47c:	f005 fd0e 	bl	8014e9c <memcpy>

      //Adjust index value
      i += length;
 800f480:	4425      	add	r5, r4

      //Update the length of the TCP header
      segment->dataOffset = (sizeof(TcpHeader) + i) / 4;
 800f482:	3514      	adds	r5, #20
 800f484:	f3c5 0583 	ubfx	r5, r5, #2, #4
 800f488:	7b33      	ldrb	r3, [r6, #12]
 800f48a:	f365 1307 	bfi	r3, r5, #4, #4
 800f48e:	7333      	strb	r3, [r6, #12]

      //Successful processing
      error = NO_ERROR;
 800f490:	2000      	movs	r0, #0
      error = ERROR_FAILURE;
   }

   //Return status code
   return error;
}
 800f492:	bd70      	pop	{r4, r5, r6, pc}
      error = ERROR_FAILURE;
 800f494:	2001      	movs	r0, #1
 800f496:	e7fc      	b.n	800f492 <tcpAddOption+0x66>

0800f498 <tcpGetOption>:
   size_t i;
   size_t length;
   TcpOption *option;

   //Make sure the TCP header is valid
   if(segment->dataOffset >= (sizeof(TcpHeader) / 4))
 800f498:	7b03      	ldrb	r3, [r0, #12]
 800f49a:	2b4f      	cmp	r3, #79	@ 0x4f
 800f49c:	d924      	bls.n	800f4e8 <tcpGetOption+0x50>
{
 800f49e:	b510      	push	{r4, lr}
 800f4a0:	4604      	mov	r4, r0
 800f4a2:	ea4f 1c13 	mov.w	ip, r3, lsr #4
   {
      //Compute the length of the options field
      length = (segment->dataOffset * 4) - sizeof(TcpHeader);
 800f4a6:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800f4aa:	f1ac 0c14 	sub.w	ip, ip, #20

      //Point to the very first option
      i = 0;
 800f4ae:	2300      	movs	r3, #0

      //Loop through the list of options
      while(i < length)
 800f4b0:	e000      	b.n	800f4b4 <tcpGetOption+0x1c>
            break;
         }
         else if(option->kind == TCP_OPTION_NOP)
         {
            //This option consists of a single octet
            i++;
 800f4b2:	3301      	adds	r3, #1
      while(i < length)
 800f4b4:	4563      	cmp	r3, ip
 800f4b6:	d215      	bcs.n	800f4e4 <tcpGetOption+0x4c>
         option = (TcpOption *) (segment->options + i);
 800f4b8:	f104 0214 	add.w	r2, r4, #20
 800f4bc:	18d0      	adds	r0, r2, r3
         if(option->kind == TCP_OPTION_END)
 800f4be:	5cd2      	ldrb	r2, [r2, r3]
 800f4c0:	b1a2      	cbz	r2, 800f4ec <tcpGetOption+0x54>
         else if(option->kind == TCP_OPTION_NOP)
 800f4c2:	2a01      	cmp	r2, #1
 800f4c4:	d0f5      	beq.n	800f4b2 <tcpGetOption+0x1a>
         }
         else
         {
            //The option code is followed by a one-byte length field
            if((i + 1) >= length)
 800f4c6:	f103 0e01 	add.w	lr, r3, #1
 800f4ca:	45e6      	cmp	lr, ip
 800f4cc:	d210      	bcs.n	800f4f0 <tcpGetOption+0x58>
            {
               break;
            }

            //Check the length of the option
            if(option->length < sizeof(TcpOption) ||
 800f4ce:	f890 e001 	ldrb.w	lr, [r0, #1]
 800f4d2:	f1be 0f01 	cmp.w	lr, #1
 800f4d6:	d90d      	bls.n	800f4f4 <tcpGetOption+0x5c>
               (i + option->length) > length)
 800f4d8:	4473      	add	r3, lr
            if(option->length < sizeof(TcpOption) ||
 800f4da:	4563      	cmp	r3, ip
 800f4dc:	d80c      	bhi.n	800f4f8 <tcpGetOption+0x60>
            {
               break;
            }

            //Matching option code?
            if(option->kind == kind)
 800f4de:	428a      	cmp	r2, r1
 800f4e0:	d1e8      	bne.n	800f4b4 <tcpGetOption+0x1c>
 800f4e2:	e000      	b.n	800f4e6 <tcpGetOption+0x4e>
         }
      }
   }

   //The specified option code was not found
   return NULL;
 800f4e4:	2000      	movs	r0, #0
}
 800f4e6:	bd10      	pop	{r4, pc}
   return NULL;
 800f4e8:	2000      	movs	r0, #0
}
 800f4ea:	4770      	bx	lr
   return NULL;
 800f4ec:	2000      	movs	r0, #0
 800f4ee:	e7fa      	b.n	800f4e6 <tcpGetOption+0x4e>
 800f4f0:	2000      	movs	r0, #0
 800f4f2:	e7f8      	b.n	800f4e6 <tcpGetOption+0x4e>
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	e7f6      	b.n	800f4e6 <tcpGetOption+0x4e>
 800f4f8:	2000      	movs	r0, #0
 800f4fa:	e7f4      	b.n	800f4e6 <tcpGetOption+0x4e>

0800f4fc <tcpGenerateInitialSeqNum>:
 * @return Value of the initial sequence number
 **/

uint32_t tcpGenerateInitialSeqNum(const IpAddr *localIpAddr,
   uint16_t localPort, const IpAddr *remoteIpAddr, uint16_t remotePort)
{
 800f4fc:	b508      	push	{r3, lr}

   //Calculate ISN = M + F(localip, localport, remoteip, remoteport, secretkey)
   return isn + netGetSystemTickCount();
#else
   //Generate a random initial sequence number
   return netGenerateRand();
 800f4fe:	f7fd fad5 	bl	800caac <netGenerateRand>
#endif
}
 800f502:	bd08      	pop	{r3, pc}

0800f504 <tcpIsDuplicateSyn>:
 * @return TRUE if the SYN segment is duplicate, else FALSE
 **/

bool_t tcpIsDuplicateSyn(Socket *socket, const IpPseudoHeader *pseudoHeader,
   const TcpHeader *segment)
{
 800f504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f506:	460d      	mov	r5, r1
 800f508:	4617      	mov	r7, r2

   //Initialize flag
   flag = FALSE;

   //Point to the very first item
   queueItem = socket->synQueue;
 800f50a:	f8d0 422c 	ldr.w	r4, [r0, #556]	@ 0x22c
   flag = FALSE;
 800f50e:	2600      	movs	r6, #0

   //Loop through the SYN queue
   while(queueItem != NULL)
 800f510:	e00a      	b.n	800f528 <tcpIsDuplicateSyn+0x24>
   {
#if (IPV4_SUPPORT == ENABLED)
      //IPv4 packet received?
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 800f512:	6a21      	ldr	r1, [r4, #32]
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 800f514:	2904      	cmp	r1, #4
 800f516:	d10b      	bne.n	800f530 <tcpIsDuplicateSyn+0x2c>
         pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 800f518:	682a      	ldr	r2, [r5, #0]
         queueItem->destAddr.length == sizeof(Ipv4Addr) &&
 800f51a:	2a0c      	cmp	r2, #12
 800f51c:	d108      	bne.n	800f530 <tcpIsDuplicateSyn+0x2c>
      {
         //Check source and destination addresses
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 800f51e:	68e2      	ldr	r2, [r4, #12]
 800f520:	686b      	ldr	r3, [r5, #4]
 800f522:	429a      	cmp	r2, r3
 800f524:	d023      	beq.n	800f56e <tcpIsDuplicateSyn+0x6a>
      {
         //Just for sanity
      }

      //Next item
      queueItem = queueItem->next;
 800f526:	6824      	ldr	r4, [r4, #0]
   while(queueItem != NULL)
 800f528:	b35c      	cbz	r4, 800f582 <tcpIsDuplicateSyn+0x7e>
      if(queueItem->srcAddr.length == sizeof(Ipv4Addr) &&
 800f52a:	68a3      	ldr	r3, [r4, #8]
 800f52c:	2b04      	cmp	r3, #4
 800f52e:	d0f0      	beq.n	800f512 <tcpIsDuplicateSyn+0xe>
      if(queueItem->srcAddr.length == sizeof(Ipv6Addr) &&
 800f530:	2b10      	cmp	r3, #16
 800f532:	d1f8      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
         queueItem->destAddr.length == sizeof(Ipv6Addr) &&
 800f534:	6a23      	ldr	r3, [r4, #32]
      if(queueItem->srcAddr.length == sizeof(Ipv6Addr) &&
 800f536:	2b10      	cmp	r3, #16
 800f538:	d1f5      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
         pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 800f53a:	682b      	ldr	r3, [r5, #0]
         queueItem->destAddr.length == sizeof(Ipv6Addr) &&
 800f53c:	2b28      	cmp	r3, #40	@ 0x28
 800f53e:	d1f2      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
         if(ipv6CompAddr(&queueItem->srcAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr) &&
 800f540:	2210      	movs	r2, #16
 800f542:	1d29      	adds	r1, r5, #4
 800f544:	f104 000c 	add.w	r0, r4, #12
 800f548:	f005 fb72 	bl	8014c30 <memcmp>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	d1ea      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
            ipv6CompAddr(&queueItem->destAddr.ipv6Addr, &pseudoHeader->ipv6Data.destAddr))
 800f550:	2210      	movs	r2, #16
 800f552:	f105 0114 	add.w	r1, r5, #20
 800f556:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800f55a:	f005 fb69 	bl	8014c30 <memcmp>
         if(ipv6CompAddr(&queueItem->srcAddr.ipv6Addr, &pseudoHeader->ipv6Data.srcAddr) &&
 800f55e:	2800      	cmp	r0, #0
 800f560:	d1e1      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
            if(queueItem->srcPort == segment->srcPort)
 800f562:	8ba2      	ldrh	r2, [r4, #28]
 800f564:	883b      	ldrh	r3, [r7, #0]
 800f566:	429a      	cmp	r2, r3
 800f568:	d1dd      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
               flag = TRUE;
 800f56a:	2601      	movs	r6, #1
 800f56c:	e7db      	b.n	800f526 <tcpIsDuplicateSyn+0x22>
            queueItem->destAddr.ipv4Addr == pseudoHeader->ipv4Data.destAddr)
 800f56e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800f570:	68ab      	ldr	r3, [r5, #8]
         if(queueItem->srcAddr.ipv4Addr == pseudoHeader->ipv4Data.srcAddr &&
 800f572:	429a      	cmp	r2, r3
 800f574:	d1d7      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
            if(queueItem->srcPort == segment->srcPort)
 800f576:	8ba2      	ldrh	r2, [r4, #28]
 800f578:	883b      	ldrh	r3, [r7, #0]
 800f57a:	429a      	cmp	r2, r3
 800f57c:	d1d3      	bne.n	800f526 <tcpIsDuplicateSyn+0x22>
               flag = TRUE;
 800f57e:	2601      	movs	r6, #1
 800f580:	e7d1      	b.n	800f526 <tcpIsDuplicateSyn+0x22>
   }

   //Return TRUE if the SYN segment is a duplicate
   return flag;
}
 800f582:	4630      	mov	r0, r6
 800f584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f586 <tcpIsDuplicateAck>:

   //An ACK is considered a duplicate when the following conditions are met
   flag = FALSE;

   //The receiver of the ACK has outstanding data
   if(socket->retransmitQueue != NULL)
 800f586:	f8d0 3218 	ldr.w	r3, [r0, #536]	@ 0x218
 800f58a:	b193      	cbz	r3, 800f5b2 <tcpIsDuplicateAck+0x2c>
   {
      //The incoming acknowledgment carries no data
      if(length == 0)
 800f58c:	b99a      	cbnz	r2, 800f5b6 <tcpIsDuplicateAck+0x30>
      {
         //The SYN and FIN bits are both off
         if((segment->flags & (TCP_FLAG_SYN | TCP_FLAG_FIN)) == 0)
 800f58e:	7b4b      	ldrb	r3, [r1, #13]
 800f590:	f013 0f03 	tst.w	r3, #3
 800f594:	d111      	bne.n	800f5ba <tcpIsDuplicateAck+0x34>
         {
            //The acknowledgment number is equal to the greatest acknowledgment
            //received on the given connection
            if(segment->ackNum == socket->sndUna)
 800f596:	688a      	ldr	r2, [r1, #8]
 800f598:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 800f59c:	429a      	cmp	r2, r3
 800f59e:	d001      	beq.n	800f5a4 <tcpIsDuplicateAck+0x1e>
   flag = FALSE;
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	4770      	bx	lr
            {
               //The advertised window in the incoming acknowledgment equals
               //the advertised window in the last incoming acknowledgment
               if(segment->window == socket->sndWnd)
 800f5a4:	89ca      	ldrh	r2, [r1, #14]
 800f5a6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d007      	beq.n	800f5be <tcpIsDuplicateAck+0x38>
   flag = FALSE;
 800f5ae:	2000      	movs	r0, #0
 800f5b0:	4770      	bx	lr
 800f5b2:	2000      	movs	r0, #0
 800f5b4:	4770      	bx	lr
 800f5b6:	2000      	movs	r0, #0
 800f5b8:	4770      	bx	lr
 800f5ba:	2000      	movs	r0, #0
 800f5bc:	4770      	bx	lr
               {
                  //Duplicate ACK
                  flag = TRUE;
 800f5be:	2001      	movs	r0, #1
      }
   }

   //Return TRUE if the acknowledgment is a duplicate
   return flag;
}
 800f5c0:	4770      	bx	lr

0800f5c2 <tcpUpdateRetransmitQueue>:
 * @brief Remove acknowledged segments from retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateRetransmitQueue(Socket *socket)
{
 800f5c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c6:	4606      	mov	r6, r0
   TcpQueueItem *queueItem;
   TcpHeader *header;

   //Point to the first item of the retransmission queue
   prevQueueItem = NULL;
   queueItem = socket->retransmitQueue;
 800f5c8:	f8d0 4218 	ldr.w	r4, [r0, #536]	@ 0x218
   prevQueueItem = NULL;
 800f5cc:	2700      	movs	r7, #0

   //Loop through retransmission queue
   while(queueItem != NULL)
 800f5ce:	e01d      	b.n	800f60c <tcpUpdateRetransmitQueue+0x4a>
      {
         length = queueItem->length + 1;
      }
      else
      {
         length = queueItem->length;
 800f5d0:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800f5d4:	e001      	b.n	800f5da <tcpUpdateRetransmitQueue+0x18>
         length = 1;
 800f5d6:	f04f 0801 	mov.w	r8, #1
      }

      //If an acknowledgment is received for a segment before its timer
      //expires, the segment is removed from the retransmission queue
      if(TCP_CMP_SEQ(socket->sndUna, ntohl(header->seqNum) + length) >= 0)
 800f5da:	f8d6 5094 	ldr.w	r5, [r6, #148]	@ 0x94
 800f5de:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f5e0:	f7f1 f81f 	bl	8000622 <swapInt32>
 800f5e4:	4440      	add	r0, r8
 800f5e6:	1a2d      	subs	r5, r5, r0
 800f5e8:	2d00      	cmp	r5, #0
 800f5ea:	db27      	blt.n	800f63c <tcpUpdateRetransmitQueue+0x7a>
      {
         //First item of the queue?
         if(prevQueueItem == NULL)
 800f5ec:	b1ef      	cbz	r7, 800f62a <tcpUpdateRetransmitQueue+0x68>
            queueItem = socket->retransmitQueue;
         }
         else
         {
            //Remove the current item from the queue
            prevQueueItem->next = queueItem->next;
 800f5ee:	6823      	ldr	r3, [r4, #0]
 800f5f0:	603b      	str	r3, [r7, #0]
            //The item can now be safely deleted
            memPoolFree(queueItem);
 800f5f2:	4620      	mov	r0, r4
 800f5f4:	f7fc fd3c 	bl	800c070 <memPoolFree>
            //Point to the next item
            queueItem = prevQueueItem->next;
 800f5f8:	683c      	ldr	r4, [r7, #0]
         }

         //When an ACK is received that acknowledges new data, restart the
         //retransmission timer so that it will expire after RTO seconds
         netStartTimer(&socket->retransmitTimer, socket->rto);
 800f5fa:	f8d6 10d0 	ldr.w	r1, [r6, #208]	@ 0xd0
 800f5fe:	f506 7007 	add.w	r0, r6, #540	@ 0x21c
 800f602:	f7fd f95b 	bl	800c8bc <netStartTimer>
         //Reset retransmission counter
         socket->retransmitCount = 0;
 800f606:	2300      	movs	r3, #0
 800f608:	f8c6 3228 	str.w	r3, [r6, #552]	@ 0x228
   while(queueItem != NULL)
 800f60c:	b1cc      	cbz	r4, 800f642 <tcpUpdateRetransmitQueue+0x80>
      if(header->flags & TCP_FLAG_SYN)
 800f60e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800f612:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800f616:	f013 0f02 	tst.w	r3, #2
 800f61a:	d1dc      	bne.n	800f5d6 <tcpUpdateRetransmitQueue+0x14>
      else if(header->flags & TCP_FLAG_FIN)
 800f61c:	f012 0f01 	tst.w	r2, #1
 800f620:	d0d6      	beq.n	800f5d0 <tcpUpdateRetransmitQueue+0xe>
         length = queueItem->length + 1;
 800f622:	6863      	ldr	r3, [r4, #4]
 800f624:	f103 0801 	add.w	r8, r3, #1
 800f628:	e7d7      	b.n	800f5da <tcpUpdateRetransmitQueue+0x18>
            socket->retransmitQueue = queueItem->next;
 800f62a:	6823      	ldr	r3, [r4, #0]
 800f62c:	f8c6 3218 	str.w	r3, [r6, #536]	@ 0x218
            memPoolFree(queueItem);
 800f630:	4620      	mov	r0, r4
 800f632:	f7fc fd1d 	bl	800c070 <memPoolFree>
            queueItem = socket->retransmitQueue;
 800f636:	f8d6 4218 	ldr.w	r4, [r6, #536]	@ 0x218
 800f63a:	e7de      	b.n	800f5fa <tcpUpdateRetransmitQueue+0x38>
      }
      //No acknowledgment received for the current segment...
      else
      {
         //Point to the next item
         prevQueueItem = queueItem;
 800f63c:	4627      	mov	r7, r4
         queueItem = queueItem->next;
 800f63e:	6824      	ldr	r4, [r4, #0]
 800f640:	e7e4      	b.n	800f60c <tcpUpdateRetransmitQueue+0x4a>
      }
   }

   //When all outstanding data has been acknowledged,
   //turn off the retransmission timer
   if(socket->retransmitQueue == NULL)
 800f642:	f8d6 3218 	ldr.w	r3, [r6, #536]	@ 0x218
 800f646:	b10b      	cbz	r3, 800f64c <tcpUpdateRetransmitQueue+0x8a>
      netStopTimer(&socket->retransmitTimer);
}
 800f648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netStopTimer(&socket->retransmitTimer);
 800f64c:	f506 7007 	add.w	r0, r6, #540	@ 0x21c
 800f650:	f7fd f93e 	bl	800c8d0 <netStopTimer>
}
 800f654:	e7f8      	b.n	800f648 <tcpUpdateRetransmitQueue+0x86>

0800f656 <tcpFlushRetransmitQueue>:
 * @brief Flush retransmission queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushRetransmitQueue(Socket *socket)
{
 800f656:	b538      	push	{r3, r4, r5, lr}
 800f658:	4605      	mov	r5, r0
   //Point to the first item in the retransmission queue
   TcpQueueItem *queueItem = socket->retransmitQueue;
 800f65a:	f8d0 0218 	ldr.w	r0, [r0, #536]	@ 0x218

   //Loop through retransmission queue
   while(queueItem != NULL)
 800f65e:	e003      	b.n	800f668 <tcpFlushRetransmitQueue+0x12>
   {
      //Keep track of the next item in the queue
      TcpQueueItem *nextQueueItem = queueItem->next;
 800f660:	6804      	ldr	r4, [r0, #0]
      //Free previously allocated memory
      memPoolFree(queueItem);
 800f662:	f7fc fd05 	bl	800c070 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 800f666:	4620      	mov	r0, r4
   while(queueItem != NULL)
 800f668:	2800      	cmp	r0, #0
 800f66a:	d1f9      	bne.n	800f660 <tcpFlushRetransmitQueue+0xa>
   }

   //The retransmission queue is now flushed
   socket->retransmitQueue = NULL;
 800f66c:	2300      	movs	r3, #0
 800f66e:	f8c5 3218 	str.w	r3, [r5, #536]	@ 0x218

   //Turn off the retransmission timer
   netStopTimer(&socket->retransmitTimer);
 800f672:	f505 7007 	add.w	r0, r5, #540	@ 0x21c
 800f676:	f7fd f92b 	bl	800c8d0 <netStopTimer>
}
 800f67a:	bd38      	pop	{r3, r4, r5, pc}

0800f67c <tcpFlushSynQueue>:
 * @brief Flush SYN queue
 * @param[in] socket Handle referencing the socket
 **/

void tcpFlushSynQueue(Socket *socket)
{
 800f67c:	b538      	push	{r3, r4, r5, lr}
 800f67e:	4605      	mov	r5, r0
   //Point to the first item in the SYN queue
   TcpSynQueueItem *queueItem = socket->synQueue;
 800f680:	f8d0 022c 	ldr.w	r0, [r0, #556]	@ 0x22c

   //Loop through SYN queue
   while(queueItem != NULL)
 800f684:	e003      	b.n	800f68e <tcpFlushSynQueue+0x12>
   {
      //Keep track of the next item in the queue
      TcpSynQueueItem *nextQueueItem = queueItem->next;
 800f686:	6804      	ldr	r4, [r0, #0]
      //Free previously allocated memory
      memPoolFree(queueItem);
 800f688:	f7fc fcf2 	bl	800c070 <memPoolFree>
      //Point to the next item
      queueItem = nextQueueItem;
 800f68c:	4620      	mov	r0, r4
   while(queueItem != NULL)
 800f68e:	2800      	cmp	r0, #0
 800f690:	d1f9      	bne.n	800f686 <tcpFlushSynQueue+0xa>
   }

   //SYN queue was successfully flushed
   socket->synQueue = NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	f8c5 322c 	str.w	r3, [r5, #556]	@ 0x22c
}
 800f698:	bd38      	pop	{r3, r4, r5, pc}

0800f69a <tcpDeleteControlBlock>:
{
 800f69a:	b510      	push	{r4, lr}
 800f69c:	4604      	mov	r4, r0
   tcpFlushRetransmitQueue(socket);
 800f69e:	f7ff ffda 	bl	800f656 <tcpFlushRetransmitQueue>
   tcpFlushSynQueue(socket);
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	f7ff ffea 	bl	800f67c <tcpFlushSynQueue>
   netBufferSetLength((NetBuffer *) &socket->txBuffer, 0);
 800f6a8:	2100      	movs	r1, #0
 800f6aa:	f504 7088 	add.w	r0, r4, #272	@ 0x110
 800f6ae:	f7fc fcf0 	bl	800c092 <netBufferSetLength>
   netBufferSetLength((NetBuffer *) &socket->rxBuffer, 0);
 800f6b2:	2100      	movs	r1, #0
 800f6b4:	f504 70ca 	add.w	r0, r4, #404	@ 0x194
 800f6b8:	f7fc fceb 	bl	800c092 <netBufferSetLength>
}
 800f6bc:	bd10      	pop	{r4, pc}

0800f6be <tcpComputeWindowScaleFactor>:
   }

   //The window scale is fixed in each direction when a connection is opened
   socket->rcvWndShift = n;
#endif
}
 800f6be:	4770      	bx	lr

0800f6c0 <tcpUpdateSackBlocks>:
 * @param[in,out] leftEdge First sequence number occupied by the incoming data
 * @param[in,out] rightEdge Sequence number immediately following the incoming data
 **/

void tcpUpdateSackBlocks(Socket *socket, uint32_t *leftEdge, uint32_t *rightEdge)
{
 800f6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c4:	4605      	mov	r5, r0
 800f6c6:	460f      	mov	r7, r1
 800f6c8:	4616      	mov	r6, r2
   uint_t i = 0;
 800f6ca:	2400      	movs	r4, #0

   //Loop through the blocks
   while(i < socket->sackBlockCount)
 800f6cc:	e000      	b.n	800f6d0 <tcpUpdateSackBlocks+0x10>
         socket->sackBlockCount--;
      }
      else
      {
         //Point to the next block
         i++;
 800f6ce:	3401      	adds	r4, #1
   while(i < socket->sackBlockCount)
 800f6d0:	f8d5 810c 	ldr.w	r8, [r5, #268]	@ 0x10c
 800f6d4:	45a0      	cmp	r8, r4
 800f6d6:	d929      	bls.n	800f72c <tcpUpdateSackBlocks+0x6c>
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 800f6d8:	6833      	ldr	r3, [r6, #0]
 800f6da:	f104 001d 	add.w	r0, r4, #29
 800f6de:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
 800f6e2:	6842      	ldr	r2, [r0, #4]
 800f6e4:	1a9b      	subs	r3, r3, r2
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	dbf1      	blt.n	800f6ce <tcpUpdateSackBlocks+0xe>
         TCP_CMP_SEQ(*leftEdge, socket->sackBlock[i].rightEdge) <= 0)
 800f6ea:	6839      	ldr	r1, [r7, #0]
 800f6ec:	6883      	ldr	r3, [r0, #8]
 800f6ee:	1acb      	subs	r3, r1, r3
      if(TCP_CMP_SEQ(*rightEdge, socket->sackBlock[i].leftEdge) >= 0 &&
 800f6f0:	2b00      	cmp	r3, #0
 800f6f2:	dcec      	bgt.n	800f6ce <tcpUpdateSackBlocks+0xe>
         *leftEdge = MIN(*leftEdge, socket->sackBlock[i].leftEdge);
 800f6f4:	428a      	cmp	r2, r1
 800f6f6:	bf28      	it	cs
 800f6f8:	460a      	movcs	r2, r1
 800f6fa:	603a      	str	r2, [r7, #0]
         *rightEdge = MAX(*rightEdge, socket->sackBlock[i].rightEdge);
 800f6fc:	6883      	ldr	r3, [r0, #8]
 800f6fe:	6832      	ldr	r2, [r6, #0]
 800f700:	4293      	cmp	r3, r2
 800f702:	bf38      	it	cc
 800f704:	4613      	movcc	r3, r2
 800f706:	6033      	str	r3, [r6, #0]
         osMemmove(socket->sackBlock + i, socket->sackBlock + i + 1,
 800f708:	f105 00ec 	add.w	r0, r5, #236	@ 0xec
 800f70c:	1c61      	adds	r1, r4, #1
 800f70e:	f1c4 0203 	rsb	r2, r4, #3
 800f712:	00d2      	lsls	r2, r2, #3
 800f714:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800f718:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800f71c:	f005 fa98 	bl	8014c50 <memmove>
         socket->sackBlockCount--;
 800f720:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
 800f724:	3b01      	subs	r3, #1
 800f726:	f8c5 310c 	str.w	r3, [r5, #268]	@ 0x10c
 800f72a:	e7d1      	b.n	800f6d0 <tcpUpdateSackBlocks+0x10>
      }
   }

   //Check whether the incoming segment was received out of order
   if(TCP_CMP_SEQ(*leftEdge, socket->rcvNxt) > 0)
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 800f732:	1a9b      	subs	r3, r3, r2
 800f734:	2b00      	cmp	r3, #0
 800f736:	dc01      	bgt.n	800f73c <tcpUpdateSackBlocks+0x7c>
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
      {
         socket->sackBlockCount++;
      }
   }
}
 800f738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      osMemmove(socket->sackBlock + 1, socket->sackBlock,
 800f73c:	2218      	movs	r2, #24
 800f73e:	f105 01ec 	add.w	r1, r5, #236	@ 0xec
 800f742:	f105 00f4 	add.w	r0, r5, #244	@ 0xf4
 800f746:	f005 fa83 	bl	8014c50 <memmove>
      socket->sackBlock[0].leftEdge = *leftEdge;
 800f74a:	683b      	ldr	r3, [r7, #0]
 800f74c:	f8c5 30ec 	str.w	r3, [r5, #236]	@ 0xec
      socket->sackBlock[0].rightEdge = *rightEdge;
 800f750:	6833      	ldr	r3, [r6, #0]
 800f752:	f8c5 30f0 	str.w	r3, [r5, #240]	@ 0xf0
      if(socket->sackBlockCount < TCP_MAX_SACK_BLOCKS)
 800f756:	f1b8 0f03 	cmp.w	r8, #3
 800f75a:	d8ed      	bhi.n	800f738 <tcpUpdateSackBlocks+0x78>
         socket->sackBlockCount++;
 800f75c:	f108 0301 	add.w	r3, r8, #1
 800f760:	f8c5 310c 	str.w	r3, [r5, #268]	@ 0x10c
}
 800f764:	e7e8      	b.n	800f738 <tcpUpdateSackBlocks+0x78>

0800f766 <tcpUpdateSendWindow>:
 * @param[in] socket Handle referencing the socket
 * @param[in] segment Pointer to the incoming TCP segment
 **/

void tcpUpdateSendWindow(Socket *socket, const TcpHeader *segment)
{
 800f766:	b570      	push	{r4, r5, r6, lr}
 800f768:	4604      	mov	r4, r0
 800f76a:	460d      	mov	r5, r1
   //the exception of SYN segments, MUST be left-shifted by Snd.Wind.Shift bits
   //before updating SND.WND (refer to RFC 7323, section 2.3)
   window = (uint32_t) segment->window << socket->sndWndShift;
#else
   //The maximum unscaled window is 2^16 - 1
   window = segment->window;
 800f76c:	89ce      	ldrh	r6, [r1, #14]
#endif

   //Case where neither the sequence nor the acknowledgment number is increased
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 800f76e:	684b      	ldr	r3, [r1, #4]
 800f770:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 800f774:	4293      	cmp	r3, r2
 800f776:	d01c      	beq.n	800f7b2 <tcpUpdateSendWindow+0x4c>
         //Maximum send window it has seen so far on the connection
         socket->maxSndWnd = MAX(socket->maxSndWnd, window);
      }
   }
   //Case where the sequence or the acknowledgment number is increased
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 800f778:	1a9b      	subs	r3, r3, r2
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	db18      	blt.n	800f7b0 <tcpUpdateSendWindow+0x4a>
      TCP_CMP_SEQ(segment->ackNum, socket->sndWl2) >= 0)
 800f77e:	68ab      	ldr	r3, [r5, #8]
 800f780:	f8d4 20ac 	ldr.w	r2, [r4, #172]	@ 0xac
 800f784:	1a9b      	subs	r3, r3, r2
   else if(TCP_CMP_SEQ(segment->seqNum, socket->sndWl1) >= 0 &&
 800f786:	2b00      	cmp	r3, #0
 800f788:	db12      	blt.n	800f7b0 <tcpUpdateSendWindow+0x4a>
   {
      //Check whether the remote host advertises a zero window
      if(window == 0 && socket->sndWnd != 0)
 800f78a:	b916      	cbnz	r6, 800f792 <tcpUpdateSendWindow+0x2c>
 800f78c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800f790:	bb43      	cbnz	r3, 800f7e4 <tcpUpdateSendWindow+0x7e>
         netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
      }

      //Update the send window and record the sequence number and the
      //acknowledgment number used to update SND.WND
      socket->sndWnd = window;
 800f792:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
      socket->sndWl1 = segment->seqNum;
 800f796:	686b      	ldr	r3, [r5, #4]
 800f798:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
      socket->sndWl2 = segment->ackNum;
 800f79c:	68ab      	ldr	r3, [r5, #8]
 800f79e:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac

      //Maximum send window it has seen so far on the connection
      socket->maxSndWnd = MAX(socket->maxSndWnd, window);
 800f7a2:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800f7a6:	42b3      	cmp	r3, r6
 800f7a8:	bf38      	it	cc
 800f7aa:	4633      	movcc	r3, r6
 800f7ac:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
   }
   else
   {
      //Just for sanity
   }
}
 800f7b0:	bd70      	pop	{r4, r5, r6, pc}
   if(segment->seqNum == socket->sndWl1 && segment->ackNum == socket->sndWl2)
 800f7b2:	6888      	ldr	r0, [r1, #8]
 800f7b4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	@ 0xac
 800f7b8:	4288      	cmp	r0, r1
 800f7ba:	d1dd      	bne.n	800f778 <tcpUpdateSendWindow+0x12>
      if(window > socket->sndWnd)
 800f7bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
 800f7c0:	42b3      	cmp	r3, r6
 800f7c2:	d2f5      	bcs.n	800f7b0 <tcpUpdateSendWindow+0x4a>
         socket->sndWnd = window;
 800f7c4:	f8c4 60a0 	str.w	r6, [r4, #160]	@ 0xa0
         socket->sndWl1 = segment->seqNum;
 800f7c8:	686b      	ldr	r3, [r5, #4]
 800f7ca:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
         socket->sndWl2 = segment->ackNum;
 800f7ce:	68ab      	ldr	r3, [r5, #8]
 800f7d0:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
         socket->maxSndWnd = MAX(socket->maxSndWnd, window);
 800f7d4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800f7d8:	42b3      	cmp	r3, r6
 800f7da:	bf38      	it	cc
 800f7dc:	4633      	movcc	r3, r6
 800f7de:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
 800f7e2:	e7e5      	b.n	800f7b0 <tcpUpdateSendWindow+0x4a>
         socket->wndProbeCount = 0;
 800f7e4:	2300      	movs	r3, #0
 800f7e6:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
         socket->wndProbeInterval = TCP_DEFAULT_PROBE_INTERVAL;
 800f7ea:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f7ee:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
         netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 800f7f2:	f504 700f 	add.w	r0, r4, #572	@ 0x23c
 800f7f6:	f7fd f861 	bl	800c8bc <netStartTimer>
 800f7fa:	e7ca      	b.n	800f792 <tcpUpdateSendWindow+0x2c>

0800f7fc <tcpComputeRto>:
 * @param[in] socket Handle referencing the socket
 * @return TRUE if the RTT measurement is complete, else FALSE
 **/

bool_t tcpComputeRto(Socket *socket)
{
 800f7fc:	b538      	push	{r3, r4, r5, lr}
 800f7fe:	4604      	mov	r4, r0

   //Clear flag
   flag = FALSE;

   //TCP implementation takes one RTT measurement at a time
   if(socket->rttBusy)
 800f800:	f8d0 00bc 	ldr.w	r0, [r0, #188]	@ 0xbc
 800f804:	b138      	cbz	r0, 800f816 <tcpComputeRto+0x1a>
   {
      //Ensure the incoming ACK number covers the expected sequence number
      if(TCP_CMP_SEQ(socket->sndUna, socket->rttSeqNum) > 0)
 800f806:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 800f80a:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
 800f80e:	1a9b      	subs	r3, r3, r2
 800f810:	2b00      	cmp	r3, #0
 800f812:	dc01      	bgt.n	800f818 <tcpComputeRto+0x1c>
   flag = FALSE;
 800f814:	2000      	movs	r0, #0
      }
   }

   //Return TRUE if the RTT measurement is complete
   return flag;
}
 800f816:	bd38      	pop	{r3, r4, r5, pc}
         r = osGetSystemTime() - socket->rttStartTime;
 800f818:	f7f0 fff0 	bl	80007fc <osGetSystemTime>
 800f81c:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 800f820:	1a85      	subs	r5, r0, r2
         if(socket->srtt == 0 && socket->rttvar == 0)
 800f822:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800f826:	b943      	cbnz	r3, 800f83a <tcpComputeRto+0x3e>
 800f828:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
 800f82c:	b929      	cbnz	r1, 800f83a <tcpComputeRto+0x3e>
            socket->srtt = r;
 800f82e:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
            socket->rttvar = r / 2;
 800f832:	086d      	lsrs	r5, r5, #1
 800f834:	f8c4 50cc 	str.w	r5, [r4, #204]	@ 0xcc
 800f838:	e010      	b.n	800f85c <tcpComputeRto+0x60>
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 800f83a:	42ab      	cmp	r3, r5
 800f83c:	d229      	bcs.n	800f892 <tcpComputeRto+0x96>
 800f83e:	1ae9      	subs	r1, r5, r3
            socket->rttvar = ((socket->rttvar * 3) + delta) / 4;
 800f840:	f8d4 20cc 	ldr.w	r2, [r4, #204]	@ 0xcc
 800f844:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f848:	440a      	add	r2, r1
 800f84a:	0892      	lsrs	r2, r2, #2
 800f84c:	f8c4 20cc 	str.w	r2, [r4, #204]	@ 0xcc
            socket->srtt = ((socket->srtt * 7) + r) / 8;
 800f850:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800f854:	442b      	add	r3, r5
 800f856:	08db      	lsrs	r3, r3, #3
 800f858:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
         socket->rto = socket->srtt + (socket->rttvar * 4);
 800f85c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 800f860:	f8d4 20cc 	ldr.w	r2, [r4, #204]	@ 0xcc
 800f864:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800f868:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
         socket->rto = MAX(socket->rto, TCP_MIN_RTO);
 800f86c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f870:	bf38      	it	cc
 800f872:	f44f 737a 	movcc.w	r3, #1000	@ 0x3e8
 800f876:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
         socket->rto = MIN(socket->rto, TCP_MAX_RTO);
 800f87a:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800f87e:	429a      	cmp	r2, r3
 800f880:	bf28      	it	cs
 800f882:	461a      	movcs	r2, r3
 800f884:	f8c4 20d0 	str.w	r2, [r4, #208]	@ 0xd0
         socket->rttBusy = FALSE;
 800f888:	2300      	movs	r3, #0
 800f88a:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
         flag = TRUE;
 800f88e:	2001      	movs	r0, #1
 800f890:	e7c1      	b.n	800f816 <tcpComputeRto+0x1a>
            delta = (r > socket->srtt) ? (r - socket->srtt) : (socket->srtt - r);
 800f892:	1a12      	subs	r2, r2, r0
 800f894:	18d1      	adds	r1, r2, r3
 800f896:	e7d3      	b.n	800f840 <tcpComputeRto+0x44>

0800f898 <tcpUpdateEvents>:
 * @brief Update TCP related events
 * @param[in] socket Handle referencing the socket
 **/

void tcpUpdateEvents(Socket *socket)
{
 800f898:	b570      	push	{r4, r5, r6, lr}
 800f89a:	4604      	mov	r4, r0
   //Clear event flags
   socket->eventFlags = 0;
 800f89c:	2300      	movs	r3, #0
 800f89e:	66c3      	str	r3, [r0, #108]	@ 0x6c

   //Check current TCP state
   switch(socket->state)
 800f8a0:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 800f8a4:	2b0a      	cmp	r3, #10
 800f8a6:	d809      	bhi.n	800f8bc <tcpUpdateEvents+0x24>
 800f8a8:	e8df f003 	tbb	[pc, r3]
 800f8ac:	08080828 	.word	0x08080828
 800f8b0:	06222206 	.word	0x06222206
 800f8b4:	221d      	.short	0x221d
 800f8b6:	28          	.byte	0x28
 800f8b7:	00          	.byte	0x00
   {
   //ESTABLISHED or FIN-WAIT-1 state?
   case TCP_STATE_ESTABLISHED:
   case TCP_STATE_FIN_WAIT_1:
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 800f8b8:	2202      	movs	r2, #2
 800f8ba:	66c2      	str	r2, [r0, #108]	@ 0x6c
   default:
      break;
   }

   //Handle TX specific events
   if(socket->state == TCP_STATE_SYN_SENT ||
 800f8bc:	1e9a      	subs	r2, r3, #2
 800f8be:	b2d2      	uxtb	r2, r2
 800f8c0:	2a01      	cmp	r2, #1
 800f8c2:	d923      	bls.n	800f90c <tcpUpdateEvents+0x74>
   {
      //Disallow write operations until the connection is established
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
   }
   else if(socket->state == TCP_STATE_ESTABLISHED ||
 800f8c4:	1f1a      	subs	r2, r3, #4
 800f8c6:	b2d2      	uxtb	r2, r2
 800f8c8:	2a01      	cmp	r2, #1
 800f8ca:	d92f      	bls.n	800f92c <tcpUpdateEvents+0x94>
         {
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
         }
      }
   }
   else if(socket->state != TCP_STATE_LISTEN)
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d024      	beq.n	800f91a <tcpUpdateEvents+0x82>
   {
      //Unblock user task if the connection is being closed
      socket->eventFlags |= SOCKET_EVENT_TX_READY;
 800f8d0:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800f8d2:	f042 0108 	orr.w	r1, r2, #8
 800f8d6:	66e1      	str	r1, [r4, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 800f8d8:	f042 0118 	orr.w	r1, r2, #24
 800f8dc:	66e1      	str	r1, [r4, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 800f8de:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 800f8e2:	66e2      	str	r2, [r4, #108]	@ 0x6c
 800f8e4:	e019      	b.n	800f91a <tcpUpdateEvents+0x82>
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 800f8e6:	2202      	movs	r2, #2
 800f8e8:	66c2      	str	r2, [r0, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 800f8ea:	2242      	movs	r2, #66	@ 0x42
 800f8ec:	66c2      	str	r2, [r0, #108]	@ 0x6c
      break;
 800f8ee:	e7e5      	b.n	800f8bc <tcpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_CONNECTED;
 800f8f0:	2202      	movs	r2, #2
 800f8f2:	66c2      	str	r2, [r0, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 800f8f4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800f8f8:	66c2      	str	r2, [r0, #108]	@ 0x6c
      break;
 800f8fa:	e7df      	b.n	800f8bc <tcpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_CLOSED;
 800f8fc:	2204      	movs	r2, #4
 800f8fe:	66c2      	str	r2, [r0, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_TX_SHUTDOWN;
 800f900:	2244      	movs	r2, #68	@ 0x44
 800f902:	66c2      	str	r2, [r0, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_RX_SHUTDOWN;
 800f904:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 800f908:	66c2      	str	r2, [r0, #108]	@ 0x6c
      break;
 800f90a:	e7d7      	b.n	800f8bc <tcpUpdateEvents+0x24>
      socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 800f90c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800f90e:	f042 0110 	orr.w	r1, r2, #16
 800f912:	66e1      	str	r1, [r4, #108]	@ 0x6c
      socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 800f914:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800f918:	66e2      	str	r2, [r4, #108]	@ 0x6c
   }

   //Handle RX specific events
   if(socket->state == TCP_STATE_ESTABLISHED ||
 800f91a:	3b01      	subs	r3, #1
 800f91c:	2b07      	cmp	r3, #7
 800f91e:	d835      	bhi.n	800f98c <tcpUpdateEvents+0xf4>
 800f920:	e8df f003 	tbb	[pc, r3]
 800f924:	21383829 	.word	0x21383829
 800f928:	21213434 	.word	0x21213434
      if((socket->sndUser + socket->sndNxt - socket->sndUna) < socket->txBufferSize)
 800f92c:	f8d4 009c 	ldr.w	r0, [r4, #156]	@ 0x9c
 800f930:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
 800f934:	1942      	adds	r2, r0, r5
 800f936:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f93a:	1a52      	subs	r2, r2, r1
 800f93c:	f8d4 6190 	ldr.w	r6, [r4, #400]	@ 0x190
 800f940:	42b2      	cmp	r2, r6
 800f942:	d203      	bcs.n	800f94c <tcpUpdateEvents+0xb4>
         socket->eventFlags |= SOCKET_EVENT_TX_READY;
 800f944:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800f946:	f042 0208 	orr.w	r2, r2, #8
 800f94a:	66e2      	str	r2, [r4, #108]	@ 0x6c
      if(socket->sndUser == 0)
 800f94c:	2800      	cmp	r0, #0
 800f94e:	d1e4      	bne.n	800f91a <tcpUpdateEvents+0x82>
         socket->eventFlags |= SOCKET_EVENT_TX_DONE;
 800f950:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800f952:	f042 0010 	orr.w	r0, r2, #16
 800f956:	66e0      	str	r0, [r4, #108]	@ 0x6c
         if(TCP_CMP_SEQ(socket->sndUna, socket->sndNxt) >= 0)
 800f958:	1b49      	subs	r1, r1, r5
 800f95a:	2900      	cmp	r1, #0
 800f95c:	dbdd      	blt.n	800f91a <tcpUpdateEvents+0x82>
            socket->eventFlags |= SOCKET_EVENT_TX_ACKED;
 800f95e:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 800f962:	66e2      	str	r2, [r4, #108]	@ 0x6c
 800f964:	e7d9      	b.n	800f91a <tcpUpdateEvents+0x82>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
      socket->state == TCP_STATE_FIN_WAIT_2)
   {
      //Data is available for reading?
      if(socket->rcvUser > 0)
 800f966:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
 800f96a:	b19b      	cbz	r3, 800f994 <tcpUpdateEvents+0xfc>
      {
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 800f96c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f96e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f972:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800f974:	e00e      	b.n	800f994 <tcpUpdateEvents+0xfc>
   }
   else if(socket->state == TCP_STATE_LISTEN)
   {
      //If the socket is currently in the listen state, it will be marked
      //as readable if an incoming connection request has been received
      if(socket->synQueue != NULL)
 800f976:	f8d4 322c 	ldr.w	r3, [r4, #556]	@ 0x22c
 800f97a:	b15b      	cbz	r3, 800f994 <tcpUpdateEvents+0xfc>
      {
         socket->eventFlags |= SOCKET_EVENT_ACCEPT;
 800f97c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f97e:	f043 0201 	orr.w	r2, r3, #1
 800f982:	66e2      	str	r2, [r4, #108]	@ 0x6c
         socket->eventFlags |= SOCKET_EVENT_RX_READY;
 800f984:	f043 0381 	orr.w	r3, r3, #129	@ 0x81
 800f988:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800f98a:	e003      	b.n	800f994 <tcpUpdateEvents+0xfc>
   else if(socket->state != TCP_STATE_SYN_SENT &&
      socket->state != TCP_STATE_SYN_RECEIVED)
   {
      //Readability can also indicate that a request to close
      //the socket has been received from the peer
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 800f98c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f98e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f992:	66e3      	str	r3, [r4, #108]	@ 0x6c
   }

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 800f994:	68e3      	ldr	r3, [r4, #12]
 800f996:	b12b      	cbz	r3, 800f9a4 <tcpUpdateEvents+0x10c>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 800f998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f99a:	b14b      	cbz	r3, 800f9b0 <tcpUpdateEvents+0x118>
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 800f99c:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f99e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800f9a2:	66e3      	str	r3, [r4, #108]	@ 0x6c
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
      }
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 800f9a4:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f9a6:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800f9a8:	4013      	ands	r3, r2
 800f9aa:	66e3      	str	r3, [r4, #108]	@ 0x6c

   //Any event to signal?
   if(socket->eventFlags)
 800f9ac:	b92b      	cbnz	r3, 800f9ba <tcpUpdateEvents+0x122>
      if(socket->userEvent != NULL)
      {
         osSetEvent(socket->userEvent);
      }
   }
}
 800f9ae:	bd70      	pop	{r4, r5, r6, pc}
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 800f9b0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800f9b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800f9b6:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800f9b8:	e7f4      	b.n	800f9a4 <tcpUpdateEvents+0x10c>
      osSetEvent(&socket->event);
 800f9ba:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 800f9be:	f7f0 fedd 	bl	800077c <osSetEvent>
      if(socket->userEvent != NULL)
 800f9c2:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 800f9c4:	2800      	cmp	r0, #0
 800f9c6:	d0f2      	beq.n	800f9ae <tcpUpdateEvents+0x116>
         osSetEvent(socket->userEvent);
 800f9c8:	f7f0 fed8 	bl	800077c <osSetEvent>
}
 800f9cc:	e7ef      	b.n	800f9ae <tcpUpdateEvents+0x116>

0800f9ce <tcpChangeState>:
{
 800f9ce:	b508      	push	{r3, lr}
   if(newState == TCP_STATE_CLOSED)
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	b939      	cbnz	r1, 800f9e4 <tcpChangeState+0x16>
      if(socket->state == TCP_STATE_LAST_ACK ||
 800f9d4:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
 800f9d8:	2a0a      	cmp	r2, #10
 800f9da:	bf18      	it	ne
 800f9dc:	2a06      	cmpne	r2, #6
 800f9de:	d106      	bne.n	800f9ee <tcpChangeState+0x20>
         socket->closedFlag = TRUE;
 800f9e0:	2201      	movs	r2, #1
 800f9e2:	67c2      	str	r2, [r0, #124]	@ 0x7c
   socket->state = newState;
 800f9e4:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
   tcpUpdateEvents(socket);
 800f9e8:	f7ff ff56 	bl	800f898 <tcpUpdateEvents>
}
 800f9ec:	bd08      	pop	{r3, pc}
         socket->resetFlag = TRUE;
 800f9ee:	2201      	movs	r2, #1
 800f9f0:	f8c0 2080 	str.w	r2, [r0, #128]	@ 0x80
 800f9f4:	e7f6      	b.n	800f9e4 <tcpChangeState+0x16>
	...

0800f9f8 <tcpWaitForEvents>:
 **/

uint_t tcpWaitForEvents(Socket *socket, uint_t eventMask, systime_t timeout)
{
   //Sanity check
   if(socket == NULL)
 800f9f8:	b1d0      	cbz	r0, 800fa30 <tcpWaitForEvents+0x38>
{
 800f9fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9fc:	4615      	mov	r5, r2
 800f9fe:	4604      	mov	r4, r0
      return 0;

   //Only one of the events listed here may complete the wait
   socket->eventMask = eventMask;
 800fa00:	6681      	str	r1, [r0, #104]	@ 0x68
   //Update TCP related events
   tcpUpdateEvents(socket);
 800fa02:	f7ff ff49 	bl	800f898 <tcpUpdateEvents>

   //No event is signaled?
   if(socket->eventFlags == 0)
 800fa06:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 800fa08:	b10b      	cbz	r3, 800fa0e <tcpWaitForEvents+0x16>
      //Get exclusive access
      osAcquireMutex(&netMutex);
   }

   //Return the list of TCP events that satisfied the wait
   return socket->eventFlags;
 800fa0a:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
}
 800fa0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      osResetEvent(&socket->event);
 800fa0e:	f104 0764 	add.w	r7, r4, #100	@ 0x64
 800fa12:	4638      	mov	r0, r7
 800fa14:	f7f0 feba 	bl	800078c <osResetEvent>
      osReleaseMutex(&netMutex);
 800fa18:	4e06      	ldr	r6, [pc, #24]	@ (800fa34 <tcpWaitForEvents+0x3c>)
 800fa1a:	4630      	mov	r0, r6
 800fa1c:	f7f0 fee6 	bl	80007ec <osReleaseMutex>
      osWaitForEvent(&socket->event, timeout);
 800fa20:	4629      	mov	r1, r5
 800fa22:	4638      	mov	r0, r7
 800fa24:	f7f0 feb8 	bl	8000798 <osWaitForEvent>
      osAcquireMutex(&netMutex);
 800fa28:	4630      	mov	r0, r6
 800fa2a:	f7f0 fed8 	bl	80007de <osAcquireMutex>
 800fa2e:	e7ec      	b.n	800fa0a <tcpWaitForEvents+0x12>
      return 0;
 800fa30:	2000      	movs	r0, #0
}
 800fa32:	4770      	bx	lr
 800fa34:	20000b50 	.word	0x20000b50

0800fa38 <tcpWriteTxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteTxBuffer(Socket *socket, uint32_t seqNum,
   const uint8_t *data, size_t length)
{
 800fa38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa3c:	4605      	mov	r5, r0
 800fa3e:	4617      	mov	r7, r2
 800fa40:	461e      	mov	r6, r3
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 800fa42:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800fa46:	1acc      	subs	r4, r1, r3
 800fa48:	3c01      	subs	r4, #1
 800fa4a:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
 800fa4e:	fbb4 f2f3 	udiv	r2, r4, r3
 800fa52:	fb03 4412 	mls	r4, r3, r2, r4

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 800fa56:	19a2      	adds	r2, r4, r6
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d308      	bcc.n	800fa6e <tcpWriteTxBuffer+0x36>
   {
      //Copy the payload
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 800fa5c:	4633      	mov	r3, r6
 800fa5e:	463a      	mov	r2, r7
 800fa60:	4621      	mov	r1, r4
 800fa62:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 800fa66:	f7fc fc90 	bl	800c38a <netBufferWrite>
      //Wrap around to the beginning of the circular buffer
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
         data + socket->txBufferSize - offset,
         length - socket->txBufferSize + offset);
   }
}
 800fa6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netBufferWrite((NetBuffer *) &socket->txBuffer,
 800fa6e:	f500 7888 	add.w	r8, r0, #272	@ 0x110
 800fa72:	1b1b      	subs	r3, r3, r4
 800fa74:	463a      	mov	r2, r7
 800fa76:	4621      	mov	r1, r4
 800fa78:	4640      	mov	r0, r8
 800fa7a:	f7fc fc86 	bl	800c38a <netBufferWrite>
         data + socket->txBufferSize - offset,
 800fa7e:	f8d5 3190 	ldr.w	r3, [r5, #400]	@ 0x190
 800fa82:	1b1a      	subs	r2, r3, r4
         length - socket->txBufferSize + offset);
 800fa84:	1af3      	subs	r3, r6, r3
      netBufferWrite((NetBuffer *) &socket->txBuffer, 0,
 800fa86:	4423      	add	r3, r4
 800fa88:	443a      	add	r2, r7
 800fa8a:	2100      	movs	r1, #0
 800fa8c:	4640      	mov	r0, r8
 800fa8e:	f7fc fc7c 	bl	800c38a <netBufferWrite>
}
 800fa92:	e7ea      	b.n	800fa6a <tcpWriteTxBuffer+0x32>

0800fa94 <tcpReadTxBuffer>:
 * @return Error code
 **/

error_t tcpReadTxBuffer(Socket *socket, uint32_t seqNum,
   NetBuffer *buffer, size_t length)
{
 800fa94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa98:	4605      	mov	r5, r0
 800fa9a:	4617      	mov	r7, r2
 800fa9c:	461e      	mov	r6, r3
   error_t error;

   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->iss - 1) % socket->txBufferSize;
 800fa9e:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800faa2:	1acc      	subs	r4, r1, r3
 800faa4:	3c01      	subs	r4, #1
 800faa6:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
 800faaa:	fbb4 f2f3 	udiv	r2, r4, r3
 800faae:	fb03 4412 	mls	r4, r3, r2, r4

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->txBufferSize)
 800fab2:	19a2      	adds	r2, r4, r6
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d308      	bcc.n	800faca <tcpReadTxBuffer+0x36>
   {
      //Copy the payload
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 800fab8:	4633      	mov	r3, r6
 800faba:	4622      	mov	r2, r4
 800fabc:	f500 7188 	add.w	r1, r0, #272	@ 0x110
 800fac0:	4638      	mov	r0, r7
 800fac2:	f7fc fb98 	bl	800c1f6 <netBufferConcat>
      }
   }

   //Return status code
   return error;
}
 800fac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 800faca:	f500 7888 	add.w	r8, r0, #272	@ 0x110
 800face:	1b1b      	subs	r3, r3, r4
 800fad0:	4622      	mov	r2, r4
 800fad2:	4641      	mov	r1, r8
 800fad4:	4638      	mov	r0, r7
 800fad6:	f7fc fb8e 	bl	800c1f6 <netBufferConcat>
      if(!error)
 800fada:	2800      	cmp	r0, #0
 800fadc:	d1f3      	bne.n	800fac6 <tcpReadTxBuffer+0x32>
            0, length - socket->txBufferSize + offset);
 800fade:	f8d5 3190 	ldr.w	r3, [r5, #400]	@ 0x190
 800fae2:	1af3      	subs	r3, r6, r3
         error = netBufferConcat(buffer, (NetBuffer *) &socket->txBuffer,
 800fae4:	4423      	add	r3, r4
 800fae6:	2200      	movs	r2, #0
 800fae8:	4641      	mov	r1, r8
 800faea:	4638      	mov	r0, r7
 800faec:	f7fc fb83 	bl	800c1f6 <netBufferConcat>
 800faf0:	e7e9      	b.n	800fac6 <tcpReadTxBuffer+0x32>
	...

0800faf4 <tcpSendSegment>:
{
 800faf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800faf8:	b098      	sub	sp, #96	@ 0x60
 800fafa:	4605      	mov	r5, r0
 800fafc:	460e      	mov	r6, r1
 800fafe:	4691      	mov	r9, r2
 800fb00:	469a      	mov	sl, r3
 800fb02:	f8dd 8080 	ldr.w	r8, [sp, #128]	@ 0x80
   mss = HTONS(socket->rmss);
 800fb06:	f8b0 2088 	ldrh.w	r2, [r0, #136]	@ 0x88
 800fb0a:	ba52      	rev16	r2, r2
 800fb0c:	f8ad 205e 	strh.w	r2, [sp, #94]	@ 0x5e
   buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 800fb10:	a916      	add	r1, sp, #88	@ 0x58
 800fb12:	203c      	movs	r0, #60	@ 0x3c
 800fb14:	f7f5 fd4d 	bl	80055b2 <ipAllocBuffer>
   if(buffer == NULL)
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	f000 8134 	beq.w	800fd86 <tcpSendSegment+0x292>
 800fb1e:	4607      	mov	r7, r0
   segment = netBufferAt(buffer, offset, 0);
 800fb20:	2200      	movs	r2, #0
 800fb22:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800fb24:	f7fc fb48 	bl	800c1b8 <netBufferAt>
 800fb28:	4604      	mov	r4, r0
   segment->srcPort = htons(socket->localPort);
 800fb2a:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 800fb2c:	f7f0 fd76 	bl	800061c <swapInt16>
 800fb30:	8020      	strh	r0, [r4, #0]
   segment->destPort = htons(socket->remotePort);
 800fb32:	8fa8      	ldrh	r0, [r5, #60]	@ 0x3c
 800fb34:	f7f0 fd72 	bl	800061c <swapInt16>
 800fb38:	8060      	strh	r0, [r4, #2]
   segment->seqNum = htonl(seqNum);
 800fb3a:	4648      	mov	r0, r9
 800fb3c:	f7f0 fd71 	bl	8000622 <swapInt32>
 800fb40:	6060      	str	r0, [r4, #4]
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 800fb42:	f016 0f10 	tst.w	r6, #16
 800fb46:	d122      	bne.n	800fb8e <tcpSendSegment+0x9a>
 800fb48:	2000      	movs	r0, #0
 800fb4a:	60a0      	str	r0, [r4, #8]
   segment->reserved1 = 0;
 800fb4c:	7b23      	ldrb	r3, [r4, #12]
 800fb4e:	f023 030f 	bic.w	r3, r3, #15
 800fb52:	7323      	strb	r3, [r4, #12]
   segment->dataOffset = sizeof(TcpHeader) / 4;
 800fb54:	b2db      	uxtb	r3, r3
 800fb56:	2205      	movs	r2, #5
 800fb58:	f362 1307 	bfi	r3, r2, #4, #4
 800fb5c:	7323      	strb	r3, [r4, #12]
   segment->flags = flags;
 800fb5e:	7b63      	ldrb	r3, [r4, #13]
 800fb60:	f366 0305 	bfi	r3, r6, #0, #6
 800fb64:	7363      	strb	r3, [r4, #13]
   segment->reserved2 = 0;
 800fb66:	b2db      	uxtb	r3, r3
 800fb68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fb6c:	7363      	strb	r3, [r4, #13]
   segment->checksum = 0;
 800fb6e:	2300      	movs	r3, #0
 800fb70:	7423      	strb	r3, [r4, #16]
 800fb72:	7463      	strb	r3, [r4, #17]
   segment->urgentPointer = 0;
 800fb74:	74a3      	strb	r3, [r4, #18]
 800fb76:	74e3      	strb	r3, [r4, #19]
   if((flags & TCP_FLAG_SYN) != 0)
 800fb78:	f016 0f02 	tst.w	r6, #2
 800fb7c:	d10b      	bne.n	800fb96 <tcpSendSegment+0xa2>
   segment->window = htons(MIN(socket->rcvWnd, UINT16_MAX));
 800fb7e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800fb82:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 800fb86:	4298      	cmp	r0, r3
 800fb88:	d80d      	bhi.n	800fba6 <tcpSendSegment+0xb2>
 800fb8a:	b280      	uxth	r0, r0
 800fb8c:	e00d      	b.n	800fbaa <tcpSendSegment+0xb6>
   segment->ackNum = (flags & TCP_FLAG_ACK) ? htonl(ackNum) : 0;
 800fb8e:	4650      	mov	r0, sl
 800fb90:	f7f0 fd47 	bl	8000622 <swapInt32>
 800fb94:	e7d9      	b.n	800fb4a <tcpSendSegment+0x56>
      tcpAddOption(segment, TCP_OPTION_MAX_SEGMENT_SIZE, &mss,
 800fb96:	2302      	movs	r3, #2
 800fb98:	f10d 025e 	add.w	r2, sp, #94	@ 0x5e
 800fb9c:	4619      	mov	r1, r3
 800fb9e:	4620      	mov	r0, r4
 800fba0:	f7ff fc44 	bl	800f42c <tcpAddOption>
 800fba4:	e7eb      	b.n	800fb7e <tcpSendSegment+0x8a>
   segment->window = htons(MIN(socket->rcvWnd, UINT16_MAX));
 800fba6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800fbaa:	f7f0 fd37 	bl	800061c <swapInt16>
 800fbae:	81e0      	strh	r0, [r4, #14]
   netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 800fbb0:	7b23      	ldrb	r3, [r4, #12]
 800fbb2:	091b      	lsrs	r3, r3, #4
 800fbb4:	9916      	ldr	r1, [sp, #88]	@ 0x58
 800fbb6:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800fbba:	4638      	mov	r0, r7
 800fbbc:	f7fc fa69 	bl	800c092 <netBufferSetLength>
   if(length > 0)
 800fbc0:	f1b8 0f00 	cmp.w	r8, #0
 800fbc4:	f040 808b 	bne.w	800fcde <tcpSendSegment+0x1ea>
   totalLength = segment->dataOffset * 4 + length;
 800fbc8:	7b26      	ldrb	r6, [r4, #12]
 800fbca:	0936      	lsrs	r6, r6, #4
 800fbcc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
   if(socket->remoteIpAddr.length == sizeof(Ipv4Addr))
 800fbd0:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800fbd2:	2b04      	cmp	r3, #4
 800fbd4:	f000 8091 	beq.w	800fcfa <tcpSendSegment+0x206>
   if(socket->remoteIpAddr.length == sizeof(Ipv6Addr))
 800fbd8:	2b10      	cmp	r3, #16
 800fbda:	f040 80aa 	bne.w	800fd32 <tcpSendSegment+0x23e>
      pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 800fbde:	f04f 0a28 	mov.w	sl, #40	@ 0x28
 800fbe2:	f8cd a02c 	str.w	sl, [sp, #44]	@ 0x2c
      pseudoHeader.ipv6Data.srcAddr = socket->localIpAddr.ipv6Addr;
 800fbe6:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800fbea:	f105 0314 	add.w	r3, r5, #20
 800fbee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbf0:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.destAddr = socket->remoteIpAddr.ipv6Addr;
 800fbf4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 800fbf8:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
 800fbfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800fbfe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.length = htonl(totalLength);
 800fc02:	4630      	mov	r0, r6
 800fc04:	f7f0 fd0d 	bl	8000622 <swapInt32>
 800fc08:	9014      	str	r0, [sp, #80]	@ 0x50
      pseudoHeader.ipv6Data.reserved[0] = 0;
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
      pseudoHeader.ipv6Data.reserved[1] = 0;
 800fc10:	f88d 3055 	strb.w	r3, [sp, #85]	@ 0x55
      pseudoHeader.ipv6Data.reserved[2] = 0;
 800fc14:	f88d 3056 	strb.w	r3, [sp, #86]	@ 0x56
      pseudoHeader.ipv6Data.nextHeader = IPV6_TCP_HEADER;
 800fc18:	2306      	movs	r3, #6
 800fc1a:	f88d 3057 	strb.w	r3, [sp, #87]	@ 0x57
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv6Data,
 800fc1e:	9600      	str	r6, [sp, #0]
 800fc20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fc22:	463a      	mov	r2, r7
 800fc24:	4651      	mov	r1, sl
 800fc26:	4648      	mov	r0, r9
 800fc28:	f7f5 fcae 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800fc2c:	8220      	strh	r0, [r4, #16]
   if(addToQueue)
 800fc2e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	d034      	beq.n	800fc9e <tcpSendSegment+0x1aa>
      if(socket->retransmitQueue == NULL)
 800fc34:	f8d5 3218 	ldr.w	r3, [r5, #536]	@ 0x218
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d07f      	beq.n	800fd3c <tcpSendSegment+0x248>
         while(queueItem->next != NULL)
 800fc3c:	4699      	mov	r9, r3
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d1fb      	bne.n	800fc3c <tcpSendSegment+0x148>
         queueItem->next = memPoolAlloc(sizeof(TcpQueueItem));
 800fc44:	2074      	movs	r0, #116	@ 0x74
 800fc46:	f7fc f9fb 	bl	800c040 <memPoolAlloc>
 800fc4a:	4606      	mov	r6, r0
 800fc4c:	f8c9 0000 	str.w	r0, [r9]
      if(queueItem == NULL)
 800fc50:	2e00      	cmp	r6, #0
 800fc52:	d07a      	beq.n	800fd4a <tcpSendSegment+0x256>
      queueItem->next = NULL;
 800fc54:	2300      	movs	r3, #0
 800fc56:	6033      	str	r3, [r6, #0]
      queueItem->length = length;
 800fc58:	f8c6 8004 	str.w	r8, [r6, #4]
      queueItem->sacked = FALSE;
 800fc5c:	60b3      	str	r3, [r6, #8]
      osMemcpy(queueItem->header, segment, segment->dataOffset * 4);
 800fc5e:	7b22      	ldrb	r2, [r4, #12]
 800fc60:	0912      	lsrs	r2, r2, #4
 800fc62:	0092      	lsls	r2, r2, #2
 800fc64:	4621      	mov	r1, r4
 800fc66:	f106 0038 	add.w	r0, r6, #56	@ 0x38
 800fc6a:	f005 f917 	bl	8014e9c <memcpy>
      queueItem->pseudoHeader = pseudoHeader;
 800fc6e:	f106 0c0c 	add.w	ip, r6, #12
 800fc72:	ae0b      	add	r6, sp, #44	@ 0x2c
 800fc74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fc76:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc7a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fc7c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800fc80:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 800fc84:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
      if(!socket->rttBusy)
 800fc88:	f8d5 30bc 	ldr.w	r3, [r5, #188]	@ 0xbc
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d061      	beq.n	800fd54 <tcpSendSegment+0x260>
      if(!netTimerRunning(&socket->retransmitTimer))
 800fc90:	f505 7407 	add.w	r4, r5, #540	@ 0x21c
 800fc94:	4620      	mov	r0, r4
 800fc96:	f7fc fe1e 	bl	800c8d6 <netTimerRunning>
 800fc9a:	2800      	cmp	r0, #0
 800fc9c:	d06a      	beq.n	800fd74 <tcpSendSegment+0x280>
   ancillary = NET_DEFAULT_TX_ANCILLARY;
 800fc9e:	ac03      	add	r4, sp, #12
 800fca0:	4e3a      	ldr	r6, [pc, #232]	@ (800fd8c <tcpSendSegment+0x298>)
 800fca2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800fca4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fca6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800fcaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   ancillary.ttl = socket->ttl;
 800fcae:	f895 3049 	ldrb.w	r3, [r5, #73]	@ 0x49
 800fcb2:	f88d 3010 	strb.w	r3, [sp, #16]
   ancillary.tos = socket->tos;
 800fcb6:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 800fcba:	f88d 3011 	strb.w	r3, [sp, #17]
   (void) ipSendDatagram(socket->interface, &pseudoHeader, buffer, offset,
 800fcbe:	ab03      	add	r3, sp, #12
 800fcc0:	9300      	str	r3, [sp, #0]
 800fcc2:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fcc4:	463a      	mov	r2, r7
 800fcc6:	a90b      	add	r1, sp, #44	@ 0x2c
 800fcc8:	68e8      	ldr	r0, [r5, #12]
 800fcca:	f7f5 faf9 	bl	80052c0 <ipSendDatagram>
   netBufferFree(buffer);
 800fcce:	4638      	mov	r0, r7
 800fcd0:	f7fc fa4a 	bl	800c168 <netBufferFree>
   return NO_ERROR;
 800fcd4:	2600      	movs	r6, #0
}
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	b018      	add	sp, #96	@ 0x60
 800fcda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      error = tcpReadTxBuffer(socket, seqNum, buffer, length);
 800fcde:	4643      	mov	r3, r8
 800fce0:	463a      	mov	r2, r7
 800fce2:	4649      	mov	r1, r9
 800fce4:	4628      	mov	r0, r5
 800fce6:	f7ff fed5 	bl	800fa94 <tcpReadTxBuffer>
      if(error)
 800fcea:	4606      	mov	r6, r0
 800fcec:	2800      	cmp	r0, #0
 800fcee:	f43f af6b 	beq.w	800fbc8 <tcpSendSegment+0xd4>
         netBufferFree(buffer);
 800fcf2:	4638      	mov	r0, r7
 800fcf4:	f7fc fa38 	bl	800c168 <netBufferFree>
         return error;
 800fcf8:	e7ed      	b.n	800fcd6 <tcpSendSegment+0x1e2>
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 800fcfa:	f04f 090c 	mov.w	r9, #12
 800fcfe:	f8cd 902c 	str.w	r9, [sp, #44]	@ 0x2c
      pseudoHeader.ipv4Data.srcAddr = socket->localIpAddr.ipv4Addr;
 800fd02:	696b      	ldr	r3, [r5, #20]
 800fd04:	930c      	str	r3, [sp, #48]	@ 0x30
      pseudoHeader.ipv4Data.destAddr = socket->remoteIpAddr.ipv4Addr;
 800fd06:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800fd08:	930d      	str	r3, [sp, #52]	@ 0x34
      pseudoHeader.ipv4Data.reserved = 0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	f88d 3038 	strb.w	r3, [sp, #56]	@ 0x38
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_TCP;
 800fd10:	2306      	movs	r3, #6
 800fd12:	f88d 3039 	strb.w	r3, [sp, #57]	@ 0x39
      pseudoHeader.ipv4Data.length = htons(totalLength);
 800fd16:	b2b0      	uxth	r0, r6
 800fd18:	f7f0 fc80 	bl	800061c <swapInt16>
 800fd1c:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
      segment->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 800fd20:	9600      	str	r6, [sp, #0]
 800fd22:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fd24:	463a      	mov	r2, r7
 800fd26:	4649      	mov	r1, r9
 800fd28:	a80c      	add	r0, sp, #48	@ 0x30
 800fd2a:	f7f5 fc2d 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 800fd2e:	8220      	strh	r0, [r4, #16]
 800fd30:	e77d      	b.n	800fc2e <tcpSendSegment+0x13a>
      netBufferFree(buffer);
 800fd32:	4638      	mov	r0, r7
 800fd34:	f7fc fa18 	bl	800c168 <netBufferFree>
      return ERROR_INVALID_ADDRESS;
 800fd38:	26e4      	movs	r6, #228	@ 0xe4
 800fd3a:	e7cc      	b.n	800fcd6 <tcpSendSegment+0x1e2>
         queueItem = memPoolAlloc(sizeof(TcpQueueItem));
 800fd3c:	2074      	movs	r0, #116	@ 0x74
 800fd3e:	f7fc f97f 	bl	800c040 <memPoolAlloc>
 800fd42:	4606      	mov	r6, r0
         socket->retransmitQueue = queueItem;
 800fd44:	f8c5 0218 	str.w	r0, [r5, #536]	@ 0x218
 800fd48:	e782      	b.n	800fc50 <tcpSendSegment+0x15c>
         netBufferFree(buffer);
 800fd4a:	4638      	mov	r0, r7
 800fd4c:	f7fc fa0c 	bl	800c168 <netBufferFree>
         return ERROR_OUT_OF_MEMORY;
 800fd50:	2664      	movs	r6, #100	@ 0x64
 800fd52:	e7c0      	b.n	800fcd6 <tcpSendSegment+0x1e2>
         socket->rttStartTime = osGetSystemTime();
 800fd54:	f7f0 fd52 	bl	80007fc <osGetSystemTime>
 800fd58:	f8c5 00c4 	str.w	r0, [r5, #196]	@ 0xc4
         socket->rttSeqNum = ntohl(segment->seqNum);
 800fd5c:	6860      	ldr	r0, [r4, #4]
 800fd5e:	f7f0 fc60 	bl	8000622 <swapInt32>
 800fd62:	f8c5 00c0 	str.w	r0, [r5, #192]	@ 0xc0
         socket->rttBusy = TRUE;
 800fd66:	2301      	movs	r3, #1
 800fd68:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
         socket->n = 0;
 800fd6c:	2300      	movs	r3, #0
 800fd6e:	f8c5 30e4 	str.w	r3, [r5, #228]	@ 0xe4
 800fd72:	e78d      	b.n	800fc90 <tcpSendSegment+0x19c>
         netStartTimer(&socket->retransmitTimer, socket->rto);
 800fd74:	f8d5 10d0 	ldr.w	r1, [r5, #208]	@ 0xd0
 800fd78:	4620      	mov	r0, r4
 800fd7a:	f7fc fd9f 	bl	800c8bc <netStartTimer>
         socket->retransmitCount = 0;
 800fd7e:	2300      	movs	r3, #0
 800fd80:	f8c5 3228 	str.w	r3, [r5, #552]	@ 0x228
 800fd84:	e78b      	b.n	800fc9e <tcpSendSegment+0x1aa>
      return ERROR_OUT_OF_MEMORY;
 800fd86:	2664      	movs	r6, #100	@ 0x64
 800fd88:	e7a5      	b.n	800fcd6 <tcpSendSegment+0x1e2>
 800fd8a:	bf00      	nop
 800fd8c:	08019fc4 	.word	0x08019fc4

0800fd90 <tcpSendResetSegment>:
{
 800fd90:	460a      	mov	r2, r1
   if(socket->state == TCP_STATE_SYN_SENT ||
 800fd92:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
      socket->state == TCP_STATE_ESTABLISHED ||
 800fd96:	f1a3 0c02 	sub.w	ip, r3, #2
 800fd9a:	fa5f fc8c 	uxtb.w	ip, ip
   if(socket->state == TCP_STATE_SYN_SENT ||
 800fd9e:	2b07      	cmp	r3, #7
 800fda0:	bf18      	it	ne
 800fda2:	f1bc 0f02 	cmpne.w	ip, #2
 800fda6:	d905      	bls.n	800fdb4 <tcpSendResetSegment+0x24>
      socket->state == TCP_STATE_FIN_WAIT_1 ||
 800fda8:	2b08      	cmp	r3, #8
 800fdaa:	d003      	beq.n	800fdb4 <tcpSendResetSegment+0x24>
      socket->state == TCP_STATE_FIN_WAIT_2 ||
 800fdac:	2b05      	cmp	r3, #5
 800fdae:	d001      	beq.n	800fdb4 <tcpSendResetSegment+0x24>
   error = NO_ERROR;
 800fdb0:	2000      	movs	r0, #0
}
 800fdb2:	4770      	bx	lr
{
 800fdb4:	b500      	push	{lr}
 800fdb6:	b083      	sub	sp, #12
      error = tcpSendSegment(socket, TCP_FLAG_RST, seqNum, 0, 0, FALSE);
 800fdb8:	2300      	movs	r3, #0
 800fdba:	9301      	str	r3, [sp, #4]
 800fdbc:	9300      	str	r3, [sp, #0]
 800fdbe:	2104      	movs	r1, #4
 800fdc0:	f7ff fe98 	bl	800faf4 <tcpSendSegment>
}
 800fdc4:	b003      	add	sp, #12
 800fdc6:	f85d fb04 	ldr.w	pc, [sp], #4

0800fdca <tcpCheckSeqNum>:
{
 800fdca:	b530      	push	{r4, r5, lr}
 800fdcc:	b083      	sub	sp, #12
   if(length == 0 && socket->rcvWnd == 0)
 800fdce:	b9e2      	cbnz	r2, 800fe0a <tcpCheckSeqNum+0x40>
 800fdd0:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 800fdd4:	b95b      	cbnz	r3, 800fdee <tcpCheckSeqNum+0x24>
      if(segment->seqNum == socket->rcvNxt)
 800fdd6:	684a      	ldr	r2, [r1, #4]
 800fdd8:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d042      	beq.n	800fe66 <tcpCheckSeqNum+0x9c>
      if((segment->flags & TCP_FLAG_RST) == 0)
 800fde0:	7b4b      	ldrb	r3, [r1, #13]
 800fde2:	f013 0f04 	tst.w	r3, #4
 800fde6:	d033      	beq.n	800fe50 <tcpCheckSeqNum+0x86>
      return ERROR_FAILURE;
 800fde8:	2001      	movs	r0, #1
}
 800fdea:	b003      	add	sp, #12
 800fdec:	bd30      	pop	{r4, r5, pc}
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800fdee:	684a      	ldr	r2, [r1, #4]
 800fdf0:	f8d0 40b0 	ldr.w	r4, [r0, #176]	@ 0xb0
 800fdf4:	eba2 0c04 	sub.w	ip, r2, r4
 800fdf8:	f1bc 0f00 	cmp.w	ip, #0
 800fdfc:	dbf0      	blt.n	800fde0 <tcpCheckSeqNum+0x16>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 800fdfe:	4423      	add	r3, r4
 800fe00:	1ad2      	subs	r2, r2, r3
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800fe02:	2a00      	cmp	r2, #0
 800fe04:	daec      	bge.n	800fde0 <tcpCheckSeqNum+0x16>
   return NO_ERROR;
 800fe06:	2000      	movs	r0, #0
 800fe08:	e7ef      	b.n	800fdea <tcpCheckSeqNum+0x20>
 800fe0a:	4614      	mov	r4, r2
   else if(length != 0 && socket->rcvWnd == 0)
 800fe0c:	b11a      	cbz	r2, 800fe16 <tcpCheckSeqNum+0x4c>
 800fe0e:	f8d0 30b8 	ldr.w	r3, [r0, #184]	@ 0xb8
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d0e4      	beq.n	800fde0 <tcpCheckSeqNum+0x16>
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800fe16:	684b      	ldr	r3, [r1, #4]
 800fe18:	f8d0 20b0 	ldr.w	r2, [r0, #176]	@ 0xb0
 800fe1c:	eba3 0c02 	sub.w	ip, r3, r2
 800fe20:	f1bc 0f00 	cmp.w	ip, #0
 800fe24:	db08      	blt.n	800fe38 <tcpCheckSeqNum+0x6e>
         TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt + socket->rcvWnd) < 0)
 800fe26:	f8d0 50b8 	ldr.w	r5, [r0, #184]	@ 0xb8
 800fe2a:	eb02 0c05 	add.w	ip, r2, r5
 800fe2e:	eba3 0c0c 	sub.w	ip, r3, ip
      if(TCP_CMP_SEQ(segment->seqNum, socket->rcvNxt) >= 0 &&
 800fe32:	f1bc 0f00 	cmp.w	ip, #0
 800fe36:	db18      	blt.n	800fe6a <tcpCheckSeqNum+0xa0>
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 800fe38:	4423      	add	r3, r4
 800fe3a:	1a9c      	subs	r4, r3, r2
 800fe3c:	2c01      	cmp	r4, #1
 800fe3e:	d4cf      	bmi.n	800fde0 <tcpCheckSeqNum+0x16>
         TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt + socket->rcvWnd) < 0)
 800fe40:	f8d0 40b8 	ldr.w	r4, [r0, #184]	@ 0xb8
 800fe44:	4422      	add	r2, r4
 800fe46:	1a9b      	subs	r3, r3, r2
      else if(TCP_CMP_SEQ(segment->seqNum + length - 1, socket->rcvNxt) >= 0 &&
 800fe48:	2b01      	cmp	r3, #1
 800fe4a:	d5c9      	bpl.n	800fde0 <tcpCheckSeqNum+0x16>
   return NO_ERROR;
 800fe4c:	2000      	movs	r0, #0
 800fe4e:	e7cc      	b.n	800fdea <tcpCheckSeqNum+0x20>
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 800fe50:	2300      	movs	r3, #0
 800fe52:	9301      	str	r3, [sp, #4]
 800fe54:	9300      	str	r3, [sp, #0]
 800fe56:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 800fe5a:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 800fe5e:	2110      	movs	r1, #16
 800fe60:	f7ff fe48 	bl	800faf4 <tcpSendSegment>
 800fe64:	e7c0      	b.n	800fde8 <tcpCheckSeqNum+0x1e>
   return NO_ERROR;
 800fe66:	2000      	movs	r0, #0
 800fe68:	e7bf      	b.n	800fdea <tcpCheckSeqNum+0x20>
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	e7bd      	b.n	800fdea <tcpCheckSeqNum+0x20>

0800fe6e <tcpCheckSyn>:
   if((segment->flags & TCP_FLAG_SYN) != 0)
 800fe6e:	7b4b      	ldrb	r3, [r1, #13]
 800fe70:	f013 0f02 	tst.w	r3, #2
 800fe74:	d101      	bne.n	800fe7a <tcpCheckSyn+0xc>
   return NO_ERROR;
 800fe76:	2000      	movs	r0, #0
}
 800fe78:	4770      	bx	lr
{
 800fe7a:	b500      	push	{lr}
 800fe7c:	b083      	sub	sp, #12
 800fe7e:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
      if((segment->flags & TCP_FLAG_ACK) != 0)
 800fe82:	f01c 0f10 	tst.w	ip, #16
 800fe86:	d006      	beq.n	800fe96 <tcpCheckSyn+0x28>
         tcpSendResetSegment(socket, segment->ackNum);
 800fe88:	6889      	ldr	r1, [r1, #8]
 800fe8a:	f7ff ff81 	bl	800fd90 <tcpSendResetSegment>
      return ERROR_FAILURE;
 800fe8e:	2001      	movs	r0, #1
}
 800fe90:	b003      	add	sp, #12
 800fe92:	f85d fb04 	ldr.w	pc, [sp], #4
            segment->seqNum + length + 1, 0, FALSE);
 800fe96:	684b      	ldr	r3, [r1, #4]
 800fe98:	4413      	add	r3, r2
         tcpSendSegment(socket, TCP_FLAG_RST | TCP_FLAG_ACK, 0,
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	9201      	str	r2, [sp, #4]
 800fe9e:	9200      	str	r2, [sp, #0]
 800fea0:	3301      	adds	r3, #1
 800fea2:	2114      	movs	r1, #20
 800fea4:	f7ff fe26 	bl	800faf4 <tcpSendSegment>
 800fea8:	e7f1      	b.n	800fe8e <tcpCheckSyn+0x20>

0800feaa <tcpUpdateReceiveWindow>:
{
 800feaa:	b510      	push	{r4, lr}
 800feac:	b082      	sub	sp, #8
   reduction = socket->rxBufferSize - socket->rcvUser - socket->rcvWnd;
 800feae:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 800feb2:	f8d0 20b4 	ldr.w	r2, [r0, #180]	@ 0xb4
 800feb6:	1a9a      	subs	r2, r3, r2
 800feb8:	f8d0 40b8 	ldr.w	r4, [r0, #184]	@ 0xb8
   if((socket->rcvWnd + reduction) >= MIN(socket->rmss, socket->rxBufferSize / 2))
 800febc:	085b      	lsrs	r3, r3, #1
 800febe:	f8b0 1088 	ldrh.w	r1, [r0, #136]	@ 0x88
 800fec2:	428b      	cmp	r3, r1
 800fec4:	bf28      	it	cs
 800fec6:	460b      	movcs	r3, r1
 800fec8:	429a      	cmp	r2, r3
 800feca:	d303      	bcc.n	800fed4 <tcpUpdateReceiveWindow+0x2a>
      if(socket->rcvWnd < MIN(socket->rmss, socket->rxBufferSize / 2))
 800fecc:	429c      	cmp	r4, r3
 800fece:	d303      	bcc.n	800fed8 <tcpUpdateReceiveWindow+0x2e>
         socket->rcvWnd += reduction;
 800fed0:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
}
 800fed4:	b002      	add	sp, #8
 800fed6:	bd10      	pop	{r4, pc}
         socket->rcvWnd += reduction;
 800fed8:	f8c0 20b8 	str.w	r2, [r0, #184]	@ 0xb8
         tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt,
 800fedc:	2300      	movs	r3, #0
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	9300      	str	r3, [sp, #0]
 800fee2:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 800fee6:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 800feea:	2110      	movs	r1, #16
 800feec:	f7ff fe02 	bl	800faf4 <tcpSendSegment>
 800fef0:	e7f0      	b.n	800fed4 <tcpUpdateReceiveWindow+0x2a>

0800fef2 <tcpNagleAlgo>:
{
 800fef2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	4604      	mov	r4, r0
 800fefa:	4688      	mov	r8, r1
   n = MIN(socket->sndWnd, socket->txBufferSize);
 800fefc:	f8d0 3190 	ldr.w	r3, [r0, #400]	@ 0x190
 800ff00:	f8d0 20a0 	ldr.w	r2, [r0, #160]	@ 0xa0
 800ff04:	4293      	cmp	r3, r2
 800ff06:	bf28      	it	cs
 800ff08:	4613      	movcs	r3, r2
   n = MIN(n, socket->cwnd);
 800ff0a:	f8d0 20d8 	ldr.w	r2, [r0, #216]	@ 0xd8
   u = n - (socket->sndNxt - socket->sndUna);
 800ff0e:	f8d0 7094 	ldr.w	r7, [r0, #148]	@ 0x94
 800ff12:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 800ff16:	1a7f      	subs	r7, r7, r1
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	bf94      	ite	ls
 800ff1c:	18bf      	addls	r7, r7, r2
 800ff1e:	18ff      	addhi	r7, r7, r3
   error = NO_ERROR;
 800ff20:	2500      	movs	r5, #0
   while(socket->sndUser > 0 && !error)
 800ff22:	e01c      	b.n	800ff5e <tcpNagleAlgo+0x6c>
      else if((flags & SOCKET_FLAG_DELAY) != 0)
 800ff24:	f418 4f00 	tst.w	r8, #32768	@ 0x8000
 800ff28:	d03d      	beq.n	800ffa6 <tcpNagleAlgo+0xb4>
         if(MIN(socket->sndUser, u) >= socket->smss)
 800ff2a:	4282      	cmp	r2, r0
 800ff2c:	d86d      	bhi.n	801000a <tcpNagleAlgo+0x118>
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800ff2e:	2301      	movs	r3, #1
 800ff30:	9301      	str	r3, [sp, #4]
 800ff32:	9600      	str	r6, [sp, #0]
 800ff34:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ff38:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800ff3c:	2118      	movs	r1, #24
 800ff3e:	4620      	mov	r0, r4
 800ff40:	f7ff fdd8 	bl	800faf4 <tcpSendSegment>
 800ff44:	4605      	mov	r5, r0
      if(!error)
 800ff46:	b955      	cbnz	r5, 800ff5e <tcpNagleAlgo+0x6c>
         socket->sndNxt += n;
 800ff48:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 800ff4c:	4433      	add	r3, r6
 800ff4e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
         socket->sndUser -= n;
 800ff52:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ff56:	1b9b      	subs	r3, r3, r6
 800ff58:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
         u -= n;
 800ff5c:	1bbf      	subs	r7, r7, r6
   while(socket->sndUser > 0 && !error)
 800ff5e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d051      	beq.n	801000a <tcpNagleAlgo+0x118>
 800ff66:	2d00      	cmp	r5, #0
 800ff68:	d14f      	bne.n	801000a <tcpNagleAlgo+0x118>
      if((int32_t) u <= 0)
 800ff6a:	2f00      	cmp	r7, #0
 800ff6c:	dd4d      	ble.n	801000a <tcpNagleAlgo+0x118>
      n = MIN(u, socket->sndUser);
 800ff6e:	4618      	mov	r0, r3
 800ff70:	42bb      	cmp	r3, r7
 800ff72:	bf28      	it	cs
 800ff74:	4638      	movcs	r0, r7
      n = MIN(n, socket->smss);
 800ff76:	f8b4 2086 	ldrh.w	r2, [r4, #134]	@ 0x86
 800ff7a:	4616      	mov	r6, r2
 800ff7c:	4282      	cmp	r2, r0
 800ff7e:	bf28      	it	cs
 800ff80:	4606      	movcs	r6, r0
      if((flags & SOCKET_FLAG_NO_DELAY) != 0)
 800ff82:	f418 4f80 	tst.w	r8, #16384	@ 0x4000
 800ff86:	d0cd      	beq.n	800ff24 <tcpNagleAlgo+0x32>
         if(n > 0)
 800ff88:	2e00      	cmp	r6, #0
 800ff8a:	d03e      	beq.n	801000a <tcpNagleAlgo+0x118>
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800ff8c:	2301      	movs	r3, #1
 800ff8e:	9301      	str	r3, [sp, #4]
 800ff90:	9600      	str	r6, [sp, #0]
 800ff92:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ff96:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800ff9a:	2118      	movs	r1, #24
 800ff9c:	4620      	mov	r0, r4
 800ff9e:	f7ff fda9 	bl	800faf4 <tcpSendSegment>
 800ffa2:	4605      	mov	r5, r0
 800ffa4:	e7cf      	b.n	800ff46 <tcpNagleAlgo+0x54>
         if(MIN(socket->sndUser, u) >= socket->smss)
 800ffa6:	4282      	cmp	r2, r0
 800ffa8:	d915      	bls.n	800ffd6 <tcpNagleAlgo+0xe4>
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 800ffaa:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800ffae:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800ffb2:	428a      	cmp	r2, r1
 800ffb4:	d01c      	beq.n	800fff0 <tcpNagleAlgo+0xfe>
         else if(MIN(socket->sndUser, u) >= (socket->maxSndWnd / 2))
 800ffb6:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800ffba:	ebb0 0f53 	cmp.w	r0, r3, lsr #1
 800ffbe:	d324      	bcc.n	801000a <tcpNagleAlgo+0x118>
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800ffc0:	2301      	movs	r3, #1
 800ffc2:	9301      	str	r3, [sp, #4]
 800ffc4:	9600      	str	r6, [sp, #0]
 800ffc6:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ffca:	2118      	movs	r1, #24
 800ffcc:	4620      	mov	r0, r4
 800ffce:	f7ff fd91 	bl	800faf4 <tcpSendSegment>
 800ffd2:	4605      	mov	r5, r0
 800ffd4:	e7b7      	b.n	800ff46 <tcpNagleAlgo+0x54>
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	9301      	str	r3, [sp, #4]
 800ffda:	9600      	str	r6, [sp, #0]
 800ffdc:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800ffe0:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 800ffe4:	2118      	movs	r1, #24
 800ffe6:	4620      	mov	r0, r4
 800ffe8:	f7ff fd84 	bl	800faf4 <tcpSendSegment>
 800ffec:	4605      	mov	r5, r0
 800ffee:	e7aa      	b.n	800ff46 <tcpNagleAlgo+0x54>
         else if(socket->sndNxt == socket->sndUna && socket->sndUser <= u)
 800fff0:	42bb      	cmp	r3, r7
 800fff2:	d8e0      	bhi.n	800ffb6 <tcpNagleAlgo+0xc4>
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 800fff4:	2301      	movs	r3, #1
 800fff6:	9301      	str	r3, [sp, #4]
 800fff8:	9600      	str	r6, [sp, #0]
 800fffa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 800fffe:	2118      	movs	r1, #24
 8010000:	4620      	mov	r0, r4
 8010002:	f7ff fd77 	bl	800faf4 <tcpSendSegment>
 8010006:	4605      	mov	r5, r0
 8010008:	e79d      	b.n	800ff46 <tcpNagleAlgo+0x54>
   tcpUpdateEvents(socket);
 801000a:	4620      	mov	r0, r4
 801000c:	f7ff fc44 	bl	800f898 <tcpUpdateEvents>
}
 8010010:	4628      	mov	r0, r5
 8010012:	b002      	add	sp, #8
 8010014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010018 <tcpRetransmitSegment>:
{
 8010018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801001c:	b08d      	sub	sp, #52	@ 0x34
 801001e:	4607      	mov	r7, r0
   queueItem = socket->retransmitQueue;
 8010020:	f8d0 5218 	ldr.w	r5, [r0, #536]	@ 0x218
   length = 0;
 8010024:	f04f 0800 	mov.w	r8, #0
   error = NO_ERROR;
 8010028:	46c1      	mov	r9, r8
   while(queueItem != NULL)
 801002a:	e02f      	b.n	801008c <tcpRetransmitSegment+0x74>
         segment->window = htons(MIN(socket->rcvWnd, UINT16_MAX));
 801002c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8010030:	e067      	b.n	8010102 <tcpRetransmitSegment+0xea>
               buffer, offset, segment->dataOffset * 4 + queueItem->length);
 8010032:	7b22      	ldrb	r2, [r4, #12]
 8010034:	0912      	lsrs	r2, r2, #4
 8010036:	686b      	ldr	r3, [r5, #4]
            segment->checksum = ipCalcUpperLayerChecksumEx(
 8010038:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801003c:	9300      	str	r3, [sp, #0]
 801003e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010040:	4632      	mov	r2, r6
 8010042:	210c      	movs	r1, #12
 8010044:	f105 0010 	add.w	r0, r5, #16
 8010048:	f7f5 fa9e 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 801004c:	8220      	strh	r0, [r4, #16]
         ancillary = NET_DEFAULT_TX_ANCILLARY;
 801004e:	ac03      	add	r4, sp, #12
 8010050:	f8df c124 	ldr.w	ip, [pc, #292]	@ 8010178 <tcpRetransmitSegment+0x160>
 8010054:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010058:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801005a:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 801005e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
         ancillary.ttl = socket->ttl;
 8010062:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8010066:	f88d 3010 	strb.w	r3, [sp, #16]
         error = ipSendDatagram(socket->interface, &queueItem->pseudoHeader,
 801006a:	ab03      	add	r3, sp, #12
 801006c:	9300      	str	r3, [sp, #0]
 801006e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010070:	4632      	mov	r2, r6
 8010072:	f105 010c 	add.w	r1, r5, #12
 8010076:	68f8      	ldr	r0, [r7, #12]
 8010078:	f7f5 f922 	bl	80052c0 <ipSendDatagram>
 801007c:	4681      	mov	r9, r0
      netBufferFree(buffer);
 801007e:	4630      	mov	r0, r6
 8010080:	f7fc f872 	bl	800c168 <netBufferFree>
      if(error)
 8010084:	f1b9 0f00 	cmp.w	r9, #0
 8010088:	d16f      	bne.n	801016a <tcpRetransmitSegment+0x152>
      queueItem = queueItem->next;
 801008a:	682d      	ldr	r5, [r5, #0]
   while(queueItem != NULL)
 801008c:	2d00      	cmp	r5, #0
 801008e:	d06c      	beq.n	801016a <tcpRetransmitSegment+0x152>
      length += queueItem->length;
 8010090:	686b      	ldr	r3, [r5, #4]
 8010092:	4498      	add	r8, r3
      if(length > socket->smss)
 8010094:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8010098:	4543      	cmp	r3, r8
 801009a:	d364      	bcc.n	8010166 <tcpRetransmitSegment+0x14e>
      buffer = ipAllocBuffer(TCP_MAX_HEADER_LENGTH, &offset);
 801009c:	a90b      	add	r1, sp, #44	@ 0x2c
 801009e:	203c      	movs	r0, #60	@ 0x3c
 80100a0:	f7f5 fa87 	bl	80055b2 <ipAllocBuffer>
      if(buffer == NULL)
 80100a4:	4606      	mov	r6, r0
 80100a6:	2800      	cmp	r0, #0
 80100a8:	d063      	beq.n	8010172 <tcpRetransmitSegment+0x15a>
         segment = netBufferAt(buffer, offset, 0);
 80100aa:	2200      	movs	r2, #0
 80100ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80100ae:	f7fc f883 	bl	800c1b8 <netBufferAt>
 80100b2:	4604      	mov	r4, r0
         osMemcpy(segment, queueItem->header, TCP_MAX_HEADER_LENGTH);
 80100b4:	f105 0338 	add.w	r3, r5, #56	@ 0x38
 80100b8:	4602      	mov	r2, r0
 80100ba:	f105 0968 	add.w	r9, r5, #104	@ 0x68
 80100be:	f8d3 e000 	ldr.w	lr, [r3]
 80100c2:	f8d3 c004 	ldr.w	ip, [r3, #4]
 80100c6:	6898      	ldr	r0, [r3, #8]
 80100c8:	68d9      	ldr	r1, [r3, #12]
 80100ca:	f8c2 e000 	str.w	lr, [r2]
 80100ce:	f8c2 c004 	str.w	ip, [r2, #4]
 80100d2:	6090      	str	r0, [r2, #8]
 80100d4:	60d1      	str	r1, [r2, #12]
 80100d6:	3310      	adds	r3, #16
 80100d8:	3210      	adds	r2, #16
 80100da:	454b      	cmp	r3, r9
 80100dc:	d1ef      	bne.n	80100be <tcpRetransmitSegment+0xa6>
 80100de:	6818      	ldr	r0, [r3, #0]
 80100e0:	6859      	ldr	r1, [r3, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	6010      	str	r0, [r2, #0]
 80100e6:	6051      	str	r1, [r2, #4]
 80100e8:	6093      	str	r3, [r2, #8]
         segment->ackNum = htonl(socket->rcvNxt);
 80100ea:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80100ee:	f7f0 fa98 	bl	8000622 <swapInt32>
 80100f2:	60a0      	str	r0, [r4, #8]
         segment->window = htons(MIN(socket->rcvWnd, UINT16_MAX));
 80100f4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 80100f8:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 80100fc:	4298      	cmp	r0, r3
 80100fe:	d895      	bhi.n	801002c <tcpRetransmitSegment+0x14>
 8010100:	b280      	uxth	r0, r0
 8010102:	f7f0 fa8b 	bl	800061c <swapInt16>
 8010106:	81e0      	strh	r0, [r4, #14]
         segment->checksum = 0;
 8010108:	2300      	movs	r3, #0
 801010a:	7423      	strb	r3, [r4, #16]
 801010c:	7463      	strb	r3, [r4, #17]
         netBufferSetLength(buffer, offset + segment->dataOffset * 4);
 801010e:	7b23      	ldrb	r3, [r4, #12]
 8010110:	091b      	lsrs	r3, r3, #4
 8010112:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010114:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8010118:	4630      	mov	r0, r6
 801011a:	f7fb ffba 	bl	800c092 <netBufferSetLength>
         error = tcpReadTxBuffer(socket, ntohl(segment->seqNum), buffer,
 801011e:	6860      	ldr	r0, [r4, #4]
 8010120:	f7f0 fa7f 	bl	8000622 <swapInt32>
 8010124:	4601      	mov	r1, r0
 8010126:	686b      	ldr	r3, [r5, #4]
 8010128:	4632      	mov	r2, r6
 801012a:	4638      	mov	r0, r7
 801012c:	f7ff fcb2 	bl	800fa94 <tcpReadTxBuffer>
         if(error)
 8010130:	4681      	mov	r9, r0
 8010132:	2800      	cmp	r0, #0
 8010134:	d1a3      	bne.n	801007e <tcpRetransmitSegment+0x66>
         if(queueItem->pseudoHeader.length == sizeof(Ipv4PseudoHeader))
 8010136:	68eb      	ldr	r3, [r5, #12]
 8010138:	2b0c      	cmp	r3, #12
 801013a:	f43f af7a 	beq.w	8010032 <tcpRetransmitSegment+0x1a>
         if(queueItem->pseudoHeader.length == sizeof(Ipv6PseudoHeader))
 801013e:	2b28      	cmp	r3, #40	@ 0x28
 8010140:	d002      	beq.n	8010148 <tcpRetransmitSegment+0x130>
            error = ERROR_INVALID_ADDRESS;
 8010142:	f04f 09e4 	mov.w	r9, #228	@ 0xe4
 8010146:	e79a      	b.n	801007e <tcpRetransmitSegment+0x66>
               buffer, offset, segment->dataOffset * 4 + queueItem->length);
 8010148:	7b22      	ldrb	r2, [r4, #12]
 801014a:	0912      	lsrs	r2, r2, #4
 801014c:	686b      	ldr	r3, [r5, #4]
            segment->checksum = ipCalcUpperLayerChecksumEx(
 801014e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010152:	9300      	str	r3, [sp, #0]
 8010154:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010156:	4632      	mov	r2, r6
 8010158:	2128      	movs	r1, #40	@ 0x28
 801015a:	f105 0010 	add.w	r0, r5, #16
 801015e:	f7f5 fa13 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 8010162:	8220      	strh	r0, [r4, #16]
 8010164:	e773      	b.n	801004e <tcpRetransmitSegment+0x36>
         error = NO_ERROR;
 8010166:	f04f 0900 	mov.w	r9, #0
}
 801016a:	4648      	mov	r0, r9
 801016c:	b00d      	add	sp, #52	@ 0x34
 801016e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
         error = ERROR_OUT_OF_MEMORY;
 8010172:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8010176:	e7f8      	b.n	801016a <tcpRetransmitSegment+0x152>
 8010178:	08019fc4 	.word	0x08019fc4

0801017c <tcpFastRetransmit>:
{
 801017c:	b510      	push	{r4, lr}
 801017e:	4604      	mov	r4, r0
   flightSize = socket->sndNxt - socket->sndUna;
 8010180:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 8010184:	f8d0 3094 	ldr.w	r3, [r0, #148]	@ 0x94
 8010188:	1aca      	subs	r2, r1, r3
   socket->ssthresh = MAX(flightSize / 2, (uint32_t) socket->smss * 2);
 801018a:	f8b0 3086 	ldrh.w	r3, [r0, #134]	@ 0x86
 801018e:	005b      	lsls	r3, r3, #1
 8010190:	0852      	lsrs	r2, r2, #1
 8010192:	4293      	cmp	r3, r2
 8010194:	bf38      	it	cc
 8010196:	4613      	movcc	r3, r2
 8010198:	f8c0 30dc 	str.w	r3, [r0, #220]	@ 0xdc
   socket->recover = socket->sndNxt - 1;
 801019c:	3901      	subs	r1, #1
 801019e:	f8c0 10e8 	str.w	r1, [r0, #232]	@ 0xe8
   tcpRetransmitSegment(socket);
 80101a2:	f7ff ff39 	bl	8010018 <tcpRetransmitSegment>
   socket->cwnd = socket->ssthresh + (socket->smss * TCP_FAST_RETRANSMIT_THRES);
 80101a6:	f8d4 20dc 	ldr.w	r2, [r4, #220]	@ 0xdc
 80101aa:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 80101ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101b2:	441a      	add	r2, r3
 80101b4:	f8c4 20d8 	str.w	r2, [r4, #216]	@ 0xd8
   socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 80101b8:	2301      	movs	r3, #1
 80101ba:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
}
 80101be:	bd10      	pop	{r4, pc}

080101c0 <tcpFastRecovery>:
{
 80101c0:	b538      	push	{r3, r4, r5, lr}
 80101c2:	4604      	mov	r4, r0
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 80101c4:	688b      	ldr	r3, [r1, #8]
 80101c6:	f8d0 10e8 	ldr.w	r1, [r0, #232]	@ 0xe8
 80101ca:	1a5b      	subs	r3, r3, r1
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	dd07      	ble.n	80101e0 <tcpFastRecovery+0x20>
      socket->cwnd = socket->ssthresh;
 80101d0:	f8d0 30dc 	ldr.w	r3, [r0, #220]	@ 0xdc
 80101d4:	f8c0 30d8 	str.w	r3, [r0, #216]	@ 0xd8
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 80101d8:	2300      	movs	r3, #0
 80101da:	f880 30d4 	strb.w	r3, [r0, #212]	@ 0xd4
}
 80101de:	bd38      	pop	{r3, r4, r5, pc}
 80101e0:	4615      	mov	r5, r2
      tcpRetransmitSegment(socket);
 80101e2:	f7ff ff19 	bl	8010018 <tcpRetransmitSegment>
      if(socket->cwnd > n)
 80101e6:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80101ea:	42ab      	cmp	r3, r5
 80101ec:	d902      	bls.n	80101f4 <tcpFastRecovery+0x34>
         socket->cwnd -= n;
 80101ee:	1b5b      	subs	r3, r3, r5
 80101f0:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
      if(n >= socket->smss)
 80101f4:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 80101f8:	42ab      	cmp	r3, r5
 80101fa:	d804      	bhi.n	8010206 <tcpFastRecovery+0x46>
         socket->cwnd += socket->smss;
 80101fc:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 8010200:	4413      	add	r3, r2
 8010202:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
      socket->congestState = TCP_CONGEST_STATE_RECOVERY;
 8010206:	2301      	movs	r3, #1
 8010208:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
}
 801020c:	e7e7      	b.n	80101de <tcpFastRecovery+0x1e>

0801020e <tcpFastLossRecovery>:
{
 801020e:	b510      	push	{r4, lr}
 8010210:	4604      	mov	r4, r0
   if(TCP_CMP_SEQ(segment->ackNum, socket->recover) > 0)
 8010212:	688b      	ldr	r3, [r1, #8]
 8010214:	f8d0 20e8 	ldr.w	r2, [r0, #232]	@ 0xe8
 8010218:	1a9b      	subs	r3, r3, r2
 801021a:	2b00      	cmp	r3, #0
 801021c:	dd03      	ble.n	8010226 <tcpFastLossRecovery+0x18>
      socket->congestState = TCP_CONGEST_STATE_IDLE;
 801021e:	2300      	movs	r3, #0
 8010220:	f880 30d4 	strb.w	r3, [r0, #212]	@ 0xd4
}
 8010224:	bd10      	pop	{r4, pc}
      tcpRetransmitSegment(socket);
 8010226:	f7ff fef7 	bl	8010018 <tcpRetransmitSegment>
      socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 801022a:	2302      	movs	r3, #2
 801022c:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
}
 8010230:	e7f8      	b.n	8010224 <tcpFastLossRecovery+0x16>

08010232 <tcpCheckAck>:
   if((segment->flags & TCP_FLAG_ACK) == 0)
 8010232:	7b4b      	ldrb	r3, [r1, #13]
 8010234:	f013 0f10 	tst.w	r3, #16
 8010238:	f000 80c8 	beq.w	80103cc <tcpCheckAck+0x19a>
{
 801023c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801023e:	b083      	sub	sp, #12
 8010240:	4604      	mov	r4, r0
 8010242:	460d      	mov	r5, r1
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) < 0)
 8010244:	688b      	ldr	r3, [r1, #8]
 8010246:	f8d0 1094 	ldr.w	r1, [r0, #148]	@ 0x94
 801024a:	1a59      	subs	r1, r3, r1
 801024c:	2900      	cmp	r1, #0
 801024e:	f2c0 80bf 	blt.w	80103d0 <tcpCheckAck+0x19e>
   else if(TCP_CMP_SEQ(segment->ackNum, socket->sndNxt) > 0)
 8010252:	f8d0 1098 	ldr.w	r1, [r0, #152]	@ 0x98
 8010256:	1a5b      	subs	r3, r3, r1
 8010258:	2b00      	cmp	r3, #0
 801025a:	dc46      	bgt.n	80102ea <tcpCheckAck+0xb8>
   duplicateFlag = tcpIsDuplicateAck(socket, segment, length);
 801025c:	4629      	mov	r1, r5
 801025e:	f7ff f992 	bl	800f586 <tcpIsDuplicateAck>
 8010262:	4607      	mov	r7, r0
   tcpUpdateSendWindow(socket, segment);
 8010264:	4629      	mov	r1, r5
 8010266:	4620      	mov	r0, r4
 8010268:	f7ff fa7d 	bl	800f766 <tcpUpdateSendWindow>
   if(TCP_CMP_SEQ(segment->ackNum, socket->sndUna) > 0)
 801026c:	68ae      	ldr	r6, [r5, #8]
 801026e:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
 8010272:	1af6      	subs	r6, r6, r3
 8010274:	2e00      	cmp	r6, #0
 8010276:	dd5d      	ble.n	8010334 <tcpCheckAck+0x102>
      if(socket->sndUna == socket->iss)
 8010278:	f8d4 208c 	ldr.w	r2, [r4, #140]	@ 0x8c
 801027c:	4293      	cmp	r3, r2
 801027e:	d03f      	beq.n	8010300 <tcpCheckAck+0xce>
      socket->n += n;
 8010280:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
 8010284:	4433      	add	r3, r6
 8010286:	f8c4 30e4 	str.w	r3, [r4, #228]	@ 0xe4
      socket->sndUna = segment->ackNum;
 801028a:	68ab      	ldr	r3, [r5, #8]
 801028c:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
      updateFlag = tcpComputeRto(socket);
 8010290:	4620      	mov	r0, r4
 8010292:	f7ff fab3 	bl	800f7fc <tcpComputeRto>
 8010296:	4607      	mov	r7, r0
      tcpUpdateRetransmitQueue(socket);
 8010298:	4620      	mov	r0, r4
 801029a:	f7ff f992 	bl	800f5c2 <tcpUpdateRetransmitQueue>
      if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 801029e:	f894 30d4 	ldrb.w	r3, [r4, #212]	@ 0xd4
 80102a2:	2b01      	cmp	r3, #1
 80102a4:	d02e      	beq.n	8010304 <tcpCheckAck+0xd2>
         socket->dupAckCount = 0;
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
         if(socket->congestState == TCP_CONGEST_STATE_LOSS_RECOVERY)
 80102ac:	2b02      	cmp	r3, #2
 80102ae:	d02f      	beq.n	8010310 <tcpCheckAck+0xde>
         if(socket->cwnd < socket->ssthresh)
 80102b0:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80102b4:	f8d4 20dc 	ldr.w	r2, [r4, #220]	@ 0xdc
 80102b8:	4293      	cmp	r3, r2
 80102ba:	d22e      	bcs.n	801031a <tcpCheckAck+0xe8>
            socket->cwnd += MIN(n, socket->smss);
 80102bc:	f8b4 2086 	ldrh.w	r2, [r4, #134]	@ 0x86
 80102c0:	42b2      	cmp	r2, r6
 80102c2:	bf94      	ite	ls
 80102c4:	189b      	addls	r3, r3, r2
 80102c6:	199b      	addhi	r3, r3, r6
 80102c8:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80102cc:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 80102d0:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 80102d4:	4293      	cmp	r3, r2
 80102d6:	bf28      	it	cs
 80102d8:	4613      	movcs	r3, r2
 80102da:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
   tcpUpdateEvents(socket);
 80102de:	4620      	mov	r0, r4
 80102e0:	f7ff fada 	bl	800f898 <tcpUpdateEvents>
   return NO_ERROR;
 80102e4:	2000      	movs	r0, #0
}
 80102e6:	b003      	add	sp, #12
 80102e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80102ea:	2300      	movs	r3, #0
 80102ec:	9301      	str	r3, [sp, #4]
 80102ee:	9300      	str	r3, [sp, #0]
 80102f0:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 80102f4:	460a      	mov	r2, r1
 80102f6:	2110      	movs	r1, #16
 80102f8:	f7ff fbfc 	bl	800faf4 <tcpSendSegment>
      return ERROR_FAILURE;
 80102fc:	2001      	movs	r0, #1
 80102fe:	e7f2      	b.n	80102e6 <tcpCheckAck+0xb4>
         n--;
 8010300:	3e01      	subs	r6, #1
 8010302:	e7bd      	b.n	8010280 <tcpCheckAck+0x4e>
         tcpFastRecovery(socket, segment, n);
 8010304:	4632      	mov	r2, r6
 8010306:	4629      	mov	r1, r5
 8010308:	4620      	mov	r0, r4
 801030a:	f7ff ff59 	bl	80101c0 <tcpFastRecovery>
 801030e:	e7dd      	b.n	80102cc <tcpCheckAck+0x9a>
            tcpFastLossRecovery(socket, segment);
 8010310:	4629      	mov	r1, r5
 8010312:	4620      	mov	r0, r4
 8010314:	f7ff ff7b 	bl	801020e <tcpFastLossRecovery>
 8010318:	e7ca      	b.n	80102b0 <tcpCheckAck+0x7e>
            if(updateFlag)
 801031a:	2f00      	cmp	r7, #0
 801031c:	d0d6      	beq.n	80102cc <tcpCheckAck+0x9a>
               socket->cwnd += MIN(socket->n, socket->smss);
 801031e:	f8b4 1086 	ldrh.w	r1, [r4, #134]	@ 0x86
 8010322:	f8d4 20e4 	ldr.w	r2, [r4, #228]	@ 0xe4
 8010326:	4291      	cmp	r1, r2
 8010328:	bf94      	ite	ls
 801032a:	185b      	addls	r3, r3, r1
 801032c:	189b      	addhi	r3, r3, r2
 801032e:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8010332:	e7cb      	b.n	80102cc <tcpCheckAck+0x9a>
      if(duplicateFlag)
 8010334:	b1e7      	cbz	r7, 8010370 <tcpCheckAck+0x13e>
         socket->dupAckCount++;
 8010336:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
 801033a:	3201      	adds	r2, #1
 801033c:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
      if(socket->congestState == TCP_CONGEST_STATE_IDLE)
 8010340:	f894 20d4 	ldrb.w	r2, [r4, #212]	@ 0xd4
 8010344:	bb62      	cbnz	r2, 80103a0 <tcpCheckAck+0x16e>
         ownd = socket->sndNxt - socket->sndUna;
 8010346:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 801034a:	1ad3      	subs	r3, r2, r3
         if(socket->sndUser == 0 || socket->sndWnd <= (socket->sndNxt - socket->sndUna))
 801034c:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8010350:	b11a      	cbz	r2, 801035a <tcpCheckAck+0x128>
 8010352:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 8010356:	429a      	cmp	r2, r3
 8010358:	d80e      	bhi.n	8010378 <tcpCheckAck+0x146>
            if(ownd <= ((uint32_t) socket->smss * 3))
 801035a:	f8b4 2086 	ldrh.w	r2, [r4, #134]	@ 0x86
 801035e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8010362:	4299      	cmp	r1, r3
 8010364:	d20a      	bcs.n	801037c <tcpCheckAck+0x14a>
            else if(ownd <= ((uint32_t) socket->smss * 4))
 8010366:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801036a:	d917      	bls.n	801039c <tcpCheckAck+0x16a>
         thresh = TCP_FAST_RETRANSMIT_THRES;
 801036c:	2203      	movs	r2, #3
 801036e:	e006      	b.n	801037e <tcpCheckAck+0x14c>
         socket->dupAckCount = 0;
 8010370:	2200      	movs	r2, #0
 8010372:	f8c4 20e0 	str.w	r2, [r4, #224]	@ 0xe0
 8010376:	e7e3      	b.n	8010340 <tcpCheckAck+0x10e>
         thresh = TCP_FAST_RETRANSMIT_THRES;
 8010378:	2203      	movs	r2, #3
 801037a:	e000      	b.n	801037e <tcpCheckAck+0x14c>
               thresh = 1;
 801037c:	2201      	movs	r2, #1
         if(socket->dupAckCount >= thresh)
 801037e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8010382:	4293      	cmp	r3, r2
 8010384:	d30e      	bcc.n	80103a4 <tcpCheckAck+0x172>
            if(TCP_CMP_SEQ(segment->ackNum, socket->recover + 1) > 0)
 8010386:	68ab      	ldr	r3, [r5, #8]
 8010388:	f8d4 20e8 	ldr.w	r2, [r4, #232]	@ 0xe8
 801038c:	1a9b      	subs	r3, r3, r2
 801038e:	3b01      	subs	r3, #1
 8010390:	2b00      	cmp	r3, #0
 8010392:	dd07      	ble.n	80103a4 <tcpCheckAck+0x172>
               tcpFastRetransmit(socket);
 8010394:	4620      	mov	r0, r4
 8010396:	f7ff fef1 	bl	801017c <tcpFastRetransmit>
 801039a:	e003      	b.n	80103a4 <tcpCheckAck+0x172>
               thresh = 2;
 801039c:	2202      	movs	r2, #2
 801039e:	e7ee      	b.n	801037e <tcpCheckAck+0x14c>
      else if(socket->congestState == TCP_CONGEST_STATE_RECOVERY)
 80103a0:	2a01      	cmp	r2, #1
 80103a2:	d009      	beq.n	80103b8 <tcpCheckAck+0x186>
      socket->cwnd = MIN(socket->cwnd, socket->txBufferSize);
 80103a4:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 80103a8:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
 80103ac:	4293      	cmp	r3, r2
 80103ae:	bf28      	it	cs
 80103b0:	4613      	movcs	r3, r2
 80103b2:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 80103b6:	e792      	b.n	80102de <tcpCheckAck+0xac>
         if(duplicateFlag)
 80103b8:	2f00      	cmp	r7, #0
 80103ba:	d0f3      	beq.n	80103a4 <tcpCheckAck+0x172>
            socket->cwnd += socket->smss;
 80103bc:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
 80103c0:	f8b4 2086 	ldrh.w	r2, [r4, #134]	@ 0x86
 80103c4:	4413      	add	r3, r2
 80103c6:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 80103ca:	e7eb      	b.n	80103a4 <tcpCheckAck+0x172>
      return ERROR_FAILURE;
 80103cc:	2001      	movs	r0, #1
}
 80103ce:	4770      	bx	lr
      return NO_ERROR;
 80103d0:	2000      	movs	r0, #0
 80103d2:	e788      	b.n	80102e6 <tcpCheckAck+0xb4>

080103d4 <tcpWriteRxBuffer>:
 * @param[in] length Number of data to write
 **/

void tcpWriteRxBuffer(Socket *socket, uint32_t seqNum,
   const NetBuffer *data, size_t dataOffset, size_t length)
{
 80103d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103d8:	b083      	sub	sp, #12
 80103da:	4605      	mov	r5, r0
 80103dc:	4690      	mov	r8, r2
 80103de:	461e      	mov	r6, r3
 80103e0:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
   //Offset of the first byte to write in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 80103e2:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80103e6:	1acc      	subs	r4, r1, r3
 80103e8:	3c01      	subs	r4, #1
 80103ea:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80103ee:	fbb4 f2f3 	udiv	r2, r4, r3
 80103f2:	fb03 4412 	mls	r4, r3, r2, r4

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 80103f6:	19e2      	adds	r2, r4, r7
 80103f8:	4293      	cmp	r3, r2
 80103fa:	d30a      	bcc.n	8010412 <tcpWriteRxBuffer+0x3e>
   {
      //Copy the payload
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 80103fc:	9700      	str	r7, [sp, #0]
 80103fe:	4633      	mov	r3, r6
 8010400:	4642      	mov	r2, r8
 8010402:	4621      	mov	r1, r4
 8010404:	f500 70ca 	add.w	r0, r0, #404	@ 0x194
 8010408:	f7fb ff3d 	bl	800c286 <netBufferCopy>
      //Wrap around to the beginning of the circular buffer
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
         dataOffset + socket->rxBufferSize - offset,
         length - socket->rxBufferSize + offset);
   }
}
 801040c:	b003      	add	sp, #12
 801040e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      netBufferCopy((NetBuffer *) &socket->rxBuffer,
 8010412:	f500 79ca 	add.w	r9, r0, #404	@ 0x194
 8010416:	1b1b      	subs	r3, r3, r4
 8010418:	9300      	str	r3, [sp, #0]
 801041a:	4633      	mov	r3, r6
 801041c:	4642      	mov	r2, r8
 801041e:	4621      	mov	r1, r4
 8010420:	4648      	mov	r0, r9
 8010422:	f7fb ff30 	bl	800c286 <netBufferCopy>
         dataOffset + socket->rxBufferSize - offset,
 8010426:	f8d5 2214 	ldr.w	r2, [r5, #532]	@ 0x214
 801042a:	1993      	adds	r3, r2, r6
         length - socket->rxBufferSize + offset);
 801042c:	1abf      	subs	r7, r7, r2
      netBufferCopy((NetBuffer *) &socket->rxBuffer, 0, data,
 801042e:	4427      	add	r7, r4
 8010430:	9700      	str	r7, [sp, #0]
 8010432:	1b1b      	subs	r3, r3, r4
 8010434:	4642      	mov	r2, r8
 8010436:	2100      	movs	r1, #0
 8010438:	4648      	mov	r0, r9
 801043a:	f7fb ff24 	bl	800c286 <netBufferCopy>
}
 801043e:	e7e5      	b.n	801040c <tcpWriteRxBuffer+0x38>

08010440 <tcpProcessSegmentData>:
{
 8010440:	b530      	push	{r4, r5, lr}
 8010442:	b085      	sub	sp, #20
 8010444:	4604      	mov	r4, r0
   leftEdge = segment->seqNum;
 8010446:	684d      	ldr	r5, [r1, #4]
 8010448:	9503      	str	r5, [sp, #12]
   rightEdge = segment->seqNum + length;
 801044a:	9908      	ldr	r1, [sp, #32]
 801044c:	4429      	add	r1, r5
 801044e:	9102      	str	r1, [sp, #8]
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) < 0)
 8010450:	f8d0 00b0 	ldr.w	r0, [r0, #176]	@ 0xb0
 8010454:	eba5 0c00 	sub.w	ip, r5, r0
 8010458:	f1bc 0f00 	cmp.w	ip, #0
 801045c:	db23      	blt.n	80104a6 <tcpProcessSegmentData+0x66>
   if(TCP_CMP_SEQ(rightEdge, socket->rcvNxt + socket->rcvWnd) > 0)
 801045e:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
 8010462:	4428      	add	r0, r5
 8010464:	1a09      	subs	r1, r1, r0
 8010466:	2900      	cmp	r1, #0
 8010468:	dd00      	ble.n	801046c <tcpProcessSegmentData+0x2c>
      rightEdge = socket->rcvNxt + socket->rcvWnd;
 801046a:	9002      	str	r0, [sp, #8]
   tcpWriteRxBuffer(socket, leftEdge, buffer, offset, rightEdge - leftEdge);
 801046c:	9903      	ldr	r1, [sp, #12]
 801046e:	9802      	ldr	r0, [sp, #8]
 8010470:	1a40      	subs	r0, r0, r1
 8010472:	9000      	str	r0, [sp, #0]
 8010474:	4620      	mov	r0, r4
 8010476:	f7ff ffad 	bl	80103d4 <tcpWriteRxBuffer>
   tcpUpdateSackBlocks(socket, &leftEdge, &rightEdge);
 801047a:	aa02      	add	r2, sp, #8
 801047c:	a903      	add	r1, sp, #12
 801047e:	4620      	mov	r0, r4
 8010480:	f7ff f91e 	bl	800f6c0 <tcpUpdateSackBlocks>
   if(TCP_CMP_SEQ(leftEdge, socket->rcvNxt) > 0)
 8010484:	9a03      	ldr	r2, [sp, #12]
 8010486:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 801048a:	1ad1      	subs	r1, r2, r3
 801048c:	2900      	cmp	r1, #0
 801048e:	dd0e      	ble.n	80104ae <tcpProcessSegmentData+0x6e>
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 8010490:	2200      	movs	r2, #0
 8010492:	9201      	str	r2, [sp, #4]
 8010494:	9200      	str	r2, [sp, #0]
 8010496:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 801049a:	2110      	movs	r1, #16
 801049c:	4620      	mov	r0, r4
 801049e:	f7ff fb29 	bl	800faf4 <tcpSendSegment>
}
 80104a2:	b005      	add	sp, #20
 80104a4:	bd30      	pop	{r4, r5, pc}
      offset += socket->rcvNxt - leftEdge;
 80104a6:	1b45      	subs	r5, r0, r5
 80104a8:	442b      	add	r3, r5
      leftEdge = socket->rcvNxt;
 80104aa:	9003      	str	r0, [sp, #12]
 80104ac:	e7d7      	b.n	801045e <tcpProcessSegmentData+0x1e>
      length = rightEdge - leftEdge;
 80104ae:	9802      	ldr	r0, [sp, #8]
 80104b0:	1a85      	subs	r5, r0, r2
      socket->rcvNxt += length;
 80104b2:	442b      	add	r3, r5
 80104b4:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
      socket->rcvUser += length;
 80104b8:	f8d4 10b4 	ldr.w	r1, [r4, #180]	@ 0xb4
 80104bc:	4429      	add	r1, r5
 80104be:	f8c4 10b4 	str.w	r1, [r4, #180]	@ 0xb4
      socket->rcvWnd -= length;
 80104c2:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
 80104c6:	1a12      	subs	r2, r2, r0
 80104c8:	440a      	add	r2, r1
 80104ca:	f8c4 20b8 	str.w	r2, [r4, #184]	@ 0xb8
      tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndNxt, socket->rcvNxt, 0,
 80104ce:	2200      	movs	r2, #0
 80104d0:	9201      	str	r2, [sp, #4]
 80104d2:	9200      	str	r2, [sp, #0]
 80104d4:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80104d8:	2110      	movs	r1, #16
 80104da:	4620      	mov	r0, r4
 80104dc:	f7ff fb0a 	bl	800faf4 <tcpSendSegment>
      tcpUpdateEvents(socket);
 80104e0:	4620      	mov	r0, r4
 80104e2:	f7ff f9d9 	bl	800f898 <tcpUpdateEvents>
}
 80104e6:	e7dc      	b.n	80104a2 <tcpProcessSegmentData+0x62>

080104e8 <tcpReadRxBuffer>:
 * @param[in] length Number of data to read
 **/

void tcpReadRxBuffer(Socket *socket, uint32_t seqNum, uint8_t *data,
   size_t length)
{
 80104e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ec:	4605      	mov	r5, r0
 80104ee:	4617      	mov	r7, r2
 80104f0:	461e      	mov	r6, r3
   //Offset of the first byte to read in the circular buffer
   size_t offset = (seqNum - socket->irs - 1) % socket->rxBufferSize;
 80104f2:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
 80104f6:	1acc      	subs	r4, r1, r3
 80104f8:	3c01      	subs	r4, #1
 80104fa:	f8d0 3214 	ldr.w	r3, [r0, #532]	@ 0x214
 80104fe:	fbb4 f2f3 	udiv	r2, r4, r3
 8010502:	fb03 4412 	mls	r4, r3, r2, r4

   //Check whether the specified data crosses buffer boundaries
   if((offset + length) <= socket->rxBufferSize)
 8010506:	19a2      	adds	r2, r4, r6
 8010508:	4293      	cmp	r3, r2
 801050a:	d308      	bcc.n	801051e <tcpReadRxBuffer+0x36>
   {
      //Copy the payload
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 801050c:	4633      	mov	r3, r6
 801050e:	4622      	mov	r2, r4
 8010510:	f500 71ca 	add.w	r1, r0, #404	@ 0x194
 8010514:	4638      	mov	r0, r7
 8010516:	f7fb ff66 	bl	800c3e6 <netBufferRead>
      //Wrap around to the beginning of the circular buffer
      netBufferRead(data + socket->rxBufferSize - offset,
         (NetBuffer *) &socket->rxBuffer, 0,
         length - socket->rxBufferSize + offset);
   }
}
 801051a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netBufferRead(data, (NetBuffer *) &socket->rxBuffer,
 801051e:	f500 78ca 	add.w	r8, r0, #404	@ 0x194
 8010522:	1b1b      	subs	r3, r3, r4
 8010524:	4622      	mov	r2, r4
 8010526:	4641      	mov	r1, r8
 8010528:	4638      	mov	r0, r7
 801052a:	f7fb ff5c 	bl	800c3e6 <netBufferRead>
      netBufferRead(data + socket->rxBufferSize - offset,
 801052e:	f8d5 3214 	ldr.w	r3, [r5, #532]	@ 0x214
 8010532:	1b18      	subs	r0, r3, r4
         length - socket->rxBufferSize + offset);
 8010534:	1af3      	subs	r3, r6, r3
      netBufferRead(data + socket->rxBufferSize - offset,
 8010536:	4423      	add	r3, r4
 8010538:	2200      	movs	r2, #0
 801053a:	4641      	mov	r1, r8
 801053c:	4438      	add	r0, r7
 801053e:	f7fb ff52 	bl	800c3e6 <netBufferRead>
}
 8010542:	e7ea      	b.n	801051a <tcpReadRxBuffer+0x32>

08010544 <tcpDumpHeader>:
      (segment->flags & TCP_FLAG_ACK) ? 'A' : '-',
      (segment->flags & TCP_FLAG_URG) ? 'U' : '-',
      ntohl(segment->seqNum), ntohl(segment->seqNum) - iss,
      ntohl(segment->ackNum), ntohl(segment->ackNum) - irs,
      ntohs(segment->window), length);
}
 8010544:	4770      	bx	lr

08010546 <tcpCheckRetransmitTimer>:
 * @brief Check retransmission timer
 * @param[in] socket Handle referencing the socket
 **/

void tcpCheckRetransmitTimer(Socket *socket)
{
 8010546:	b538      	push	{r3, r4, r5, lr}
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 8010548:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 801054c:	2b00      	cmp	r3, #0
 801054e:	d046      	beq.n	80105de <tcpCheckRetransmitTimer+0x98>
 8010550:	4604      	mov	r4, r0
   {
      //Any packet in the retransmission queue?
      if(socket->retransmitQueue != NULL)
 8010552:	f8d0 3218 	ldr.w	r3, [r0, #536]	@ 0x218
 8010556:	2b00      	cmp	r3, #0
 8010558:	d041      	beq.n	80105de <tcpCheckRetransmitTimer+0x98>
      {
         //Retransmission timeout?
         if(netTimerExpired(&socket->retransmitTimer))
 801055a:	f500 7507 	add.w	r5, r0, #540	@ 0x21c
 801055e:	4628      	mov	r0, r5
 8010560:	f7fc f9bb 	bl	800c8da <netTimerExpired>
 8010564:	b3d8      	cbz	r0, 80105de <tcpCheckRetransmitTimer+0x98>
         {
#if (TCP_CONGEST_CONTROL_SUPPORT == ENABLED)
            //When a TCP sender detects segment loss using the retransmission
            //timer and the given segment has not yet been resent by way of
            //the retransmission timer, the value of ssthresh must be updated
            if(socket->retransmitCount == 0)
 8010566:	f8d4 2228 	ldr.w	r2, [r4, #552]	@ 0x228
 801056a:	b96a      	cbnz	r2, 8010588 <tcpCheckRetransmitTimer+0x42>
            {
               uint32_t flightSize;

               //Amount of data that has been sent but not yet acknowledged
               flightSize = socket->sndNxt - socket->sndUna;
 801056c:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8010570:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 8010574:	1a59      	subs	r1, r3, r1
               //Adjust ssthresh value
               socket->ssthresh = MAX(flightSize / 2, (uint32_t) socket->smss * 2);
 8010576:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 801057a:	005b      	lsls	r3, r3, #1
 801057c:	0849      	lsrs	r1, r1, #1
 801057e:	428b      	cmp	r3, r1
 8010580:	bf38      	it	cc
 8010582:	460b      	movcc	r3, r1
 8010584:	f8c4 30dc 	str.w	r3, [r4, #220]	@ 0xdc
            }

            //Furthermore, upon a timeout cwnd must be set to no more than the
            //loss window, LW, which equals 1 full-sized segment
            socket->cwnd = MIN((uint32_t) socket->smss * TCP_LOSS_WINDOW,
 8010588:	f8d4 1190 	ldr.w	r1, [r4, #400]	@ 0x190
 801058c:	f8b4 3086 	ldrh.w	r3, [r4, #134]	@ 0x86
 8010590:	428b      	cmp	r3, r1
 8010592:	bf28      	it	cs
 8010594:	460b      	movcs	r3, r1
 8010596:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
               socket->txBufferSize);

            //After a retransmit timeout, record the highest sequence number
            //transmitted in the variable recover
            socket->recover = socket->sndNxt - 1;
 801059a:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 801059e:	1e4b      	subs	r3, r1, #1
 80105a0:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8

            //Enter the fast loss recovery procedure
            socket->congestState = TCP_CONGEST_STATE_LOSS_RECOVERY;
 80105a4:	2302      	movs	r3, #2
 80105a6:	f884 30d4 	strb.w	r3, [r4, #212]	@ 0xd4
#endif
            //Make sure the maximum number of retransmissions has not been
            //reached
            if(socket->retransmitCount < TCP_MAX_RETRIES)
 80105aa:	2a04      	cmp	r2, #4
 80105ac:	d818      	bhi.n	80105e0 <tcpCheckRetransmitTimer+0x9a>
                  socket->retransmitCount + 1,
                  socket->retransmitQueue->length);

               //Retransmit the earliest segment that has not been acknowledged
               //by the TCP receiver
               tcpRetransmitSegment(socket);
 80105ae:	4620      	mov	r0, r4
 80105b0:	f7ff fd32 	bl	8010018 <tcpRetransmitSegment>

               //Use exponential back-off algorithm to calculate the new RTO
               socket->rto = MIN(socket->rto * 2, TCP_MAX_RTO);
 80105b4:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
 80105b8:	0049      	lsls	r1, r1, #1
 80105ba:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80105be:	4299      	cmp	r1, r3
 80105c0:	bf28      	it	cs
 80105c2:	4619      	movcs	r1, r3
 80105c4:	f8c4 10d0 	str.w	r1, [r4, #208]	@ 0xd0
               //Restart retransmission timer
               netStartTimer(&socket->retransmitTimer, socket->rto);
 80105c8:	4628      	mov	r0, r5
 80105ca:	f7fc f977 	bl	800c8bc <netStartTimer>
               //Increment retransmission counter
               socket->retransmitCount++;
 80105ce:	f8d4 3228 	ldr.w	r3, [r4, #552]	@ 0x228
 80105d2:	3301      	adds	r3, #1
 80105d4:	f8c4 3228 	str.w	r3, [r4, #552]	@ 0x228
               tcpChangeState(socket, TCP_STATE_CLOSED);
            }

            //TCP must use Karn's algorithm for taking RTT samples. That is, RTT
            //samples must not be made using segments that were retransmitted
            socket->rttBusy = FALSE;
 80105d8:	2300      	movs	r3, #0
 80105da:	f8c4 30bc 	str.w	r3, [r4, #188]	@ 0xbc
         }
      }
   }
}
 80105de:	bd38      	pop	{r3, r4, r5, pc}
               tcpSendResetSegment(socket, socket->sndNxt);
 80105e0:	4620      	mov	r0, r4
 80105e2:	f7ff fbd5 	bl	800fd90 <tcpSendResetSegment>
               netStopTimer(&socket->retransmitTimer);
 80105e6:	4628      	mov	r0, r5
 80105e8:	f7fc f972 	bl	800c8d0 <netStopTimer>
               tcpChangeState(socket, TCP_STATE_CLOSED);
 80105ec:	2100      	movs	r1, #0
 80105ee:	4620      	mov	r0, r4
 80105f0:	f7ff f9ed 	bl	800f9ce <tcpChangeState>
 80105f4:	e7f0      	b.n	80105d8 <tcpCheckRetransmitTimer+0x92>

080105f6 <tcpCheckPersistTimer>:
 **/

void tcpCheckPersistTimer(Socket *socket)
{
   //Check current TCP state
   if(socket->state != TCP_STATE_CLOSED)
 80105f6:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 80105fa:	2b00      	cmp	r3, #0
 80105fc:	d03e      	beq.n	801067c <tcpCheckPersistTimer+0x86>
{
 80105fe:	b530      	push	{r4, r5, lr}
 8010600:	b083      	sub	sp, #12
 8010602:	4604      	mov	r4, r0
   {
      //Check whether the remote host advertises a window size of zero
      if(socket->sndWnd == 0 && socket->wndProbeInterval != 0)
 8010604:	f8d0 30a0 	ldr.w	r3, [r0, #160]	@ 0xa0
 8010608:	b913      	cbnz	r3, 8010610 <tcpCheckPersistTimer+0x1a>
 801060a:	f8d0 3238 	ldr.w	r3, [r0, #568]	@ 0x238
 801060e:	b90b      	cbnz	r3, 8010614 <tcpCheckPersistTimer+0x1e>
               tcpChangeState(socket, TCP_STATE_CLOSED);
            }
         }
      }
   }
}
 8010610:	b003      	add	sp, #12
 8010612:	bd30      	pop	{r4, r5, pc}
         if(netTimerExpired(&socket->persistTimer))
 8010614:	f500 750f 	add.w	r5, r0, #572	@ 0x23c
 8010618:	4628      	mov	r0, r5
 801061a:	f7fc f95e 	bl	800c8da <netTimerExpired>
 801061e:	2800      	cmp	r0, #0
 8010620:	d0f6      	beq.n	8010610 <tcpCheckPersistTimer+0x1a>
            if(socket->wndProbeCount < TCP_MAX_RETRIES)
 8010622:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
 8010626:	2b04      	cmp	r3, #4
 8010628:	d81e      	bhi.n	8010668 <tcpCheckPersistTimer+0x72>
               tcpSendSegment(socket, TCP_FLAG_ACK, socket->sndUna - 1,
 801062a:	f8d4 2094 	ldr.w	r2, [r4, #148]	@ 0x94
 801062e:	2300      	movs	r3, #0
 8010630:	9301      	str	r3, [sp, #4]
 8010632:	9300      	str	r3, [sp, #0]
 8010634:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 8010638:	3a01      	subs	r2, #1
 801063a:	2110      	movs	r1, #16
 801063c:	4620      	mov	r0, r4
 801063e:	f7ff fa59 	bl	800faf4 <tcpSendSegment>
               socket->wndProbeInterval = MIN(socket->wndProbeInterval * 2,
 8010642:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 8010646:	0049      	lsls	r1, r1, #1
 8010648:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801064c:	4299      	cmp	r1, r3
 801064e:	bf28      	it	cs
 8010650:	4619      	movcs	r1, r3
 8010652:	f8c4 1238 	str.w	r1, [r4, #568]	@ 0x238
               netStartTimer(&socket->persistTimer, socket->wndProbeInterval);
 8010656:	4628      	mov	r0, r5
 8010658:	f7fc f930 	bl	800c8bc <netStartTimer>
               socket->wndProbeCount++;
 801065c:	f8d4 3234 	ldr.w	r3, [r4, #564]	@ 0x234
 8010660:	3301      	adds	r3, #1
 8010662:	f8c4 3234 	str.w	r3, [r4, #564]	@ 0x234
 8010666:	e7d3      	b.n	8010610 <tcpCheckPersistTimer+0x1a>
               tcpSendResetSegment(socket, socket->sndNxt);
 8010668:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 801066c:	4620      	mov	r0, r4
 801066e:	f7ff fb8f 	bl	800fd90 <tcpSendResetSegment>
               tcpChangeState(socket, TCP_STATE_CLOSED);
 8010672:	2100      	movs	r1, #0
 8010674:	4620      	mov	r0, r4
 8010676:	f7ff f9aa 	bl	800f9ce <tcpChangeState>
}
 801067a:	e7c9      	b.n	8010610 <tcpCheckPersistTimer+0x1a>
 801067c:	4770      	bx	lr

0801067e <tcpCheckOverrideTimer>:
   error_t error;
   uint32_t n;
   uint32_t u;

   //Check current TCP state
   if(socket->state == TCP_STATE_ESTABLISHED ||
 801067e:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8010682:	3b04      	subs	r3, #4
 8010684:	b2db      	uxtb	r3, r3
 8010686:	2b01      	cmp	r3, #1
 8010688:	d900      	bls.n	801068c <tcpCheckOverrideTimer+0xe>
 801068a:	4770      	bx	lr
{
 801068c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801068e:	b083      	sub	sp, #12
 8010690:	4604      	mov	r4, r0
      socket->state == TCP_STATE_CLOSE_WAIT)
   {
      //Override timer expired?
      if(socket->sndUser && netTimerExpired(&socket->overrideTimer))
 8010692:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8010696:	b90b      	cbnz	r3, 801069c <tcpCheckOverrideTimer+0x1e>
         {
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
         }
      }
   }
}
 8010698:	b003      	add	sp, #12
 801069a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(socket->sndUser && netTimerExpired(&socket->overrideTimer))
 801069c:	f500 7712 	add.w	r7, r0, #584	@ 0x248
 80106a0:	4638      	mov	r0, r7
 80106a2:	f7fc f91a 	bl	800c8da <netTimerExpired>
 80106a6:	2800      	cmp	r0, #0
 80106a8:	d0f6      	beq.n	8010698 <tcpCheckOverrideTimer+0x1a>
         n = MIN(socket->sndWnd, socket->txBufferSize);
 80106aa:	f8d4 3190 	ldr.w	r3, [r4, #400]	@ 0x190
 80106ae:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
 80106b2:	4293      	cmp	r3, r2
 80106b4:	bf28      	it	cs
 80106b6:	4613      	movcs	r3, r2
         n = MIN(n, socket->cwnd);
 80106b8:	f8d4 20d8 	ldr.w	r2, [r4, #216]	@ 0xd8
         u = n - (socket->sndNxt - socket->sndUna);
 80106bc:	f8d4 6094 	ldr.w	r6, [r4, #148]	@ 0x94
 80106c0:	f8d4 1098 	ldr.w	r1, [r4, #152]	@ 0x98
 80106c4:	1a76      	subs	r6, r6, r1
 80106c6:	429a      	cmp	r2, r3
 80106c8:	bf94      	ite	ls
 80106ca:	18b6      	addls	r6, r6, r2
 80106cc:	18f6      	addhi	r6, r6, r3
         while(socket->sndUser > 0)
 80106ce:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 80106d2:	b30b      	cbz	r3, 8010718 <tcpCheckOverrideTimer+0x9a>
            if((int32_t) u <= 0)
 80106d4:	2e00      	cmp	r6, #0
 80106d6:	dd1f      	ble.n	8010718 <tcpCheckOverrideTimer+0x9a>
            n = MIN(u, socket->sndUser);
 80106d8:	42b3      	cmp	r3, r6
 80106da:	bf28      	it	cs
 80106dc:	4633      	movcs	r3, r6
            n = MIN(n, socket->smss);
 80106de:	f8b4 5086 	ldrh.w	r5, [r4, #134]	@ 0x86
 80106e2:	429d      	cmp	r5, r3
 80106e4:	bf28      	it	cs
 80106e6:	461d      	movcs	r5, r3
            error = tcpSendSegment(socket, TCP_FLAG_PSH | TCP_FLAG_ACK,
 80106e8:	2301      	movs	r3, #1
 80106ea:	9301      	str	r3, [sp, #4]
 80106ec:	9500      	str	r5, [sp, #0]
 80106ee:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
 80106f2:	f8d4 2098 	ldr.w	r2, [r4, #152]	@ 0x98
 80106f6:	2118      	movs	r1, #24
 80106f8:	4620      	mov	r0, r4
 80106fa:	f7ff f9fb 	bl	800faf4 <tcpSendSegment>
            if(error)
 80106fe:	b958      	cbnz	r0, 8010718 <tcpCheckOverrideTimer+0x9a>
            socket->sndNxt += n;
 8010700:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
 8010704:	442b      	add	r3, r5
 8010706:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
            socket->sndUser -= n;
 801070a:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 801070e:	1b5b      	subs	r3, r3, r5
 8010710:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
            u -= n;
 8010714:	1b76      	subs	r6, r6, r5
 8010716:	e7da      	b.n	80106ce <tcpCheckOverrideTimer+0x50>
         tcpUpdateEvents(socket);
 8010718:	4620      	mov	r0, r4
 801071a:	f7ff f8bd 	bl	800f898 <tcpUpdateEvents>
         if(socket->sndUser > 0)
 801071e:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
 8010722:	2b00      	cmp	r3, #0
 8010724:	d0b8      	beq.n	8010698 <tcpCheckOverrideTimer+0x1a>
            netStartTimer(&socket->overrideTimer, TCP_OVERRIDE_TIMEOUT);
 8010726:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 801072a:	4638      	mov	r0, r7
 801072c:	f7fc f8c6 	bl	800c8bc <netStartTimer>
}
 8010730:	e7b2      	b.n	8010698 <tcpCheckOverrideTimer+0x1a>

08010732 <tcpCheckFinWait2Timer>:
 **/

void tcpCheckFinWait2Timer(Socket *socket)
{
   //Check current TCP state
   if(socket->state == TCP_STATE_FIN_WAIT_2)
 8010732:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8010736:	2b08      	cmp	r3, #8
 8010738:	d000      	beq.n	801073c <tcpCheckFinWait2Timer+0xa>
 801073a:	4770      	bx	lr
{
 801073c:	b510      	push	{r4, lr}
 801073e:	4604      	mov	r4, r0
   {
      //FIN-WAIT-2 timer expired?
      if(netTimerExpired(&socket->finWait2Timer))
 8010740:	f500 7015 	add.w	r0, r0, #596	@ 0x254
 8010744:	f7fc f8c9 	bl	800c8da <netTimerExpired>
 8010748:	b900      	cbnz	r0, 801074c <tcpCheckFinWait2Timer+0x1a>
         TRACE_INFO("TCP FIN-WAIT-2 timer elapsed...\r\n");
         //Enter CLOSED state
         tcpChangeState(socket, TCP_STATE_CLOSED);
      }
   }
}
 801074a:	bd10      	pop	{r4, pc}
         tcpChangeState(socket, TCP_STATE_CLOSED);
 801074c:	2100      	movs	r1, #0
 801074e:	4620      	mov	r0, r4
 8010750:	f7ff f93d 	bl	800f9ce <tcpChangeState>
}
 8010754:	e7f9      	b.n	801074a <tcpCheckFinWait2Timer+0x18>

08010756 <tcpCheckTimeWaitTimer>:
 **/

void tcpCheckTimeWaitTimer(Socket *socket)
{
   //Check current TCP state
   if(socket->state == TCP_STATE_TIME_WAIT)
 8010756:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 801075a:	2b0a      	cmp	r3, #10
 801075c:	d000      	beq.n	8010760 <tcpCheckTimeWaitTimer+0xa>
 801075e:	4770      	bx	lr
{
 8010760:	b510      	push	{r4, lr}
 8010762:	4604      	mov	r4, r0
   {
      //2MSL timer expired?
      if(netTimerExpired(&socket->timeWaitTimer))
 8010764:	f500 7018 	add.w	r0, r0, #608	@ 0x260
 8010768:	f7fc f8b7 	bl	800c8da <netTimerExpired>
 801076c:	b900      	cbnz	r0, 8010770 <tcpCheckTimeWaitTimer+0x1a>
            //Mark the socket as closed
            socket->type = SOCKET_TYPE_UNUSED;
         }
      }
   }
}
 801076e:	bd10      	pop	{r4, pc}
         tcpChangeState(socket, TCP_STATE_CLOSED);
 8010770:	2100      	movs	r1, #0
 8010772:	4620      	mov	r0, r4
 8010774:	f7ff f92b 	bl	800f9ce <tcpChangeState>
         if(!socket->ownedFlag)
 8010778:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1f7      	bne.n	801076e <tcpCheckTimeWaitTimer+0x18>
            tcpDeleteControlBlock(socket);
 801077e:	4620      	mov	r0, r4
 8010780:	f7fe ff8b 	bl	800f69a <tcpDeleteControlBlock>
            socket->type = SOCKET_TYPE_UNUSED;
 8010784:	2300      	movs	r3, #0
 8010786:	6063      	str	r3, [r4, #4]
}
 8010788:	e7f1      	b.n	801076e <tcpCheckTimeWaitTimer+0x18>
	...

0801078c <tcpTick>:
{
 801078c:	b538      	push	{r3, r4, r5, lr}
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 801078e:	2500      	movs	r5, #0
 8010790:	e000      	b.n	8010794 <tcpTick+0x8>
 8010792:	3501      	adds	r5, #1
 8010794:	2d09      	cmp	r5, #9
 8010796:	d81b      	bhi.n	80107d0 <tcpTick+0x44>
      socket = &socketTable[i];
 8010798:	f44f 731c 	mov.w	r3, #624	@ 0x270
 801079c:	4c0d      	ldr	r4, [pc, #52]	@ (80107d4 <tcpTick+0x48>)
 801079e:	fb03 4405 	mla	r4, r3, r5, r4
      if(socket->type == SOCKET_TYPE_STREAM)
 80107a2:	6863      	ldr	r3, [r4, #4]
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d1f4      	bne.n	8010792 <tcpTick+0x6>
         if(socket->state != TCP_STATE_CLOSED)
 80107a8:	f894 3074 	ldrb.w	r3, [r4, #116]	@ 0x74
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d0f0      	beq.n	8010792 <tcpTick+0x6>
            tcpCheckRetransmitTimer(socket);
 80107b0:	4620      	mov	r0, r4
 80107b2:	f7ff fec8 	bl	8010546 <tcpCheckRetransmitTimer>
            tcpCheckPersistTimer(socket);
 80107b6:	4620      	mov	r0, r4
 80107b8:	f7ff ff1d 	bl	80105f6 <tcpCheckPersistTimer>
            tcpCheckOverrideTimer(socket);
 80107bc:	4620      	mov	r0, r4
 80107be:	f7ff ff5e 	bl	801067e <tcpCheckOverrideTimer>
            tcpCheckFinWait2Timer(socket);
 80107c2:	4620      	mov	r0, r4
 80107c4:	f7ff ffb5 	bl	8010732 <tcpCheckFinWait2Timer>
            tcpCheckTimeWaitTimer(socket);
 80107c8:	4620      	mov	r0, r4
 80107ca:	f7ff ffc4 	bl	8010756 <tcpCheckTimeWaitTimer>
 80107ce:	e7e0      	b.n	8010792 <tcpTick+0x6>
}
 80107d0:	bd38      	pop	{r3, r4, r5, pc}
 80107d2:	bf00      	nop
 80107d4:	20001ef8 	.word	0x20001ef8

080107d8 <udpInit>:
 * @brief UDP related initialization
 * @return Error code
 **/

error_t udpInit(void)
{
 80107d8:	b510      	push	{r4, lr}
   //Reset ephemeral port number
   udpDynamicPort = 0;
 80107da:	2400      	movs	r4, #0
 80107dc:	4804      	ldr	r0, [pc, #16]	@ (80107f0 <udpInit+0x18>)
 80107de:	f820 4b04 	strh.w	r4, [r0], #4

   //Initialize callback table
   osMemset(udpCallbackTable, 0, sizeof(udpCallbackTable));
 80107e2:	22a0      	movs	r2, #160	@ 0xa0
 80107e4:	4621      	mov	r1, r4
 80107e6:	f004 fa4d 	bl	8014c84 <memset>

   //Successful initialization
   return NO_ERROR;
}
 80107ea:	4620      	mov	r0, r4
 80107ec:	bd10      	pop	{r4, pc}
 80107ee:	bf00      	nop
 80107f0:	2000376c 	.word	0x2000376c

080107f4 <udpGetDynamicPort>:
 * @brief Get an ephemeral port number
 * @return Ephemeral port
 **/

uint16_t udpGetDynamicPort(void)
{
 80107f4:	b508      	push	{r3, lr}
   uint_t port;

   //Retrieve current port number
   port = udpDynamicPort;
 80107f6:	4b0e      	ldr	r3, [pc, #56]	@ (8010830 <udpGetDynamicPort+0x3c>)
 80107f8:	8818      	ldrh	r0, [r3, #0]

   //Invalid port number?
   if(port < SOCKET_EPHEMERAL_PORT_MIN || port > SOCKET_EPHEMERAL_PORT_MAX)
 80107fa:	f5a0 4340 	sub.w	r3, r0, #49152	@ 0xc000
 80107fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010802:	d208      	bcs.n	8010816 <udpGetDynamicPort+0x22>
      port = netGenerateRandRange(SOCKET_EPHEMERAL_PORT_MIN,
         SOCKET_EPHEMERAL_PORT_MAX);
   }

   //Next dynamic port to use
   if(port < SOCKET_EPHEMERAL_PORT_MAX)
 8010804:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8010808:	4298      	cmp	r0, r3
 801080a:	d80b      	bhi.n	8010824 <udpGetDynamicPort+0x30>
   {
      //Increment port number
      udpDynamicPort = port + 1;
 801080c:	1c43      	adds	r3, r0, #1
 801080e:	4a08      	ldr	r2, [pc, #32]	@ (8010830 <udpGetDynamicPort+0x3c>)
 8010810:	8013      	strh	r3, [r2, #0]
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
   }

   //Return an ephemeral port number
   return port;
}
 8010812:	b280      	uxth	r0, r0
 8010814:	bd08      	pop	{r3, pc}
      port = netGenerateRandRange(SOCKET_EPHEMERAL_PORT_MIN,
 8010816:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801081a:	f44f 4040 	mov.w	r0, #49152	@ 0xc000
 801081e:	f7fc f959 	bl	800cad4 <netGenerateRandRange>
 8010822:	e7ef      	b.n	8010804 <udpGetDynamicPort+0x10>
      udpDynamicPort = SOCKET_EPHEMERAL_PORT_MIN;
 8010824:	4b02      	ldr	r3, [pc, #8]	@ (8010830 <udpGetDynamicPort+0x3c>)
 8010826:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 801082a:	801a      	strh	r2, [r3, #0]
 801082c:	e7f1      	b.n	8010812 <udpGetDynamicPort+0x1e>
 801082e:	bf00      	nop
 8010830:	2000376c 	.word	0x2000376c

08010834 <udpSendBuffer>:
 **/

error_t udpSendBuffer(NetInterface *interface, const IpAddr *srcIpAddr,
   uint16_t srcPort, const IpAddr *destIpAddr, uint16_t destPort,
   NetBuffer *buffer, size_t offset, NetTxAncillary *ancillary)
{
 8010834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010838:	b090      	sub	sp, #64	@ 0x40
 801083a:	9003      	str	r0, [sp, #12]
 801083c:	460f      	mov	r7, r1
 801083e:	4690      	mov	r8, r2
 8010840:	461e      	mov	r6, r3
 8010842:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
   size_t length;
   UdpHeader *header;
   IpPseudoHeader pseudoHeader;

   //Make room for the UDP header
   offset -= sizeof(UdpHeader);
 8010846:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8010848:	3c08      	subs	r4, #8
   //Retrieve the length of the datagram
   length = netBufferGetLength(buffer) - offset;
 801084a:	4650      	mov	r0, sl
 801084c:	f7fb fc14 	bl	800c078 <netBufferGetLength>
 8010850:	1b05      	subs	r5, r0, r4

   //Check the length of the payload
   if(length > UINT16_MAX)
 8010852:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 8010856:	f080 80b5 	bcs.w	80109c4 <udpSendBuffer+0x190>
      return ERROR_INVALID_LENGTH;

   //Point to the UDP header
   header = netBufferAt(buffer, offset, sizeof(UdpHeader));
 801085a:	2208      	movs	r2, #8
 801085c:	4621      	mov	r1, r4
 801085e:	4650      	mov	r0, sl
 8010860:	f7fb fcaa 	bl	800c1b8 <netBufferAt>
   //Sanity check
   if(header == NULL)
 8010864:	4681      	mov	r9, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	f000 80b0 	beq.w	80109cc <udpSendBuffer+0x198>
      return ERROR_FAILURE;

   //Format UDP header
   header->srcPort = htons(srcPort);
 801086c:	4640      	mov	r0, r8
 801086e:	f7ef fed5 	bl	800061c <swapInt16>
 8010872:	f8a9 0000 	strh.w	r0, [r9]
   header->destPort = htons(destPort);
 8010876:	f8bd 0060 	ldrh.w	r0, [sp, #96]	@ 0x60
 801087a:	f7ef fecf 	bl	800061c <swapInt16>
 801087e:	f8a9 0002 	strh.w	r0, [r9, #2]
   header->length = htons(length);
 8010882:	fa1f f885 	uxth.w	r8, r5
 8010886:	4640      	mov	r0, r8
 8010888:	f7ef fec8 	bl	800061c <swapInt16>
 801088c:	f8a9 0004 	strh.w	r0, [r9, #4]
   header->checksum = 0;
 8010890:	2300      	movs	r3, #0
 8010892:	f889 3006 	strb.w	r3, [r9, #6]
 8010896:	f889 3007 	strb.w	r3, [r9, #7]

#if (IPV4_SUPPORT == ENABLED)
   //Destination address is an IPv4 address?
   if(destIpAddr->length == sizeof(Ipv4Addr))
 801089a:	6833      	ldr	r3, [r6, #0]
 801089c:	2b04      	cmp	r3, #4
 801089e:	d038      	beq.n	8010912 <udpSendBuffer+0xde>
   }
   else
#endif
#if (IPV6_SUPPORT == ENABLED)
   //Destination address is an IPv6 address?
   if(destIpAddr->length == sizeof(Ipv6Addr))
 80108a0:	2b10      	cmp	r3, #16
 80108a2:	f040 8095 	bne.w	80109d0 <udpSendBuffer+0x19c>
   {
      //Valid source IP address?
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv6Addr))
 80108a6:	b117      	cbz	r7, 80108ae <udpSendBuffer+0x7a>
 80108a8:	683b      	ldr	r3, [r7, #0]
 80108aa:	2b10      	cmp	r3, #16
 80108ac:	d07c      	beq.n	80109a8 <udpSendBuffer+0x174>
      }
      else
      {
         //Select the source IPv6 address and the relevant network interface
         //to use when sending data to the specified destination host
         error = ipv6SelectSourceAddr(&interface, &destIpAddr->ipv6Addr,
 80108ae:	aa06      	add	r2, sp, #24
 80108b0:	1d31      	adds	r1, r6, #4
 80108b2:	a803      	add	r0, sp, #12
 80108b4:	f7f7 fbda 	bl	800806c <ipv6SelectSourceAddr>
            &pseudoHeader.ipv6Data.srcAddr);
         //Any error to report?
         if(error)
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f040 8084 	bne.w	80109c6 <udpSendBuffer+0x192>
            return error;
      }

      //Format IPv6 pseudo header
      pseudoHeader.length = sizeof(Ipv6PseudoHeader);
 80108be:	f04f 0828 	mov.w	r8, #40	@ 0x28
 80108c2:	f8cd 8014 	str.w	r8, [sp, #20]
      pseudoHeader.ipv6Data.destAddr = destIpAddr->ipv6Addr;
 80108c6:	eb0d 0708 	add.w	r7, sp, r8
 80108ca:	3604      	adds	r6, #4
 80108cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80108d0:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
      pseudoHeader.ipv6Data.length = htonl(length);
 80108d4:	4628      	mov	r0, r5
 80108d6:	f7ef fea4 	bl	8000622 <swapInt32>
 80108da:	900e      	str	r0, [sp, #56]	@ 0x38
      pseudoHeader.ipv6Data.reserved[0] = 0;
 80108dc:	2300      	movs	r3, #0
 80108de:	f88d 303c 	strb.w	r3, [sp, #60]	@ 0x3c
      pseudoHeader.ipv6Data.reserved[1] = 0;
 80108e2:	f88d 303d 	strb.w	r3, [sp, #61]	@ 0x3d
      pseudoHeader.ipv6Data.reserved[2] = 0;
 80108e6:	f88d 303e 	strb.w	r3, [sp, #62]	@ 0x3e
      pseudoHeader.ipv6Data.nextHeader = IPV6_UDP_HEADER;
 80108ea:	2311      	movs	r3, #17
 80108ec:	f88d 303f 	strb.w	r3, [sp, #63]	@ 0x3f

      //Unlike IPv4, when UDP packets are originated by an IPv6 node, the UDP
      //checksum is not optional (refer to RFC 2460, section 8.1)
      header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv6Data,
 80108f0:	9500      	str	r5, [sp, #0]
 80108f2:	4623      	mov	r3, r4
 80108f4:	4652      	mov	r2, sl
 80108f6:	4641      	mov	r1, r8
 80108f8:	a806      	add	r0, sp, #24
 80108fa:	f7f4 fe45 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 80108fe:	f8a9 0006 	strh.w	r0, [r9, #6]
         sizeof(Ipv6PseudoHeader), buffer, offset, length);

      //If that computation yields a result of zero, it must be changed to hex
      //FFFF for placement in the UDP header
      if(header->checksum == 0)
 8010902:	bb20      	cbnz	r0, 801094e <udpSendBuffer+0x11a>
      {
         header->checksum = 0xFFFF;
 8010904:	f04f 33ff 	mov.w	r3, #4294967295
 8010908:	f889 3006 	strb.w	r3, [r9, #6]
 801090c:	f889 3007 	strb.w	r3, [r9, #7]
 8010910:	e01d      	b.n	801094e <udpSendBuffer+0x11a>
      if(srcIpAddr != NULL && srcIpAddr->length == sizeof(Ipv4Addr))
 8010912:	b117      	cbz	r7, 801091a <udpSendBuffer+0xe6>
 8010914:	683b      	ldr	r3, [r7, #0]
 8010916:	2b04      	cmp	r3, #4
 8010918:	d022      	beq.n	8010960 <udpSendBuffer+0x12c>
         error = ipv4SelectSourceAddr(&interface, destIpAddr->ipv4Addr,
 801091a:	aa04      	add	r2, sp, #16
 801091c:	6871      	ldr	r1, [r6, #4]
 801091e:	a803      	add	r0, sp, #12
 8010920:	f7f5 fd1c 	bl	800635c <ipv4SelectSourceAddr>
         if(!error)
 8010924:	bb28      	cbnz	r0, 8010972 <udpSendBuffer+0x13e>
            pseudoHeader.ipv4Data.srcAddr = ipAddr;
 8010926:	9b04      	ldr	r3, [sp, #16]
 8010928:	9306      	str	r3, [sp, #24]
      pseudoHeader.length = sizeof(Ipv4PseudoHeader);
 801092a:	230c      	movs	r3, #12
 801092c:	9305      	str	r3, [sp, #20]
      pseudoHeader.ipv4Data.destAddr = destIpAddr->ipv4Addr;
 801092e:	6873      	ldr	r3, [r6, #4]
 8010930:	9307      	str	r3, [sp, #28]
      pseudoHeader.ipv4Data.reserved = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	f88d 3020 	strb.w	r3, [sp, #32]
      pseudoHeader.ipv4Data.protocol = IPV4_PROTOCOL_UDP;
 8010938:	2311      	movs	r3, #17
 801093a:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
      pseudoHeader.ipv4Data.length = htons(length);
 801093e:	4640      	mov	r0, r8
 8010940:	f7ef fe6c 	bl	800061c <swapInt16>
 8010944:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
      if(!ancillary->noChecksum)
 8010948:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	b1d3      	cbz	r3, 8010984 <udpSendBuffer+0x150>
   TRACE_INFO("Sending UDP datagram (%" PRIuSIZE " bytes)\r\n", length);
   //Dump UDP header contents for debugging purpose
   udpDumpHeader(header);

   //Send UDP datagram
   error = ipSendDatagram(interface, &pseudoHeader, buffer, offset, ancillary);
 801094e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010950:	9300      	str	r3, [sp, #0]
 8010952:	4623      	mov	r3, r4
 8010954:	4652      	mov	r2, sl
 8010956:	a905      	add	r1, sp, #20
 8010958:	9803      	ldr	r0, [sp, #12]
 801095a:	f7f4 fcb1 	bl	80052c0 <ipSendDatagram>

   //Return status code
   return error;
 801095e:	e032      	b.n	80109c6 <udpSendBuffer+0x192>
         if(interface == NULL)
 8010960:	9b03      	ldr	r3, [sp, #12]
 8010962:	b113      	cbz	r3, 801096a <udpSendBuffer+0x136>
         pseudoHeader.ipv4Data.srcAddr = srcIpAddr->ipv4Addr;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	9306      	str	r3, [sp, #24]
 8010968:	e7df      	b.n	801092a <udpSendBuffer+0xf6>
            interface = netGetDefaultInterface();
 801096a:	f7fb fa75 	bl	800be58 <netGetDefaultInterface>
 801096e:	9003      	str	r0, [sp, #12]
 8010970:	e7f8      	b.n	8010964 <udpSendBuffer+0x130>
            if(destIpAddr->ipv4Addr == IPV4_BROADCAST_ADDR && interface != NULL)
 8010972:	6873      	ldr	r3, [r6, #4]
 8010974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010978:	d125      	bne.n	80109c6 <udpSendBuffer+0x192>
 801097a:	9b03      	ldr	r3, [sp, #12]
 801097c:	b31b      	cbz	r3, 80109c6 <udpSendBuffer+0x192>
               pseudoHeader.ipv4Data.srcAddr = IPV4_UNSPECIFIED_ADDR;
 801097e:	2300      	movs	r3, #0
 8010980:	9306      	str	r3, [sp, #24]
 8010982:	e7d2      	b.n	801092a <udpSendBuffer+0xf6>
         header->checksum = ipCalcUpperLayerChecksumEx(&pseudoHeader.ipv4Data,
 8010984:	9500      	str	r5, [sp, #0]
 8010986:	4623      	mov	r3, r4
 8010988:	4652      	mov	r2, sl
 801098a:	210c      	movs	r1, #12
 801098c:	a806      	add	r0, sp, #24
 801098e:	f7f4 fdfb 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 8010992:	f8a9 0006 	strh.w	r0, [r9, #6]
         if(header->checksum == 0)
 8010996:	2800      	cmp	r0, #0
 8010998:	d1d9      	bne.n	801094e <udpSendBuffer+0x11a>
            header->checksum = 0xFFFF;
 801099a:	f04f 33ff 	mov.w	r3, #4294967295
 801099e:	f889 3006 	strb.w	r3, [r9, #6]
 80109a2:	f889 3007 	strb.w	r3, [r9, #7]
 80109a6:	e7d2      	b.n	801094e <udpSendBuffer+0x11a>
         if(interface == NULL)
 80109a8:	9b03      	ldr	r3, [sp, #12]
 80109aa:	b13b      	cbz	r3, 80109bc <udpSendBuffer+0x188>
         pseudoHeader.ipv6Data.srcAddr = srcIpAddr->ipv6Addr;
 80109ac:	f10d 0c18 	add.w	ip, sp, #24
 80109b0:	3704      	adds	r7, #4
 80109b2:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80109b6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
 80109ba:	e780      	b.n	80108be <udpSendBuffer+0x8a>
            interface = netGetDefaultInterface();
 80109bc:	f7fb fa4c 	bl	800be58 <netGetDefaultInterface>
 80109c0:	9003      	str	r0, [sp, #12]
 80109c2:	e7f3      	b.n	80109ac <udpSendBuffer+0x178>
      return ERROR_INVALID_LENGTH;
 80109c4:	20ec      	movs	r0, #236	@ 0xec
}
 80109c6:	b010      	add	sp, #64	@ 0x40
 80109c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return ERROR_FAILURE;
 80109cc:	2001      	movs	r0, #1
 80109ce:	e7fa      	b.n	80109c6 <udpSendBuffer+0x192>
      return ERROR_FAILURE;
 80109d0:	2001      	movs	r0, #1
 80109d2:	e7f8      	b.n	80109c6 <udpSendBuffer+0x192>

080109d4 <udpAllocBuffer>:
 * @return The function returns a pointer to the newly allocated
 *   buffer. If the system is out of resources, NULL is returned
 **/

NetBuffer *udpAllocBuffer(size_t length, size_t *offset)
{
 80109d4:	b510      	push	{r4, lr}
 80109d6:	460c      	mov	r4, r1
   NetBuffer *buffer;

   //Allocate a buffer to hold the UDP header and the payload
   buffer = ipAllocBuffer(length + sizeof(UdpHeader), offset);
 80109d8:	3008      	adds	r0, #8
 80109da:	f7f4 fdea 	bl	80055b2 <ipAllocBuffer>
   //Failed to allocate buffer?
   if(buffer == NULL)
 80109de:	b110      	cbz	r0, 80109e6 <udpAllocBuffer+0x12>
      return NULL;

   //Offset to the first byte of the payload
   *offset += sizeof(UdpHeader);
 80109e0:	6823      	ldr	r3, [r4, #0]
 80109e2:	3308      	adds	r3, #8
 80109e4:	6023      	str	r3, [r4, #0]

   //Return a pointer to the freshly allocated buffer
   return buffer;
}
 80109e6:	bd10      	pop	{r4, pc}

080109e8 <udpSendDatagram>:
{
 80109e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80109ec:	b08f      	sub	sp, #60	@ 0x3c
 80109ee:	4605      	mov	r5, r0
 80109f0:	460c      	mov	r4, r1
 80109f2:	4617      	mov	r7, r2
   if(message->interface != NULL)
 80109f4:	f8d1 9014 	ldr.w	r9, [r1, #20]
 80109f8:	f1b9 0f00 	cmp.w	r9, #0
 80109fc:	d05a      	beq.n	8010ab4 <udpSendDatagram+0xcc>
   buffer = udpAllocBuffer(0, &offset);
 80109fe:	a90d      	add	r1, sp, #52	@ 0x34
 8010a00:	2000      	movs	r0, #0
 8010a02:	f7ff ffe7 	bl	80109d4 <udpAllocBuffer>
   if(buffer == NULL)
 8010a06:	4680      	mov	r8, r0
 8010a08:	2800      	cmp	r0, #0
 8010a0a:	d078      	beq.n	8010afe <udpSendDatagram+0x116>
   error = netBufferAppend(buffer, message->data, message->length);
 8010a0c:	68a2      	ldr	r2, [r4, #8]
 8010a0e:	6821      	ldr	r1, [r4, #0]
 8010a10:	f7fb fca7 	bl	800c362 <netBufferAppend>
   if(!error)
 8010a14:	4606      	mov	r6, r0
 8010a16:	2800      	cmp	r0, #0
 8010a18:	d145      	bne.n	8010aa6 <udpSendDatagram+0xbe>
      ancillary = NET_DEFAULT_TX_ANCILLARY;
 8010a1a:	f10d 0c14 	add.w	ip, sp, #20
 8010a1e:	4e39      	ldr	r6, [pc, #228]	@ (8010b04 <udpSendDatagram+0x11c>)
 8010a20:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8010a22:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a26:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8010a2a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      if((socket->options & SOCKET_OPTION_UDP_NO_CHECKSUM) != 0)
 8010a2e:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8010a30:	f413 4f80 	tst.w	r3, #16384	@ 0x4000
 8010a34:	d001      	beq.n	8010a3a <udpSendDatagram+0x52>
         ancillary.noChecksum = TRUE;
 8010a36:	2301      	movs	r3, #1
 8010a38:	9305      	str	r3, [sp, #20]
      if(message->ttl != 0)
 8010a3a:	7b23      	ldrb	r3, [r4, #12]
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d03c      	beq.n	8010aba <udpSendDatagram+0xd2>
         ancillary.ttl = message->ttl;
 8010a40:	f88d 3018 	strb.w	r3, [sp, #24]
      if(message->tos != 0)
 8010a44:	7b63      	ldrb	r3, [r4, #13]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d046      	beq.n	8010ad8 <udpSendDatagram+0xf0>
         ancillary.tos = message->tos;
 8010a4a:	f88d 3019 	strb.w	r3, [sp, #25]
      if(message->destIpAddr.length == sizeof(Ipv4Addr) &&
 8010a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8010a50:	2b04      	cmp	r3, #4
 8010a52:	d046      	beq.n	8010ae2 <udpSendDatagram+0xfa>
      else if(message->destIpAddr.length == sizeof(Ipv6Addr) &&
 8010a54:	2b10      	cmp	r3, #16
 8010a56:	d04b      	beq.n	8010af0 <udpSendDatagram+0x108>
         ancillary.dontFrag = message->dontFrag;
 8010a58:	6923      	ldr	r3, [r4, #16]
 8010a5a:	9307      	str	r3, [sp, #28]
      if((flags & SOCKET_FLAG_DONT_ROUTE) != 0)
 8010a5c:	f417 6f80 	tst.w	r7, #1024	@ 0x400
 8010a60:	d001      	beq.n	8010a66 <udpSendDatagram+0x7e>
         ancillary.dontRoute = TRUE;
 8010a62:	2301      	movs	r3, #1
 8010a64:	9308      	str	r3, [sp, #32]
      ancillary.srcMacAddr = message->srcMacAddr;
 8010a66:	f8d4 0046 	ldr.w	r0, [r4, #70]	@ 0x46
 8010a6a:	900a      	str	r0, [sp, #40]	@ 0x28
 8010a6c:	f8b4 304a 	ldrh.w	r3, [r4, #74]	@ 0x4a
 8010a70:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
      ancillary.destMacAddr = message->destMacAddr;
 8010a74:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 8010a76:	f8cd 002e 	str.w	r0, [sp, #46]	@ 0x2e
 8010a7a:	f8b4 3050 	ldrh.w	r3, [r4, #80]	@ 0x50
 8010a7e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
         &message->destIpAddr, message->destPort, buffer, offset, &ancillary);
 8010a82:	f8b4 3044 	ldrh.w	r3, [r4, #68]	@ 0x44
      error = udpSendBuffer(interface, &message->srcIpAddr, socket->localPort,
 8010a86:	aa05      	add	r2, sp, #20
 8010a88:	9203      	str	r2, [sp, #12]
 8010a8a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010a8c:	9202      	str	r2, [sp, #8]
 8010a8e:	f8cd 8004 	str.w	r8, [sp, #4]
 8010a92:	9300      	str	r3, [sp, #0]
 8010a94:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8010a98:	8caa      	ldrh	r2, [r5, #36]	@ 0x24
 8010a9a:	f104 0118 	add.w	r1, r4, #24
 8010a9e:	4648      	mov	r0, r9
 8010aa0:	f7ff fec8 	bl	8010834 <udpSendBuffer>
 8010aa4:	4606      	mov	r6, r0
   netBufferFree(buffer);
 8010aa6:	4640      	mov	r0, r8
 8010aa8:	f7fb fb5e 	bl	800c168 <netBufferFree>
}
 8010aac:	4630      	mov	r0, r6
 8010aae:	b00f      	add	sp, #60	@ 0x3c
 8010ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      interface = socket->interface;
 8010ab4:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8010ab8:	e7a1      	b.n	80109fe <udpSendDatagram+0x16>
      else if(ipIsMulticastAddr(&message->destIpAddr))
 8010aba:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8010abe:	f7f4 fc60 	bl	8005382 <ipIsMulticastAddr>
 8010ac2:	b120      	cbz	r0, 8010ace <udpSendDatagram+0xe6>
         ancillary.ttl = socket->multicastTtl;
 8010ac4:	f895 304a 	ldrb.w	r3, [r5, #74]	@ 0x4a
 8010ac8:	f88d 3018 	strb.w	r3, [sp, #24]
 8010acc:	e7ba      	b.n	8010a44 <udpSendDatagram+0x5c>
         ancillary.ttl = socket->ttl;
 8010ace:	f895 3049 	ldrb.w	r3, [r5, #73]	@ 0x49
 8010ad2:	f88d 3018 	strb.w	r3, [sp, #24]
 8010ad6:	e7b5      	b.n	8010a44 <udpSendDatagram+0x5c>
         ancillary.tos = socket->tos;
 8010ad8:	f895 3048 	ldrb.w	r3, [r5, #72]	@ 0x48
 8010adc:	f88d 3019 	strb.w	r3, [sp, #25]
 8010ae0:	e7b5      	b.n	8010a4e <udpSendDatagram+0x66>
         (socket->options & SOCKET_OPTION_IPV4_DONT_FRAG) != 0)
 8010ae2:	6c2a      	ldr	r2, [r5, #64]	@ 0x40
      if(message->destIpAddr.length == sizeof(Ipv4Addr) &&
 8010ae4:	f012 0f08 	tst.w	r2, #8
 8010ae8:	d0b4      	beq.n	8010a54 <udpSendDatagram+0x6c>
         ancillary.dontFrag = TRUE;
 8010aea:	2301      	movs	r3, #1
 8010aec:	9307      	str	r3, [sp, #28]
 8010aee:	e7b5      	b.n	8010a5c <udpSendDatagram+0x74>
         (socket->options & SOCKET_OPTION_IPV6_DONT_FRAG) != 0)
 8010af0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
      else if(message->destIpAddr.length == sizeof(Ipv6Addr) &&
 8010af2:	f413 7f00 	tst.w	r3, #512	@ 0x200
 8010af6:	d0af      	beq.n	8010a58 <udpSendDatagram+0x70>
         ancillary.dontFrag = TRUE;
 8010af8:	2301      	movs	r3, #1
 8010afa:	9307      	str	r3, [sp, #28]
 8010afc:	e7ae      	b.n	8010a5c <udpSendDatagram+0x74>
      return ERROR_OUT_OF_MEMORY;
 8010afe:	2664      	movs	r6, #100	@ 0x64
 8010b00:	e7d4      	b.n	8010aac <udpSendDatagram+0xc4>
 8010b02:	bf00      	nop
 8010b04:	08019fc4 	.word	0x08019fc4

08010b08 <udpUpdateEvents>:
 * @brief Update UDP related events
 * @param[in] socket Handle referencing the socket
 **/

void udpUpdateEvents(Socket *socket)
{
 8010b08:	b510      	push	{r4, lr}
 8010b0a:	4604      	mov	r4, r0
   //Clear event flags
   socket->eventFlags = 0;
 8010b0c:	2300      	movs	r3, #0
 8010b0e:	66c3      	str	r3, [r0, #108]	@ 0x6c

   //The socket is marked as readable if a datagram is pending in the queue
   if(socket->receiveQueue)
 8010b10:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010b14:	b10b      	cbz	r3, 8010b1a <udpUpdateEvents+0x12>
      socket->eventFlags |= SOCKET_EVENT_RX_READY;
 8010b16:	2380      	movs	r3, #128	@ 0x80
 8010b18:	66c3      	str	r3, [r0, #108]	@ 0x6c

   //Check whether the socket is bound to a particular network interface
   if(socket->interface != NULL)
 8010b1a:	68e3      	ldr	r3, [r4, #12]
 8010b1c:	b12b      	cbz	r3, 8010b2a <udpUpdateEvents+0x22>
   {
      //Handle link up and link down events
      if(socket->interface->linkState)
 8010b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010b20:	b14b      	cbz	r3, 8010b36 <udpUpdateEvents+0x2e>
      {
         socket->eventFlags |= SOCKET_EVENT_LINK_UP;
 8010b22:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010b24:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010b28:	66e3      	str	r3, [r4, #108]	@ 0x6c
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
      }
   }

   //Mask unused events
   socket->eventFlags &= socket->eventMask;
 8010b2a:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010b2c:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8010b2e:	4013      	ands	r3, r2
 8010b30:	66e3      	str	r3, [r4, #108]	@ 0x6c

   //Any event to signal?
   if(socket->eventFlags)
 8010b32:	b92b      	cbnz	r3, 8010b40 <udpUpdateEvents+0x38>
      if(socket->userEvent != NULL)
      {
         osSetEvent(socket->userEvent);
      }
   }
}
 8010b34:	bd10      	pop	{r4, pc}
         socket->eventFlags |= SOCKET_EVENT_LINK_DOWN;
 8010b36:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8010b38:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8010b3c:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8010b3e:	e7f4      	b.n	8010b2a <udpUpdateEvents+0x22>
      osSetEvent(&socket->event);
 8010b40:	f104 0064 	add.w	r0, r4, #100	@ 0x64
 8010b44:	f7ef fe1a 	bl	800077c <osSetEvent>
      if(socket->userEvent != NULL)
 8010b48:	6f20      	ldr	r0, [r4, #112]	@ 0x70
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d0f2      	beq.n	8010b34 <udpUpdateEvents+0x2c>
         osSetEvent(socket->userEvent);
 8010b4e:	f7ef fe15 	bl	800077c <osSetEvent>
}
 8010b52:	e7ef      	b.n	8010b34 <udpUpdateEvents+0x2c>

08010b54 <udpReceiveDatagram>:
{
 8010b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b58:	4606      	mov	r6, r0
 8010b5a:	460c      	mov	r4, r1
 8010b5c:	4617      	mov	r7, r2
   if((flags & SOCKET_FLAG_DONT_WAIT) == 0)
 8010b5e:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8010b62:	d103      	bne.n	8010b6c <udpReceiveDatagram+0x18>
      if(socket->receiveQueue == NULL)
 8010b64:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d044      	beq.n	8010bf6 <udpReceiveDatagram+0xa2>
   if(socket->receiveQueue != NULL)
 8010b6c:	f8d6 526c 	ldr.w	r5, [r6, #620]	@ 0x26c
 8010b70:	2d00      	cmp	r5, #0
 8010b72:	d05a      	beq.n	8010c2a <udpReceiveDatagram+0xd6>
      message->length = netBufferRead(message->data, queueItem->buffer,
 8010b74:	6863      	ldr	r3, [r4, #4]
 8010b76:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8010b78:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 8010b7a:	6820      	ldr	r0, [r4, #0]
 8010b7c:	f7fb fc33 	bl	800c3e6 <netBufferRead>
 8010b80:	60a0      	str	r0, [r4, #8]
      message->interface = queueItem->interface;
 8010b82:	686b      	ldr	r3, [r5, #4]
 8010b84:	6163      	str	r3, [r4, #20]
      message->srcIpAddr = queueItem->srcIpAddr;
 8010b86:	f104 0c18 	add.w	ip, r4, #24
 8010b8a:	f105 0e08 	add.w	lr, r5, #8
 8010b8e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010b92:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010b96:	f8de 3000 	ldr.w	r3, [lr]
 8010b9a:	f8cc 3000 	str.w	r3, [ip]
      message->srcPort = queueItem->srcPort;
 8010b9e:	8bab      	ldrh	r3, [r5, #28]
 8010ba0:	85a3      	strh	r3, [r4, #44]	@ 0x2c
      message->destIpAddr = queueItem->destIpAddr;
 8010ba2:	f104 0c30 	add.w	ip, r4, #48	@ 0x30
 8010ba6:	f105 0e20 	add.w	lr, r5, #32
 8010baa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010bae:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010bb2:	f8de 3000 	ldr.w	r3, [lr]
 8010bb6:	f8cc 3000 	str.w	r3, [ip]
      message->ttl = queueItem->ancillary.ttl;
 8010bba:	f895 303c 	ldrb.w	r3, [r5, #60]	@ 0x3c
 8010bbe:	7323      	strb	r3, [r4, #12]
      message->tos = queueItem->ancillary.tos;
 8010bc0:	f895 303d 	ldrb.w	r3, [r5, #61]	@ 0x3d
 8010bc4:	7363      	strb	r3, [r4, #13]
      message->srcMacAddr = queueItem->ancillary.srcMacAddr;
 8010bc6:	f8d5 303e 	ldr.w	r3, [r5, #62]	@ 0x3e
 8010bca:	f8c4 3046 	str.w	r3, [r4, #70]	@ 0x46
 8010bce:	f8b5 3042 	ldrh.w	r3, [r5, #66]	@ 0x42
 8010bd2:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
      message->destMacAddr = queueItem->ancillary.destMacAddr;
 8010bd6:	f105 0344 	add.w	r3, r5, #68	@ 0x44
 8010bda:	e893 0003 	ldmia.w	r3, {r0, r1}
 8010bde:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8010be0:	f8a4 1050 	strh.w	r1, [r4, #80]	@ 0x50
      if((flags & SOCKET_FLAG_PEEK) == 0)
 8010be4:	f417 7f00 	tst.w	r7, #512	@ 0x200
 8010be8:	d018      	beq.n	8010c1c <udpReceiveDatagram+0xc8>
      udpUpdateEvents(socket);
 8010bea:	4630      	mov	r0, r6
 8010bec:	f7ff ff8c 	bl	8010b08 <udpUpdateEvents>
      error = NO_ERROR;
 8010bf0:	2000      	movs	r0, #0
}
 8010bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         socket->eventMask = SOCKET_EVENT_RX_READY;
 8010bf6:	2380      	movs	r3, #128	@ 0x80
 8010bf8:	6683      	str	r3, [r0, #104]	@ 0x68
         osResetEvent(&socket->event);
 8010bfa:	f100 0864 	add.w	r8, r0, #100	@ 0x64
 8010bfe:	4640      	mov	r0, r8
 8010c00:	f7ef fdc4 	bl	800078c <osResetEvent>
         osReleaseMutex(&netMutex);
 8010c04:	4d0b      	ldr	r5, [pc, #44]	@ (8010c34 <udpReceiveDatagram+0xe0>)
 8010c06:	4628      	mov	r0, r5
 8010c08:	f7ef fdf0 	bl	80007ec <osReleaseMutex>
         osWaitForEvent(&socket->event, socket->timeout);
 8010c0c:	6c71      	ldr	r1, [r6, #68]	@ 0x44
 8010c0e:	4640      	mov	r0, r8
 8010c10:	f7ef fdc2 	bl	8000798 <osWaitForEvent>
         osAcquireMutex(&netMutex);
 8010c14:	4628      	mov	r0, r5
 8010c16:	f7ef fde2 	bl	80007de <osAcquireMutex>
 8010c1a:	e7a7      	b.n	8010b6c <udpReceiveDatagram+0x18>
         socket->receiveQueue = queueItem->next;
 8010c1c:	682b      	ldr	r3, [r5, #0]
 8010c1e:	f8c6 326c 	str.w	r3, [r6, #620]	@ 0x26c
         netBufferFree(queueItem->buffer);
 8010c22:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 8010c24:	f7fb faa0 	bl	800c168 <netBufferFree>
 8010c28:	e7df      	b.n	8010bea <udpReceiveDatagram+0x96>
      message->length = 0;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	60a3      	str	r3, [r4, #8]
      error = ERROR_TIMEOUT;
 8010c2e:	20dc      	movs	r0, #220	@ 0xdc
 8010c30:	e7df      	b.n	8010bf2 <udpReceiveDatagram+0x9e>
 8010c32:	bf00      	nop
 8010c34:	20000b50 	.word	0x20000b50

08010c38 <udpAttachRxCallback>:
{
   uint_t i;
   UdpRxCallbackEntry *entry;

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010c38:	f04f 0c00 	mov.w	ip, #0
 8010c3c:	f1bc 0f09 	cmp.w	ip, #9
 8010c40:	d81b      	bhi.n	8010c7a <udpAttachRxCallback+0x42>
{
 8010c42:	b510      	push	{r4, lr}
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];

      //Check whether the entry is currently in use
      if(entry->callback == NULL)
 8010c44:	4c10      	ldr	r4, [pc, #64]	@ (8010c88 <udpAttachRxCallback+0x50>)
 8010c46:	eb04 1e0c 	add.w	lr, r4, ip, lsl #4
 8010c4a:	f8de 400c 	ldr.w	r4, [lr, #12]
 8010c4e:	b14c      	cbz	r4, 8010c64 <udpAttachRxCallback+0x2c>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010c50:	f10c 0c01 	add.w	ip, ip, #1
 8010c54:	f1bc 0f09 	cmp.w	ip, #9
 8010c58:	d9f4      	bls.n	8010c44 <udpAttachRxCallback+0xc>
         break;
      }
   }

   //Failed to attach the specified user callback?
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 8010c5a:	f1bc 0f09 	cmp.w	ip, #9
 8010c5e:	d80a      	bhi.n	8010c76 <udpAttachRxCallback+0x3e>
      return ERROR_OUT_OF_RESOURCES;

   //Successful processing
   return NO_ERROR;
 8010c60:	2000      	movs	r0, #0
}
 8010c62:	bd10      	pop	{r4, pc}
         entry->interface = interface;
 8010c64:	f8ce 0004 	str.w	r0, [lr, #4]
         entry->port = port;
 8010c68:	f8ae 1008 	strh.w	r1, [lr, #8]
         entry->callback = callback;
 8010c6c:	f8ce 200c 	str.w	r2, [lr, #12]
         entry->param = param;
 8010c70:	f8ce 3010 	str.w	r3, [lr, #16]
         break;
 8010c74:	e7f1      	b.n	8010c5a <udpAttachRxCallback+0x22>
      return ERROR_OUT_OF_RESOURCES;
 8010c76:	2065      	movs	r0, #101	@ 0x65
 8010c78:	e7f3      	b.n	8010c62 <udpAttachRxCallback+0x2a>
   if(i >= UDP_CALLBACK_TABLE_SIZE)
 8010c7a:	f1bc 0f09 	cmp.w	ip, #9
 8010c7e:	d801      	bhi.n	8010c84 <udpAttachRxCallback+0x4c>
   return NO_ERROR;
 8010c80:	2000      	movs	r0, #0
 8010c82:	4770      	bx	lr
      return ERROR_OUT_OF_RESOURCES;
 8010c84:	2065      	movs	r0, #101	@ 0x65
}
 8010c86:	4770      	bx	lr
 8010c88:	2000376c 	.word	0x2000376c

08010c8c <udpDetachRxCallback>:
 * @param[in] port UDP port number
 * @return Error code
 **/

error_t udpDetachRxCallback(NetInterface *interface, uint16_t port)
{
 8010c8c:	4684      	mov	ip, r0

   //Initialize status code
   error = ERROR_FAILURE;

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010c8e:	2300      	movs	r3, #0
   error = ERROR_FAILURE;
 8010c90:	2001      	movs	r0, #1
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010c92:	e000      	b.n	8010c96 <udpDetachRxCallback+0xa>
 8010c94:	3301      	adds	r3, #1
 8010c96:	2b09      	cmp	r3, #9
 8010c98:	d817      	bhi.n	8010cca <udpDetachRxCallback+0x3e>
   {
      //Point to the current entry
      entry = &udpCallbackTable[i];

      //Check whether the entry is currently in use
      if(entry->callback != NULL)
 8010c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8010ccc <udpDetachRxCallback+0x40>)
 8010c9c:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8010ca0:	68d2      	ldr	r2, [r2, #12]
 8010ca2:	2a00      	cmp	r2, #0
 8010ca4:	d0f6      	beq.n	8010c94 <udpDetachRxCallback+0x8>
      {
         //Does the specified port number match the current entry?
         if(entry->port == port && entry->interface == interface)
 8010ca6:	4a09      	ldr	r2, [pc, #36]	@ (8010ccc <udpDetachRxCallback+0x40>)
 8010ca8:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8010cac:	8912      	ldrh	r2, [r2, #8]
 8010cae:	428a      	cmp	r2, r1
 8010cb0:	d1f0      	bne.n	8010c94 <udpDetachRxCallback+0x8>
 8010cb2:	4a06      	ldr	r2, [pc, #24]	@ (8010ccc <udpDetachRxCallback+0x40>)
 8010cb4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8010cb8:	6852      	ldr	r2, [r2, #4]
 8010cba:	4562      	cmp	r2, ip
 8010cbc:	d1ea      	bne.n	8010c94 <udpDetachRxCallback+0x8>
         {
            //Unregister user callback
            entry->callback = NULL;
 8010cbe:	4a03      	ldr	r2, [pc, #12]	@ (8010ccc <udpDetachRxCallback+0x40>)
 8010cc0:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	60d0      	str	r0, [r2, #12]
            //A matching entry has been found
            error = NO_ERROR;
 8010cc8:	e7e4      	b.n	8010c94 <udpDetachRxCallback+0x8>
      }
   }

   //Return status code
   return error;
}
 8010cca:	4770      	bx	lr
 8010ccc:	2000376c 	.word	0x2000376c

08010cd0 <udpInvokeRxCallback>:
 **/

error_t udpInvokeRxCallback(NetInterface *interface,
   const IpPseudoHeader *pseudoHeader, const UdpHeader *header,
   const NetBuffer *buffer, size_t offset, const NetRxAncillary *ancillary)
{
 8010cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010cd4:	b084      	sub	sp, #16
 8010cd6:	4605      	mov	r5, r0
 8010cd8:	4689      	mov	r9, r1
 8010cda:	4616      	mov	r6, r2
 8010cdc:	4698      	mov	r8, r3

   //Initialize status code
   error = ERROR_PORT_UNREACHABLE;

   //Loop through the table
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010cde:	2400      	movs	r4, #0
   error = ERROR_PORT_UNREACHABLE;
 8010ce0:	f04f 0ad2 	mov.w	sl, #210	@ 0xd2
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010ce4:	e009      	b.n	8010cfa <udpInvokeRxCallback+0x2a>
      {
         //Bound to a particular interface?
         if(entry->interface == NULL || entry->interface == interface)
         {
            //Does the specified port number match the current entry?
            if(entry->port == ntohs(header->destPort))
 8010ce6:	4b18      	ldr	r3, [pc, #96]	@ (8010d48 <udpInvokeRxCallback+0x78>)
 8010ce8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8010cec:	891f      	ldrh	r7, [r3, #8]
 8010cee:	8870      	ldrh	r0, [r6, #2]
 8010cf0:	f7ef fc94 	bl	800061c <swapInt16>
 8010cf4:	4287      	cmp	r7, r0
 8010cf6:	d011      	beq.n	8010d1c <udpInvokeRxCallback+0x4c>
   for(i = 0; i < UDP_CALLBACK_TABLE_SIZE; i++)
 8010cf8:	3401      	adds	r4, #1
 8010cfa:	2c09      	cmp	r4, #9
 8010cfc:	d820      	bhi.n	8010d40 <udpInvokeRxCallback+0x70>
      if(entry->callback != NULL)
 8010cfe:	4b12      	ldr	r3, [pc, #72]	@ (8010d48 <udpInvokeRxCallback+0x78>)
 8010d00:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8010d04:	68db      	ldr	r3, [r3, #12]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d0f6      	beq.n	8010cf8 <udpInvokeRxCallback+0x28>
         if(entry->interface == NULL || entry->interface == interface)
 8010d0a:	4b0f      	ldr	r3, [pc, #60]	@ (8010d48 <udpInvokeRxCallback+0x78>)
 8010d0c:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8010d10:	685b      	ldr	r3, [r3, #4]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d0e7      	beq.n	8010ce6 <udpInvokeRxCallback+0x16>
 8010d16:	42ab      	cmp	r3, r5
 8010d18:	d1ee      	bne.n	8010cf8 <udpInvokeRxCallback+0x28>
 8010d1a:	e7e4      	b.n	8010ce6 <udpInvokeRxCallback+0x16>
            {
               //Invoke user callback function
               entry->callback(interface, pseudoHeader, header, buffer, offset,
 8010d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8010d48 <udpInvokeRxCallback+0x78>)
 8010d1e:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8010d22:	68df      	ldr	r7, [r3, #12]
 8010d24:	691b      	ldr	r3, [r3, #16]
 8010d26:	9302      	str	r3, [sp, #8]
 8010d28:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4643      	mov	r3, r8
 8010d32:	4632      	mov	r2, r6
 8010d34:	4649      	mov	r1, r9
 8010d36:	4628      	mov	r0, r5
 8010d38:	47b8      	blx	r7
                  ancillary, entry->param);

               //A matching entry has been found
               error = NO_ERROR;
 8010d3a:	f04f 0a00 	mov.w	sl, #0
 8010d3e:	e7db      	b.n	8010cf8 <udpInvokeRxCallback+0x28>
      UDP_MIB_INC_COUNTER64(udpHCInDatagrams, 1);
   }

   //Return status code
   return error;
}
 8010d40:	4650      	mov	r0, sl
 8010d42:	b004      	add	sp, #16
 8010d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d48:	2000376c 	.word	0x2000376c

08010d4c <udpProcessDatagram>:
{
 8010d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d50:	b08f      	sub	sp, #60	@ 0x3c
 8010d52:	4681      	mov	r9, r0
 8010d54:	4688      	mov	r8, r1
 8010d56:	4617      	mov	r7, r2
 8010d58:	461e      	mov	r6, r3
   length = netBufferGetLength(buffer) - offset;
 8010d5a:	4610      	mov	r0, r2
 8010d5c:	f7fb f98c 	bl	800c078 <netBufferGetLength>
 8010d60:	1b84      	subs	r4, r0, r6
   if(length < sizeof(UdpHeader))
 8010d62:	2c07      	cmp	r4, #7
 8010d64:	f240 81b2 	bls.w	80110cc <udpProcessDatagram+0x380>
   header = netBufferAt(buffer, offset, sizeof(UdpHeader));
 8010d68:	2208      	movs	r2, #8
 8010d6a:	4631      	mov	r1, r6
 8010d6c:	4638      	mov	r0, r7
 8010d6e:	f7fb fa23 	bl	800c1b8 <netBufferAt>
   if(header == NULL)
 8010d72:	4682      	mov	sl, r0
 8010d74:	2800      	cmp	r0, #0
 8010d76:	f000 81ad 	beq.w	80110d4 <udpProcessDatagram+0x388>
   if(ntohs(header->length) < sizeof(UdpHeader) ||
 8010d7a:	8880      	ldrh	r0, [r0, #4]
 8010d7c:	f7ef fc4e 	bl	800061c <swapInt16>
 8010d80:	2807      	cmp	r0, #7
 8010d82:	d913      	bls.n	8010dac <udpProcessDatagram+0x60>
      ntohs(header->length) > length)
 8010d84:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8010d88:	f7ef fc48 	bl	800061c <swapInt16>
   if(ntohs(header->length) < sizeof(UdpHeader) ||
 8010d8c:	42a0      	cmp	r0, r4
 8010d8e:	d80d      	bhi.n	8010dac <udpProcessDatagram+0x60>
   length = ntohs(header->length);
 8010d90:	f8ba 0004 	ldrh.w	r0, [sl, #4]
 8010d94:	f7ef fc42 	bl	800061c <swapInt16>
 8010d98:	9002      	str	r0, [sp, #8]
   if(header->checksum != 0x0000 ||
 8010d9a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 8010d9e:	b93b      	cbnz	r3, 8010db0 <udpProcessDatagram+0x64>
      pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8010da0:	f8d8 3000 	ldr.w	r3, [r8]
   if(header->checksum != 0x0000 ||
 8010da4:	2b28      	cmp	r3, #40	@ 0x28
 8010da6:	d003      	beq.n	8010db0 <udpProcessDatagram+0x64>
{
 8010da8:	2400      	movs	r4, #0
 8010daa:	e015      	b.n	8010dd8 <udpProcessDatagram+0x8c>
      return ERROR_INVALID_HEADER;
 8010dac:	20d4      	movs	r0, #212	@ 0xd4
 8010dae:	e18e      	b.n	80110ce <udpProcessDatagram+0x382>
      if(ipCalcUpperLayerChecksumEx(pseudoHeader->data,
 8010db0:	4640      	mov	r0, r8
 8010db2:	9b02      	ldr	r3, [sp, #8]
 8010db4:	9300      	str	r3, [sp, #0]
 8010db6:	4633      	mov	r3, r6
 8010db8:	463a      	mov	r2, r7
 8010dba:	f850 1b04 	ldr.w	r1, [r0], #4
 8010dbe:	f7f4 fbe3 	bl	8005588 <ipCalcUpperLayerChecksumEx>
 8010dc2:	2800      	cmp	r0, #0
 8010dc4:	d0f0      	beq.n	8010da8 <udpProcessDatagram+0x5c>
         return ERROR_WRONG_CHECKSUM;
 8010dc6:	20d5      	movs	r0, #213	@ 0xd5
 8010dc8:	e181      	b.n	80110ce <udpProcessDatagram+0x382>
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8010dca:	f8ba 0000 	ldrh.w	r0, [sl]
 8010dce:	f7ef fc25 	bl	800061c <swapInt16>
 8010dd2:	4583      	cmp	fp, r0
 8010dd4:	d029      	beq.n	8010e2a <udpProcessDatagram+0xde>
   for(i = 0; i < SOCKET_MAX_COUNT; i++)
 8010dd6:	3401      	adds	r4, #1
 8010dd8:	2c09      	cmp	r4, #9
 8010dda:	f200 80e7 	bhi.w	8010fac <udpProcessDatagram+0x260>
      socket = &socketTable[i];
 8010dde:	f44f 731c 	mov.w	r3, #624	@ 0x270
 8010de2:	4db8      	ldr	r5, [pc, #736]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010de4:	fb03 5504 	mla	r5, r3, r4, r5
      if(socket->type != SOCKET_TYPE_DGRAM)
 8010de8:	686b      	ldr	r3, [r5, #4]
 8010dea:	2b02      	cmp	r3, #2
 8010dec:	d1f3      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
      if(socket->interface != NULL && socket->interface != interface)
 8010dee:	68eb      	ldr	r3, [r5, #12]
 8010df0:	b10b      	cbz	r3, 8010df6 <udpProcessDatagram+0xaa>
 8010df2:	454b      	cmp	r3, r9
 8010df4:	d1ef      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
      if(socket->localPort == 0 || socket->localPort != ntohs(header->destPort))
 8010df6:	4bb3      	ldr	r3, [pc, #716]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010df8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010dfc:	fb02 3304 	mla	r3, r2, r4, r3
 8010e00:	f8b3 b024 	ldrh.w	fp, [r3, #36]	@ 0x24
 8010e04:	f1bb 0f00 	cmp.w	fp, #0
 8010e08:	d0e5      	beq.n	8010dd6 <udpProcessDatagram+0x8a>
 8010e0a:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8010e0e:	f7ef fc05 	bl	800061c <swapInt16>
 8010e12:	4583      	cmp	fp, r0
 8010e14:	d1df      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
      if(socket->remotePort != 0 && socket->remotePort != ntohs(header->srcPort))
 8010e16:	4bab      	ldr	r3, [pc, #684]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010e18:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010e1c:	fb02 3304 	mla	r3, r2, r4, r3
 8010e20:	f8b3 b03c 	ldrh.w	fp, [r3, #60]	@ 0x3c
 8010e24:	f1bb 0f00 	cmp.w	fp, #0
 8010e28:	d1cf      	bne.n	8010dca <udpProcessDatagram+0x7e>
      if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8010e2a:	f8d8 3000 	ldr.w	r3, [r8]
 8010e2e:	2b0c      	cmp	r3, #12
 8010e30:	d028      	beq.n	8010e84 <udpProcessDatagram+0x138>
      if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 8010e32:	2b28      	cmp	r3, #40	@ 0x28
 8010e34:	d1cf      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
         if(ipv6IsMulticastAddr(&pseudoHeader->ipv6Data.destAddr))
 8010e36:	f898 3014 	ldrb.w	r3, [r8, #20]
 8010e3a:	2bff      	cmp	r3, #255	@ 0xff
 8010e3c:	d078      	beq.n	8010f30 <udpProcessDatagram+0x1e4>
            if(socket->localIpAddr.length != 0)
 8010e3e:	4ba1      	ldr	r3, [pc, #644]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010e40:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010e44:	fb02 3304 	mla	r3, r2, r4, r3
 8010e48:	691b      	ldr	r3, [r3, #16]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 808d 	beq.w	8010f6a <udpProcessDatagram+0x21e>
               if(socket->localIpAddr.length != sizeof(Ipv6Addr))
 8010e50:	2b10      	cmp	r3, #16
 8010e52:	d1c0      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
               if(!ipv6CompAddr(&socket->localIpAddr.ipv6Addr,
 8010e54:	fb02 fb04 	mul.w	fp, r2, r4
 8010e58:	f10b 0b10 	add.w	fp, fp, #16
 8010e5c:	4b99      	ldr	r3, [pc, #612]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010e5e:	449b      	add	fp, r3
 8010e60:	f10b 0b04 	add.w	fp, fp, #4
 8010e64:	2210      	movs	r2, #16
 8010e66:	4998      	ldr	r1, [pc, #608]	@ (80110c8 <udpProcessDatagram+0x37c>)
 8010e68:	4658      	mov	r0, fp
 8010e6a:	f003 fee1 	bl	8014c30 <memcmp>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d07b      	beq.n	8010f6a <udpProcessDatagram+0x21e>
                  !ipv6CompAddr(&socket->localIpAddr.ipv6Addr,
 8010e72:	2210      	movs	r2, #16
 8010e74:	f108 0114 	add.w	r1, r8, #20
 8010e78:	4658      	mov	r0, fp
 8010e7a:	f003 fed9 	bl	8014c30 <memcmp>
                  &IPV6_UNSPECIFIED_ADDR) &&
 8010e7e:	2800      	cmp	r0, #0
 8010e80:	d073      	beq.n	8010f6a <udpProcessDatagram+0x21e>
 8010e82:	e7a8      	b.n	8010dd6 <udpProcessDatagram+0x8a>
         if((socket->options & SOCKET_OPTION_IPV6_ONLY) != 0)
 8010e84:	4b8f      	ldr	r3, [pc, #572]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010e86:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010e8a:	fb02 3304 	mla	r3, r2, r4, r3
 8010e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010e90:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8010e94:	d19f      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
         if(ipv4IsBroadcastAddr(interface, pseudoHeader->ipv4Data.destAddr))
 8010e96:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8010e9a:	4648      	mov	r0, r9
 8010e9c:	f7f5 f979 	bl	8006192 <ipv4IsBroadcastAddr>
 8010ea0:	b1e8      	cbz	r0, 8010ede <udpProcessDatagram+0x192>
            if((socket->options & SOCKET_OPTION_BROADCAST) == 0)
 8010ea2:	4b88      	ldr	r3, [pc, #544]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010ea4:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010ea8:	fb02 3304 	mla	r3, r2, r4, r3
 8010eac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010eae:	f013 0f02 	tst.w	r3, #2
 8010eb2:	d090      	beq.n	8010dd6 <udpProcessDatagram+0x8a>
         if(socket->remoteIpAddr.length != 0)
 8010eb4:	4b83      	ldr	r3, [pc, #524]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010eb6:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010eba:	fb02 3304 	mla	r3, r2, r4, r3
 8010ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d073      	beq.n	8010fac <udpProcessDatagram+0x260>
            if(socket->remoteIpAddr.length != sizeof(Ipv4Addr))
 8010ec4:	2b04      	cmp	r3, #4
 8010ec6:	d186      	bne.n	8010dd6 <udpProcessDatagram+0x8a>
            if(socket->remoteIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 8010ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010eca:	fb02 3304 	mla	r3, r2, r4, r3
 8010ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d06b      	beq.n	8010fac <udpProcessDatagram+0x260>
               socket->remoteIpAddr.ipv4Addr != pseudoHeader->ipv4Data.srcAddr)
 8010ed4:	f8d8 2004 	ldr.w	r2, [r8, #4]
            if(socket->remoteIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 8010ed8:	4293      	cmp	r3, r2
 8010eda:	d067      	beq.n	8010fac <udpProcessDatagram+0x260>
 8010edc:	e77b      	b.n	8010dd6 <udpProcessDatagram+0x8a>
         else if(ipv4IsMulticastAddr(pseudoHeader->ipv4Data.destAddr))
 8010ede:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8010ee2:	f002 03f0 	and.w	r3, r2, #240	@ 0xf0
 8010ee6:	2be0      	cmp	r3, #224	@ 0xe0
 8010ee8:	d013      	beq.n	8010f12 <udpProcessDatagram+0x1c6>
            if(socket->localIpAddr.length != 0)
 8010eea:	4b76      	ldr	r3, [pc, #472]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010eec:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8010ef0:	fb01 3304 	mla	r3, r1, r4, r3
 8010ef4:	691b      	ldr	r3, [r3, #16]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d0dc      	beq.n	8010eb4 <udpProcessDatagram+0x168>
               if(socket->localIpAddr.length != sizeof(Ipv4Addr))
 8010efa:	2b04      	cmp	r3, #4
 8010efc:	f47f af6b 	bne.w	8010dd6 <udpProcessDatagram+0x8a>
               if(socket->localIpAddr.ipv4Addr != IPV4_UNSPECIFIED_ADDR &&
 8010f00:	4b70      	ldr	r3, [pc, #448]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010f02:	fb01 3304 	mla	r3, r1, r4, r3
 8010f06:	695b      	ldr	r3, [r3, #20]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d0d3      	beq.n	8010eb4 <udpProcessDatagram+0x168>
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	d0d1      	beq.n	8010eb4 <udpProcessDatagram+0x168>
 8010f10:	e761      	b.n	8010dd6 <udpProcessDatagram+0x8a>
            srcAddr.length = sizeof(Ipv4Addr);
 8010f12:	2304      	movs	r3, #4
 8010f14:	9304      	str	r3, [sp, #16]
            srcAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8010f16:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010f1a:	9105      	str	r1, [sp, #20]
            destAddr.length = sizeof(Ipv4Addr);
 8010f1c:	9309      	str	r3, [sp, #36]	@ 0x24
            destAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 8010f1e:	920a      	str	r2, [sp, #40]	@ 0x28
            if(!socketMulticastFilter(socket, &destAddr, &srcAddr))
 8010f20:	aa04      	add	r2, sp, #16
 8010f22:	a909      	add	r1, sp, #36	@ 0x24
 8010f24:	4628      	mov	r0, r5
 8010f26:	f7fc fce1 	bl	800d8ec <socketMulticastFilter>
 8010f2a:	2800      	cmp	r0, #0
 8010f2c:	d1c2      	bne.n	8010eb4 <udpProcessDatagram+0x168>
 8010f2e:	e752      	b.n	8010dd6 <udpProcessDatagram+0x8a>
            srcAddr.length = sizeof(Ipv6Addr);
 8010f30:	f04f 0e10 	mov.w	lr, #16
 8010f34:	f8cd e010 	str.w	lr, [sp, #16]
            srcAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 8010f38:	f10d 0c14 	add.w	ip, sp, #20
 8010f3c:	f108 0304 	add.w	r3, r8, #4
 8010f40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010f42:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
            destAddr.length = sizeof(Ipv6Addr);
 8010f46:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
            destAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
 8010f4a:	f108 0314 	add.w	r3, r8, #20
 8010f4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8010f50:	f10d 0c38 	add.w	ip, sp, #56	@ 0x38
 8010f54:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
            if(!socketMulticastFilter(socket, &destAddr, &srcAddr))
 8010f58:	eb0d 020e 	add.w	r2, sp, lr
 8010f5c:	a909      	add	r1, sp, #36	@ 0x24
 8010f5e:	4628      	mov	r0, r5
 8010f60:	f7fc fcc4 	bl	800d8ec <socketMulticastFilter>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	f43f af36 	beq.w	8010dd6 <udpProcessDatagram+0x8a>
         if(socket->remoteIpAddr.length != 0)
 8010f6a:	4b56      	ldr	r3, [pc, #344]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010f6c:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8010f70:	fb02 3304 	mla	r3, r2, r4, r3
 8010f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f76:	b1cb      	cbz	r3, 8010fac <udpProcessDatagram+0x260>
            if(socket->remoteIpAddr.length != sizeof(Ipv6Addr))
 8010f78:	2b10      	cmp	r3, #16
 8010f7a:	f47f af2c 	bne.w	8010dd6 <udpProcessDatagram+0x8a>
            if(!ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr,
 8010f7e:	fb02 fb04 	mul.w	fp, r2, r4
 8010f82:	f10b 0b28 	add.w	fp, fp, #40	@ 0x28
 8010f86:	4b4f      	ldr	r3, [pc, #316]	@ (80110c4 <udpProcessDatagram+0x378>)
 8010f88:	449b      	add	fp, r3
 8010f8a:	f10b 0b04 	add.w	fp, fp, #4
 8010f8e:	2210      	movs	r2, #16
 8010f90:	494d      	ldr	r1, [pc, #308]	@ (80110c8 <udpProcessDatagram+0x37c>)
 8010f92:	4658      	mov	r0, fp
 8010f94:	f003 fe4c 	bl	8014c30 <memcmp>
 8010f98:	b140      	cbz	r0, 8010fac <udpProcessDatagram+0x260>
               !ipv6CompAddr(&socket->remoteIpAddr.ipv6Addr,
 8010f9a:	2210      	movs	r2, #16
 8010f9c:	f108 0104 	add.w	r1, r8, #4
 8010fa0:	4658      	mov	r0, fp
 8010fa2:	f003 fe45 	bl	8014c30 <memcmp>
               &IPV6_UNSPECIFIED_ADDR) &&
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	f47f af15 	bne.w	8010dd6 <udpProcessDatagram+0x8a>
   offset += sizeof(UdpHeader);
 8010fac:	3608      	adds	r6, #8
   length -= sizeof(UdpHeader);
 8010fae:	9b02      	ldr	r3, [sp, #8]
 8010fb0:	3b08      	subs	r3, #8
 8010fb2:	9303      	str	r3, [sp, #12]
   if(i >= SOCKET_MAX_COUNT)
 8010fb4:	2c09      	cmp	r4, #9
 8010fb6:	d804      	bhi.n	8010fc2 <udpProcessDatagram+0x276>
   if(socket->receiveQueue == NULL)
 8010fb8:	f8d5 426c 	ldr.w	r4, [r5, #620]	@ 0x26c
 8010fbc:	b15c      	cbz	r4, 8010fd6 <udpProcessDatagram+0x28a>
      for(i = 1; queueItem->next; i++)
 8010fbe:	2201      	movs	r2, #1
 8010fc0:	e01b      	b.n	8010ffa <udpProcessDatagram+0x2ae>
      error = udpInvokeRxCallback(interface, pseudoHeader, header, buffer,
 8010fc2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8010fc4:	9301      	str	r3, [sp, #4]
 8010fc6:	9600      	str	r6, [sp, #0]
 8010fc8:	463b      	mov	r3, r7
 8010fca:	4652      	mov	r2, sl
 8010fcc:	4641      	mov	r1, r8
 8010fce:	4648      	mov	r0, r9
 8010fd0:	f7ff fe7e 	bl	8010cd0 <udpInvokeRxCallback>
      return error;
 8010fd4:	e07b      	b.n	80110ce <udpProcessDatagram+0x382>
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8010fd6:	9802      	ldr	r0, [sp, #8]
 8010fd8:	3044      	adds	r0, #68	@ 0x44
 8010fda:	f7fb f8ce 	bl	800c17a <netBufferAlloc>
      if(p != NULL)
 8010fde:	4604      	mov	r4, r0
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d049      	beq.n	8011078 <udpProcessDatagram+0x32c>
         queueItem = netBufferAt(p, 0, 0);
 8010fe4:	2200      	movs	r2, #0
 8010fe6:	4611      	mov	r1, r2
 8010fe8:	f7fb f8e6 	bl	800c1b8 <netBufferAt>
 8010fec:	4683      	mov	fp, r0
         queueItem->buffer = p;
 8010fee:	6344      	str	r4, [r0, #52]	@ 0x34
         socket->receiveQueue = queueItem;
 8010ff0:	f8c5 026c 	str.w	r0, [r5, #620]	@ 0x26c
   if(queueItem == NULL)
 8010ff4:	e014      	b.n	8011020 <udpProcessDatagram+0x2d4>
      for(i = 1; queueItem->next; i++)
 8010ff6:	3201      	adds	r2, #1
         queueItem = queueItem->next;
 8010ff8:	461c      	mov	r4, r3
      for(i = 1; queueItem->next; i++)
 8010ffa:	6823      	ldr	r3, [r4, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d1fa      	bne.n	8010ff6 <udpProcessDatagram+0x2aa>
      if(i >= UDP_RX_QUEUE_SIZE)
 8011000:	2a03      	cmp	r2, #3
 8011002:	d869      	bhi.n	80110d8 <udpProcessDatagram+0x38c>
      p = netBufferAlloc(sizeof(SocketQueueItem) + length);
 8011004:	9802      	ldr	r0, [sp, #8]
 8011006:	3044      	adds	r0, #68	@ 0x44
 8011008:	f7fb f8b7 	bl	800c17a <netBufferAlloc>
      if(p != NULL)
 801100c:	b3a0      	cbz	r0, 8011078 <udpProcessDatagram+0x32c>
         queueItem->next = netBufferAt(p, 0, 0);
 801100e:	2200      	movs	r2, #0
 8011010:	4611      	mov	r1, r2
 8011012:	9002      	str	r0, [sp, #8]
 8011014:	f7fb f8d0 	bl	800c1b8 <netBufferAt>
 8011018:	4683      	mov	fp, r0
 801101a:	6020      	str	r0, [r4, #0]
         queueItem->buffer = p;
 801101c:	9b02      	ldr	r3, [sp, #8]
 801101e:	6343      	str	r3, [r0, #52]	@ 0x34
   queueItem->next = NULL;
 8011020:	2300      	movs	r3, #0
 8011022:	f8cb 3000 	str.w	r3, [fp]
   queueItem->interface = interface;
 8011026:	f8cb 9004 	str.w	r9, [fp, #4]
   queueItem->srcPort = ntohs(header->srcPort);
 801102a:	f8ba 0000 	ldrh.w	r0, [sl]
 801102e:	f7ef faf5 	bl	800061c <swapInt16>
 8011032:	f8ab 001c 	strh.w	r0, [fp, #28]
   if(pseudoHeader->length == sizeof(Ipv4PseudoHeader))
 8011036:	f8d8 3000 	ldr.w	r3, [r8]
 801103a:	2b0c      	cmp	r3, #12
 801103c:	d01e      	beq.n	801107c <udpProcessDatagram+0x330>
   if(pseudoHeader->length == sizeof(Ipv6PseudoHeader))
 801103e:	f8d8 3000 	ldr.w	r3, [r8]
 8011042:	2b28      	cmp	r3, #40	@ 0x28
 8011044:	d028      	beq.n	8011098 <udpProcessDatagram+0x34c>
   queueItem->offset = sizeof(SocketQueueItem);
 8011046:	214c      	movs	r1, #76	@ 0x4c
 8011048:	f8cb 1038 	str.w	r1, [fp, #56]	@ 0x38
   netBufferCopy(queueItem->buffer, queueItem->offset, buffer, offset, length);
 801104c:	f8db 0034 	ldr.w	r0, [fp, #52]	@ 0x34
 8011050:	9b03      	ldr	r3, [sp, #12]
 8011052:	9300      	str	r3, [sp, #0]
 8011054:	4633      	mov	r3, r6
 8011056:	463a      	mov	r2, r7
 8011058:	f7fb f915 	bl	800c286 <netBufferCopy>
   queueItem->ancillary = *ancillary;
 801105c:	f10b 0b3c 	add.w	fp, fp, #60	@ 0x3c
 8011060:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8011062:	6818      	ldr	r0, [r3, #0]
 8011064:	6859      	ldr	r1, [r3, #4]
 8011066:	689a      	ldr	r2, [r3, #8]
 8011068:	68db      	ldr	r3, [r3, #12]
 801106a:	e8ab 000f 	stmia.w	fp!, {r0, r1, r2, r3}
   udpUpdateEvents(socket);
 801106e:	4628      	mov	r0, r5
 8011070:	f7ff fd4a 	bl	8010b08 <udpUpdateEvents>
   return NO_ERROR;
 8011074:	2000      	movs	r0, #0
 8011076:	e02a      	b.n	80110ce <udpProcessDatagram+0x382>
      return ERROR_OUT_OF_MEMORY;
 8011078:	2064      	movs	r0, #100	@ 0x64
 801107a:	e028      	b.n	80110ce <udpProcessDatagram+0x382>
      queueItem->srcIpAddr.length = sizeof(Ipv4Addr);
 801107c:	2304      	movs	r3, #4
 801107e:	f8cb 3008 	str.w	r3, [fp, #8]
      queueItem->srcIpAddr.ipv4Addr = pseudoHeader->ipv4Data.srcAddr;
 8011082:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8011086:	f8cb 200c 	str.w	r2, [fp, #12]
      queueItem->destIpAddr.length = sizeof(Ipv4Addr);
 801108a:	f8cb 3020 	str.w	r3, [fp, #32]
      queueItem->destIpAddr.ipv4Addr = pseudoHeader->ipv4Data.destAddr;
 801108e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8011092:	f8cb 3024 	str.w	r3, [fp, #36]	@ 0x24
 8011096:	e7d2      	b.n	801103e <udpProcessDatagram+0x2f2>
      queueItem->srcIpAddr.length = sizeof(Ipv6Addr);
 8011098:	f04f 0c10 	mov.w	ip, #16
 801109c:	f8cb c008 	str.w	ip, [fp, #8]
      queueItem->srcIpAddr.ipv6Addr = pseudoHeader->ipv6Data.srcAddr;
 80110a0:	f10b 040c 	add.w	r4, fp, #12
 80110a4:	f108 0304 	add.w	r3, r8, #4
 80110a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80110aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      queueItem->destIpAddr.length = sizeof(Ipv6Addr);
 80110ae:	f8cb c020 	str.w	ip, [fp, #32]
      queueItem->destIpAddr.ipv6Addr = pseudoHeader->ipv6Data.destAddr;
 80110b2:	f10b 0424 	add.w	r4, fp, #36	@ 0x24
 80110b6:	f108 0814 	add.w	r8, r8, #20
 80110ba:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80110be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80110c2:	e7c0      	b.n	8011046 <udpProcessDatagram+0x2fa>
 80110c4:	20001ef8 	.word	0x20001ef8
 80110c8:	08019f20 	.word	0x08019f20
      return ERROR_INVALID_HEADER;
 80110cc:	20d4      	movs	r0, #212	@ 0xd4
}
 80110ce:	b00f      	add	sp, #60	@ 0x3c
 80110d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERROR_FAILURE;
 80110d4:	2001      	movs	r0, #1
 80110d6:	e7fa      	b.n	80110ce <udpProcessDatagram+0x382>
         return ERROR_RECEIVE_QUEUE_FULL;
 80110d8:	20db      	movs	r0, #219	@ 0xdb
 80110da:	e7f8      	b.n	80110ce <udpProcessDatagram+0x382>

080110dc <debugInit>:
 * @brief Debug UART initialization
 * @param[in] baudrate UART baudrate
 **/

void debugInit(uint32_t baudrate)
{
 80110dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110e0:	b088      	sub	sp, #32
 80110e2:	4605      	mov	r5, r0
   GPIO_InitTypeDef GPIO_InitStructure;

   //Enable GPIOD clock
   __HAL_RCC_GPIOD_CLK_ENABLE();
 80110e4:	4b1f      	ldr	r3, [pc, #124]	@ (8011164 <debugInit+0x88>)
 80110e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110e8:	f042 0208 	orr.w	r2, r2, #8
 80110ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80110ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80110f0:	f002 0208 	and.w	r2, r2, #8
 80110f4:	9201      	str	r2, [sp, #4]
 80110f6:	9a01      	ldr	r2, [sp, #4]
   //Enable USART3 clock
   __HAL_RCC_USART3_CLK_ENABLE();
 80110f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80110fa:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80110fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8011100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011102:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8011106:	9302      	str	r3, [sp, #8]
 8011108:	9b02      	ldr	r3, [sp, #8]

   //Configure USART3_TX (PD8)
   GPIO_InitStructure.Pin = GPIO_PIN_8;
 801110a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801110e:	9303      	str	r3, [sp, #12]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8011110:	f04f 0802 	mov.w	r8, #2
 8011114:	f8cd 8010 	str.w	r8, [sp, #16]
   GPIO_InitStructure.Pull = GPIO_PULLUP;
 8011118:	2401      	movs	r4, #1
 801111a:	9405      	str	r4, [sp, #20]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 801111c:	9406      	str	r4, [sp, #24]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART3;
 801111e:	2707      	movs	r7, #7
 8011120:	9707      	str	r7, [sp, #28]
   HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8011122:	4e11      	ldr	r6, [pc, #68]	@ (8011168 <debugInit+0x8c>)
 8011124:	a903      	add	r1, sp, #12
 8011126:	4630      	mov	r0, r6
 8011128:	f001 fee0 	bl	8012eec <HAL_GPIO_Init>

   //Configure USART3_RX (PD9)
   GPIO_InitStructure.Pin = GPIO_PIN_9;
 801112c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011130:	9303      	str	r3, [sp, #12]
   GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8011132:	f8cd 8010 	str.w	r8, [sp, #16]
   GPIO_InitStructure.Pull = GPIO_PULLUP;
 8011136:	9405      	str	r4, [sp, #20]
   GPIO_InitStructure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8011138:	9406      	str	r4, [sp, #24]
   GPIO_InitStructure.Alternate = GPIO_AF7_USART3;
 801113a:	9707      	str	r7, [sp, #28]
   HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 801113c:	a903      	add	r1, sp, #12
 801113e:	4630      	mov	r0, r6
 8011140:	f001 fed4 	bl	8012eec <HAL_GPIO_Init>

   //Configure USART3
   UART_Handle.Instance = USART3;
 8011144:	4809      	ldr	r0, [pc, #36]	@ (801116c <debugInit+0x90>)
 8011146:	4b0a      	ldr	r3, [pc, #40]	@ (8011170 <debugInit+0x94>)
 8011148:	6003      	str	r3, [r0, #0]
   UART_Handle.Init.BaudRate = baudrate;
 801114a:	6045      	str	r5, [r0, #4]
   UART_Handle.Init.WordLength = UART_WORDLENGTH_8B;
 801114c:	2300      	movs	r3, #0
 801114e:	6083      	str	r3, [r0, #8]
   UART_Handle.Init.StopBits = UART_STOPBITS_1;
 8011150:	60c3      	str	r3, [r0, #12]
   UART_Handle.Init.Parity = UART_PARITY_NONE;
 8011152:	6103      	str	r3, [r0, #16]
   UART_Handle.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8011154:	6183      	str	r3, [r0, #24]
   UART_Handle.Init.Mode = UART_MODE_TX_RX;
 8011156:	230c      	movs	r3, #12
 8011158:	6143      	str	r3, [r0, #20]
   HAL_UART_Init(&UART_Handle);
 801115a:	f002 fe60 	bl	8013e1e <HAL_UART_Init>
}
 801115e:	b008      	add	sp, #32
 8011160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011164:	40023800 	.word	0x40023800
 8011168:	40020c00 	.word	0x40020c00
 801116c:	20003810 	.word	0x20003810
 8011170:	40004800 	.word	0x40004800

08011174 <fputc>:
 * @return On success, the character written is returned. If a writing
 *   error occurs, EOF is returned
 **/

int_t fputc(int_t c, FILE *stream)
{
 8011174:	b510      	push	{r4, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	4604      	mov	r4, r0
   //Standard output or error output?
   if(stream == stdout || stream == stderr)
 801117a:	4b0c      	ldr	r3, [pc, #48]	@ (80111ac <fputc+0x38>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	689a      	ldr	r2, [r3, #8]
 8011180:	428a      	cmp	r2, r1
 8011182:	d002      	beq.n	801118a <fputc+0x16>
 8011184:	68db      	ldr	r3, [r3, #12]
 8011186:	428b      	cmp	r3, r1
 8011188:	d10c      	bne.n	80111a4 <fputc+0x30>
   {
      //Character to be written
      uint8_t ch = c;
 801118a:	f88d 4007 	strb.w	r4, [sp, #7]

      //Transmit data
      HAL_UART_Transmit(&UART_Handle, &ch, 1, HAL_MAX_DELAY);
 801118e:	f04f 33ff 	mov.w	r3, #4294967295
 8011192:	2201      	movs	r2, #1
 8011194:	f10d 0107 	add.w	r1, sp, #7
 8011198:	4805      	ldr	r0, [pc, #20]	@ (80111b0 <fputc+0x3c>)
 801119a:	f002 fd9e 	bl	8013cda <HAL_UART_Transmit>

      //On success, the character written is returned
      return c;
 801119e:	4620      	mov	r0, r4
   else
   {
      //If a writing error occurs, EOF is returned
      return EOF;
   }
}
 80111a0:	b002      	add	sp, #8
 80111a2:	bd10      	pop	{r4, pc}
      return EOF;
 80111a4:	f04f 30ff 	mov.w	r0, #4294967295
 80111a8:	e7fa      	b.n	80111a0 <fputc+0x2c>
 80111aa:	bf00      	nop
 80111ac:	20000440 	.word	0x20000440
 80111b0:	20003810 	.word	0x20003810

080111b4 <ledTask>:
 * @brief LED task
 * @param[in] param Unused parameter
 **/

void ledTask(void *param)
{
 80111b4:	b508      	push	{r3, lr}
   //Endless loop
   while(1)
   {
      BSP_LED_On(LED1);
 80111b6:	2000      	movs	r0, #0
 80111b8:	f001 fd14 	bl	8012be4 <BSP_LED_On>
      osDelayTask(100);
 80111bc:	2064      	movs	r0, #100	@ 0x64
 80111be:	f7ef fab3 	bl	8000728 <osDelayTask>
      BSP_LED_Off(LED1);
 80111c2:	2000      	movs	r0, #0
 80111c4:	f001 fd1e 	bl	8012c04 <BSP_LED_Off>
      osDelayTask(900);
 80111c8:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80111cc:	f7ef faac 	bl	8000728 <osDelayTask>
   while(1)
 80111d0:	e7f1      	b.n	80111b6 <ledTask+0x2>
	...

080111d4 <SystemClock_Config>:
{
 80111d4:	b530      	push	{r4, r5, lr}
 80111d6:	b095      	sub	sp, #84	@ 0x54
   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80111d8:	2234      	movs	r2, #52	@ 0x34
 80111da:	2100      	movs	r1, #0
 80111dc:	a807      	add	r0, sp, #28
 80111de:	f003 fd51 	bl	8014c84 <memset>
   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80111e2:	2400      	movs	r4, #0
 80111e4:	9402      	str	r4, [sp, #8]
 80111e6:	9403      	str	r4, [sp, #12]
 80111e8:	9404      	str	r4, [sp, #16]
 80111ea:	9405      	str	r4, [sp, #20]
 80111ec:	9406      	str	r4, [sp, #24]
   __HAL_RCC_PWR_CLK_ENABLE();
 80111ee:	4b18      	ldr	r3, [pc, #96]	@ (8011250 <SystemClock_Config+0x7c>)
 80111f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80111f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80111f6:	641a      	str	r2, [r3, #64]	@ 0x40
 80111f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80111fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80111fe:	9301      	str	r3, [sp, #4]
 8011200:	9b01      	ldr	r3, [sp, #4]
   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8011202:	2301      	movs	r3, #1
 8011204:	9307      	str	r3, [sp, #28]
   RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8011206:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 801120a:	9308      	str	r3, [sp, #32]
   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801120c:	2502      	movs	r5, #2
 801120e:	950d      	str	r5, [sp, #52]	@ 0x34
   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8011210:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8011214:	930e      	str	r3, [sp, #56]	@ 0x38
   RCC_OscInitStruct.PLL.PLLM = 8;
 8011216:	2308      	movs	r3, #8
 8011218:	930f      	str	r3, [sp, #60]	@ 0x3c
   RCC_OscInitStruct.PLL.PLLN = 432;
 801121a:	f44f 73d8 	mov.w	r3, #432	@ 0x1b0
 801121e:	9310      	str	r3, [sp, #64]	@ 0x40
   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8011220:	9511      	str	r5, [sp, #68]	@ 0x44
   RCC_OscInitStruct.PLL.PLLQ = 9;
 8011222:	2309      	movs	r3, #9
 8011224:	9312      	str	r3, [sp, #72]	@ 0x48
   HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8011226:	a807      	add	r0, sp, #28
 8011228:	f001 ff9e 	bl	8013168 <HAL_RCC_OscConfig>
   HAL_PWREx_EnableOverDrive();
 801122c:	f001 ff5e 	bl	80130ec <HAL_PWREx_EnableOverDrive>
   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK |
 8011230:	230f      	movs	r3, #15
 8011232:	9302      	str	r3, [sp, #8]
   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8011234:	9503      	str	r5, [sp, #12]
   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8011236:	9404      	str	r4, [sp, #16]
   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8011238:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 801123c:	9305      	str	r3, [sp, #20]
   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 801123e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8011242:	9306      	str	r3, [sp, #24]
   HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7);
 8011244:	2107      	movs	r1, #7
 8011246:	a802      	add	r0, sp, #8
 8011248:	f002 fa1e 	bl	8013688 <HAL_RCC_ClockConfig>
}
 801124c:	b015      	add	sp, #84	@ 0x54
 801124e:	bd30      	pop	{r4, r5, pc}
 8011250:	40023800 	.word	0x40023800

08011254 <MPU_Config>:
{
 8011254:	b500      	push	{lr}
 8011256:	b085      	sub	sp, #20
   HAL_MPU_Disable();
 8011258:	f001 fdfa 	bl	8012e50 <HAL_MPU_Disable>
   MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801125c:	2201      	movs	r2, #1
 801125e:	f88d 2000 	strb.w	r2, [sp]
   MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8011262:	2300      	movs	r3, #0
 8011264:	f88d 3001 	strb.w	r3, [sp, #1]
   MPU_InitStruct.BaseAddress = 0x2007C000;
 8011268:	490e      	ldr	r1, [pc, #56]	@ (80112a4 <MPU_Config+0x50>)
 801126a:	9101      	str	r1, [sp, #4]
   MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 801126c:	210d      	movs	r1, #13
 801126e:	f88d 1008 	strb.w	r1, [sp, #8]
   MPU_InitStruct.SubRegionDisable = 0;
 8011272:	f88d 3009 	strb.w	r3, [sp, #9]
   MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8011276:	f88d 200a 	strb.w	r2, [sp, #10]
   MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 801127a:	2103      	movs	r1, #3
 801127c:	f88d 100b 	strb.w	r1, [sp, #11]
   MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8011280:	f88d 200c 	strb.w	r2, [sp, #12]
   MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8011284:	f88d 200d 	strb.w	r2, [sp, #13]
   MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8011288:	f88d 300e 	strb.w	r3, [sp, #14]
   MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 801128c:	f88d 300f 	strb.w	r3, [sp, #15]
   HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8011290:	4668      	mov	r0, sp
 8011292:	f001 fdfb 	bl	8012e8c <HAL_MPU_ConfigRegion>
   HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8011296:	2004      	movs	r0, #4
 8011298:	f001 fde8 	bl	8012e6c <HAL_MPU_Enable>
}
 801129c:	b005      	add	sp, #20
 801129e:	f85d fb04 	ldr.w	pc, [sp], #4
 80112a2:	bf00      	nop
 80112a4:	2007c000 	.word	0x2007c000

080112a8 <ftpClientTest>:
{
 80112a8:	b510      	push	{r4, lr}
 80112aa:	b0a8      	sub	sp, #160	@ 0xa0
   ftpClientInit(&ftpClientContext);
 80112ac:	4853      	ldr	r0, [pc, #332]	@ (80113fc <ftpClientTest+0x154>)
 80112ae:	f7f2 f839 	bl	8003324 <ftpClientInit>
      TRACE_INFO("\r\n\r\nResolving server name...\r\n");
 80112b2:	f7ef fa3d 	bl	8000730 <osSuspendAllTasks>
 80112b6:	4b52      	ldr	r3, [pc, #328]	@ (8011400 <ftpClientTest+0x158>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	68db      	ldr	r3, [r3, #12]
 80112bc:	221e      	movs	r2, #30
 80112be:	2101      	movs	r1, #1
 80112c0:	4850      	ldr	r0, [pc, #320]	@ (8011404 <ftpClientTest+0x15c>)
 80112c2:	f003 fbeb 	bl	8014a9c <fwrite>
 80112c6:	f7ef fa3c 	bl	8000742 <osResumeAllTasks>
      error = getHostByName(NULL, APP_FTP_SERVER_NAME, &ipAddr, 0);
 80112ca:	2300      	movs	r3, #0
 80112cc:	aa22      	add	r2, sp, #136	@ 0x88
 80112ce:	494e      	ldr	r1, [pc, #312]	@ (8011408 <ftpClientTest+0x160>)
 80112d0:	4618      	mov	r0, r3
 80112d2:	f7fc fa59 	bl	800d788 <getHostByName>
      if(error)
 80112d6:	b190      	cbz	r0, 80112fe <ftpClientTest+0x56>
 80112d8:	4604      	mov	r4, r0
         TRACE_INFO("Failed to resolve server name!\r\n");
 80112da:	f7ef fa29 	bl	8000730 <osSuspendAllTasks>
 80112de:	4b48      	ldr	r3, [pc, #288]	@ (8011400 <ftpClientTest+0x158>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	2220      	movs	r2, #32
 80112e6:	2101      	movs	r1, #1
 80112e8:	4848      	ldr	r0, [pc, #288]	@ (801140c <ftpClientTest+0x164>)
 80112ea:	f003 fbd7 	bl	8014a9c <fwrite>
 80112ee:	f7ef fa28 	bl	8000742 <osResumeAllTasks>
   ftpClientDeinit(&ftpClientContext);
 80112f2:	4842      	ldr	r0, [pc, #264]	@ (80113fc <ftpClientTest+0x154>)
 80112f4:	f7f2 fae5 	bl	80038c2 <ftpClientDeinit>
}
 80112f8:	4620      	mov	r0, r4
 80112fa:	b028      	add	sp, #160	@ 0xa0
 80112fc:	bd10      	pop	{r4, pc}
      error = ftpClientSetTimeout(&ftpClientContext, 20000);
 80112fe:	f644 6120 	movw	r1, #20000	@ 0x4e20
 8011302:	483e      	ldr	r0, [pc, #248]	@ (80113fc <ftpClientTest+0x154>)
 8011304:	f7f2 f81d 	bl	8003342 <ftpClientSetTimeout>
      if(error)
 8011308:	4604      	mov	r4, r0
 801130a:	2800      	cmp	r0, #0
 801130c:	d1f1      	bne.n	80112f2 <ftpClientTest+0x4a>
      TRACE_INFO("Connecting to FTP server %s...\r\n",
 801130e:	f7ef fa0f 	bl	8000730 <osSuspendAllTasks>
 8011312:	4b3b      	ldr	r3, [pc, #236]	@ (8011400 <ftpClientTest+0x158>)
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	68dc      	ldr	r4, [r3, #12]
 8011318:	2100      	movs	r1, #0
 801131a:	a822      	add	r0, sp, #136	@ 0x88
 801131c:	f7f4 f972 	bl	8005604 <ipAddrToString>
 8011320:	4602      	mov	r2, r0
 8011322:	493b      	ldr	r1, [pc, #236]	@ (8011410 <ftpClientTest+0x168>)
 8011324:	4620      	mov	r0, r4
 8011326:	f003 f99f 	bl	8014668 <fprintf>
 801132a:	f7ef fa0a 	bl	8000742 <osResumeAllTasks>
      error = ftpClientConnect(&ftpClientContext, &ipAddr, APP_FTP_SERVER_PORT,
 801132e:	2304      	movs	r3, #4
 8011330:	2215      	movs	r2, #21
 8011332:	a922      	add	r1, sp, #136	@ 0x88
 8011334:	4831      	ldr	r0, [pc, #196]	@ (80113fc <ftpClientTest+0x154>)
 8011336:	f7f2 f80b 	bl	8003350 <ftpClientConnect>
      if(error)
 801133a:	4604      	mov	r4, r0
 801133c:	b160      	cbz	r0, 8011358 <ftpClientTest+0xb0>
         TRACE_INFO("Failed to connect to FTP server!\r\n");
 801133e:	f7ef f9f7 	bl	8000730 <osSuspendAllTasks>
 8011342:	4b2f      	ldr	r3, [pc, #188]	@ (8011400 <ftpClientTest+0x158>)
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	68db      	ldr	r3, [r3, #12]
 8011348:	2222      	movs	r2, #34	@ 0x22
 801134a:	2101      	movs	r1, #1
 801134c:	4831      	ldr	r0, [pc, #196]	@ (8011414 <ftpClientTest+0x16c>)
 801134e:	f003 fba5 	bl	8014a9c <fwrite>
 8011352:	f7ef f9f6 	bl	8000742 <osResumeAllTasks>
         break;
 8011356:	e7cc      	b.n	80112f2 <ftpClientTest+0x4a>
      error = ftpClientLogin(&ftpClientContext, APP_FTP_LOGIN, APP_FTP_PASSWORD);
 8011358:	4a2f      	ldr	r2, [pc, #188]	@ (8011418 <ftpClientTest+0x170>)
 801135a:	4930      	ldr	r1, [pc, #192]	@ (801141c <ftpClientTest+0x174>)
 801135c:	4827      	ldr	r0, [pc, #156]	@ (80113fc <ftpClientTest+0x154>)
 801135e:	f7f2 f975 	bl	800364c <ftpClientLogin>
      if(error)
 8011362:	4604      	mov	r4, r0
 8011364:	2800      	cmp	r0, #0
 8011366:	d1c4      	bne.n	80112f2 <ftpClientTest+0x4a>
      error = ftpClientOpenFile(&ftpClientContext, APP_FTP_FILENAME,
 8011368:	2200      	movs	r2, #0
 801136a:	492d      	ldr	r1, [pc, #180]	@ (8011420 <ftpClientTest+0x178>)
 801136c:	4823      	ldr	r0, [pc, #140]	@ (80113fc <ftpClientTest+0x154>)
 801136e:	f7f2 f975 	bl	800365c <ftpClientOpenFile>
      if(error)
 8011372:	4604      	mov	r4, r0
 8011374:	2800      	cmp	r0, #0
 8011376:	d1bc      	bne.n	80112f2 <ftpClientTest+0x4a>
      while(!error)
 8011378:	b9d4      	cbnz	r4, 80113b0 <ftpClientTest+0x108>
         error = ftpClientReadFile(&ftpClientContext, buffer, sizeof(buffer) - 1, &n, 0);
 801137a:	2300      	movs	r3, #0
 801137c:	9300      	str	r3, [sp, #0]
 801137e:	ab27      	add	r3, sp, #156	@ 0x9c
 8011380:	227f      	movs	r2, #127	@ 0x7f
 8011382:	a902      	add	r1, sp, #8
 8011384:	481d      	ldr	r0, [pc, #116]	@ (80113fc <ftpClientTest+0x154>)
 8011386:	f7f2 fa0f 	bl	80037a8 <ftpClientReadFile>
         if(!error)
 801138a:	4604      	mov	r4, r0
 801138c:	b980      	cbnz	r0, 80113b0 <ftpClientTest+0x108>
            buffer[n] = '\0';
 801138e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8011390:	33a0      	adds	r3, #160	@ 0xa0
 8011392:	446b      	add	r3, sp
 8011394:	2200      	movs	r2, #0
 8011396:	f803 2c98 	strb.w	r2, [r3, #-152]
            TRACE_INFO("%s", buffer);
 801139a:	f7ef f9c9 	bl	8000730 <osSuspendAllTasks>
 801139e:	4b18      	ldr	r3, [pc, #96]	@ (8011400 <ftpClientTest+0x158>)
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	68d9      	ldr	r1, [r3, #12]
 80113a4:	a802      	add	r0, sp, #8
 80113a6:	f003 f9b1 	bl	801470c <fputs>
 80113aa:	f7ef f9ca 	bl	8000742 <osResumeAllTasks>
 80113ae:	e7e3      	b.n	8011378 <ftpClientTest+0xd0>
      TRACE_INFO("\r\n");
 80113b0:	f7ef f9be 	bl	8000730 <osSuspendAllTasks>
 80113b4:	4b12      	ldr	r3, [pc, #72]	@ (8011400 <ftpClientTest+0x158>)
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	68db      	ldr	r3, [r3, #12]
 80113ba:	2202      	movs	r2, #2
 80113bc:	2101      	movs	r1, #1
 80113be:	4819      	ldr	r0, [pc, #100]	@ (8011424 <ftpClientTest+0x17c>)
 80113c0:	f003 fb6c 	bl	8014a9c <fwrite>
 80113c4:	f7ef f9bd 	bl	8000742 <osResumeAllTasks>
      if(error != ERROR_END_OF_STREAM)
 80113c8:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80113cc:	d191      	bne.n	80112f2 <ftpClientTest+0x4a>
      error = ftpClientCloseFile(&ftpClientContext);
 80113ce:	480b      	ldr	r0, [pc, #44]	@ (80113fc <ftpClientTest+0x154>)
 80113d0:	f7f2 fa16 	bl	8003800 <ftpClientCloseFile>
      if(error)
 80113d4:	4604      	mov	r4, r0
 80113d6:	2800      	cmp	r0, #0
 80113d8:	d18b      	bne.n	80112f2 <ftpClientTest+0x4a>
      ftpClientDisconnect(&ftpClientContext);
 80113da:	4808      	ldr	r0, [pc, #32]	@ (80113fc <ftpClientTest+0x154>)
 80113dc:	f7f2 fa17 	bl	800380e <ftpClientDisconnect>
      TRACE_INFO("Connection closed\r\n");
 80113e0:	f7ef f9a6 	bl	8000730 <osSuspendAllTasks>
 80113e4:	4b06      	ldr	r3, [pc, #24]	@ (8011400 <ftpClientTest+0x158>)
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	2213      	movs	r2, #19
 80113ec:	2101      	movs	r1, #1
 80113ee:	480e      	ldr	r0, [pc, #56]	@ (8011428 <ftpClientTest+0x180>)
 80113f0:	f003 fb54 	bl	8014a9c <fwrite>
 80113f4:	f7ef f9a5 	bl	8000742 <osResumeAllTasks>
 80113f8:	e77b      	b.n	80112f2 <ftpClientTest+0x4a>
 80113fa:	bf00      	nop
 80113fc:	20003894 	.word	0x20003894
 8011400:	20000440 	.word	0x20000440
 8011404:	0801a6c0 	.word	0x0801a6c0
 8011408:	0801a6e0 	.word	0x0801a6e0
 801140c:	0801a6f0 	.word	0x0801a6f0
 8011410:	0801a714 	.word	0x0801a714
 8011414:	0801a738 	.word	0x0801a738
 8011418:	0801a75c 	.word	0x0801a75c
 801141c:	0801a768 	.word	0x0801a768
 8011420:	0801a770 	.word	0x0801a770
 8011424:	0801a310 	.word	0x0801a310
 8011428:	0801a77c 	.word	0x0801a77c

0801142c <userTask>:
{
 801142c:	b508      	push	{r3, lr}
 801142e:	e002      	b.n	8011436 <userTask+0xa>
      osDelayTask(100);
 8011430:	2064      	movs	r0, #100	@ 0x64
 8011432:	f7ef f979 	bl	8000728 <osDelayTask>
      if(BSP_PB_GetState(BUTTON_KEY))
 8011436:	2000      	movs	r0, #0
 8011438:	f001 fc36 	bl	8012ca8 <BSP_PB_GetState>
 801143c:	2800      	cmp	r0, #0
 801143e:	d0f7      	beq.n	8011430 <userTask+0x4>
         ftpClientTest();
 8011440:	f7ff ff32 	bl	80112a8 <ftpClientTest>
         while(BSP_PB_GetState(BUTTON_KEY));
 8011444:	2000      	movs	r0, #0
 8011446:	f001 fc2f 	bl	8012ca8 <BSP_PB_GetState>
 801144a:	2800      	cmp	r0, #0
 801144c:	d1fa      	bne.n	8011444 <userTask+0x18>
 801144e:	e7ef      	b.n	8011430 <userTask+0x4>

08011450 <main>:
 * @brief Main entry point
 * @return Unused value
 **/

int_t main(void)
{
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	b084      	sub	sp, #16
#if (APP_USE_SLAAC == DISABLED)
   Ipv6Addr ipv6Addr;
#endif

   //MPU configuration
   MPU_Config();
 8011454:	f7ff fefe 	bl	8011254 <MPU_Config>
   //HAL library initialization
   HAL_Init();
 8011458:	f001 fc58 	bl	8012d0c <HAL_Init>
   //Configure the system clock
   SystemClock_Config();
 801145c:	f7ff feba 	bl	80111d4 <SystemClock_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8011460:	4bc1      	ldr	r3, [pc, #772]	@ (8011768 <main+0x318>)
 8011462:	695b      	ldr	r3, [r3, #20]
 8011464:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8011468:	d113      	bne.n	8011492 <main+0x42>
 801146a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801146e:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8011472:	4bbd      	ldr	r3, [pc, #756]	@ (8011768 <main+0x318>)
 8011474:	2200      	movs	r2, #0
 8011476:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 801147a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801147e:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8011482:	695a      	ldr	r2, [r3, #20]
 8011484:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8011488:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 801148a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 801148e:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8011492:	4bb5      	ldr	r3, [pc, #724]	@ (8011768 <main+0x318>)
 8011494:	695b      	ldr	r3, [r3, #20]
 8011496:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801149a:	d127      	bne.n	80114ec <main+0x9c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 801149c:	4bb2      	ldr	r3, [pc, #712]	@ (8011768 <main+0x318>)
 801149e:	2200      	movs	r2, #0
 80114a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80114a4:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80114a8:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80114ac:	f3c4 304e 	ubfx	r0, r4, #13, #15
 80114b0:	e000      	b.n	80114b4 <main+0x64>
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
    } while(sets-- != 0U);
 80114b2:	4618      	mov	r0, r3
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80114b4:	f3c4 02c9 	ubfx	r2, r4, #3, #10
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80114b8:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 80114bc:	ea03 1340 	and.w	r3, r3, r0, lsl #5
 80114c0:	ea43 7382 	orr.w	r3, r3, r2, lsl #30
 80114c4:	49a8      	ldr	r1, [pc, #672]	@ (8011768 <main+0x318>)
 80114c6:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80114ca:	4613      	mov	r3, r2
 80114cc:	3a01      	subs	r2, #1
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d1f2      	bne.n	80114b8 <main+0x68>
    } while(sets-- != 0U);
 80114d2:	1e43      	subs	r3, r0, #1
 80114d4:	2800      	cmp	r0, #0
 80114d6:	d1ec      	bne.n	80114b2 <main+0x62>
 80114d8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80114dc:	694b      	ldr	r3, [r1, #20]
 80114de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80114e2:	614b      	str	r3, [r1, #20]
 80114e4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80114e8:	f3bf 8f6f 	isb	sy
   //Enable I-cache and D-cache
   SCB_EnableICache();
   SCB_EnableDCache();

   //Initialize kernel
   osInitKernel();
 80114ec:	f7ef f902 	bl	80006f4 <osInitKernel>
   //Configure debug UART
   debugInit(115200);
 80114f0:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 80114f4:	f7ff fdf2 	bl	80110dc <debugInit>

   //Start-up message
   TRACE_INFO("\r\n");
 80114f8:	f7ef f91a 	bl	8000730 <osSuspendAllTasks>
 80114fc:	4c9b      	ldr	r4, [pc, #620]	@ (801176c <main+0x31c>)
 80114fe:	6823      	ldr	r3, [r4, #0]
 8011500:	4d9b      	ldr	r5, [pc, #620]	@ (8011770 <main+0x320>)
 8011502:	68db      	ldr	r3, [r3, #12]
 8011504:	2202      	movs	r2, #2
 8011506:	2101      	movs	r1, #1
 8011508:	4628      	mov	r0, r5
 801150a:	f003 fac7 	bl	8014a9c <fwrite>
 801150e:	f7ef f918 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("**********************************\r\n");
 8011512:	f7ef f90d 	bl	8000730 <osSuspendAllTasks>
 8011516:	6823      	ldr	r3, [r4, #0]
 8011518:	4e96      	ldr	r6, [pc, #600]	@ (8011774 <main+0x324>)
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	2224      	movs	r2, #36	@ 0x24
 801151e:	2101      	movs	r1, #1
 8011520:	4630      	mov	r0, r6
 8011522:	f003 fabb 	bl	8014a9c <fwrite>
 8011526:	f7ef f90c 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("*** CycloneTCP FTP Client Demo ***\r\n");
 801152a:	f7ef f901 	bl	8000730 <osSuspendAllTasks>
 801152e:	6823      	ldr	r3, [r4, #0]
 8011530:	68db      	ldr	r3, [r3, #12]
 8011532:	2224      	movs	r2, #36	@ 0x24
 8011534:	2101      	movs	r1, #1
 8011536:	4890      	ldr	r0, [pc, #576]	@ (8011778 <main+0x328>)
 8011538:	f003 fab0 	bl	8014a9c <fwrite>
 801153c:	f7ef f901 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("**********************************\r\n");
 8011540:	f7ef f8f6 	bl	8000730 <osSuspendAllTasks>
 8011544:	6823      	ldr	r3, [r4, #0]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	2224      	movs	r2, #36	@ 0x24
 801154a:	2101      	movs	r1, #1
 801154c:	4630      	mov	r0, r6
 801154e:	f003 faa5 	bl	8014a9c <fwrite>
 8011552:	f7ef f8f6 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("Copyright: 2010-2025 Oryx Embedded SARL\r\n");
 8011556:	f7ef f8eb 	bl	8000730 <osSuspendAllTasks>
 801155a:	6823      	ldr	r3, [r4, #0]
 801155c:	68db      	ldr	r3, [r3, #12]
 801155e:	2229      	movs	r2, #41	@ 0x29
 8011560:	2101      	movs	r1, #1
 8011562:	4886      	ldr	r0, [pc, #536]	@ (801177c <main+0x32c>)
 8011564:	f003 fa9a 	bl	8014a9c <fwrite>
 8011568:	f7ef f8eb 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("Compiled: %s %s\r\n", __DATE__, __TIME__);
 801156c:	f7ef f8e0 	bl	8000730 <osSuspendAllTasks>
 8011570:	6820      	ldr	r0, [r4, #0]
 8011572:	4b83      	ldr	r3, [pc, #524]	@ (8011780 <main+0x330>)
 8011574:	4a83      	ldr	r2, [pc, #524]	@ (8011784 <main+0x334>)
 8011576:	4984      	ldr	r1, [pc, #528]	@ (8011788 <main+0x338>)
 8011578:	68c0      	ldr	r0, [r0, #12]
 801157a:	f003 f875 	bl	8014668 <fprintf>
 801157e:	f7ef f8e0 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("Target: STM32F767\r\n");
 8011582:	f7ef f8d5 	bl	8000730 <osSuspendAllTasks>
 8011586:	6823      	ldr	r3, [r4, #0]
 8011588:	68db      	ldr	r3, [r3, #12]
 801158a:	2213      	movs	r2, #19
 801158c:	2101      	movs	r1, #1
 801158e:	487f      	ldr	r0, [pc, #508]	@ (801178c <main+0x33c>)
 8011590:	f003 fa84 	bl	8014a9c <fwrite>
 8011594:	f7ef f8d5 	bl	8000742 <osResumeAllTasks>
   TRACE_INFO("\r\n");
 8011598:	f7ef f8ca 	bl	8000730 <osSuspendAllTasks>
 801159c:	6823      	ldr	r3, [r4, #0]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	2202      	movs	r2, #2
 80115a2:	2101      	movs	r1, #1
 80115a4:	4628      	mov	r0, r5
 80115a6:	f003 fa79 	bl	8014a9c <fwrite>
 80115aa:	f7ef f8ca 	bl	8000742 <osResumeAllTasks>

   //LED configuration
   BSP_LED_Init(LED1);
 80115ae:	2000      	movs	r0, #0
 80115b0:	f001 fae0 	bl	8012b74 <BSP_LED_Init>
   BSP_LED_Init(LED2);
 80115b4:	2001      	movs	r0, #1
 80115b6:	f001 fadd 	bl	8012b74 <BSP_LED_Init>
   BSP_LED_Init(LED3);
 80115ba:	2002      	movs	r0, #2
 80115bc:	f001 fada 	bl	8012b74 <BSP_LED_Init>

   //Clear LEDs
   BSP_LED_Off(LED1);
 80115c0:	2000      	movs	r0, #0
 80115c2:	f001 fb1f 	bl	8012c04 <BSP_LED_Off>
   BSP_LED_Off(LED2);
 80115c6:	2001      	movs	r0, #1
 80115c8:	f001 fb1c 	bl	8012c04 <BSP_LED_Off>
   BSP_LED_Off(LED3);
 80115cc:	2002      	movs	r0, #2
 80115ce:	f001 fb19 	bl	8012c04 <BSP_LED_Off>

   //Initialize user button
   BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_GPIO);
 80115d2:	2100      	movs	r1, #0
 80115d4:	4608      	mov	r0, r1
 80115d6:	f001 fb25 	bl	8012c24 <BSP_PB_Init>

   //TCP/IP stack initialization
   error = netInit();
 80115da:	f7fa fc29 	bl	800be30 <netInit>
   //Any error to report?
   if(error)
 80115de:	2800      	cmp	r0, #0
 80115e0:	d174      	bne.n	80116cc <main+0x27c>

   //Configure the first Ethernet interface
   interface = &netInterface[0];

   //Set interface name
   netSetInterfaceName(interface, APP_IF_NAME);
 80115e2:	4c6b      	ldr	r4, [pc, #428]	@ (8011790 <main+0x340>)
 80115e4:	496b      	ldr	r1, [pc, #428]	@ (8011794 <main+0x344>)
 80115e6:	4620      	mov	r0, r4
 80115e8:	f7fa fc5a 	bl	800bea0 <netSetInterfaceName>
   //Set host name
   netSetHostname(interface, APP_HOST_NAME);
 80115ec:	496a      	ldr	r1, [pc, #424]	@ (8011798 <main+0x348>)
 80115ee:	4620      	mov	r0, r4
 80115f0:	f7fa fc76 	bl	800bee0 <netSetHostname>
   //Set host MAC address
   macStringToAddr(APP_MAC_ADDR, &macAddr);
 80115f4:	4669      	mov	r1, sp
 80115f6:	4869      	ldr	r0, [pc, #420]	@ (801179c <main+0x34c>)
 80115f8:	f7f1 fd52 	bl	80030a0 <macStringToAddr>
   netSetMacAddr(interface, &macAddr);
 80115fc:	4669      	mov	r1, sp
 80115fe:	4620      	mov	r0, r4
 8011600:	f7fa fc2e 	bl	800be60 <netSetMacAddr>
   //Select the relevant network adapter
   netSetDriver(interface, &stm32f7xxEthDriver);
 8011604:	4966      	ldr	r1, [pc, #408]	@ (80117a0 <main+0x350>)
 8011606:	4620      	mov	r0, r4
 8011608:	f7fa fc8a 	bl	800bf20 <netSetDriver>
   netSetPhyDriver(interface, &lan8742PhyDriver);
 801160c:	4965      	ldr	r1, [pc, #404]	@ (80117a4 <main+0x354>)
 801160e:	4620      	mov	r0, r4
 8011610:	f7fa fc9c 	bl	800bf4c <netSetPhyDriver>

   //Initialize network interface
   error = netConfigInterface(interface);
 8011614:	4620      	mov	r0, r4
 8011616:	f7fa fcaf 	bl	800bf78 <netConfigInterface>
   //Any error to report?
   if(error)
 801161a:	2800      	cmp	r0, #0
 801161c:	d162      	bne.n	80116e4 <main+0x294>
   }

#if (IPV4_SUPPORT == ENABLED)
#if (APP_USE_DHCP_CLIENT == ENABLED)
   //Get default settings
   dhcpClientGetDefaultSettings(&dhcpClientSettings);
 801161e:	4c62      	ldr	r4, [pc, #392]	@ (80117a8 <main+0x358>)
 8011620:	f504 7511 	add.w	r5, r4, #580	@ 0x244
 8011624:	4628      	mov	r0, r5
 8011626:	f7ef fdaf 	bl	8001188 <dhcpClientGetDefaultSettings>
   //Set the network interface to be configured by DHCP
   dhcpClientSettings.interface = interface;
 801162a:	4b59      	ldr	r3, [pc, #356]	@ (8011790 <main+0x340>)
 801162c:	f8c4 3244 	str.w	r3, [r4, #580]	@ 0x244
   //Disable rapid commit option
   dhcpClientSettings.rapidCommit = FALSE;
 8011630:	2300      	movs	r3, #0
 8011632:	f8c4 324c 	str.w	r3, [r4, #588]	@ 0x24c

   //DHCP client initialization
   error = dhcpClientInit(&dhcpClientContext, &dhcpClientSettings);
 8011636:	4629      	mov	r1, r5
 8011638:	f504 701b 	add.w	r0, r4, #620	@ 0x26c
 801163c:	f7ef fdb4 	bl	80011a8 <dhcpClientInit>
   //Failed to initialize DHCP client?
   if(error)
 8011640:	2800      	cmp	r0, #0
 8011642:	d15c      	bne.n	80116fe <main+0x2ae>
      //Debug message
      TRACE_ERROR("Failed to initialize DHCP client!\r\n");
   }

   //Start DHCP client
   error = dhcpClientStart(&dhcpClientContext);
 8011644:	4859      	ldr	r0, [pc, #356]	@ (80117ac <main+0x35c>)
 8011646:	f7ef fde3 	bl	8001210 <dhcpClientStart>
   //Failed to start DHCP client?
   if(error)
 801164a:	2800      	cmp	r0, #0
 801164c:	d164      	bne.n	8011718 <main+0x2c8>
#endif

#if (IPV6_SUPPORT == ENABLED)
#if (APP_USE_SLAAC == ENABLED)
   //Get default settings
   slaacGetDefaultSettings(&slaacSettings);
 801164e:	4c56      	ldr	r4, [pc, #344]	@ (80117a8 <main+0x358>)
 8011650:	f504 7534 	add.w	r5, r4, #720	@ 0x2d0
 8011654:	4628      	mov	r0, r5
 8011656:	f7fb fb3f 	bl	800ccd8 <slaacGetDefaultSettings>
   //Set the network interface to be configured
   slaacSettings.interface = interface;
 801165a:	4b4d      	ldr	r3, [pc, #308]	@ (8011790 <main+0x340>)
 801165c:	f8c4 32d0 	str.w	r3, [r4, #720]	@ 0x2d0

   //SLAAC initialization
   error = slaacInit(&slaacContext, &slaacSettings);
 8011660:	4629      	mov	r1, r5
 8011662:	f504 7038 	add.w	r0, r4, #736	@ 0x2e0
 8011666:	f7fb fb41 	bl	800ccec <slaacInit>
   //Failed to initialize SLAAC?
   if(error)
 801166a:	2800      	cmp	r0, #0
 801166c:	d161      	bne.n	8011732 <main+0x2e2>
      //Debug message
      TRACE_ERROR("Failed to initialize SLAAC!\r\n");
   }

   //Start IPv6 address autoconfiguration process
   error = slaacStart(&slaacContext);
 801166e:	4850      	ldr	r0, [pc, #320]	@ (80117b0 <main+0x360>)
 8011670:	f7fb fb72 	bl	800cd58 <slaacStart>
   //Failed to start SLAAC process?
   if(error)
 8011674:	2800      	cmp	r0, #0
 8011676:	d169      	bne.n	801174c <main+0x2fc>
   ipv6SetDnsServer(interface, 1, &ipv6Addr);
#endif
#endif

   //Set task parameters
   taskParams = OS_TASK_DEFAULT_PARAMS;
 8011678:	4a4e      	ldr	r2, [pc, #312]	@ (80117b4 <main+0x364>)
 801167a:	ab02      	add	r3, sp, #8
 801167c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011680:	e883 0003 	stmia.w	r3, {r0, r1}
   taskParams.stackSize = 500;
 8011684:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8011688:	9202      	str	r2, [sp, #8]
   taskParams.priority = OS_TASK_PRIORITY_NORMAL;
 801168a:	2201      	movs	r2, #1
 801168c:	9203      	str	r2, [sp, #12]

   //Create user task
   taskId = osCreateTask("User", userTask, NULL, &taskParams);
 801168e:	2200      	movs	r2, #0
 8011690:	4949      	ldr	r1, [pc, #292]	@ (80117b8 <main+0x368>)
 8011692:	484a      	ldr	r0, [pc, #296]	@ (80117bc <main+0x36c>)
 8011694:	f7ef f833 	bl	80006fe <osCreateTask>
   //Failed to create the task?
   if(taskId == OS_INVALID_TASK_ID)
 8011698:	2800      	cmp	r0, #0
 801169a:	f000 80a1 	beq.w	80117e0 <main+0x390>
      //Debug message
      TRACE_ERROR("Failed to create task!\r\n");
   }

   //Set task parameters
   taskParams = OS_TASK_DEFAULT_PARAMS;
 801169e:	4a45      	ldr	r2, [pc, #276]	@ (80117b4 <main+0x364>)
 80116a0:	ab02      	add	r3, sp, #8
 80116a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80116a6:	e883 0003 	stmia.w	r3, {r0, r1}
   taskParams.stackSize = 200;
 80116aa:	22c8      	movs	r2, #200	@ 0xc8
 80116ac:	9202      	str	r2, [sp, #8]
   taskParams.priority = OS_TASK_PRIORITY_NORMAL;
 80116ae:	2201      	movs	r2, #1
 80116b0:	9203      	str	r2, [sp, #12]

   //Create a task to blink the LED
   taskId = osCreateTask("LED", ledTask, NULL, &taskParams);
 80116b2:	2200      	movs	r2, #0
 80116b4:	4942      	ldr	r1, [pc, #264]	@ (80117c0 <main+0x370>)
 80116b6:	4843      	ldr	r0, [pc, #268]	@ (80117c4 <main+0x374>)
 80116b8:	f7ef f821 	bl	80006fe <osCreateTask>
   //Failed to create the task?
   if(taskId == OS_INVALID_TASK_ID)
 80116bc:	2800      	cmp	r0, #0
 80116be:	f000 809c 	beq.w	80117fa <main+0x3aa>
      //Debug message
      TRACE_ERROR("Failed to create task!\r\n");
   }

   //Start the execution of tasks
   osStartKernel();
 80116c2:	f7ef f818 	bl	80006f6 <osStartKernel>

   //This function should never return
   return 0;
}
 80116c6:	2000      	movs	r0, #0
 80116c8:	b004      	add	sp, #16
 80116ca:	bd70      	pop	{r4, r5, r6, pc}
      TRACE_ERROR("Failed to initialize TCP/IP stack!\r\n");
 80116cc:	f7ef f830 	bl	8000730 <osSuspendAllTasks>
 80116d0:	6823      	ldr	r3, [r4, #0]
 80116d2:	68db      	ldr	r3, [r3, #12]
 80116d4:	2224      	movs	r2, #36	@ 0x24
 80116d6:	2101      	movs	r1, #1
 80116d8:	483b      	ldr	r0, [pc, #236]	@ (80117c8 <main+0x378>)
 80116da:	f003 f9df 	bl	8014a9c <fwrite>
 80116de:	f7ef f830 	bl	8000742 <osResumeAllTasks>
 80116e2:	e77e      	b.n	80115e2 <main+0x192>
      TRACE_ERROR("Failed to configure interface %s!\r\n", interface->name);
 80116e4:	f7ef f824 	bl	8000730 <osSuspendAllTasks>
 80116e8:	4b20      	ldr	r3, [pc, #128]	@ (801176c <main+0x31c>)
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	f104 0210 	add.w	r2, r4, #16
 80116f0:	4936      	ldr	r1, [pc, #216]	@ (80117cc <main+0x37c>)
 80116f2:	68d8      	ldr	r0, [r3, #12]
 80116f4:	f002 ffb8 	bl	8014668 <fprintf>
 80116f8:	f7ef f823 	bl	8000742 <osResumeAllTasks>
 80116fc:	e78f      	b.n	801161e <main+0x1ce>
      TRACE_ERROR("Failed to initialize DHCP client!\r\n");
 80116fe:	f7ef f817 	bl	8000730 <osSuspendAllTasks>
 8011702:	4b1a      	ldr	r3, [pc, #104]	@ (801176c <main+0x31c>)
 8011704:	681b      	ldr	r3, [r3, #0]
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	2223      	movs	r2, #35	@ 0x23
 801170a:	2101      	movs	r1, #1
 801170c:	4830      	ldr	r0, [pc, #192]	@ (80117d0 <main+0x380>)
 801170e:	f003 f9c5 	bl	8014a9c <fwrite>
 8011712:	f7ef f816 	bl	8000742 <osResumeAllTasks>
 8011716:	e795      	b.n	8011644 <main+0x1f4>
      TRACE_ERROR("Failed to start DHCP client!\r\n");
 8011718:	f7ef f80a 	bl	8000730 <osSuspendAllTasks>
 801171c:	4b13      	ldr	r3, [pc, #76]	@ (801176c <main+0x31c>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	68db      	ldr	r3, [r3, #12]
 8011722:	221e      	movs	r2, #30
 8011724:	2101      	movs	r1, #1
 8011726:	482b      	ldr	r0, [pc, #172]	@ (80117d4 <main+0x384>)
 8011728:	f003 f9b8 	bl	8014a9c <fwrite>
 801172c:	f7ef f809 	bl	8000742 <osResumeAllTasks>
 8011730:	e78d      	b.n	801164e <main+0x1fe>
      TRACE_ERROR("Failed to initialize SLAAC!\r\n");
 8011732:	f7ee fffd 	bl	8000730 <osSuspendAllTasks>
 8011736:	4b0d      	ldr	r3, [pc, #52]	@ (801176c <main+0x31c>)
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	68db      	ldr	r3, [r3, #12]
 801173c:	221d      	movs	r2, #29
 801173e:	2101      	movs	r1, #1
 8011740:	4825      	ldr	r0, [pc, #148]	@ (80117d8 <main+0x388>)
 8011742:	f003 f9ab 	bl	8014a9c <fwrite>
 8011746:	f7ee fffc 	bl	8000742 <osResumeAllTasks>
 801174a:	e790      	b.n	801166e <main+0x21e>
      TRACE_ERROR("Failed to start SLAAC!\r\n");
 801174c:	f7ee fff0 	bl	8000730 <osSuspendAllTasks>
 8011750:	4b06      	ldr	r3, [pc, #24]	@ (801176c <main+0x31c>)
 8011752:	681b      	ldr	r3, [r3, #0]
 8011754:	68db      	ldr	r3, [r3, #12]
 8011756:	2218      	movs	r2, #24
 8011758:	2101      	movs	r1, #1
 801175a:	4820      	ldr	r0, [pc, #128]	@ (80117dc <main+0x38c>)
 801175c:	f003 f99e 	bl	8014a9c <fwrite>
 8011760:	f7ee ffef 	bl	8000742 <osResumeAllTasks>
 8011764:	e788      	b.n	8011678 <main+0x228>
 8011766:	bf00      	nop
 8011768:	e000ed00 	.word	0xe000ed00
 801176c:	20000440 	.word	0x20000440
 8011770:	0801a310 	.word	0x0801a310
 8011774:	0801a790 	.word	0x0801a790
 8011778:	0801a7b8 	.word	0x0801a7b8
 801177c:	0801a7e0 	.word	0x0801a7e0
 8011780:	0801a80c 	.word	0x0801a80c
 8011784:	0801a818 	.word	0x0801a818
 8011788:	0801a824 	.word	0x0801a824
 801178c:	0801a838 	.word	0x0801a838
 8011790:	20000ba8 	.word	0x20000ba8
 8011794:	0801a874 	.word	0x0801a874
 8011798:	0801a87c 	.word	0x0801a87c
 801179c:	0801a88c 	.word	0x0801a88c
 80117a0:	08019fe4 	.word	0x08019fe4
 80117a4:	08019f80 	.word	0x08019f80
 80117a8:	20003894 	.word	0x20003894
 80117ac:	20003b00 	.word	0x20003b00
 80117b0:	20003b74 	.word	0x20003b74
 80117b4:	08019e68 	.word	0x08019e68
 80117b8:	0801142d 	.word	0x0801142d
 80117bc:	0801a944 	.word	0x0801a944
 80117c0:	080111b5 	.word	0x080111b5
 80117c4:	0801a968 	.word	0x0801a968
 80117c8:	0801a84c 	.word	0x0801a84c
 80117cc:	0801a8a0 	.word	0x0801a8a0
 80117d0:	0801a8c4 	.word	0x0801a8c4
 80117d4:	0801a8e8 	.word	0x0801a8e8
 80117d8:	0801a908 	.word	0x0801a908
 80117dc:	0801a928 	.word	0x0801a928
      TRACE_ERROR("Failed to create task!\r\n");
 80117e0:	f7ee ffa6 	bl	8000730 <osSuspendAllTasks>
 80117e4:	4b0b      	ldr	r3, [pc, #44]	@ (8011814 <main+0x3c4>)
 80117e6:	681b      	ldr	r3, [r3, #0]
 80117e8:	68db      	ldr	r3, [r3, #12]
 80117ea:	2218      	movs	r2, #24
 80117ec:	2101      	movs	r1, #1
 80117ee:	480a      	ldr	r0, [pc, #40]	@ (8011818 <main+0x3c8>)
 80117f0:	f003 f954 	bl	8014a9c <fwrite>
 80117f4:	f7ee ffa5 	bl	8000742 <osResumeAllTasks>
 80117f8:	e751      	b.n	801169e <main+0x24e>
      TRACE_ERROR("Failed to create task!\r\n");
 80117fa:	f7ee ff99 	bl	8000730 <osSuspendAllTasks>
 80117fe:	4b05      	ldr	r3, [pc, #20]	@ (8011814 <main+0x3c4>)
 8011800:	681b      	ldr	r3, [r3, #0]
 8011802:	68db      	ldr	r3, [r3, #12]
 8011804:	2218      	movs	r2, #24
 8011806:	2101      	movs	r1, #1
 8011808:	4803      	ldr	r0, [pc, #12]	@ (8011818 <main+0x3c8>)
 801180a:	f003 f947 	bl	8014a9c <fwrite>
 801180e:	f7ee ff98 	bl	8000742 <osResumeAllTasks>
 8011812:	e756      	b.n	80116c2 <main+0x272>
 8011814:	20000440 	.word	0x20000440
 8011818:	0801a94c 	.word	0x0801a94c

0801181c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 801181c:	4770      	bx	lr

0801181e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 801181e:	e7fe      	b.n	801181e <HardFault_Handler>

08011820 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8011820:	e7fe      	b.n	8011820 <MemManage_Handler>

08011822 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8011822:	e7fe      	b.n	8011822 <BusFault_Handler>

08011824 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8011824:	e7fe      	b.n	8011824 <UsageFault_Handler>

08011826 <DebugMon_Handler>:
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
}
 8011826:	4770      	bx	lr

08011828 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8011828:	b508      	push	{r3, lr}
   HAL_IncTick();
 801182a:	f001 fa85 	bl	8012d38 <HAL_IncTick>

   if(xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 801182e:	f001 f873 	bl	8012918 <xTaskGetSchedulerState>
 8011832:	2801      	cmp	r0, #1
 8011834:	d100      	bne.n	8011838 <SysTick_Handler+0x10>
   {
      xPortSysTickHandler();
   }
}
 8011836:	bd08      	pop	{r3, pc}
      xPortSysTickHandler();
 8011838:	f000 f924 	bl	8011a84 <xPortSysTickHandler>
}
 801183c:	e7fb      	b.n	8011836 <SysTick_Handler+0xe>
	...

08011840 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8011840:	4a0c      	ldr	r2, [pc, #48]	@ (8011874 <SystemInit+0x34>)
 8011842:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8011846:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801184a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801184e:	4b0a      	ldr	r3, [pc, #40]	@ (8011878 <SystemInit+0x38>)
 8011850:	681a      	ldr	r2, [r3, #0]
 8011852:	f042 0201 	orr.w	r2, r2, #1
 8011856:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8011858:	2100      	movs	r1, #0
 801185a:	6099      	str	r1, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801185c:	6818      	ldr	r0, [r3, #0]
 801185e:	4a07      	ldr	r2, [pc, #28]	@ (801187c <SystemInit+0x3c>)
 8011860:	4002      	ands	r2, r0
 8011862:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8011864:	4a06      	ldr	r2, [pc, #24]	@ (8011880 <SystemInit+0x40>)
 8011866:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8011868:	681a      	ldr	r2, [r3, #0]
 801186a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 801186e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8011870:	60d9      	str	r1, [r3, #12]
#ifdef VECT_TAB_SRAM
  //SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  //SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif
}
 8011872:	4770      	bx	lr
 8011874:	e000ed00 	.word	0xe000ed00
 8011878:	40023800 	.word	0x40023800
 801187c:	fef6ffff 	.word	0xfef6ffff
 8011880:	24003010 	.word	0x24003010

08011884 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8011884:	b510      	push	{r4, lr}
 8011886:	4604      	mov	r4, r0
    void * pvReturn;

    vTaskSuspendAll();
 8011888:	f000 fdda 	bl	8012440 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
 801188c:	4620      	mov	r0, r4
 801188e:	f002 fb79 	bl	8013f84 <malloc>
 8011892:	4604      	mov	r4, r0
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8011894:	f000 fe92 	bl	80125bc <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
 8011898:	4620      	mov	r0, r4
 801189a:	bd10      	pop	{r4, pc}

0801189c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
    if( pv != NULL )
 801189c:	b148      	cbz	r0, 80118b2 <vPortFree+0x16>
{
 801189e:	b510      	push	{r4, lr}
 80118a0:	4604      	mov	r4, r0
    {
        vTaskSuspendAll();
 80118a2:	f000 fdcd 	bl	8012440 <vTaskSuspendAll>
        {
            free( pv );
 80118a6:	4620      	mov	r0, r4
 80118a8:	f002 fb74 	bl	8013f94 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
 80118ac:	f000 fe86 	bl	80125bc <xTaskResumeAll>
    }
}
 80118b0:	bd10      	pop	{r4, pc}
 80118b2:	4770      	bx	lr

080118b4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118b4:	f100 0308 	add.w	r3, r0, #8
 80118b8:	6043      	str	r3, [r0, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80118ba:	f04f 32ff 	mov.w	r2, #4294967295
 80118be:	6082      	str	r2, [r0, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118c0:	60c3      	str	r3, [r0, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80118c2:	6103      	str	r3, [r0, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80118c4:	2300      	movs	r3, #0
 80118c6:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80118c8:	4770      	bx	lr

080118ca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80118ca:	2300      	movs	r3, #0
 80118cc:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80118ce:	4770      	bx	lr

080118d0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80118d0:	b430      	push	{r4, r5}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80118d2:	680d      	ldr	r5, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80118d4:	f1b5 3fff 	cmp.w	r5, #4294967295
 80118d8:	d011      	beq.n	80118fe <vListInsert+0x2e>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118da:	f100 0308 	add.w	r3, r0, #8
 80118de:	461c      	mov	r4, r3
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	681a      	ldr	r2, [r3, #0]
 80118e4:	42aa      	cmp	r2, r5
 80118e6:	d9fa      	bls.n	80118de <vListInsert+0xe>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80118e8:	6863      	ldr	r3, [r4, #4]
 80118ea:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118ec:	6099      	str	r1, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80118ee:	608c      	str	r4, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 80118f0:	6061      	str	r1, [r4, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80118f2:	6108      	str	r0, [r1, #16]

    ( pxList->uxNumberOfItems )++;
 80118f4:	6803      	ldr	r3, [r0, #0]
 80118f6:	3301      	adds	r3, #1
 80118f8:	6003      	str	r3, [r0, #0]
}
 80118fa:	bc30      	pop	{r4, r5}
 80118fc:	4770      	bx	lr
        pxIterator = pxList->xListEnd.pxPrevious;
 80118fe:	6904      	ldr	r4, [r0, #16]
 8011900:	e7f2      	b.n	80118e8 <vListInsert+0x18>

08011902 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8011902:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011904:	6841      	ldr	r1, [r0, #4]
 8011906:	6882      	ldr	r2, [r0, #8]
 8011908:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801190a:	6841      	ldr	r1, [r0, #4]
 801190c:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 801190e:	685a      	ldr	r2, [r3, #4]
 8011910:	4282      	cmp	r2, r0
 8011912:	d006      	beq.n	8011922 <uxListRemove+0x20>
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8011914:	2200      	movs	r2, #0
 8011916:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	3a01      	subs	r2, #1
 801191c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 801191e:	6818      	ldr	r0, [r3, #0]
}
 8011920:	4770      	bx	lr
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011922:	6882      	ldr	r2, [r0, #8]
 8011924:	605a      	str	r2, [r3, #4]
 8011926:	e7f5      	b.n	8011914 <uxListRemove+0x12>

08011928 <prvTaskExitError>:
    return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8011928:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0;
 801192a:	2300      	movs	r3, #0
 801192c:	9301      	str	r3, [sp, #4]

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 801192e:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8011932:	b672      	cpsid	i
 8011934:	f383 8811 	msr	BASEPRI, r3
 8011938:	f3bf 8f6f 	isb	sy
 801193c:	f3bf 8f4f 	dsb	sy
 8011940:	b662      	cpsie	i
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8011942:	9b01      	ldr	r3, [sp, #4]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d0fc      	beq.n	8011942 <prvTaskExitError+0x1a>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8011948:	b002      	add	sp, #8
 801194a:	4770      	bx	lr

0801194c <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 801194c:	4808      	ldr	r0, [pc, #32]	@ (8011970 <prvPortStartFirstTask+0x24>)
 801194e:	6800      	ldr	r0, [r0, #0]
 8011950:	6800      	ldr	r0, [r0, #0]
 8011952:	f380 8808 	msr	MSP, r0
 8011956:	f04f 0000 	mov.w	r0, #0
 801195a:	f380 8814 	msr	CONTROL, r0
 801195e:	b662      	cpsie	i
 8011960:	b661      	cpsie	f
 8011962:	f3bf 8f4f 	dsb	sy
 8011966:	f3bf 8f6f 	isb	sy
 801196a:	df00      	svc	0
 801196c:	bf00      	nop
 801196e:	0000      	.short	0x0000
 8011970:	e000ed08 	.word	0xe000ed08

08011974 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8011974:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8011984 <vPortEnableVFP+0x10>
 8011978:	6801      	ldr	r1, [r0, #0]
 801197a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801197e:	6001      	str	r1, [r0, #0]
 8011980:	4770      	bx	lr
 8011982:	0000      	.short	0x0000
 8011984:	e000ed88 	.word	0xe000ed88

08011988 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8011988:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801198c:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8011990:	f021 0101 	bic.w	r1, r1, #1
 8011994:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8011998:	4b05      	ldr	r3, [pc, #20]	@ (80119b0 <pxPortInitialiseStack+0x28>)
 801199a:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 801199e:	f840 2c20 	str.w	r2, [r0, #-32]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80119a2:	f06f 0302 	mvn.w	r3, #2
 80119a6:	f840 3c24 	str.w	r3, [r0, #-36]
}
 80119aa:	3844      	subs	r0, #68	@ 0x44
 80119ac:	4770      	bx	lr
 80119ae:	bf00      	nop
 80119b0:	08011929 	.word	0x08011929
	...

080119c0 <SVC_Handler>:
    __asm volatile (
 80119c0:	4b07      	ldr	r3, [pc, #28]	@ (80119e0 <pxCurrentTCBConst2>)
 80119c2:	6819      	ldr	r1, [r3, #0]
 80119c4:	6808      	ldr	r0, [r1, #0]
 80119c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119ca:	f380 8809 	msr	PSP, r0
 80119ce:	f3bf 8f6f 	isb	sy
 80119d2:	f04f 0000 	mov.w	r0, #0
 80119d6:	f380 8811 	msr	BASEPRI, r0
 80119da:	4770      	bx	lr
 80119dc:	f3af 8000 	nop.w

080119e0 <pxCurrentTCBConst2>:
 80119e0:	20003c64 	.word	0x20003c64

080119e4 <vPortEnterCritical>:
 80119e4:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 80119e8:	b672      	cpsid	i
 80119ea:	f383 8811 	msr	BASEPRI, r3
 80119ee:	f3bf 8f6f 	isb	sy
 80119f2:	f3bf 8f4f 	dsb	sy
 80119f6:	b662      	cpsie	i
    uxCriticalNesting++;
 80119f8:	4a02      	ldr	r2, [pc, #8]	@ (8011a04 <vPortEnterCritical+0x20>)
 80119fa:	6813      	ldr	r3, [r2, #0]
 80119fc:	3301      	adds	r3, #1
 80119fe:	6013      	str	r3, [r2, #0]
}
 8011a00:	4770      	bx	lr
 8011a02:	bf00      	nop
 8011a04:	20000004 	.word	0x20000004

08011a08 <vPortExitCritical>:
    uxCriticalNesting--;
 8011a08:	4a03      	ldr	r2, [pc, #12]	@ (8011a18 <vPortExitCritical+0x10>)
 8011a0a:	6813      	ldr	r3, [r2, #0]
 8011a0c:	3b01      	subs	r3, #1
 8011a0e:	6013      	str	r3, [r2, #0]
    if( uxCriticalNesting == 0 )
 8011a10:	b90b      	cbnz	r3, 8011a16 <vPortExitCritical+0xe>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8011a12:	f383 8811 	msr	BASEPRI, r3
}
 8011a16:	4770      	bx	lr
 8011a18:	20000004 	.word	0x20000004
 8011a1c:	00000000 	.word	0x00000000

08011a20 <PendSV_Handler>:
    __asm volatile
 8011a20:	f3ef 8009 	mrs	r0, PSP
 8011a24:	f3bf 8f6f 	isb	sy
 8011a28:	4b15      	ldr	r3, [pc, #84]	@ (8011a80 <pxCurrentTCBConst>)
 8011a2a:	681a      	ldr	r2, [r3, #0]
 8011a2c:	f01e 0f10 	tst.w	lr, #16
 8011a30:	bf08      	it	eq
 8011a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a3a:	6010      	str	r0, [r2, #0]
 8011a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011a40:	f04f 00bf 	mov.w	r0, #191	@ 0xbf
 8011a44:	b672      	cpsid	i
 8011a46:	f380 8811 	msr	BASEPRI, r0
 8011a4a:	f3bf 8f4f 	dsb	sy
 8011a4e:	f3bf 8f6f 	isb	sy
 8011a52:	b662      	cpsie	i
 8011a54:	f000 fe68 	bl	8012728 <vTaskSwitchContext>
 8011a58:	f04f 0000 	mov.w	r0, #0
 8011a5c:	f380 8811 	msr	BASEPRI, r0
 8011a60:	bc09      	pop	{r0, r3}
 8011a62:	6819      	ldr	r1, [r3, #0]
 8011a64:	6808      	ldr	r0, [r1, #0]
 8011a66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6a:	f01e 0f10 	tst.w	lr, #16
 8011a6e:	bf08      	it	eq
 8011a70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011a74:	f380 8809 	msr	PSP, r0
 8011a78:	f3bf 8f6f 	isb	sy
 8011a7c:	4770      	bx	lr
 8011a7e:	bf00      	nop

08011a80 <pxCurrentTCBConst>:
 8011a80:	20003c64 	.word	0x20003c64

08011a84 <xPortSysTickHandler>:
{
 8011a84:	b508      	push	{r3, lr}
        __asm volatile
 8011a86:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8011a8a:	b672      	cpsid	i
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	b662      	cpsie	i
        if( xTaskIncrementTick() != pdFALSE )
 8011a9a:	f000 fce7 	bl	801246c <xTaskIncrementTick>
 8011a9e:	b128      	cbz	r0, 8011aac <xPortSysTickHandler+0x28>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011aa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011aa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011aa8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
        __asm volatile
 8011aac:	2300      	movs	r3, #0
 8011aae:	f383 8811 	msr	BASEPRI, r3
}
 8011ab2:	bd08      	pop	{r3, pc}

08011ab4 <vPortSetupTimerInterrupt>:
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011ab4:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8011ab8:	2300      	movs	r3, #0
 8011aba:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011abc:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011abe:	4b05      	ldr	r3, [pc, #20]	@ (8011ad4 <vPortSetupTimerInterrupt+0x20>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	4905      	ldr	r1, [pc, #20]	@ (8011ad8 <vPortSetupTimerInterrupt+0x24>)
 8011ac4:	fba1 1303 	umull	r1, r3, r1, r3
 8011ac8:	099b      	lsrs	r3, r3, #6
 8011aca:	3b01      	subs	r3, #1
 8011acc:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011ace:	2307      	movs	r3, #7
 8011ad0:	6113      	str	r3, [r2, #16]
}
 8011ad2:	4770      	bx	lr
 8011ad4:	20000000 	.word	0x20000000
 8011ad8:	10624dd3 	.word	0x10624dd3

08011adc <xPortStartScheduler>:
{
 8011adc:	b538      	push	{r3, r4, r5, lr}
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8011ade:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
 8011ae2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8011ae6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8011aea:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8011aee:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 8011af2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8011af6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
    vPortSetupTimerInterrupt();
 8011afa:	f7ff ffdb 	bl	8011ab4 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8011afe:	2500      	movs	r5, #0
 8011b00:	4b08      	ldr	r3, [pc, #32]	@ (8011b24 <xPortStartScheduler+0x48>)
 8011b02:	601d      	str	r5, [r3, #0]
    vPortEnableVFP();
 8011b04:	f7ff ff36 	bl	8011974 <vPortEnableVFP>
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011b08:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 8011b0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8011b10:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
    prvPortStartFirstTask();
 8011b14:	f7ff ff1a 	bl	801194c <prvPortStartFirstTask>
    vTaskSwitchContext();
 8011b18:	f000 fe06 	bl	8012728 <vTaskSwitchContext>
    prvTaskExitError();
 8011b1c:	f7ff ff04 	bl	8011928 <prvTaskExitError>
}
 8011b20:	4628      	mov	r0, r5
 8011b22:	bd38      	pop	{r3, r4, r5, pc}
 8011b24:	20000004 	.word	0x20000004

08011b28 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8011b28:	4603      	mov	r3, r0
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011b2a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8011b2c:	b118      	cbz	r0, 8011b36 <prvGetDisinheritPriorityAfterTimeout+0xe>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8011b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011b30:	6818      	ldr	r0, [r3, #0]
 8011b32:	f1c0 0005 	rsb	r0, r0, #5
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
        }

        return uxHighestPriorityOfWaitingTasks;
    }
 8011b36:	4770      	bx	lr

08011b38 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8011b38:	b510      	push	{r4, lr}
 8011b3a:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8011b3c:	f7ff ff52 	bl	80119e4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011b40:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011b42:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011b44:	429a      	cmp	r2, r3
 8011b46:	d004      	beq.n	8011b52 <prvIsQueueFull+0x1a>
        {
            xReturn = pdTRUE;
        }
        else
        {
            xReturn = pdFALSE;
 8011b48:	2400      	movs	r4, #0
        }
    }
    taskEXIT_CRITICAL();
 8011b4a:	f7ff ff5d 	bl	8011a08 <vPortExitCritical>

    return xReturn;
}
 8011b4e:	4620      	mov	r0, r4
 8011b50:	bd10      	pop	{r4, pc}
            xReturn = pdTRUE;
 8011b52:	2401      	movs	r4, #1
 8011b54:	e7f9      	b.n	8011b4a <prvIsQueueFull+0x12>

08011b56 <prvIsQueueEmpty>:
{
 8011b56:	b510      	push	{r4, lr}
 8011b58:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8011b5a:	f7ff ff43 	bl	80119e4 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8011b5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8011b60:	b923      	cbnz	r3, 8011b6c <prvIsQueueEmpty+0x16>
            xReturn = pdTRUE;
 8011b62:	2401      	movs	r4, #1
    taskEXIT_CRITICAL();
 8011b64:	f7ff ff50 	bl	8011a08 <vPortExitCritical>
}
 8011b68:	4620      	mov	r0, r4
 8011b6a:	bd10      	pop	{r4, pc}
            xReturn = pdFALSE;
 8011b6c:	2400      	movs	r4, #0
 8011b6e:	e7f9      	b.n	8011b64 <prvIsQueueEmpty+0xe>

08011b70 <prvCopyDataToQueue>:
{
 8011b70:	b570      	push	{r4, r5, r6, lr}
 8011b72:	4604      	mov	r4, r0
 8011b74:	4615      	mov	r5, r2
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b76:	6b86      	ldr	r6, [r0, #56]	@ 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011b78:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8011b7a:	b95a      	cbnz	r2, 8011b94 <prvCopyDataToQueue+0x24>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011b7c:	6803      	ldr	r3, [r0, #0]
 8011b7e:	b11b      	cbz	r3, 8011b88 <prvCopyDataToQueue+0x18>
    BaseType_t xReturn = pdFALSE;
 8011b80:	2000      	movs	r0, #0
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011b82:	3601      	adds	r6, #1
 8011b84:	63a6      	str	r6, [r4, #56]	@ 0x38
}
 8011b86:	bd70      	pop	{r4, r5, r6, pc}
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011b88:	6880      	ldr	r0, [r0, #8]
 8011b8a:	f000 ff41 	bl	8012a10 <xTaskPriorityDisinherit>
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	60a3      	str	r3, [r4, #8]
 8011b92:	e7f6      	b.n	8011b82 <prvCopyDataToQueue+0x12>
    else if( xPosition == queueSEND_TO_BACK )
 8011b94:	b96d      	cbnz	r5, 8011bb2 <prvCopyDataToQueue+0x42>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011b96:	6840      	ldr	r0, [r0, #4]
 8011b98:	f003 f980 	bl	8014e9c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011b9c:	6863      	ldr	r3, [r4, #4]
 8011b9e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011ba0:	4413      	add	r3, r2
 8011ba2:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011ba4:	68a2      	ldr	r2, [r4, #8]
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d319      	bcc.n	8011bde <prvCopyDataToQueue+0x6e>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8011baa:	6823      	ldr	r3, [r4, #0]
 8011bac:	6063      	str	r3, [r4, #4]
    BaseType_t xReturn = pdFALSE;
 8011bae:	4628      	mov	r0, r5
 8011bb0:	e7e7      	b.n	8011b82 <prvCopyDataToQueue+0x12>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011bb2:	68c0      	ldr	r0, [r0, #12]
 8011bb4:	f003 f972 	bl	8014e9c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011bb8:	68e3      	ldr	r3, [r4, #12]
 8011bba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8011bbc:	4251      	negs	r1, r2
 8011bbe:	1a9b      	subs	r3, r3, r2
 8011bc0:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011bc2:	6822      	ldr	r2, [r4, #0]
 8011bc4:	4293      	cmp	r3, r2
 8011bc6:	d202      	bcs.n	8011bce <prvCopyDataToQueue+0x5e>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011bc8:	68a3      	ldr	r3, [r4, #8]
 8011bca:	440b      	add	r3, r1
 8011bcc:	60e3      	str	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8011bce:	2d02      	cmp	r5, #2
 8011bd0:	d001      	beq.n	8011bd6 <prvCopyDataToQueue+0x66>
    BaseType_t xReturn = pdFALSE;
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	e7d5      	b.n	8011b82 <prvCopyDataToQueue+0x12>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011bd6:	b126      	cbz	r6, 8011be2 <prvCopyDataToQueue+0x72>
                --uxMessagesWaiting;
 8011bd8:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8011bda:	2000      	movs	r0, #0
 8011bdc:	e7d1      	b.n	8011b82 <prvCopyDataToQueue+0x12>
 8011bde:	4628      	mov	r0, r5
 8011be0:	e7cf      	b.n	8011b82 <prvCopyDataToQueue+0x12>
 8011be2:	2000      	movs	r0, #0
 8011be4:	e7cd      	b.n	8011b82 <prvCopyDataToQueue+0x12>

08011be6 <prvUnlockQueue>:
{
 8011be6:	b538      	push	{r3, r4, r5, lr}
 8011be8:	4605      	mov	r5, r0
    taskENTER_CRITICAL();
 8011bea:	f7ff fefb 	bl	80119e4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8011bee:	f895 4045 	ldrb.w	r4, [r5, #69]	@ 0x45
 8011bf2:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8011bf4:	e001      	b.n	8011bfa <prvUnlockQueue+0x14>
            --cTxLock;
 8011bf6:	3c01      	subs	r4, #1
 8011bf8:	b264      	sxtb	r4, r4
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8011bfa:	2c00      	cmp	r4, #0
 8011bfc:	dd0a      	ble.n	8011c14 <prvUnlockQueue+0x2e>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bfe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8011c00:	b143      	cbz	r3, 8011c14 <prvUnlockQueue+0x2e>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c02:	f105 0024 	add.w	r0, r5, #36	@ 0x24
 8011c06:	f000 fdd7 	bl	80127b8 <xTaskRemoveFromEventList>
 8011c0a:	2800      	cmp	r0, #0
 8011c0c:	d0f3      	beq.n	8011bf6 <prvUnlockQueue+0x10>
                        vTaskMissedYield();
 8011c0e:	f000 fe7b 	bl	8012908 <vTaskMissedYield>
 8011c12:	e7f0      	b.n	8011bf6 <prvUnlockQueue+0x10>
        pxQueue->cTxLock = queueUNLOCKED;
 8011c14:	23ff      	movs	r3, #255	@ 0xff
 8011c16:	f885 3045 	strb.w	r3, [r5, #69]	@ 0x45
    taskEXIT_CRITICAL();
 8011c1a:	f7ff fef5 	bl	8011a08 <vPortExitCritical>
    taskENTER_CRITICAL();
 8011c1e:	f7ff fee1 	bl	80119e4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8011c22:	f895 4044 	ldrb.w	r4, [r5, #68]	@ 0x44
 8011c26:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c28:	e001      	b.n	8011c2e <prvUnlockQueue+0x48>
                --cRxLock;
 8011c2a:	3c01      	subs	r4, #1
 8011c2c:	b264      	sxtb	r4, r4
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8011c2e:	2c00      	cmp	r4, #0
 8011c30:	dd0a      	ble.n	8011c48 <prvUnlockQueue+0x62>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011c32:	692b      	ldr	r3, [r5, #16]
 8011c34:	b143      	cbz	r3, 8011c48 <prvUnlockQueue+0x62>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011c36:	f105 0010 	add.w	r0, r5, #16
 8011c3a:	f000 fdbd 	bl	80127b8 <xTaskRemoveFromEventList>
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d0f3      	beq.n	8011c2a <prvUnlockQueue+0x44>
                    vTaskMissedYield();
 8011c42:	f000 fe61 	bl	8012908 <vTaskMissedYield>
 8011c46:	e7f0      	b.n	8011c2a <prvUnlockQueue+0x44>
        pxQueue->cRxLock = queueUNLOCKED;
 8011c48:	23ff      	movs	r3, #255	@ 0xff
 8011c4a:	f885 3044 	strb.w	r3, [r5, #68]	@ 0x44
    taskEXIT_CRITICAL();
 8011c4e:	f7ff fedb 	bl	8011a08 <vPortExitCritical>
}
 8011c52:	bd38      	pop	{r3, r4, r5, pc}

08011c54 <xQueueGenericReset>:
    if( ( pxQueue != NULL ) &&
 8011c54:	2800      	cmp	r0, #0
 8011c56:	d044      	beq.n	8011ce2 <xQueueGenericReset+0x8e>
{
 8011c58:	b538      	push	{r3, r4, r5, lr}
 8011c5a:	460d      	mov	r5, r1
 8011c5c:	4604      	mov	r4, r0
        ( pxQueue->uxLength >= 1U ) &&
 8011c5e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d040      	beq.n	8011ce6 <xQueueGenericReset+0x92>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8011c64:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8011c66:	2100      	movs	r1, #0
 8011c68:	fba2 2303 	umull	r2, r3, r2, r3
 8011c6c:	b913      	cbnz	r3, 8011c74 <xQueueGenericReset+0x20>
        ( pxQueue->uxLength >= 1U ) &&
 8011c6e:	b119      	cbz	r1, 8011c78 <xQueueGenericReset+0x24>
        xReturn = pdFAIL;
 8011c70:	2000      	movs	r0, #0
    return xReturn;
 8011c72:	e039      	b.n	8011ce8 <xQueueGenericReset+0x94>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8011c74:	2101      	movs	r1, #1
 8011c76:	e7fa      	b.n	8011c6e <xQueueGenericReset+0x1a>
        taskENTER_CRITICAL();
 8011c78:	f7ff feb4 	bl	80119e4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c7c:	6823      	ldr	r3, [r4, #0]
 8011c7e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8011c80:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8011c82:	fb01 3002 	mla	r0, r1, r2, r3
 8011c86:	60a0      	str	r0, [r4, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011c88:	2000      	movs	r0, #0
 8011c8a:	63a0      	str	r0, [r4, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8011c8c:	6063      	str	r3, [r4, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011c8e:	3a01      	subs	r2, #1
 8011c90:	fb02 3301 	mla	r3, r2, r1, r3
 8011c94:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8011c96:	23ff      	movs	r3, #255	@ 0xff
 8011c98:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8011c9c:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
            if( xNewQueue == pdFALSE )
 8011ca0:	b9b5      	cbnz	r5, 8011cd0 <xQueueGenericReset+0x7c>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ca2:	6923      	ldr	r3, [r4, #16]
 8011ca4:	b91b      	cbnz	r3, 8011cae <xQueueGenericReset+0x5a>
        taskEXIT_CRITICAL();
 8011ca6:	f7ff feaf 	bl	8011a08 <vPortExitCritical>
    BaseType_t xReturn = pdPASS;
 8011caa:	2001      	movs	r0, #1
        taskEXIT_CRITICAL();
 8011cac:	e01c      	b.n	8011ce8 <xQueueGenericReset+0x94>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011cae:	f104 0010 	add.w	r0, r4, #16
 8011cb2:	f000 fd81 	bl	80127b8 <xTaskRemoveFromEventList>
 8011cb6:	2800      	cmp	r0, #0
 8011cb8:	d0f5      	beq.n	8011ca6 <xQueueGenericReset+0x52>
                        queueYIELD_IF_USING_PREEMPTION();
 8011cba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011cbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011cc6:	f3bf 8f4f 	dsb	sy
 8011cca:	f3bf 8f6f 	isb	sy
 8011cce:	e7ea      	b.n	8011ca6 <xQueueGenericReset+0x52>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011cd0:	f104 0010 	add.w	r0, r4, #16
 8011cd4:	f7ff fdee 	bl	80118b4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011cd8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011cdc:	f7ff fdea 	bl	80118b4 <vListInitialise>
 8011ce0:	e7e1      	b.n	8011ca6 <xQueueGenericReset+0x52>
        xReturn = pdFAIL;
 8011ce2:	2000      	movs	r0, #0
}
 8011ce4:	4770      	bx	lr
        xReturn = pdFAIL;
 8011ce6:	2000      	movs	r0, #0
}
 8011ce8:	bd38      	pop	{r3, r4, r5, pc}

08011cea <prvInitialiseNewQueue>:
{
 8011cea:	b510      	push	{r4, lr}
 8011cec:	4603      	mov	r3, r0
 8011cee:	9802      	ldr	r0, [sp, #8]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8011cf0:	460c      	mov	r4, r1
 8011cf2:	b931      	cbnz	r1, 8011d02 <prvInitialiseNewQueue+0x18>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011cf4:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8011cf6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8011cf8:	6404      	str	r4, [r0, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011cfa:	2101      	movs	r1, #1
 8011cfc:	f7ff ffaa 	bl	8011c54 <xQueueGenericReset>
}
 8011d00:	bd10      	pop	{r4, pc}
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011d02:	6002      	str	r2, [r0, #0]
 8011d04:	e7f7      	b.n	8011cf6 <prvInitialiseNewQueue+0xc>

08011d06 <xQueueGenericCreate>:
    {
 8011d06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d08:	b083      	sub	sp, #12
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011d0a:	b1e0      	cbz	r0, 8011d46 <xQueueGenericCreate+0x40>
 8011d0c:	460c      	mov	r4, r1
 8011d0e:	4617      	mov	r7, r2
 8011d10:	4605      	mov	r5, r0
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011d12:	2300      	movs	r3, #0
 8011d14:	fba4 1200 	umull	r1, r2, r4, r0
 8011d18:	b99a      	cbnz	r2, 8011d42 <xQueueGenericCreate+0x3c>
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8011d1a:	b9c3      	cbnz	r3, 8011d4e <xQueueGenericCreate+0x48>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8011d1c:	fb04 f005 	mul.w	r0, r4, r5
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011d20:	f110 0f49 	cmn.w	r0, #73	@ 0x49
 8011d24:	d815      	bhi.n	8011d52 <xQueueGenericCreate+0x4c>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011d26:	3048      	adds	r0, #72	@ 0x48
 8011d28:	f7ff fdac 	bl	8011884 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8011d2c:	4606      	mov	r6, r0
 8011d2e:	b158      	cbz	r0, 8011d48 <xQueueGenericCreate+0x42>
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011d30:	9000      	str	r0, [sp, #0]
 8011d32:	463b      	mov	r3, r7
 8011d34:	f100 0248 	add.w	r2, r0, #72	@ 0x48
 8011d38:	4621      	mov	r1, r4
 8011d3a:	4628      	mov	r0, r5
 8011d3c:	f7ff ffd5 	bl	8011cea <prvInitialiseNewQueue>
 8011d40:	e002      	b.n	8011d48 <xQueueGenericCreate+0x42>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8011d42:	2301      	movs	r3, #1
 8011d44:	e7e9      	b.n	8011d1a <xQueueGenericCreate+0x14>
        Queue_t * pxNewQueue = NULL;
 8011d46:	2600      	movs	r6, #0
    }
 8011d48:	4630      	mov	r0, r6
 8011d4a:	b003      	add	sp, #12
 8011d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Queue_t * pxNewQueue = NULL;
 8011d4e:	2600      	movs	r6, #0
 8011d50:	e7fa      	b.n	8011d48 <xQueueGenericCreate+0x42>
 8011d52:	2600      	movs	r6, #0
        return pxNewQueue;
 8011d54:	e7f8      	b.n	8011d48 <xQueueGenericCreate+0x42>

08011d56 <xQueueGenericSend>:
{
 8011d56:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d58:	b085      	sub	sp, #20
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	460f      	mov	r7, r1
 8011d5e:	9201      	str	r2, [sp, #4]
 8011d60:	461d      	mov	r5, r3
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d62:	2600      	movs	r6, #0
 8011d64:	e03d      	b.n	8011de2 <xQueueGenericSend+0x8c>
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011d66:	462a      	mov	r2, r5
 8011d68:	4639      	mov	r1, r7
 8011d6a:	4620      	mov	r0, r4
 8011d6c:	f7ff ff00 	bl	8011b70 <prvCopyDataToQueue>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d70:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011d72:	b97b      	cbnz	r3, 8011d94 <xQueueGenericSend+0x3e>
                    else if( xYieldRequired != pdFALSE )
 8011d74:	b148      	cbz	r0, 8011d8a <xQueueGenericSend+0x34>
                        queueYIELD_IF_USING_PREEMPTION();
 8011d76:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011d7e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011d82:	f3bf 8f4f 	dsb	sy
 8011d86:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8011d8a:	f7ff fe3d 	bl	8011a08 <vPortExitCritical>
                return pdPASS;
 8011d8e:	2001      	movs	r0, #1
}
 8011d90:	b005      	add	sp, #20
 8011d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d94:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8011d98:	f000 fd0e 	bl	80127b8 <xTaskRemoveFromEventList>
 8011d9c:	2800      	cmp	r0, #0
 8011d9e:	d0f4      	beq.n	8011d8a <xQueueGenericSend+0x34>
                            queueYIELD_IF_USING_PREEMPTION();
 8011da0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011da4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011da8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011dac:	f3bf 8f4f 	dsb	sy
 8011db0:	f3bf 8f6f 	isb	sy
 8011db4:	e7e9      	b.n	8011d8a <xQueueGenericSend+0x34>
                    taskEXIT_CRITICAL();
 8011db6:	f7ff fe27 	bl	8011a08 <vPortExitCritical>
                    return errQUEUE_FULL;
 8011dba:	2000      	movs	r0, #0
 8011dbc:	e7e8      	b.n	8011d90 <xQueueGenericSend+0x3a>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011dbe:	a802      	add	r0, sp, #8
 8011dc0:	f000 fd68 	bl	8012894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011dc4:	2601      	movs	r6, #1
 8011dc6:	e019      	b.n	8011dfc <xQueueGenericSend+0xa6>
        prvLockQueue( pxQueue );
 8011dc8:	2300      	movs	r3, #0
 8011dca:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8011dce:	e021      	b.n	8011e14 <xQueueGenericSend+0xbe>
 8011dd0:	2300      	movs	r3, #0
 8011dd2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8011dd6:	e023      	b.n	8011e20 <xQueueGenericSend+0xca>
                prvUnlockQueue( pxQueue );
 8011dd8:	4620      	mov	r0, r4
 8011dda:	f7ff ff04 	bl	8011be6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011dde:	f000 fbed 	bl	80125bc <xTaskResumeAll>
        taskENTER_CRITICAL();
 8011de2:	f7ff fdff 	bl	80119e4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011de6:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8011de8:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8011dea:	429a      	cmp	r2, r3
 8011dec:	d3bb      	bcc.n	8011d66 <xQueueGenericSend+0x10>
 8011dee:	2d02      	cmp	r5, #2
 8011df0:	d0b9      	beq.n	8011d66 <xQueueGenericSend+0x10>
                if( xTicksToWait == ( TickType_t ) 0 )
 8011df2:	9b01      	ldr	r3, [sp, #4]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d0de      	beq.n	8011db6 <xQueueGenericSend+0x60>
                else if( xEntryTimeSet == pdFALSE )
 8011df8:	2e00      	cmp	r6, #0
 8011dfa:	d0e0      	beq.n	8011dbe <xQueueGenericSend+0x68>
        taskEXIT_CRITICAL();
 8011dfc:	f7ff fe04 	bl	8011a08 <vPortExitCritical>
        vTaskSuspendAll();
 8011e00:	f000 fb1e 	bl	8012440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011e04:	f7ff fdee 	bl	80119e4 <vPortEnterCritical>
 8011e08:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8011e0c:	b240      	sxtb	r0, r0
 8011e0e:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e12:	d0d9      	beq.n	8011dc8 <xQueueGenericSend+0x72>
 8011e14:	f894 0045 	ldrb.w	r0, [r4, #69]	@ 0x45
 8011e18:	b240      	sxtb	r0, r0
 8011e1a:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011e1e:	d0d7      	beq.n	8011dd0 <xQueueGenericSend+0x7a>
 8011e20:	f7ff fdf2 	bl	8011a08 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e24:	a901      	add	r1, sp, #4
 8011e26:	a802      	add	r0, sp, #8
 8011e28:	f000 fd3e 	bl	80128a8 <xTaskCheckForTimeOut>
 8011e2c:	b9d8      	cbnz	r0, 8011e66 <xQueueGenericSend+0x110>
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e2e:	4620      	mov	r0, r4
 8011e30:	f7ff fe82 	bl	8011b38 <prvIsQueueFull>
 8011e34:	2800      	cmp	r0, #0
 8011e36:	d0cf      	beq.n	8011dd8 <xQueueGenericSend+0x82>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011e38:	9901      	ldr	r1, [sp, #4]
 8011e3a:	f104 0010 	add.w	r0, r4, #16
 8011e3e:	f000 fcab 	bl	8012798 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8011e42:	4620      	mov	r0, r4
 8011e44:	f7ff fecf 	bl	8011be6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8011e48:	f000 fbb8 	bl	80125bc <xTaskResumeAll>
 8011e4c:	2800      	cmp	r0, #0
 8011e4e:	d1c8      	bne.n	8011de2 <xQueueGenericSend+0x8c>
                    portYIELD_WITHIN_API();
 8011e50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011e54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011e58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	f3bf 8f6f 	isb	sy
 8011e64:	e7bd      	b.n	8011de2 <xQueueGenericSend+0x8c>
            prvUnlockQueue( pxQueue );
 8011e66:	4620      	mov	r0, r4
 8011e68:	f7ff febd 	bl	8011be6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011e6c:	f000 fba6 	bl	80125bc <xTaskResumeAll>
            return errQUEUE_FULL;
 8011e70:	2000      	movs	r0, #0
 8011e72:	e78d      	b.n	8011d90 <xQueueGenericSend+0x3a>

08011e74 <prvInitialiseMutex>:
        if( pxNewQueue != NULL )
 8011e74:	b148      	cbz	r0, 8011e8a <prvInitialiseMutex+0x16>
    {
 8011e76:	b508      	push	{r3, lr}
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011e78:	2100      	movs	r1, #0
 8011e7a:	6081      	str	r1, [r0, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011e7c:	6001      	str	r1, [r0, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011e7e:	60c1      	str	r1, [r0, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011e80:	460b      	mov	r3, r1
 8011e82:	460a      	mov	r2, r1
 8011e84:	f7ff ff67 	bl	8011d56 <xQueueGenericSend>
    }
 8011e88:	bd08      	pop	{r3, pc}
 8011e8a:	4770      	bx	lr

08011e8c <xQueueCreateMutex>:
    {
 8011e8c:	b510      	push	{r4, lr}
 8011e8e:	4602      	mov	r2, r0
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011e90:	2100      	movs	r1, #0
 8011e92:	2001      	movs	r0, #1
 8011e94:	f7ff ff37 	bl	8011d06 <xQueueGenericCreate>
 8011e98:	4604      	mov	r4, r0
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011e9a:	f7ff ffeb 	bl	8011e74 <prvInitialiseMutex>
    }
 8011e9e:	4620      	mov	r0, r4
 8011ea0:	bd10      	pop	{r4, pc}

08011ea2 <xQueueGiveFromISR>:
{
 8011ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        __asm volatile
 8011ea4:	f3ef 8511 	mrs	r5, BASEPRI
 8011ea8:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8011eac:	b672      	cpsid	i
 8011eae:	f383 8811 	msr	BASEPRI, r3
 8011eb2:	f3bf 8f6f 	isb	sy
 8011eb6:	f3bf 8f4f 	dsb	sy
 8011eba:	b662      	cpsie	i
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ebc:	6b83      	ldr	r3, [r0, #56]	@ 0x38
        if( uxMessagesWaiting < pxQueue->uxLength )
 8011ebe:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	d91f      	bls.n	8011f04 <xQueueGiveFromISR+0x62>
 8011ec4:	4604      	mov	r4, r0
 8011ec6:	460e      	mov	r6, r1
            const int8_t cTxLock = pxQueue->cTxLock;
 8011ec8:	f890 7045 	ldrb.w	r7, [r0, #69]	@ 0x45
 8011ecc:	b27f      	sxtb	r7, r7
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011ece:	3301      	adds	r3, #1
 8011ed0:	6383      	str	r3, [r0, #56]	@ 0x38
            if( cTxLock == queueUNLOCKED )
 8011ed2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011ed6:	d10b      	bne.n	8011ef0 <xQueueGiveFromISR+0x4e>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011ed8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011eda:	b90b      	cbnz	r3, 8011ee0 <xQueueGiveFromISR+0x3e>
            xReturn = pdPASS;
 8011edc:	2001      	movs	r0, #1
 8011ede:	e012      	b.n	8011f06 <xQueueGiveFromISR+0x64>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011ee0:	3024      	adds	r0, #36	@ 0x24
 8011ee2:	f000 fc69 	bl	80127b8 <xTaskRemoveFromEventList>
 8011ee6:	b188      	cbz	r0, 8011f0c <xQueueGiveFromISR+0x6a>
                            if( pxHigherPriorityTaskWoken != NULL )
 8011ee8:	b196      	cbz	r6, 8011f10 <xQueueGiveFromISR+0x6e>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8011eea:	2001      	movs	r0, #1
 8011eec:	6030      	str	r0, [r6, #0]
 8011eee:	e00a      	b.n	8011f06 <xQueueGiveFromISR+0x64>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8011ef0:	f000 fab6 	bl	8012460 <uxTaskGetNumberOfTasks>
 8011ef4:	4287      	cmp	r7, r0
 8011ef6:	d20d      	bcs.n	8011f14 <xQueueGiveFromISR+0x72>
 8011ef8:	3701      	adds	r7, #1
 8011efa:	b27f      	sxtb	r7, r7
 8011efc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
            xReturn = pdPASS;
 8011f00:	2001      	movs	r0, #1
 8011f02:	e000      	b.n	8011f06 <xQueueGiveFromISR+0x64>
            xReturn = errQUEUE_FULL;
 8011f04:	2000      	movs	r0, #0
        __asm volatile
 8011f06:	f385 8811 	msr	BASEPRI, r5
}
 8011f0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            xReturn = pdPASS;
 8011f0c:	2001      	movs	r0, #1
 8011f0e:	e7fa      	b.n	8011f06 <xQueueGiveFromISR+0x64>
 8011f10:	2001      	movs	r0, #1
 8011f12:	e7f8      	b.n	8011f06 <xQueueGiveFromISR+0x64>
 8011f14:	2001      	movs	r0, #1
 8011f16:	e7f6      	b.n	8011f06 <xQueueGiveFromISR+0x64>

08011f18 <xQueueSemaphoreTake>:
{
 8011f18:	b570      	push	{r4, r5, r6, lr}
 8011f1a:	b084      	sub	sp, #16
 8011f1c:	4604      	mov	r4, r0
 8011f1e:	9101      	str	r1, [sp, #4]
        BaseType_t xInheritanceOccurred = pdFALSE;
 8011f20:	2600      	movs	r6, #0
    BaseType_t xEntryTimeSet = pdFALSE;
 8011f22:	4635      	mov	r5, r6
 8011f24:	e049      	b.n	8011fba <xQueueSemaphoreTake+0xa2>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011f26:	3b01      	subs	r3, #1
 8011f28:	63a3      	str	r3, [r4, #56]	@ 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f2a:	6823      	ldr	r3, [r4, #0]
 8011f2c:	b133      	cbz	r3, 8011f3c <xQueueSemaphoreTake+0x24>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f2e:	6923      	ldr	r3, [r4, #16]
 8011f30:	b943      	cbnz	r3, 8011f44 <xQueueSemaphoreTake+0x2c>
                taskEXIT_CRITICAL();
 8011f32:	f7ff fd69 	bl	8011a08 <vPortExitCritical>
                return pdPASS;
 8011f36:	2001      	movs	r0, #1
}
 8011f38:	b004      	add	sp, #16
 8011f3a:	bd70      	pop	{r4, r5, r6, pc}
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f3c:	f000 fe0a 	bl	8012b54 <pvTaskIncrementMutexHeldCount>
 8011f40:	60a0      	str	r0, [r4, #8]
 8011f42:	e7f4      	b.n	8011f2e <xQueueSemaphoreTake+0x16>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f44:	f104 0010 	add.w	r0, r4, #16
 8011f48:	f000 fc36 	bl	80127b8 <xTaskRemoveFromEventList>
 8011f4c:	2800      	cmp	r0, #0
 8011f4e:	d0f0      	beq.n	8011f32 <xQueueSemaphoreTake+0x1a>
                        queueYIELD_IF_USING_PREEMPTION();
 8011f50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8011f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011f58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8011f5c:	f3bf 8f4f 	dsb	sy
 8011f60:	f3bf 8f6f 	isb	sy
 8011f64:	e7e5      	b.n	8011f32 <xQueueSemaphoreTake+0x1a>
                    taskEXIT_CRITICAL();
 8011f66:	f7ff fd4f 	bl	8011a08 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8011f6a:	2000      	movs	r0, #0
 8011f6c:	e7e4      	b.n	8011f38 <xQueueSemaphoreTake+0x20>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8011f6e:	a802      	add	r0, sp, #8
 8011f70:	f000 fc90 	bl	8012894 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8011f74:	2501      	movs	r5, #1
 8011f76:	e02a      	b.n	8011fce <xQueueSemaphoreTake+0xb6>
        prvLockQueue( pxQueue );
 8011f78:	2300      	movs	r3, #0
 8011f7a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8011f7e:	e032      	b.n	8011fe6 <xQueueSemaphoreTake+0xce>
 8011f80:	2300      	movs	r3, #0
 8011f82:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8011f86:	e034      	b.n	8011ff2 <xQueueSemaphoreTake+0xda>
                        taskENTER_CRITICAL();
 8011f88:	f7ff fd2c 	bl	80119e4 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011f8c:	68a0      	ldr	r0, [r4, #8]
 8011f8e:	f000 fcd3 	bl	8012938 <xTaskPriorityInherit>
 8011f92:	4606      	mov	r6, r0
                        taskEXIT_CRITICAL();
 8011f94:	f7ff fd38 	bl	8011a08 <vPortExitCritical>
 8011f98:	e03b      	b.n	8012012 <xQueueSemaphoreTake+0xfa>
                prvUnlockQueue( pxQueue );
 8011f9a:	4620      	mov	r0, r4
 8011f9c:	f7ff fe23 	bl	8011be6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8011fa0:	f000 fb0c 	bl	80125bc <xTaskResumeAll>
 8011fa4:	e009      	b.n	8011fba <xQueueSemaphoreTake+0xa2>
            prvUnlockQueue( pxQueue );
 8011fa6:	4620      	mov	r0, r4
 8011fa8:	f7ff fe1d 	bl	8011be6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8011fac:	f000 fb06 	bl	80125bc <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fb0:	4620      	mov	r0, r4
 8011fb2:	f7ff fdd0 	bl	8011b56 <prvIsQueueEmpty>
 8011fb6:	2800      	cmp	r0, #0
 8011fb8:	d142      	bne.n	8012040 <xQueueSemaphoreTake+0x128>
        taskENTER_CRITICAL();
 8011fba:	f7ff fd13 	bl	80119e4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011fbe:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d1b0      	bne.n	8011f26 <xQueueSemaphoreTake+0xe>
                if( xTicksToWait == ( TickType_t ) 0 )
 8011fc4:	9b01      	ldr	r3, [sp, #4]
 8011fc6:	2b00      	cmp	r3, #0
 8011fc8:	d0cd      	beq.n	8011f66 <xQueueSemaphoreTake+0x4e>
                else if( xEntryTimeSet == pdFALSE )
 8011fca:	2d00      	cmp	r5, #0
 8011fcc:	d0cf      	beq.n	8011f6e <xQueueSemaphoreTake+0x56>
        taskEXIT_CRITICAL();
 8011fce:	f7ff fd1b 	bl	8011a08 <vPortExitCritical>
        vTaskSuspendAll();
 8011fd2:	f000 fa35 	bl	8012440 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8011fd6:	f7ff fd05 	bl	80119e4 <vPortEnterCritical>
 8011fda:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011fde:	b25b      	sxtb	r3, r3
 8011fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fe4:	d0c8      	beq.n	8011f78 <xQueueSemaphoreTake+0x60>
 8011fe6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011fea:	b25b      	sxtb	r3, r3
 8011fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ff0:	d0c6      	beq.n	8011f80 <xQueueSemaphoreTake+0x68>
 8011ff2:	f7ff fd09 	bl	8011a08 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ff6:	a901      	add	r1, sp, #4
 8011ff8:	a802      	add	r0, sp, #8
 8011ffa:	f000 fc55 	bl	80128a8 <xTaskCheckForTimeOut>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d1d1      	bne.n	8011fa6 <xQueueSemaphoreTake+0x8e>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012002:	4620      	mov	r0, r4
 8012004:	f7ff fda7 	bl	8011b56 <prvIsQueueEmpty>
 8012008:	2800      	cmp	r0, #0
 801200a:	d0c6      	beq.n	8011f9a <xQueueSemaphoreTake+0x82>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801200c:	6823      	ldr	r3, [r4, #0]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d0ba      	beq.n	8011f88 <xQueueSemaphoreTake+0x70>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012012:	9901      	ldr	r1, [sp, #4]
 8012014:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8012018:	f000 fbbe 	bl	8012798 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 801201c:	4620      	mov	r0, r4
 801201e:	f7ff fde2 	bl	8011be6 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8012022:	f000 facb 	bl	80125bc <xTaskResumeAll>
 8012026:	2800      	cmp	r0, #0
 8012028:	d1c7      	bne.n	8011fba <xQueueSemaphoreTake+0xa2>
                    portYIELD_WITHIN_API();
 801202a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 801202e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012032:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012036:	f3bf 8f4f 	dsb	sy
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	e7bc      	b.n	8011fba <xQueueSemaphoreTake+0xa2>
                    if( xInheritanceOccurred != pdFALSE )
 8012040:	b90e      	cbnz	r6, 8012046 <xQueueSemaphoreTake+0x12e>
                return errQUEUE_EMPTY;
 8012042:	2000      	movs	r0, #0
 8012044:	e778      	b.n	8011f38 <xQueueSemaphoreTake+0x20>
                        taskENTER_CRITICAL();
 8012046:	f7ff fccd 	bl	80119e4 <vPortEnterCritical>
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 801204a:	4620      	mov	r0, r4
 801204c:	f7ff fd6c 	bl	8011b28 <prvGetDisinheritPriorityAfterTimeout>
 8012050:	4601      	mov	r1, r0
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012052:	68a0      	ldr	r0, [r4, #8]
 8012054:	f000 fd28 	bl	8012aa8 <vTaskPriorityDisinheritAfterTimeout>
                        taskEXIT_CRITICAL();
 8012058:	f7ff fcd6 	bl	8011a08 <vPortExitCritical>
 801205c:	e7f1      	b.n	8012042 <xQueueSemaphoreTake+0x12a>

0801205e <vQueueDelete>:
{
 801205e:	b508      	push	{r3, lr}
        vPortFree( pxQueue );
 8012060:	f7ff fc1c 	bl	801189c <vPortFree>
}
 8012064:	bd08      	pop	{r3, pc}
	...

08012068 <prvResetNextTaskUnblockTime>:
#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012068:	4b07      	ldr	r3, [pc, #28]	@ (8012088 <prvResetNextTaskUnblockTime+0x20>)
 801206a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	b923      	cbnz	r3, 801207a <prvResetNextTaskUnblockTime+0x12>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8012070:	4b05      	ldr	r3, [pc, #20]	@ (8012088 <prvResetNextTaskUnblockTime+0x20>)
 8012072:	f04f 32ff 	mov.w	r2, #4294967295
 8012076:	62da      	str	r2, [r3, #44]	@ 0x2c
 8012078:	4770      	bx	lr
    {
        /* The new current delayed list is not empty, get the value of
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 801207a:	4b03      	ldr	r3, [pc, #12]	@ (8012088 <prvResetNextTaskUnblockTime+0x20>)
 801207c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801207e:	68d2      	ldr	r2, [r2, #12]
 8012080:	6812      	ldr	r2, [r2, #0]
 8012082:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
}
 8012084:	4770      	bx	lr
 8012086:	bf00      	nop
 8012088:	20003b8c 	.word	0x20003b8c

0801208c <prvDeleteTCB>:
    {
 801208c:	b510      	push	{r4, lr}
 801208e:	4604      	mov	r4, r0
            vPortFreeStack( pxTCB->pxStack );
 8012090:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012092:	f7ff fc03 	bl	801189c <vPortFree>
            vPortFree( pxTCB );
 8012096:	4620      	mov	r0, r4
 8012098:	f7ff fc00 	bl	801189c <vPortFree>
    }
 801209c:	bd10      	pop	{r4, pc}

0801209e <prvInitialiseNewTask>:
{
 801209e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80120a2:	4680      	mov	r8, r0
 80120a4:	460d      	mov	r5, r1
 80120a6:	4617      	mov	r7, r2
 80120a8:	4699      	mov	r9, r3
 80120aa:	9e08      	ldr	r6, [sp, #32]
 80120ac:	f8dd a024 	ldr.w	sl, [sp, #36]	@ 0x24
 80120b0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80120b2:	0092      	lsls	r2, r2, #2
 80120b4:	21a5      	movs	r1, #165	@ 0xa5
 80120b6:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80120b8:	f002 fde4 	bl	8014c84 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80120bc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80120be:	f06f 4240 	mvn.w	r2, #3221225472	@ 0xc0000000
 80120c2:	443a      	add	r2, r7
 80120c4:	eb03 0782 	add.w	r7, r3, r2, lsl #2
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80120c8:	f027 0707 	bic.w	r7, r7, #7
    if( pcName != NULL )
 80120cc:	b18d      	cbz	r5, 80120f2 <prvInitialiseNewTask+0x54>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120ce:	f04f 0c00 	mov.w	ip, #0
 80120d2:	f1bc 0f0f 	cmp.w	ip, #15
 80120d6:	d809      	bhi.n	80120ec <prvInitialiseNewTask+0x4e>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80120d8:	f815 300c 	ldrb.w	r3, [r5, ip]
 80120dc:	eb04 020c 	add.w	r2, r4, ip
 80120e0:	f882 3034 	strb.w	r3, [r2, #52]	@ 0x34
            if( pcName[ x ] == ( char ) 0x00 )
 80120e4:	b113      	cbz	r3, 80120ec <prvInitialiseNewTask+0x4e>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80120e6:	f10c 0c01 	add.w	ip, ip, #1
 80120ea:	e7f2      	b.n	80120d2 <prvInitialiseNewTask+0x34>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80120ec:	2300      	movs	r3, #0
 80120ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80120f2:	2e04      	cmp	r6, #4
 80120f4:	d900      	bls.n	80120f8 <prvInitialiseNewTask+0x5a>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80120f6:	2604      	movs	r6, #4
    pxNewTCB->uxPriority = uxPriority;
 80120f8:	62e6      	str	r6, [r4, #44]	@ 0x2c
        pxNewTCB->uxBasePriority = uxPriority;
 80120fa:	6466      	str	r6, [r4, #68]	@ 0x44
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80120fc:	1d20      	adds	r0, r4, #4
 80120fe:	f7ff fbe4 	bl	80118ca <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012102:	f104 0018 	add.w	r0, r4, #24
 8012106:	f7ff fbe0 	bl	80118ca <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801210a:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801210c:	f1c6 0605 	rsb	r6, r6, #5
 8012110:	61a6      	str	r6, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012112:	6264      	str	r4, [r4, #36]	@ 0x24
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012114:	464a      	mov	r2, r9
 8012116:	4641      	mov	r1, r8
 8012118:	4638      	mov	r0, r7
 801211a:	f7ff fc35 	bl	8011988 <pxPortInitialiseStack>
 801211e:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8012120:	f1ba 0f00 	cmp.w	sl, #0
 8012124:	d001      	beq.n	801212a <prvInitialiseNewTask+0x8c>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012126:	f8ca 4000 	str.w	r4, [sl]
}
 801212a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012130 <prvInitialiseTaskLists>:
{
 8012130:	b570      	push	{r4, r5, r6, lr}
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012132:	2400      	movs	r4, #0
 8012134:	e007      	b.n	8012146 <prvInitialiseTaskLists+0x16>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012136:	eb04 0284 	add.w	r2, r4, r4, lsl #2
 801213a:	0093      	lsls	r3, r2, #2
 801213c:	4810      	ldr	r0, [pc, #64]	@ (8012180 <prvInitialiseTaskLists+0x50>)
 801213e:	4418      	add	r0, r3
 8012140:	f7ff fbb8 	bl	80118b4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012144:	3401      	adds	r4, #1
 8012146:	2c04      	cmp	r4, #4
 8012148:	d9f5      	bls.n	8012136 <prvInitialiseTaskLists+0x6>
    vListInitialise( &xDelayedTaskList1 );
 801214a:	4c0e      	ldr	r4, [pc, #56]	@ (8012184 <prvInitialiseTaskLists+0x54>)
 801214c:	f104 0694 	add.w	r6, r4, #148	@ 0x94
 8012150:	4630      	mov	r0, r6
 8012152:	f7ff fbaf 	bl	80118b4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8012156:	f104 05a8 	add.w	r5, r4, #168	@ 0xa8
 801215a:	4628      	mov	r0, r5
 801215c:	f7ff fbaa 	bl	80118b4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8012160:	f104 0014 	add.w	r0, r4, #20
 8012164:	f7ff fba6 	bl	80118b4 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 8012168:	f104 00bc 	add.w	r0, r4, #188	@ 0xbc
 801216c:	f7ff fba2 	bl	80118b4 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 8012170:	4620      	mov	r0, r4
 8012172:	f7ff fb9f 	bl	80118b4 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8012176:	62a6      	str	r6, [r4, #40]	@ 0x28
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012178:	f8c4 50d0 	str.w	r5, [r4, #208]	@ 0xd0
}
 801217c:	bd70      	pop	{r4, r5, r6, pc}
 801217e:	bf00      	nop
 8012180:	20003bbc 	.word	0x20003bbc
 8012184:	20003b8c 	.word	0x20003b8c

08012188 <prvAddNewTaskToReadyList>:
{
 8012188:	b538      	push	{r3, r4, r5, lr}
 801218a:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 801218c:	f7ff fc2a 	bl	80119e4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8012190:	4b2f      	ldr	r3, [pc, #188]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 8012192:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8012196:	3201      	adds	r2, #1
 8012198:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
        if( pxCurrentTCB == NULL )
 801219c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121a0:	b173      	cbz	r3, 80121c0 <prvAddNewTaskToReadyList+0x38>
            if( xSchedulerRunning == pdFALSE )
 80121a2:	4b2b      	ldr	r3, [pc, #172]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 80121a4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80121a8:	b98b      	cbnz	r3, 80121ce <prvAddNewTaskToReadyList+0x46>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80121aa:	4b29      	ldr	r3, [pc, #164]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 80121ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80121b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80121b2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d80a      	bhi.n	80121ce <prvAddNewTaskToReadyList+0x46>
                    pxCurrentTCB = pxNewTCB;
 80121b8:	4b25      	ldr	r3, [pc, #148]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 80121ba:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
 80121be:	e006      	b.n	80121ce <prvAddNewTaskToReadyList+0x46>
            pxCurrentTCB = pxNewTCB;
 80121c0:	4b23      	ldr	r3, [pc, #140]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 80121c2:	f8c3 40d8 	str.w	r4, [r3, #216]	@ 0xd8
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80121c6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80121ca:	2b01      	cmp	r3, #1
 80121cc:	d03d      	beq.n	801224a <prvAddNewTaskToReadyList+0xc2>
        uxTaskNumber++;
 80121ce:	4d20      	ldr	r5, [pc, #128]	@ (8012250 <prvAddNewTaskToReadyList+0xc8>)
 80121d0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80121d4:	3301      	adds	r3, #1
 80121d6:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
        prvAddTaskToReadyList( pxNewTCB );
 80121da:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80121dc:	2201      	movs	r2, #1
 80121de:	409a      	lsls	r2, r3
 80121e0:	f8d5 10e4 	ldr.w	r1, [r5, #228]	@ 0xe4
 80121e4:	430a      	orrs	r2, r1
 80121e6:	f8c5 20e4 	str.w	r2, [r5, #228]	@ 0xe4
 80121ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80121ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80121f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80121f4:	60a3      	str	r3, [r4, #8]
 80121f6:	6899      	ldr	r1, [r3, #8]
 80121f8:	60e1      	str	r1, [r4, #12]
 80121fa:	1d22      	adds	r2, r4, #4
 80121fc:	604a      	str	r2, [r1, #4]
 80121fe:	609a      	str	r2, [r3, #8]
 8012200:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012202:	f105 0230 	add.w	r2, r5, #48	@ 0x30
 8012206:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801220a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801220e:	6162      	str	r2, [r4, #20]
 8012210:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8012214:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012216:	3201      	adds	r2, #1
 8012218:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 801221c:	631a      	str	r2, [r3, #48]	@ 0x30
    taskEXIT_CRITICAL();
 801221e:	f7ff fbf3 	bl	8011a08 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8012222:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
 8012226:	b17b      	cbz	r3, 8012248 <prvAddNewTaskToReadyList+0xc0>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012228:	f8d5 30d8 	ldr.w	r3, [r5, #216]	@ 0xd8
 801222c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801222e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012230:	429a      	cmp	r2, r3
 8012232:	d209      	bcs.n	8012248 <prvAddNewTaskToReadyList+0xc0>
            taskYIELD_IF_USING_PREEMPTION();
 8012234:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801223c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012240:	f3bf 8f4f 	dsb	sy
 8012244:	f3bf 8f6f 	isb	sy
}
 8012248:	bd38      	pop	{r3, r4, r5, pc}
                prvInitialiseTaskLists();
 801224a:	f7ff ff71 	bl	8012130 <prvInitialiseTaskLists>
 801224e:	e7be      	b.n	80121ce <prvAddNewTaskToReadyList+0x46>
 8012250:	20003b8c 	.word	0x20003b8c

08012254 <prvCheckTasksWaitingTermination>:
{
 8012254:	b538      	push	{r3, r4, r5, lr}
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012256:	e017      	b.n	8012288 <prvCheckTasksWaitingTermination+0x34>
            taskENTER_CRITICAL();
 8012258:	f7ff fbc4 	bl	80119e4 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801225c:	4c0d      	ldr	r4, [pc, #52]	@ (8012294 <prvCheckTasksWaitingTermination+0x40>)
 801225e:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
 8012262:	68dd      	ldr	r5, [r3, #12]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012264:	1d28      	adds	r0, r5, #4
 8012266:	f7ff fb4c 	bl	8011902 <uxListRemove>
                --uxCurrentNumberOfTasks;
 801226a:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 801226e:	3b01      	subs	r3, #1
 8012270:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
                --uxDeletedTasksWaitingCleanUp;
 8012274:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
 8012278:	3b01      	subs	r3, #1
 801227a:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
            taskEXIT_CRITICAL();
 801227e:	f7ff fbc3 	bl	8011a08 <vPortExitCritical>
            prvDeleteTCB( pxTCB );
 8012282:	4628      	mov	r0, r5
 8012284:	f7ff ff02 	bl	801208c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012288:	4b02      	ldr	r3, [pc, #8]	@ (8012294 <prvCheckTasksWaitingTermination+0x40>)
 801228a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1e2      	bne.n	8012258 <prvCheckTasksWaitingTermination+0x4>
}
 8012292:	bd38      	pop	{r3, r4, r5, pc}
 8012294:	20003b8c 	.word	0x20003b8c

08012298 <prvIdleTask>:
{
 8012298:	b508      	push	{r3, lr}
        prvCheckTasksWaitingTermination();
 801229a:	f7ff ffdb 	bl	8012254 <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801229e:	4b07      	ldr	r3, [pc, #28]	@ (80122bc <prvIdleTask+0x24>)
 80122a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80122a2:	2b01      	cmp	r3, #1
 80122a4:	d9f9      	bls.n	801229a <prvIdleTask+0x2>
                taskYIELD();
 80122a6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80122aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80122ae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80122b2:	f3bf 8f4f 	dsb	sy
 80122b6:	f3bf 8f6f 	isb	sy
 80122ba:	e7ee      	b.n	801229a <prvIdleTask+0x2>
 80122bc:	20003b8c 	.word	0x20003b8c

080122c0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80122c0:	b570      	push	{r4, r5, r6, lr}
 80122c2:	4604      	mov	r4, r0
 80122c4:	460d      	mov	r5, r1
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80122c6:	4b29      	ldr	r3, [pc, #164]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 80122c8:	f8d3 60ec 	ldr.w	r6, [r3, #236]	@ 0xec
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80122cc:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
 80122d0:	3004      	adds	r0, #4
 80122d2:	f7ff fb16 	bl	8011902 <uxListRemove>
 80122d6:	b958      	cbnz	r0, 80122f0 <prvAddCurrentTaskToDelayedList+0x30>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80122d8:	4b24      	ldr	r3, [pc, #144]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 80122da:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80122de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80122e0:	2101      	movs	r1, #1
 80122e2:	4091      	lsls	r1, r2
 80122e4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80122e8:	ea22 0201 	bic.w	r2, r2, r1
 80122ec:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80122f0:	f1b4 3fff 	cmp.w	r4, #4294967295
 80122f4:	bf14      	ite	ne
 80122f6:	2300      	movne	r3, #0
 80122f8:	2301      	moveq	r3, #1
 80122fa:	2d00      	cmp	r5, #0
 80122fc:	bf08      	it	eq
 80122fe:	2300      	moveq	r3, #0
 8012300:	b1bb      	cbz	r3, 8012332 <prvAddCurrentTaskToDelayedList+0x72>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012302:	4b1a      	ldr	r3, [pc, #104]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 8012304:	685a      	ldr	r2, [r3, #4]
 8012306:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 801230a:	608a      	str	r2, [r1, #8]
 801230c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8012310:	6890      	ldr	r0, [r2, #8]
 8012312:	60c8      	str	r0, [r1, #12]
 8012314:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8012318:	3104      	adds	r1, #4
 801231a:	6041      	str	r1, [r0, #4]
 801231c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 8012320:	3104      	adds	r1, #4
 8012322:	6091      	str	r1, [r2, #8]
 8012324:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012328:	6153      	str	r3, [r2, #20]
 801232a:	681a      	ldr	r2, [r3, #0]
 801232c:	3201      	adds	r2, #1
 801232e:	601a      	str	r2, [r3, #0]

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8012330:	bd70      	pop	{r4, r5, r6, pc}
            xTimeToWake = xConstTickCount + xTicksToWait;
 8012332:	4434      	add	r4, r6
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012334:	4b0d      	ldr	r3, [pc, #52]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 8012336:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 801233a:	605c      	str	r4, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 801233c:	42a6      	cmp	r6, r4
 801233e:	d908      	bls.n	8012352 <prvAddCurrentTaskToDelayedList+0x92>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012340:	4b0a      	ldr	r3, [pc, #40]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 8012342:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
 8012346:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 801234a:	3104      	adds	r1, #4
 801234c:	f7ff fac0 	bl	80118d0 <vListInsert>
 8012350:	e7ee      	b.n	8012330 <prvAddCurrentTaskToDelayedList+0x70>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012352:	4d06      	ldr	r5, [pc, #24]	@ (801236c <prvAddCurrentTaskToDelayedList+0xac>)
 8012354:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8012356:	f8d5 10d8 	ldr.w	r1, [r5, #216]	@ 0xd8
 801235a:	3104      	adds	r1, #4
 801235c:	f7ff fab8 	bl	80118d0 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8012360:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8012362:	42a3      	cmp	r3, r4
 8012364:	d9e4      	bls.n	8012330 <prvAddCurrentTaskToDelayedList+0x70>
                    xNextTaskUnblockTime = xTimeToWake;
 8012366:	62ec      	str	r4, [r5, #44]	@ 0x2c
}
 8012368:	e7e2      	b.n	8012330 <prvAddCurrentTaskToDelayedList+0x70>
 801236a:	bf00      	nop
 801236c:	20003b8c 	.word	0x20003b8c

08012370 <xTaskCreate>:
    {
 8012370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012374:	b085      	sub	sp, #20
 8012376:	4607      	mov	r7, r0
 8012378:	4688      	mov	r8, r1
 801237a:	4614      	mov	r4, r2
 801237c:	461e      	mov	r6, r3
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801237e:	0090      	lsls	r0, r2, #2
 8012380:	f7ff fa80 	bl	8011884 <pvPortMalloc>
            if( pxStack != NULL )
 8012384:	b318      	cbz	r0, 80123ce <xTaskCreate+0x5e>
 8012386:	4681      	mov	r9, r0
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012388:	2058      	movs	r0, #88	@ 0x58
 801238a:	f7ff fa7b 	bl	8011884 <pvPortMalloc>
                if( pxNewTCB != NULL )
 801238e:	4605      	mov	r5, r0
 8012390:	b1b8      	cbz	r0, 80123c2 <xTaskCreate+0x52>
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8012392:	2258      	movs	r2, #88	@ 0x58
 8012394:	2100      	movs	r1, #0
 8012396:	f002 fc75 	bl	8014c84 <memset>
                    pxNewTCB->pxStack = pxStack;
 801239a:	f8c5 9030 	str.w	r9, [r5, #48]	@ 0x30
            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801239e:	2300      	movs	r3, #0
 80123a0:	9303      	str	r3, [sp, #12]
 80123a2:	9502      	str	r5, [sp, #8]
 80123a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80123a6:	9301      	str	r3, [sp, #4]
 80123a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	4633      	mov	r3, r6
 80123ae:	4622      	mov	r2, r4
 80123b0:	4641      	mov	r1, r8
 80123b2:	4638      	mov	r0, r7
 80123b4:	f7ff fe73 	bl	801209e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80123b8:	4628      	mov	r0, r5
 80123ba:	f7ff fee5 	bl	8012188 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80123be:	2001      	movs	r0, #1
 80123c0:	e007      	b.n	80123d2 <xTaskCreate+0x62>
                    vPortFreeStack( pxStack );
 80123c2:	4648      	mov	r0, r9
 80123c4:	f7ff fa6a 	bl	801189c <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80123c8:	f04f 30ff 	mov.w	r0, #4294967295
 80123cc:	e001      	b.n	80123d2 <xTaskCreate+0x62>
 80123ce:	f04f 30ff 	mov.w	r0, #4294967295
    }
 80123d2:	b005      	add	sp, #20
 80123d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080123d8 <vTaskStartScheduler>:
{
 80123d8:	b500      	push	{lr}
 80123da:	b083      	sub	sp, #12
        xReturn = xTaskCreate( prvIdleTask,
 80123dc:	4b13      	ldr	r3, [pc, #76]	@ (801242c <vTaskStartScheduler+0x54>)
 80123de:	9301      	str	r3, [sp, #4]
 80123e0:	2300      	movs	r3, #0
 80123e2:	9300      	str	r3, [sp, #0]
 80123e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80123e8:	4911      	ldr	r1, [pc, #68]	@ (8012430 <vTaskStartScheduler+0x58>)
 80123ea:	4812      	ldr	r0, [pc, #72]	@ (8012434 <vTaskStartScheduler+0x5c>)
 80123ec:	f7ff ffc0 	bl	8012370 <xTaskCreate>
    if( xReturn == pdPASS )
 80123f0:	2801      	cmp	r0, #1
 80123f2:	d004      	beq.n	80123fe <vTaskStartScheduler+0x26>
    ( void ) uxTopUsedPriority;
 80123f4:	4b10      	ldr	r3, [pc, #64]	@ (8012438 <vTaskStartScheduler+0x60>)
 80123f6:	681b      	ldr	r3, [r3, #0]
}
 80123f8:	b003      	add	sp, #12
 80123fa:	f85d fb04 	ldr.w	pc, [sp], #4
        __asm volatile
 80123fe:	f04f 03bf 	mov.w	r3, #191	@ 0xbf
 8012402:	b672      	cpsid	i
 8012404:	f383 8811 	msr	BASEPRI, r3
 8012408:	f3bf 8f6f 	isb	sy
 801240c:	f3bf 8f4f 	dsb	sy
 8012410:	b662      	cpsie	i
        xNextTaskUnblockTime = portMAX_DELAY;
 8012412:	4b0a      	ldr	r3, [pc, #40]	@ (801243c <vTaskStartScheduler+0x64>)
 8012414:	f04f 32ff 	mov.w	r2, #4294967295
 8012418:	62da      	str	r2, [r3, #44]	@ 0x2c
        xSchedulerRunning = pdTRUE;
 801241a:	2201      	movs	r2, #1
 801241c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012420:	2200      	movs	r2, #0
 8012422:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
        xPortStartScheduler();
 8012426:	f7ff fb59 	bl	8011adc <xPortStartScheduler>
 801242a:	e7e3      	b.n	80123f4 <vTaskStartScheduler+0x1c>
 801242c:	20003c84 	.word	0x20003c84
 8012430:	0801a96c 	.word	0x0801a96c
 8012434:	08012299 	.word	0x08012299
 8012438:	0801a03c 	.word	0x0801a03c
 801243c:	20003b8c 	.word	0x20003b8c

08012440 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8012440:	4a03      	ldr	r2, [pc, #12]	@ (8012450 <vTaskSuspendAll+0x10>)
 8012442:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
 8012446:	3301      	adds	r3, #1
 8012448:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	20003b8c 	.word	0x20003b8c

08012454 <xTaskGetTickCount>:
        xTicks = xTickCount;
 8012454:	4b01      	ldr	r3, [pc, #4]	@ (801245c <xTaskGetTickCount+0x8>)
 8012456:	f8d3 00ec 	ldr.w	r0, [r3, #236]	@ 0xec
}
 801245a:	4770      	bx	lr
 801245c:	20003b8c 	.word	0x20003b8c

08012460 <uxTaskGetNumberOfTasks>:
    return uxCurrentNumberOfTasks;
 8012460:	4b01      	ldr	r3, [pc, #4]	@ (8012468 <uxTaskGetNumberOfTasks+0x8>)
 8012462:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
}
 8012466:	4770      	bx	lr
 8012468:	20003b8c 	.word	0x20003b8c

0801246c <xTaskIncrementTick>:
{
 801246c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801246e:	4b52      	ldr	r3, [pc, #328]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 8012470:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012474:	2b00      	cmp	r3, #0
 8012476:	f040 8096 	bne.w	80125a6 <xTaskIncrementTick+0x13a>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801247a:	4b4f      	ldr	r3, [pc, #316]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 801247c:	f8d3 50ec 	ldr.w	r5, [r3, #236]	@ 0xec
 8012480:	3501      	adds	r5, #1
        xTickCount = xConstTickCount;
 8012482:	f8c3 50ec 	str.w	r5, [r3, #236]	@ 0xec
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012486:	b1bd      	cbz	r5, 80124b8 <xTaskIncrementTick+0x4c>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8012488:	4b4b      	ldr	r3, [pc, #300]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 801248a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801248c:	42ab      	cmp	r3, r5
 801248e:	d921      	bls.n	80124d4 <xTaskIncrementTick+0x68>
    BaseType_t xSwitchRequired = pdFALSE;
 8012490:	2000      	movs	r0, #0
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012492:	4a49      	ldr	r2, [pc, #292]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 8012494:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
 8012498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801249a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801249e:	0099      	lsls	r1, r3, #2
 80124a0:	440a      	add	r2, r1
 80124a2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80124a4:	2b01      	cmp	r3, #1
 80124a6:	d900      	bls.n	80124aa <xTaskIncrementTick+0x3e>
                xSwitchRequired = pdTRUE;
 80124a8:	2001      	movs	r0, #1
            if( xYieldPending != pdFALSE )
 80124aa:	4b43      	ldr	r3, [pc, #268]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 80124ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d07f      	beq.n	80125b4 <xTaskIncrementTick+0x148>
                xSwitchRequired = pdTRUE;
 80124b4:	2001      	movs	r0, #1
    return xSwitchRequired;
 80124b6:	e07d      	b.n	80125b4 <xTaskIncrementTick+0x148>
            taskSWITCH_DELAYED_LISTS();
 80124b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80124ba:	f8d3 10d0 	ldr.w	r1, [r3, #208]	@ 0xd0
 80124be:	6299      	str	r1, [r3, #40]	@ 0x28
 80124c0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
 80124c4:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 80124c8:	3201      	adds	r2, #1
 80124ca:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
 80124ce:	f7ff fdcb 	bl	8012068 <prvResetNextTaskUnblockTime>
 80124d2:	e7d9      	b.n	8012488 <xTaskIncrementTick+0x1c>
    BaseType_t xSwitchRequired = pdFALSE;
 80124d4:	2000      	movs	r0, #0
 80124d6:	e03b      	b.n	8012550 <xTaskIncrementTick+0xe4>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124d8:	4b37      	ldr	r3, [pc, #220]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 80124da:	f04f 32ff 	mov.w	r2, #4294967295
 80124de:	62da      	str	r2, [r3, #44]	@ 0x2c
                    break;
 80124e0:	e7d7      	b.n	8012492 <xTaskIncrementTick+0x26>
                        xNextTaskUnblockTime = xItemValue;
 80124e2:	4b35      	ldr	r3, [pc, #212]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 80124e4:	62da      	str	r2, [r3, #44]	@ 0x2c
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80124e6:	e7d4      	b.n	8012492 <xTaskIncrementTick+0x26>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80124e8:	68d9      	ldr	r1, [r3, #12]
 80124ea:	6051      	str	r1, [r2, #4]
 80124ec:	e046      	b.n	801257c <xTaskIncrementTick+0x110>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80124ee:	2100      	movs	r1, #0
 80124f0:	6299      	str	r1, [r3, #40]	@ 0x28
 80124f2:	6811      	ldr	r1, [r2, #0]
 80124f4:	3901      	subs	r1, #1
 80124f6:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 80124f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124fa:	2401      	movs	r4, #1
 80124fc:	4094      	lsls	r4, r2
 80124fe:	492e      	ldr	r1, [pc, #184]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 8012500:	f8d1 70e4 	ldr.w	r7, [r1, #228]	@ 0xe4
 8012504:	433c      	orrs	r4, r7
 8012506:	f8c1 40e4 	str.w	r4, [r1, #228]	@ 0xe4
 801250a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801250e:	0094      	lsls	r4, r2, #2
 8012510:	440c      	add	r4, r1
 8012512:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8012514:	609a      	str	r2, [r3, #8]
 8012516:	6894      	ldr	r4, [r2, #8]
 8012518:	60dc      	str	r4, [r3, #12]
 801251a:	6066      	str	r6, [r4, #4]
 801251c:	6096      	str	r6, [r2, #8]
 801251e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012520:	f101 0430 	add.w	r4, r1, #48	@ 0x30
 8012524:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
 8012528:	ea4f 068c 	mov.w	r6, ip, lsl #2
 801252c:	4434      	add	r4, r6
 801252e:	615c      	str	r4, [r3, #20]
 8012530:	4666      	mov	r6, ip
 8012532:	00b4      	lsls	r4, r6, #2
 8012534:	440c      	add	r4, r1
 8012536:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8012538:	3601      	adds	r6, #1
 801253a:	4662      	mov	r2, ip
 801253c:	0094      	lsls	r4, r2, #2
 801253e:	440c      	add	r4, r1
 8012540:	6326      	str	r6, [r4, #48]	@ 0x30
                        if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012544:	f8d1 30d8 	ldr.w	r3, [r1, #216]	@ 0xd8
 8012548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801254a:	429a      	cmp	r2, r3
 801254c:	d300      	bcc.n	8012550 <xTaskIncrementTick+0xe4>
                            xSwitchRequired = pdTRUE;
 801254e:	2001      	movs	r0, #1
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012550:	4b19      	ldr	r3, [pc, #100]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 8012552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d0be      	beq.n	80124d8 <xTaskIncrementTick+0x6c>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801255a:	4b17      	ldr	r3, [pc, #92]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 801255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012562:	685a      	ldr	r2, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8012564:	4295      	cmp	r5, r2
 8012566:	d3bc      	bcc.n	80124e2 <xTaskIncrementTick+0x76>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012568:	695a      	ldr	r2, [r3, #20]
 801256a:	689c      	ldr	r4, [r3, #8]
 801256c:	68d9      	ldr	r1, [r3, #12]
 801256e:	60a1      	str	r1, [r4, #8]
 8012570:	689c      	ldr	r4, [r3, #8]
 8012572:	604c      	str	r4, [r1, #4]
 8012574:	6851      	ldr	r1, [r2, #4]
 8012576:	1d1e      	adds	r6, r3, #4
 8012578:	42b1      	cmp	r1, r6
 801257a:	d0b5      	beq.n	80124e8 <xTaskIncrementTick+0x7c>
 801257c:	2100      	movs	r1, #0
 801257e:	6159      	str	r1, [r3, #20]
 8012580:	6811      	ldr	r1, [r2, #0]
 8012582:	3901      	subs	r1, #1
 8012584:	6011      	str	r1, [r2, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012586:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012588:	2a00      	cmp	r2, #0
 801258a:	d0b5      	beq.n	80124f8 <xTaskIncrementTick+0x8c>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 801258c:	69dc      	ldr	r4, [r3, #28]
 801258e:	6a19      	ldr	r1, [r3, #32]
 8012590:	60a1      	str	r1, [r4, #8]
 8012592:	69dc      	ldr	r4, [r3, #28]
 8012594:	604c      	str	r4, [r1, #4]
 8012596:	6854      	ldr	r4, [r2, #4]
 8012598:	f103 0118 	add.w	r1, r3, #24
 801259c:	428c      	cmp	r4, r1
 801259e:	d1a6      	bne.n	80124ee <xTaskIncrementTick+0x82>
 80125a0:	6a19      	ldr	r1, [r3, #32]
 80125a2:	6051      	str	r1, [r2, #4]
 80125a4:	e7a3      	b.n	80124ee <xTaskIncrementTick+0x82>
        ++xPendedTicks;
 80125a6:	4a04      	ldr	r2, [pc, #16]	@ (80125b8 <xTaskIncrementTick+0x14c>)
 80125a8:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
 80125ac:	3301      	adds	r3, #1
 80125ae:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
    BaseType_t xSwitchRequired = pdFALSE;
 80125b2:	2000      	movs	r0, #0
}
 80125b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80125b6:	bf00      	nop
 80125b8:	20003b8c 	.word	0x20003b8c

080125bc <xTaskResumeAll>:
{
 80125bc:	b538      	push	{r3, r4, r5, lr}
    taskENTER_CRITICAL();
 80125be:	f7ff fa11 	bl	80119e4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80125c2:	4b4b      	ldr	r3, [pc, #300]	@ (80126f0 <xTaskResumeAll+0x134>)
 80125c4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 80125c8:	3a01      	subs	r2, #1
 80125ca:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80125ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	f040 8087 	bne.w	80126e6 <xTaskResumeAll+0x12a>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80125d8:	4b45      	ldr	r3, [pc, #276]	@ (80126f0 <xTaskResumeAll+0x134>)
 80125da:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80125de:	b93b      	cbnz	r3, 80125f0 <xTaskResumeAll+0x34>
    BaseType_t xAlreadyYielded = pdFALSE;
 80125e0:	2400      	movs	r4, #0
 80125e2:	e081      	b.n	80126e8 <xTaskResumeAll+0x12c>
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80125e4:	6a19      	ldr	r1, [r3, #32]
 80125e6:	6051      	str	r1, [r2, #4]
 80125e8:	e015      	b.n	8012616 <xTaskResumeAll+0x5a>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80125ea:	68d9      	ldr	r1, [r3, #12]
 80125ec:	6051      	str	r1, [r2, #4]
 80125ee:	e021      	b.n	8012634 <xTaskResumeAll+0x78>
    TCB_t * pxTCB = NULL;
 80125f0:	2300      	movs	r3, #0
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80125f2:	4a3f      	ldr	r2, [pc, #252]	@ (80126f0 <xTaskResumeAll+0x134>)
 80125f4:	6952      	ldr	r2, [r2, #20]
 80125f6:	2a00      	cmp	r2, #0
 80125f8:	d04e      	beq.n	8012698 <xTaskResumeAll+0xdc>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80125fa:	4b3d      	ldr	r3, [pc, #244]	@ (80126f0 <xTaskResumeAll+0x134>)
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8012600:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8012602:	69d8      	ldr	r0, [r3, #28]
 8012604:	6a19      	ldr	r1, [r3, #32]
 8012606:	6081      	str	r1, [r0, #8]
 8012608:	69d8      	ldr	r0, [r3, #28]
 801260a:	6048      	str	r0, [r1, #4]
 801260c:	6850      	ldr	r0, [r2, #4]
 801260e:	f103 0118 	add.w	r1, r3, #24
 8012612:	4288      	cmp	r0, r1
 8012614:	d0e6      	beq.n	80125e4 <xTaskResumeAll+0x28>
 8012616:	2100      	movs	r1, #0
 8012618:	6299      	str	r1, [r3, #40]	@ 0x28
 801261a:	6811      	ldr	r1, [r2, #0]
 801261c:	3901      	subs	r1, #1
 801261e:	6011      	str	r1, [r2, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8012620:	695a      	ldr	r2, [r3, #20]
 8012622:	6898      	ldr	r0, [r3, #8]
 8012624:	68d9      	ldr	r1, [r3, #12]
 8012626:	6081      	str	r1, [r0, #8]
 8012628:	6898      	ldr	r0, [r3, #8]
 801262a:	6048      	str	r0, [r1, #4]
 801262c:	6851      	ldr	r1, [r2, #4]
 801262e:	1d1c      	adds	r4, r3, #4
 8012630:	42a1      	cmp	r1, r4
 8012632:	d0da      	beq.n	80125ea <xTaskResumeAll+0x2e>
 8012634:	2100      	movs	r1, #0
 8012636:	6159      	str	r1, [r3, #20]
 8012638:	6811      	ldr	r1, [r2, #0]
 801263a:	3901      	subs	r1, #1
 801263c:	6011      	str	r1, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 801263e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012640:	2001      	movs	r0, #1
 8012642:	4090      	lsls	r0, r2
 8012644:	492a      	ldr	r1, [pc, #168]	@ (80126f0 <xTaskResumeAll+0x134>)
 8012646:	f8d1 50e4 	ldr.w	r5, [r1, #228]	@ 0xe4
 801264a:	4328      	orrs	r0, r5
 801264c:	f8c1 00e4 	str.w	r0, [r1, #228]	@ 0xe4
 8012650:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012654:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012658:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 801265a:	609a      	str	r2, [r3, #8]
 801265c:	6890      	ldr	r0, [r2, #8]
 801265e:	60d8      	str	r0, [r3, #12]
 8012660:	6044      	str	r4, [r0, #4]
 8012662:	6094      	str	r4, [r2, #8]
 8012664:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012666:	f101 0030 	add.w	r0, r1, #48	@ 0x30
 801266a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 801266e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8012672:	6158      	str	r0, [r3, #20]
 8012674:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8012678:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801267a:	3001      	adds	r0, #1
 801267c:	eb01 0284 	add.w	r2, r1, r4, lsl #2
 8012680:	6310      	str	r0, [r2, #48]	@ 0x30
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012682:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8012684:	f8d1 20d8 	ldr.w	r2, [r1, #216]	@ 0xd8
 8012688:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801268a:	4290      	cmp	r0, r2
 801268c:	d3b1      	bcc.n	80125f2 <xTaskResumeAll+0x36>
                        xYieldPending = pdTRUE;
 801268e:	460a      	mov	r2, r1
 8012690:	2101      	movs	r1, #1
 8012692:	f8c2 10f4 	str.w	r1, [r2, #244]	@ 0xf4
 8012696:	e7ac      	b.n	80125f2 <xTaskResumeAll+0x36>
                if( pxTCB != NULL )
 8012698:	b10b      	cbz	r3, 801269e <xTaskResumeAll+0xe2>
                    prvResetNextTaskUnblockTime();
 801269a:	f7ff fce5 	bl	8012068 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801269e:	4b14      	ldr	r3, [pc, #80]	@ (80126f0 <xTaskResumeAll+0x134>)
 80126a0:	f8d3 4100 	ldr.w	r4, [r3, #256]	@ 0x100
                    if( xPendedCounts > ( TickType_t ) 0U )
 80126a4:	b98c      	cbnz	r4, 80126ca <xTaskResumeAll+0x10e>
                if( xYieldPending != pdFALSE )
 80126a6:	4b12      	ldr	r3, [pc, #72]	@ (80126f0 <xTaskResumeAll+0x134>)
 80126a8:	f8d3 40f4 	ldr.w	r4, [r3, #244]	@ 0xf4
 80126ac:	b1e4      	cbz	r4, 80126e8 <xTaskResumeAll+0x12c>
                    taskYIELD_IF_USING_PREEMPTION();
 80126ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80126b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80126ba:	f3bf 8f4f 	dsb	sy
 80126be:	f3bf 8f6f 	isb	sy
                        xAlreadyYielded = pdTRUE;
 80126c2:	2401      	movs	r4, #1
 80126c4:	e010      	b.n	80126e8 <xTaskResumeAll+0x12c>
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80126c6:	3c01      	subs	r4, #1
 80126c8:	d008      	beq.n	80126dc <xTaskResumeAll+0x120>
                            if( xTaskIncrementTick() != pdFALSE )
 80126ca:	f7ff fecf 	bl	801246c <xTaskIncrementTick>
 80126ce:	2800      	cmp	r0, #0
 80126d0:	d0f9      	beq.n	80126c6 <xTaskResumeAll+0x10a>
                                xYieldPending = pdTRUE;
 80126d2:	4b07      	ldr	r3, [pc, #28]	@ (80126f0 <xTaskResumeAll+0x134>)
 80126d4:	2201      	movs	r2, #1
 80126d6:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 80126da:	e7f4      	b.n	80126c6 <xTaskResumeAll+0x10a>
                        xPendedTicks = 0;
 80126dc:	4b04      	ldr	r3, [pc, #16]	@ (80126f0 <xTaskResumeAll+0x134>)
 80126de:	2200      	movs	r2, #0
 80126e0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80126e4:	e7df      	b.n	80126a6 <xTaskResumeAll+0xea>
    BaseType_t xAlreadyYielded = pdFALSE;
 80126e6:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80126e8:	f7ff f98e 	bl	8011a08 <vPortExitCritical>
}
 80126ec:	4620      	mov	r0, r4
 80126ee:	bd38      	pop	{r3, r4, r5, pc}
 80126f0:	20003b8c 	.word	0x20003b8c

080126f4 <vTaskDelay>:
    {
 80126f4:	b510      	push	{r4, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 80126f6:	b950      	cbnz	r0, 801270e <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 80126f8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80126fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012700:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	f3bf 8f6f 	isb	sy
    }
 801270c:	bd10      	pop	{r4, pc}
 801270e:	4604      	mov	r4, r0
            vTaskSuspendAll();
 8012710:	f7ff fe96 	bl	8012440 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012714:	2100      	movs	r1, #0
 8012716:	4620      	mov	r0, r4
 8012718:	f7ff fdd2 	bl	80122c0 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 801271c:	f7ff ff4e 	bl	80125bc <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8012720:	2800      	cmp	r0, #0
 8012722:	d1f3      	bne.n	801270c <vTaskDelay+0x18>
 8012724:	e7e8      	b.n	80126f8 <vTaskDelay+0x4>
	...

08012728 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012728:	4b1a      	ldr	r3, [pc, #104]	@ (8012794 <vTaskSwitchContext+0x6c>)
 801272a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 801272e:	b123      	cbz	r3, 801273a <vTaskSwitchContext+0x12>
        xYieldPending = pdTRUE;
 8012730:	4b18      	ldr	r3, [pc, #96]	@ (8012794 <vTaskSwitchContext+0x6c>)
 8012732:	2201      	movs	r2, #1
 8012734:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
 8012738:	4770      	bx	lr
        xYieldPending = pdFALSE;
 801273a:	4a16      	ldr	r2, [pc, #88]	@ (8012794 <vTaskSwitchContext+0x6c>)
 801273c:	2300      	movs	r3, #0
 801273e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012742:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012746:	fab3 f383 	clz	r3, r3
 801274a:	b2db      	uxtb	r3, r3
 801274c:	f1c3 031f 	rsb	r3, r3, #31
 8012750:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 8012754:	0081      	lsls	r1, r0, #2
 8012756:	4411      	add	r1, r2
 8012758:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 801275a:	6840      	ldr	r0, [r0, #4]
 801275c:	6348      	str	r0, [r1, #52]	@ 0x34
 801275e:	3230      	adds	r2, #48	@ 0x30
 8012760:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8012764:	ea4f 018c 	mov.w	r1, ip, lsl #2
 8012768:	3108      	adds	r1, #8
 801276a:	440a      	add	r2, r1
 801276c:	4290      	cmp	r0, r2
 801276e:	d009      	beq.n	8012784 <vTaskSwitchContext+0x5c>
 8012770:	4908      	ldr	r1, [pc, #32]	@ (8012794 <vTaskSwitchContext+0x6c>)
 8012772:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012776:	009a      	lsls	r2, r3, #2
 8012778:	440a      	add	r2, r1
 801277a:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 801277c:	68db      	ldr	r3, [r3, #12]
 801277e:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
}
 8012782:	4770      	bx	lr
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012784:	6840      	ldr	r0, [r0, #4]
 8012786:	4662      	mov	r2, ip
 8012788:	0091      	lsls	r1, r2, #2
 801278a:	4a02      	ldr	r2, [pc, #8]	@ (8012794 <vTaskSwitchContext+0x6c>)
 801278c:	440a      	add	r2, r1
 801278e:	6350      	str	r0, [r2, #52]	@ 0x34
 8012790:	e7ee      	b.n	8012770 <vTaskSwitchContext+0x48>
 8012792:	bf00      	nop
 8012794:	20003b8c 	.word	0x20003b8c

08012798 <vTaskPlaceOnEventList>:
{
 8012798:	b510      	push	{r4, lr}
 801279a:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801279c:	4b05      	ldr	r3, [pc, #20]	@ (80127b4 <vTaskPlaceOnEventList+0x1c>)
 801279e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
 80127a2:	3118      	adds	r1, #24
 80127a4:	f7ff f894 	bl	80118d0 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80127a8:	2101      	movs	r1, #1
 80127aa:	4620      	mov	r0, r4
 80127ac:	f7ff fd88 	bl	80122c0 <prvAddCurrentTaskToDelayedList>
}
 80127b0:	bd10      	pop	{r4, pc}
 80127b2:	bf00      	nop
 80127b4:	20003b8c 	.word	0x20003b8c

080127b8 <xTaskRemoveFromEventList>:
{
 80127b8:	b430      	push	{r4, r5}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80127ba:	68c3      	ldr	r3, [r0, #12]
 80127bc:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80127be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80127c0:	69d8      	ldr	r0, [r3, #28]
 80127c2:	6a19      	ldr	r1, [r3, #32]
 80127c4:	6081      	str	r1, [r0, #8]
 80127c6:	69d8      	ldr	r0, [r3, #28]
 80127c8:	6048      	str	r0, [r1, #4]
 80127ca:	6851      	ldr	r1, [r2, #4]
 80127cc:	f103 0018 	add.w	r0, r3, #24
 80127d0:	4281      	cmp	r1, r0
 80127d2:	d047      	beq.n	8012864 <xTaskRemoveFromEventList+0xac>
 80127d4:	2100      	movs	r1, #0
 80127d6:	6299      	str	r1, [r3, #40]	@ 0x28
 80127d8:	6811      	ldr	r1, [r2, #0]
 80127da:	3901      	subs	r1, #1
 80127dc:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127de:	4a2c      	ldr	r2, [pc, #176]	@ (8012890 <xTaskRemoveFromEventList+0xd8>)
 80127e0:	f8d2 20f0 	ldr.w	r2, [r2, #240]	@ 0xf0
 80127e4:	2a00      	cmp	r2, #0
 80127e6:	d143      	bne.n	8012870 <xTaskRemoveFromEventList+0xb8>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80127e8:	695a      	ldr	r2, [r3, #20]
 80127ea:	6898      	ldr	r0, [r3, #8]
 80127ec:	68d9      	ldr	r1, [r3, #12]
 80127ee:	6081      	str	r1, [r0, #8]
 80127f0:	6898      	ldr	r0, [r3, #8]
 80127f2:	6048      	str	r0, [r1, #4]
 80127f4:	6851      	ldr	r1, [r2, #4]
 80127f6:	1d1c      	adds	r4, r3, #4
 80127f8:	42a1      	cmp	r1, r4
 80127fa:	d036      	beq.n	801286a <xTaskRemoveFromEventList+0xb2>
 80127fc:	2100      	movs	r1, #0
 80127fe:	6159      	str	r1, [r3, #20]
 8012800:	6811      	ldr	r1, [r2, #0]
 8012802:	3901      	subs	r1, #1
 8012804:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8012806:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8012808:	2001      	movs	r0, #1
 801280a:	4088      	lsls	r0, r1
 801280c:	4a20      	ldr	r2, [pc, #128]	@ (8012890 <xTaskRemoveFromEventList+0xd8>)
 801280e:	f8d2 50e4 	ldr.w	r5, [r2, #228]	@ 0xe4
 8012812:	4328      	orrs	r0, r5
 8012814:	f8c2 00e4 	str.w	r0, [r2, #228]	@ 0xe4
 8012818:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801281c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8012820:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8012822:	6099      	str	r1, [r3, #8]
 8012824:	6888      	ldr	r0, [r1, #8]
 8012826:	60d8      	str	r0, [r3, #12]
 8012828:	6044      	str	r4, [r0, #4]
 801282a:	608c      	str	r4, [r1, #8]
 801282c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 801282e:	f102 0030 	add.w	r0, r2, #48	@ 0x30
 8012832:	eb01 0481 	add.w	r4, r1, r1, lsl #2
 8012836:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 801283a:	6158      	str	r0, [r3, #20]
 801283c:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8012840:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8012842:	3001      	adds	r0, #1
 8012844:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8012848:	6310      	str	r0, [r2, #48]	@ 0x30
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801284a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801284c:	4b10      	ldr	r3, [pc, #64]	@ (8012890 <xTaskRemoveFromEventList+0xd8>)
 801284e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012854:	429a      	cmp	r2, r3
 8012856:	d919      	bls.n	801288c <xTaskRemoveFromEventList+0xd4>
        xYieldPending = pdTRUE;
 8012858:	2001      	movs	r0, #1
 801285a:	4b0d      	ldr	r3, [pc, #52]	@ (8012890 <xTaskRemoveFromEventList+0xd8>)
 801285c:	f8c3 00f4 	str.w	r0, [r3, #244]	@ 0xf4
}
 8012860:	bc30      	pop	{r4, r5}
 8012862:	4770      	bx	lr
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8012864:	6a19      	ldr	r1, [r3, #32]
 8012866:	6051      	str	r1, [r2, #4]
 8012868:	e7b4      	b.n	80127d4 <xTaskRemoveFromEventList+0x1c>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 801286a:	68d9      	ldr	r1, [r3, #12]
 801286c:	6051      	str	r1, [r2, #4]
 801286e:	e7c5      	b.n	80127fc <xTaskRemoveFromEventList+0x44>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012870:	4a07      	ldr	r2, [pc, #28]	@ (8012890 <xTaskRemoveFromEventList+0xd8>)
 8012872:	6991      	ldr	r1, [r2, #24]
 8012874:	61d9      	str	r1, [r3, #28]
 8012876:	688c      	ldr	r4, [r1, #8]
 8012878:	621c      	str	r4, [r3, #32]
 801287a:	6060      	str	r0, [r4, #4]
 801287c:	6088      	str	r0, [r1, #8]
 801287e:	f102 0114 	add.w	r1, r2, #20
 8012882:	6299      	str	r1, [r3, #40]	@ 0x28
 8012884:	6951      	ldr	r1, [r2, #20]
 8012886:	3101      	adds	r1, #1
 8012888:	6151      	str	r1, [r2, #20]
 801288a:	e7de      	b.n	801284a <xTaskRemoveFromEventList+0x92>
        xReturn = pdFALSE;
 801288c:	2000      	movs	r0, #0
    return xReturn;
 801288e:	e7e7      	b.n	8012860 <xTaskRemoveFromEventList+0xa8>
 8012890:	20003b8c 	.word	0x20003b8c

08012894 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012894:	4b03      	ldr	r3, [pc, #12]	@ (80128a4 <vTaskInternalSetTimeOutState+0x10>)
 8012896:	f8d3 20fc 	ldr.w	r2, [r3, #252]	@ 0xfc
 801289a:	6002      	str	r2, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 801289c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
 80128a0:	6043      	str	r3, [r0, #4]
}
 80128a2:	4770      	bx	lr
 80128a4:	20003b8c 	.word	0x20003b8c

080128a8 <xTaskCheckForTimeOut>:
{
 80128a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80128aa:	4604      	mov	r4, r0
 80128ac:	460d      	mov	r5, r1
    taskENTER_CRITICAL();
 80128ae:	f7ff f899 	bl	80119e4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 80128b2:	4b14      	ldr	r3, [pc, #80]	@ (8012904 <xTaskCheckForTimeOut+0x5c>)
 80128b4:	f8d3 10ec 	ldr.w	r1, [r3, #236]	@ 0xec
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80128b8:	6863      	ldr	r3, [r4, #4]
 80128ba:	1ac8      	subs	r0, r1, r3
            if( *pxTicksToWait == portMAX_DELAY )
 80128bc:	682a      	ldr	r2, [r5, #0]
 80128be:	f1b2 3fff 	cmp.w	r2, #4294967295
 80128c2:	d019      	beq.n	80128f8 <xTaskCheckForTimeOut+0x50>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80128c4:	4e0f      	ldr	r6, [pc, #60]	@ (8012904 <xTaskCheckForTimeOut+0x5c>)
 80128c6:	f8d6 60fc 	ldr.w	r6, [r6, #252]	@ 0xfc
 80128ca:	6827      	ldr	r7, [r4, #0]
 80128cc:	42b7      	cmp	r7, r6
 80128ce:	d005      	beq.n	80128dc <xTaskCheckForTimeOut+0x34>
 80128d0:	428b      	cmp	r3, r1
 80128d2:	d803      	bhi.n	80128dc <xTaskCheckForTimeOut+0x34>
            *pxTicksToWait = ( TickType_t ) 0;
 80128d4:	2300      	movs	r3, #0
 80128d6:	602b      	str	r3, [r5, #0]
            xReturn = pdTRUE;
 80128d8:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80128da:	e00e      	b.n	80128fa <xTaskCheckForTimeOut+0x52>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80128dc:	4282      	cmp	r2, r0
 80128de:	d803      	bhi.n	80128e8 <xTaskCheckForTimeOut+0x40>
            *pxTicksToWait = ( TickType_t ) 0;
 80128e0:	2300      	movs	r3, #0
 80128e2:	602b      	str	r3, [r5, #0]
            xReturn = pdTRUE;
 80128e4:	2401      	movs	r4, #1
 80128e6:	e008      	b.n	80128fa <xTaskCheckForTimeOut+0x52>
            *pxTicksToWait -= xElapsedTime;
 80128e8:	1a5b      	subs	r3, r3, r1
 80128ea:	4413      	add	r3, r2
 80128ec:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80128ee:	4620      	mov	r0, r4
 80128f0:	f7ff ffd0 	bl	8012894 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80128f4:	2400      	movs	r4, #0
 80128f6:	e000      	b.n	80128fa <xTaskCheckForTimeOut+0x52>
                xReturn = pdFALSE;
 80128f8:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80128fa:	f7ff f885 	bl	8011a08 <vPortExitCritical>
}
 80128fe:	4620      	mov	r0, r4
 8012900:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012902:	bf00      	nop
 8012904:	20003b8c 	.word	0x20003b8c

08012908 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8012908:	4b02      	ldr	r3, [pc, #8]	@ (8012914 <vTaskMissedYield+0xc>)
 801290a:	2201      	movs	r2, #1
 801290c:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
}
 8012910:	4770      	bx	lr
 8012912:	bf00      	nop
 8012914:	20003b8c 	.word	0x20003b8c

08012918 <xTaskGetSchedulerState>:
        if( xSchedulerRunning == pdFALSE )
 8012918:	4b06      	ldr	r3, [pc, #24]	@ (8012934 <xTaskGetSchedulerState+0x1c>)
 801291a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 801291e:	b13b      	cbz	r3, 8012930 <xTaskGetSchedulerState+0x18>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012920:	4b04      	ldr	r3, [pc, #16]	@ (8012934 <xTaskGetSchedulerState+0x1c>)
 8012922:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8012926:	b10b      	cbz	r3, 801292c <xTaskGetSchedulerState+0x14>
                xReturn = taskSCHEDULER_SUSPENDED;
 8012928:	2000      	movs	r0, #0
    }
 801292a:	4770      	bx	lr
                xReturn = taskSCHEDULER_RUNNING;
 801292c:	2002      	movs	r0, #2
 801292e:	4770      	bx	lr
            xReturn = taskSCHEDULER_NOT_STARTED;
 8012930:	2001      	movs	r0, #1
 8012932:	4770      	bx	lr
 8012934:	20003b8c 	.word	0x20003b8c

08012938 <xTaskPriorityInherit>:
        if( pxMutexHolder != NULL )
 8012938:	2800      	cmp	r0, #0
 801293a:	d060      	beq.n	80129fe <xTaskPriorityInherit+0xc6>
    {
 801293c:	b570      	push	{r4, r5, r6, lr}
 801293e:	4604      	mov	r4, r0
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8012940:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8012942:	4a31      	ldr	r2, [pc, #196]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 8012944:	f8d2 20d8 	ldr.w	r2, [r2, #216]	@ 0xd8
 8012948:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801294a:	4293      	cmp	r3, r2
 801294c:	d24e      	bcs.n	80129ec <xTaskPriorityInherit+0xb4>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801294e:	6982      	ldr	r2, [r0, #24]
 8012950:	2a00      	cmp	r2, #0
 8012952:	db06      	blt.n	8012962 <xTaskPriorityInherit+0x2a>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012954:	4a2c      	ldr	r2, [pc, #176]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 8012956:	f8d2 20d8 	ldr.w	r2, [r2, #216]	@ 0xd8
 801295a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801295c:	f1c2 0205 	rsb	r2, r2, #5
 8012960:	6182      	str	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012962:	6961      	ldr	r1, [r4, #20]
 8012964:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012968:	4a28      	ldr	r2, [pc, #160]	@ (8012a0c <xTaskPriorityInherit+0xd4>)
 801296a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801296e:	4299      	cmp	r1, r3
 8012970:	d006      	beq.n	8012980 <xTaskPriorityInherit+0x48>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012972:	4b25      	ldr	r3, [pc, #148]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 8012974:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801297a:	62e3      	str	r3, [r4, #44]	@ 0x2c
                xReturn = pdTRUE;
 801297c:	2001      	movs	r0, #1
    }
 801297e:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012980:	1d25      	adds	r5, r4, #4
 8012982:	4628      	mov	r0, r5
 8012984:	f7fe ffbd 	bl	8011902 <uxListRemove>
 8012988:	b948      	cbnz	r0, 801299e <xTaskPriorityInherit+0x66>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801298a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801298c:	2201      	movs	r2, #1
 801298e:	409a      	lsls	r2, r3
 8012990:	491d      	ldr	r1, [pc, #116]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 8012992:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 8012996:	ea23 0302 	bic.w	r3, r3, r2
 801299a:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801299e:	4b1a      	ldr	r3, [pc, #104]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 80129a0:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 80129a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80129a6:	62e2      	str	r2, [r4, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80129a8:	2001      	movs	r0, #1
 80129aa:	fa00 f102 	lsl.w	r1, r0, r2
 80129ae:	f8d3 60e4 	ldr.w	r6, [r3, #228]	@ 0xe4
 80129b2:	4331      	orrs	r1, r6
 80129b4:	f8c3 10e4 	str.w	r1, [r3, #228]	@ 0xe4
 80129b8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80129bc:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 80129c0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80129c2:	60a2      	str	r2, [r4, #8]
 80129c4:	6891      	ldr	r1, [r2, #8]
 80129c6:	60e1      	str	r1, [r4, #12]
 80129c8:	604d      	str	r5, [r1, #4]
 80129ca:	6095      	str	r5, [r2, #8]
 80129cc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80129ce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80129d2:	eb02 0582 	add.w	r5, r2, r2, lsl #2
 80129d6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80129da:	6161      	str	r1, [r4, #20]
 80129dc:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 80129e0:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 80129e2:	4401      	add	r1, r0
 80129e4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 80129e8:	6319      	str	r1, [r3, #48]	@ 0x30
 80129ea:	e7c8      	b.n	801297e <xTaskPriorityInherit+0x46>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80129ec:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80129ee:	4b06      	ldr	r3, [pc, #24]	@ (8012a08 <xTaskPriorityInherit+0xd0>)
 80129f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80129f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d303      	bcc.n	8012a02 <xTaskPriorityInherit+0xca>
        BaseType_t xReturn = pdFALSE;
 80129fa:	2000      	movs	r0, #0
 80129fc:	e7bf      	b.n	801297e <xTaskPriorityInherit+0x46>
 80129fe:	2000      	movs	r0, #0
    }
 8012a00:	4770      	bx	lr
                    xReturn = pdTRUE;
 8012a02:	2001      	movs	r0, #1
        return xReturn;
 8012a04:	e7bb      	b.n	801297e <xTaskPriorityInherit+0x46>
 8012a06:	bf00      	nop
 8012a08:	20003b8c 	.word	0x20003b8c
 8012a0c:	20003bbc 	.word	0x20003bbc

08012a10 <xTaskPriorityDisinherit>:
        if( pxMutexHolder != NULL )
 8012a10:	2800      	cmp	r0, #0
 8012a12:	d042      	beq.n	8012a9a <xTaskPriorityDisinherit+0x8a>
    {
 8012a14:	b570      	push	{r4, r5, r6, lr}
 8012a16:	4604      	mov	r4, r0
            ( pxTCB->uxMutexesHeld )--;
 8012a18:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8012a1a:	3b01      	subs	r3, #1
 8012a1c:	6483      	str	r3, [r0, #72]	@ 0x48
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012a1e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8012a20:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8012a22:	4291      	cmp	r1, r2
 8012a24:	d03b      	beq.n	8012a9e <xTaskPriorityDisinherit+0x8e>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8012a26:	b10b      	cbz	r3, 8012a2c <xTaskPriorityDisinherit+0x1c>
        BaseType_t xReturn = pdFALSE;
 8012a28:	2000      	movs	r0, #0
    }
 8012a2a:	bd70      	pop	{r4, r5, r6, pc}
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a2c:	1d05      	adds	r5, r0, #4
 8012a2e:	4628      	mov	r0, r5
 8012a30:	f7fe ff67 	bl	8011902 <uxListRemove>
 8012a34:	b948      	cbnz	r0, 8012a4a <xTaskPriorityDisinherit+0x3a>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012a36:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012a38:	2201      	movs	r2, #1
 8012a3a:	409a      	lsls	r2, r3
 8012a3c:	4919      	ldr	r1, [pc, #100]	@ (8012aa4 <xTaskPriorityDisinherit+0x94>)
 8012a3e:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 8012a42:	ea23 0302 	bic.w	r3, r3, r2
 8012a46:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012a4a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8012a4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a4e:	f1c3 0205 	rsb	r2, r3, #5
 8012a52:	61a2      	str	r2, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8012a54:	2001      	movs	r0, #1
 8012a56:	fa00 f103 	lsl.w	r1, r0, r3
 8012a5a:	4a12      	ldr	r2, [pc, #72]	@ (8012aa4 <xTaskPriorityDisinherit+0x94>)
 8012a5c:	f8d2 60e4 	ldr.w	r6, [r2, #228]	@ 0xe4
 8012a60:	4331      	orrs	r1, r6
 8012a62:	f8c2 10e4 	str.w	r1, [r2, #228]	@ 0xe4
 8012a66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012a6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8012a6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012a70:	60a3      	str	r3, [r4, #8]
 8012a72:	6899      	ldr	r1, [r3, #8]
 8012a74:	60e1      	str	r1, [r4, #12]
 8012a76:	604d      	str	r5, [r1, #4]
 8012a78:	609d      	str	r5, [r3, #8]
 8012a7a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012a7c:	f102 0130 	add.w	r1, r2, #48	@ 0x30
 8012a80:	eb03 0583 	add.w	r5, r3, r3, lsl #2
 8012a84:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8012a88:	6161      	str	r1, [r4, #20]
 8012a8a:	eb02 0185 	add.w	r1, r2, r5, lsl #2
 8012a8e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8012a90:	4401      	add	r1, r0
 8012a92:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8012a96:	6311      	str	r1, [r2, #48]	@ 0x30
                    xReturn = pdTRUE;
 8012a98:	e7c7      	b.n	8012a2a <xTaskPriorityDisinherit+0x1a>
        BaseType_t xReturn = pdFALSE;
 8012a9a:	2000      	movs	r0, #0
    }
 8012a9c:	4770      	bx	lr
        BaseType_t xReturn = pdFALSE;
 8012a9e:	2000      	movs	r0, #0
 8012aa0:	e7c3      	b.n	8012a2a <xTaskPriorityDisinherit+0x1a>
 8012aa2:	bf00      	nop
 8012aa4:	20003b8c 	.word	0x20003b8c

08012aa8 <vTaskPriorityDisinheritAfterTimeout>:
        if( pxMutexHolder != NULL )
 8012aa8:	2800      	cmp	r0, #0
 8012aaa:	d04d      	beq.n	8012b48 <vTaskPriorityDisinheritAfterTimeout+0xa0>
    {
 8012aac:	b538      	push	{r3, r4, r5, lr}
 8012aae:	4604      	mov	r4, r0
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012ab0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8012ab2:	428b      	cmp	r3, r1
 8012ab4:	d200      	bcs.n	8012ab8 <vTaskPriorityDisinheritAfterTimeout+0x10>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012ab6:	460b      	mov	r3, r1
            if( pxTCB->uxPriority != uxPriorityToUse )
 8012ab8:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d002      	beq.n	8012ac4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012abe:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8012ac0:	2901      	cmp	r1, #1
 8012ac2:	d000      	beq.n	8012ac6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
    }
 8012ac4:	bd38      	pop	{r3, r4, r5, pc}
                    pxTCB->uxPriority = uxPriorityToUse;
 8012ac6:	62e3      	str	r3, [r4, #44]	@ 0x2c
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012ac8:	69a1      	ldr	r1, [r4, #24]
 8012aca:	2900      	cmp	r1, #0
 8012acc:	db02      	blt.n	8012ad4 <vTaskPriorityDisinheritAfterTimeout+0x2c>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ace:	f1c3 0305 	rsb	r3, r3, #5
 8012ad2:	61a3      	str	r3, [r4, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012ad4:	6961      	ldr	r1, [r4, #20]
 8012ad6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012ada:	4b1c      	ldr	r3, [pc, #112]	@ (8012b4c <vTaskPriorityDisinheritAfterTimeout+0xa4>)
 8012adc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8012ae0:	4299      	cmp	r1, r3
 8012ae2:	d1ef      	bne.n	8012ac4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ae4:	1d25      	adds	r5, r4, #4
 8012ae6:	4628      	mov	r0, r5
 8012ae8:	f7fe ff0b 	bl	8011902 <uxListRemove>
 8012aec:	b948      	cbnz	r0, 8012b02 <vTaskPriorityDisinheritAfterTimeout+0x5a>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8012aee:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8012af0:	2201      	movs	r2, #1
 8012af2:	409a      	lsls	r2, r3
 8012af4:	4916      	ldr	r1, [pc, #88]	@ (8012b50 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8012af6:	f8d1 30e4 	ldr.w	r3, [r1, #228]	@ 0xe4
 8012afa:	ea23 0302 	bic.w	r3, r3, r2
 8012afe:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
                        prvAddTaskToReadyList( pxTCB );
 8012b02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012b04:	2101      	movs	r1, #1
 8012b06:	4091      	lsls	r1, r2
 8012b08:	4b11      	ldr	r3, [pc, #68]	@ (8012b50 <vTaskPriorityDisinheritAfterTimeout+0xa8>)
 8012b0a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
 8012b0e:	4301      	orrs	r1, r0
 8012b10:	f8c3 10e4 	str.w	r1, [r3, #228]	@ 0xe4
 8012b14:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8012b18:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8012b1c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8012b1e:	60a2      	str	r2, [r4, #8]
 8012b20:	6891      	ldr	r1, [r2, #8]
 8012b22:	60e1      	str	r1, [r4, #12]
 8012b24:	604d      	str	r5, [r1, #4]
 8012b26:	6095      	str	r5, [r2, #8]
 8012b28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8012b2a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8012b2e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8012b32:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8012b36:	6161      	str	r1, [r4, #20]
 8012b38:	eb03 0180 	add.w	r1, r3, r0, lsl #2
 8012b3c:	6b09      	ldr	r1, [r1, #48]	@ 0x30
 8012b3e:	3101      	adds	r1, #1
 8012b40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012b44:	6319      	str	r1, [r3, #48]	@ 0x30
    }
 8012b46:	e7bd      	b.n	8012ac4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 8012b48:	4770      	bx	lr
 8012b4a:	bf00      	nop
 8012b4c:	20003bbc 	.word	0x20003bbc
 8012b50:	20003b8c 	.word	0x20003b8c

08012b54 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8012b54:	4b06      	ldr	r3, [pc, #24]	@ (8012b70 <pvTaskIncrementMutexHeldCount+0x1c>)
 8012b56:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8012b5a:	b12b      	cbz	r3, 8012b68 <pvTaskIncrementMutexHeldCount+0x14>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8012b5c:	4b04      	ldr	r3, [pc, #16]	@ (8012b70 <pvTaskIncrementMutexHeldCount+0x1c>)
 8012b5e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8012b62:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8012b64:	3301      	adds	r3, #1
 8012b66:	6493      	str	r3, [r2, #72]	@ 0x48
        return pxCurrentTCB;
 8012b68:	4b01      	ldr	r3, [pc, #4]	@ (8012b70 <pvTaskIncrementMutexHeldCount+0x1c>)
 8012b6a:	f8d3 00d8 	ldr.w	r0, [r3, #216]	@ 0xd8
    }
 8012b6e:	4770      	bx	lr
 8012b70:	20003b8c 	.word	0x20003b8c

08012b74 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8012b74:	b570      	push	{r4, r5, r6, lr}
 8012b76:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8012b78:	4603      	mov	r3, r0
 8012b7a:	bb08      	cbnz	r0, 8012bc0 <BSP_LED_Init+0x4c>
 8012b7c:	4a16      	ldr	r2, [pc, #88]	@ (8012bd8 <BSP_LED_Init+0x64>)
 8012b7e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012b80:	f041 0102 	orr.w	r1, r1, #2
 8012b84:	6311      	str	r1, [r2, #48]	@ 0x30
 8012b86:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012b88:	f002 0202 	and.w	r2, r2, #2
 8012b8c:	9201      	str	r2, [sp, #4]
 8012b8e:	9a01      	ldr	r2, [sp, #4]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8012b90:	4a12      	ldr	r2, [pc, #72]	@ (8012bdc <BSP_LED_Init+0x68>)
 8012b92:	f832 5013 	ldrh.w	r5, [r2, r3, lsl #1]
 8012b96:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012b98:	2201      	movs	r2, #1
 8012b9a:	9204      	str	r2, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012b9c:	2600      	movs	r6, #0
 8012b9e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ba0:	2203      	movs	r2, #3
 8012ba2:	9206      	str	r2, [sp, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8012ba4:	4c0e      	ldr	r4, [pc, #56]	@ (8012be0 <BSP_LED_Init+0x6c>)
 8012ba6:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8012baa:	a903      	add	r1, sp, #12
 8012bac:	6860      	ldr	r0, [r4, #4]
 8012bae:	f000 f99d 	bl	8012eec <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8012bb2:	4632      	mov	r2, r6
 8012bb4:	4629      	mov	r1, r5
 8012bb6:	6860      	ldr	r0, [r4, #4]
 8012bb8:	f000 fa91 	bl	80130de <HAL_GPIO_WritePin>
}
 8012bbc:	b008      	add	sp, #32
 8012bbe:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8012bc0:	4a05      	ldr	r2, [pc, #20]	@ (8012bd8 <BSP_LED_Init+0x64>)
 8012bc2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8012bc4:	f041 0102 	orr.w	r1, r1, #2
 8012bc8:	6311      	str	r1, [r2, #48]	@ 0x30
 8012bca:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8012bcc:	f002 0202 	and.w	r2, r2, #2
 8012bd0:	9202      	str	r2, [sp, #8]
 8012bd2:	9a02      	ldr	r2, [sp, #8]
 8012bd4:	e7dc      	b.n	8012b90 <BSP_LED_Init+0x1c>
 8012bd6:	bf00      	nop
 8012bd8:	40023800 	.word	0x40023800
 8012bdc:	0801a040 	.word	0x0801a040
 8012be0:	20000008 	.word	0x20000008

08012be4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8012be4:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8012be6:	4b05      	ldr	r3, [pc, #20]	@ (8012bfc <BSP_LED_On+0x18>)
 8012be8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012bec:	2201      	movs	r2, #1
 8012bee:	4904      	ldr	r1, [pc, #16]	@ (8012c00 <BSP_LED_On+0x1c>)
 8012bf0:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8012bf4:	6858      	ldr	r0, [r3, #4]
 8012bf6:	f000 fa72 	bl	80130de <HAL_GPIO_WritePin>
}
 8012bfa:	bd08      	pop	{r3, pc}
 8012bfc:	20000008 	.word	0x20000008
 8012c00:	0801a040 	.word	0x0801a040

08012c04 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8012c04:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8012c06:	4b05      	ldr	r3, [pc, #20]	@ (8012c1c <BSP_LED_Off+0x18>)
 8012c08:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012c0c:	2200      	movs	r2, #0
 8012c0e:	4904      	ldr	r1, [pc, #16]	@ (8012c20 <BSP_LED_Off+0x1c>)
 8012c10:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
 8012c14:	6858      	ldr	r0, [r3, #4]
 8012c16:	f000 fa62 	bl	80130de <HAL_GPIO_WritePin>
}
 8012c1a:	bd08      	pop	{r3, pc}
 8012c1c:	20000008 	.word	0x20000008
 8012c20:	0801a040 	.word	0x0801a040

08012c24 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8012c24:	b530      	push	{r4, r5, lr}
 8012c26:	b087      	sub	sp, #28
 8012c28:	4605      	mov	r5, r0
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8012c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8012c9c <BSP_PB_Init+0x78>)
 8012c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8012c2e:	f042 0204 	orr.w	r2, r2, #4
 8012c32:	631a      	str	r2, [r3, #48]	@ 0x30
 8012c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c36:	f003 0304 	and.w	r3, r3, #4
 8012c3a:	9300      	str	r3, [sp, #0]
 8012c3c:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8012c3e:	460c      	mov	r4, r1
 8012c40:	b119      	cbz	r1, 8012c4a <BSP_PB_Init+0x26>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8012c42:	2c01      	cmp	r4, #1
 8012c44:	d012      	beq.n	8012c6c <BSP_PB_Init+0x48>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8012c46:	b007      	add	sp, #28
 8012c48:	bd30      	pop	{r4, r5, pc}
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8012c4a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012c4e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012c50:	2300      	movs	r3, #0
 8012c52:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8012c54:	2302      	movs	r3, #2
 8012c56:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012c58:	2303      	movs	r3, #3
 8012c5a:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8012c5c:	4b10      	ldr	r3, [pc, #64]	@ (8012ca0 <BSP_PB_Init+0x7c>)
 8012c5e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8012c62:	a901      	add	r1, sp, #4
 8012c64:	6918      	ldr	r0, [r3, #16]
 8012c66:	f000 f941 	bl	8012eec <HAL_GPIO_Init>
 8012c6a:	e7ea      	b.n	8012c42 <BSP_PB_Init+0x1e>
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8012c6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8012c70:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012c72:	2400      	movs	r4, #0
 8012c74:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8012c76:	4b0b      	ldr	r3, [pc, #44]	@ (8012ca4 <BSP_PB_Init+0x80>)
 8012c78:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8012c7a:	4b09      	ldr	r3, [pc, #36]	@ (8012ca0 <BSP_PB_Init+0x7c>)
 8012c7c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8012c80:	a901      	add	r1, sp, #4
 8012c82:	6918      	ldr	r0, [r3, #16]
 8012c84:	f000 f932 	bl	8012eec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8012c88:	4622      	mov	r2, r4
 8012c8a:	210f      	movs	r1, #15
 8012c8c:	2028      	movs	r0, #40	@ 0x28
 8012c8e:	f000 f8b7 	bl	8012e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8012c92:	2028      	movs	r0, #40	@ 0x28
 8012c94:	f000 f8c4 	bl	8012e20 <HAL_NVIC_EnableIRQ>
}
 8012c98:	e7d5      	b.n	8012c46 <BSP_PB_Init+0x22>
 8012c9a:	bf00      	nop
 8012c9c:	40023800 	.word	0x40023800
 8012ca0:	20000008 	.word	0x20000008
 8012ca4:	10210000 	.word	0x10210000

08012ca8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8012ca8:	b508      	push	{r3, lr}
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8012caa:	4b04      	ldr	r3, [pc, #16]	@ (8012cbc <BSP_PB_GetState+0x14>)
 8012cac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8012cb0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8012cb4:	6900      	ldr	r0, [r0, #16]
 8012cb6:	f000 fa0b 	bl	80130d0 <HAL_GPIO_ReadPin>
}
 8012cba:	bd08      	pop	{r3, pc}
 8012cbc:	20000008 	.word	0x20000008

08012cc0 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8012cc0:	4770      	bx	lr
	...

08012cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012cc4:	b510      	push	{r4, lr}
 8012cc6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8012cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8012d04 <HAL_InitTick+0x40>)
 8012cca:	781a      	ldrb	r2, [r3, #0]
 8012ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8012cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8012cd4:	4a0c      	ldr	r2, [pc, #48]	@ (8012d08 <HAL_InitTick+0x44>)
 8012cd6:	6810      	ldr	r0, [r2, #0]
 8012cd8:	fbb0 f0f3 	udiv	r0, r0, r3
 8012cdc:	f000 f8a4 	bl	8012e28 <HAL_SYSTICK_Config>
 8012ce0:	b968      	cbnz	r0, 8012cfe <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012ce2:	2c0f      	cmp	r4, #15
 8012ce4:	d901      	bls.n	8012cea <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8012ce6:	2001      	movs	r0, #1
 8012ce8:	e00a      	b.n	8012d00 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012cea:	2200      	movs	r2, #0
 8012cec:	4621      	mov	r1, r4
 8012cee:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf2:	f000 f885 	bl	8012e00 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012cf6:	4b03      	ldr	r3, [pc, #12]	@ (8012d04 <HAL_InitTick+0x40>)
 8012cf8:	605c      	str	r4, [r3, #4]
  }

  /* Return function status */
  return HAL_OK;
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	e000      	b.n	8012d00 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8012cfe:	2001      	movs	r0, #1
}
 8012d00:	bd10      	pop	{r4, pc}
 8012d02:	bf00      	nop
 8012d04:	2000001c 	.word	0x2000001c
 8012d08:	20000000 	.word	0x20000000

08012d0c <HAL_Init>:
{
 8012d0c:	b508      	push	{r3, lr}
   __HAL_FLASH_ART_ENABLE();
 8012d0e:	4b09      	ldr	r3, [pc, #36]	@ (8012d34 <HAL_Init+0x28>)
 8012d10:	681a      	ldr	r2, [r3, #0]
 8012d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8012d16:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8012d18:	681a      	ldr	r2, [r3, #0]
 8012d1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8012d1e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012d20:	2003      	movs	r0, #3
 8012d22:	f000 f85b 	bl	8012ddc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8012d26:	200f      	movs	r0, #15
 8012d28:	f7ff ffcc 	bl	8012cc4 <HAL_InitTick>
  HAL_MspInit();
 8012d2c:	f7ff ffc8 	bl	8012cc0 <HAL_MspInit>
}
 8012d30:	2000      	movs	r0, #0
 8012d32:	bd08      	pop	{r3, pc}
 8012d34:	40023c00 	.word	0x40023c00

08012d38 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8012d38:	4a03      	ldr	r2, [pc, #12]	@ (8012d48 <HAL_IncTick+0x10>)
 8012d3a:	6811      	ldr	r1, [r2, #0]
 8012d3c:	4b03      	ldr	r3, [pc, #12]	@ (8012d4c <HAL_IncTick+0x14>)
 8012d3e:	781b      	ldrb	r3, [r3, #0]
 8012d40:	440b      	add	r3, r1
 8012d42:	6013      	str	r3, [r2, #0]
}
 8012d44:	4770      	bx	lr
 8012d46:	bf00      	nop
 8012d48:	20003c90 	.word	0x20003c90
 8012d4c:	2000001c 	.word	0x2000001c

08012d50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8012d50:	4b01      	ldr	r3, [pc, #4]	@ (8012d58 <HAL_GetTick+0x8>)
 8012d52:	6818      	ldr	r0, [r3, #0]
}
 8012d54:	4770      	bx	lr
 8012d56:	bf00      	nop
 8012d58:	20003c90 	.word	0x20003c90

08012d5c <__NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	db07      	blt.n	8012d70 <__NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012d60:	f000 021f 	and.w	r2, r0, #31
 8012d64:	0940      	lsrs	r0, r0, #5
 8012d66:	2301      	movs	r3, #1
 8012d68:	4093      	lsls	r3, r2
 8012d6a:	4a02      	ldr	r2, [pc, #8]	@ (8012d74 <__NVIC_EnableIRQ+0x18>)
 8012d6c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
 8012d70:	4770      	bx	lr
 8012d72:	bf00      	nop
 8012d74:	e000e100 	.word	0xe000e100

08012d78 <__NVIC_SetPriority>:
  if ((int32_t)(IRQn) >= 0)
 8012d78:	2800      	cmp	r0, #0
 8012d7a:	db04      	blt.n	8012d86 <__NVIC_SetPriority+0xe>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d7c:	0109      	lsls	r1, r1, #4
 8012d7e:	b2c9      	uxtb	r1, r1
 8012d80:	4b04      	ldr	r3, [pc, #16]	@ (8012d94 <__NVIC_SetPriority+0x1c>)
 8012d82:	5419      	strb	r1, [r3, r0]
 8012d84:	4770      	bx	lr
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d86:	f000 000f 	and.w	r0, r0, #15
 8012d8a:	0109      	lsls	r1, r1, #4
 8012d8c:	b2c9      	uxtb	r1, r1
 8012d8e:	4b02      	ldr	r3, [pc, #8]	@ (8012d98 <__NVIC_SetPriority+0x20>)
 8012d90:	5419      	strb	r1, [r3, r0]
  }
}
 8012d92:	4770      	bx	lr
 8012d94:	e000e400 	.word	0xe000e400
 8012d98:	e000ed14 	.word	0xe000ed14

08012d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d9c:	b500      	push	{lr}
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d9e:	f000 0007 	and.w	r0, r0, #7
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012da2:	f1c0 0c07 	rsb	ip, r0, #7
 8012da6:	f1bc 0f04 	cmp.w	ip, #4
 8012daa:	bf28      	it	cs
 8012dac:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012db0:	1d03      	adds	r3, r0, #4
 8012db2:	2b06      	cmp	r3, #6
 8012db4:	d90f      	bls.n	8012dd6 <NVIC_EncodePriority+0x3a>
 8012db6:	1ec3      	subs	r3, r0, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012db8:	f04f 3eff 	mov.w	lr, #4294967295
 8012dbc:	fa0e f00c 	lsl.w	r0, lr, ip
 8012dc0:	ea21 0100 	bic.w	r1, r1, r0
 8012dc4:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012dc6:	fa0e fe03 	lsl.w	lr, lr, r3
 8012dca:	ea22 020e 	bic.w	r2, r2, lr
         );
}
 8012dce:	ea41 0002 	orr.w	r0, r1, r2
 8012dd2:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	e7ee      	b.n	8012db8 <NVIC_EncodePriority+0x1c>
	...

08012ddc <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012ddc:	4906      	ldr	r1, [pc, #24]	@ (8012df8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8012dde:	68cb      	ldr	r3, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012de0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8012de4:	041b      	lsls	r3, r3, #16
 8012de6:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012de8:	0200      	lsls	r0, r0, #8
 8012dea:	f400 60e0 	and.w	r0, r0, #1792	@ 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012dee:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8012df0:	4a02      	ldr	r2, [pc, #8]	@ (8012dfc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8012df2:	431a      	orrs	r2, r3
  SCB->AIRCR =  reg_value;
 8012df4:	60ca      	str	r2, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8012df6:	4770      	bx	lr
 8012df8:	e000ed00 	.word	0xe000ed00
 8012dfc:	05fa0000 	.word	0x05fa0000

08012e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8012e00:	b510      	push	{r4, lr}
 8012e02:	4604      	mov	r4, r0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012e04:	4b05      	ldr	r3, [pc, #20]	@ (8012e1c <HAL_NVIC_SetPriority+0x1c>)
 8012e06:	68d8      	ldr	r0, [r3, #12]
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012e08:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8012e0c:	f7ff ffc6 	bl	8012d9c <NVIC_EncodePriority>
 8012e10:	4601      	mov	r1, r0
 8012e12:	4620      	mov	r0, r4
 8012e14:	f7ff ffb0 	bl	8012d78 <__NVIC_SetPriority>
}
 8012e18:	bd10      	pop	{r4, pc}
 8012e1a:	bf00      	nop
 8012e1c:	e000ed00 	.word	0xe000ed00

08012e20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e20:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012e22:	f7ff ff9b 	bl	8012d5c <__NVIC_EnableIRQ>
}
 8012e26:	bd08      	pop	{r3, pc}

08012e28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8012e28:	3801      	subs	r0, #1
 8012e2a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8012e2e:	d20b      	bcs.n	8012e48 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8012e30:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8012e34:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012e36:	4a05      	ldr	r2, [pc, #20]	@ (8012e4c <HAL_SYSTICK_Config+0x24>)
 8012e38:	21f0      	movs	r1, #240	@ 0xf0
 8012e3a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8012e3e:	2000      	movs	r0, #0
 8012e40:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8012e42:	2207      	movs	r2, #7
 8012e44:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8012e46:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8012e48:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8012e4a:	4770      	bx	lr
 8012e4c:	e000ed00 	.word	0xe000ed00

08012e50 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8012e50:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8012e54:	4b04      	ldr	r3, [pc, #16]	@ (8012e68 <HAL_MPU_Disable+0x18>)
 8012e56:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e58:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8012e5c:	625a      	str	r2, [r3, #36]	@ 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8012e5e:	2200      	movs	r2, #0
 8012e60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8012e64:	4770      	bx	lr
 8012e66:	bf00      	nop
 8012e68:	e000ed00 	.word	0xe000ed00

08012e6c <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8012e6c:	f040 0001 	orr.w	r0, r0, #1
 8012e70:	4b05      	ldr	r3, [pc, #20]	@ (8012e88 <HAL_MPU_Enable+0x1c>)
 8012e72:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8012e76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012e78:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8012e7c:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8012e7e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8012e82:	f3bf 8f6f 	isb	sy
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8012e86:	4770      	bx	lr
 8012e88:	e000ed00 	.word	0xe000ed00

08012e8c <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8012e8c:	7842      	ldrb	r2, [r0, #1]
 8012e8e:	4b16      	ldr	r3, [pc, #88]	@ (8012ee8 <HAL_MPU_ConfigRegion+0x5c>)
 8012e90:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  if ((MPU_Init->Enable) != RESET)
 8012e94:	7803      	ldrb	r3, [r0, #0]
 8012e96:	b1fb      	cbz	r3, 8012ed8 <HAL_MPU_ConfigRegion+0x4c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8012e98:	6843      	ldr	r3, [r0, #4]
 8012e9a:	4a13      	ldr	r2, [pc, #76]	@ (8012ee8 <HAL_MPU_ConfigRegion+0x5c>)
 8012e9c:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012ea0:	7b01      	ldrb	r1, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012ea2:	7ac3      	ldrb	r3, [r0, #11]
 8012ea4:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012ea6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8012eaa:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012eac:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012eb0:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8012eb2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8012eb6:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012eb8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012ebc:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8012ebe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8012ec2:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012ec4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012ec8:	7a01      	ldrb	r1, [r0, #8]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8012eca:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8012ece:	7801      	ldrb	r1, [r0, #0]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012ed0:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012ed2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
 8012ed6:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8012ed8:	4b03      	ldr	r3, [pc, #12]	@ (8012ee8 <HAL_MPU_ConfigRegion+0x5c>)
 8012eda:	2200      	movs	r2, #0
 8012edc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    MPU->RASR = 0x00;
 8012ee0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  }
}
 8012ee4:	4770      	bx	lr
 8012ee6:	bf00      	nop
 8012ee8:	e000ed00 	.word	0xe000ed00

08012eec <HAL_GPIO_Init>:
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8012eec:	2300      	movs	r3, #0
 8012eee:	2b0f      	cmp	r3, #15
 8012ef0:	f200 80e4 	bhi.w	80130bc <HAL_GPIO_Init+0x1d0>
{
 8012ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ef6:	b083      	sub	sp, #12
 8012ef8:	e03a      	b.n	8012f70 <HAL_GPIO_Init+0x84>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8012efa:	2209      	movs	r2, #9
 8012efc:	e000      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 8012efe:	2200      	movs	r2, #0
 8012f00:	40aa      	lsls	r2, r5
 8012f02:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2] = temp;
 8012f04:	3402      	adds	r4, #2
 8012f06:	4d6e      	ldr	r5, [pc, #440]	@ (80130c0 <HAL_GPIO_Init+0x1d4>)
 8012f08:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8012f0c:	4a6d      	ldr	r2, [pc, #436]	@ (80130c4 <HAL_GPIO_Init+0x1d8>)
 8012f0e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8012f10:	ea6f 020c 	mvn.w	r2, ip
 8012f14:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8012f18:	684e      	ldr	r6, [r1, #4]
 8012f1a:	f416 3f80 	tst.w	r6, #65536	@ 0x10000
 8012f1e:	d001      	beq.n	8012f24 <HAL_GPIO_Init+0x38>
        {
          temp |= iocurrent;
 8012f20:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->IMR = temp;
 8012f24:	4c67      	ldr	r4, [pc, #412]	@ (80130c4 <HAL_GPIO_Init+0x1d8>)
 8012f26:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8012f28:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8012f2a:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8012f2e:	684e      	ldr	r6, [r1, #4]
 8012f30:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
 8012f34:	d001      	beq.n	8012f3a <HAL_GPIO_Init+0x4e>
        {
          temp |= iocurrent;
 8012f36:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8012f3a:	4c62      	ldr	r4, [pc, #392]	@ (80130c4 <HAL_GPIO_Init+0x1d8>)
 8012f3c:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8012f3e:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8012f40:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8012f44:	684e      	ldr	r6, [r1, #4]
 8012f46:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
 8012f4a:	d001      	beq.n	8012f50 <HAL_GPIO_Init+0x64>
        {
          temp |= iocurrent;
 8012f4c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8012f50:	4c5c      	ldr	r4, [pc, #368]	@ (80130c4 <HAL_GPIO_Init+0x1d8>)
 8012f52:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8012f54:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8012f56:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8012f58:	684d      	ldr	r5, [r1, #4]
 8012f5a:	f415 1f00 	tst.w	r5, #2097152	@ 0x200000
 8012f5e:	d001      	beq.n	8012f64 <HAL_GPIO_Init+0x78>
        {
          temp |= iocurrent;
 8012f60:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->FTSR = temp;
 8012f64:	4c57      	ldr	r4, [pc, #348]	@ (80130c4 <HAL_GPIO_Init+0x1d8>)
 8012f66:	60e2      	str	r2, [r4, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8012f68:	3301      	adds	r3, #1
 8012f6a:	2b0f      	cmp	r3, #15
 8012f6c:	f200 80a4 	bhi.w	80130b8 <HAL_GPIO_Init+0x1cc>
    ioposition = ((uint32_t)0x01) << position;
 8012f70:	2201      	movs	r2, #1
 8012f72:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8012f74:	680c      	ldr	r4, [r1, #0]
 8012f76:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8012f7a:	ea32 0404 	bics.w	r4, r2, r4
 8012f7e:	d1f3      	bne.n	8012f68 <HAL_GPIO_Init+0x7c>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8012f80:	684c      	ldr	r4, [r1, #4]
 8012f82:	1e65      	subs	r5, r4, #1
 8012f84:	2c11      	cmp	r4, #17
 8012f86:	bf18      	it	ne
 8012f88:	2d01      	cmpne	r5, #1
 8012f8a:	d901      	bls.n	8012f90 <HAL_GPIO_Init+0xa4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012f8c:	2c12      	cmp	r4, #18
 8012f8e:	d112      	bne.n	8012fb6 <HAL_GPIO_Init+0xca>
        temp = GPIOx->OSPEEDR; 
 8012f90:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8012f92:	005e      	lsls	r6, r3, #1
 8012f94:	2403      	movs	r4, #3
 8012f96:	40b4      	lsls	r4, r6
 8012f98:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2));
 8012f9c:	68cc      	ldr	r4, [r1, #12]
 8012f9e:	40b4      	lsls	r4, r6
 8012fa0:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8012fa2:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8012fa4:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8012fa6:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8012faa:	684a      	ldr	r2, [r1, #4]
 8012fac:	f3c2 1200 	ubfx	r2, r2, #4, #1
 8012fb0:	409a      	lsls	r2, r3
 8012fb2:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 8012fb4:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 8012fb6:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8012fb8:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8012fbc:	2203      	movs	r2, #3
 8012fbe:	fa02 f20e 	lsl.w	r2, r2, lr
 8012fc2:	43d4      	mvns	r4, r2
 8012fc4:	ea25 0502 	bic.w	r5, r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8012fc8:	688a      	ldr	r2, [r1, #8]
 8012fca:	fa02 f20e 	lsl.w	r2, r2, lr
 8012fce:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8012fd0:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8012fd2:	684a      	ldr	r2, [r1, #4]
 8012fd4:	2a12      	cmp	r2, #18
 8012fd6:	bf18      	it	ne
 8012fd8:	2a02      	cmpne	r2, #2
 8012fda:	d10f      	bne.n	8012ffc <HAL_GPIO_Init+0x110>
        temp = GPIOx->AFR[position >> 3];
 8012fdc:	08dd      	lsrs	r5, r3, #3
 8012fde:	3508      	adds	r5, #8
 8012fe0:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8012fe4:	f003 0607 	and.w	r6, r3, #7
 8012fe8:	00b6      	lsls	r6, r6, #2
 8012fea:	220f      	movs	r2, #15
 8012fec:	40b2      	lsls	r2, r6
 8012fee:	ea27 0702 	bic.w	r7, r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8012ff2:	690a      	ldr	r2, [r1, #16]
 8012ff4:	40b2      	lsls	r2, r6
 8012ff6:	433a      	orrs	r2, r7
        GPIOx->AFR[position >> 3] = temp;
 8012ff8:	f840 2025 	str.w	r2, [r0, r5, lsl #2]
      temp = GPIOx->MODER;
 8012ffc:	6802      	ldr	r2, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8012ffe:	4014      	ands	r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8013000:	684a      	ldr	r2, [r1, #4]
 8013002:	f002 0203 	and.w	r2, r2, #3
 8013006:	fa02 f20e 	lsl.w	r2, r2, lr
 801300a:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 801300c:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 801300e:	684a      	ldr	r2, [r1, #4]
 8013010:	f012 5f80 	tst.w	r2, #268435456	@ 0x10000000
 8013014:	d0a8      	beq.n	8012f68 <HAL_GPIO_Init+0x7c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013016:	4a2c      	ldr	r2, [pc, #176]	@ (80130c8 <HAL_GPIO_Init+0x1dc>)
 8013018:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 801301a:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 801301e:	6454      	str	r4, [r2, #68]	@ 0x44
 8013020:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8013022:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8013026:	9201      	str	r2, [sp, #4]
 8013028:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2];
 801302a:	089c      	lsrs	r4, r3, #2
 801302c:	1ca5      	adds	r5, r4, #2
 801302e:	4a24      	ldr	r2, [pc, #144]	@ (80130c0 <HAL_GPIO_Init+0x1d4>)
 8013030:	f852 6025 	ldr.w	r6, [r2, r5, lsl #2]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8013034:	f003 0503 	and.w	r5, r3, #3
 8013038:	00ad      	lsls	r5, r5, #2
 801303a:	220f      	movs	r2, #15
 801303c:	40aa      	lsls	r2, r5
 801303e:	ea26 0602 	bic.w	r6, r6, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8013042:	4a22      	ldr	r2, [pc, #136]	@ (80130cc <HAL_GPIO_Init+0x1e0>)
 8013044:	4290      	cmp	r0, r2
 8013046:	f43f af5a 	beq.w	8012efe <HAL_GPIO_Init+0x12>
 801304a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801304e:	4290      	cmp	r0, r2
 8013050:	d022      	beq.n	8013098 <HAL_GPIO_Init+0x1ac>
 8013052:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013056:	4290      	cmp	r0, r2
 8013058:	d020      	beq.n	801309c <HAL_GPIO_Init+0x1b0>
 801305a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801305e:	4290      	cmp	r0, r2
 8013060:	d01e      	beq.n	80130a0 <HAL_GPIO_Init+0x1b4>
 8013062:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013066:	4290      	cmp	r0, r2
 8013068:	d01c      	beq.n	80130a4 <HAL_GPIO_Init+0x1b8>
 801306a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801306e:	4290      	cmp	r0, r2
 8013070:	d01a      	beq.n	80130a8 <HAL_GPIO_Init+0x1bc>
 8013072:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013076:	4290      	cmp	r0, r2
 8013078:	d018      	beq.n	80130ac <HAL_GPIO_Init+0x1c0>
 801307a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801307e:	4290      	cmp	r0, r2
 8013080:	d016      	beq.n	80130b0 <HAL_GPIO_Init+0x1c4>
 8013082:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8013086:	4290      	cmp	r0, r2
 8013088:	d014      	beq.n	80130b4 <HAL_GPIO_Init+0x1c8>
 801308a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 801308e:	4290      	cmp	r0, r2
 8013090:	f43f af33 	beq.w	8012efa <HAL_GPIO_Init+0xe>
 8013094:	220a      	movs	r2, #10
 8013096:	e733      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 8013098:	2201      	movs	r2, #1
 801309a:	e731      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 801309c:	2202      	movs	r2, #2
 801309e:	e72f      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130a0:	2203      	movs	r2, #3
 80130a2:	e72d      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130a4:	2204      	movs	r2, #4
 80130a6:	e72b      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130a8:	2205      	movs	r2, #5
 80130aa:	e729      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130ac:	2206      	movs	r2, #6
 80130ae:	e727      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130b0:	2207      	movs	r2, #7
 80130b2:	e725      	b.n	8012f00 <HAL_GPIO_Init+0x14>
 80130b4:	2208      	movs	r2, #8
 80130b6:	e723      	b.n	8012f00 <HAL_GPIO_Init+0x14>
      }
    }
  }
}
 80130b8:	b003      	add	sp, #12
 80130ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80130bc:	4770      	bx	lr
 80130be:	bf00      	nop
 80130c0:	40013800 	.word	0x40013800
 80130c4:	40013c00 	.word	0x40013c00
 80130c8:	40023800 	.word	0x40023800
 80130cc:	40020000 	.word	0x40020000

080130d0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80130d0:	6903      	ldr	r3, [r0, #16]
 80130d2:	4219      	tst	r1, r3
 80130d4:	d001      	beq.n	80130da <HAL_GPIO_ReadPin+0xa>
  {
    bitstatus = GPIO_PIN_SET;
 80130d6:	2001      	movs	r0, #1
 80130d8:	4770      	bx	lr
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80130da:	2000      	movs	r0, #0
  }
  return bitstatus;
}
 80130dc:	4770      	bx	lr

080130de <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80130de:	b10a      	cbz	r2, 80130e4 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80130e0:	6181      	str	r1, [r0, #24]
 80130e2:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80130e4:	0409      	lsls	r1, r1, #16
 80130e6:	6181      	str	r1, [r0, #24]
  }
}
 80130e8:	4770      	bx	lr
	...

080130ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80130ec:	b510      	push	{r4, lr}
 80130ee:	b082      	sub	sp, #8
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80130f0:	4b1b      	ldr	r3, [pc, #108]	@ (8013160 <HAL_PWREx_EnableOverDrive+0x74>)
 80130f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80130f4:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80130f8:	641a      	str	r2, [r3, #64]	@ 0x40
 80130fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8013100:	9301      	str	r3, [sp, #4]
 8013102:	9b01      	ldr	r3, [sp, #4]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8013104:	4a17      	ldr	r2, [pc, #92]	@ (8013164 <HAL_PWREx_EnableOverDrive+0x78>)
 8013106:	6813      	ldr	r3, [r2, #0]
 8013108:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801310c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801310e:	f7ff fe1f 	bl	8012d50 <HAL_GetTick>
 8013112:	4604      	mov	r4, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8013114:	4b13      	ldr	r3, [pc, #76]	@ (8013164 <HAL_PWREx_EnableOverDrive+0x78>)
 8013116:	685b      	ldr	r3, [r3, #4]
 8013118:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 801311c:	d108      	bne.n	8013130 <HAL_PWREx_EnableOverDrive+0x44>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801311e:	f7ff fe17 	bl	8012d50 <HAL_GetTick>
 8013122:	1b00      	subs	r0, r0, r4
 8013124:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8013128:	d9f4      	bls.n	8013114 <HAL_PWREx_EnableOverDrive+0x28>
    {
      return HAL_TIMEOUT;
 801312a:	2003      	movs	r0, #3
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
}
 801312c:	b002      	add	sp, #8
 801312e:	bd10      	pop	{r4, pc}
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8013130:	4a0c      	ldr	r2, [pc, #48]	@ (8013164 <HAL_PWREx_EnableOverDrive+0x78>)
 8013132:	6813      	ldr	r3, [r2, #0]
 8013134:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8013138:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 801313a:	f7ff fe09 	bl	8012d50 <HAL_GetTick>
 801313e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8013140:	4b08      	ldr	r3, [pc, #32]	@ (8013164 <HAL_PWREx_EnableOverDrive+0x78>)
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8013148:	d107      	bne.n	801315a <HAL_PWREx_EnableOverDrive+0x6e>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 801314a:	f7ff fe01 	bl	8012d50 <HAL_GetTick>
 801314e:	1b00      	subs	r0, r0, r4
 8013150:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8013154:	d9f4      	bls.n	8013140 <HAL_PWREx_EnableOverDrive+0x54>
      return HAL_TIMEOUT;
 8013156:	2003      	movs	r0, #3
 8013158:	e7e8      	b.n	801312c <HAL_PWREx_EnableOverDrive+0x40>
  return HAL_OK;
 801315a:	2000      	movs	r0, #0
 801315c:	e7e6      	b.n	801312c <HAL_PWREx_EnableOverDrive+0x40>
 801315e:	bf00      	nop
 8013160:	40023800 	.word	0x40023800
 8013164:	40007000 	.word	0x40007000

08013168 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013168:	2800      	cmp	r0, #0
 801316a:	f000 8206 	beq.w	801357a <HAL_RCC_OscConfig+0x412>
{
 801316e:	b570      	push	{r4, r5, r6, lr}
 8013170:	b082      	sub	sp, #8
 8013172:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013174:	6803      	ldr	r3, [r0, #0]
 8013176:	f013 0f01 	tst.w	r3, #1
 801317a:	d029      	beq.n	80131d0 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 801317c:	4b95      	ldr	r3, [pc, #596]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 801317e:	689b      	ldr	r3, [r3, #8]
 8013180:	f003 030c 	and.w	r3, r3, #12
 8013184:	2b04      	cmp	r3, #4
 8013186:	d01a      	beq.n	80131be <HAL_RCC_OscConfig+0x56>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8013188:	4b92      	ldr	r3, [pc, #584]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 801318a:	689b      	ldr	r3, [r3, #8]
 801318c:	f003 030c 	and.w	r3, r3, #12
 8013190:	2b08      	cmp	r3, #8
 8013192:	d00f      	beq.n	80131b4 <HAL_RCC_OscConfig+0x4c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013194:	6863      	ldr	r3, [r4, #4]
 8013196:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801319a:	d040      	beq.n	801321e <HAL_RCC_OscConfig+0xb6>
 801319c:	2b00      	cmp	r3, #0
 801319e:	d154      	bne.n	801324a <HAL_RCC_OscConfig+0xe2>
 80131a0:	4b8c      	ldr	r3, [pc, #560]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80131a8:	601a      	str	r2, [r3, #0]
 80131aa:	681a      	ldr	r2, [r3, #0]
 80131ac:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80131b0:	601a      	str	r2, [r3, #0]
 80131b2:	e039      	b.n	8013228 <HAL_RCC_OscConfig+0xc0>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80131b4:	4b87      	ldr	r3, [pc, #540]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131b6:	685b      	ldr	r3, [r3, #4]
 80131b8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80131bc:	d0ea      	beq.n	8013194 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80131be:	4b85      	ldr	r3, [pc, #532]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80131c6:	d003      	beq.n	80131d0 <HAL_RCC_OscConfig+0x68>
 80131c8:	6863      	ldr	r3, [r4, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f000 81d7 	beq.w	801357e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80131d0:	6823      	ldr	r3, [r4, #0]
 80131d2:	f013 0f02 	tst.w	r3, #2
 80131d6:	d074      	beq.n	80132c2 <HAL_RCC_OscConfig+0x15a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80131d8:	4b7e      	ldr	r3, [pc, #504]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131da:	689b      	ldr	r3, [r3, #8]
 80131dc:	f013 0f0c 	tst.w	r3, #12
 80131e0:	d05e      	beq.n	80132a0 <HAL_RCC_OscConfig+0x138>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80131e2:	4b7c      	ldr	r3, [pc, #496]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131e4:	689b      	ldr	r3, [r3, #8]
 80131e6:	f003 030c 	and.w	r3, r3, #12
 80131ea:	2b08      	cmp	r3, #8
 80131ec:	d053      	beq.n	8013296 <HAL_RCC_OscConfig+0x12e>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80131ee:	68e3      	ldr	r3, [r4, #12]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	f000 8089 	beq.w	8013308 <HAL_RCC_OscConfig+0x1a0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80131f6:	4a77      	ldr	r2, [pc, #476]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80131f8:	6813      	ldr	r3, [r2, #0]
 80131fa:	f043 0301 	orr.w	r3, r3, #1
 80131fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013200:	f7ff fda6 	bl	8012d50 <HAL_GetTick>
 8013204:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013206:	4b73      	ldr	r3, [pc, #460]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	f013 0f02 	tst.w	r3, #2
 801320e:	d172      	bne.n	80132f6 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013210:	f7ff fd9e 	bl	8012d50 <HAL_GetTick>
 8013214:	1b40      	subs	r0, r0, r5
 8013216:	2802      	cmp	r0, #2
 8013218:	d9f5      	bls.n	8013206 <HAL_RCC_OscConfig+0x9e>
          {
            return HAL_TIMEOUT;
 801321a:	2003      	movs	r0, #3
 801321c:	e1b4      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801321e:	4a6d      	ldr	r2, [pc, #436]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013220:	6813      	ldr	r3, [r2, #0]
 8013222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013226:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013228:	6863      	ldr	r3, [r4, #4]
 801322a:	b32b      	cbz	r3, 8013278 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 801322c:	f7ff fd90 	bl	8012d50 <HAL_GetTick>
 8013230:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013232:	4b68      	ldr	r3, [pc, #416]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013234:	681b      	ldr	r3, [r3, #0]
 8013236:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 801323a:	d1c9      	bne.n	80131d0 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801323c:	f7ff fd88 	bl	8012d50 <HAL_GetTick>
 8013240:	1b40      	subs	r0, r0, r5
 8013242:	2864      	cmp	r0, #100	@ 0x64
 8013244:	d9f5      	bls.n	8013232 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
 8013246:	2003      	movs	r0, #3
 8013248:	e19e      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801324a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801324e:	d009      	beq.n	8013264 <HAL_RCC_OscConfig+0xfc>
 8013250:	4b60      	ldr	r3, [pc, #384]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013252:	681a      	ldr	r2, [r3, #0]
 8013254:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8013258:	601a      	str	r2, [r3, #0]
 801325a:	681a      	ldr	r2, [r3, #0]
 801325c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8013260:	601a      	str	r2, [r3, #0]
 8013262:	e7e1      	b.n	8013228 <HAL_RCC_OscConfig+0xc0>
 8013264:	4b5b      	ldr	r3, [pc, #364]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013266:	681a      	ldr	r2, [r3, #0]
 8013268:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	681a      	ldr	r2, [r3, #0]
 8013270:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8013274:	601a      	str	r2, [r3, #0]
 8013276:	e7d7      	b.n	8013228 <HAL_RCC_OscConfig+0xc0>
        tickstart = HAL_GetTick();
 8013278:	f7ff fd6a 	bl	8012d50 <HAL_GetTick>
 801327c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801327e:	4b55      	ldr	r3, [pc, #340]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8013286:	d0a3      	beq.n	80131d0 <HAL_RCC_OscConfig+0x68>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013288:	f7ff fd62 	bl	8012d50 <HAL_GetTick>
 801328c:	1b40      	subs	r0, r0, r5
 801328e:	2864      	cmp	r0, #100	@ 0x64
 8013290:	d9f5      	bls.n	801327e <HAL_RCC_OscConfig+0x116>
            return HAL_TIMEOUT;
 8013292:	2003      	movs	r0, #3
 8013294:	e178      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8013296:	4b4f      	ldr	r3, [pc, #316]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 801329e:	d1a6      	bne.n	80131ee <HAL_RCC_OscConfig+0x86>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80132a0:	4b4c      	ldr	r3, [pc, #304]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80132a2:	681b      	ldr	r3, [r3, #0]
 80132a4:	f013 0f02 	tst.w	r3, #2
 80132a8:	d003      	beq.n	80132b2 <HAL_RCC_OscConfig+0x14a>
 80132aa:	68e3      	ldr	r3, [r4, #12]
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	f040 8168 	bne.w	8013582 <HAL_RCC_OscConfig+0x41a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80132b2:	4a48      	ldr	r2, [pc, #288]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80132b4:	6813      	ldr	r3, [r2, #0]
 80132b6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80132ba:	6921      	ldr	r1, [r4, #16]
 80132bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80132c0:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80132c2:	6823      	ldr	r3, [r4, #0]
 80132c4:	f013 0f08 	tst.w	r3, #8
 80132c8:	d046      	beq.n	8013358 <HAL_RCC_OscConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80132ca:	6963      	ldr	r3, [r4, #20]
 80132cc:	b383      	cbz	r3, 8013330 <HAL_RCC_OscConfig+0x1c8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80132ce:	4a41      	ldr	r2, [pc, #260]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80132d0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80132d2:	f043 0301 	orr.w	r3, r3, #1
 80132d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80132d8:	f7ff fd3a 	bl	8012d50 <HAL_GetTick>
 80132dc:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80132de:	4b3d      	ldr	r3, [pc, #244]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80132e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132e2:	f013 0f02 	tst.w	r3, #2
 80132e6:	d137      	bne.n	8013358 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80132e8:	f7ff fd32 	bl	8012d50 <HAL_GetTick>
 80132ec:	1b40      	subs	r0, r0, r5
 80132ee:	2802      	cmp	r0, #2
 80132f0:	d9f5      	bls.n	80132de <HAL_RCC_OscConfig+0x176>
        {
          return HAL_TIMEOUT;
 80132f2:	2003      	movs	r0, #3
 80132f4:	e148      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80132f6:	4a37      	ldr	r2, [pc, #220]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 80132f8:	6813      	ldr	r3, [r2, #0]
 80132fa:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80132fe:	6921      	ldr	r1, [r4, #16]
 8013300:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8013304:	6013      	str	r3, [r2, #0]
 8013306:	e7dc      	b.n	80132c2 <HAL_RCC_OscConfig+0x15a>
        __HAL_RCC_HSI_DISABLE();
 8013308:	4a32      	ldr	r2, [pc, #200]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 801330a:	6813      	ldr	r3, [r2, #0]
 801330c:	f023 0301 	bic.w	r3, r3, #1
 8013310:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8013312:	f7ff fd1d 	bl	8012d50 <HAL_GetTick>
 8013316:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8013318:	4b2e      	ldr	r3, [pc, #184]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 801331a:	681b      	ldr	r3, [r3, #0]
 801331c:	f013 0f02 	tst.w	r3, #2
 8013320:	d0cf      	beq.n	80132c2 <HAL_RCC_OscConfig+0x15a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8013322:	f7ff fd15 	bl	8012d50 <HAL_GetTick>
 8013326:	1b40      	subs	r0, r0, r5
 8013328:	2802      	cmp	r0, #2
 801332a:	d9f5      	bls.n	8013318 <HAL_RCC_OscConfig+0x1b0>
            return HAL_TIMEOUT;
 801332c:	2003      	movs	r0, #3
 801332e:	e12b      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8013330:	4a28      	ldr	r2, [pc, #160]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013332:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8013334:	f023 0301 	bic.w	r3, r3, #1
 8013338:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801333a:	f7ff fd09 	bl	8012d50 <HAL_GetTick>
 801333e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8013340:	4b24      	ldr	r3, [pc, #144]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013344:	f013 0f02 	tst.w	r3, #2
 8013348:	d006      	beq.n	8013358 <HAL_RCC_OscConfig+0x1f0>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801334a:	f7ff fd01 	bl	8012d50 <HAL_GetTick>
 801334e:	1b40      	subs	r0, r0, r5
 8013350:	2802      	cmp	r0, #2
 8013352:	d9f5      	bls.n	8013340 <HAL_RCC_OscConfig+0x1d8>
        {
          return HAL_TIMEOUT;
 8013354:	2003      	movs	r0, #3
 8013356:	e117      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	f013 0f04 	tst.w	r3, #4
 801335e:	d07d      	beq.n	801345c <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8013360:	4b1c      	ldr	r3, [pc, #112]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013364:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8013368:	d11e      	bne.n	80133a8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 801336a:	4b1a      	ldr	r3, [pc, #104]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 801336c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801336e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8013372:	641a      	str	r2, [r3, #64]	@ 0x40
 8013374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801337a:	9301      	str	r3, [sp, #4]
 801337c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 801337e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8013380:	4b15      	ldr	r3, [pc, #84]	@ (80133d8 <HAL_RCC_OscConfig+0x270>)
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8013388:	d010      	beq.n	80133ac <HAL_RCC_OscConfig+0x244>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801338a:	68a3      	ldr	r3, [r4, #8]
 801338c:	2b01      	cmp	r3, #1
 801338e:	d025      	beq.n	80133dc <HAL_RCC_OscConfig+0x274>
 8013390:	2b00      	cmp	r3, #0
 8013392:	d13b      	bne.n	801340c <HAL_RCC_OscConfig+0x2a4>
 8013394:	4b0f      	ldr	r3, [pc, #60]	@ (80133d4 <HAL_RCC_OscConfig+0x26c>)
 8013396:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013398:	f022 0201 	bic.w	r2, r2, #1
 801339c:	671a      	str	r2, [r3, #112]	@ 0x70
 801339e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80133a0:	f022 0204 	bic.w	r2, r2, #4
 80133a4:	671a      	str	r2, [r3, #112]	@ 0x70
 80133a6:	e01e      	b.n	80133e6 <HAL_RCC_OscConfig+0x27e>
  FlagStatus pwrclkchanged = RESET;
 80133a8:	2500      	movs	r5, #0
 80133aa:	e7e9      	b.n	8013380 <HAL_RCC_OscConfig+0x218>
      PWR->CR1 |= PWR_CR1_DBP;
 80133ac:	4a0a      	ldr	r2, [pc, #40]	@ (80133d8 <HAL_RCC_OscConfig+0x270>)
 80133ae:	6813      	ldr	r3, [r2, #0]
 80133b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80133b4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80133b6:	f7ff fccb 	bl	8012d50 <HAL_GetTick>
 80133ba:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80133bc:	4b06      	ldr	r3, [pc, #24]	@ (80133d8 <HAL_RCC_OscConfig+0x270>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80133c4:	d1e1      	bne.n	801338a <HAL_RCC_OscConfig+0x222>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80133c6:	f7ff fcc3 	bl	8012d50 <HAL_GetTick>
 80133ca:	1b80      	subs	r0, r0, r6
 80133cc:	2864      	cmp	r0, #100	@ 0x64
 80133ce:	d9f5      	bls.n	80133bc <HAL_RCC_OscConfig+0x254>
          return HAL_TIMEOUT;
 80133d0:	2003      	movs	r0, #3
 80133d2:	e0d9      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 80133d4:	40023800 	.word	0x40023800
 80133d8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80133dc:	4a72      	ldr	r2, [pc, #456]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 80133de:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80133e0:	f043 0301 	orr.w	r3, r3, #1
 80133e4:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80133e6:	68a3      	ldr	r3, [r4, #8]
 80133e8:	b333      	cbz	r3, 8013438 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80133ea:	f7ff fcb1 	bl	8012d50 <HAL_GetTick>
 80133ee:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80133f0:	4b6d      	ldr	r3, [pc, #436]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 80133f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133f4:	f013 0f02 	tst.w	r3, #2
 80133f8:	d12f      	bne.n	801345a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80133fa:	f7ff fca9 	bl	8012d50 <HAL_GetTick>
 80133fe:	1b80      	subs	r0, r0, r6
 8013400:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013404:	4298      	cmp	r0, r3
 8013406:	d9f3      	bls.n	80133f0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8013408:	2003      	movs	r0, #3
 801340a:	e0bd      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801340c:	2b05      	cmp	r3, #5
 801340e:	d009      	beq.n	8013424 <HAL_RCC_OscConfig+0x2bc>
 8013410:	4b65      	ldr	r3, [pc, #404]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013412:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013414:	f022 0201 	bic.w	r2, r2, #1
 8013418:	671a      	str	r2, [r3, #112]	@ 0x70
 801341a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801341c:	f022 0204 	bic.w	r2, r2, #4
 8013420:	671a      	str	r2, [r3, #112]	@ 0x70
 8013422:	e7e0      	b.n	80133e6 <HAL_RCC_OscConfig+0x27e>
 8013424:	4b60      	ldr	r3, [pc, #384]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013426:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013428:	f042 0204 	orr.w	r2, r2, #4
 801342c:	671a      	str	r2, [r3, #112]	@ 0x70
 801342e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8013430:	f042 0201 	orr.w	r2, r2, #1
 8013434:	671a      	str	r2, [r3, #112]	@ 0x70
 8013436:	e7d6      	b.n	80133e6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8013438:	f7ff fc8a 	bl	8012d50 <HAL_GetTick>
 801343c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801343e:	4b5a      	ldr	r3, [pc, #360]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013442:	f013 0f02 	tst.w	r3, #2
 8013446:	d008      	beq.n	801345a <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8013448:	f7ff fc82 	bl	8012d50 <HAL_GetTick>
 801344c:	1b80      	subs	r0, r0, r6
 801344e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013452:	4298      	cmp	r0, r3
 8013454:	d9f3      	bls.n	801343e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 8013456:	2003      	movs	r0, #3
 8013458:	e096      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 801345a:	b9fd      	cbnz	r5, 801349c <HAL_RCC_OscConfig+0x334>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801345c:	69a3      	ldr	r3, [r4, #24]
 801345e:	2b00      	cmp	r3, #0
 8013460:	f000 8091 	beq.w	8013586 <HAL_RCC_OscConfig+0x41e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8013464:	4a50      	ldr	r2, [pc, #320]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013466:	6892      	ldr	r2, [r2, #8]
 8013468:	f002 020c 	and.w	r2, r2, #12
 801346c:	2a08      	cmp	r2, #8
 801346e:	d059      	beq.n	8013524 <HAL_RCC_OscConfig+0x3bc>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8013470:	2b02      	cmp	r3, #2
 8013472:	d019      	beq.n	80134a8 <HAL_RCC_OscConfig+0x340>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8013474:	4a4c      	ldr	r2, [pc, #304]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013476:	6813      	ldr	r3, [r2, #0]
 8013478:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801347e:	f7ff fc67 	bl	8012d50 <HAL_GetTick>
 8013482:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8013484:	4b48      	ldr	r3, [pc, #288]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801348c:	d048      	beq.n	8013520 <HAL_RCC_OscConfig+0x3b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801348e:	f7ff fc5f 	bl	8012d50 <HAL_GetTick>
 8013492:	1b00      	subs	r0, r0, r4
 8013494:	2802      	cmp	r0, #2
 8013496:	d9f5      	bls.n	8013484 <HAL_RCC_OscConfig+0x31c>
          {
            return HAL_TIMEOUT;
 8013498:	2003      	movs	r0, #3
 801349a:	e075      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      __HAL_RCC_PWR_CLK_DISABLE();
 801349c:	4a42      	ldr	r2, [pc, #264]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 801349e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80134a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80134a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80134a6:	e7d9      	b.n	801345c <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80134a8:	4a3f      	ldr	r2, [pc, #252]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 80134aa:	6813      	ldr	r3, [r2, #0]
 80134ac:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80134b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80134b2:	f7ff fc4d 	bl	8012d50 <HAL_GetTick>
 80134b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80134b8:	4b3b      	ldr	r3, [pc, #236]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 80134ba:	681b      	ldr	r3, [r3, #0]
 80134bc:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80134c0:	d006      	beq.n	80134d0 <HAL_RCC_OscConfig+0x368>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80134c2:	f7ff fc45 	bl	8012d50 <HAL_GetTick>
 80134c6:	1b40      	subs	r0, r0, r5
 80134c8:	2802      	cmp	r0, #2
 80134ca:	d9f5      	bls.n	80134b8 <HAL_RCC_OscConfig+0x350>
            return HAL_TIMEOUT;
 80134cc:	2003      	movs	r0, #3
 80134ce:	e05b      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80134d0:	69e3      	ldr	r3, [r4, #28]
 80134d2:	6a22      	ldr	r2, [r4, #32]
 80134d4:	4313      	orrs	r3, r2
 80134d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80134d8:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80134dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80134de:	0852      	lsrs	r2, r2, #1
 80134e0:	3a01      	subs	r2, #1
 80134e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80134e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80134e8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80134ec:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80134ee:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80134f2:	4a2d      	ldr	r2, [pc, #180]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 80134f4:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 80134f6:	6813      	ldr	r3, [r2, #0]
 80134f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80134fc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80134fe:	f7ff fc27 	bl	8012d50 <HAL_GetTick>
 8013502:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8013504:	4b28      	ldr	r3, [pc, #160]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 801350c:	d106      	bne.n	801351c <HAL_RCC_OscConfig+0x3b4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801350e:	f7ff fc1f 	bl	8012d50 <HAL_GetTick>
 8013512:	1b00      	subs	r0, r0, r4
 8013514:	2802      	cmp	r0, #2
 8013516:	d9f5      	bls.n	8013504 <HAL_RCC_OscConfig+0x39c>
            return HAL_TIMEOUT;
 8013518:	2003      	movs	r0, #3
 801351a:	e035      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 801351c:	2000      	movs	r0, #0
 801351e:	e033      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 8013520:	2000      	movs	r0, #0
 8013522:	e031      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
      pll_config = RCC->PLLCFGR;
 8013524:	4a20      	ldr	r2, [pc, #128]	@ (80135a8 <HAL_RCC_OscConfig+0x440>)
 8013526:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013528:	2b01      	cmp	r3, #1
 801352a:	d02f      	beq.n	801358c <HAL_RCC_OscConfig+0x424>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801352c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8013530:	69e1      	ldr	r1, [r4, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8013532:	428b      	cmp	r3, r1
 8013534:	d12c      	bne.n	8013590 <HAL_RCC_OscConfig+0x428>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013536:	f002 033f 	and.w	r3, r2, #63	@ 0x3f
 801353a:	6a21      	ldr	r1, [r4, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801353c:	428b      	cmp	r3, r1
 801353e:	d129      	bne.n	8013594 <HAL_RCC_OscConfig+0x42c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013540:	6a61      	ldr	r1, [r4, #36]	@ 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8013542:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8013546:	4013      	ands	r3, r2
 8013548:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 801354c:	d124      	bne.n	8013598 <HAL_RCC_OscConfig+0x430>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 801354e:	f402 3140 	and.w	r1, r2, #196608	@ 0x30000
 8013552:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8013554:	085b      	lsrs	r3, r3, #1
 8013556:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8013558:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 801355c:	d11e      	bne.n	801359c <HAL_RCC_OscConfig+0x434>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 801355e:	f002 6370 	and.w	r3, r2, #251658240	@ 0xf000000
 8013562:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8013564:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 8013568:	d11a      	bne.n	80135a0 <HAL_RCC_OscConfig+0x438>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 801356a:	f002 42e0 	and.w	r2, r2, #1879048192	@ 0x70000000
 801356e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8013570:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
 8013574:	d116      	bne.n	80135a4 <HAL_RCC_OscConfig+0x43c>
  return HAL_OK;
 8013576:	2000      	movs	r0, #0
 8013578:	e006      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
    return HAL_ERROR;
 801357a:	2001      	movs	r0, #1
}
 801357c:	4770      	bx	lr
        return HAL_ERROR;
 801357e:	2001      	movs	r0, #1
 8013580:	e002      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
        return HAL_ERROR;
 8013582:	2001      	movs	r0, #1
 8013584:	e000      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
  return HAL_OK;
 8013586:	2000      	movs	r0, #0
}
 8013588:	b002      	add	sp, #8
 801358a:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 801358c:	2001      	movs	r0, #1
 801358e:	e7fb      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 8013590:	2001      	movs	r0, #1
 8013592:	e7f9      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 8013594:	2001      	movs	r0, #1
 8013596:	e7f7      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 8013598:	2001      	movs	r0, #1
 801359a:	e7f5      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 801359c:	2001      	movs	r0, #1
 801359e:	e7f3      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 80135a0:	2001      	movs	r0, #1
 80135a2:	e7f1      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 80135a4:	2001      	movs	r0, #1
 80135a6:	e7ef      	b.n	8013588 <HAL_RCC_OscConfig+0x420>
 80135a8:	40023800 	.word	0x40023800

080135ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80135ac:	b508      	push	{r3, lr}
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80135ae:	4b33      	ldr	r3, [pc, #204]	@ (801367c <HAL_RCC_GetSysClockFreq+0xd0>)
 80135b0:	689b      	ldr	r3, [r3, #8]
 80135b2:	f003 030c 	and.w	r3, r3, #12
 80135b6:	2b04      	cmp	r3, #4
 80135b8:	d05b      	beq.n	8013672 <HAL_RCC_GetSysClockFreq+0xc6>
 80135ba:	2b08      	cmp	r3, #8
 80135bc:	d15b      	bne.n	8013676 <HAL_RCC_GetSysClockFreq+0xca>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80135be:	4b2f      	ldr	r3, [pc, #188]	@ (801367c <HAL_RCC_GetSysClockFreq+0xd0>)
 80135c0:	685a      	ldr	r2, [r3, #4]
 80135c2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80135c6:	685b      	ldr	r3, [r3, #4]
 80135c8:	f413 0f80 	tst.w	r3, #4194304	@ 0x400000
 80135cc:	d02c      	beq.n	8013628 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80135ce:	4b2b      	ldr	r3, [pc, #172]	@ (801367c <HAL_RCC_GetSysClockFreq+0xd0>)
 80135d0:	6858      	ldr	r0, [r3, #4]
 80135d2:	f3c0 1088 	ubfx	r0, r0, #6, #9
 80135d6:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 80135da:	ebbc 0c00 	subs.w	ip, ip, r0
 80135de:	eb6e 0e0e 	sbc.w	lr, lr, lr
 80135e2:	ea4f 138e 	mov.w	r3, lr, lsl #6
 80135e6:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 80135ea:	ea4f 118c 	mov.w	r1, ip, lsl #6
 80135ee:	ebb1 010c 	subs.w	r1, r1, ip
 80135f2:	eb63 030e 	sbc.w	r3, r3, lr
 80135f6:	00db      	lsls	r3, r3, #3
 80135f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80135fc:	00c9      	lsls	r1, r1, #3
 80135fe:	eb11 0c00 	adds.w	ip, r1, r0
 8013602:	f143 0300 	adc.w	r3, r3, #0
 8013606:	0259      	lsls	r1, r3, #9
 8013608:	2300      	movs	r3, #0
 801360a:	ea4f 204c 	mov.w	r0, ip, lsl #9
 801360e:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8013612:	f7ec fe6d 	bl	80002f0 <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8013616:	4b19      	ldr	r3, [pc, #100]	@ (801367c <HAL_RCC_GetSysClockFreq+0xd0>)
 8013618:	685b      	ldr	r3, [r3, #4]
 801361a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 801361e:	3301      	adds	r3, #1
 8013620:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8013622:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8013626:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8013628:	4b14      	ldr	r3, [pc, #80]	@ (801367c <HAL_RCC_GetSysClockFreq+0xd0>)
 801362a:	6858      	ldr	r0, [r3, #4]
 801362c:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8013630:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8013634:	ebbc 0c00 	subs.w	ip, ip, r0
 8013638:	eb6e 0e0e 	sbc.w	lr, lr, lr
 801363c:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8013640:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8013644:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8013648:	ebb1 010c 	subs.w	r1, r1, ip
 801364c:	eb63 030e 	sbc.w	r3, r3, lr
 8013650:	00db      	lsls	r3, r3, #3
 8013652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8013656:	00c9      	lsls	r1, r1, #3
 8013658:	eb11 0c00 	adds.w	ip, r1, r0
 801365c:	f143 0300 	adc.w	r3, r3, #0
 8013660:	0299      	lsls	r1, r3, #10
 8013662:	2300      	movs	r3, #0
 8013664:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8013668:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 801366c:	f7ec fe40 	bl	80002f0 <__aeabi_uldivmod>
 8013670:	e7d1      	b.n	8013616 <HAL_RCC_GetSysClockFreq+0x6a>
      sysclockfreq = HSE_VALUE;
 8013672:	4803      	ldr	r0, [pc, #12]	@ (8013680 <HAL_RCC_GetSysClockFreq+0xd4>)
 8013674:	e7d7      	b.n	8013626 <HAL_RCC_GetSysClockFreq+0x7a>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8013676:	4803      	ldr	r0, [pc, #12]	@ (8013684 <HAL_RCC_GetSysClockFreq+0xd8>)
  return sysclockfreq;
 8013678:	e7d5      	b.n	8013626 <HAL_RCC_GetSysClockFreq+0x7a>
 801367a:	bf00      	nop
 801367c:	40023800 	.word	0x40023800
 8013680:	007a1200 	.word	0x007a1200
 8013684:	00f42400 	.word	0x00f42400

08013688 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8013688:	2800      	cmp	r0, #0
 801368a:	f000 80a0 	beq.w	80137ce <HAL_RCC_ClockConfig+0x146>
{
 801368e:	b570      	push	{r4, r5, r6, lr}
 8013690:	460d      	mov	r5, r1
 8013692:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8013694:	4b52      	ldr	r3, [pc, #328]	@ (80137e0 <HAL_RCC_ClockConfig+0x158>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	f003 030f 	and.w	r3, r3, #15
 801369c:	428b      	cmp	r3, r1
 801369e:	d20b      	bcs.n	80136b8 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80136a0:	4a4f      	ldr	r2, [pc, #316]	@ (80137e0 <HAL_RCC_ClockConfig+0x158>)
 80136a2:	6813      	ldr	r3, [r2, #0]
 80136a4:	f023 030f 	bic.w	r3, r3, #15
 80136a8:	430b      	orrs	r3, r1
 80136aa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80136ac:	6813      	ldr	r3, [r2, #0]
 80136ae:	f003 030f 	and.w	r3, r3, #15
 80136b2:	428b      	cmp	r3, r1
 80136b4:	f040 808d 	bne.w	80137d2 <HAL_RCC_ClockConfig+0x14a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80136b8:	6823      	ldr	r3, [r4, #0]
 80136ba:	f013 0f02 	tst.w	r3, #2
 80136be:	d017      	beq.n	80136f0 <HAL_RCC_ClockConfig+0x68>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80136c0:	f013 0f04 	tst.w	r3, #4
 80136c4:	d004      	beq.n	80136d0 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80136c6:	4a47      	ldr	r2, [pc, #284]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 80136c8:	6893      	ldr	r3, [r2, #8]
 80136ca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80136ce:	6093      	str	r3, [r2, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80136d0:	6823      	ldr	r3, [r4, #0]
 80136d2:	f013 0f08 	tst.w	r3, #8
 80136d6:	d004      	beq.n	80136e2 <HAL_RCC_ClockConfig+0x5a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80136d8:	4a42      	ldr	r2, [pc, #264]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 80136da:	6893      	ldr	r3, [r2, #8]
 80136dc:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80136e0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80136e2:	4a40      	ldr	r2, [pc, #256]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 80136e4:	6893      	ldr	r3, [r2, #8]
 80136e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80136ea:	68a1      	ldr	r1, [r4, #8]
 80136ec:	430b      	orrs	r3, r1
 80136ee:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80136f0:	6823      	ldr	r3, [r4, #0]
 80136f2:	f013 0f01 	tst.w	r3, #1
 80136f6:	d031      	beq.n	801375c <HAL_RCC_ClockConfig+0xd4>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80136f8:	6863      	ldr	r3, [r4, #4]
 80136fa:	2b01      	cmp	r3, #1
 80136fc:	d020      	beq.n	8013740 <HAL_RCC_ClockConfig+0xb8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80136fe:	2b02      	cmp	r3, #2
 8013700:	d025      	beq.n	801374e <HAL_RCC_ClockConfig+0xc6>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8013702:	4a38      	ldr	r2, [pc, #224]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 8013704:	6812      	ldr	r2, [r2, #0]
 8013706:	f012 0f02 	tst.w	r2, #2
 801370a:	d064      	beq.n	80137d6 <HAL_RCC_ClockConfig+0x14e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801370c:	4935      	ldr	r1, [pc, #212]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 801370e:	688a      	ldr	r2, [r1, #8]
 8013710:	f022 0203 	bic.w	r2, r2, #3
 8013714:	4313      	orrs	r3, r2
 8013716:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8013718:	f7ff fb1a 	bl	8012d50 <HAL_GetTick>
 801371c:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801371e:	4b31      	ldr	r3, [pc, #196]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 8013720:	689b      	ldr	r3, [r3, #8]
 8013722:	f003 030c 	and.w	r3, r3, #12
 8013726:	6862      	ldr	r2, [r4, #4]
 8013728:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 801372c:	d016      	beq.n	801375c <HAL_RCC_ClockConfig+0xd4>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801372e:	f7ff fb0f 	bl	8012d50 <HAL_GetTick>
 8013732:	1b80      	subs	r0, r0, r6
 8013734:	f241 3388 	movw	r3, #5000	@ 0x1388
 8013738:	4298      	cmp	r0, r3
 801373a:	d9f0      	bls.n	801371e <HAL_RCC_ClockConfig+0x96>
        return HAL_TIMEOUT;
 801373c:	2003      	movs	r0, #3
 801373e:	e045      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8013740:	4a28      	ldr	r2, [pc, #160]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 8013742:	6812      	ldr	r2, [r2, #0]
 8013744:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
 8013748:	d1e0      	bne.n	801370c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 801374a:	2001      	movs	r0, #1
 801374c:	e03e      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801374e:	4a25      	ldr	r2, [pc, #148]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 8013750:	6812      	ldr	r2, [r2, #0]
 8013752:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8013756:	d1d9      	bne.n	801370c <HAL_RCC_ClockConfig+0x84>
        return HAL_ERROR;
 8013758:	2001      	movs	r0, #1
 801375a:	e037      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801375c:	4b20      	ldr	r3, [pc, #128]	@ (80137e0 <HAL_RCC_ClockConfig+0x158>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	f003 030f 	and.w	r3, r3, #15
 8013764:	42ab      	cmp	r3, r5
 8013766:	d90a      	bls.n	801377e <HAL_RCC_ClockConfig+0xf6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8013768:	4a1d      	ldr	r2, [pc, #116]	@ (80137e0 <HAL_RCC_ClockConfig+0x158>)
 801376a:	6813      	ldr	r3, [r2, #0]
 801376c:	f023 030f 	bic.w	r3, r3, #15
 8013770:	432b      	orrs	r3, r5
 8013772:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8013774:	6813      	ldr	r3, [r2, #0]
 8013776:	f003 030f 	and.w	r3, r3, #15
 801377a:	42ab      	cmp	r3, r5
 801377c:	d12d      	bne.n	80137da <HAL_RCC_ClockConfig+0x152>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801377e:	6823      	ldr	r3, [r4, #0]
 8013780:	f013 0f04 	tst.w	r3, #4
 8013784:	d006      	beq.n	8013794 <HAL_RCC_ClockConfig+0x10c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8013786:	4a17      	ldr	r2, [pc, #92]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 8013788:	6893      	ldr	r3, [r2, #8]
 801378a:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 801378e:	68e1      	ldr	r1, [r4, #12]
 8013790:	430b      	orrs	r3, r1
 8013792:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8013794:	6823      	ldr	r3, [r4, #0]
 8013796:	f013 0f08 	tst.w	r3, #8
 801379a:	d007      	beq.n	80137ac <HAL_RCC_ClockConfig+0x124>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801379c:	4a11      	ldr	r2, [pc, #68]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 801379e:	6893      	ldr	r3, [r2, #8]
 80137a0:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 80137a4:	6921      	ldr	r1, [r4, #16]
 80137a6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80137aa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80137ac:	f7ff fefe 	bl	80135ac <HAL_RCC_GetSysClockFreq>
 80137b0:	4b0c      	ldr	r3, [pc, #48]	@ (80137e4 <HAL_RCC_ClockConfig+0x15c>)
 80137b2:	689b      	ldr	r3, [r3, #8]
 80137b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80137b8:	4a0b      	ldr	r2, [pc, #44]	@ (80137e8 <HAL_RCC_ClockConfig+0x160>)
 80137ba:	5cd3      	ldrb	r3, [r2, r3]
 80137bc:	40d8      	lsrs	r0, r3
 80137be:	4b0b      	ldr	r3, [pc, #44]	@ (80137ec <HAL_RCC_ClockConfig+0x164>)
 80137c0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80137c2:	4b0b      	ldr	r3, [pc, #44]	@ (80137f0 <HAL_RCC_ClockConfig+0x168>)
 80137c4:	6818      	ldr	r0, [r3, #0]
 80137c6:	f7ff fa7d 	bl	8012cc4 <HAL_InitTick>
  return HAL_OK;
 80137ca:	2000      	movs	r0, #0
}
 80137cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80137ce:	2001      	movs	r0, #1
}
 80137d0:	4770      	bx	lr
      return HAL_ERROR;
 80137d2:	2001      	movs	r0, #1
 80137d4:	e7fa      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 80137d6:	2001      	movs	r0, #1
 80137d8:	e7f8      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
      return HAL_ERROR;
 80137da:	2001      	movs	r0, #1
 80137dc:	e7f6      	b.n	80137cc <HAL_RCC_ClockConfig+0x144>
 80137de:	bf00      	nop
 80137e0:	40023c00 	.word	0x40023c00
 80137e4:	40023800 	.word	0x40023800
 80137e8:	0801a024 	.word	0x0801a024
 80137ec:	20000000 	.word	0x20000000
 80137f0:	20000020 	.word	0x20000020

080137f4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80137f4:	4b01      	ldr	r3, [pc, #4]	@ (80137fc <HAL_RCC_GetHCLKFreq+0x8>)
 80137f6:	6818      	ldr	r0, [r3, #0]
 80137f8:	4770      	bx	lr
 80137fa:	bf00      	nop
 80137fc:	20000000 	.word	0x20000000

08013800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8013800:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8013802:	f7ff fff7 	bl	80137f4 <HAL_RCC_GetHCLKFreq>
 8013806:	4b04      	ldr	r3, [pc, #16]	@ (8013818 <HAL_RCC_GetPCLK1Freq+0x18>)
 8013808:	689b      	ldr	r3, [r3, #8]
 801380a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 801380e:	4a03      	ldr	r2, [pc, #12]	@ (801381c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8013810:	5cd3      	ldrb	r3, [r2, r3]
}
 8013812:	40d8      	lsrs	r0, r3
 8013814:	bd08      	pop	{r3, pc}
 8013816:	bf00      	nop
 8013818:	40023800 	.word	0x40023800
 801381c:	0801a034 	.word	0x0801a034

08013820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8013820:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8013822:	f7ff ffe7 	bl	80137f4 <HAL_RCC_GetHCLKFreq>
 8013826:	4b04      	ldr	r3, [pc, #16]	@ (8013838 <HAL_RCC_GetPCLK2Freq+0x18>)
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 801382e:	4a03      	ldr	r2, [pc, #12]	@ (801383c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8013830:	5cd3      	ldrb	r3, [r2, r3]
}
 8013832:	40d8      	lsrs	r0, r3
 8013834:	bd08      	pop	{r3, pc}
 8013836:	bf00      	nop
 8013838:	40023800 	.word	0x40023800
 801383c:	0801a034 	.word	0x0801a034

08013840 <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8013840:	4770      	bx	lr
	...

08013844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8013844:	b510      	push	{r4, lr}
 8013846:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8013848:	6883      	ldr	r3, [r0, #8]
 801384a:	6902      	ldr	r2, [r0, #16]
 801384c:	4313      	orrs	r3, r2
 801384e:	6942      	ldr	r2, [r0, #20]
 8013850:	4313      	orrs	r3, r2
 8013852:	69c2      	ldr	r2, [r0, #28]
 8013854:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8013856:	6801      	ldr	r1, [r0, #0]
 8013858:	6808      	ldr	r0, [r1, #0]
 801385a:	4a91      	ldr	r2, [pc, #580]	@ (8013aa0 <UART_SetConfig+0x25c>)
 801385c:	4002      	ands	r2, r0
 801385e:	431a      	orrs	r2, r3
 8013860:	600a      	str	r2, [r1, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8013862:	6822      	ldr	r2, [r4, #0]
 8013864:	6853      	ldr	r3, [r2, #4]
 8013866:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 801386a:	68e1      	ldr	r1, [r4, #12]
 801386c:	430b      	orrs	r3, r1
 801386e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8013870:	69a2      	ldr	r2, [r4, #24]

  tmpreg |= huart->Init.OneBitSampling;
 8013872:	6a23      	ldr	r3, [r4, #32]
 8013874:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8013876:	6821      	ldr	r1, [r4, #0]
 8013878:	688b      	ldr	r3, [r1, #8]
 801387a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 801387e:	4313      	orrs	r3, r2
 8013880:	608b      	str	r3, [r1, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8013882:	6823      	ldr	r3, [r4, #0]
 8013884:	4a87      	ldr	r2, [pc, #540]	@ (8013aa4 <UART_SetConfig+0x260>)
 8013886:	4293      	cmp	r3, r2
 8013888:	d018      	beq.n	80138bc <UART_SetConfig+0x78>
 801388a:	4a87      	ldr	r2, [pc, #540]	@ (8013aa8 <UART_SetConfig+0x264>)
 801388c:	4293      	cmp	r3, r2
 801388e:	d03a      	beq.n	8013906 <UART_SetConfig+0xc2>
 8013890:	4a86      	ldr	r2, [pc, #536]	@ (8013aac <UART_SetConfig+0x268>)
 8013892:	4293      	cmp	r3, r2
 8013894:	d04f      	beq.n	8013936 <UART_SetConfig+0xf2>
 8013896:	4a86      	ldr	r2, [pc, #536]	@ (8013ab0 <UART_SetConfig+0x26c>)
 8013898:	4293      	cmp	r3, r2
 801389a:	d05e      	beq.n	801395a <UART_SetConfig+0x116>
 801389c:	4a85      	ldr	r2, [pc, #532]	@ (8013ab4 <UART_SetConfig+0x270>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d06d      	beq.n	801397e <UART_SetConfig+0x13a>
 80138a2:	4a85      	ldr	r2, [pc, #532]	@ (8013ab8 <UART_SetConfig+0x274>)
 80138a4:	4293      	cmp	r3, r2
 80138a6:	d07f      	beq.n	80139a8 <UART_SetConfig+0x164>
 80138a8:	4a84      	ldr	r2, [pc, #528]	@ (8013abc <UART_SetConfig+0x278>)
 80138aa:	4293      	cmp	r3, r2
 80138ac:	f000 8091 	beq.w	80139d2 <UART_SetConfig+0x18e>
 80138b0:	4a83      	ldr	r2, [pc, #524]	@ (8013ac0 <UART_SetConfig+0x27c>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	f000 80a2 	beq.w	80139fc <UART_SetConfig+0x1b8>
 80138b8:	2310      	movs	r3, #16
 80138ba:	e00b      	b.n	80138d4 <UART_SetConfig+0x90>
 80138bc:	4b81      	ldr	r3, [pc, #516]	@ (8013ac4 <UART_SetConfig+0x280>)
 80138be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80138c2:	f003 0303 	and.w	r3, r3, #3
 80138c6:	2b03      	cmp	r3, #3
 80138c8:	d81b      	bhi.n	8013902 <UART_SetConfig+0xbe>
 80138ca:	e8df f003 	tbb	[pc, r3]
 80138ce:	1602      	.short	0x1602
 80138d0:	18ab      	.short	0x18ab
 80138d2:	2301      	movs	r3, #1

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80138d4:	69e0      	ldr	r0, [r4, #28]
 80138d6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80138da:	f000 80d7 	beq.w	8013a8c <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 80138de:	2b08      	cmp	r3, #8
 80138e0:	f200 8138 	bhi.w	8013b54 <UART_SetConfig+0x310>
 80138e4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80138e8:	01270114 	.word	0x01270114
 80138ec:	01360112 	.word	0x01360112
 80138f0:	0136012a 	.word	0x0136012a
 80138f4:	01360136 	.word	0x01360136
 80138f8:	012d      	.short	0x012d
  UART_GETCLOCKSOURCE(huart, clocksource);
 80138fa:	2304      	movs	r3, #4
 80138fc:	e7ea      	b.n	80138d4 <UART_SetConfig+0x90>
 80138fe:	2308      	movs	r3, #8
 8013900:	e7e8      	b.n	80138d4 <UART_SetConfig+0x90>
 8013902:	2310      	movs	r3, #16
 8013904:	e7e6      	b.n	80138d4 <UART_SetConfig+0x90>
 8013906:	4b6f      	ldr	r3, [pc, #444]	@ (8013ac4 <UART_SetConfig+0x280>)
 8013908:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801390c:	f003 030c 	and.w	r3, r3, #12
 8013910:	2b0c      	cmp	r3, #12
 8013912:	d80e      	bhi.n	8013932 <UART_SetConfig+0xee>
 8013914:	e8df f003 	tbb	[pc, r3]
 8013918:	0d0d0d07 	.word	0x0d0d0d07
 801391c:	0d0d0d09 	.word	0x0d0d0d09
 8013920:	0d0d0d88 	.word	0x0d0d0d88
 8013924:	0b          	.byte	0x0b
 8013925:	00          	.byte	0x00
 8013926:	2300      	movs	r3, #0
 8013928:	e7d4      	b.n	80138d4 <UART_SetConfig+0x90>
 801392a:	2304      	movs	r3, #4
 801392c:	e7d2      	b.n	80138d4 <UART_SetConfig+0x90>
 801392e:	2308      	movs	r3, #8
 8013930:	e7d0      	b.n	80138d4 <UART_SetConfig+0x90>
 8013932:	2310      	movs	r3, #16
 8013934:	e7ce      	b.n	80138d4 <UART_SetConfig+0x90>
 8013936:	4b63      	ldr	r3, [pc, #396]	@ (8013ac4 <UART_SetConfig+0x280>)
 8013938:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801393c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8013940:	2b20      	cmp	r3, #32
 8013942:	d073      	beq.n	8013a2c <UART_SetConfig+0x1e8>
 8013944:	d805      	bhi.n	8013952 <UART_SetConfig+0x10e>
 8013946:	2b00      	cmp	r3, #0
 8013948:	d072      	beq.n	8013a30 <UART_SetConfig+0x1ec>
 801394a:	2b10      	cmp	r3, #16
 801394c:	d172      	bne.n	8013a34 <UART_SetConfig+0x1f0>
 801394e:	2304      	movs	r3, #4
 8013950:	e7c0      	b.n	80138d4 <UART_SetConfig+0x90>
 8013952:	2b30      	cmp	r3, #48	@ 0x30
 8013954:	d170      	bne.n	8013a38 <UART_SetConfig+0x1f4>
 8013956:	2308      	movs	r3, #8
 8013958:	e7bc      	b.n	80138d4 <UART_SetConfig+0x90>
 801395a:	4b5a      	ldr	r3, [pc, #360]	@ (8013ac4 <UART_SetConfig+0x280>)
 801395c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013960:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8013964:	2b80      	cmp	r3, #128	@ 0x80
 8013966:	d069      	beq.n	8013a3c <UART_SetConfig+0x1f8>
 8013968:	d805      	bhi.n	8013976 <UART_SetConfig+0x132>
 801396a:	2b00      	cmp	r3, #0
 801396c:	d068      	beq.n	8013a40 <UART_SetConfig+0x1fc>
 801396e:	2b40      	cmp	r3, #64	@ 0x40
 8013970:	d168      	bne.n	8013a44 <UART_SetConfig+0x200>
 8013972:	2304      	movs	r3, #4
 8013974:	e7ae      	b.n	80138d4 <UART_SetConfig+0x90>
 8013976:	2bc0      	cmp	r3, #192	@ 0xc0
 8013978:	d166      	bne.n	8013a48 <UART_SetConfig+0x204>
 801397a:	2308      	movs	r3, #8
 801397c:	e7aa      	b.n	80138d4 <UART_SetConfig+0x90>
 801397e:	4b51      	ldr	r3, [pc, #324]	@ (8013ac4 <UART_SetConfig+0x280>)
 8013980:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013984:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8013988:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801398c:	d05e      	beq.n	8013a4c <UART_SetConfig+0x208>
 801398e:	d806      	bhi.n	801399e <UART_SetConfig+0x15a>
 8013990:	2b00      	cmp	r3, #0
 8013992:	d05d      	beq.n	8013a50 <UART_SetConfig+0x20c>
 8013994:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013998:	d15c      	bne.n	8013a54 <UART_SetConfig+0x210>
 801399a:	2304      	movs	r3, #4
 801399c:	e79a      	b.n	80138d4 <UART_SetConfig+0x90>
 801399e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80139a2:	d159      	bne.n	8013a58 <UART_SetConfig+0x214>
 80139a4:	2308      	movs	r3, #8
 80139a6:	e795      	b.n	80138d4 <UART_SetConfig+0x90>
 80139a8:	4b46      	ldr	r3, [pc, #280]	@ (8013ac4 <UART_SetConfig+0x280>)
 80139aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80139ae:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80139b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80139b6:	d051      	beq.n	8013a5c <UART_SetConfig+0x218>
 80139b8:	d806      	bhi.n	80139c8 <UART_SetConfig+0x184>
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d050      	beq.n	8013a60 <UART_SetConfig+0x21c>
 80139be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80139c2:	d14f      	bne.n	8013a64 <UART_SetConfig+0x220>
 80139c4:	2304      	movs	r3, #4
 80139c6:	e785      	b.n	80138d4 <UART_SetConfig+0x90>
 80139c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80139cc:	d14c      	bne.n	8013a68 <UART_SetConfig+0x224>
 80139ce:	2308      	movs	r3, #8
 80139d0:	e780      	b.n	80138d4 <UART_SetConfig+0x90>
 80139d2:	4b3c      	ldr	r3, [pc, #240]	@ (8013ac4 <UART_SetConfig+0x280>)
 80139d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80139d8:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80139dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80139e0:	d044      	beq.n	8013a6c <UART_SetConfig+0x228>
 80139e2:	d806      	bhi.n	80139f2 <UART_SetConfig+0x1ae>
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d043      	beq.n	8013a70 <UART_SetConfig+0x22c>
 80139e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80139ec:	d142      	bne.n	8013a74 <UART_SetConfig+0x230>
 80139ee:	2304      	movs	r3, #4
 80139f0:	e770      	b.n	80138d4 <UART_SetConfig+0x90>
 80139f2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80139f6:	d13f      	bne.n	8013a78 <UART_SetConfig+0x234>
 80139f8:	2308      	movs	r3, #8
 80139fa:	e76b      	b.n	80138d4 <UART_SetConfig+0x90>
 80139fc:	4b31      	ldr	r3, [pc, #196]	@ (8013ac4 <UART_SetConfig+0x280>)
 80139fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a02:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8013a06:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013a0a:	d037      	beq.n	8013a7c <UART_SetConfig+0x238>
 8013a0c:	d805      	bhi.n	8013a1a <UART_SetConfig+0x1d6>
 8013a0e:	b3bb      	cbz	r3, 8013a80 <UART_SetConfig+0x23c>
 8013a10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8013a14:	d136      	bne.n	8013a84 <UART_SetConfig+0x240>
 8013a16:	2304      	movs	r3, #4
 8013a18:	e75c      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a1a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8013a1e:	d133      	bne.n	8013a88 <UART_SetConfig+0x244>
 8013a20:	2308      	movs	r3, #8
 8013a22:	e757      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a24:	2302      	movs	r3, #2
 8013a26:	e755      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a28:	2302      	movs	r3, #2
 8013a2a:	e753      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a2c:	2302      	movs	r3, #2
 8013a2e:	e751      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a30:	2300      	movs	r3, #0
 8013a32:	e74f      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a34:	2310      	movs	r3, #16
 8013a36:	e74d      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a38:	2310      	movs	r3, #16
 8013a3a:	e74b      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a3c:	2302      	movs	r3, #2
 8013a3e:	e749      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a40:	2300      	movs	r3, #0
 8013a42:	e747      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a44:	2310      	movs	r3, #16
 8013a46:	e745      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a48:	2310      	movs	r3, #16
 8013a4a:	e743      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a4c:	2302      	movs	r3, #2
 8013a4e:	e741      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a50:	2300      	movs	r3, #0
 8013a52:	e73f      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a54:	2310      	movs	r3, #16
 8013a56:	e73d      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a58:	2310      	movs	r3, #16
 8013a5a:	e73b      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a5c:	2302      	movs	r3, #2
 8013a5e:	e739      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a60:	2301      	movs	r3, #1
 8013a62:	e737      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a64:	2310      	movs	r3, #16
 8013a66:	e735      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a68:	2310      	movs	r3, #16
 8013a6a:	e733      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a6c:	2302      	movs	r3, #2
 8013a6e:	e731      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a70:	2300      	movs	r3, #0
 8013a72:	e72f      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a74:	2310      	movs	r3, #16
 8013a76:	e72d      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a78:	2310      	movs	r3, #16
 8013a7a:	e72b      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a7c:	2302      	movs	r3, #2
 8013a7e:	e729      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a80:	2300      	movs	r3, #0
 8013a82:	e727      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a84:	2310      	movs	r3, #16
 8013a86:	e725      	b.n	80138d4 <UART_SetConfig+0x90>
 8013a88:	2310      	movs	r3, #16
 8013a8a:	e723      	b.n	80138d4 <UART_SetConfig+0x90>
    switch (clocksource)
 8013a8c:	2b08      	cmp	r3, #8
 8013a8e:	d85b      	bhi.n	8013b48 <UART_SetConfig+0x304>
 8013a90:	e8df f003 	tbb	[pc, r3]
 8013a94:	5a3a341a 	.word	0x5a3a341a
 8013a98:	5a5a5a37 	.word	0x5a5a5a37
 8013a9c:	1e          	.byte	0x1e
 8013a9d:	00          	.byte	0x00
 8013a9e:	bf00      	nop
 8013aa0:	efff69f3 	.word	0xefff69f3
 8013aa4:	40011000 	.word	0x40011000
 8013aa8:	40004400 	.word	0x40004400
 8013aac:	40004800 	.word	0x40004800
 8013ab0:	40004c00 	.word	0x40004c00
 8013ab4:	40005000 	.word	0x40005000
 8013ab8:	40011400 	.word	0x40011400
 8013abc:	40007800 	.word	0x40007800
 8013ac0:	40007c00 	.word	0x40007c00
 8013ac4:	40023800 	.word	0x40023800
        pclk = HAL_RCC_GetPCLK1Freq();
 8013ac8:	f7ff fe9a 	bl	8013800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8013acc:	2800      	cmp	r0, #0
 8013ace:	d03d      	beq.n	8013b4c <UART_SetConfig+0x308>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8013ad0:	6862      	ldr	r2, [r4, #4]
 8013ad2:	0853      	lsrs	r3, r2, #1
 8013ad4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8013ad8:	fbb3 f3f2 	udiv	r3, r3, r2
 8013adc:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013ade:	f1a3 0110 	sub.w	r1, r3, #16
 8013ae2:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 8013ae6:	4291      	cmp	r1, r2
 8013ae8:	d832      	bhi.n	8013b50 <UART_SetConfig+0x30c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8013aea:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8013aee:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8013af2:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8013af4:	6822      	ldr	r2, [r4, #0]
 8013af6:	60d3      	str	r3, [r2, #12]
 8013af8:	2000      	movs	r0, #0
 8013afa:	e030      	b.n	8013b5e <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013afc:	f7ff fe90 	bl	8013820 <HAL_RCC_GetPCLK2Freq>
        break;
 8013b00:	e7e4      	b.n	8013acc <UART_SetConfig+0x288>
        pclk = HAL_RCC_GetSysClockFreq();
 8013b02:	f7ff fd53 	bl	80135ac <HAL_RCC_GetSysClockFreq>
        break;
 8013b06:	e7e1      	b.n	8013acc <UART_SetConfig+0x288>
        pclk = (uint32_t) HSI_VALUE;
 8013b08:	4817      	ldr	r0, [pc, #92]	@ (8013b68 <UART_SetConfig+0x324>)
 8013b0a:	e7e1      	b.n	8013ad0 <UART_SetConfig+0x28c>
    switch (clocksource)
 8013b0c:	4816      	ldr	r0, [pc, #88]	@ (8013b68 <UART_SetConfig+0x324>)
 8013b0e:	e002      	b.n	8013b16 <UART_SetConfig+0x2d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8013b10:	f7ff fe76 	bl	8013800 <HAL_RCC_GetPCLK1Freq>
        pclk = 0U;
        ret = HAL_ERROR;
        break;
    }

    if (pclk != 0U)
 8013b14:	b300      	cbz	r0, 8013b58 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8013b16:	6863      	ldr	r3, [r4, #4]
 8013b18:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8013b1c:	fbb0 f0f3 	udiv	r0, r0, r3
 8013b20:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8013b22:	f1a0 0210 	sub.w	r2, r0, #16
 8013b26:	f64f 73ef 	movw	r3, #65519	@ 0xffef
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d816      	bhi.n	8013b5c <UART_SetConfig+0x318>
      {
        huart->Instance->BRR = usartdiv;
 8013b2e:	6823      	ldr	r3, [r4, #0]
 8013b30:	60d8      	str	r0, [r3, #12]
 8013b32:	2000      	movs	r0, #0
 8013b34:	e013      	b.n	8013b5e <UART_SetConfig+0x31a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8013b36:	f7ff fe73 	bl	8013820 <HAL_RCC_GetPCLK2Freq>
        break;
 8013b3a:	e7eb      	b.n	8013b14 <UART_SetConfig+0x2d0>
        pclk = HAL_RCC_GetSysClockFreq();
 8013b3c:	f7ff fd36 	bl	80135ac <HAL_RCC_GetSysClockFreq>
        break;
 8013b40:	e7e8      	b.n	8013b14 <UART_SetConfig+0x2d0>
        pclk = (uint32_t) LSE_VALUE;
 8013b42:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8013b46:	e7e6      	b.n	8013b16 <UART_SetConfig+0x2d2>
    switch (clocksource)
 8013b48:	2001      	movs	r0, #1
 8013b4a:	e008      	b.n	8013b5e <UART_SetConfig+0x31a>
 8013b4c:	2000      	movs	r0, #0
 8013b4e:	e006      	b.n	8013b5e <UART_SetConfig+0x31a>
        ret = HAL_ERROR;
 8013b50:	2001      	movs	r0, #1
 8013b52:	e004      	b.n	8013b5e <UART_SetConfig+0x31a>
    switch (clocksource)
 8013b54:	2001      	movs	r0, #1
 8013b56:	e002      	b.n	8013b5e <UART_SetConfig+0x31a>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	e000      	b.n	8013b5e <UART_SetConfig+0x31a>
      }
      else
      {
        ret = HAL_ERROR;
 8013b5c:	2001      	movs	r0, #1
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8013b5e:	2300      	movs	r3, #0
 8013b60:	6663      	str	r3, [r4, #100]	@ 0x64
  huart->TxISR = NULL;
 8013b62:	66a3      	str	r3, [r4, #104]	@ 0x68

  return ret;
}
 8013b64:	bd10      	pop	{r4, pc}
 8013b66:	bf00      	nop
 8013b68:	00f42400 	.word	0x00f42400

08013b6c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8013b6c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013b6e:	f013 0f01 	tst.w	r3, #1
 8013b72:	d006      	beq.n	8013b82 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8013b74:	6802      	ldr	r2, [r0, #0]
 8013b76:	6853      	ldr	r3, [r2, #4]
 8013b78:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8013b7c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 8013b7e:	430b      	orrs	r3, r1
 8013b80:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8013b82:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013b84:	f013 0f02 	tst.w	r3, #2
 8013b88:	d006      	beq.n	8013b98 <UART_AdvFeatureConfig+0x2c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8013b8a:	6802      	ldr	r2, [r0, #0]
 8013b8c:	6853      	ldr	r3, [r2, #4]
 8013b8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013b92:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8013b94:	430b      	orrs	r3, r1
 8013b96:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8013b98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013b9a:	f013 0f04 	tst.w	r3, #4
 8013b9e:	d006      	beq.n	8013bae <UART_AdvFeatureConfig+0x42>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013ba0:	6802      	ldr	r2, [r0, #0]
 8013ba2:	6853      	ldr	r3, [r2, #4]
 8013ba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013ba8:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013baa:	430b      	orrs	r3, r1
 8013bac:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8013bae:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bb0:	f013 0f08 	tst.w	r3, #8
 8013bb4:	d006      	beq.n	8013bc4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8013bb6:	6802      	ldr	r2, [r0, #0]
 8013bb8:	6853      	ldr	r3, [r2, #4]
 8013bba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8013bbe:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8013bc0:	430b      	orrs	r3, r1
 8013bc2:	6053      	str	r3, [r2, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013bc4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bc6:	f013 0f10 	tst.w	r3, #16
 8013bca:	d006      	beq.n	8013bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8013bcc:	6802      	ldr	r2, [r0, #0]
 8013bce:	6893      	ldr	r3, [r2, #8]
 8013bd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013bd4:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8013bd6:	430b      	orrs	r3, r1
 8013bd8:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013bda:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bdc:	f013 0f20 	tst.w	r3, #32
 8013be0:	d006      	beq.n	8013bf0 <UART_AdvFeatureConfig+0x84>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8013be2:	6802      	ldr	r2, [r0, #0]
 8013be4:	6893      	ldr	r3, [r2, #8]
 8013be6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8013bea:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8013bec:	430b      	orrs	r3, r1
 8013bee:	6093      	str	r3, [r2, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013bf0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013bf2:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8013bf6:	d00a      	beq.n	8013c0e <UART_AdvFeatureConfig+0xa2>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8013bf8:	6802      	ldr	r2, [r0, #0]
 8013bfa:	6853      	ldr	r3, [r2, #4]
 8013bfc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8013c00:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8013c02:	430b      	orrs	r3, r1
 8013c04:	6053      	str	r3, [r2, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8013c06:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8013c08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8013c0c:	d00b      	beq.n	8013c26 <UART_AdvFeatureConfig+0xba>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8013c0e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8013c10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8013c14:	d006      	beq.n	8013c24 <UART_AdvFeatureConfig+0xb8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8013c16:	6802      	ldr	r2, [r0, #0]
 8013c18:	6853      	ldr	r3, [r2, #4]
 8013c1a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8013c1e:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 8013c20:	430b      	orrs	r3, r1
 8013c22:	6053      	str	r3, [r2, #4]
  }
}
 8013c24:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8013c26:	6802      	ldr	r2, [r0, #0]
 8013c28:	6853      	ldr	r3, [r2, #4]
 8013c2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8013c2e:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8013c30:	430b      	orrs	r3, r1
 8013c32:	6053      	str	r3, [r2, #4]
 8013c34:	e7eb      	b.n	8013c0e <UART_AdvFeatureConfig+0xa2>

08013c36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013c36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013c3a:	4605      	mov	r5, r0
 8013c3c:	460f      	mov	r7, r1
 8013c3e:	4616      	mov	r6, r2
 8013c40:	4699      	mov	r9, r3
 8013c42:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013c46:	682b      	ldr	r3, [r5, #0]
 8013c48:	69dc      	ldr	r4, [r3, #28]
 8013c4a:	ea37 0404 	bics.w	r4, r7, r4
 8013c4e:	bf0c      	ite	eq
 8013c50:	2401      	moveq	r4, #1
 8013c52:	2400      	movne	r4, #0
 8013c54:	42b4      	cmp	r4, r6
 8013c56:	d13d      	bne.n	8013cd4 <UART_WaitOnFlagUntilTimeout+0x9e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013c58:	f1b8 3fff 	cmp.w	r8, #4294967295
 8013c5c:	d0f3      	beq.n	8013c46 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013c5e:	f7ff f877 	bl	8012d50 <HAL_GetTick>
 8013c62:	eba0 0009 	sub.w	r0, r0, r9
 8013c66:	4540      	cmp	r0, r8
 8013c68:	d822      	bhi.n	8013cb0 <UART_WaitOnFlagUntilTimeout+0x7a>
 8013c6a:	f1b8 0f00 	cmp.w	r8, #0
 8013c6e:	d01f      	beq.n	8013cb0 <UART_WaitOnFlagUntilTimeout+0x7a>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	681a      	ldr	r2, [r3, #0]
 8013c74:	f012 0f04 	tst.w	r2, #4
 8013c78:	d0e5      	beq.n	8013c46 <UART_WaitOnFlagUntilTimeout+0x10>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013c7a:	69da      	ldr	r2, [r3, #28]
 8013c7c:	f412 6f00 	tst.w	r2, #2048	@ 0x800
 8013c80:	d0e1      	beq.n	8013c46 <UART_WaitOnFlagUntilTimeout+0x10>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013c82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013c86:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013c88:	682a      	ldr	r2, [r5, #0]
 8013c8a:	6813      	ldr	r3, [r2, #0]
 8013c8c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8013c90:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013c92:	682a      	ldr	r2, [r5, #0]
 8013c94:	6893      	ldr	r3, [r2, #8]
 8013c96:	f023 0301 	bic.w	r3, r3, #1
 8013c9a:	6093      	str	r3, [r2, #8]

          huart->gState = HAL_UART_STATE_READY;
 8013c9c:	2320      	movs	r3, #32
 8013c9e:	67ab      	str	r3, [r5, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8013ca0:	67eb      	str	r3, [r5, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013ca2:	f8c5 3080 	str.w	r3, [r5, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74

          return HAL_TIMEOUT;
 8013cac:	2003      	movs	r0, #3
 8013cae:	e012      	b.n	8013cd6 <UART_WaitOnFlagUntilTimeout+0xa0>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8013cb0:	682a      	ldr	r2, [r5, #0]
 8013cb2:	6813      	ldr	r3, [r2, #0]
 8013cb4:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8013cb8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013cba:	682a      	ldr	r2, [r5, #0]
 8013cbc:	6893      	ldr	r3, [r2, #8]
 8013cbe:	f023 0301 	bic.w	r3, r3, #1
 8013cc2:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8013cc4:	2320      	movs	r3, #32
 8013cc6:	67ab      	str	r3, [r5, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8013cc8:	67eb      	str	r3, [r5, #124]	@ 0x7c
        __HAL_UNLOCK(huart);
 8013cca:	2300      	movs	r3, #0
 8013ccc:	f885 3074 	strb.w	r3, [r5, #116]	@ 0x74
        return HAL_TIMEOUT;
 8013cd0:	2003      	movs	r0, #3
 8013cd2:	e000      	b.n	8013cd6 <UART_WaitOnFlagUntilTimeout+0xa0>
        }
      }
    }
  }
  return HAL_OK;
 8013cd4:	2000      	movs	r0, #0
}
 8013cd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08013cda <HAL_UART_Transmit>:
{
 8013cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8013ce2:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8013ce4:	2b20      	cmp	r3, #32
 8013ce6:	d156      	bne.n	8013d96 <HAL_UART_Transmit+0xbc>
 8013ce8:	4604      	mov	r4, r0
 8013cea:	460d      	mov	r5, r1
 8013cec:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8013cee:	2a00      	cmp	r2, #0
 8013cf0:	bf18      	it	ne
 8013cf2:	2900      	cmpne	r1, #0
 8013cf4:	d053      	beq.n	8013d9e <HAL_UART_Transmit+0xc4>
    __HAL_LOCK(huart);
 8013cf6:	f890 3074 	ldrb.w	r3, [r0, #116]	@ 0x74
 8013cfa:	2b01      	cmp	r3, #1
 8013cfc:	d051      	beq.n	8013da2 <HAL_UART_Transmit+0xc8>
 8013cfe:	2301      	movs	r3, #1
 8013d00:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013d04:	2300      	movs	r3, #0
 8013d06:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8013d0a:	2321      	movs	r3, #33	@ 0x21
 8013d0c:	6783      	str	r3, [r0, #120]	@ 0x78
    tickstart = HAL_GetTick();
 8013d0e:	f7ff f81f 	bl	8012d50 <HAL_GetTick>
 8013d12:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
 8013d14:	f8a4 8050 	strh.w	r8, [r4, #80]	@ 0x50
    huart->TxXferCount = Size;
 8013d18:	f8a4 8052 	strh.w	r8, [r4, #82]	@ 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d1c:	68a3      	ldr	r3, [r4, #8]
 8013d1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013d22:	d005      	beq.n	8013d30 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8013d24:	f04f 0800 	mov.w	r8, #0
    __HAL_UNLOCK(huart);
 8013d28:	2300      	movs	r3, #0
 8013d2a:	f884 3074 	strb.w	r3, [r4, #116]	@ 0x74
    while (huart->TxXferCount > 0U)
 8013d2e:	e012      	b.n	8013d56 <HAL_UART_Transmit+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013d30:	6923      	ldr	r3, [r4, #16]
 8013d32:	b113      	cbz	r3, 8013d3a <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8013d34:	f04f 0800 	mov.w	r8, #0
 8013d38:	e7f6      	b.n	8013d28 <HAL_UART_Transmit+0x4e>
      pdata16bits = (uint16_t *) pData;
 8013d3a:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8013d3c:	2500      	movs	r5, #0
 8013d3e:	e7f3      	b.n	8013d28 <HAL_UART_Transmit+0x4e>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8013d40:	f815 2b01 	ldrb.w	r2, [r5], #1
 8013d44:	6823      	ldr	r3, [r4, #0]
 8013d46:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->TxXferCount--;
 8013d48:	f8b4 2052 	ldrh.w	r2, [r4, #82]	@ 0x52
 8013d4c:	b292      	uxth	r2, r2
 8013d4e:	3a01      	subs	r2, #1
 8013d50:	b292      	uxth	r2, r2
 8013d52:	f8a4 2052 	strh.w	r2, [r4, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8013d56:	f8b4 3052 	ldrh.w	r3, [r4, #82]	@ 0x52
 8013d5a:	b29b      	uxth	r3, r3
 8013d5c:	b183      	cbz	r3, 8013d80 <HAL_UART_Transmit+0xa6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8013d5e:	9600      	str	r6, [sp, #0]
 8013d60:	463b      	mov	r3, r7
 8013d62:	2200      	movs	r2, #0
 8013d64:	2180      	movs	r1, #128	@ 0x80
 8013d66:	4620      	mov	r0, r4
 8013d68:	f7ff ff65 	bl	8013c36 <UART_WaitOnFlagUntilTimeout>
 8013d6c:	b9d8      	cbnz	r0, 8013da6 <HAL_UART_Transmit+0xcc>
      if (pdata8bits == NULL)
 8013d6e:	2d00      	cmp	r5, #0
 8013d70:	d1e6      	bne.n	8013d40 <HAL_UART_Transmit+0x66>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013d72:	f838 3b02 	ldrh.w	r3, [r8], #2
 8013d76:	6822      	ldr	r2, [r4, #0]
 8013d78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013d7c:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8013d7e:	e7e3      	b.n	8013d48 <HAL_UART_Transmit+0x6e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8013d80:	9600      	str	r6, [sp, #0]
 8013d82:	463b      	mov	r3, r7
 8013d84:	2200      	movs	r2, #0
 8013d86:	2140      	movs	r1, #64	@ 0x40
 8013d88:	4620      	mov	r0, r4
 8013d8a:	f7ff ff54 	bl	8013c36 <UART_WaitOnFlagUntilTimeout>
 8013d8e:	b960      	cbnz	r0, 8013daa <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8013d90:	2320      	movs	r3, #32
 8013d92:	67a3      	str	r3, [r4, #120]	@ 0x78
    return HAL_OK;
 8013d94:	e000      	b.n	8013d98 <HAL_UART_Transmit+0xbe>
    return HAL_BUSY;
 8013d96:	2002      	movs	r0, #2
}
 8013d98:	b002      	add	sp, #8
 8013d9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8013d9e:	2001      	movs	r0, #1
 8013da0:	e7fa      	b.n	8013d98 <HAL_UART_Transmit+0xbe>
    __HAL_LOCK(huart);
 8013da2:	2002      	movs	r0, #2
 8013da4:	e7f8      	b.n	8013d98 <HAL_UART_Transmit+0xbe>
        return HAL_TIMEOUT;
 8013da6:	2003      	movs	r0, #3
 8013da8:	e7f6      	b.n	8013d98 <HAL_UART_Transmit+0xbe>
      return HAL_TIMEOUT;
 8013daa:	2003      	movs	r0, #3
 8013dac:	e7f4      	b.n	8013d98 <HAL_UART_Transmit+0xbe>

08013dae <UART_CheckIdleState>:
{
 8013dae:	b530      	push	{r4, r5, lr}
 8013db0:	b083      	sub	sp, #12
 8013db2:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013db4:	2300      	movs	r3, #0
 8013db6:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
  tickstart = HAL_GetTick();
 8013dba:	f7fe ffc9 	bl	8012d50 <HAL_GetTick>
 8013dbe:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013dc0:	6822      	ldr	r2, [r4, #0]
 8013dc2:	6812      	ldr	r2, [r2, #0]
 8013dc4:	f012 0f08 	tst.w	r2, #8
 8013dc8:	d10d      	bne.n	8013de6 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013dca:	6823      	ldr	r3, [r4, #0]
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	f013 0f04 	tst.w	r3, #4
 8013dd2:	d116      	bne.n	8013e02 <UART_CheckIdleState+0x54>
  huart->gState = HAL_UART_STATE_READY;
 8013dd4:	2320      	movs	r3, #32
 8013dd6:	67a3      	str	r3, [r4, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8013dd8:	67e3      	str	r3, [r4, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013dda:	2000      	movs	r0, #0
 8013ddc:	6620      	str	r0, [r4, #96]	@ 0x60
  __HAL_UNLOCK(huart);
 8013dde:	f884 0074 	strb.w	r0, [r4, #116]	@ 0x74
}
 8013de2:	b003      	add	sp, #12
 8013de4:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013de6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013dea:	9300      	str	r3, [sp, #0]
 8013dec:	4603      	mov	r3, r0
 8013dee:	2200      	movs	r2, #0
 8013df0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8013df4:	4620      	mov	r0, r4
 8013df6:	f7ff ff1e 	bl	8013c36 <UART_WaitOnFlagUntilTimeout>
 8013dfa:	2800      	cmp	r0, #0
 8013dfc:	d0e5      	beq.n	8013dca <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8013dfe:	2003      	movs	r0, #3
 8013e00:	e7ef      	b.n	8013de2 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013e02:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8013e06:	9300      	str	r3, [sp, #0]
 8013e08:	462b      	mov	r3, r5
 8013e0a:	2200      	movs	r2, #0
 8013e0c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8013e10:	4620      	mov	r0, r4
 8013e12:	f7ff ff10 	bl	8013c36 <UART_WaitOnFlagUntilTimeout>
 8013e16:	2800      	cmp	r0, #0
 8013e18:	d0dc      	beq.n	8013dd4 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8013e1a:	2003      	movs	r0, #3
 8013e1c:	e7e1      	b.n	8013de2 <UART_CheckIdleState+0x34>

08013e1e <HAL_UART_Init>:
  if (huart == NULL)
 8013e1e:	b368      	cbz	r0, 8013e7c <HAL_UART_Init+0x5e>
{
 8013e20:	b510      	push	{r4, lr}
 8013e22:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8013e24:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 8013e26:	b303      	cbz	r3, 8013e6a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8013e28:	2324      	movs	r3, #36	@ 0x24
 8013e2a:	67a3      	str	r3, [r4, #120]	@ 0x78
  __HAL_UART_DISABLE(huart);
 8013e2c:	6822      	ldr	r2, [r4, #0]
 8013e2e:	6813      	ldr	r3, [r2, #0]
 8013e30:	f023 0301 	bic.w	r3, r3, #1
 8013e34:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8013e36:	4620      	mov	r0, r4
 8013e38:	f7ff fd04 	bl	8013844 <UART_SetConfig>
 8013e3c:	2801      	cmp	r0, #1
 8013e3e:	d013      	beq.n	8013e68 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013e40:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8013e42:	b9bb      	cbnz	r3, 8013e74 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013e44:	6822      	ldr	r2, [r4, #0]
 8013e46:	6853      	ldr	r3, [r2, #4]
 8013e48:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8013e4c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013e4e:	6822      	ldr	r2, [r4, #0]
 8013e50:	6893      	ldr	r3, [r2, #8]
 8013e52:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8013e56:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8013e58:	6822      	ldr	r2, [r4, #0]
 8013e5a:	6813      	ldr	r3, [r2, #0]
 8013e5c:	f043 0301 	orr.w	r3, r3, #1
 8013e60:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8013e62:	4620      	mov	r0, r4
 8013e64:	f7ff ffa3 	bl	8013dae <UART_CheckIdleState>
}
 8013e68:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8013e6a:	f880 3074 	strb.w	r3, [r0, #116]	@ 0x74
    HAL_UART_MspInit(huart);
 8013e6e:	f7ff fce7 	bl	8013840 <HAL_UART_MspInit>
 8013e72:	e7d9      	b.n	8013e28 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 8013e74:	4620      	mov	r0, r4
 8013e76:	f7ff fe79 	bl	8013b6c <UART_AdvFeatureConfig>
 8013e7a:	e7e3      	b.n	8013e44 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 8013e7c:	2001      	movs	r0, #1
}
 8013e7e:	4770      	bx	lr

08013e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8013e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8013eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8013e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8013e86:	e003      	b.n	8013e90 <LoopCopyDataInit>

08013e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8013e88:	4b0c      	ldr	r3, [pc, #48]	@ (8013ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8013e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8013e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8013e8e:	3104      	adds	r1, #4

08013e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8013e90:	480b      	ldr	r0, [pc, #44]	@ (8013ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8013e92:	4b0c      	ldr	r3, [pc, #48]	@ (8013ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8013e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8013e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8013e98:	d3f6      	bcc.n	8013e88 <CopyDataInit>
  ldr  r2, =_sbss
 8013e9a:	4a0b      	ldr	r2, [pc, #44]	@ (8013ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8013e9c:	e002      	b.n	8013ea4 <LoopFillZerobss>

08013e9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8013e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8013ea0:	f842 3b04 	str.w	r3, [r2], #4

08013ea4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8013ea4:	4b09      	ldr	r3, [pc, #36]	@ (8013ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8013ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8013ea8:	d3f9      	bcc.n	8013e9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8013eaa:	f7fd fcc9 	bl	8011840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8013eae:	f000 ffb9 	bl	8014e24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8013eb2:	f7fd facd 	bl	8011450 <main>
  bx  lr
 8013eb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8013eb8:	2007c000 	.word	0x2007c000
  ldr  r3, =_sidata
 8013ebc:	0801ad2c 	.word	0x0801ad2c
  ldr  r0, =_sdata
 8013ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8013ec4:	200006f8 	.word	0x200006f8
  ldr  r2, =_sbss
 8013ec8:	200006f8 	.word	0x200006f8
  ldr  r3, = _ebss
 8013ecc:	20003fa4 	.word	0x20003fa4

08013ed0 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8013ed0:	e7fe      	b.n	8013ed0 <ADC_IRQHandler>
	...

08013ed4 <_write>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

int _write(int file, char *ptr, int len)
{
 8013ed4:	b570      	push	{r4, r5, r6, lr}
 8013ed6:	460e      	mov	r6, r1
 8013ed8:	4615      	mov	r5, r2
   int i;

   if(file == 1)
 8013eda:	2801      	cmp	r0, #1
 8013edc:	d00d      	beq.n	8013efa <_write+0x26>
   {
      for(i = 0; i < len; i++)
      fputc(ptr[i], stdout);
   }
   else if(file == 2)
 8013ede:	2802      	cmp	r0, #2
 8013ee0:	d017      	beq.n	8013f12 <_write+0x3e>
      for(i = 0; i < len; i++)
      fputc(ptr[i], stderr);
   }

   return len;
}
 8013ee2:	4628      	mov	r0, r5
 8013ee4:	bd70      	pop	{r4, r5, r6, pc}
      fputc(ptr[i], stdout);
 8013ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8013f18 <_write+0x44>)
 8013ee8:	681b      	ldr	r3, [r3, #0]
 8013eea:	6899      	ldr	r1, [r3, #8]
 8013eec:	5d30      	ldrb	r0, [r6, r4]
 8013eee:	f7fd f941 	bl	8011174 <fputc>
      for(i = 0; i < len; i++)
 8013ef2:	3401      	adds	r4, #1
 8013ef4:	42ac      	cmp	r4, r5
 8013ef6:	dbf6      	blt.n	8013ee6 <_write+0x12>
 8013ef8:	e7f3      	b.n	8013ee2 <_write+0xe>
 8013efa:	2400      	movs	r4, #0
 8013efc:	e7fa      	b.n	8013ef4 <_write+0x20>
      fputc(ptr[i], stderr);
 8013efe:	4b06      	ldr	r3, [pc, #24]	@ (8013f18 <_write+0x44>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	68d9      	ldr	r1, [r3, #12]
 8013f04:	5d30      	ldrb	r0, [r6, r4]
 8013f06:	f7fd f935 	bl	8011174 <fputc>
      for(i = 0; i < len; i++)
 8013f0a:	3401      	adds	r4, #1
 8013f0c:	42ac      	cmp	r4, r5
 8013f0e:	dbf6      	blt.n	8013efe <_write+0x2a>
 8013f10:	e7e7      	b.n	8013ee2 <_write+0xe>
 8013f12:	2400      	movs	r4, #0
 8013f14:	e7fa      	b.n	8013f0c <_write+0x38>
 8013f16:	bf00      	nop
 8013f18:	20000440 	.word	0x20000440

08013f1c <_read>:

int _read(int file, char *ptr, int len)
{
   return 0;
}
 8013f1c:	2000      	movs	r0, #0
 8013f1e:	4770      	bx	lr

08013f20 <_sbrk>:

extern caddr_t _sbrk(int incr)
{
 8013f20:	4603      	mov	r3, r0
   static caddr_t heap_end = NULL;
   caddr_t prev_heap_end;

   if(heap_end == NULL)
 8013f22:	4a0b      	ldr	r2, [pc, #44]	@ (8013f50 <_sbrk+0x30>)
 8013f24:	6812      	ldr	r2, [r2, #0]
 8013f26:	b142      	cbz	r2, 8013f3a <_sbrk+0x1a>
      heap_end = (caddr_t) &_end;

   prev_heap_end = heap_end;
 8013f28:	4a09      	ldr	r2, [pc, #36]	@ (8013f50 <_sbrk+0x30>)
 8013f2a:	6810      	ldr	r0, [r2, #0]

   if((heap_end + incr) > (caddr_t) &_max_heap)
 8013f2c:	4403      	add	r3, r0
 8013f2e:	4a09      	ldr	r2, [pc, #36]	@ (8013f54 <_sbrk+0x34>)
 8013f30:	4293      	cmp	r3, r2
 8013f32:	d806      	bhi.n	8013f42 <_sbrk+0x22>
   {
      errno = ENOMEM;
      return (caddr_t) -1;
   }

   heap_end += incr;
 8013f34:	4a06      	ldr	r2, [pc, #24]	@ (8013f50 <_sbrk+0x30>)
 8013f36:	6013      	str	r3, [r2, #0]

   return prev_heap_end;
}
 8013f38:	4770      	bx	lr
      heap_end = (caddr_t) &_end;
 8013f3a:	4a05      	ldr	r2, [pc, #20]	@ (8013f50 <_sbrk+0x30>)
 8013f3c:	4906      	ldr	r1, [pc, #24]	@ (8013f58 <_sbrk+0x38>)
 8013f3e:	6011      	str	r1, [r2, #0]
 8013f40:	e7f2      	b.n	8013f28 <_sbrk+0x8>
      errno = ENOMEM;
 8013f42:	4b06      	ldr	r3, [pc, #24]	@ (8013f5c <_sbrk+0x3c>)
 8013f44:	220c      	movs	r2, #12
 8013f46:	601a      	str	r2, [r3, #0]
      return (caddr_t) -1;
 8013f48:	f04f 30ff 	mov.w	r0, #4294967295
 8013f4c:	4770      	bx	lr
 8013f4e:	bf00      	nop
 8013f50:	20003c94 	.word	0x20003c94
 8013f54:	20023fa4 	.word	0x20023fa4
 8013f58:	20003fa4 	.word	0x20003fa4
 8013f5c:	20003e08 	.word	0x20003e08

08013f60 <_close>:
}

extern int _close(int file)
{
   return -1;
}
 8013f60:	f04f 30ff 	mov.w	r0, #4294967295
 8013f64:	4770      	bx	lr

08013f66 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   st->st_mode = S_IFCHR;
 8013f66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8013f6a:	604b      	str	r3, [r1, #4]
   return 0;
}
 8013f6c:	2000      	movs	r0, #0
 8013f6e:	4770      	bx	lr

08013f70 <_isatty>:

extern int _isatty(int file)
{
   return 1;
}
 8013f70:	2001      	movs	r0, #1
 8013f72:	4770      	bx	lr

08013f74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   return 0;
}
 8013f74:	2000      	movs	r0, #0
 8013f76:	4770      	bx	lr

08013f78 <_exit>:

extern void _exit(int status)
{
   while(1);
 8013f78:	e7fe      	b.n	8013f78 <_exit>

08013f7a <_kill>:
}

extern void _kill(int pid, int sig)
{
   return;
}
 8013f7a:	4770      	bx	lr

08013f7c <_getpid>:

extern int _getpid(void)
{
   return -1;
}
 8013f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8013f80:	4770      	bx	lr
	...

08013f84 <malloc>:
 8013f84:	4b02      	ldr	r3, [pc, #8]	@ (8013f90 <malloc+0xc>)
 8013f86:	4601      	mov	r1, r0
 8013f88:	6818      	ldr	r0, [r3, #0]
 8013f8a:	f000 b80b 	b.w	8013fa4 <_malloc_r>
 8013f8e:	bf00      	nop
 8013f90:	20000440 	.word	0x20000440

08013f94 <free>:
 8013f94:	4b02      	ldr	r3, [pc, #8]	@ (8013fa0 <free+0xc>)
 8013f96:	4601      	mov	r1, r0
 8013f98:	6818      	ldr	r0, [r3, #0]
 8013f9a:	f000 bff3 	b.w	8014f84 <_free_r>
 8013f9e:	bf00      	nop
 8013fa0:	20000440 	.word	0x20000440

08013fa4 <_malloc_r>:
 8013fa4:	f101 030b 	add.w	r3, r1, #11
 8013fa8:	2b16      	cmp	r3, #22
 8013faa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fae:	4605      	mov	r5, r0
 8013fb0:	d906      	bls.n	8013fc0 <_malloc_r+0x1c>
 8013fb2:	f033 0707 	bics.w	r7, r3, #7
 8013fb6:	d504      	bpl.n	8013fc2 <_malloc_r+0x1e>
 8013fb8:	230c      	movs	r3, #12
 8013fba:	602b      	str	r3, [r5, #0]
 8013fbc:	2400      	movs	r4, #0
 8013fbe:	e1a3      	b.n	8014308 <_malloc_r+0x364>
 8013fc0:	2710      	movs	r7, #16
 8013fc2:	42b9      	cmp	r1, r7
 8013fc4:	d8f8      	bhi.n	8013fb8 <_malloc_r+0x14>
 8013fc6:	4628      	mov	r0, r5
 8013fc8:	f000 fa26 	bl	8014418 <__malloc_lock>
 8013fcc:	f5b7 7ffc 	cmp.w	r7, #504	@ 0x1f8
 8013fd0:	4eaf      	ldr	r6, [pc, #700]	@ (8014290 <_malloc_r+0x2ec>)
 8013fd2:	d237      	bcs.n	8014044 <_malloc_r+0xa0>
 8013fd4:	f107 0208 	add.w	r2, r7, #8
 8013fd8:	4432      	add	r2, r6
 8013fda:	f1a2 0108 	sub.w	r1, r2, #8
 8013fde:	6854      	ldr	r4, [r2, #4]
 8013fe0:	428c      	cmp	r4, r1
 8013fe2:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8013fe6:	d102      	bne.n	8013fee <_malloc_r+0x4a>
 8013fe8:	68d4      	ldr	r4, [r2, #12]
 8013fea:	42a2      	cmp	r2, r4
 8013fec:	d010      	beq.n	8014010 <_malloc_r+0x6c>
 8013fee:	6863      	ldr	r3, [r4, #4]
 8013ff0:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8013ff4:	f023 0303 	bic.w	r3, r3, #3
 8013ff8:	60ca      	str	r2, [r1, #12]
 8013ffa:	4423      	add	r3, r4
 8013ffc:	6091      	str	r1, [r2, #8]
 8013ffe:	685a      	ldr	r2, [r3, #4]
 8014000:	f042 0201 	orr.w	r2, r2, #1
 8014004:	605a      	str	r2, [r3, #4]
 8014006:	4628      	mov	r0, r5
 8014008:	f000 fa0c 	bl	8014424 <__malloc_unlock>
 801400c:	3408      	adds	r4, #8
 801400e:	e17b      	b.n	8014308 <_malloc_r+0x364>
 8014010:	3302      	adds	r3, #2
 8014012:	6934      	ldr	r4, [r6, #16]
 8014014:	499f      	ldr	r1, [pc, #636]	@ (8014294 <_malloc_r+0x2f0>)
 8014016:	428c      	cmp	r4, r1
 8014018:	d077      	beq.n	801410a <_malloc_r+0x166>
 801401a:	6862      	ldr	r2, [r4, #4]
 801401c:	f022 0c03 	bic.w	ip, r2, #3
 8014020:	ebac 0007 	sub.w	r0, ip, r7
 8014024:	280f      	cmp	r0, #15
 8014026:	dd48      	ble.n	80140ba <_malloc_r+0x116>
 8014028:	19e2      	adds	r2, r4, r7
 801402a:	f040 0301 	orr.w	r3, r0, #1
 801402e:	f047 0701 	orr.w	r7, r7, #1
 8014032:	6067      	str	r7, [r4, #4]
 8014034:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8014038:	e9c2 1102 	strd	r1, r1, [r2, #8]
 801403c:	6053      	str	r3, [r2, #4]
 801403e:	f844 000c 	str.w	r0, [r4, ip]
 8014042:	e7e0      	b.n	8014006 <_malloc_r+0x62>
 8014044:	0a7b      	lsrs	r3, r7, #9
 8014046:	d02a      	beq.n	801409e <_malloc_r+0xfa>
 8014048:	2b04      	cmp	r3, #4
 801404a:	d812      	bhi.n	8014072 <_malloc_r+0xce>
 801404c:	09bb      	lsrs	r3, r7, #6
 801404e:	3338      	adds	r3, #56	@ 0x38
 8014050:	1c5a      	adds	r2, r3, #1
 8014052:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8014056:	f1a2 0c08 	sub.w	ip, r2, #8
 801405a:	6854      	ldr	r4, [r2, #4]
 801405c:	4564      	cmp	r4, ip
 801405e:	d006      	beq.n	801406e <_malloc_r+0xca>
 8014060:	6862      	ldr	r2, [r4, #4]
 8014062:	f022 0203 	bic.w	r2, r2, #3
 8014066:	1bd0      	subs	r0, r2, r7
 8014068:	280f      	cmp	r0, #15
 801406a:	dd1c      	ble.n	80140a6 <_malloc_r+0x102>
 801406c:	3b01      	subs	r3, #1
 801406e:	3301      	adds	r3, #1
 8014070:	e7cf      	b.n	8014012 <_malloc_r+0x6e>
 8014072:	2b14      	cmp	r3, #20
 8014074:	d801      	bhi.n	801407a <_malloc_r+0xd6>
 8014076:	335b      	adds	r3, #91	@ 0x5b
 8014078:	e7ea      	b.n	8014050 <_malloc_r+0xac>
 801407a:	2b54      	cmp	r3, #84	@ 0x54
 801407c:	d802      	bhi.n	8014084 <_malloc_r+0xe0>
 801407e:	0b3b      	lsrs	r3, r7, #12
 8014080:	336e      	adds	r3, #110	@ 0x6e
 8014082:	e7e5      	b.n	8014050 <_malloc_r+0xac>
 8014084:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 8014088:	d802      	bhi.n	8014090 <_malloc_r+0xec>
 801408a:	0bfb      	lsrs	r3, r7, #15
 801408c:	3377      	adds	r3, #119	@ 0x77
 801408e:	e7df      	b.n	8014050 <_malloc_r+0xac>
 8014090:	f240 5254 	movw	r2, #1364	@ 0x554
 8014094:	4293      	cmp	r3, r2
 8014096:	d804      	bhi.n	80140a2 <_malloc_r+0xfe>
 8014098:	0cbb      	lsrs	r3, r7, #18
 801409a:	337c      	adds	r3, #124	@ 0x7c
 801409c:	e7d8      	b.n	8014050 <_malloc_r+0xac>
 801409e:	233f      	movs	r3, #63	@ 0x3f
 80140a0:	e7d6      	b.n	8014050 <_malloc_r+0xac>
 80140a2:	237e      	movs	r3, #126	@ 0x7e
 80140a4:	e7d4      	b.n	8014050 <_malloc_r+0xac>
 80140a6:	2800      	cmp	r0, #0
 80140a8:	68e1      	ldr	r1, [r4, #12]
 80140aa:	db04      	blt.n	80140b6 <_malloc_r+0x112>
 80140ac:	68a3      	ldr	r3, [r4, #8]
 80140ae:	60d9      	str	r1, [r3, #12]
 80140b0:	608b      	str	r3, [r1, #8]
 80140b2:	18a3      	adds	r3, r4, r2
 80140b4:	e7a3      	b.n	8013ffe <_malloc_r+0x5a>
 80140b6:	460c      	mov	r4, r1
 80140b8:	e7d0      	b.n	801405c <_malloc_r+0xb8>
 80140ba:	2800      	cmp	r0, #0
 80140bc:	e9c6 1104 	strd	r1, r1, [r6, #16]
 80140c0:	db07      	blt.n	80140d2 <_malloc_r+0x12e>
 80140c2:	44a4      	add	ip, r4
 80140c4:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80140c8:	f043 0301 	orr.w	r3, r3, #1
 80140cc:	f8cc 3004 	str.w	r3, [ip, #4]
 80140d0:	e799      	b.n	8014006 <_malloc_r+0x62>
 80140d2:	f5bc 7f00 	cmp.w	ip, #512	@ 0x200
 80140d6:	6870      	ldr	r0, [r6, #4]
 80140d8:	f080 8095 	bcs.w	8014206 <_malloc_r+0x262>
 80140dc:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 80140e0:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 80140e4:	f04f 0c01 	mov.w	ip, #1
 80140e8:	3201      	adds	r2, #1
 80140ea:	fa0c fc0e 	lsl.w	ip, ip, lr
 80140ee:	ea4c 0000 	orr.w	r0, ip, r0
 80140f2:	6070      	str	r0, [r6, #4]
 80140f4:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 80140f8:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 80140fc:	3808      	subs	r0, #8
 80140fe:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8014102:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8014106:	f8cc 400c 	str.w	r4, [ip, #12]
 801410a:	1098      	asrs	r0, r3, #2
 801410c:	2201      	movs	r2, #1
 801410e:	4082      	lsls	r2, r0
 8014110:	6870      	ldr	r0, [r6, #4]
 8014112:	4290      	cmp	r0, r2
 8014114:	d326      	bcc.n	8014164 <_malloc_r+0x1c0>
 8014116:	4210      	tst	r0, r2
 8014118:	d106      	bne.n	8014128 <_malloc_r+0x184>
 801411a:	f023 0303 	bic.w	r3, r3, #3
 801411e:	0052      	lsls	r2, r2, #1
 8014120:	4210      	tst	r0, r2
 8014122:	f103 0304 	add.w	r3, r3, #4
 8014126:	d0fa      	beq.n	801411e <_malloc_r+0x17a>
 8014128:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 801412c:	46c1      	mov	r9, r8
 801412e:	469e      	mov	lr, r3
 8014130:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8014134:	454c      	cmp	r4, r9
 8014136:	f040 80b9 	bne.w	80142ac <_malloc_r+0x308>
 801413a:	f10e 0e01 	add.w	lr, lr, #1
 801413e:	f01e 0f03 	tst.w	lr, #3
 8014142:	f109 0908 	add.w	r9, r9, #8
 8014146:	d1f3      	bne.n	8014130 <_malloc_r+0x18c>
 8014148:	0798      	lsls	r0, r3, #30
 801414a:	f040 80e3 	bne.w	8014314 <_malloc_r+0x370>
 801414e:	6873      	ldr	r3, [r6, #4]
 8014150:	ea23 0302 	bic.w	r3, r3, r2
 8014154:	6073      	str	r3, [r6, #4]
 8014156:	6870      	ldr	r0, [r6, #4]
 8014158:	0052      	lsls	r2, r2, #1
 801415a:	4290      	cmp	r0, r2
 801415c:	d302      	bcc.n	8014164 <_malloc_r+0x1c0>
 801415e:	2a00      	cmp	r2, #0
 8014160:	f040 80e5 	bne.w	801432e <_malloc_r+0x38a>
 8014164:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8014168:	f8da 3004 	ldr.w	r3, [sl, #4]
 801416c:	f023 0903 	bic.w	r9, r3, #3
 8014170:	45b9      	cmp	r9, r7
 8014172:	d304      	bcc.n	801417e <_malloc_r+0x1da>
 8014174:	eba9 0207 	sub.w	r2, r9, r7
 8014178:	2a0f      	cmp	r2, #15
 801417a:	f300 8141 	bgt.w	8014400 <_malloc_r+0x45c>
 801417e:	4b46      	ldr	r3, [pc, #280]	@ (8014298 <_malloc_r+0x2f4>)
 8014180:	6819      	ldr	r1, [r3, #0]
 8014182:	3110      	adds	r1, #16
 8014184:	4439      	add	r1, r7
 8014186:	2008      	movs	r0, #8
 8014188:	9101      	str	r1, [sp, #4]
 801418a:	f000 fe73 	bl	8014e74 <sysconf>
 801418e:	4a43      	ldr	r2, [pc, #268]	@ (801429c <_malloc_r+0x2f8>)
 8014190:	9901      	ldr	r1, [sp, #4]
 8014192:	6813      	ldr	r3, [r2, #0]
 8014194:	3301      	adds	r3, #1
 8014196:	bf1f      	itttt	ne
 8014198:	f101 31ff 	addne.w	r1, r1, #4294967295
 801419c:	1809      	addne	r1, r1, r0
 801419e:	4243      	negne	r3, r0
 80141a0:	4019      	andne	r1, r3
 80141a2:	4680      	mov	r8, r0
 80141a4:	4628      	mov	r0, r5
 80141a6:	9101      	str	r1, [sp, #4]
 80141a8:	f000 fe1a 	bl	8014de0 <_sbrk_r>
 80141ac:	1c42      	adds	r2, r0, #1
 80141ae:	eb0a 0b09 	add.w	fp, sl, r9
 80141b2:	4604      	mov	r4, r0
 80141b4:	f000 80f7 	beq.w	80143a6 <_malloc_r+0x402>
 80141b8:	4583      	cmp	fp, r0
 80141ba:	9901      	ldr	r1, [sp, #4]
 80141bc:	4a37      	ldr	r2, [pc, #220]	@ (801429c <_malloc_r+0x2f8>)
 80141be:	d902      	bls.n	80141c6 <_malloc_r+0x222>
 80141c0:	45b2      	cmp	sl, r6
 80141c2:	f040 80f0 	bne.w	80143a6 <_malloc_r+0x402>
 80141c6:	4b36      	ldr	r3, [pc, #216]	@ (80142a0 <_malloc_r+0x2fc>)
 80141c8:	6818      	ldr	r0, [r3, #0]
 80141ca:	45a3      	cmp	fp, r4
 80141cc:	eb00 0e01 	add.w	lr, r0, r1
 80141d0:	f8c3 e000 	str.w	lr, [r3]
 80141d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80141d8:	f040 80ab 	bne.w	8014332 <_malloc_r+0x38e>
 80141dc:	ea1b 0f0c 	tst.w	fp, ip
 80141e0:	f040 80a7 	bne.w	8014332 <_malloc_r+0x38e>
 80141e4:	68b2      	ldr	r2, [r6, #8]
 80141e6:	4449      	add	r1, r9
 80141e8:	f041 0101 	orr.w	r1, r1, #1
 80141ec:	6051      	str	r1, [r2, #4]
 80141ee:	4a2d      	ldr	r2, [pc, #180]	@ (80142a4 <_malloc_r+0x300>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	6811      	ldr	r1, [r2, #0]
 80141f4:	428b      	cmp	r3, r1
 80141f6:	bf88      	it	hi
 80141f8:	6013      	strhi	r3, [r2, #0]
 80141fa:	4a2b      	ldr	r2, [pc, #172]	@ (80142a8 <_malloc_r+0x304>)
 80141fc:	6811      	ldr	r1, [r2, #0]
 80141fe:	428b      	cmp	r3, r1
 8014200:	bf88      	it	hi
 8014202:	6013      	strhi	r3, [r2, #0]
 8014204:	e0cf      	b.n	80143a6 <_malloc_r+0x402>
 8014206:	f5bc 6f20 	cmp.w	ip, #2560	@ 0xa00
 801420a:	ea4f 225c 	mov.w	r2, ip, lsr #9
 801420e:	d218      	bcs.n	8014242 <_malloc_r+0x29e>
 8014210:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8014214:	3238      	adds	r2, #56	@ 0x38
 8014216:	f102 0e01 	add.w	lr, r2, #1
 801421a:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 801421e:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8014222:	45f0      	cmp	r8, lr
 8014224:	d12b      	bne.n	801427e <_malloc_r+0x2da>
 8014226:	1092      	asrs	r2, r2, #2
 8014228:	f04f 0c01 	mov.w	ip, #1
 801422c:	fa0c f202 	lsl.w	r2, ip, r2
 8014230:	4302      	orrs	r2, r0
 8014232:	6072      	str	r2, [r6, #4]
 8014234:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8014238:	f8c8 4008 	str.w	r4, [r8, #8]
 801423c:	f8ce 400c 	str.w	r4, [lr, #12]
 8014240:	e763      	b.n	801410a <_malloc_r+0x166>
 8014242:	2a14      	cmp	r2, #20
 8014244:	d801      	bhi.n	801424a <_malloc_r+0x2a6>
 8014246:	325b      	adds	r2, #91	@ 0x5b
 8014248:	e7e5      	b.n	8014216 <_malloc_r+0x272>
 801424a:	2a54      	cmp	r2, #84	@ 0x54
 801424c:	d803      	bhi.n	8014256 <_malloc_r+0x2b2>
 801424e:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8014252:	326e      	adds	r2, #110	@ 0x6e
 8014254:	e7df      	b.n	8014216 <_malloc_r+0x272>
 8014256:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 801425a:	d803      	bhi.n	8014264 <_malloc_r+0x2c0>
 801425c:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8014260:	3277      	adds	r2, #119	@ 0x77
 8014262:	e7d8      	b.n	8014216 <_malloc_r+0x272>
 8014264:	f240 5e54 	movw	lr, #1364	@ 0x554
 8014268:	4572      	cmp	r2, lr
 801426a:	bf9a      	itte	ls
 801426c:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8014270:	327c      	addls	r2, #124	@ 0x7c
 8014272:	227e      	movhi	r2, #126	@ 0x7e
 8014274:	e7cf      	b.n	8014216 <_malloc_r+0x272>
 8014276:	f8de e008 	ldr.w	lr, [lr, #8]
 801427a:	45f0      	cmp	r8, lr
 801427c:	d005      	beq.n	801428a <_malloc_r+0x2e6>
 801427e:	f8de 2004 	ldr.w	r2, [lr, #4]
 8014282:	f022 0203 	bic.w	r2, r2, #3
 8014286:	4562      	cmp	r2, ip
 8014288:	d8f5      	bhi.n	8014276 <_malloc_r+0x2d2>
 801428a:	f8de 800c 	ldr.w	r8, [lr, #12]
 801428e:	e7d1      	b.n	8014234 <_malloc_r+0x290>
 8014290:	2000002c 	.word	0x2000002c
 8014294:	20000034 	.word	0x20000034
 8014298:	20003cc8 	.word	0x20003cc8
 801429c:	20000024 	.word	0x20000024
 80142a0:	20003c98 	.word	0x20003c98
 80142a4:	20003cc4 	.word	0x20003cc4
 80142a8:	20003cc0 	.word	0x20003cc0
 80142ac:	6860      	ldr	r0, [r4, #4]
 80142ae:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80142b2:	f020 0003 	bic.w	r0, r0, #3
 80142b6:	eba0 0a07 	sub.w	sl, r0, r7
 80142ba:	f1ba 0f0f 	cmp.w	sl, #15
 80142be:	dd12      	ble.n	80142e6 <_malloc_r+0x342>
 80142c0:	68a3      	ldr	r3, [r4, #8]
 80142c2:	19e2      	adds	r2, r4, r7
 80142c4:	f047 0701 	orr.w	r7, r7, #1
 80142c8:	6067      	str	r7, [r4, #4]
 80142ca:	f8c3 c00c 	str.w	ip, [r3, #12]
 80142ce:	f8cc 3008 	str.w	r3, [ip, #8]
 80142d2:	f04a 0301 	orr.w	r3, sl, #1
 80142d6:	e9c6 2204 	strd	r2, r2, [r6, #16]
 80142da:	e9c2 1102 	strd	r1, r1, [r2, #8]
 80142de:	6053      	str	r3, [r2, #4]
 80142e0:	f844 a000 	str.w	sl, [r4, r0]
 80142e4:	e68f      	b.n	8014006 <_malloc_r+0x62>
 80142e6:	f1ba 0f00 	cmp.w	sl, #0
 80142ea:	db11      	blt.n	8014310 <_malloc_r+0x36c>
 80142ec:	4420      	add	r0, r4
 80142ee:	6843      	ldr	r3, [r0, #4]
 80142f0:	f043 0301 	orr.w	r3, r3, #1
 80142f4:	6043      	str	r3, [r0, #4]
 80142f6:	f854 3f08 	ldr.w	r3, [r4, #8]!
 80142fa:	4628      	mov	r0, r5
 80142fc:	f8c3 c00c 	str.w	ip, [r3, #12]
 8014300:	f8cc 3008 	str.w	r3, [ip, #8]
 8014304:	f000 f88e 	bl	8014424 <__malloc_unlock>
 8014308:	4620      	mov	r0, r4
 801430a:	b003      	add	sp, #12
 801430c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014310:	4664      	mov	r4, ip
 8014312:	e70f      	b.n	8014134 <_malloc_r+0x190>
 8014314:	f858 0908 	ldr.w	r0, [r8], #-8
 8014318:	4540      	cmp	r0, r8
 801431a:	f103 33ff 	add.w	r3, r3, #4294967295
 801431e:	f43f af13 	beq.w	8014148 <_malloc_r+0x1a4>
 8014322:	e718      	b.n	8014156 <_malloc_r+0x1b2>
 8014324:	3304      	adds	r3, #4
 8014326:	0052      	lsls	r2, r2, #1
 8014328:	4210      	tst	r0, r2
 801432a:	d0fb      	beq.n	8014324 <_malloc_r+0x380>
 801432c:	e6fc      	b.n	8014128 <_malloc_r+0x184>
 801432e:	4673      	mov	r3, lr
 8014330:	e7fa      	b.n	8014328 <_malloc_r+0x384>
 8014332:	6810      	ldr	r0, [r2, #0]
 8014334:	3001      	adds	r0, #1
 8014336:	bf1b      	ittet	ne
 8014338:	eba4 0b0b 	subne.w	fp, r4, fp
 801433c:	eb0b 020e 	addne.w	r2, fp, lr
 8014340:	6014      	streq	r4, [r2, #0]
 8014342:	601a      	strne	r2, [r3, #0]
 8014344:	f014 0b07 	ands.w	fp, r4, #7
 8014348:	bf1a      	itte	ne
 801434a:	f1cb 0008 	rsbne	r0, fp, #8
 801434e:	1824      	addne	r4, r4, r0
 8014350:	4658      	moveq	r0, fp
 8014352:	1862      	adds	r2, r4, r1
 8014354:	ea02 010c 	and.w	r1, r2, ip
 8014358:	4480      	add	r8, r0
 801435a:	eba8 0801 	sub.w	r8, r8, r1
 801435e:	ea08 080c 	and.w	r8, r8, ip
 8014362:	4641      	mov	r1, r8
 8014364:	4628      	mov	r0, r5
 8014366:	9201      	str	r2, [sp, #4]
 8014368:	f000 fd3a 	bl	8014de0 <_sbrk_r>
 801436c:	1c43      	adds	r3, r0, #1
 801436e:	9a01      	ldr	r2, [sp, #4]
 8014370:	4b28      	ldr	r3, [pc, #160]	@ (8014414 <_malloc_r+0x470>)
 8014372:	d107      	bne.n	8014384 <_malloc_r+0x3e0>
 8014374:	f1bb 0f00 	cmp.w	fp, #0
 8014378:	d023      	beq.n	80143c2 <_malloc_r+0x41e>
 801437a:	f1ab 0008 	sub.w	r0, fp, #8
 801437e:	4410      	add	r0, r2
 8014380:	f04f 0800 	mov.w	r8, #0
 8014384:	681a      	ldr	r2, [r3, #0]
 8014386:	60b4      	str	r4, [r6, #8]
 8014388:	1b00      	subs	r0, r0, r4
 801438a:	4440      	add	r0, r8
 801438c:	4442      	add	r2, r8
 801438e:	f040 0001 	orr.w	r0, r0, #1
 8014392:	45b2      	cmp	sl, r6
 8014394:	601a      	str	r2, [r3, #0]
 8014396:	6060      	str	r0, [r4, #4]
 8014398:	f43f af29 	beq.w	80141ee <_malloc_r+0x24a>
 801439c:	f1b9 0f0f 	cmp.w	r9, #15
 80143a0:	d812      	bhi.n	80143c8 <_malloc_r+0x424>
 80143a2:	2301      	movs	r3, #1
 80143a4:	6063      	str	r3, [r4, #4]
 80143a6:	68b3      	ldr	r3, [r6, #8]
 80143a8:	685b      	ldr	r3, [r3, #4]
 80143aa:	f023 0303 	bic.w	r3, r3, #3
 80143ae:	42bb      	cmp	r3, r7
 80143b0:	eba3 0207 	sub.w	r2, r3, r7
 80143b4:	d301      	bcc.n	80143ba <_malloc_r+0x416>
 80143b6:	2a0f      	cmp	r2, #15
 80143b8:	dc22      	bgt.n	8014400 <_malloc_r+0x45c>
 80143ba:	4628      	mov	r0, r5
 80143bc:	f000 f832 	bl	8014424 <__malloc_unlock>
 80143c0:	e5fc      	b.n	8013fbc <_malloc_r+0x18>
 80143c2:	4610      	mov	r0, r2
 80143c4:	46d8      	mov	r8, fp
 80143c6:	e7dd      	b.n	8014384 <_malloc_r+0x3e0>
 80143c8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80143cc:	f1a9 090c 	sub.w	r9, r9, #12
 80143d0:	f029 0907 	bic.w	r9, r9, #7
 80143d4:	f002 0201 	and.w	r2, r2, #1
 80143d8:	ea42 0209 	orr.w	r2, r2, r9
 80143dc:	f8ca 2004 	str.w	r2, [sl, #4]
 80143e0:	2105      	movs	r1, #5
 80143e2:	eb0a 0209 	add.w	r2, sl, r9
 80143e6:	f1b9 0f0f 	cmp.w	r9, #15
 80143ea:	e9c2 1101 	strd	r1, r1, [r2, #4]
 80143ee:	f67f aefe 	bls.w	80141ee <_malloc_r+0x24a>
 80143f2:	f10a 0108 	add.w	r1, sl, #8
 80143f6:	4628      	mov	r0, r5
 80143f8:	f000 fdc4 	bl	8014f84 <_free_r>
 80143fc:	4b05      	ldr	r3, [pc, #20]	@ (8014414 <_malloc_r+0x470>)
 80143fe:	e6f6      	b.n	80141ee <_malloc_r+0x24a>
 8014400:	68b4      	ldr	r4, [r6, #8]
 8014402:	f047 0301 	orr.w	r3, r7, #1
 8014406:	4427      	add	r7, r4
 8014408:	f042 0201 	orr.w	r2, r2, #1
 801440c:	6063      	str	r3, [r4, #4]
 801440e:	60b7      	str	r7, [r6, #8]
 8014410:	607a      	str	r2, [r7, #4]
 8014412:	e5f8      	b.n	8014006 <_malloc_r+0x62>
 8014414:	20003c98 	.word	0x20003c98

08014418 <__malloc_lock>:
 8014418:	4801      	ldr	r0, [pc, #4]	@ (8014420 <__malloc_lock+0x8>)
 801441a:	f000 bd29 	b.w	8014e70 <__retarget_lock_acquire_recursive>
 801441e:	bf00      	nop
 8014420:	20003e0c 	.word	0x20003e0c

08014424 <__malloc_unlock>:
 8014424:	4801      	ldr	r0, [pc, #4]	@ (801442c <__malloc_unlock+0x8>)
 8014426:	f000 bd24 	b.w	8014e72 <__retarget_lock_release_recursive>
 801442a:	bf00      	nop
 801442c:	20003e0c 	.word	0x20003e0c

08014430 <_strtoul_l.isra.0>:
 8014430:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014434:	4e34      	ldr	r6, [pc, #208]	@ (8014508 <_strtoul_l.isra.0+0xd8>)
 8014436:	4686      	mov	lr, r0
 8014438:	460d      	mov	r5, r1
 801443a:	4628      	mov	r0, r5
 801443c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014440:	5d37      	ldrb	r7, [r6, r4]
 8014442:	f017 0708 	ands.w	r7, r7, #8
 8014446:	d1f8      	bne.n	801443a <_strtoul_l.isra.0+0xa>
 8014448:	2c2d      	cmp	r4, #45	@ 0x2d
 801444a:	d110      	bne.n	801446e <_strtoul_l.isra.0+0x3e>
 801444c:	782c      	ldrb	r4, [r5, #0]
 801444e:	2701      	movs	r7, #1
 8014450:	1c85      	adds	r5, r0, #2
 8014452:	f033 0010 	bics.w	r0, r3, #16
 8014456:	d115      	bne.n	8014484 <_strtoul_l.isra.0+0x54>
 8014458:	2c30      	cmp	r4, #48	@ 0x30
 801445a:	d10d      	bne.n	8014478 <_strtoul_l.isra.0+0x48>
 801445c:	7828      	ldrb	r0, [r5, #0]
 801445e:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8014462:	2858      	cmp	r0, #88	@ 0x58
 8014464:	d108      	bne.n	8014478 <_strtoul_l.isra.0+0x48>
 8014466:	786c      	ldrb	r4, [r5, #1]
 8014468:	3502      	adds	r5, #2
 801446a:	2310      	movs	r3, #16
 801446c:	e00a      	b.n	8014484 <_strtoul_l.isra.0+0x54>
 801446e:	2c2b      	cmp	r4, #43	@ 0x2b
 8014470:	bf04      	itt	eq
 8014472:	782c      	ldrbeq	r4, [r5, #0]
 8014474:	1c85      	addeq	r5, r0, #2
 8014476:	e7ec      	b.n	8014452 <_strtoul_l.isra.0+0x22>
 8014478:	2b00      	cmp	r3, #0
 801447a:	d1f6      	bne.n	801446a <_strtoul_l.isra.0+0x3a>
 801447c:	2c30      	cmp	r4, #48	@ 0x30
 801447e:	bf14      	ite	ne
 8014480:	230a      	movne	r3, #10
 8014482:	2308      	moveq	r3, #8
 8014484:	f04f 38ff 	mov.w	r8, #4294967295
 8014488:	2600      	movs	r6, #0
 801448a:	fbb8 f8f3 	udiv	r8, r8, r3
 801448e:	fb03 f908 	mul.w	r9, r3, r8
 8014492:	ea6f 0909 	mvn.w	r9, r9
 8014496:	4630      	mov	r0, r6
 8014498:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801449c:	f1bc 0f09 	cmp.w	ip, #9
 80144a0:	d810      	bhi.n	80144c4 <_strtoul_l.isra.0+0x94>
 80144a2:	4664      	mov	r4, ip
 80144a4:	42a3      	cmp	r3, r4
 80144a6:	dd1e      	ble.n	80144e6 <_strtoul_l.isra.0+0xb6>
 80144a8:	f1b6 3fff 	cmp.w	r6, #4294967295
 80144ac:	d007      	beq.n	80144be <_strtoul_l.isra.0+0x8e>
 80144ae:	4580      	cmp	r8, r0
 80144b0:	d316      	bcc.n	80144e0 <_strtoul_l.isra.0+0xb0>
 80144b2:	d101      	bne.n	80144b8 <_strtoul_l.isra.0+0x88>
 80144b4:	45a1      	cmp	r9, r4
 80144b6:	db13      	blt.n	80144e0 <_strtoul_l.isra.0+0xb0>
 80144b8:	fb00 4003 	mla	r0, r0, r3, r4
 80144bc:	2601      	movs	r6, #1
 80144be:	f815 4b01 	ldrb.w	r4, [r5], #1
 80144c2:	e7e9      	b.n	8014498 <_strtoul_l.isra.0+0x68>
 80144c4:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80144c8:	f1bc 0f19 	cmp.w	ip, #25
 80144cc:	d801      	bhi.n	80144d2 <_strtoul_l.isra.0+0xa2>
 80144ce:	3c37      	subs	r4, #55	@ 0x37
 80144d0:	e7e8      	b.n	80144a4 <_strtoul_l.isra.0+0x74>
 80144d2:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80144d6:	f1bc 0f19 	cmp.w	ip, #25
 80144da:	d804      	bhi.n	80144e6 <_strtoul_l.isra.0+0xb6>
 80144dc:	3c57      	subs	r4, #87	@ 0x57
 80144de:	e7e1      	b.n	80144a4 <_strtoul_l.isra.0+0x74>
 80144e0:	f04f 36ff 	mov.w	r6, #4294967295
 80144e4:	e7eb      	b.n	80144be <_strtoul_l.isra.0+0x8e>
 80144e6:	1c73      	adds	r3, r6, #1
 80144e8:	d106      	bne.n	80144f8 <_strtoul_l.isra.0+0xc8>
 80144ea:	2322      	movs	r3, #34	@ 0x22
 80144ec:	f8ce 3000 	str.w	r3, [lr]
 80144f0:	4630      	mov	r0, r6
 80144f2:	b932      	cbnz	r2, 8014502 <_strtoul_l.isra.0+0xd2>
 80144f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80144f8:	b107      	cbz	r7, 80144fc <_strtoul_l.isra.0+0xcc>
 80144fa:	4240      	negs	r0, r0
 80144fc:	2a00      	cmp	r2, #0
 80144fe:	d0f9      	beq.n	80144f4 <_strtoul_l.isra.0+0xc4>
 8014500:	b106      	cbz	r6, 8014504 <_strtoul_l.isra.0+0xd4>
 8014502:	1e69      	subs	r1, r5, #1
 8014504:	6011      	str	r1, [r2, #0]
 8014506:	e7f5      	b.n	80144f4 <_strtoul_l.isra.0+0xc4>
 8014508:	0801a972 	.word	0x0801a972

0801450c <strtoul>:
 801450c:	4613      	mov	r3, r2
 801450e:	460a      	mov	r2, r1
 8014510:	4601      	mov	r1, r0
 8014512:	4802      	ldr	r0, [pc, #8]	@ (801451c <strtoul+0x10>)
 8014514:	6800      	ldr	r0, [r0, #0]
 8014516:	f7ff bf8b 	b.w	8014430 <_strtoul_l.isra.0>
 801451a:	bf00      	nop
 801451c:	20000440 	.word	0x20000440

08014520 <std>:
 8014520:	2300      	movs	r3, #0
 8014522:	b510      	push	{r4, lr}
 8014524:	4604      	mov	r4, r0
 8014526:	e9c0 3300 	strd	r3, r3, [r0]
 801452a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801452e:	6083      	str	r3, [r0, #8]
 8014530:	8181      	strh	r1, [r0, #12]
 8014532:	6643      	str	r3, [r0, #100]	@ 0x64
 8014534:	81c2      	strh	r2, [r0, #14]
 8014536:	6183      	str	r3, [r0, #24]
 8014538:	4619      	mov	r1, r3
 801453a:	2208      	movs	r2, #8
 801453c:	305c      	adds	r0, #92	@ 0x5c
 801453e:	f000 fba1 	bl	8014c84 <memset>
 8014542:	4b0d      	ldr	r3, [pc, #52]	@ (8014578 <std+0x58>)
 8014544:	6223      	str	r3, [r4, #32]
 8014546:	4b0d      	ldr	r3, [pc, #52]	@ (801457c <std+0x5c>)
 8014548:	6263      	str	r3, [r4, #36]	@ 0x24
 801454a:	4b0d      	ldr	r3, [pc, #52]	@ (8014580 <std+0x60>)
 801454c:	62a3      	str	r3, [r4, #40]	@ 0x28
 801454e:	4b0d      	ldr	r3, [pc, #52]	@ (8014584 <std+0x64>)
 8014550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8014552:	4b0d      	ldr	r3, [pc, #52]	@ (8014588 <std+0x68>)
 8014554:	61e4      	str	r4, [r4, #28]
 8014556:	429c      	cmp	r4, r3
 8014558:	d006      	beq.n	8014568 <std+0x48>
 801455a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801455e:	4294      	cmp	r4, r2
 8014560:	d002      	beq.n	8014568 <std+0x48>
 8014562:	33d0      	adds	r3, #208	@ 0xd0
 8014564:	429c      	cmp	r4, r3
 8014566:	d105      	bne.n	8014574 <std+0x54>
 8014568:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801456c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014570:	f000 bc7c 	b.w	8014e6c <__retarget_lock_init_recursive>
 8014574:	bd10      	pop	{r4, pc}
 8014576:	bf00      	nop
 8014578:	08014afd 	.word	0x08014afd
 801457c:	08014b1f 	.word	0x08014b1f
 8014580:	08014b57 	.word	0x08014b57
 8014584:	08014b7b 	.word	0x08014b7b
 8014588:	20003ccc 	.word	0x20003ccc

0801458c <stdio_exit_handler>:
 801458c:	4a02      	ldr	r2, [pc, #8]	@ (8014598 <stdio_exit_handler+0xc>)
 801458e:	4903      	ldr	r1, [pc, #12]	@ (801459c <stdio_exit_handler+0x10>)
 8014590:	4803      	ldr	r0, [pc, #12]	@ (80145a0 <stdio_exit_handler+0x14>)
 8014592:	f000 ba0f 	b.w	80149b4 <_fwalk_sglue>
 8014596:	bf00      	nop
 8014598:	20000434 	.word	0x20000434
 801459c:	08017c1d 	.word	0x08017c1d
 80145a0:	20000448 	.word	0x20000448

080145a4 <cleanup_stdio>:
 80145a4:	6841      	ldr	r1, [r0, #4]
 80145a6:	4b0c      	ldr	r3, [pc, #48]	@ (80145d8 <cleanup_stdio+0x34>)
 80145a8:	4299      	cmp	r1, r3
 80145aa:	b510      	push	{r4, lr}
 80145ac:	4604      	mov	r4, r0
 80145ae:	d001      	beq.n	80145b4 <cleanup_stdio+0x10>
 80145b0:	f003 fb34 	bl	8017c1c <_fclose_r>
 80145b4:	68a1      	ldr	r1, [r4, #8]
 80145b6:	4b09      	ldr	r3, [pc, #36]	@ (80145dc <cleanup_stdio+0x38>)
 80145b8:	4299      	cmp	r1, r3
 80145ba:	d002      	beq.n	80145c2 <cleanup_stdio+0x1e>
 80145bc:	4620      	mov	r0, r4
 80145be:	f003 fb2d 	bl	8017c1c <_fclose_r>
 80145c2:	68e1      	ldr	r1, [r4, #12]
 80145c4:	4b06      	ldr	r3, [pc, #24]	@ (80145e0 <cleanup_stdio+0x3c>)
 80145c6:	4299      	cmp	r1, r3
 80145c8:	d004      	beq.n	80145d4 <cleanup_stdio+0x30>
 80145ca:	4620      	mov	r0, r4
 80145cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80145d0:	f003 bb24 	b.w	8017c1c <_fclose_r>
 80145d4:	bd10      	pop	{r4, pc}
 80145d6:	bf00      	nop
 80145d8:	20003ccc 	.word	0x20003ccc
 80145dc:	20003d34 	.word	0x20003d34
 80145e0:	20003d9c 	.word	0x20003d9c

080145e4 <global_stdio_init.part.0>:
 80145e4:	b510      	push	{r4, lr}
 80145e6:	4b0b      	ldr	r3, [pc, #44]	@ (8014614 <global_stdio_init.part.0+0x30>)
 80145e8:	4c0b      	ldr	r4, [pc, #44]	@ (8014618 <global_stdio_init.part.0+0x34>)
 80145ea:	4a0c      	ldr	r2, [pc, #48]	@ (801461c <global_stdio_init.part.0+0x38>)
 80145ec:	601a      	str	r2, [r3, #0]
 80145ee:	4620      	mov	r0, r4
 80145f0:	2200      	movs	r2, #0
 80145f2:	2104      	movs	r1, #4
 80145f4:	f7ff ff94 	bl	8014520 <std>
 80145f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80145fc:	2201      	movs	r2, #1
 80145fe:	2109      	movs	r1, #9
 8014600:	f7ff ff8e 	bl	8014520 <std>
 8014604:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8014608:	2202      	movs	r2, #2
 801460a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801460e:	2112      	movs	r1, #18
 8014610:	f7ff bf86 	b.w	8014520 <std>
 8014614:	20003e04 	.word	0x20003e04
 8014618:	20003ccc 	.word	0x20003ccc
 801461c:	0801458d 	.word	0x0801458d

08014620 <__sfp_lock_acquire>:
 8014620:	4801      	ldr	r0, [pc, #4]	@ (8014628 <__sfp_lock_acquire+0x8>)
 8014622:	f000 bc25 	b.w	8014e70 <__retarget_lock_acquire_recursive>
 8014626:	bf00      	nop
 8014628:	20003e0e 	.word	0x20003e0e

0801462c <__sfp_lock_release>:
 801462c:	4801      	ldr	r0, [pc, #4]	@ (8014634 <__sfp_lock_release+0x8>)
 801462e:	f000 bc20 	b.w	8014e72 <__retarget_lock_release_recursive>
 8014632:	bf00      	nop
 8014634:	20003e0e 	.word	0x20003e0e

08014638 <__sinit>:
 8014638:	b510      	push	{r4, lr}
 801463a:	4604      	mov	r4, r0
 801463c:	f7ff fff0 	bl	8014620 <__sfp_lock_acquire>
 8014640:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014642:	b11b      	cbz	r3, 801464c <__sinit+0x14>
 8014644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014648:	f7ff bff0 	b.w	801462c <__sfp_lock_release>
 801464c:	4b04      	ldr	r3, [pc, #16]	@ (8014660 <__sinit+0x28>)
 801464e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014650:	4b04      	ldr	r3, [pc, #16]	@ (8014664 <__sinit+0x2c>)
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	2b00      	cmp	r3, #0
 8014656:	d1f5      	bne.n	8014644 <__sinit+0xc>
 8014658:	f7ff ffc4 	bl	80145e4 <global_stdio_init.part.0>
 801465c:	e7f2      	b.n	8014644 <__sinit+0xc>
 801465e:	bf00      	nop
 8014660:	080145a5 	.word	0x080145a5
 8014664:	20003e04 	.word	0x20003e04

08014668 <fprintf>:
 8014668:	b40e      	push	{r1, r2, r3}
 801466a:	b503      	push	{r0, r1, lr}
 801466c:	4601      	mov	r1, r0
 801466e:	ab03      	add	r3, sp, #12
 8014670:	4805      	ldr	r0, [pc, #20]	@ (8014688 <fprintf+0x20>)
 8014672:	f853 2b04 	ldr.w	r2, [r3], #4
 8014676:	6800      	ldr	r0, [r0, #0]
 8014678:	9301      	str	r3, [sp, #4]
 801467a:	f002 f879 	bl	8016770 <_vfprintf_r>
 801467e:	b002      	add	sp, #8
 8014680:	f85d eb04 	ldr.w	lr, [sp], #4
 8014684:	b003      	add	sp, #12
 8014686:	4770      	bx	lr
 8014688:	20000440 	.word	0x20000440

0801468c <_fputs_r>:
 801468c:	b530      	push	{r4, r5, lr}
 801468e:	b087      	sub	sp, #28
 8014690:	4605      	mov	r5, r0
 8014692:	4608      	mov	r0, r1
 8014694:	4614      	mov	r4, r2
 8014696:	9101      	str	r1, [sp, #4]
 8014698:	f7eb fe22 	bl	80002e0 <strlen>
 801469c:	ab01      	add	r3, sp, #4
 801469e:	9303      	str	r3, [sp, #12]
 80146a0:	2301      	movs	r3, #1
 80146a2:	9005      	str	r0, [sp, #20]
 80146a4:	9002      	str	r0, [sp, #8]
 80146a6:	9304      	str	r3, [sp, #16]
 80146a8:	b125      	cbz	r5, 80146b4 <_fputs_r+0x28>
 80146aa:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80146ac:	b913      	cbnz	r3, 80146b4 <_fputs_r+0x28>
 80146ae:	4628      	mov	r0, r5
 80146b0:	f7ff ffc2 	bl	8014638 <__sinit>
 80146b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146b6:	07da      	lsls	r2, r3, #31
 80146b8:	d405      	bmi.n	80146c6 <_fputs_r+0x3a>
 80146ba:	89a3      	ldrh	r3, [r4, #12]
 80146bc:	059b      	lsls	r3, r3, #22
 80146be:	d402      	bmi.n	80146c6 <_fputs_r+0x3a>
 80146c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146c2:	f000 fbd5 	bl	8014e70 <__retarget_lock_acquire_recursive>
 80146c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80146ca:	0498      	lsls	r0, r3, #18
 80146cc:	d406      	bmi.n	80146dc <_fputs_r+0x50>
 80146ce:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80146d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80146d4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80146d8:	81a3      	strh	r3, [r4, #12]
 80146da:	6662      	str	r2, [r4, #100]	@ 0x64
 80146dc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146de:	0499      	lsls	r1, r3, #18
 80146e0:	d411      	bmi.n	8014706 <_fputs_r+0x7a>
 80146e2:	4628      	mov	r0, r5
 80146e4:	aa03      	add	r2, sp, #12
 80146e6:	4621      	mov	r1, r4
 80146e8:	f000 f818 	bl	801471c <__sfvwrite_r>
 80146ec:	4605      	mov	r5, r0
 80146ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80146f0:	07da      	lsls	r2, r3, #31
 80146f2:	d405      	bmi.n	8014700 <_fputs_r+0x74>
 80146f4:	89a3      	ldrh	r3, [r4, #12]
 80146f6:	059b      	lsls	r3, r3, #22
 80146f8:	d402      	bmi.n	8014700 <_fputs_r+0x74>
 80146fa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80146fc:	f000 fbb9 	bl	8014e72 <__retarget_lock_release_recursive>
 8014700:	4628      	mov	r0, r5
 8014702:	b007      	add	sp, #28
 8014704:	bd30      	pop	{r4, r5, pc}
 8014706:	f04f 35ff 	mov.w	r5, #4294967295
 801470a:	e7f0      	b.n	80146ee <_fputs_r+0x62>

0801470c <fputs>:
 801470c:	4b02      	ldr	r3, [pc, #8]	@ (8014718 <fputs+0xc>)
 801470e:	460a      	mov	r2, r1
 8014710:	4601      	mov	r1, r0
 8014712:	6818      	ldr	r0, [r3, #0]
 8014714:	f7ff bfba 	b.w	801468c <_fputs_r>
 8014718:	20000440 	.word	0x20000440

0801471c <__sfvwrite_r>:
 801471c:	6893      	ldr	r3, [r2, #8]
 801471e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014722:	4606      	mov	r6, r0
 8014724:	460c      	mov	r4, r1
 8014726:	4691      	mov	r9, r2
 8014728:	b91b      	cbnz	r3, 8014732 <__sfvwrite_r+0x16>
 801472a:	2000      	movs	r0, #0
 801472c:	b003      	add	sp, #12
 801472e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014732:	898b      	ldrh	r3, [r1, #12]
 8014734:	0718      	lsls	r0, r3, #28
 8014736:	d550      	bpl.n	80147da <__sfvwrite_r+0xbe>
 8014738:	690b      	ldr	r3, [r1, #16]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d04d      	beq.n	80147da <__sfvwrite_r+0xbe>
 801473e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014742:	f8d9 8000 	ldr.w	r8, [r9]
 8014746:	f013 0702 	ands.w	r7, r3, #2
 801474a:	d16b      	bne.n	8014824 <__sfvwrite_r+0x108>
 801474c:	f013 0301 	ands.w	r3, r3, #1
 8014750:	f000 809c 	beq.w	801488c <__sfvwrite_r+0x170>
 8014754:	4638      	mov	r0, r7
 8014756:	46ba      	mov	sl, r7
 8014758:	46bb      	mov	fp, r7
 801475a:	f1bb 0f00 	cmp.w	fp, #0
 801475e:	f000 8103 	beq.w	8014968 <__sfvwrite_r+0x24c>
 8014762:	b950      	cbnz	r0, 801477a <__sfvwrite_r+0x5e>
 8014764:	465a      	mov	r2, fp
 8014766:	210a      	movs	r1, #10
 8014768:	4650      	mov	r0, sl
 801476a:	f7eb fd69 	bl	8000240 <memchr>
 801476e:	2800      	cmp	r0, #0
 8014770:	f000 8100 	beq.w	8014974 <__sfvwrite_r+0x258>
 8014774:	3001      	adds	r0, #1
 8014776:	eba0 070a 	sub.w	r7, r0, sl
 801477a:	6820      	ldr	r0, [r4, #0]
 801477c:	6921      	ldr	r1, [r4, #16]
 801477e:	68a5      	ldr	r5, [r4, #8]
 8014780:	6963      	ldr	r3, [r4, #20]
 8014782:	455f      	cmp	r7, fp
 8014784:	463a      	mov	r2, r7
 8014786:	bf28      	it	cs
 8014788:	465a      	movcs	r2, fp
 801478a:	4288      	cmp	r0, r1
 801478c:	f240 80f5 	bls.w	801497a <__sfvwrite_r+0x25e>
 8014790:	441d      	add	r5, r3
 8014792:	42aa      	cmp	r2, r5
 8014794:	f340 80f1 	ble.w	801497a <__sfvwrite_r+0x25e>
 8014798:	4651      	mov	r1, sl
 801479a:	462a      	mov	r2, r5
 801479c:	f000 fa58 	bl	8014c50 <memmove>
 80147a0:	6823      	ldr	r3, [r4, #0]
 80147a2:	442b      	add	r3, r5
 80147a4:	6023      	str	r3, [r4, #0]
 80147a6:	4621      	mov	r1, r4
 80147a8:	4630      	mov	r0, r6
 80147aa:	f003 fb15 	bl	8017dd8 <_fflush_r>
 80147ae:	2800      	cmp	r0, #0
 80147b0:	d167      	bne.n	8014882 <__sfvwrite_r+0x166>
 80147b2:	1b7f      	subs	r7, r7, r5
 80147b4:	f040 80f9 	bne.w	80149aa <__sfvwrite_r+0x28e>
 80147b8:	4621      	mov	r1, r4
 80147ba:	4630      	mov	r0, r6
 80147bc:	f003 fb0c 	bl	8017dd8 <_fflush_r>
 80147c0:	2800      	cmp	r0, #0
 80147c2:	d15e      	bne.n	8014882 <__sfvwrite_r+0x166>
 80147c4:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80147c8:	1b5b      	subs	r3, r3, r5
 80147ca:	44aa      	add	sl, r5
 80147cc:	ebab 0b05 	sub.w	fp, fp, r5
 80147d0:	f8c9 3008 	str.w	r3, [r9, #8]
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d1c0      	bne.n	801475a <__sfvwrite_r+0x3e>
 80147d8:	e7a7      	b.n	801472a <__sfvwrite_r+0xe>
 80147da:	4621      	mov	r1, r4
 80147dc:	4630      	mov	r0, r6
 80147de:	f000 f9d1 	bl	8014b84 <__swsetup_r>
 80147e2:	2800      	cmp	r0, #0
 80147e4:	d0ab      	beq.n	801473e <__sfvwrite_r+0x22>
 80147e6:	f04f 30ff 	mov.w	r0, #4294967295
 80147ea:	e79f      	b.n	801472c <__sfvwrite_r+0x10>
 80147ec:	e9d8 a500 	ldrd	sl, r5, [r8]
 80147f0:	f108 0808 	add.w	r8, r8, #8
 80147f4:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 80147f8:	69e1      	ldr	r1, [r4, #28]
 80147fa:	2d00      	cmp	r5, #0
 80147fc:	d0f6      	beq.n	80147ec <__sfvwrite_r+0xd0>
 80147fe:	42bd      	cmp	r5, r7
 8014800:	462b      	mov	r3, r5
 8014802:	4652      	mov	r2, sl
 8014804:	bf28      	it	cs
 8014806:	463b      	movcs	r3, r7
 8014808:	4630      	mov	r0, r6
 801480a:	47d8      	blx	fp
 801480c:	2800      	cmp	r0, #0
 801480e:	dd38      	ble.n	8014882 <__sfvwrite_r+0x166>
 8014810:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014814:	1a1b      	subs	r3, r3, r0
 8014816:	4482      	add	sl, r0
 8014818:	1a2d      	subs	r5, r5, r0
 801481a:	f8c9 3008 	str.w	r3, [r9, #8]
 801481e:	2b00      	cmp	r3, #0
 8014820:	d1e8      	bne.n	80147f4 <__sfvwrite_r+0xd8>
 8014822:	e782      	b.n	801472a <__sfvwrite_r+0xe>
 8014824:	f04f 0a00 	mov.w	sl, #0
 8014828:	4f61      	ldr	r7, [pc, #388]	@ (80149b0 <__sfvwrite_r+0x294>)
 801482a:	4655      	mov	r5, sl
 801482c:	e7e2      	b.n	80147f4 <__sfvwrite_r+0xd8>
 801482e:	e9d8 7a00 	ldrd	r7, sl, [r8]
 8014832:	f108 0808 	add.w	r8, r8, #8
 8014836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801483a:	6820      	ldr	r0, [r4, #0]
 801483c:	68a2      	ldr	r2, [r4, #8]
 801483e:	f1ba 0f00 	cmp.w	sl, #0
 8014842:	d0f4      	beq.n	801482e <__sfvwrite_r+0x112>
 8014844:	0599      	lsls	r1, r3, #22
 8014846:	d563      	bpl.n	8014910 <__sfvwrite_r+0x1f4>
 8014848:	4552      	cmp	r2, sl
 801484a:	d836      	bhi.n	80148ba <__sfvwrite_r+0x19e>
 801484c:	f413 6f90 	tst.w	r3, #1152	@ 0x480
 8014850:	d033      	beq.n	80148ba <__sfvwrite_r+0x19e>
 8014852:	6921      	ldr	r1, [r4, #16]
 8014854:	6965      	ldr	r5, [r4, #20]
 8014856:	eba0 0b01 	sub.w	fp, r0, r1
 801485a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801485e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8014862:	f10b 0201 	add.w	r2, fp, #1
 8014866:	106d      	asrs	r5, r5, #1
 8014868:	4452      	add	r2, sl
 801486a:	4295      	cmp	r5, r2
 801486c:	bf38      	it	cc
 801486e:	4615      	movcc	r5, r2
 8014870:	055b      	lsls	r3, r3, #21
 8014872:	d53d      	bpl.n	80148f0 <__sfvwrite_r+0x1d4>
 8014874:	4629      	mov	r1, r5
 8014876:	4630      	mov	r0, r6
 8014878:	f7ff fb94 	bl	8013fa4 <_malloc_r>
 801487c:	b948      	cbnz	r0, 8014892 <__sfvwrite_r+0x176>
 801487e:	230c      	movs	r3, #12
 8014880:	6033      	str	r3, [r6, #0]
 8014882:	89a3      	ldrh	r3, [r4, #12]
 8014884:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014888:	81a3      	strh	r3, [r4, #12]
 801488a:	e7ac      	b.n	80147e6 <__sfvwrite_r+0xca>
 801488c:	461f      	mov	r7, r3
 801488e:	469a      	mov	sl, r3
 8014890:	e7d1      	b.n	8014836 <__sfvwrite_r+0x11a>
 8014892:	465a      	mov	r2, fp
 8014894:	6921      	ldr	r1, [r4, #16]
 8014896:	9001      	str	r0, [sp, #4]
 8014898:	f000 fb00 	bl	8014e9c <memcpy>
 801489c:	89a2      	ldrh	r2, [r4, #12]
 801489e:	9b01      	ldr	r3, [sp, #4]
 80148a0:	f422 6290 	bic.w	r2, r2, #1152	@ 0x480
 80148a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80148a8:	81a2      	strh	r2, [r4, #12]
 80148aa:	6123      	str	r3, [r4, #16]
 80148ac:	6165      	str	r5, [r4, #20]
 80148ae:	445b      	add	r3, fp
 80148b0:	eba5 050b 	sub.w	r5, r5, fp
 80148b4:	6023      	str	r3, [r4, #0]
 80148b6:	4652      	mov	r2, sl
 80148b8:	60a5      	str	r5, [r4, #8]
 80148ba:	4552      	cmp	r2, sl
 80148bc:	bf28      	it	cs
 80148be:	4652      	movcs	r2, sl
 80148c0:	6820      	ldr	r0, [r4, #0]
 80148c2:	9201      	str	r2, [sp, #4]
 80148c4:	4639      	mov	r1, r7
 80148c6:	f000 f9c3 	bl	8014c50 <memmove>
 80148ca:	68a3      	ldr	r3, [r4, #8]
 80148cc:	9a01      	ldr	r2, [sp, #4]
 80148ce:	1a9b      	subs	r3, r3, r2
 80148d0:	60a3      	str	r3, [r4, #8]
 80148d2:	6823      	ldr	r3, [r4, #0]
 80148d4:	4413      	add	r3, r2
 80148d6:	4655      	mov	r5, sl
 80148d8:	6023      	str	r3, [r4, #0]
 80148da:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80148de:	1b5b      	subs	r3, r3, r5
 80148e0:	442f      	add	r7, r5
 80148e2:	ebaa 0a05 	sub.w	sl, sl, r5
 80148e6:	f8c9 3008 	str.w	r3, [r9, #8]
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d1a3      	bne.n	8014836 <__sfvwrite_r+0x11a>
 80148ee:	e71c      	b.n	801472a <__sfvwrite_r+0xe>
 80148f0:	462a      	mov	r2, r5
 80148f2:	4630      	mov	r0, r6
 80148f4:	f000 fc06 	bl	8015104 <_realloc_r>
 80148f8:	4603      	mov	r3, r0
 80148fa:	2800      	cmp	r0, #0
 80148fc:	d1d5      	bne.n	80148aa <__sfvwrite_r+0x18e>
 80148fe:	6921      	ldr	r1, [r4, #16]
 8014900:	4630      	mov	r0, r6
 8014902:	f000 fb3f 	bl	8014f84 <_free_r>
 8014906:	89a3      	ldrh	r3, [r4, #12]
 8014908:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801490c:	81a3      	strh	r3, [r4, #12]
 801490e:	e7b6      	b.n	801487e <__sfvwrite_r+0x162>
 8014910:	6923      	ldr	r3, [r4, #16]
 8014912:	4283      	cmp	r3, r0
 8014914:	d302      	bcc.n	801491c <__sfvwrite_r+0x200>
 8014916:	6961      	ldr	r1, [r4, #20]
 8014918:	4551      	cmp	r1, sl
 801491a:	d915      	bls.n	8014948 <__sfvwrite_r+0x22c>
 801491c:	4552      	cmp	r2, sl
 801491e:	bf28      	it	cs
 8014920:	4652      	movcs	r2, sl
 8014922:	4639      	mov	r1, r7
 8014924:	4615      	mov	r5, r2
 8014926:	f000 f993 	bl	8014c50 <memmove>
 801492a:	68a3      	ldr	r3, [r4, #8]
 801492c:	6822      	ldr	r2, [r4, #0]
 801492e:	1b5b      	subs	r3, r3, r5
 8014930:	442a      	add	r2, r5
 8014932:	60a3      	str	r3, [r4, #8]
 8014934:	6022      	str	r2, [r4, #0]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d1cf      	bne.n	80148da <__sfvwrite_r+0x1be>
 801493a:	4621      	mov	r1, r4
 801493c:	4630      	mov	r0, r6
 801493e:	f003 fa4b 	bl	8017dd8 <_fflush_r>
 8014942:	2800      	cmp	r0, #0
 8014944:	d0c9      	beq.n	80148da <__sfvwrite_r+0x1be>
 8014946:	e79c      	b.n	8014882 <__sfvwrite_r+0x166>
 8014948:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801494c:	4553      	cmp	r3, sl
 801494e:	bf28      	it	cs
 8014950:	4653      	movcs	r3, sl
 8014952:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8014954:	fb93 f3f1 	sdiv	r3, r3, r1
 8014958:	463a      	mov	r2, r7
 801495a:	434b      	muls	r3, r1
 801495c:	4630      	mov	r0, r6
 801495e:	69e1      	ldr	r1, [r4, #28]
 8014960:	47a8      	blx	r5
 8014962:	1e05      	subs	r5, r0, #0
 8014964:	dcb9      	bgt.n	80148da <__sfvwrite_r+0x1be>
 8014966:	e78c      	b.n	8014882 <__sfvwrite_r+0x166>
 8014968:	e9d8 ab00 	ldrd	sl, fp, [r8]
 801496c:	2000      	movs	r0, #0
 801496e:	f108 0808 	add.w	r8, r8, #8
 8014972:	e6f2      	b.n	801475a <__sfvwrite_r+0x3e>
 8014974:	f10b 0701 	add.w	r7, fp, #1
 8014978:	e6ff      	b.n	801477a <__sfvwrite_r+0x5e>
 801497a:	4293      	cmp	r3, r2
 801497c:	dc08      	bgt.n	8014990 <__sfvwrite_r+0x274>
 801497e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8014980:	69e1      	ldr	r1, [r4, #28]
 8014982:	4652      	mov	r2, sl
 8014984:	4630      	mov	r0, r6
 8014986:	47a8      	blx	r5
 8014988:	1e05      	subs	r5, r0, #0
 801498a:	f73f af12 	bgt.w	80147b2 <__sfvwrite_r+0x96>
 801498e:	e778      	b.n	8014882 <__sfvwrite_r+0x166>
 8014990:	4651      	mov	r1, sl
 8014992:	9201      	str	r2, [sp, #4]
 8014994:	f000 f95c 	bl	8014c50 <memmove>
 8014998:	9a01      	ldr	r2, [sp, #4]
 801499a:	68a3      	ldr	r3, [r4, #8]
 801499c:	1a9b      	subs	r3, r3, r2
 801499e:	60a3      	str	r3, [r4, #8]
 80149a0:	6823      	ldr	r3, [r4, #0]
 80149a2:	4413      	add	r3, r2
 80149a4:	6023      	str	r3, [r4, #0]
 80149a6:	4615      	mov	r5, r2
 80149a8:	e703      	b.n	80147b2 <__sfvwrite_r+0x96>
 80149aa:	2001      	movs	r0, #1
 80149ac:	e70a      	b.n	80147c4 <__sfvwrite_r+0xa8>
 80149ae:	bf00      	nop
 80149b0:	7ffffc00 	.word	0x7ffffc00

080149b4 <_fwalk_sglue>:
 80149b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149b8:	4607      	mov	r7, r0
 80149ba:	4688      	mov	r8, r1
 80149bc:	4614      	mov	r4, r2
 80149be:	2600      	movs	r6, #0
 80149c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80149c4:	f1b9 0901 	subs.w	r9, r9, #1
 80149c8:	d505      	bpl.n	80149d6 <_fwalk_sglue+0x22>
 80149ca:	6824      	ldr	r4, [r4, #0]
 80149cc:	2c00      	cmp	r4, #0
 80149ce:	d1f7      	bne.n	80149c0 <_fwalk_sglue+0xc>
 80149d0:	4630      	mov	r0, r6
 80149d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80149d6:	89ab      	ldrh	r3, [r5, #12]
 80149d8:	2b01      	cmp	r3, #1
 80149da:	d907      	bls.n	80149ec <_fwalk_sglue+0x38>
 80149dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80149e0:	3301      	adds	r3, #1
 80149e2:	d003      	beq.n	80149ec <_fwalk_sglue+0x38>
 80149e4:	4629      	mov	r1, r5
 80149e6:	4638      	mov	r0, r7
 80149e8:	47c0      	blx	r8
 80149ea:	4306      	orrs	r6, r0
 80149ec:	3568      	adds	r5, #104	@ 0x68
 80149ee:	e7e9      	b.n	80149c4 <_fwalk_sglue+0x10>

080149f0 <_fwrite_r>:
 80149f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80149f4:	b086      	sub	sp, #24
 80149f6:	fb02 f603 	mul.w	r6, r2, r3
 80149fa:	461d      	mov	r5, r3
 80149fc:	ab01      	add	r3, sp, #4
 80149fe:	9303      	str	r3, [sp, #12]
 8014a00:	2301      	movs	r3, #1
 8014a02:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8014a04:	9101      	str	r1, [sp, #4]
 8014a06:	4690      	mov	r8, r2
 8014a08:	9602      	str	r6, [sp, #8]
 8014a0a:	9605      	str	r6, [sp, #20]
 8014a0c:	9304      	str	r3, [sp, #16]
 8014a0e:	4607      	mov	r7, r0
 8014a10:	b118      	cbz	r0, 8014a1a <_fwrite_r+0x2a>
 8014a12:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014a14:	b90b      	cbnz	r3, 8014a1a <_fwrite_r+0x2a>
 8014a16:	f7ff fe0f 	bl	8014638 <__sinit>
 8014a1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a1c:	07db      	lsls	r3, r3, #31
 8014a1e:	d405      	bmi.n	8014a2c <_fwrite_r+0x3c>
 8014a20:	89a3      	ldrh	r3, [r4, #12]
 8014a22:	0598      	lsls	r0, r3, #22
 8014a24:	d402      	bmi.n	8014a2c <_fwrite_r+0x3c>
 8014a26:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a28:	f000 fa22 	bl	8014e70 <__retarget_lock_acquire_recursive>
 8014a2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a30:	0499      	lsls	r1, r3, #18
 8014a32:	d406      	bmi.n	8014a42 <_fwrite_r+0x52>
 8014a34:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014a36:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8014a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8014a3e:	81a3      	strh	r3, [r4, #12]
 8014a40:	6662      	str	r2, [r4, #100]	@ 0x64
 8014a42:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a44:	049a      	lsls	r2, r3, #18
 8014a46:	d50c      	bpl.n	8014a62 <_fwrite_r+0x72>
 8014a48:	07de      	lsls	r6, r3, #31
 8014a4a:	d405      	bmi.n	8014a58 <_fwrite_r+0x68>
 8014a4c:	89a3      	ldrh	r3, [r4, #12]
 8014a4e:	059d      	lsls	r5, r3, #22
 8014a50:	d402      	bmi.n	8014a58 <_fwrite_r+0x68>
 8014a52:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a54:	f000 fa0d 	bl	8014e72 <__retarget_lock_release_recursive>
 8014a58:	2500      	movs	r5, #0
 8014a5a:	4628      	mov	r0, r5
 8014a5c:	b006      	add	sp, #24
 8014a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a62:	aa03      	add	r2, sp, #12
 8014a64:	4621      	mov	r1, r4
 8014a66:	4638      	mov	r0, r7
 8014a68:	f7ff fe58 	bl	801471c <__sfvwrite_r>
 8014a6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014a6e:	b940      	cbnz	r0, 8014a82 <_fwrite_r+0x92>
 8014a70:	07d8      	lsls	r0, r3, #31
 8014a72:	d4f2      	bmi.n	8014a5a <_fwrite_r+0x6a>
 8014a74:	89a3      	ldrh	r3, [r4, #12]
 8014a76:	0599      	lsls	r1, r3, #22
 8014a78:	d4ef      	bmi.n	8014a5a <_fwrite_r+0x6a>
 8014a7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a7c:	f000 f9f9 	bl	8014e72 <__retarget_lock_release_recursive>
 8014a80:	e7eb      	b.n	8014a5a <_fwrite_r+0x6a>
 8014a82:	07da      	lsls	r2, r3, #31
 8014a84:	d405      	bmi.n	8014a92 <_fwrite_r+0xa2>
 8014a86:	89a3      	ldrh	r3, [r4, #12]
 8014a88:	059b      	lsls	r3, r3, #22
 8014a8a:	d402      	bmi.n	8014a92 <_fwrite_r+0xa2>
 8014a8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014a8e:	f000 f9f0 	bl	8014e72 <__retarget_lock_release_recursive>
 8014a92:	9b05      	ldr	r3, [sp, #20]
 8014a94:	1af6      	subs	r6, r6, r3
 8014a96:	fbb6 f5f8 	udiv	r5, r6, r8
 8014a9a:	e7de      	b.n	8014a5a <_fwrite_r+0x6a>

08014a9c <fwrite>:
 8014a9c:	b507      	push	{r0, r1, r2, lr}
 8014a9e:	9300      	str	r3, [sp, #0]
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	460a      	mov	r2, r1
 8014aa4:	4601      	mov	r1, r0
 8014aa6:	4803      	ldr	r0, [pc, #12]	@ (8014ab4 <fwrite+0x18>)
 8014aa8:	6800      	ldr	r0, [r0, #0]
 8014aaa:	f7ff ffa1 	bl	80149f0 <_fwrite_r>
 8014aae:	b003      	add	sp, #12
 8014ab0:	f85d fb04 	ldr.w	pc, [sp], #4
 8014ab4:	20000440 	.word	0x20000440

08014ab8 <sprintf>:
 8014ab8:	b40e      	push	{r1, r2, r3}
 8014aba:	b510      	push	{r4, lr}
 8014abc:	b09d      	sub	sp, #116	@ 0x74
 8014abe:	ab1f      	add	r3, sp, #124	@ 0x7c
 8014ac0:	9002      	str	r0, [sp, #8]
 8014ac2:	9006      	str	r0, [sp, #24]
 8014ac4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8014ac8:	480a      	ldr	r0, [pc, #40]	@ (8014af4 <sprintf+0x3c>)
 8014aca:	9107      	str	r1, [sp, #28]
 8014acc:	9104      	str	r1, [sp, #16]
 8014ace:	490a      	ldr	r1, [pc, #40]	@ (8014af8 <sprintf+0x40>)
 8014ad0:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ad4:	9105      	str	r1, [sp, #20]
 8014ad6:	2400      	movs	r4, #0
 8014ad8:	a902      	add	r1, sp, #8
 8014ada:	6800      	ldr	r0, [r0, #0]
 8014adc:	9301      	str	r3, [sp, #4]
 8014ade:	941b      	str	r4, [sp, #108]	@ 0x6c
 8014ae0:	f000 fcba 	bl	8015458 <_svfprintf_r>
 8014ae4:	9b02      	ldr	r3, [sp, #8]
 8014ae6:	701c      	strb	r4, [r3, #0]
 8014ae8:	b01d      	add	sp, #116	@ 0x74
 8014aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014aee:	b003      	add	sp, #12
 8014af0:	4770      	bx	lr
 8014af2:	bf00      	nop
 8014af4:	20000440 	.word	0x20000440
 8014af8:	ffff0208 	.word	0xffff0208

08014afc <__sread>:
 8014afc:	b510      	push	{r4, lr}
 8014afe:	460c      	mov	r4, r1
 8014b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b04:	f000 f95a 	bl	8014dbc <_read_r>
 8014b08:	2800      	cmp	r0, #0
 8014b0a:	bfab      	itete	ge
 8014b0c:	6d23      	ldrge	r3, [r4, #80]	@ 0x50
 8014b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8014b10:	181b      	addge	r3, r3, r0
 8014b12:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8014b16:	bfac      	ite	ge
 8014b18:	6523      	strge	r3, [r4, #80]	@ 0x50
 8014b1a:	81a3      	strhlt	r3, [r4, #12]
 8014b1c:	bd10      	pop	{r4, pc}

08014b1e <__swrite>:
 8014b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b22:	461f      	mov	r7, r3
 8014b24:	898b      	ldrh	r3, [r1, #12]
 8014b26:	05db      	lsls	r3, r3, #23
 8014b28:	4605      	mov	r5, r0
 8014b2a:	460c      	mov	r4, r1
 8014b2c:	4616      	mov	r6, r2
 8014b2e:	d505      	bpl.n	8014b3c <__swrite+0x1e>
 8014b30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b34:	2302      	movs	r3, #2
 8014b36:	2200      	movs	r2, #0
 8014b38:	f000 f92e 	bl	8014d98 <_lseek_r>
 8014b3c:	89a3      	ldrh	r3, [r4, #12]
 8014b3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b42:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8014b46:	81a3      	strh	r3, [r4, #12]
 8014b48:	4632      	mov	r2, r6
 8014b4a:	463b      	mov	r3, r7
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014b52:	f000 b955 	b.w	8014e00 <_write_r>

08014b56 <__sseek>:
 8014b56:	b510      	push	{r4, lr}
 8014b58:	460c      	mov	r4, r1
 8014b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b5e:	f000 f91b 	bl	8014d98 <_lseek_r>
 8014b62:	1c43      	adds	r3, r0, #1
 8014b64:	89a3      	ldrh	r3, [r4, #12]
 8014b66:	bf15      	itete	ne
 8014b68:	6520      	strne	r0, [r4, #80]	@ 0x50
 8014b6a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8014b6e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8014b72:	81a3      	strheq	r3, [r4, #12]
 8014b74:	bf18      	it	ne
 8014b76:	81a3      	strhne	r3, [r4, #12]
 8014b78:	bd10      	pop	{r4, pc}

08014b7a <__sclose>:
 8014b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b7e:	f000 b8fb 	b.w	8014d78 <_close_r>
	...

08014b84 <__swsetup_r>:
 8014b84:	b538      	push	{r3, r4, r5, lr}
 8014b86:	4b29      	ldr	r3, [pc, #164]	@ (8014c2c <__swsetup_r+0xa8>)
 8014b88:	4605      	mov	r5, r0
 8014b8a:	6818      	ldr	r0, [r3, #0]
 8014b8c:	460c      	mov	r4, r1
 8014b8e:	b118      	cbz	r0, 8014b98 <__swsetup_r+0x14>
 8014b90:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8014b92:	b90b      	cbnz	r3, 8014b98 <__swsetup_r+0x14>
 8014b94:	f7ff fd50 	bl	8014638 <__sinit>
 8014b98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b9c:	0719      	lsls	r1, r3, #28
 8014b9e:	d422      	bmi.n	8014be6 <__swsetup_r+0x62>
 8014ba0:	06da      	lsls	r2, r3, #27
 8014ba2:	d407      	bmi.n	8014bb4 <__swsetup_r+0x30>
 8014ba4:	2209      	movs	r2, #9
 8014ba6:	602a      	str	r2, [r5, #0]
 8014ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014bac:	81a3      	strh	r3, [r4, #12]
 8014bae:	f04f 30ff 	mov.w	r0, #4294967295
 8014bb2:	e033      	b.n	8014c1c <__swsetup_r+0x98>
 8014bb4:	0758      	lsls	r0, r3, #29
 8014bb6:	d512      	bpl.n	8014bde <__swsetup_r+0x5a>
 8014bb8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014bba:	b141      	cbz	r1, 8014bce <__swsetup_r+0x4a>
 8014bbc:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8014bc0:	4299      	cmp	r1, r3
 8014bc2:	d002      	beq.n	8014bca <__swsetup_r+0x46>
 8014bc4:	4628      	mov	r0, r5
 8014bc6:	f000 f9dd 	bl	8014f84 <_free_r>
 8014bca:	2300      	movs	r3, #0
 8014bcc:	6323      	str	r3, [r4, #48]	@ 0x30
 8014bce:	89a3      	ldrh	r3, [r4, #12]
 8014bd0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014bd4:	81a3      	strh	r3, [r4, #12]
 8014bd6:	2300      	movs	r3, #0
 8014bd8:	6063      	str	r3, [r4, #4]
 8014bda:	6923      	ldr	r3, [r4, #16]
 8014bdc:	6023      	str	r3, [r4, #0]
 8014bde:	89a3      	ldrh	r3, [r4, #12]
 8014be0:	f043 0308 	orr.w	r3, r3, #8
 8014be4:	81a3      	strh	r3, [r4, #12]
 8014be6:	6923      	ldr	r3, [r4, #16]
 8014be8:	b94b      	cbnz	r3, 8014bfe <__swsetup_r+0x7a>
 8014bea:	89a3      	ldrh	r3, [r4, #12]
 8014bec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014bf4:	d003      	beq.n	8014bfe <__swsetup_r+0x7a>
 8014bf6:	4621      	mov	r1, r4
 8014bf8:	4628      	mov	r0, r5
 8014bfa:	f003 f93a 	bl	8017e72 <__smakebuf_r>
 8014bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014c02:	f013 0201 	ands.w	r2, r3, #1
 8014c06:	d00a      	beq.n	8014c1e <__swsetup_r+0x9a>
 8014c08:	2200      	movs	r2, #0
 8014c0a:	60a2      	str	r2, [r4, #8]
 8014c0c:	6962      	ldr	r2, [r4, #20]
 8014c0e:	4252      	negs	r2, r2
 8014c10:	61a2      	str	r2, [r4, #24]
 8014c12:	6922      	ldr	r2, [r4, #16]
 8014c14:	b942      	cbnz	r2, 8014c28 <__swsetup_r+0xa4>
 8014c16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014c1a:	d1c5      	bne.n	8014ba8 <__swsetup_r+0x24>
 8014c1c:	bd38      	pop	{r3, r4, r5, pc}
 8014c1e:	0799      	lsls	r1, r3, #30
 8014c20:	bf58      	it	pl
 8014c22:	6962      	ldrpl	r2, [r4, #20]
 8014c24:	60a2      	str	r2, [r4, #8]
 8014c26:	e7f4      	b.n	8014c12 <__swsetup_r+0x8e>
 8014c28:	2000      	movs	r0, #0
 8014c2a:	e7f7      	b.n	8014c1c <__swsetup_r+0x98>
 8014c2c:	20000440 	.word	0x20000440

08014c30 <memcmp>:
 8014c30:	b510      	push	{r4, lr}
 8014c32:	3901      	subs	r1, #1
 8014c34:	4402      	add	r2, r0
 8014c36:	4290      	cmp	r0, r2
 8014c38:	d101      	bne.n	8014c3e <memcmp+0xe>
 8014c3a:	2000      	movs	r0, #0
 8014c3c:	e005      	b.n	8014c4a <memcmp+0x1a>
 8014c3e:	7803      	ldrb	r3, [r0, #0]
 8014c40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014c44:	42a3      	cmp	r3, r4
 8014c46:	d001      	beq.n	8014c4c <memcmp+0x1c>
 8014c48:	1b18      	subs	r0, r3, r4
 8014c4a:	bd10      	pop	{r4, pc}
 8014c4c:	3001      	adds	r0, #1
 8014c4e:	e7f2      	b.n	8014c36 <memcmp+0x6>

08014c50 <memmove>:
 8014c50:	4288      	cmp	r0, r1
 8014c52:	b510      	push	{r4, lr}
 8014c54:	eb01 0402 	add.w	r4, r1, r2
 8014c58:	d902      	bls.n	8014c60 <memmove+0x10>
 8014c5a:	4284      	cmp	r4, r0
 8014c5c:	4623      	mov	r3, r4
 8014c5e:	d807      	bhi.n	8014c70 <memmove+0x20>
 8014c60:	1e43      	subs	r3, r0, #1
 8014c62:	42a1      	cmp	r1, r4
 8014c64:	d008      	beq.n	8014c78 <memmove+0x28>
 8014c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014c6e:	e7f8      	b.n	8014c62 <memmove+0x12>
 8014c70:	4402      	add	r2, r0
 8014c72:	4601      	mov	r1, r0
 8014c74:	428a      	cmp	r2, r1
 8014c76:	d100      	bne.n	8014c7a <memmove+0x2a>
 8014c78:	bd10      	pop	{r4, pc}
 8014c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014c82:	e7f7      	b.n	8014c74 <memmove+0x24>

08014c84 <memset>:
 8014c84:	4402      	add	r2, r0
 8014c86:	4603      	mov	r3, r0
 8014c88:	4293      	cmp	r3, r2
 8014c8a:	d100      	bne.n	8014c8e <memset+0xa>
 8014c8c:	4770      	bx	lr
 8014c8e:	f803 1b01 	strb.w	r1, [r3], #1
 8014c92:	e7f9      	b.n	8014c88 <memset+0x4>

08014c94 <strcasecmp>:
 8014c94:	b530      	push	{r4, r5, lr}
 8014c96:	4d0c      	ldr	r5, [pc, #48]	@ (8014cc8 <strcasecmp+0x34>)
 8014c98:	4602      	mov	r2, r0
 8014c9a:	f812 3b01 	ldrb.w	r3, [r2], #1
 8014c9e:	5ce8      	ldrb	r0, [r5, r3]
 8014ca0:	f000 0003 	and.w	r0, r0, #3
 8014ca4:	2801      	cmp	r0, #1
 8014ca6:	f811 0b01 	ldrb.w	r0, [r1], #1
 8014caa:	5c2c      	ldrb	r4, [r5, r0]
 8014cac:	f004 0403 	and.w	r4, r4, #3
 8014cb0:	bf08      	it	eq
 8014cb2:	3320      	addeq	r3, #32
 8014cb4:	2c01      	cmp	r4, #1
 8014cb6:	bf08      	it	eq
 8014cb8:	3020      	addeq	r0, #32
 8014cba:	1a1b      	subs	r3, r3, r0
 8014cbc:	d102      	bne.n	8014cc4 <strcasecmp+0x30>
 8014cbe:	2800      	cmp	r0, #0
 8014cc0:	d1eb      	bne.n	8014c9a <strcasecmp+0x6>
 8014cc2:	bd30      	pop	{r4, r5, pc}
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	e7fc      	b.n	8014cc2 <strcasecmp+0x2e>
 8014cc8:	0801a972 	.word	0x0801a972

08014ccc <strchr>:
 8014ccc:	b2c9      	uxtb	r1, r1
 8014cce:	4603      	mov	r3, r0
 8014cd0:	4618      	mov	r0, r3
 8014cd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014cd6:	b112      	cbz	r2, 8014cde <strchr+0x12>
 8014cd8:	428a      	cmp	r2, r1
 8014cda:	d1f9      	bne.n	8014cd0 <strchr+0x4>
 8014cdc:	4770      	bx	lr
 8014cde:	2900      	cmp	r1, #0
 8014ce0:	bf18      	it	ne
 8014ce2:	2000      	movne	r0, #0
 8014ce4:	4770      	bx	lr
	...

08014ce8 <strncasecmp>:
 8014ce8:	b570      	push	{r4, r5, r6, lr}
 8014cea:	4e0e      	ldr	r6, [pc, #56]	@ (8014d24 <strncasecmp+0x3c>)
 8014cec:	4605      	mov	r5, r0
 8014cee:	440a      	add	r2, r1
 8014cf0:	428a      	cmp	r2, r1
 8014cf2:	d101      	bne.n	8014cf8 <strncasecmp+0x10>
 8014cf4:	2000      	movs	r0, #0
 8014cf6:	e013      	b.n	8014d20 <strncasecmp+0x38>
 8014cf8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8014cfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014d00:	5cf0      	ldrb	r0, [r6, r3]
 8014d02:	f000 0003 	and.w	r0, r0, #3
 8014d06:	2801      	cmp	r0, #1
 8014d08:	5d30      	ldrb	r0, [r6, r4]
 8014d0a:	f000 0003 	and.w	r0, r0, #3
 8014d0e:	bf08      	it	eq
 8014d10:	3320      	addeq	r3, #32
 8014d12:	2801      	cmp	r0, #1
 8014d14:	bf08      	it	eq
 8014d16:	3420      	addeq	r4, #32
 8014d18:	1b18      	subs	r0, r3, r4
 8014d1a:	d101      	bne.n	8014d20 <strncasecmp+0x38>
 8014d1c:	2c00      	cmp	r4, #0
 8014d1e:	d1e7      	bne.n	8014cf0 <strncasecmp+0x8>
 8014d20:	bd70      	pop	{r4, r5, r6, pc}
 8014d22:	bf00      	nop
 8014d24:	0801a972 	.word	0x0801a972

08014d28 <strncmp>:
 8014d28:	b510      	push	{r4, lr}
 8014d2a:	b16a      	cbz	r2, 8014d48 <strncmp+0x20>
 8014d2c:	3901      	subs	r1, #1
 8014d2e:	1884      	adds	r4, r0, r2
 8014d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d34:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8014d38:	429a      	cmp	r2, r3
 8014d3a:	d103      	bne.n	8014d44 <strncmp+0x1c>
 8014d3c:	42a0      	cmp	r0, r4
 8014d3e:	d001      	beq.n	8014d44 <strncmp+0x1c>
 8014d40:	2a00      	cmp	r2, #0
 8014d42:	d1f5      	bne.n	8014d30 <strncmp+0x8>
 8014d44:	1ad0      	subs	r0, r2, r3
 8014d46:	bd10      	pop	{r4, pc}
 8014d48:	4610      	mov	r0, r2
 8014d4a:	e7fc      	b.n	8014d46 <strncmp+0x1e>

08014d4c <strrchr>:
 8014d4c:	b538      	push	{r3, r4, r5, lr}
 8014d4e:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 8014d52:	4603      	mov	r3, r0
 8014d54:	d10e      	bne.n	8014d74 <strrchr+0x28>
 8014d56:	4621      	mov	r1, r4
 8014d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d5c:	f7ff bfb6 	b.w	8014ccc <strchr>
 8014d60:	1c43      	adds	r3, r0, #1
 8014d62:	4605      	mov	r5, r0
 8014d64:	4621      	mov	r1, r4
 8014d66:	4618      	mov	r0, r3
 8014d68:	f7ff ffb0 	bl	8014ccc <strchr>
 8014d6c:	2800      	cmp	r0, #0
 8014d6e:	d1f7      	bne.n	8014d60 <strrchr+0x14>
 8014d70:	4628      	mov	r0, r5
 8014d72:	bd38      	pop	{r3, r4, r5, pc}
 8014d74:	2500      	movs	r5, #0
 8014d76:	e7f5      	b.n	8014d64 <strrchr+0x18>

08014d78 <_close_r>:
 8014d78:	b538      	push	{r3, r4, r5, lr}
 8014d7a:	4d06      	ldr	r5, [pc, #24]	@ (8014d94 <_close_r+0x1c>)
 8014d7c:	2300      	movs	r3, #0
 8014d7e:	4604      	mov	r4, r0
 8014d80:	4608      	mov	r0, r1
 8014d82:	602b      	str	r3, [r5, #0]
 8014d84:	f7ff f8ec 	bl	8013f60 <_close>
 8014d88:	1c43      	adds	r3, r0, #1
 8014d8a:	d102      	bne.n	8014d92 <_close_r+0x1a>
 8014d8c:	682b      	ldr	r3, [r5, #0]
 8014d8e:	b103      	cbz	r3, 8014d92 <_close_r+0x1a>
 8014d90:	6023      	str	r3, [r4, #0]
 8014d92:	bd38      	pop	{r3, r4, r5, pc}
 8014d94:	20003e08 	.word	0x20003e08

08014d98 <_lseek_r>:
 8014d98:	b538      	push	{r3, r4, r5, lr}
 8014d9a:	4d07      	ldr	r5, [pc, #28]	@ (8014db8 <_lseek_r+0x20>)
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	4608      	mov	r0, r1
 8014da0:	4611      	mov	r1, r2
 8014da2:	2200      	movs	r2, #0
 8014da4:	602a      	str	r2, [r5, #0]
 8014da6:	461a      	mov	r2, r3
 8014da8:	f7ff f8e4 	bl	8013f74 <_lseek>
 8014dac:	1c43      	adds	r3, r0, #1
 8014dae:	d102      	bne.n	8014db6 <_lseek_r+0x1e>
 8014db0:	682b      	ldr	r3, [r5, #0]
 8014db2:	b103      	cbz	r3, 8014db6 <_lseek_r+0x1e>
 8014db4:	6023      	str	r3, [r4, #0]
 8014db6:	bd38      	pop	{r3, r4, r5, pc}
 8014db8:	20003e08 	.word	0x20003e08

08014dbc <_read_r>:
 8014dbc:	b538      	push	{r3, r4, r5, lr}
 8014dbe:	4d07      	ldr	r5, [pc, #28]	@ (8014ddc <_read_r+0x20>)
 8014dc0:	4604      	mov	r4, r0
 8014dc2:	4608      	mov	r0, r1
 8014dc4:	4611      	mov	r1, r2
 8014dc6:	2200      	movs	r2, #0
 8014dc8:	602a      	str	r2, [r5, #0]
 8014dca:	461a      	mov	r2, r3
 8014dcc:	f7ff f8a6 	bl	8013f1c <_read>
 8014dd0:	1c43      	adds	r3, r0, #1
 8014dd2:	d102      	bne.n	8014dda <_read_r+0x1e>
 8014dd4:	682b      	ldr	r3, [r5, #0]
 8014dd6:	b103      	cbz	r3, 8014dda <_read_r+0x1e>
 8014dd8:	6023      	str	r3, [r4, #0]
 8014dda:	bd38      	pop	{r3, r4, r5, pc}
 8014ddc:	20003e08 	.word	0x20003e08

08014de0 <_sbrk_r>:
 8014de0:	b538      	push	{r3, r4, r5, lr}
 8014de2:	4d06      	ldr	r5, [pc, #24]	@ (8014dfc <_sbrk_r+0x1c>)
 8014de4:	2300      	movs	r3, #0
 8014de6:	4604      	mov	r4, r0
 8014de8:	4608      	mov	r0, r1
 8014dea:	602b      	str	r3, [r5, #0]
 8014dec:	f7ff f898 	bl	8013f20 <_sbrk>
 8014df0:	1c43      	adds	r3, r0, #1
 8014df2:	d102      	bne.n	8014dfa <_sbrk_r+0x1a>
 8014df4:	682b      	ldr	r3, [r5, #0]
 8014df6:	b103      	cbz	r3, 8014dfa <_sbrk_r+0x1a>
 8014df8:	6023      	str	r3, [r4, #0]
 8014dfa:	bd38      	pop	{r3, r4, r5, pc}
 8014dfc:	20003e08 	.word	0x20003e08

08014e00 <_write_r>:
 8014e00:	b538      	push	{r3, r4, r5, lr}
 8014e02:	4d07      	ldr	r5, [pc, #28]	@ (8014e20 <_write_r+0x20>)
 8014e04:	4604      	mov	r4, r0
 8014e06:	4608      	mov	r0, r1
 8014e08:	4611      	mov	r1, r2
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	602a      	str	r2, [r5, #0]
 8014e0e:	461a      	mov	r2, r3
 8014e10:	f7ff f860 	bl	8013ed4 <_write>
 8014e14:	1c43      	adds	r3, r0, #1
 8014e16:	d102      	bne.n	8014e1e <_write_r+0x1e>
 8014e18:	682b      	ldr	r3, [r5, #0]
 8014e1a:	b103      	cbz	r3, 8014e1e <_write_r+0x1e>
 8014e1c:	6023      	str	r3, [r4, #0]
 8014e1e:	bd38      	pop	{r3, r4, r5, pc}
 8014e20:	20003e08 	.word	0x20003e08

08014e24 <__libc_init_array>:
 8014e24:	b570      	push	{r4, r5, r6, lr}
 8014e26:	4d0d      	ldr	r5, [pc, #52]	@ (8014e5c <__libc_init_array+0x38>)
 8014e28:	4c0d      	ldr	r4, [pc, #52]	@ (8014e60 <__libc_init_array+0x3c>)
 8014e2a:	1b64      	subs	r4, r4, r5
 8014e2c:	10a4      	asrs	r4, r4, #2
 8014e2e:	2600      	movs	r6, #0
 8014e30:	42a6      	cmp	r6, r4
 8014e32:	d109      	bne.n	8014e48 <__libc_init_array+0x24>
 8014e34:	4d0b      	ldr	r5, [pc, #44]	@ (8014e64 <__libc_init_array+0x40>)
 8014e36:	4c0c      	ldr	r4, [pc, #48]	@ (8014e68 <__libc_init_array+0x44>)
 8014e38:	f005 f80a 	bl	8019e50 <_init>
 8014e3c:	1b64      	subs	r4, r4, r5
 8014e3e:	10a4      	asrs	r4, r4, #2
 8014e40:	2600      	movs	r6, #0
 8014e42:	42a6      	cmp	r6, r4
 8014e44:	d105      	bne.n	8014e52 <__libc_init_array+0x2e>
 8014e46:	bd70      	pop	{r4, r5, r6, pc}
 8014e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e4c:	4798      	blx	r3
 8014e4e:	3601      	adds	r6, #1
 8014e50:	e7ee      	b.n	8014e30 <__libc_init_array+0xc>
 8014e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e56:	4798      	blx	r3
 8014e58:	3601      	adds	r6, #1
 8014e5a:	e7f2      	b.n	8014e42 <__libc_init_array+0x1e>
 8014e5c:	0801ad20 	.word	0x0801ad20
 8014e60:	0801ad20 	.word	0x0801ad20
 8014e64:	0801ad20 	.word	0x0801ad20
 8014e68:	0801ad28 	.word	0x0801ad28

08014e6c <__retarget_lock_init_recursive>:
 8014e6c:	4770      	bx	lr

08014e6e <__retarget_lock_close_recursive>:
 8014e6e:	4770      	bx	lr

08014e70 <__retarget_lock_acquire_recursive>:
 8014e70:	4770      	bx	lr

08014e72 <__retarget_lock_release_recursive>:
 8014e72:	4770      	bx	lr

08014e74 <sysconf>:
 8014e74:	2808      	cmp	r0, #8
 8014e76:	b508      	push	{r3, lr}
 8014e78:	d006      	beq.n	8014e88 <sysconf+0x14>
 8014e7a:	f003 f86f 	bl	8017f5c <__errno>
 8014e7e:	2316      	movs	r3, #22
 8014e80:	6003      	str	r3, [r0, #0]
 8014e82:	f04f 30ff 	mov.w	r0, #4294967295
 8014e86:	bd08      	pop	{r3, pc}
 8014e88:	2080      	movs	r0, #128	@ 0x80
 8014e8a:	e7fc      	b.n	8014e86 <sysconf+0x12>

08014e8c <strcpy>:
 8014e8c:	4603      	mov	r3, r0
 8014e8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e92:	f803 2b01 	strb.w	r2, [r3], #1
 8014e96:	2a00      	cmp	r2, #0
 8014e98:	d1f9      	bne.n	8014e8e <strcpy+0x2>
 8014e9a:	4770      	bx	lr

08014e9c <memcpy>:
 8014e9c:	440a      	add	r2, r1
 8014e9e:	4291      	cmp	r1, r2
 8014ea0:	f100 33ff 	add.w	r3, r0, #4294967295
 8014ea4:	d100      	bne.n	8014ea8 <memcpy+0xc>
 8014ea6:	4770      	bx	lr
 8014ea8:	b510      	push	{r4, lr}
 8014eaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014eae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014eb2:	4291      	cmp	r1, r2
 8014eb4:	d1f9      	bne.n	8014eaa <memcpy+0xe>
 8014eb6:	bd10      	pop	{r4, pc}

08014eb8 <register_fini>:
 8014eb8:	4b02      	ldr	r3, [pc, #8]	@ (8014ec4 <register_fini+0xc>)
 8014eba:	b113      	cbz	r3, 8014ec2 <register_fini+0xa>
 8014ebc:	4802      	ldr	r0, [pc, #8]	@ (8014ec8 <register_fini+0x10>)
 8014ebe:	f000 b805 	b.w	8014ecc <atexit>
 8014ec2:	4770      	bx	lr
 8014ec4:	00000000 	.word	0x00000000
 8014ec8:	08017f69 	.word	0x08017f69

08014ecc <atexit>:
 8014ecc:	2300      	movs	r3, #0
 8014ece:	4601      	mov	r1, r0
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	4618      	mov	r0, r3
 8014ed4:	f003 b890 	b.w	8017ff8 <__register_exitproc>

08014ed8 <_malloc_trim_r>:
 8014ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014edc:	4606      	mov	r6, r0
 8014ede:	2008      	movs	r0, #8
 8014ee0:	4689      	mov	r9, r1
 8014ee2:	f7ff ffc7 	bl	8014e74 <sysconf>
 8014ee6:	4f24      	ldr	r7, [pc, #144]	@ (8014f78 <_malloc_trim_r+0xa0>)
 8014ee8:	4680      	mov	r8, r0
 8014eea:	4630      	mov	r0, r6
 8014eec:	f7ff fa94 	bl	8014418 <__malloc_lock>
 8014ef0:	68bb      	ldr	r3, [r7, #8]
 8014ef2:	685d      	ldr	r5, [r3, #4]
 8014ef4:	f025 0503 	bic.w	r5, r5, #3
 8014ef8:	f1a5 0411 	sub.w	r4, r5, #17
 8014efc:	eba4 0409 	sub.w	r4, r4, r9
 8014f00:	4444      	add	r4, r8
 8014f02:	fbb4 f4f8 	udiv	r4, r4, r8
 8014f06:	3c01      	subs	r4, #1
 8014f08:	fb08 f404 	mul.w	r4, r8, r4
 8014f0c:	45a0      	cmp	r8, r4
 8014f0e:	dd05      	ble.n	8014f1c <_malloc_trim_r+0x44>
 8014f10:	4630      	mov	r0, r6
 8014f12:	f7ff fa87 	bl	8014424 <__malloc_unlock>
 8014f16:	2000      	movs	r0, #0
 8014f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014f1c:	2100      	movs	r1, #0
 8014f1e:	4630      	mov	r0, r6
 8014f20:	f7ff ff5e 	bl	8014de0 <_sbrk_r>
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	442b      	add	r3, r5
 8014f28:	4298      	cmp	r0, r3
 8014f2a:	d1f1      	bne.n	8014f10 <_malloc_trim_r+0x38>
 8014f2c:	4261      	negs	r1, r4
 8014f2e:	4630      	mov	r0, r6
 8014f30:	f7ff ff56 	bl	8014de0 <_sbrk_r>
 8014f34:	3001      	adds	r0, #1
 8014f36:	d110      	bne.n	8014f5a <_malloc_trim_r+0x82>
 8014f38:	2100      	movs	r1, #0
 8014f3a:	4630      	mov	r0, r6
 8014f3c:	f7ff ff50 	bl	8014de0 <_sbrk_r>
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	1a83      	subs	r3, r0, r2
 8014f44:	2b0f      	cmp	r3, #15
 8014f46:	dde3      	ble.n	8014f10 <_malloc_trim_r+0x38>
 8014f48:	490c      	ldr	r1, [pc, #48]	@ (8014f7c <_malloc_trim_r+0xa4>)
 8014f4a:	6809      	ldr	r1, [r1, #0]
 8014f4c:	1a40      	subs	r0, r0, r1
 8014f4e:	490c      	ldr	r1, [pc, #48]	@ (8014f80 <_malloc_trim_r+0xa8>)
 8014f50:	f043 0301 	orr.w	r3, r3, #1
 8014f54:	6008      	str	r0, [r1, #0]
 8014f56:	6053      	str	r3, [r2, #4]
 8014f58:	e7da      	b.n	8014f10 <_malloc_trim_r+0x38>
 8014f5a:	68bb      	ldr	r3, [r7, #8]
 8014f5c:	4a08      	ldr	r2, [pc, #32]	@ (8014f80 <_malloc_trim_r+0xa8>)
 8014f5e:	1b2d      	subs	r5, r5, r4
 8014f60:	f045 0501 	orr.w	r5, r5, #1
 8014f64:	605d      	str	r5, [r3, #4]
 8014f66:	6813      	ldr	r3, [r2, #0]
 8014f68:	4630      	mov	r0, r6
 8014f6a:	1b1b      	subs	r3, r3, r4
 8014f6c:	6013      	str	r3, [r2, #0]
 8014f6e:	f7ff fa59 	bl	8014424 <__malloc_unlock>
 8014f72:	2001      	movs	r0, #1
 8014f74:	e7d0      	b.n	8014f18 <_malloc_trim_r+0x40>
 8014f76:	bf00      	nop
 8014f78:	2000002c 	.word	0x2000002c
 8014f7c:	20000024 	.word	0x20000024
 8014f80:	20003c98 	.word	0x20003c98

08014f84 <_free_r>:
 8014f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f86:	4604      	mov	r4, r0
 8014f88:	460f      	mov	r7, r1
 8014f8a:	2900      	cmp	r1, #0
 8014f8c:	f000 80b1 	beq.w	80150f2 <_free_r+0x16e>
 8014f90:	f7ff fa42 	bl	8014418 <__malloc_lock>
 8014f94:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8014f98:	4d56      	ldr	r5, [pc, #344]	@ (80150f4 <_free_r+0x170>)
 8014f9a:	f022 0001 	bic.w	r0, r2, #1
 8014f9e:	f1a7 0308 	sub.w	r3, r7, #8
 8014fa2:	eb03 0c00 	add.w	ip, r3, r0
 8014fa6:	68a9      	ldr	r1, [r5, #8]
 8014fa8:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8014fac:	4561      	cmp	r1, ip
 8014fae:	f026 0603 	bic.w	r6, r6, #3
 8014fb2:	f002 0201 	and.w	r2, r2, #1
 8014fb6:	d11b      	bne.n	8014ff0 <_free_r+0x6c>
 8014fb8:	4406      	add	r6, r0
 8014fba:	b93a      	cbnz	r2, 8014fcc <_free_r+0x48>
 8014fbc:	f857 2c08 	ldr.w	r2, [r7, #-8]
 8014fc0:	1a9b      	subs	r3, r3, r2
 8014fc2:	4416      	add	r6, r2
 8014fc4:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8014fc8:	60ca      	str	r2, [r1, #12]
 8014fca:	6091      	str	r1, [r2, #8]
 8014fcc:	f046 0201 	orr.w	r2, r6, #1
 8014fd0:	605a      	str	r2, [r3, #4]
 8014fd2:	60ab      	str	r3, [r5, #8]
 8014fd4:	4b48      	ldr	r3, [pc, #288]	@ (80150f8 <_free_r+0x174>)
 8014fd6:	681b      	ldr	r3, [r3, #0]
 8014fd8:	42b3      	cmp	r3, r6
 8014fda:	d804      	bhi.n	8014fe6 <_free_r+0x62>
 8014fdc:	4b47      	ldr	r3, [pc, #284]	@ (80150fc <_free_r+0x178>)
 8014fde:	4620      	mov	r0, r4
 8014fe0:	6819      	ldr	r1, [r3, #0]
 8014fe2:	f7ff ff79 	bl	8014ed8 <_malloc_trim_r>
 8014fe6:	4620      	mov	r0, r4
 8014fe8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014fec:	f7ff ba1a 	b.w	8014424 <__malloc_unlock>
 8014ff0:	f8cc 6004 	str.w	r6, [ip, #4]
 8014ff4:	2a00      	cmp	r2, #0
 8014ff6:	d138      	bne.n	801506a <_free_r+0xe6>
 8014ff8:	f857 1c08 	ldr.w	r1, [r7, #-8]
 8014ffc:	1a5b      	subs	r3, r3, r1
 8014ffe:	4408      	add	r0, r1
 8015000:	6899      	ldr	r1, [r3, #8]
 8015002:	f105 0708 	add.w	r7, r5, #8
 8015006:	42b9      	cmp	r1, r7
 8015008:	d031      	beq.n	801506e <_free_r+0xea>
 801500a:	68df      	ldr	r7, [r3, #12]
 801500c:	60cf      	str	r7, [r1, #12]
 801500e:	60b9      	str	r1, [r7, #8]
 8015010:	eb0c 0106 	add.w	r1, ip, r6
 8015014:	6849      	ldr	r1, [r1, #4]
 8015016:	07c9      	lsls	r1, r1, #31
 8015018:	d40b      	bmi.n	8015032 <_free_r+0xae>
 801501a:	f8dc 1008 	ldr.w	r1, [ip, #8]
 801501e:	4430      	add	r0, r6
 8015020:	bb3a      	cbnz	r2, 8015072 <_free_r+0xee>
 8015022:	4e37      	ldr	r6, [pc, #220]	@ (8015100 <_free_r+0x17c>)
 8015024:	42b1      	cmp	r1, r6
 8015026:	d124      	bne.n	8015072 <_free_r+0xee>
 8015028:	e9c5 3304 	strd	r3, r3, [r5, #16]
 801502c:	e9c3 1102 	strd	r1, r1, [r3, #8]
 8015030:	2201      	movs	r2, #1
 8015032:	f040 0101 	orr.w	r1, r0, #1
 8015036:	6059      	str	r1, [r3, #4]
 8015038:	5018      	str	r0, [r3, r0]
 801503a:	2a00      	cmp	r2, #0
 801503c:	d1d3      	bne.n	8014fe6 <_free_r+0x62>
 801503e:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8015042:	d21b      	bcs.n	801507c <_free_r+0xf8>
 8015044:	08c2      	lsrs	r2, r0, #3
 8015046:	2101      	movs	r1, #1
 8015048:	0940      	lsrs	r0, r0, #5
 801504a:	4081      	lsls	r1, r0
 801504c:	6868      	ldr	r0, [r5, #4]
 801504e:	3201      	adds	r2, #1
 8015050:	4301      	orrs	r1, r0
 8015052:	6069      	str	r1, [r5, #4]
 8015054:	f855 0032 	ldr.w	r0, [r5, r2, lsl #3]
 8015058:	eb05 01c2 	add.w	r1, r5, r2, lsl #3
 801505c:	3908      	subs	r1, #8
 801505e:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8015062:	f845 3032 	str.w	r3, [r5, r2, lsl #3]
 8015066:	60c3      	str	r3, [r0, #12]
 8015068:	e7bd      	b.n	8014fe6 <_free_r+0x62>
 801506a:	2200      	movs	r2, #0
 801506c:	e7d0      	b.n	8015010 <_free_r+0x8c>
 801506e:	2201      	movs	r2, #1
 8015070:	e7ce      	b.n	8015010 <_free_r+0x8c>
 8015072:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8015076:	60ce      	str	r6, [r1, #12]
 8015078:	60b1      	str	r1, [r6, #8]
 801507a:	e7da      	b.n	8015032 <_free_r+0xae>
 801507c:	f5b0 6f20 	cmp.w	r0, #2560	@ 0xa00
 8015080:	ea4f 2250 	mov.w	r2, r0, lsr #9
 8015084:	d214      	bcs.n	80150b0 <_free_r+0x12c>
 8015086:	0982      	lsrs	r2, r0, #6
 8015088:	3238      	adds	r2, #56	@ 0x38
 801508a:	1c51      	adds	r1, r2, #1
 801508c:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8015090:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8015094:	428e      	cmp	r6, r1
 8015096:	d125      	bne.n	80150e4 <_free_r+0x160>
 8015098:	2001      	movs	r0, #1
 801509a:	1092      	asrs	r2, r2, #2
 801509c:	fa00 f202 	lsl.w	r2, r0, r2
 80150a0:	6868      	ldr	r0, [r5, #4]
 80150a2:	4302      	orrs	r2, r0
 80150a4:	606a      	str	r2, [r5, #4]
 80150a6:	e9c3 1602 	strd	r1, r6, [r3, #8]
 80150aa:	60b3      	str	r3, [r6, #8]
 80150ac:	60cb      	str	r3, [r1, #12]
 80150ae:	e79a      	b.n	8014fe6 <_free_r+0x62>
 80150b0:	2a14      	cmp	r2, #20
 80150b2:	d801      	bhi.n	80150b8 <_free_r+0x134>
 80150b4:	325b      	adds	r2, #91	@ 0x5b
 80150b6:	e7e8      	b.n	801508a <_free_r+0x106>
 80150b8:	2a54      	cmp	r2, #84	@ 0x54
 80150ba:	d802      	bhi.n	80150c2 <_free_r+0x13e>
 80150bc:	0b02      	lsrs	r2, r0, #12
 80150be:	326e      	adds	r2, #110	@ 0x6e
 80150c0:	e7e3      	b.n	801508a <_free_r+0x106>
 80150c2:	f5b2 7faa 	cmp.w	r2, #340	@ 0x154
 80150c6:	d802      	bhi.n	80150ce <_free_r+0x14a>
 80150c8:	0bc2      	lsrs	r2, r0, #15
 80150ca:	3277      	adds	r2, #119	@ 0x77
 80150cc:	e7dd      	b.n	801508a <_free_r+0x106>
 80150ce:	f240 5154 	movw	r1, #1364	@ 0x554
 80150d2:	428a      	cmp	r2, r1
 80150d4:	bf9a      	itte	ls
 80150d6:	0c82      	lsrls	r2, r0, #18
 80150d8:	327c      	addls	r2, #124	@ 0x7c
 80150da:	227e      	movhi	r2, #126	@ 0x7e
 80150dc:	e7d5      	b.n	801508a <_free_r+0x106>
 80150de:	6889      	ldr	r1, [r1, #8]
 80150e0:	428e      	cmp	r6, r1
 80150e2:	d004      	beq.n	80150ee <_free_r+0x16a>
 80150e4:	684a      	ldr	r2, [r1, #4]
 80150e6:	f022 0203 	bic.w	r2, r2, #3
 80150ea:	4282      	cmp	r2, r0
 80150ec:	d8f7      	bhi.n	80150de <_free_r+0x15a>
 80150ee:	68ce      	ldr	r6, [r1, #12]
 80150f0:	e7d9      	b.n	80150a6 <_free_r+0x122>
 80150f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150f4:	2000002c 	.word	0x2000002c
 80150f8:	20000028 	.word	0x20000028
 80150fc:	20003cc8 	.word	0x20003cc8
 8015100:	20000034 	.word	0x20000034

08015104 <_realloc_r>:
 8015104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015108:	4682      	mov	sl, r0
 801510a:	4693      	mov	fp, r2
 801510c:	460c      	mov	r4, r1
 801510e:	b929      	cbnz	r1, 801511c <_realloc_r+0x18>
 8015110:	4611      	mov	r1, r2
 8015112:	b003      	add	sp, #12
 8015114:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015118:	f7fe bf44 	b.w	8013fa4 <_malloc_r>
 801511c:	f7ff f97c 	bl	8014418 <__malloc_lock>
 8015120:	f10b 080b 	add.w	r8, fp, #11
 8015124:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8015128:	f1b8 0f16 	cmp.w	r8, #22
 801512c:	f1a4 0908 	sub.w	r9, r4, #8
 8015130:	f025 0603 	bic.w	r6, r5, #3
 8015134:	d908      	bls.n	8015148 <_realloc_r+0x44>
 8015136:	f038 0807 	bics.w	r8, r8, #7
 801513a:	d507      	bpl.n	801514c <_realloc_r+0x48>
 801513c:	230c      	movs	r3, #12
 801513e:	f8ca 3000 	str.w	r3, [sl]
 8015142:	f04f 0b00 	mov.w	fp, #0
 8015146:	e032      	b.n	80151ae <_realloc_r+0xaa>
 8015148:	f04f 0810 	mov.w	r8, #16
 801514c:	45c3      	cmp	fp, r8
 801514e:	d8f5      	bhi.n	801513c <_realloc_r+0x38>
 8015150:	4546      	cmp	r6, r8
 8015152:	f280 8174 	bge.w	801543e <_realloc_r+0x33a>
 8015156:	4b9e      	ldr	r3, [pc, #632]	@ (80153d0 <_realloc_r+0x2cc>)
 8015158:	f8d3 c008 	ldr.w	ip, [r3, #8]
 801515c:	eb09 0106 	add.w	r1, r9, r6
 8015160:	458c      	cmp	ip, r1
 8015162:	6848      	ldr	r0, [r1, #4]
 8015164:	d005      	beq.n	8015172 <_realloc_r+0x6e>
 8015166:	f020 0201 	bic.w	r2, r0, #1
 801516a:	440a      	add	r2, r1
 801516c:	6852      	ldr	r2, [r2, #4]
 801516e:	07d7      	lsls	r7, r2, #31
 8015170:	d449      	bmi.n	8015206 <_realloc_r+0x102>
 8015172:	f020 0003 	bic.w	r0, r0, #3
 8015176:	458c      	cmp	ip, r1
 8015178:	eb06 0700 	add.w	r7, r6, r0
 801517c:	d11b      	bne.n	80151b6 <_realloc_r+0xb2>
 801517e:	f108 0210 	add.w	r2, r8, #16
 8015182:	42ba      	cmp	r2, r7
 8015184:	dc41      	bgt.n	801520a <_realloc_r+0x106>
 8015186:	eb09 0208 	add.w	r2, r9, r8
 801518a:	eba7 0708 	sub.w	r7, r7, r8
 801518e:	f047 0701 	orr.w	r7, r7, #1
 8015192:	609a      	str	r2, [r3, #8]
 8015194:	6057      	str	r7, [r2, #4]
 8015196:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801519a:	f003 0301 	and.w	r3, r3, #1
 801519e:	ea43 0308 	orr.w	r3, r3, r8
 80151a2:	f844 3c04 	str.w	r3, [r4, #-4]
 80151a6:	4650      	mov	r0, sl
 80151a8:	f7ff f93c 	bl	8014424 <__malloc_unlock>
 80151ac:	46a3      	mov	fp, r4
 80151ae:	4658      	mov	r0, fp
 80151b0:	b003      	add	sp, #12
 80151b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80151b6:	45b8      	cmp	r8, r7
 80151b8:	dc27      	bgt.n	801520a <_realloc_r+0x106>
 80151ba:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80151be:	60d3      	str	r3, [r2, #12]
 80151c0:	609a      	str	r2, [r3, #8]
 80151c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80151c6:	eba7 0008 	sub.w	r0, r7, r8
 80151ca:	280f      	cmp	r0, #15
 80151cc:	f003 0301 	and.w	r3, r3, #1
 80151d0:	eb09 0207 	add.w	r2, r9, r7
 80151d4:	f240 8135 	bls.w	8015442 <_realloc_r+0x33e>
 80151d8:	eb09 0108 	add.w	r1, r9, r8
 80151dc:	ea48 0303 	orr.w	r3, r8, r3
 80151e0:	f040 0001 	orr.w	r0, r0, #1
 80151e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80151e8:	6048      	str	r0, [r1, #4]
 80151ea:	6853      	ldr	r3, [r2, #4]
 80151ec:	f043 0301 	orr.w	r3, r3, #1
 80151f0:	6053      	str	r3, [r2, #4]
 80151f2:	3108      	adds	r1, #8
 80151f4:	4650      	mov	r0, sl
 80151f6:	f7ff fec5 	bl	8014f84 <_free_r>
 80151fa:	4650      	mov	r0, sl
 80151fc:	f7ff f912 	bl	8014424 <__malloc_unlock>
 8015200:	f109 0b08 	add.w	fp, r9, #8
 8015204:	e7d3      	b.n	80151ae <_realloc_r+0xaa>
 8015206:	2000      	movs	r0, #0
 8015208:	4601      	mov	r1, r0
 801520a:	07ea      	lsls	r2, r5, #31
 801520c:	f100 80c7 	bmi.w	801539e <_realloc_r+0x29a>
 8015210:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8015214:	eba9 0505 	sub.w	r5, r9, r5
 8015218:	686a      	ldr	r2, [r5, #4]
 801521a:	f022 0203 	bic.w	r2, r2, #3
 801521e:	4432      	add	r2, r6
 8015220:	9201      	str	r2, [sp, #4]
 8015222:	2900      	cmp	r1, #0
 8015224:	f000 8086 	beq.w	8015334 <_realloc_r+0x230>
 8015228:	458c      	cmp	ip, r1
 801522a:	eb00 0702 	add.w	r7, r0, r2
 801522e:	d149      	bne.n	80152c4 <_realloc_r+0x1c0>
 8015230:	f108 0210 	add.w	r2, r8, #16
 8015234:	42ba      	cmp	r2, r7
 8015236:	dc7d      	bgt.n	8015334 <_realloc_r+0x230>
 8015238:	46ab      	mov	fp, r5
 801523a:	68ea      	ldr	r2, [r5, #12]
 801523c:	f85b 1f08 	ldr.w	r1, [fp, #8]!
 8015240:	60ca      	str	r2, [r1, #12]
 8015242:	6091      	str	r1, [r2, #8]
 8015244:	1f32      	subs	r2, r6, #4
 8015246:	2a24      	cmp	r2, #36	@ 0x24
 8015248:	d836      	bhi.n	80152b8 <_realloc_r+0x1b4>
 801524a:	2a13      	cmp	r2, #19
 801524c:	d932      	bls.n	80152b4 <_realloc_r+0x1b0>
 801524e:	6821      	ldr	r1, [r4, #0]
 8015250:	60a9      	str	r1, [r5, #8]
 8015252:	6861      	ldr	r1, [r4, #4]
 8015254:	60e9      	str	r1, [r5, #12]
 8015256:	2a1b      	cmp	r2, #27
 8015258:	d81a      	bhi.n	8015290 <_realloc_r+0x18c>
 801525a:	3408      	adds	r4, #8
 801525c:	f105 0210 	add.w	r2, r5, #16
 8015260:	6821      	ldr	r1, [r4, #0]
 8015262:	6011      	str	r1, [r2, #0]
 8015264:	6861      	ldr	r1, [r4, #4]
 8015266:	6051      	str	r1, [r2, #4]
 8015268:	68a1      	ldr	r1, [r4, #8]
 801526a:	6091      	str	r1, [r2, #8]
 801526c:	eb05 0208 	add.w	r2, r5, r8
 8015270:	eba7 0708 	sub.w	r7, r7, r8
 8015274:	f047 0701 	orr.w	r7, r7, #1
 8015278:	609a      	str	r2, [r3, #8]
 801527a:	6057      	str	r7, [r2, #4]
 801527c:	686b      	ldr	r3, [r5, #4]
 801527e:	f003 0301 	and.w	r3, r3, #1
 8015282:	ea43 0308 	orr.w	r3, r3, r8
 8015286:	606b      	str	r3, [r5, #4]
 8015288:	4650      	mov	r0, sl
 801528a:	f7ff f8cb 	bl	8014424 <__malloc_unlock>
 801528e:	e78e      	b.n	80151ae <_realloc_r+0xaa>
 8015290:	68a1      	ldr	r1, [r4, #8]
 8015292:	6129      	str	r1, [r5, #16]
 8015294:	68e1      	ldr	r1, [r4, #12]
 8015296:	6169      	str	r1, [r5, #20]
 8015298:	2a24      	cmp	r2, #36	@ 0x24
 801529a:	bf01      	itttt	eq
 801529c:	6922      	ldreq	r2, [r4, #16]
 801529e:	61aa      	streq	r2, [r5, #24]
 80152a0:	6961      	ldreq	r1, [r4, #20]
 80152a2:	61e9      	streq	r1, [r5, #28]
 80152a4:	bf19      	ittee	ne
 80152a6:	3410      	addne	r4, #16
 80152a8:	f105 0218 	addne.w	r2, r5, #24
 80152ac:	f105 0220 	addeq.w	r2, r5, #32
 80152b0:	3418      	addeq	r4, #24
 80152b2:	e7d5      	b.n	8015260 <_realloc_r+0x15c>
 80152b4:	465a      	mov	r2, fp
 80152b6:	e7d3      	b.n	8015260 <_realloc_r+0x15c>
 80152b8:	4621      	mov	r1, r4
 80152ba:	4658      	mov	r0, fp
 80152bc:	f7ff fcc8 	bl	8014c50 <memmove>
 80152c0:	4b43      	ldr	r3, [pc, #268]	@ (80153d0 <_realloc_r+0x2cc>)
 80152c2:	e7d3      	b.n	801526c <_realloc_r+0x168>
 80152c4:	45b8      	cmp	r8, r7
 80152c6:	dc35      	bgt.n	8015334 <_realloc_r+0x230>
 80152c8:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80152cc:	4628      	mov	r0, r5
 80152ce:	60d3      	str	r3, [r2, #12]
 80152d0:	609a      	str	r2, [r3, #8]
 80152d2:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80152d6:	68eb      	ldr	r3, [r5, #12]
 80152d8:	60d3      	str	r3, [r2, #12]
 80152da:	609a      	str	r2, [r3, #8]
 80152dc:	1f32      	subs	r2, r6, #4
 80152de:	2a24      	cmp	r2, #36	@ 0x24
 80152e0:	d824      	bhi.n	801532c <_realloc_r+0x228>
 80152e2:	2a13      	cmp	r2, #19
 80152e4:	d908      	bls.n	80152f8 <_realloc_r+0x1f4>
 80152e6:	6823      	ldr	r3, [r4, #0]
 80152e8:	60ab      	str	r3, [r5, #8]
 80152ea:	6863      	ldr	r3, [r4, #4]
 80152ec:	60eb      	str	r3, [r5, #12]
 80152ee:	2a1b      	cmp	r2, #27
 80152f0:	d80a      	bhi.n	8015308 <_realloc_r+0x204>
 80152f2:	3408      	adds	r4, #8
 80152f4:	f105 0010 	add.w	r0, r5, #16
 80152f8:	6823      	ldr	r3, [r4, #0]
 80152fa:	6003      	str	r3, [r0, #0]
 80152fc:	6863      	ldr	r3, [r4, #4]
 80152fe:	6043      	str	r3, [r0, #4]
 8015300:	68a3      	ldr	r3, [r4, #8]
 8015302:	6083      	str	r3, [r0, #8]
 8015304:	46a9      	mov	r9, r5
 8015306:	e75c      	b.n	80151c2 <_realloc_r+0xbe>
 8015308:	68a3      	ldr	r3, [r4, #8]
 801530a:	612b      	str	r3, [r5, #16]
 801530c:	68e3      	ldr	r3, [r4, #12]
 801530e:	616b      	str	r3, [r5, #20]
 8015310:	2a24      	cmp	r2, #36	@ 0x24
 8015312:	bf01      	itttt	eq
 8015314:	6923      	ldreq	r3, [r4, #16]
 8015316:	61ab      	streq	r3, [r5, #24]
 8015318:	6963      	ldreq	r3, [r4, #20]
 801531a:	61eb      	streq	r3, [r5, #28]
 801531c:	bf19      	ittee	ne
 801531e:	3410      	addne	r4, #16
 8015320:	f105 0018 	addne.w	r0, r5, #24
 8015324:	f105 0020 	addeq.w	r0, r5, #32
 8015328:	3418      	addeq	r4, #24
 801532a:	e7e5      	b.n	80152f8 <_realloc_r+0x1f4>
 801532c:	4621      	mov	r1, r4
 801532e:	f7ff fc8f 	bl	8014c50 <memmove>
 8015332:	e7e7      	b.n	8015304 <_realloc_r+0x200>
 8015334:	9b01      	ldr	r3, [sp, #4]
 8015336:	4598      	cmp	r8, r3
 8015338:	dc31      	bgt.n	801539e <_realloc_r+0x29a>
 801533a:	4628      	mov	r0, r5
 801533c:	68eb      	ldr	r3, [r5, #12]
 801533e:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8015342:	60d3      	str	r3, [r2, #12]
 8015344:	609a      	str	r2, [r3, #8]
 8015346:	1f32      	subs	r2, r6, #4
 8015348:	2a24      	cmp	r2, #36	@ 0x24
 801534a:	d824      	bhi.n	8015396 <_realloc_r+0x292>
 801534c:	2a13      	cmp	r2, #19
 801534e:	d908      	bls.n	8015362 <_realloc_r+0x25e>
 8015350:	6823      	ldr	r3, [r4, #0]
 8015352:	60ab      	str	r3, [r5, #8]
 8015354:	6863      	ldr	r3, [r4, #4]
 8015356:	60eb      	str	r3, [r5, #12]
 8015358:	2a1b      	cmp	r2, #27
 801535a:	d80a      	bhi.n	8015372 <_realloc_r+0x26e>
 801535c:	3408      	adds	r4, #8
 801535e:	f105 0010 	add.w	r0, r5, #16
 8015362:	6823      	ldr	r3, [r4, #0]
 8015364:	6003      	str	r3, [r0, #0]
 8015366:	6863      	ldr	r3, [r4, #4]
 8015368:	6043      	str	r3, [r0, #4]
 801536a:	68a3      	ldr	r3, [r4, #8]
 801536c:	6083      	str	r3, [r0, #8]
 801536e:	9f01      	ldr	r7, [sp, #4]
 8015370:	e7c8      	b.n	8015304 <_realloc_r+0x200>
 8015372:	68a3      	ldr	r3, [r4, #8]
 8015374:	612b      	str	r3, [r5, #16]
 8015376:	68e3      	ldr	r3, [r4, #12]
 8015378:	616b      	str	r3, [r5, #20]
 801537a:	2a24      	cmp	r2, #36	@ 0x24
 801537c:	bf01      	itttt	eq
 801537e:	6923      	ldreq	r3, [r4, #16]
 8015380:	61ab      	streq	r3, [r5, #24]
 8015382:	6963      	ldreq	r3, [r4, #20]
 8015384:	61eb      	streq	r3, [r5, #28]
 8015386:	bf19      	ittee	ne
 8015388:	3410      	addne	r4, #16
 801538a:	f105 0018 	addne.w	r0, r5, #24
 801538e:	f105 0020 	addeq.w	r0, r5, #32
 8015392:	3418      	addeq	r4, #24
 8015394:	e7e5      	b.n	8015362 <_realloc_r+0x25e>
 8015396:	4621      	mov	r1, r4
 8015398:	f7ff fc5a 	bl	8014c50 <memmove>
 801539c:	e7e7      	b.n	801536e <_realloc_r+0x26a>
 801539e:	4659      	mov	r1, fp
 80153a0:	4650      	mov	r0, sl
 80153a2:	f7fe fdff 	bl	8013fa4 <_malloc_r>
 80153a6:	4683      	mov	fp, r0
 80153a8:	b918      	cbnz	r0, 80153b2 <_realloc_r+0x2ae>
 80153aa:	4650      	mov	r0, sl
 80153ac:	f7ff f83a 	bl	8014424 <__malloc_unlock>
 80153b0:	e6c7      	b.n	8015142 <_realloc_r+0x3e>
 80153b2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80153b6:	f023 0301 	bic.w	r3, r3, #1
 80153ba:	444b      	add	r3, r9
 80153bc:	f1a0 0208 	sub.w	r2, r0, #8
 80153c0:	4293      	cmp	r3, r2
 80153c2:	d107      	bne.n	80153d4 <_realloc_r+0x2d0>
 80153c4:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80153c8:	f027 0703 	bic.w	r7, r7, #3
 80153cc:	4437      	add	r7, r6
 80153ce:	e6f8      	b.n	80151c2 <_realloc_r+0xbe>
 80153d0:	2000002c 	.word	0x2000002c
 80153d4:	1f32      	subs	r2, r6, #4
 80153d6:	2a24      	cmp	r2, #36	@ 0x24
 80153d8:	d82d      	bhi.n	8015436 <_realloc_r+0x332>
 80153da:	2a13      	cmp	r2, #19
 80153dc:	d928      	bls.n	8015430 <_realloc_r+0x32c>
 80153de:	6823      	ldr	r3, [r4, #0]
 80153e0:	6003      	str	r3, [r0, #0]
 80153e2:	6863      	ldr	r3, [r4, #4]
 80153e4:	6043      	str	r3, [r0, #4]
 80153e6:	2a1b      	cmp	r2, #27
 80153e8:	d80e      	bhi.n	8015408 <_realloc_r+0x304>
 80153ea:	f104 0208 	add.w	r2, r4, #8
 80153ee:	f100 0308 	add.w	r3, r0, #8
 80153f2:	6811      	ldr	r1, [r2, #0]
 80153f4:	6019      	str	r1, [r3, #0]
 80153f6:	6851      	ldr	r1, [r2, #4]
 80153f8:	6059      	str	r1, [r3, #4]
 80153fa:	6892      	ldr	r2, [r2, #8]
 80153fc:	609a      	str	r2, [r3, #8]
 80153fe:	4621      	mov	r1, r4
 8015400:	4650      	mov	r0, sl
 8015402:	f7ff fdbf 	bl	8014f84 <_free_r>
 8015406:	e73f      	b.n	8015288 <_realloc_r+0x184>
 8015408:	68a3      	ldr	r3, [r4, #8]
 801540a:	6083      	str	r3, [r0, #8]
 801540c:	68e3      	ldr	r3, [r4, #12]
 801540e:	60c3      	str	r3, [r0, #12]
 8015410:	2a24      	cmp	r2, #36	@ 0x24
 8015412:	bf01      	itttt	eq
 8015414:	6923      	ldreq	r3, [r4, #16]
 8015416:	6103      	streq	r3, [r0, #16]
 8015418:	6961      	ldreq	r1, [r4, #20]
 801541a:	6141      	streq	r1, [r0, #20]
 801541c:	bf19      	ittee	ne
 801541e:	f104 0210 	addne.w	r2, r4, #16
 8015422:	f100 0310 	addne.w	r3, r0, #16
 8015426:	f104 0218 	addeq.w	r2, r4, #24
 801542a:	f100 0318 	addeq.w	r3, r0, #24
 801542e:	e7e0      	b.n	80153f2 <_realloc_r+0x2ee>
 8015430:	4603      	mov	r3, r0
 8015432:	4622      	mov	r2, r4
 8015434:	e7dd      	b.n	80153f2 <_realloc_r+0x2ee>
 8015436:	4621      	mov	r1, r4
 8015438:	f7ff fc0a 	bl	8014c50 <memmove>
 801543c:	e7df      	b.n	80153fe <_realloc_r+0x2fa>
 801543e:	4637      	mov	r7, r6
 8015440:	e6bf      	b.n	80151c2 <_realloc_r+0xbe>
 8015442:	431f      	orrs	r7, r3
 8015444:	f8c9 7004 	str.w	r7, [r9, #4]
 8015448:	6853      	ldr	r3, [r2, #4]
 801544a:	f043 0301 	orr.w	r3, r3, #1
 801544e:	6053      	str	r3, [r2, #4]
 8015450:	e6d3      	b.n	80151fa <_realloc_r+0xf6>
 8015452:	bf00      	nop
 8015454:	0000      	movs	r0, r0
	...

08015458 <_svfprintf_r>:
 8015458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801545c:	ed2d 8b04 	vpush	{d8-d9}
 8015460:	b0cb      	sub	sp, #300	@ 0x12c
 8015462:	468b      	mov	fp, r1
 8015464:	4692      	mov	sl, r2
 8015466:	461f      	mov	r7, r3
 8015468:	9002      	str	r0, [sp, #8]
 801546a:	f002 fd51 	bl	8017f10 <_localeconv_r>
 801546e:	6803      	ldr	r3, [r0, #0]
 8015470:	930f      	str	r3, [sp, #60]	@ 0x3c
 8015472:	4618      	mov	r0, r3
 8015474:	f7ea ff34 	bl	80002e0 <strlen>
 8015478:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801547c:	9009      	str	r0, [sp, #36]	@ 0x24
 801547e:	061a      	lsls	r2, r3, #24
 8015480:	d515      	bpl.n	80154ae <_svfprintf_r+0x56>
 8015482:	f8db 3010 	ldr.w	r3, [fp, #16]
 8015486:	b993      	cbnz	r3, 80154ae <_svfprintf_r+0x56>
 8015488:	9802      	ldr	r0, [sp, #8]
 801548a:	2140      	movs	r1, #64	@ 0x40
 801548c:	f7fe fd8a 	bl	8013fa4 <_malloc_r>
 8015490:	f8cb 0000 	str.w	r0, [fp]
 8015494:	f8cb 0010 	str.w	r0, [fp, #16]
 8015498:	b930      	cbnz	r0, 80154a8 <_svfprintf_r+0x50>
 801549a:	9a02      	ldr	r2, [sp, #8]
 801549c:	230c      	movs	r3, #12
 801549e:	6013      	str	r3, [r2, #0]
 80154a0:	f04f 33ff 	mov.w	r3, #4294967295
 80154a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80154a6:	e1e2      	b.n	801586e <_svfprintf_r+0x416>
 80154a8:	2340      	movs	r3, #64	@ 0x40
 80154aa:	f8cb 3014 	str.w	r3, [fp, #20]
 80154ae:	2300      	movs	r3, #0
 80154b0:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 80154b4:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8015718 <_svfprintf_r+0x2c0>
 80154b8:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 80154bc:	ac21      	add	r4, sp, #132	@ 0x84
 80154be:	941e      	str	r4, [sp, #120]	@ 0x78
 80154c0:	9303      	str	r3, [sp, #12]
 80154c2:	9307      	str	r3, [sp, #28]
 80154c4:	930e      	str	r3, [sp, #56]	@ 0x38
 80154c6:	9310      	str	r3, [sp, #64]	@ 0x40
 80154c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80154ca:	4653      	mov	r3, sl
 80154cc:	461d      	mov	r5, r3
 80154ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154d2:	b10a      	cbz	r2, 80154d8 <_svfprintf_r+0x80>
 80154d4:	2a25      	cmp	r2, #37	@ 0x25
 80154d6:	d1f9      	bne.n	80154cc <_svfprintf_r+0x74>
 80154d8:	ebb5 060a 	subs.w	r6, r5, sl
 80154dc:	d00d      	beq.n	80154fa <_svfprintf_r+0xa2>
 80154de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80154e0:	4433      	add	r3, r6
 80154e2:	9320      	str	r3, [sp, #128]	@ 0x80
 80154e4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80154e6:	3301      	adds	r3, #1
 80154e8:	2b07      	cmp	r3, #7
 80154ea:	e9c4 a600 	strd	sl, r6, [r4]
 80154ee:	931f      	str	r3, [sp, #124]	@ 0x7c
 80154f0:	dc75      	bgt.n	80155de <_svfprintf_r+0x186>
 80154f2:	3408      	adds	r4, #8
 80154f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80154f6:	4433      	add	r3, r6
 80154f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80154fa:	782b      	ldrb	r3, [r5, #0]
 80154fc:	2b00      	cmp	r3, #0
 80154fe:	f001 80f4 	beq.w	80166ea <_svfprintf_r+0x1292>
 8015502:	2200      	movs	r2, #0
 8015504:	1c6b      	adds	r3, r5, #1
 8015506:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 801550a:	f04f 36ff 	mov.w	r6, #4294967295
 801550e:	920a      	str	r2, [sp, #40]	@ 0x28
 8015510:	4615      	mov	r5, r2
 8015512:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015516:	9204      	str	r2, [sp, #16]
 8015518:	9308      	str	r3, [sp, #32]
 801551a:	9b04      	ldr	r3, [sp, #16]
 801551c:	3b20      	subs	r3, #32
 801551e:	2b5a      	cmp	r3, #90	@ 0x5a
 8015520:	f200 856b 	bhi.w	8015ffa <_svfprintf_r+0xba2>
 8015524:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015528:	0569009d 	.word	0x0569009d
 801552c:	00a50569 	.word	0x00a50569
 8015530:	05690569 	.word	0x05690569
 8015534:	00850569 	.word	0x00850569
 8015538:	05690569 	.word	0x05690569
 801553c:	00b200a8 	.word	0x00b200a8
 8015540:	00af0569 	.word	0x00af0569
 8015544:	056900b4 	.word	0x056900b4
 8015548:	00d200cf 	.word	0x00d200cf
 801554c:	00d200d2 	.word	0x00d200d2
 8015550:	00d200d2 	.word	0x00d200d2
 8015554:	00d200d2 	.word	0x00d200d2
 8015558:	00d200d2 	.word	0x00d200d2
 801555c:	05690569 	.word	0x05690569
 8015560:	05690569 	.word	0x05690569
 8015564:	05690569 	.word	0x05690569
 8015568:	014c0569 	.word	0x014c0569
 801556c:	010b0569 	.word	0x010b0569
 8015570:	014c011d 	.word	0x014c011d
 8015574:	014c014c 	.word	0x014c014c
 8015578:	05690569 	.word	0x05690569
 801557c:	05690569 	.word	0x05690569
 8015580:	056900e5 	.word	0x056900e5
 8015584:	04620569 	.word	0x04620569
 8015588:	05690569 	.word	0x05690569
 801558c:	04ac0569 	.word	0x04ac0569
 8015590:	04cb0569 	.word	0x04cb0569
 8015594:	05690569 	.word	0x05690569
 8015598:	056904ee 	.word	0x056904ee
 801559c:	05690569 	.word	0x05690569
 80155a0:	05690569 	.word	0x05690569
 80155a4:	05690569 	.word	0x05690569
 80155a8:	014c0569 	.word	0x014c0569
 80155ac:	010b0569 	.word	0x010b0569
 80155b0:	014c011f 	.word	0x014c011f
 80155b4:	014c014c 	.word	0x014c014c
 80155b8:	011f00e8 	.word	0x011f00e8
 80155bc:	05690105 	.word	0x05690105
 80155c0:	056900fe 	.word	0x056900fe
 80155c4:	04640443 	.word	0x04640443
 80155c8:	0105049a 	.word	0x0105049a
 80155cc:	04ac0569 	.word	0x04ac0569
 80155d0:	04cd009b 	.word	0x04cd009b
 80155d4:	05690569 	.word	0x05690569
 80155d8:	05690065 	.word	0x05690065
 80155dc:	009b      	.short	0x009b
 80155de:	9802      	ldr	r0, [sp, #8]
 80155e0:	aa1e      	add	r2, sp, #120	@ 0x78
 80155e2:	4659      	mov	r1, fp
 80155e4:	f002 faf3 	bl	8017bce <__ssprint_r>
 80155e8:	2800      	cmp	r0, #0
 80155ea:	f040 813b 	bne.w	8015864 <_svfprintf_r+0x40c>
 80155ee:	ac21      	add	r4, sp, #132	@ 0x84
 80155f0:	e780      	b.n	80154f4 <_svfprintf_r+0x9c>
 80155f2:	4b4b      	ldr	r3, [pc, #300]	@ (8015720 <_svfprintf_r+0x2c8>)
 80155f4:	9312      	str	r3, [sp, #72]	@ 0x48
 80155f6:	f015 0320 	ands.w	r3, r5, #32
 80155fa:	f000 8486 	beq.w	8015f0a <_svfprintf_r+0xab2>
 80155fe:	3707      	adds	r7, #7
 8015600:	f027 0307 	bic.w	r3, r7, #7
 8015604:	461a      	mov	r2, r3
 8015606:	f8d3 8004 	ldr.w	r8, [r3, #4]
 801560a:	f852 7b08 	ldr.w	r7, [r2], #8
 801560e:	9205      	str	r2, [sp, #20]
 8015610:	07eb      	lsls	r3, r5, #31
 8015612:	d50a      	bpl.n	801562a <_svfprintf_r+0x1d2>
 8015614:	ea57 0308 	orrs.w	r3, r7, r8
 8015618:	d007      	beq.n	801562a <_svfprintf_r+0x1d2>
 801561a:	2330      	movs	r3, #48	@ 0x30
 801561c:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 8015620:	9b04      	ldr	r3, [sp, #16]
 8015622:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8015626:	f045 0502 	orr.w	r5, r5, #2
 801562a:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 801562e:	2302      	movs	r3, #2
 8015630:	e3ed      	b.n	8015e0e <_svfprintf_r+0x9b6>
 8015632:	9802      	ldr	r0, [sp, #8]
 8015634:	f002 fc6c 	bl	8017f10 <_localeconv_r>
 8015638:	6843      	ldr	r3, [r0, #4]
 801563a:	9310      	str	r3, [sp, #64]	@ 0x40
 801563c:	4618      	mov	r0, r3
 801563e:	f7ea fe4f 	bl	80002e0 <strlen>
 8015642:	900e      	str	r0, [sp, #56]	@ 0x38
 8015644:	9802      	ldr	r0, [sp, #8]
 8015646:	f002 fc63 	bl	8017f10 <_localeconv_r>
 801564a:	6883      	ldr	r3, [r0, #8]
 801564c:	9307      	str	r3, [sp, #28]
 801564e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015650:	b12b      	cbz	r3, 801565e <_svfprintf_r+0x206>
 8015652:	9b07      	ldr	r3, [sp, #28]
 8015654:	b11b      	cbz	r3, 801565e <_svfprintf_r+0x206>
 8015656:	781b      	ldrb	r3, [r3, #0]
 8015658:	b10b      	cbz	r3, 801565e <_svfprintf_r+0x206>
 801565a:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 801565e:	9b08      	ldr	r3, [sp, #32]
 8015660:	e757      	b.n	8015512 <_svfprintf_r+0xba>
 8015662:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8015666:	2b00      	cmp	r3, #0
 8015668:	d1f9      	bne.n	801565e <_svfprintf_r+0x206>
 801566a:	2320      	movs	r3, #32
 801566c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8015670:	e7f5      	b.n	801565e <_svfprintf_r+0x206>
 8015672:	f045 0501 	orr.w	r5, r5, #1
 8015676:	e7f2      	b.n	801565e <_svfprintf_r+0x206>
 8015678:	f857 3b04 	ldr.w	r3, [r7], #4
 801567c:	930a      	str	r3, [sp, #40]	@ 0x28
 801567e:	2b00      	cmp	r3, #0
 8015680:	daed      	bge.n	801565e <_svfprintf_r+0x206>
 8015682:	425b      	negs	r3, r3
 8015684:	930a      	str	r3, [sp, #40]	@ 0x28
 8015686:	f045 0504 	orr.w	r5, r5, #4
 801568a:	e7e8      	b.n	801565e <_svfprintf_r+0x206>
 801568c:	232b      	movs	r3, #43	@ 0x2b
 801568e:	e7ed      	b.n	801566c <_svfprintf_r+0x214>
 8015690:	9b08      	ldr	r3, [sp, #32]
 8015692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015696:	9204      	str	r2, [sp, #16]
 8015698:	2a2a      	cmp	r2, #42	@ 0x2a
 801569a:	d111      	bne.n	80156c0 <_svfprintf_r+0x268>
 801569c:	f857 6b04 	ldr.w	r6, [r7], #4
 80156a0:	9308      	str	r3, [sp, #32]
 80156a2:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80156a6:	e7da      	b.n	801565e <_svfprintf_r+0x206>
 80156a8:	fb01 2606 	mla	r6, r1, r6, r2
 80156ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80156b0:	9204      	str	r2, [sp, #16]
 80156b2:	9a04      	ldr	r2, [sp, #16]
 80156b4:	3a30      	subs	r2, #48	@ 0x30
 80156b6:	2a09      	cmp	r2, #9
 80156b8:	d9f6      	bls.n	80156a8 <_svfprintf_r+0x250>
 80156ba:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 80156be:	e72b      	b.n	8015518 <_svfprintf_r+0xc0>
 80156c0:	2600      	movs	r6, #0
 80156c2:	210a      	movs	r1, #10
 80156c4:	e7f5      	b.n	80156b2 <_svfprintf_r+0x25a>
 80156c6:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 80156ca:	e7c8      	b.n	801565e <_svfprintf_r+0x206>
 80156cc:	2300      	movs	r3, #0
 80156ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80156d0:	220a      	movs	r2, #10
 80156d2:	9b04      	ldr	r3, [sp, #16]
 80156d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80156d6:	3b30      	subs	r3, #48	@ 0x30
 80156d8:	fb02 3301 	mla	r3, r2, r1, r3
 80156dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80156de:	9b08      	ldr	r3, [sp, #32]
 80156e0:	f813 1b01 	ldrb.w	r1, [r3], #1
 80156e4:	9308      	str	r3, [sp, #32]
 80156e6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80156ea:	2b09      	cmp	r3, #9
 80156ec:	9104      	str	r1, [sp, #16]
 80156ee:	d9f0      	bls.n	80156d2 <_svfprintf_r+0x27a>
 80156f0:	e713      	b.n	801551a <_svfprintf_r+0xc2>
 80156f2:	f045 0508 	orr.w	r5, r5, #8
 80156f6:	e7b2      	b.n	801565e <_svfprintf_r+0x206>
 80156f8:	9b08      	ldr	r3, [sp, #32]
 80156fa:	781b      	ldrb	r3, [r3, #0]
 80156fc:	2b68      	cmp	r3, #104	@ 0x68
 80156fe:	bf01      	itttt	eq
 8015700:	9b08      	ldreq	r3, [sp, #32]
 8015702:	3301      	addeq	r3, #1
 8015704:	9308      	streq	r3, [sp, #32]
 8015706:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 801570a:	bf18      	it	ne
 801570c:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8015710:	e7a5      	b.n	801565e <_svfprintf_r+0x206>
 8015712:	bf00      	nop
 8015714:	f3af 8000 	nop.w
	...
 8015720:	0801aa82 	.word	0x0801aa82
 8015724:	9b08      	ldr	r3, [sp, #32]
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	2b6c      	cmp	r3, #108	@ 0x6c
 801572a:	d105      	bne.n	8015738 <_svfprintf_r+0x2e0>
 801572c:	9b08      	ldr	r3, [sp, #32]
 801572e:	3301      	adds	r3, #1
 8015730:	9308      	str	r3, [sp, #32]
 8015732:	f045 0520 	orr.w	r5, r5, #32
 8015736:	e792      	b.n	801565e <_svfprintf_r+0x206>
 8015738:	f045 0510 	orr.w	r5, r5, #16
 801573c:	e78f      	b.n	801565e <_svfprintf_r+0x206>
 801573e:	463a      	mov	r2, r7
 8015740:	f852 3b04 	ldr.w	r3, [r2], #4
 8015744:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8015748:	2300      	movs	r3, #0
 801574a:	9205      	str	r2, [sp, #20]
 801574c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8015750:	4699      	mov	r9, r3
 8015752:	2601      	movs	r6, #1
 8015754:	930c      	str	r3, [sp, #48]	@ 0x30
 8015756:	4698      	mov	r8, r3
 8015758:	9306      	str	r3, [sp, #24]
 801575a:	461f      	mov	r7, r3
 801575c:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8015760:	e187      	b.n	8015a72 <_svfprintf_r+0x61a>
 8015762:	f045 0510 	orr.w	r5, r5, #16
 8015766:	06ab      	lsls	r3, r5, #26
 8015768:	d514      	bpl.n	8015794 <_svfprintf_r+0x33c>
 801576a:	3707      	adds	r7, #7
 801576c:	f027 0307 	bic.w	r3, r7, #7
 8015770:	461a      	mov	r2, r3
 8015772:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015776:	f852 7b08 	ldr.w	r7, [r2], #8
 801577a:	9205      	str	r2, [sp, #20]
 801577c:	f1b8 0f00 	cmp.w	r8, #0
 8015780:	da06      	bge.n	8015790 <_svfprintf_r+0x338>
 8015782:	427f      	negs	r7, r7
 8015784:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8015788:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 801578c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8015790:	2301      	movs	r3, #1
 8015792:	e33f      	b.n	8015e14 <_svfprintf_r+0x9bc>
 8015794:	463a      	mov	r2, r7
 8015796:	06e8      	lsls	r0, r5, #27
 8015798:	f852 3b04 	ldr.w	r3, [r2], #4
 801579c:	9205      	str	r2, [sp, #20]
 801579e:	d503      	bpl.n	80157a8 <_svfprintf_r+0x350>
 80157a0:	461f      	mov	r7, r3
 80157a2:	ea4f 78e3 	mov.w	r8, r3, asr #31
 80157a6:	e7e9      	b.n	801577c <_svfprintf_r+0x324>
 80157a8:	0669      	lsls	r1, r5, #25
 80157aa:	d503      	bpl.n	80157b4 <_svfprintf_r+0x35c>
 80157ac:	b21f      	sxth	r7, r3
 80157ae:	f343 38c0 	sbfx	r8, r3, #15, #1
 80157b2:	e7e3      	b.n	801577c <_svfprintf_r+0x324>
 80157b4:	05aa      	lsls	r2, r5, #22
 80157b6:	d5f3      	bpl.n	80157a0 <_svfprintf_r+0x348>
 80157b8:	b25f      	sxtb	r7, r3
 80157ba:	f343 18c0 	sbfx	r8, r3, #7, #1
 80157be:	e7dd      	b.n	801577c <_svfprintf_r+0x324>
 80157c0:	3707      	adds	r7, #7
 80157c2:	f027 0307 	bic.w	r3, r7, #7
 80157c6:	ecb3 8b02 	vldmia	r3!, {d8}
 80157ca:	ed9f 7b5f 	vldr	d7, [pc, #380]	@ 8015948 <_svfprintf_r+0x4f0>
 80157ce:	eeb0 6bc8 	vabs.f64	d6, d8
 80157d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80157d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157da:	9305      	str	r3, [sp, #20]
 80157dc:	dd17      	ble.n	801580e <_svfprintf_r+0x3b6>
 80157de:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 80157e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80157e6:	d502      	bpl.n	80157ee <_svfprintf_r+0x396>
 80157e8:	232d      	movs	r3, #45	@ 0x2d
 80157ea:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80157ee:	4a58      	ldr	r2, [pc, #352]	@ (8015950 <_svfprintf_r+0x4f8>)
 80157f0:	4b58      	ldr	r3, [pc, #352]	@ (8015954 <_svfprintf_r+0x4fc>)
 80157f2:	9904      	ldr	r1, [sp, #16]
 80157f4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 80157f8:	2947      	cmp	r1, #71	@ 0x47
 80157fa:	bfcc      	ite	gt
 80157fc:	4692      	movgt	sl, r2
 80157fe:	469a      	movle	sl, r3
 8015800:	f04f 0900 	mov.w	r9, #0
 8015804:	2603      	movs	r6, #3
 8015806:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 801580a:	f000 bfa5 	b.w	8016758 <_svfprintf_r+0x1300>
 801580e:	eeb4 8b48 	vcmp.f64	d8, d8
 8015812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015816:	d709      	bvc.n	801582c <_svfprintf_r+0x3d4>
 8015818:	ee18 3a90 	vmov	r3, s17
 801581c:	2b00      	cmp	r3, #0
 801581e:	bfbc      	itt	lt
 8015820:	232d      	movlt	r3, #45	@ 0x2d
 8015822:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8015826:	4a4c      	ldr	r2, [pc, #304]	@ (8015958 <_svfprintf_r+0x500>)
 8015828:	4b4c      	ldr	r3, [pc, #304]	@ (801595c <_svfprintf_r+0x504>)
 801582a:	e7e2      	b.n	80157f2 <_svfprintf_r+0x39a>
 801582c:	9b04      	ldr	r3, [sp, #16]
 801582e:	2b61      	cmp	r3, #97	@ 0x61
 8015830:	d023      	beq.n	801587a <_svfprintf_r+0x422>
 8015832:	2b41      	cmp	r3, #65	@ 0x41
 8015834:	d123      	bne.n	801587e <_svfprintf_r+0x426>
 8015836:	2358      	movs	r3, #88	@ 0x58
 8015838:	2230      	movs	r2, #48	@ 0x30
 801583a:	2e63      	cmp	r6, #99	@ 0x63
 801583c:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8015840:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8015844:	f045 0502 	orr.w	r5, r5, #2
 8015848:	dd25      	ble.n	8015896 <_svfprintf_r+0x43e>
 801584a:	9802      	ldr	r0, [sp, #8]
 801584c:	1c71      	adds	r1, r6, #1
 801584e:	f7fe fba9 	bl	8013fa4 <_malloc_r>
 8015852:	4682      	mov	sl, r0
 8015854:	2800      	cmp	r0, #0
 8015856:	d168      	bne.n	801592a <_svfprintf_r+0x4d2>
 8015858:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 801585c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8015860:	f8ab 300c 	strh.w	r3, [fp, #12]
 8015864:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8015868:	065b      	lsls	r3, r3, #25
 801586a:	f53f ae19 	bmi.w	80154a0 <_svfprintf_r+0x48>
 801586e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015870:	b04b      	add	sp, #300	@ 0x12c
 8015872:	ecbd 8b04 	vpop	{d8-d9}
 8015876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801587a:	2378      	movs	r3, #120	@ 0x78
 801587c:	e7dc      	b.n	8015838 <_svfprintf_r+0x3e0>
 801587e:	1c77      	adds	r7, r6, #1
 8015880:	d055      	beq.n	801592e <_svfprintf_r+0x4d6>
 8015882:	9b04      	ldr	r3, [sp, #16]
 8015884:	f023 0320 	bic.w	r3, r3, #32
 8015888:	2b47      	cmp	r3, #71	@ 0x47
 801588a:	d101      	bne.n	8015890 <_svfprintf_r+0x438>
 801588c:	2e00      	cmp	r6, #0
 801588e:	d052      	beq.n	8015936 <_svfprintf_r+0x4de>
 8015890:	f04f 0900 	mov.w	r9, #0
 8015894:	e003      	b.n	801589e <_svfprintf_r+0x446>
 8015896:	f04f 0900 	mov.w	r9, #0
 801589a:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 801589e:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 80158a2:	930c      	str	r3, [sp, #48]	@ 0x30
 80158a4:	ee18 3a90 	vmov	r3, s17
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	da47      	bge.n	801593c <_svfprintf_r+0x4e4>
 80158ac:	eeb1 9b48 	vneg.f64	d9, d8
 80158b0:	232d      	movs	r3, #45	@ 0x2d
 80158b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80158b4:	9b04      	ldr	r3, [sp, #16]
 80158b6:	f023 0820 	bic.w	r8, r3, #32
 80158ba:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 80158be:	f040 81b2 	bne.w	8015c26 <_svfprintf_r+0x7ce>
 80158c2:	eeb0 0b49 	vmov.f64	d0, d9
 80158c6:	a818      	add	r0, sp, #96	@ 0x60
 80158c8:	f002 fb62 	bl	8017f90 <frexp>
 80158cc:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 80158d0:	ee20 0b07 	vmul.f64	d0, d0, d7
 80158d4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80158d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80158dc:	bf04      	itt	eq
 80158de:	2301      	moveq	r3, #1
 80158e0:	9318      	streq	r3, [sp, #96]	@ 0x60
 80158e2:	491f      	ldr	r1, [pc, #124]	@ (8015960 <_svfprintf_r+0x508>)
 80158e4:	4b1f      	ldr	r3, [pc, #124]	@ (8015964 <_svfprintf_r+0x50c>)
 80158e6:	9a04      	ldr	r2, [sp, #16]
 80158e8:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 80158ec:	2a61      	cmp	r2, #97	@ 0x61
 80158ee:	bf08      	it	eq
 80158f0:	4619      	moveq	r1, r3
 80158f2:	3e01      	subs	r6, #1
 80158f4:	4653      	mov	r3, sl
 80158f6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80158fa:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 80158fe:	ee16 2a90 	vmov	r2, s13
 8015902:	5c88      	ldrb	r0, [r1, r2]
 8015904:	f803 0b01 	strb.w	r0, [r3], #1
 8015908:	1c70      	adds	r0, r6, #1
 801590a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801590e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8015912:	d029      	beq.n	8015968 <_svfprintf_r+0x510>
 8015914:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8015918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801591c:	f106 32ff 	add.w	r2, r6, #4294967295
 8015920:	d110      	bne.n	8015944 <_svfprintf_r+0x4ec>
 8015922:	461a      	mov	r2, r3
 8015924:	1998      	adds	r0, r3, r6
 8015926:	2730      	movs	r7, #48	@ 0x30
 8015928:	e174      	b.n	8015c14 <_svfprintf_r+0x7bc>
 801592a:	4681      	mov	r9, r0
 801592c:	e7b7      	b.n	801589e <_svfprintf_r+0x446>
 801592e:	f04f 0900 	mov.w	r9, #0
 8015932:	2606      	movs	r6, #6
 8015934:	e7b3      	b.n	801589e <_svfprintf_r+0x446>
 8015936:	46b1      	mov	r9, r6
 8015938:	2601      	movs	r6, #1
 801593a:	e7b0      	b.n	801589e <_svfprintf_r+0x446>
 801593c:	2300      	movs	r3, #0
 801593e:	eeb0 9b48 	vmov.f64	d9, d8
 8015942:	e7b6      	b.n	80158b2 <_svfprintf_r+0x45a>
 8015944:	4616      	mov	r6, r2
 8015946:	e7d6      	b.n	80158f6 <_svfprintf_r+0x49e>
 8015948:	ffffffff 	.word	0xffffffff
 801594c:	7fefffff 	.word	0x7fefffff
 8015950:	0801aa76 	.word	0x0801aa76
 8015954:	0801aa72 	.word	0x0801aa72
 8015958:	0801aa7e 	.word	0x0801aa7e
 801595c:	0801aa7a 	.word	0x0801aa7a
 8015960:	0801aa93 	.word	0x0801aa93
 8015964:	0801aa82 	.word	0x0801aa82
 8015968:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 801596c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8015970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015974:	dc06      	bgt.n	8015984 <_svfprintf_r+0x52c>
 8015976:	eeb4 0b47 	vcmp.f64	d0, d7
 801597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801597e:	d1d0      	bne.n	8015922 <_svfprintf_r+0x4ca>
 8015980:	07d7      	lsls	r7, r2, #31
 8015982:	d5ce      	bpl.n	8015922 <_svfprintf_r+0x4ca>
 8015984:	7bce      	ldrb	r6, [r1, #15]
 8015986:	931c      	str	r3, [sp, #112]	@ 0x70
 8015988:	2730      	movs	r7, #48	@ 0x30
 801598a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801598c:	1e42      	subs	r2, r0, #1
 801598e:	921c      	str	r2, [sp, #112]	@ 0x70
 8015990:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8015994:	42b2      	cmp	r2, r6
 8015996:	f000 8138 	beq.w	8015c0a <_svfprintf_r+0x7b2>
 801599a:	2a39      	cmp	r2, #57	@ 0x39
 801599c:	bf16      	itet	ne
 801599e:	3201      	addne	r2, #1
 80159a0:	7a8a      	ldrbeq	r2, [r1, #10]
 80159a2:	b2d2      	uxtbne	r2, r2
 80159a4:	f800 2c01 	strb.w	r2, [r0, #-1]
 80159a8:	eba3 030a 	sub.w	r3, r3, sl
 80159ac:	9303      	str	r3, [sp, #12]
 80159ae:	9904      	ldr	r1, [sp, #16]
 80159b0:	f89d 2010 	ldrb.w	r2, [sp, #16]
 80159b4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80159b6:	f021 0120 	bic.w	r1, r1, #32
 80159ba:	2941      	cmp	r1, #65	@ 0x41
 80159bc:	bf08      	it	eq
 80159be:	320f      	addeq	r2, #15
 80159c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80159c4:	bf06      	itte	eq
 80159c6:	b2d2      	uxtbeq	r2, r2
 80159c8:	2101      	moveq	r1, #1
 80159ca:	2100      	movne	r1, #0
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	9318      	str	r3, [sp, #96]	@ 0x60
 80159d0:	bfb8      	it	lt
 80159d2:	f1c0 0301 	rsblt	r3, r0, #1
 80159d6:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 80159da:	bfb4      	ite	lt
 80159dc:	222d      	movlt	r2, #45	@ 0x2d
 80159de:	222b      	movge	r2, #43	@ 0x2b
 80159e0:	2b09      	cmp	r3, #9
 80159e2:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 80159e6:	f340 8186 	ble.w	8015cf6 <_svfprintf_r+0x89e>
 80159ea:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 80159ee:	270a      	movs	r7, #10
 80159f0:	4602      	mov	r2, r0
 80159f2:	fbb3 f6f7 	udiv	r6, r3, r7
 80159f6:	fb07 3116 	mls	r1, r7, r6, r3
 80159fa:	3130      	adds	r1, #48	@ 0x30
 80159fc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8015a00:	4619      	mov	r1, r3
 8015a02:	2963      	cmp	r1, #99	@ 0x63
 8015a04:	f100 30ff 	add.w	r0, r0, #4294967295
 8015a08:	4633      	mov	r3, r6
 8015a0a:	dcf1      	bgt.n	80159f0 <_svfprintf_r+0x598>
 8015a0c:	3330      	adds	r3, #48	@ 0x30
 8015a0e:	1e91      	subs	r1, r2, #2
 8015a10:	f800 3c01 	strb.w	r3, [r0, #-1]
 8015a14:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 8015a18:	460b      	mov	r3, r1
 8015a1a:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8015a1e:	4283      	cmp	r3, r0
 8015a20:	f0c0 8164 	bcc.w	8015cec <_svfprintf_r+0x894>
 8015a24:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 8015a28:	1a9b      	subs	r3, r3, r2
 8015a2a:	4281      	cmp	r1, r0
 8015a2c:	bf88      	it	hi
 8015a2e:	2300      	movhi	r3, #0
 8015a30:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8015a34:	441a      	add	r2, r3
 8015a36:	ab1a      	add	r3, sp, #104	@ 0x68
 8015a38:	1ad3      	subs	r3, r2, r3
 8015a3a:	9311      	str	r3, [sp, #68]	@ 0x44
 8015a3c:	9b03      	ldr	r3, [sp, #12]
 8015a3e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015a40:	2b01      	cmp	r3, #1
 8015a42:	eb03 0602 	add.w	r6, r3, r2
 8015a46:	dc01      	bgt.n	8015a4c <_svfprintf_r+0x5f4>
 8015a48:	07ea      	lsls	r2, r5, #31
 8015a4a:	d501      	bpl.n	8015a50 <_svfprintf_r+0x5f8>
 8015a4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a4e:	441e      	add	r6, r3
 8015a50:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8015a54:	f04f 0800 	mov.w	r8, #0
 8015a58:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8015a5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8015a5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8015a62:	4647      	mov	r7, r8
 8015a64:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a66:	2b00      	cmp	r3, #0
 8015a68:	f040 819d 	bne.w	8015da6 <_svfprintf_r+0x94e>
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8015a70:	930c      	str	r3, [sp, #48]	@ 0x30
 8015a72:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015a74:	42b3      	cmp	r3, r6
 8015a76:	bfb8      	it	lt
 8015a78:	4633      	movlt	r3, r6
 8015a7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8015a7c:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8015a80:	b113      	cbz	r3, 8015a88 <_svfprintf_r+0x630>
 8015a82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015a84:	3301      	adds	r3, #1
 8015a86:	930d      	str	r3, [sp, #52]	@ 0x34
 8015a88:	f015 0302 	ands.w	r3, r5, #2
 8015a8c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8015a8e:	bf1e      	ittt	ne
 8015a90:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8015a92:	3302      	addne	r3, #2
 8015a94:	930d      	strne	r3, [sp, #52]	@ 0x34
 8015a96:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8015a9a:	9314      	str	r3, [sp, #80]	@ 0x50
 8015a9c:	d120      	bne.n	8015ae0 <_svfprintf_r+0x688>
 8015a9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015aa0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015aa2:	1a9b      	subs	r3, r3, r2
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	dd1b      	ble.n	8015ae0 <_svfprintf_r+0x688>
 8015aa8:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8015aac:	49a5      	ldr	r1, [pc, #660]	@ (8015d44 <_svfprintf_r+0x8ec>)
 8015aae:	6021      	str	r1, [r4, #0]
 8015ab0:	2b10      	cmp	r3, #16
 8015ab2:	f102 0201 	add.w	r2, r2, #1
 8015ab6:	f104 0008 	add.w	r0, r4, #8
 8015aba:	f300 82aa 	bgt.w	8016012 <_svfprintf_r+0xbba>
 8015abe:	eb0c 0103 	add.w	r1, ip, r3
 8015ac2:	2a07      	cmp	r2, #7
 8015ac4:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8015ac8:	6063      	str	r3, [r4, #4]
 8015aca:	f340 82b7 	ble.w	801603c <_svfprintf_r+0xbe4>
 8015ace:	9802      	ldr	r0, [sp, #8]
 8015ad0:	aa1e      	add	r2, sp, #120	@ 0x78
 8015ad2:	4659      	mov	r1, fp
 8015ad4:	f002 f87b 	bl	8017bce <__ssprint_r>
 8015ad8:	2800      	cmp	r0, #0
 8015ada:	f040 85e4 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8015ade:	ac21      	add	r4, sp, #132	@ 0x84
 8015ae0:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 8015ae4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015ae6:	b16a      	cbz	r2, 8015b04 <_svfprintf_r+0x6ac>
 8015ae8:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8015aec:	6022      	str	r2, [r4, #0]
 8015aee:	2201      	movs	r2, #1
 8015af0:	4413      	add	r3, r2
 8015af2:	9320      	str	r3, [sp, #128]	@ 0x80
 8015af4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8015af6:	6062      	str	r2, [r4, #4]
 8015af8:	4413      	add	r3, r2
 8015afa:	2b07      	cmp	r3, #7
 8015afc:	931f      	str	r3, [sp, #124]	@ 0x7c
 8015afe:	f300 829f 	bgt.w	8016040 <_svfprintf_r+0xbe8>
 8015b02:	3408      	adds	r4, #8
 8015b04:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8015b06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015b08:	b162      	cbz	r2, 8015b24 <_svfprintf_r+0x6cc>
 8015b0a:	aa17      	add	r2, sp, #92	@ 0x5c
 8015b0c:	6022      	str	r2, [r4, #0]
 8015b0e:	2202      	movs	r2, #2
 8015b10:	4413      	add	r3, r2
 8015b12:	9320      	str	r3, [sp, #128]	@ 0x80
 8015b14:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8015b16:	6062      	str	r2, [r4, #4]
 8015b18:	3301      	adds	r3, #1
 8015b1a:	2b07      	cmp	r3, #7
 8015b1c:	931f      	str	r3, [sp, #124]	@ 0x7c
 8015b1e:	f300 8299 	bgt.w	8016054 <_svfprintf_r+0xbfc>
 8015b22:	3408      	adds	r4, #8
 8015b24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8015b26:	2b80      	cmp	r3, #128	@ 0x80
 8015b28:	d120      	bne.n	8015b6c <_svfprintf_r+0x714>
 8015b2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8015b2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015b2e:	1a9b      	subs	r3, r3, r2
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	dd1b      	ble.n	8015b6c <_svfprintf_r+0x714>
 8015b34:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8015b38:	4983      	ldr	r1, [pc, #524]	@ (8015d48 <_svfprintf_r+0x8f0>)
 8015b3a:	6021      	str	r1, [r4, #0]
 8015b3c:	2b10      	cmp	r3, #16
 8015b3e:	f102 0201 	add.w	r2, r2, #1
 8015b42:	f104 0008 	add.w	r0, r4, #8
 8015b46:	f300 828f 	bgt.w	8016068 <_svfprintf_r+0xc10>
 8015b4a:	eb0c 0103 	add.w	r1, ip, r3
 8015b4e:	2a07      	cmp	r2, #7
 8015b50:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8015b54:	6063      	str	r3, [r4, #4]
 8015b56:	f340 829c 	ble.w	8016092 <_svfprintf_r+0xc3a>
 8015b5a:	9802      	ldr	r0, [sp, #8]
 8015b5c:	aa1e      	add	r2, sp, #120	@ 0x78
 8015b5e:	4659      	mov	r1, fp
 8015b60:	f002 f835 	bl	8017bce <__ssprint_r>
 8015b64:	2800      	cmp	r0, #0
 8015b66:	f040 859e 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8015b6a:	ac21      	add	r4, sp, #132	@ 0x84
 8015b6c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015b6e:	1b9b      	subs	r3, r3, r6
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	930c      	str	r3, [sp, #48]	@ 0x30
 8015b74:	dd1c      	ble.n	8015bb0 <_svfprintf_r+0x758>
 8015b76:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015b78:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8015b7c:	2810      	cmp	r0, #16
 8015b7e:	4872      	ldr	r0, [pc, #456]	@ (8015d48 <_svfprintf_r+0x8f0>)
 8015b80:	6020      	str	r0, [r4, #0]
 8015b82:	f102 0201 	add.w	r2, r2, #1
 8015b86:	f104 0108 	add.w	r1, r4, #8
 8015b8a:	f300 8284 	bgt.w	8016096 <_svfprintf_r+0xc3e>
 8015b8e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8015b90:	6060      	str	r0, [r4, #4]
 8015b92:	4403      	add	r3, r0
 8015b94:	2a07      	cmp	r2, #7
 8015b96:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8015b9a:	f340 8291 	ble.w	80160c0 <_svfprintf_r+0xc68>
 8015b9e:	9802      	ldr	r0, [sp, #8]
 8015ba0:	aa1e      	add	r2, sp, #120	@ 0x78
 8015ba2:	4659      	mov	r1, fp
 8015ba4:	f002 f813 	bl	8017bce <__ssprint_r>
 8015ba8:	2800      	cmp	r0, #0
 8015baa:	f040 857c 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8015bae:	ac21      	add	r4, sp, #132	@ 0x84
 8015bb0:	05e9      	lsls	r1, r5, #23
 8015bb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015bb4:	f100 828a 	bmi.w	80160cc <_svfprintf_r+0xc74>
 8015bb8:	4433      	add	r3, r6
 8015bba:	9320      	str	r3, [sp, #128]	@ 0x80
 8015bbc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8015bbe:	3301      	adds	r3, #1
 8015bc0:	2b07      	cmp	r3, #7
 8015bc2:	e9c4 a600 	strd	sl, r6, [r4]
 8015bc6:	931f      	str	r3, [sp, #124]	@ 0x7c
 8015bc8:	f300 82c2 	bgt.w	8016150 <_svfprintf_r+0xcf8>
 8015bcc:	3408      	adds	r4, #8
 8015bce:	076a      	lsls	r2, r5, #29
 8015bd0:	f100 854b 	bmi.w	801666a <_svfprintf_r+0x1212>
 8015bd4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015bd8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8015bda:	428a      	cmp	r2, r1
 8015bdc:	bfac      	ite	ge
 8015bde:	189b      	addge	r3, r3, r2
 8015be0:	185b      	addlt	r3, r3, r1
 8015be2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015be4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8015be6:	b13b      	cbz	r3, 8015bf8 <_svfprintf_r+0x7a0>
 8015be8:	9802      	ldr	r0, [sp, #8]
 8015bea:	aa1e      	add	r2, sp, #120	@ 0x78
 8015bec:	4659      	mov	r1, fp
 8015bee:	f001 ffee 	bl	8017bce <__ssprint_r>
 8015bf2:	2800      	cmp	r0, #0
 8015bf4:	f040 8557 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8015bf8:	2300      	movs	r3, #0
 8015bfa:	931f      	str	r3, [sp, #124]	@ 0x7c
 8015bfc:	f1b9 0f00 	cmp.w	r9, #0
 8015c00:	f040 856d 	bne.w	80166de <_svfprintf_r+0x1286>
 8015c04:	9f05      	ldr	r7, [sp, #20]
 8015c06:	ac21      	add	r4, sp, #132	@ 0x84
 8015c08:	e0da      	b.n	8015dc0 <_svfprintf_r+0x968>
 8015c0a:	f800 7c01 	strb.w	r7, [r0, #-1]
 8015c0e:	e6bc      	b.n	801598a <_svfprintf_r+0x532>
 8015c10:	f802 7b01 	strb.w	r7, [r2], #1
 8015c14:	1a81      	subs	r1, r0, r2
 8015c16:	2900      	cmp	r1, #0
 8015c18:	dafa      	bge.n	8015c10 <_svfprintf_r+0x7b8>
 8015c1a:	1c72      	adds	r2, r6, #1
 8015c1c:	3601      	adds	r6, #1
 8015c1e:	bfb8      	it	lt
 8015c20:	2200      	movlt	r2, #0
 8015c22:	4413      	add	r3, r2
 8015c24:	e6c0      	b.n	80159a8 <_svfprintf_r+0x550>
 8015c26:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015c2a:	d005      	beq.n	8015c38 <_svfprintf_r+0x7e0>
 8015c2c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8015c30:	d12f      	bne.n	8015c92 <_svfprintf_r+0x83a>
 8015c32:	1c77      	adds	r7, r6, #1
 8015c34:	2102      	movs	r1, #2
 8015c36:	e001      	b.n	8015c3c <_svfprintf_r+0x7e4>
 8015c38:	4637      	mov	r7, r6
 8015c3a:	2103      	movs	r1, #3
 8015c3c:	ab1c      	add	r3, sp, #112	@ 0x70
 8015c3e:	9301      	str	r3, [sp, #4]
 8015c40:	ab19      	add	r3, sp, #100	@ 0x64
 8015c42:	9300      	str	r3, [sp, #0]
 8015c44:	9802      	ldr	r0, [sp, #8]
 8015c46:	eeb0 0b49 	vmov.f64	d0, d9
 8015c4a:	ab18      	add	r3, sp, #96	@ 0x60
 8015c4c:	463a      	mov	r2, r7
 8015c4e:	f002 fa9b 	bl	8018188 <_dtoa_r>
 8015c52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015c56:	4682      	mov	sl, r0
 8015c58:	d12d      	bne.n	8015cb6 <_svfprintf_r+0x85e>
 8015c5a:	07e8      	lsls	r0, r5, #31
 8015c5c:	d41b      	bmi.n	8015c96 <_svfprintf_r+0x83e>
 8015c5e:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8015c60:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8015c62:	eba3 030a 	sub.w	r3, r3, sl
 8015c66:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8015c6a:	9303      	str	r3, [sp, #12]
 8015c6c:	d036      	beq.n	8015cdc <_svfprintf_r+0x884>
 8015c6e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015c72:	f47f ae9c 	bne.w	80159ae <_svfprintf_r+0x556>
 8015c76:	f005 0301 	and.w	r3, r5, #1
 8015c7a:	2f00      	cmp	r7, #0
 8015c7c:	ea43 0306 	orr.w	r3, r3, r6
 8015c80:	dd53      	ble.n	8015d2a <_svfprintf_r+0x8d2>
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d05b      	beq.n	8015d3e <_svfprintf_r+0x8e6>
 8015c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015c88:	18fb      	adds	r3, r7, r3
 8015c8a:	441e      	add	r6, r3
 8015c8c:	2366      	movs	r3, #102	@ 0x66
 8015c8e:	9304      	str	r3, [sp, #16]
 8015c90:	e05f      	b.n	8015d52 <_svfprintf_r+0x8fa>
 8015c92:	4637      	mov	r7, r6
 8015c94:	e7ce      	b.n	8015c34 <_svfprintf_r+0x7dc>
 8015c96:	eb0a 0307 	add.w	r3, sl, r7
 8015c9a:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8015c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015ca2:	bf08      	it	eq
 8015ca4:	931c      	streq	r3, [sp, #112]	@ 0x70
 8015ca6:	2130      	movs	r1, #48	@ 0x30
 8015ca8:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015caa:	4293      	cmp	r3, r2
 8015cac:	d9d7      	bls.n	8015c5e <_svfprintf_r+0x806>
 8015cae:	1c50      	adds	r0, r2, #1
 8015cb0:	901c      	str	r0, [sp, #112]	@ 0x70
 8015cb2:	7011      	strb	r1, [r2, #0]
 8015cb4:	e7f8      	b.n	8015ca8 <_svfprintf_r+0x850>
 8015cb6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8015cba:	eb00 0307 	add.w	r3, r0, r7
 8015cbe:	d1ec      	bne.n	8015c9a <_svfprintf_r+0x842>
 8015cc0:	7802      	ldrb	r2, [r0, #0]
 8015cc2:	2a30      	cmp	r2, #48	@ 0x30
 8015cc4:	d107      	bne.n	8015cd6 <_svfprintf_r+0x87e>
 8015cc6:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8015cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015cce:	bf1c      	itt	ne
 8015cd0:	f1c7 0701 	rsbne	r7, r7, #1
 8015cd4:	9718      	strne	r7, [sp, #96]	@ 0x60
 8015cd6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8015cd8:	4413      	add	r3, r2
 8015cda:	e7de      	b.n	8015c9a <_svfprintf_r+0x842>
 8015cdc:	1cf9      	adds	r1, r7, #3
 8015cde:	db01      	blt.n	8015ce4 <_svfprintf_r+0x88c>
 8015ce0:	42be      	cmp	r6, r7
 8015ce2:	da15      	bge.n	8015d10 <_svfprintf_r+0x8b8>
 8015ce4:	9b04      	ldr	r3, [sp, #16]
 8015ce6:	3b02      	subs	r3, #2
 8015ce8:	9304      	str	r3, [sp, #16]
 8015cea:	e660      	b.n	80159ae <_svfprintf_r+0x556>
 8015cec:	f813 7b01 	ldrb.w	r7, [r3], #1
 8015cf0:	f806 7f01 	strb.w	r7, [r6, #1]!
 8015cf4:	e693      	b.n	8015a1e <_svfprintf_r+0x5c6>
 8015cf6:	b941      	cbnz	r1, 8015d0a <_svfprintf_r+0x8b2>
 8015cf8:	2230      	movs	r2, #48	@ 0x30
 8015cfa:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 8015cfe:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 8015d02:	3330      	adds	r3, #48	@ 0x30
 8015d04:	f802 3b01 	strb.w	r3, [r2], #1
 8015d08:	e695      	b.n	8015a36 <_svfprintf_r+0x5de>
 8015d0a:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8015d0e:	e7f8      	b.n	8015d02 <_svfprintf_r+0x8aa>
 8015d10:	9b03      	ldr	r3, [sp, #12]
 8015d12:	42bb      	cmp	r3, r7
 8015d14:	dd0d      	ble.n	8015d32 <_svfprintf_r+0x8da>
 8015d16:	9b03      	ldr	r3, [sp, #12]
 8015d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8015d1a:	2f00      	cmp	r7, #0
 8015d1c:	eb03 0602 	add.w	r6, r3, r2
 8015d20:	dc0b      	bgt.n	8015d3a <_svfprintf_r+0x8e2>
 8015d22:	f1c7 0301 	rsb	r3, r7, #1
 8015d26:	441e      	add	r6, r3
 8015d28:	e007      	b.n	8015d3a <_svfprintf_r+0x8e2>
 8015d2a:	b17b      	cbz	r3, 8015d4c <_svfprintf_r+0x8f4>
 8015d2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d2e:	3301      	adds	r3, #1
 8015d30:	e7ab      	b.n	8015c8a <_svfprintf_r+0x832>
 8015d32:	07eb      	lsls	r3, r5, #31
 8015d34:	d522      	bpl.n	8015d7c <_svfprintf_r+0x924>
 8015d36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015d38:	18fe      	adds	r6, r7, r3
 8015d3a:	2367      	movs	r3, #103	@ 0x67
 8015d3c:	e7a7      	b.n	8015c8e <_svfprintf_r+0x836>
 8015d3e:	463e      	mov	r6, r7
 8015d40:	e7a4      	b.n	8015c8c <_svfprintf_r+0x834>
 8015d42:	bf00      	nop
 8015d44:	0801abcb 	.word	0x0801abcb
 8015d48:	0801abbb 	.word	0x0801abbb
 8015d4c:	2366      	movs	r3, #102	@ 0x66
 8015d4e:	9304      	str	r3, [sp, #16]
 8015d50:	2601      	movs	r6, #1
 8015d52:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 8015d56:	9306      	str	r3, [sp, #24]
 8015d58:	d022      	beq.n	8015da0 <_svfprintf_r+0x948>
 8015d5a:	f04f 0800 	mov.w	r8, #0
 8015d5e:	2f00      	cmp	r7, #0
 8015d60:	f8cd 8018 	str.w	r8, [sp, #24]
 8015d64:	f77f ae7e 	ble.w	8015a64 <_svfprintf_r+0x60c>
 8015d68:	9b07      	ldr	r3, [sp, #28]
 8015d6a:	781b      	ldrb	r3, [r3, #0]
 8015d6c:	2bff      	cmp	r3, #255	@ 0xff
 8015d6e:	d107      	bne.n	8015d80 <_svfprintf_r+0x928>
 8015d70:	9b06      	ldr	r3, [sp, #24]
 8015d72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d74:	4443      	add	r3, r8
 8015d76:	fb02 6603 	mla	r6, r2, r3, r6
 8015d7a:	e673      	b.n	8015a64 <_svfprintf_r+0x60c>
 8015d7c:	463e      	mov	r6, r7
 8015d7e:	e7dc      	b.n	8015d3a <_svfprintf_r+0x8e2>
 8015d80:	42bb      	cmp	r3, r7
 8015d82:	daf5      	bge.n	8015d70 <_svfprintf_r+0x918>
 8015d84:	1aff      	subs	r7, r7, r3
 8015d86:	9b07      	ldr	r3, [sp, #28]
 8015d88:	785b      	ldrb	r3, [r3, #1]
 8015d8a:	b133      	cbz	r3, 8015d9a <_svfprintf_r+0x942>
 8015d8c:	9b06      	ldr	r3, [sp, #24]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	9306      	str	r3, [sp, #24]
 8015d92:	9b07      	ldr	r3, [sp, #28]
 8015d94:	3301      	adds	r3, #1
 8015d96:	9307      	str	r3, [sp, #28]
 8015d98:	e7e6      	b.n	8015d68 <_svfprintf_r+0x910>
 8015d9a:	f108 0801 	add.w	r8, r8, #1
 8015d9e:	e7e3      	b.n	8015d68 <_svfprintf_r+0x910>
 8015da0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8015da4:	e65e      	b.n	8015a64 <_svfprintf_r+0x60c>
 8015da6:	232d      	movs	r3, #45	@ 0x2d
 8015da8:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8015dac:	e65e      	b.n	8015a6c <_svfprintf_r+0x614>
 8015dae:	06ae      	lsls	r6, r5, #26
 8015db0:	d50a      	bpl.n	8015dc8 <_svfprintf_r+0x970>
 8015db2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015db4:	683b      	ldr	r3, [r7, #0]
 8015db6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8015db8:	17d2      	asrs	r2, r2, #31
 8015dba:	e9c3 1200 	strd	r1, r2, [r3]
 8015dbe:	3704      	adds	r7, #4
 8015dc0:	f8dd a020 	ldr.w	sl, [sp, #32]
 8015dc4:	f7ff bb81 	b.w	80154ca <_svfprintf_r+0x72>
 8015dc8:	06e8      	lsls	r0, r5, #27
 8015dca:	d503      	bpl.n	8015dd4 <_svfprintf_r+0x97c>
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015dd0:	601a      	str	r2, [r3, #0]
 8015dd2:	e7f4      	b.n	8015dbe <_svfprintf_r+0x966>
 8015dd4:	0669      	lsls	r1, r5, #25
 8015dd6:	d503      	bpl.n	8015de0 <_svfprintf_r+0x988>
 8015dd8:	683b      	ldr	r3, [r7, #0]
 8015dda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015ddc:	801a      	strh	r2, [r3, #0]
 8015dde:	e7ee      	b.n	8015dbe <_svfprintf_r+0x966>
 8015de0:	05aa      	lsls	r2, r5, #22
 8015de2:	d5f3      	bpl.n	8015dcc <_svfprintf_r+0x974>
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015de8:	701a      	strb	r2, [r3, #0]
 8015dea:	e7e8      	b.n	8015dbe <_svfprintf_r+0x966>
 8015dec:	f045 0510 	orr.w	r5, r5, #16
 8015df0:	f015 0320 	ands.w	r3, r5, #32
 8015df4:	d01f      	beq.n	8015e36 <_svfprintf_r+0x9de>
 8015df6:	3707      	adds	r7, #7
 8015df8:	f027 0307 	bic.w	r3, r7, #7
 8015dfc:	461a      	mov	r2, r3
 8015dfe:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015e02:	f852 7b08 	ldr.w	r7, [r2], #8
 8015e06:	9205      	str	r2, [sp, #20]
 8015e08:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	2200      	movs	r2, #0
 8015e10:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 8015e14:	2e00      	cmp	r6, #0
 8015e16:	f2c0 8473 	blt.w	8016700 <_svfprintf_r+0x12a8>
 8015e1a:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 8015e1e:	9206      	str	r2, [sp, #24]
 8015e20:	ea57 0208 	orrs.w	r2, r7, r8
 8015e24:	f040 8471 	bne.w	801670a <_svfprintf_r+0x12b2>
 8015e28:	2e00      	cmp	r6, #0
 8015e2a:	f000 80de 	beq.w	8015fea <_svfprintf_r+0xb92>
 8015e2e:	2b01      	cmp	r3, #1
 8015e30:	f040 846e 	bne.w	8016710 <_svfprintf_r+0x12b8>
 8015e34:	e083      	b.n	8015f3e <_svfprintf_r+0xae6>
 8015e36:	463a      	mov	r2, r7
 8015e38:	f015 0810 	ands.w	r8, r5, #16
 8015e3c:	f852 7b04 	ldr.w	r7, [r2], #4
 8015e40:	9205      	str	r2, [sp, #20]
 8015e42:	d001      	beq.n	8015e48 <_svfprintf_r+0x9f0>
 8015e44:	4698      	mov	r8, r3
 8015e46:	e7df      	b.n	8015e08 <_svfprintf_r+0x9b0>
 8015e48:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8015e4c:	d001      	beq.n	8015e52 <_svfprintf_r+0x9fa>
 8015e4e:	b2bf      	uxth	r7, r7
 8015e50:	e7da      	b.n	8015e08 <_svfprintf_r+0x9b0>
 8015e52:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8015e56:	d0d7      	beq.n	8015e08 <_svfprintf_r+0x9b0>
 8015e58:	b2ff      	uxtb	r7, r7
 8015e5a:	e7f3      	b.n	8015e44 <_svfprintf_r+0x9ec>
 8015e5c:	463b      	mov	r3, r7
 8015e5e:	2278      	movs	r2, #120	@ 0x78
 8015e60:	f853 7b04 	ldr.w	r7, [r3], #4
 8015e64:	9305      	str	r3, [sp, #20]
 8015e66:	f647 0330 	movw	r3, #30768	@ 0x7830
 8015e6a:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 8015e6e:	4b95      	ldr	r3, [pc, #596]	@ (80160c4 <_svfprintf_r+0xc6c>)
 8015e70:	9312      	str	r3, [sp, #72]	@ 0x48
 8015e72:	f04f 0800 	mov.w	r8, #0
 8015e76:	f045 0502 	orr.w	r5, r5, #2
 8015e7a:	2302      	movs	r3, #2
 8015e7c:	9204      	str	r2, [sp, #16]
 8015e7e:	e7c6      	b.n	8015e0e <_svfprintf_r+0x9b6>
 8015e80:	463b      	mov	r3, r7
 8015e82:	2700      	movs	r7, #0
 8015e84:	f853 ab04 	ldr.w	sl, [r3], #4
 8015e88:	9305      	str	r3, [sp, #20]
 8015e8a:	42be      	cmp	r6, r7
 8015e8c:	f88d 705b 	strb.w	r7, [sp, #91]	@ 0x5b
 8015e90:	db0f      	blt.n	8015eb2 <_svfprintf_r+0xa5a>
 8015e92:	4632      	mov	r2, r6
 8015e94:	4639      	mov	r1, r7
 8015e96:	4650      	mov	r0, sl
 8015e98:	f7ea f9d2 	bl	8000240 <memchr>
 8015e9c:	4681      	mov	r9, r0
 8015e9e:	2800      	cmp	r0, #0
 8015ea0:	f43f acb1 	beq.w	8015806 <_svfprintf_r+0x3ae>
 8015ea4:	eba0 060a 	sub.w	r6, r0, sl
 8015ea8:	46b9      	mov	r9, r7
 8015eaa:	970c      	str	r7, [sp, #48]	@ 0x30
 8015eac:	46b8      	mov	r8, r7
 8015eae:	9706      	str	r7, [sp, #24]
 8015eb0:	e5df      	b.n	8015a72 <_svfprintf_r+0x61a>
 8015eb2:	4650      	mov	r0, sl
 8015eb4:	f7ea fa14 	bl	80002e0 <strlen>
 8015eb8:	46b9      	mov	r9, r7
 8015eba:	4606      	mov	r6, r0
 8015ebc:	e4a3      	b.n	8015806 <_svfprintf_r+0x3ae>
 8015ebe:	f045 0510 	orr.w	r5, r5, #16
 8015ec2:	f015 0320 	ands.w	r3, r5, #32
 8015ec6:	d00a      	beq.n	8015ede <_svfprintf_r+0xa86>
 8015ec8:	3707      	adds	r7, #7
 8015eca:	f027 0307 	bic.w	r3, r7, #7
 8015ece:	461a      	mov	r2, r3
 8015ed0:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8015ed4:	f852 7b08 	ldr.w	r7, [r2], #8
 8015ed8:	9205      	str	r2, [sp, #20]
 8015eda:	2301      	movs	r3, #1
 8015edc:	e797      	b.n	8015e0e <_svfprintf_r+0x9b6>
 8015ede:	463a      	mov	r2, r7
 8015ee0:	f015 0810 	ands.w	r8, r5, #16
 8015ee4:	f852 7b04 	ldr.w	r7, [r2], #4
 8015ee8:	9205      	str	r2, [sp, #20]
 8015eea:	d001      	beq.n	8015ef0 <_svfprintf_r+0xa98>
 8015eec:	4698      	mov	r8, r3
 8015eee:	e7f4      	b.n	8015eda <_svfprintf_r+0xa82>
 8015ef0:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8015ef4:	d001      	beq.n	8015efa <_svfprintf_r+0xaa2>
 8015ef6:	b2bf      	uxth	r7, r7
 8015ef8:	e7ef      	b.n	8015eda <_svfprintf_r+0xa82>
 8015efa:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8015efe:	d0ec      	beq.n	8015eda <_svfprintf_r+0xa82>
 8015f00:	b2ff      	uxtb	r7, r7
 8015f02:	e7f3      	b.n	8015eec <_svfprintf_r+0xa94>
 8015f04:	4b70      	ldr	r3, [pc, #448]	@ (80160c8 <_svfprintf_r+0xc70>)
 8015f06:	f7ff bb75 	b.w	80155f4 <_svfprintf_r+0x19c>
 8015f0a:	463a      	mov	r2, r7
 8015f0c:	f015 0810 	ands.w	r8, r5, #16
 8015f10:	f852 7b04 	ldr.w	r7, [r2], #4
 8015f14:	9205      	str	r2, [sp, #20]
 8015f16:	d002      	beq.n	8015f1e <_svfprintf_r+0xac6>
 8015f18:	4698      	mov	r8, r3
 8015f1a:	f7ff bb79 	b.w	8015610 <_svfprintf_r+0x1b8>
 8015f1e:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 8015f22:	d002      	beq.n	8015f2a <_svfprintf_r+0xad2>
 8015f24:	b2bf      	uxth	r7, r7
 8015f26:	f7ff bb73 	b.w	8015610 <_svfprintf_r+0x1b8>
 8015f2a:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8015f2e:	f43f ab6f 	beq.w	8015610 <_svfprintf_r+0x1b8>
 8015f32:	b2ff      	uxtb	r7, r7
 8015f34:	e7f0      	b.n	8015f18 <_svfprintf_r+0xac0>
 8015f36:	2f0a      	cmp	r7, #10
 8015f38:	f178 0300 	sbcs.w	r3, r8, #0
 8015f3c:	d206      	bcs.n	8015f4c <_svfprintf_r+0xaf4>
 8015f3e:	3730      	adds	r7, #48	@ 0x30
 8015f40:	b2ff      	uxtb	r7, r7
 8015f42:	f88d 7127 	strb.w	r7, [sp, #295]	@ 0x127
 8015f46:	f20d 1a27 	addw	sl, sp, #295	@ 0x127
 8015f4a:	e3fe      	b.n	801674a <_svfprintf_r+0x12f2>
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	9303      	str	r3, [sp, #12]
 8015f50:	9b06      	ldr	r3, [sp, #24]
 8015f52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015f56:	ad4a      	add	r5, sp, #296	@ 0x128
 8015f58:	930c      	str	r3, [sp, #48]	@ 0x30
 8015f5a:	220a      	movs	r2, #10
 8015f5c:	2300      	movs	r3, #0
 8015f5e:	4638      	mov	r0, r7
 8015f60:	4641      	mov	r1, r8
 8015f62:	f7ea f9c5 	bl	80002f0 <__aeabi_uldivmod>
 8015f66:	3230      	adds	r2, #48	@ 0x30
 8015f68:	f805 2c01 	strb.w	r2, [r5, #-1]
 8015f6c:	9a03      	ldr	r2, [sp, #12]
 8015f6e:	3201      	adds	r2, #1
 8015f70:	9203      	str	r2, [sp, #12]
 8015f72:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8015f74:	4603      	mov	r3, r0
 8015f76:	4689      	mov	r9, r1
 8015f78:	f105 3aff 	add.w	sl, r5, #4294967295
 8015f7c:	b30a      	cbz	r2, 8015fc2 <_svfprintf_r+0xb6a>
 8015f7e:	9a07      	ldr	r2, [sp, #28]
 8015f80:	9903      	ldr	r1, [sp, #12]
 8015f82:	7812      	ldrb	r2, [r2, #0]
 8015f84:	4291      	cmp	r1, r2
 8015f86:	d11c      	bne.n	8015fc2 <_svfprintf_r+0xb6a>
 8015f88:	29ff      	cmp	r1, #255	@ 0xff
 8015f8a:	d01a      	beq.n	8015fc2 <_svfprintf_r+0xb6a>
 8015f8c:	2f0a      	cmp	r7, #10
 8015f8e:	f178 0800 	sbcs.w	r8, r8, #0
 8015f92:	f0c0 83da 	bcc.w	801674a <_svfprintf_r+0x12f2>
 8015f96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f98:	9003      	str	r0, [sp, #12]
 8015f9a:	ebaa 0a03 	sub.w	sl, sl, r3
 8015f9e:	461a      	mov	r2, r3
 8015fa0:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8015fa2:	4650      	mov	r0, sl
 8015fa4:	f001 ffa1 	bl	8017eea <strncpy>
 8015fa8:	9b07      	ldr	r3, [sp, #28]
 8015faa:	785a      	ldrb	r2, [r3, #1]
 8015fac:	9b03      	ldr	r3, [sp, #12]
 8015fae:	b11a      	cbz	r2, 8015fb8 <_svfprintf_r+0xb60>
 8015fb0:	9a07      	ldr	r2, [sp, #28]
 8015fb2:	3201      	adds	r2, #1
 8015fb4:	9207      	str	r2, [sp, #28]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	9203      	str	r2, [sp, #12]
 8015fba:	461f      	mov	r7, r3
 8015fbc:	46c8      	mov	r8, r9
 8015fbe:	4655      	mov	r5, sl
 8015fc0:	e7cb      	b.n	8015f5a <_svfprintf_r+0xb02>
 8015fc2:	2f0a      	cmp	r7, #10
 8015fc4:	f178 0800 	sbcs.w	r8, r8, #0
 8015fc8:	d2f7      	bcs.n	8015fba <_svfprintf_r+0xb62>
 8015fca:	e3be      	b.n	801674a <_svfprintf_r+0x12f2>
 8015fcc:	f007 030f 	and.w	r3, r7, #15
 8015fd0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015fd2:	093f      	lsrs	r7, r7, #4
 8015fd4:	5cd3      	ldrb	r3, [r2, r3]
 8015fd6:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8015fda:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 8015fde:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8015fe2:	ea57 0308 	orrs.w	r3, r7, r8
 8015fe6:	d1f1      	bne.n	8015fcc <_svfprintf_r+0xb74>
 8015fe8:	e3af      	b.n	801674a <_svfprintf_r+0x12f2>
 8015fea:	b91b      	cbnz	r3, 8015ff4 <_svfprintf_r+0xb9c>
 8015fec:	07e8      	lsls	r0, r5, #31
 8015fee:	d501      	bpl.n	8015ff4 <_svfprintf_r+0xb9c>
 8015ff0:	2730      	movs	r7, #48	@ 0x30
 8015ff2:	e7a6      	b.n	8015f42 <_svfprintf_r+0xaea>
 8015ff4:	f50d 7a94 	add.w	sl, sp, #296	@ 0x128
 8015ff8:	e3a7      	b.n	801674a <_svfprintf_r+0x12f2>
 8015ffa:	9b04      	ldr	r3, [sp, #16]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	f000 8374 	beq.w	80166ea <_svfprintf_r+0x1292>
 8016002:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8016006:	2300      	movs	r3, #0
 8016008:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 801600c:	9705      	str	r7, [sp, #20]
 801600e:	f7ff bb9f 	b.w	8015750 <_svfprintf_r+0x2f8>
 8016012:	2110      	movs	r1, #16
 8016014:	6061      	str	r1, [r4, #4]
 8016016:	2a07      	cmp	r2, #7
 8016018:	4461      	add	r1, ip
 801601a:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 801601e:	dd0a      	ble.n	8016036 <_svfprintf_r+0xbde>
 8016020:	9802      	ldr	r0, [sp, #8]
 8016022:	9315      	str	r3, [sp, #84]	@ 0x54
 8016024:	aa1e      	add	r2, sp, #120	@ 0x78
 8016026:	4659      	mov	r1, fp
 8016028:	f001 fdd1 	bl	8017bce <__ssprint_r>
 801602c:	2800      	cmp	r0, #0
 801602e:	f040 833a 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016032:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016034:	a821      	add	r0, sp, #132	@ 0x84
 8016036:	3b10      	subs	r3, #16
 8016038:	4604      	mov	r4, r0
 801603a:	e535      	b.n	8015aa8 <_svfprintf_r+0x650>
 801603c:	4604      	mov	r4, r0
 801603e:	e54f      	b.n	8015ae0 <_svfprintf_r+0x688>
 8016040:	9802      	ldr	r0, [sp, #8]
 8016042:	aa1e      	add	r2, sp, #120	@ 0x78
 8016044:	4659      	mov	r1, fp
 8016046:	f001 fdc2 	bl	8017bce <__ssprint_r>
 801604a:	2800      	cmp	r0, #0
 801604c:	f040 832b 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016050:	ac21      	add	r4, sp, #132	@ 0x84
 8016052:	e557      	b.n	8015b04 <_svfprintf_r+0x6ac>
 8016054:	9802      	ldr	r0, [sp, #8]
 8016056:	aa1e      	add	r2, sp, #120	@ 0x78
 8016058:	4659      	mov	r1, fp
 801605a:	f001 fdb8 	bl	8017bce <__ssprint_r>
 801605e:	2800      	cmp	r0, #0
 8016060:	f040 8321 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016064:	ac21      	add	r4, sp, #132	@ 0x84
 8016066:	e55d      	b.n	8015b24 <_svfprintf_r+0x6cc>
 8016068:	2110      	movs	r1, #16
 801606a:	6061      	str	r1, [r4, #4]
 801606c:	2a07      	cmp	r2, #7
 801606e:	4461      	add	r1, ip
 8016070:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8016074:	dd0a      	ble.n	801608c <_svfprintf_r+0xc34>
 8016076:	9802      	ldr	r0, [sp, #8]
 8016078:	9313      	str	r3, [sp, #76]	@ 0x4c
 801607a:	aa1e      	add	r2, sp, #120	@ 0x78
 801607c:	4659      	mov	r1, fp
 801607e:	f001 fda6 	bl	8017bce <__ssprint_r>
 8016082:	2800      	cmp	r0, #0
 8016084:	f040 830f 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016088:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801608a:	a821      	add	r0, sp, #132	@ 0x84
 801608c:	3b10      	subs	r3, #16
 801608e:	4604      	mov	r4, r0
 8016090:	e550      	b.n	8015b34 <_svfprintf_r+0x6dc>
 8016092:	4604      	mov	r4, r0
 8016094:	e56a      	b.n	8015b6c <_svfprintf_r+0x714>
 8016096:	2010      	movs	r0, #16
 8016098:	4403      	add	r3, r0
 801609a:	2a07      	cmp	r2, #7
 801609c:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 80160a0:	6060      	str	r0, [r4, #4]
 80160a2:	dd08      	ble.n	80160b6 <_svfprintf_r+0xc5e>
 80160a4:	9802      	ldr	r0, [sp, #8]
 80160a6:	aa1e      	add	r2, sp, #120	@ 0x78
 80160a8:	4659      	mov	r1, fp
 80160aa:	f001 fd90 	bl	8017bce <__ssprint_r>
 80160ae:	2800      	cmp	r0, #0
 80160b0:	f040 82f9 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80160b4:	a921      	add	r1, sp, #132	@ 0x84
 80160b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80160b8:	3b10      	subs	r3, #16
 80160ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80160bc:	460c      	mov	r4, r1
 80160be:	e55a      	b.n	8015b76 <_svfprintf_r+0x71e>
 80160c0:	460c      	mov	r4, r1
 80160c2:	e575      	b.n	8015bb0 <_svfprintf_r+0x758>
 80160c4:	0801aa82 	.word	0x0801aa82
 80160c8:	0801aa93 	.word	0x0801aa93
 80160cc:	9a04      	ldr	r2, [sp, #16]
 80160ce:	2a65      	cmp	r2, #101	@ 0x65
 80160d0:	f340 823e 	ble.w	8016550 <_svfprintf_r+0x10f8>
 80160d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80160d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80160dc:	d169      	bne.n	80161b2 <_svfprintf_r+0xd5a>
 80160de:	4a72      	ldr	r2, [pc, #456]	@ (80162a8 <_svfprintf_r+0xe50>)
 80160e0:	6022      	str	r2, [r4, #0]
 80160e2:	2201      	movs	r2, #1
 80160e4:	4413      	add	r3, r2
 80160e6:	9320      	str	r3, [sp, #128]	@ 0x80
 80160e8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80160ea:	6062      	str	r2, [r4, #4]
 80160ec:	4413      	add	r3, r2
 80160ee:	2b07      	cmp	r3, #7
 80160f0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80160f2:	dc37      	bgt.n	8016164 <_svfprintf_r+0xd0c>
 80160f4:	3408      	adds	r4, #8
 80160f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80160f8:	9a03      	ldr	r2, [sp, #12]
 80160fa:	4293      	cmp	r3, r2
 80160fc:	db02      	blt.n	8016104 <_svfprintf_r+0xcac>
 80160fe:	07ea      	lsls	r2, r5, #31
 8016100:	f57f ad65 	bpl.w	8015bce <_svfprintf_r+0x776>
 8016104:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016106:	6023      	str	r3, [r4, #0]
 8016108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801610a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801610c:	6063      	str	r3, [r4, #4]
 801610e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016110:	4413      	add	r3, r2
 8016112:	9320      	str	r3, [sp, #128]	@ 0x80
 8016114:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016116:	3301      	adds	r3, #1
 8016118:	2b07      	cmp	r3, #7
 801611a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801611c:	dc2c      	bgt.n	8016178 <_svfprintf_r+0xd20>
 801611e:	3408      	adds	r4, #8
 8016120:	9b03      	ldr	r3, [sp, #12]
 8016122:	1e5e      	subs	r6, r3, #1
 8016124:	2e00      	cmp	r6, #0
 8016126:	f77f ad52 	ble.w	8015bce <_svfprintf_r+0x776>
 801612a:	4f60      	ldr	r7, [pc, #384]	@ (80162ac <_svfprintf_r+0xe54>)
 801612c:	f04f 0810 	mov.w	r8, #16
 8016130:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8016134:	2e10      	cmp	r6, #16
 8016136:	f103 0301 	add.w	r3, r3, #1
 801613a:	f104 0108 	add.w	r1, r4, #8
 801613e:	6027      	str	r7, [r4, #0]
 8016140:	dc24      	bgt.n	801618c <_svfprintf_r+0xd34>
 8016142:	6066      	str	r6, [r4, #4]
 8016144:	2b07      	cmp	r3, #7
 8016146:	4416      	add	r6, r2
 8016148:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 801614c:	f340 828a 	ble.w	8016664 <_svfprintf_r+0x120c>
 8016150:	9802      	ldr	r0, [sp, #8]
 8016152:	aa1e      	add	r2, sp, #120	@ 0x78
 8016154:	4659      	mov	r1, fp
 8016156:	f001 fd3a 	bl	8017bce <__ssprint_r>
 801615a:	2800      	cmp	r0, #0
 801615c:	f040 82a3 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016160:	ac21      	add	r4, sp, #132	@ 0x84
 8016162:	e534      	b.n	8015bce <_svfprintf_r+0x776>
 8016164:	9802      	ldr	r0, [sp, #8]
 8016166:	aa1e      	add	r2, sp, #120	@ 0x78
 8016168:	4659      	mov	r1, fp
 801616a:	f001 fd30 	bl	8017bce <__ssprint_r>
 801616e:	2800      	cmp	r0, #0
 8016170:	f040 8299 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016174:	ac21      	add	r4, sp, #132	@ 0x84
 8016176:	e7be      	b.n	80160f6 <_svfprintf_r+0xc9e>
 8016178:	9802      	ldr	r0, [sp, #8]
 801617a:	aa1e      	add	r2, sp, #120	@ 0x78
 801617c:	4659      	mov	r1, fp
 801617e:	f001 fd26 	bl	8017bce <__ssprint_r>
 8016182:	2800      	cmp	r0, #0
 8016184:	f040 828f 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016188:	ac21      	add	r4, sp, #132	@ 0x84
 801618a:	e7c9      	b.n	8016120 <_svfprintf_r+0xcc8>
 801618c:	3210      	adds	r2, #16
 801618e:	2b07      	cmp	r3, #7
 8016190:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8016194:	f8c4 8004 	str.w	r8, [r4, #4]
 8016198:	dd08      	ble.n	80161ac <_svfprintf_r+0xd54>
 801619a:	9802      	ldr	r0, [sp, #8]
 801619c:	aa1e      	add	r2, sp, #120	@ 0x78
 801619e:	4659      	mov	r1, fp
 80161a0:	f001 fd15 	bl	8017bce <__ssprint_r>
 80161a4:	2800      	cmp	r0, #0
 80161a6:	f040 827e 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80161aa:	a921      	add	r1, sp, #132	@ 0x84
 80161ac:	3e10      	subs	r6, #16
 80161ae:	460c      	mov	r4, r1
 80161b0:	e7be      	b.n	8016130 <_svfprintf_r+0xcd8>
 80161b2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80161b4:	2a00      	cmp	r2, #0
 80161b6:	dc7b      	bgt.n	80162b0 <_svfprintf_r+0xe58>
 80161b8:	4a3b      	ldr	r2, [pc, #236]	@ (80162a8 <_svfprintf_r+0xe50>)
 80161ba:	6022      	str	r2, [r4, #0]
 80161bc:	2201      	movs	r2, #1
 80161be:	4413      	add	r3, r2
 80161c0:	9320      	str	r3, [sp, #128]	@ 0x80
 80161c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80161c4:	6062      	str	r2, [r4, #4]
 80161c6:	4413      	add	r3, r2
 80161c8:	2b07      	cmp	r3, #7
 80161ca:	931f      	str	r3, [sp, #124]	@ 0x7c
 80161cc:	dc46      	bgt.n	801625c <_svfprintf_r+0xe04>
 80161ce:	3408      	adds	r4, #8
 80161d0:	9903      	ldr	r1, [sp, #12]
 80161d2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80161d4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80161d6:	430b      	orrs	r3, r1
 80161d8:	f005 0101 	and.w	r1, r5, #1
 80161dc:	430b      	orrs	r3, r1
 80161de:	f43f acf6 	beq.w	8015bce <_svfprintf_r+0x776>
 80161e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80161e4:	6023      	str	r3, [r4, #0]
 80161e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80161e8:	6063      	str	r3, [r4, #4]
 80161ea:	441a      	add	r2, r3
 80161ec:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80161ee:	9220      	str	r2, [sp, #128]	@ 0x80
 80161f0:	3301      	adds	r3, #1
 80161f2:	2b07      	cmp	r3, #7
 80161f4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80161f6:	dc3b      	bgt.n	8016270 <_svfprintf_r+0xe18>
 80161f8:	f104 0308 	add.w	r3, r4, #8
 80161fc:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 80161fe:	2e00      	cmp	r6, #0
 8016200:	da1b      	bge.n	801623a <_svfprintf_r+0xde2>
 8016202:	4f2a      	ldr	r7, [pc, #168]	@ (80162ac <_svfprintf_r+0xe54>)
 8016204:	4276      	negs	r6, r6
 8016206:	461a      	mov	r2, r3
 8016208:	2410      	movs	r4, #16
 801620a:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 801620e:	2e10      	cmp	r6, #16
 8016210:	f101 0101 	add.w	r1, r1, #1
 8016214:	f103 0308 	add.w	r3, r3, #8
 8016218:	6017      	str	r7, [r2, #0]
 801621a:	dc33      	bgt.n	8016284 <_svfprintf_r+0xe2c>
 801621c:	6056      	str	r6, [r2, #4]
 801621e:	2907      	cmp	r1, #7
 8016220:	4406      	add	r6, r0
 8016222:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 8016226:	dd08      	ble.n	801623a <_svfprintf_r+0xde2>
 8016228:	9802      	ldr	r0, [sp, #8]
 801622a:	aa1e      	add	r2, sp, #120	@ 0x78
 801622c:	4659      	mov	r1, fp
 801622e:	f001 fcce 	bl	8017bce <__ssprint_r>
 8016232:	2800      	cmp	r0, #0
 8016234:	f040 8237 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016238:	ab21      	add	r3, sp, #132	@ 0x84
 801623a:	9a03      	ldr	r2, [sp, #12]
 801623c:	605a      	str	r2, [r3, #4]
 801623e:	9903      	ldr	r1, [sp, #12]
 8016240:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016242:	f8c3 a000 	str.w	sl, [r3]
 8016246:	440a      	add	r2, r1
 8016248:	9220      	str	r2, [sp, #128]	@ 0x80
 801624a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801624c:	3201      	adds	r2, #1
 801624e:	2a07      	cmp	r2, #7
 8016250:	921f      	str	r2, [sp, #124]	@ 0x7c
 8016252:	f73f af7d 	bgt.w	8016150 <_svfprintf_r+0xcf8>
 8016256:	f103 0408 	add.w	r4, r3, #8
 801625a:	e4b8      	b.n	8015bce <_svfprintf_r+0x776>
 801625c:	9802      	ldr	r0, [sp, #8]
 801625e:	aa1e      	add	r2, sp, #120	@ 0x78
 8016260:	4659      	mov	r1, fp
 8016262:	f001 fcb4 	bl	8017bce <__ssprint_r>
 8016266:	2800      	cmp	r0, #0
 8016268:	f040 821d 	bne.w	80166a6 <_svfprintf_r+0x124e>
 801626c:	ac21      	add	r4, sp, #132	@ 0x84
 801626e:	e7af      	b.n	80161d0 <_svfprintf_r+0xd78>
 8016270:	9802      	ldr	r0, [sp, #8]
 8016272:	aa1e      	add	r2, sp, #120	@ 0x78
 8016274:	4659      	mov	r1, fp
 8016276:	f001 fcaa 	bl	8017bce <__ssprint_r>
 801627a:	2800      	cmp	r0, #0
 801627c:	f040 8213 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016280:	ab21      	add	r3, sp, #132	@ 0x84
 8016282:	e7bb      	b.n	80161fc <_svfprintf_r+0xda4>
 8016284:	3010      	adds	r0, #16
 8016286:	2907      	cmp	r1, #7
 8016288:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 801628c:	6054      	str	r4, [r2, #4]
 801628e:	dd08      	ble.n	80162a2 <_svfprintf_r+0xe4a>
 8016290:	9802      	ldr	r0, [sp, #8]
 8016292:	aa1e      	add	r2, sp, #120	@ 0x78
 8016294:	4659      	mov	r1, fp
 8016296:	f001 fc9a 	bl	8017bce <__ssprint_r>
 801629a:	2800      	cmp	r0, #0
 801629c:	f040 8203 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80162a0:	ab21      	add	r3, sp, #132	@ 0x84
 80162a2:	3e10      	subs	r6, #16
 80162a4:	461a      	mov	r2, r3
 80162a6:	e7b0      	b.n	801620a <_svfprintf_r+0xdb2>
 80162a8:	0801aaa4 	.word	0x0801aaa4
 80162ac:	0801abbb 	.word	0x0801abbb
 80162b0:	9a03      	ldr	r2, [sp, #12]
 80162b2:	42ba      	cmp	r2, r7
 80162b4:	bfa8      	it	ge
 80162b6:	463a      	movge	r2, r7
 80162b8:	2a00      	cmp	r2, #0
 80162ba:	4616      	mov	r6, r2
 80162bc:	dd0a      	ble.n	80162d4 <_svfprintf_r+0xe7c>
 80162be:	4413      	add	r3, r2
 80162c0:	9320      	str	r3, [sp, #128]	@ 0x80
 80162c2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80162c4:	3301      	adds	r3, #1
 80162c6:	2b07      	cmp	r3, #7
 80162c8:	e9c4 a200 	strd	sl, r2, [r4]
 80162cc:	931f      	str	r3, [sp, #124]	@ 0x7c
 80162ce:	f300 808c 	bgt.w	80163ea <_svfprintf_r+0xf92>
 80162d2:	3408      	adds	r4, #8
 80162d4:	2e00      	cmp	r6, #0
 80162d6:	bfac      	ite	ge
 80162d8:	1bbe      	subge	r6, r7, r6
 80162da:	463e      	movlt	r6, r7
 80162dc:	2e00      	cmp	r6, #0
 80162de:	dd1a      	ble.n	8016316 <_svfprintf_r+0xebe>
 80162e0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80162e4:	4899      	ldr	r0, [pc, #612]	@ (801654c <_svfprintf_r+0x10f4>)
 80162e6:	6020      	str	r0, [r4, #0]
 80162e8:	2e10      	cmp	r6, #16
 80162ea:	f103 0301 	add.w	r3, r3, #1
 80162ee:	f104 0108 	add.w	r1, r4, #8
 80162f2:	f300 8084 	bgt.w	80163fe <_svfprintf_r+0xfa6>
 80162f6:	6066      	str	r6, [r4, #4]
 80162f8:	2b07      	cmp	r3, #7
 80162fa:	4416      	add	r6, r2
 80162fc:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8016300:	f340 8090 	ble.w	8016424 <_svfprintf_r+0xfcc>
 8016304:	9802      	ldr	r0, [sp, #8]
 8016306:	aa1e      	add	r2, sp, #120	@ 0x78
 8016308:	4659      	mov	r1, fp
 801630a:	f001 fc60 	bl	8017bce <__ssprint_r>
 801630e:	2800      	cmp	r0, #0
 8016310:	f040 81c9 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016314:	ac21      	add	r4, sp, #132	@ 0x84
 8016316:	056b      	lsls	r3, r5, #21
 8016318:	4457      	add	r7, sl
 801631a:	d50c      	bpl.n	8016336 <_svfprintf_r+0xede>
 801631c:	9b06      	ldr	r3, [sp, #24]
 801631e:	2b00      	cmp	r3, #0
 8016320:	f300 8082 	bgt.w	8016428 <_svfprintf_r+0xfd0>
 8016324:	f1b8 0f00 	cmp.w	r8, #0
 8016328:	f300 8081 	bgt.w	801642e <_svfprintf_r+0xfd6>
 801632c:	9b03      	ldr	r3, [sp, #12]
 801632e:	4453      	add	r3, sl
 8016330:	429f      	cmp	r7, r3
 8016332:	bf28      	it	cs
 8016334:	461f      	movcs	r7, r3
 8016336:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016338:	9a03      	ldr	r2, [sp, #12]
 801633a:	4293      	cmp	r3, r2
 801633c:	db01      	blt.n	8016342 <_svfprintf_r+0xeea>
 801633e:	07ee      	lsls	r6, r5, #31
 8016340:	d50e      	bpl.n	8016360 <_svfprintf_r+0xf08>
 8016342:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8016344:	6023      	str	r3, [r4, #0]
 8016346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801634a:	6063      	str	r3, [r4, #4]
 801634c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801634e:	4413      	add	r3, r2
 8016350:	9320      	str	r3, [sp, #128]	@ 0x80
 8016352:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016354:	3301      	adds	r3, #1
 8016356:	2b07      	cmp	r3, #7
 8016358:	931f      	str	r3, [sp, #124]	@ 0x7c
 801635a:	f300 80e3 	bgt.w	8016524 <_svfprintf_r+0x10cc>
 801635e:	3408      	adds	r4, #8
 8016360:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016362:	9a03      	ldr	r2, [sp, #12]
 8016364:	eba2 0803 	sub.w	r8, r2, r3
 8016368:	eb0a 0302 	add.w	r3, sl, r2
 801636c:	1bdb      	subs	r3, r3, r7
 801636e:	4598      	cmp	r8, r3
 8016370:	bfa8      	it	ge
 8016372:	4698      	movge	r8, r3
 8016374:	f1b8 0f00 	cmp.w	r8, #0
 8016378:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801637a:	dd0a      	ble.n	8016392 <_svfprintf_r+0xf3a>
 801637c:	4443      	add	r3, r8
 801637e:	9320      	str	r3, [sp, #128]	@ 0x80
 8016380:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016382:	3301      	adds	r3, #1
 8016384:	2b07      	cmp	r3, #7
 8016386:	e9c4 7800 	strd	r7, r8, [r4]
 801638a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801638c:	f300 80d4 	bgt.w	8016538 <_svfprintf_r+0x10e0>
 8016390:	3408      	adds	r4, #8
 8016392:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8016394:	9b03      	ldr	r3, [sp, #12]
 8016396:	f1b8 0f00 	cmp.w	r8, #0
 801639a:	eba3 0606 	sub.w	r6, r3, r6
 801639e:	bfa8      	it	ge
 80163a0:	eba6 0608 	subge.w	r6, r6, r8
 80163a4:	2e00      	cmp	r6, #0
 80163a6:	f77f ac12 	ble.w	8015bce <_svfprintf_r+0x776>
 80163aa:	4f68      	ldr	r7, [pc, #416]	@ (801654c <_svfprintf_r+0x10f4>)
 80163ac:	f04f 0810 	mov.w	r8, #16
 80163b0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80163b4:	2e10      	cmp	r6, #16
 80163b6:	f103 0301 	add.w	r3, r3, #1
 80163ba:	f104 0108 	add.w	r1, r4, #8
 80163be:	6027      	str	r7, [r4, #0]
 80163c0:	f77f aebf 	ble.w	8016142 <_svfprintf_r+0xcea>
 80163c4:	3210      	adds	r2, #16
 80163c6:	2b07      	cmp	r3, #7
 80163c8:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80163cc:	f8c4 8004 	str.w	r8, [r4, #4]
 80163d0:	dd08      	ble.n	80163e4 <_svfprintf_r+0xf8c>
 80163d2:	9802      	ldr	r0, [sp, #8]
 80163d4:	aa1e      	add	r2, sp, #120	@ 0x78
 80163d6:	4659      	mov	r1, fp
 80163d8:	f001 fbf9 	bl	8017bce <__ssprint_r>
 80163dc:	2800      	cmp	r0, #0
 80163de:	f040 8162 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80163e2:	a921      	add	r1, sp, #132	@ 0x84
 80163e4:	3e10      	subs	r6, #16
 80163e6:	460c      	mov	r4, r1
 80163e8:	e7e2      	b.n	80163b0 <_svfprintf_r+0xf58>
 80163ea:	9802      	ldr	r0, [sp, #8]
 80163ec:	aa1e      	add	r2, sp, #120	@ 0x78
 80163ee:	4659      	mov	r1, fp
 80163f0:	f001 fbed 	bl	8017bce <__ssprint_r>
 80163f4:	2800      	cmp	r0, #0
 80163f6:	f040 8156 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80163fa:	ac21      	add	r4, sp, #132	@ 0x84
 80163fc:	e76a      	b.n	80162d4 <_svfprintf_r+0xe7c>
 80163fe:	2010      	movs	r0, #16
 8016400:	4402      	add	r2, r0
 8016402:	2b07      	cmp	r3, #7
 8016404:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8016408:	6060      	str	r0, [r4, #4]
 801640a:	dd08      	ble.n	801641e <_svfprintf_r+0xfc6>
 801640c:	9802      	ldr	r0, [sp, #8]
 801640e:	aa1e      	add	r2, sp, #120	@ 0x78
 8016410:	4659      	mov	r1, fp
 8016412:	f001 fbdc 	bl	8017bce <__ssprint_r>
 8016416:	2800      	cmp	r0, #0
 8016418:	f040 8145 	bne.w	80166a6 <_svfprintf_r+0x124e>
 801641c:	a921      	add	r1, sp, #132	@ 0x84
 801641e:	3e10      	subs	r6, #16
 8016420:	460c      	mov	r4, r1
 8016422:	e75d      	b.n	80162e0 <_svfprintf_r+0xe88>
 8016424:	460c      	mov	r4, r1
 8016426:	e776      	b.n	8016316 <_svfprintf_r+0xebe>
 8016428:	f1b8 0f00 	cmp.w	r8, #0
 801642c:	dd4a      	ble.n	80164c4 <_svfprintf_r+0x106c>
 801642e:	f108 38ff 	add.w	r8, r8, #4294967295
 8016432:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016434:	6023      	str	r3, [r4, #0]
 8016436:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016438:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801643a:	6063      	str	r3, [r4, #4]
 801643c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801643e:	4413      	add	r3, r2
 8016440:	9320      	str	r3, [sp, #128]	@ 0x80
 8016442:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016444:	3301      	adds	r3, #1
 8016446:	2b07      	cmp	r3, #7
 8016448:	931f      	str	r3, [sp, #124]	@ 0x7c
 801644a:	dc42      	bgt.n	80164d2 <_svfprintf_r+0x107a>
 801644c:	3408      	adds	r4, #8
 801644e:	9b03      	ldr	r3, [sp, #12]
 8016450:	4453      	add	r3, sl
 8016452:	1bda      	subs	r2, r3, r7
 8016454:	9b07      	ldr	r3, [sp, #28]
 8016456:	781b      	ldrb	r3, [r3, #0]
 8016458:	429a      	cmp	r2, r3
 801645a:	bfa8      	it	ge
 801645c:	461a      	movge	r2, r3
 801645e:	2a00      	cmp	r2, #0
 8016460:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016462:	9204      	str	r2, [sp, #16]
 8016464:	dd09      	ble.n	801647a <_svfprintf_r+0x1022>
 8016466:	4413      	add	r3, r2
 8016468:	9320      	str	r3, [sp, #128]	@ 0x80
 801646a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801646c:	3301      	adds	r3, #1
 801646e:	2b07      	cmp	r3, #7
 8016470:	e9c4 7200 	strd	r7, r2, [r4]
 8016474:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016476:	dc36      	bgt.n	80164e6 <_svfprintf_r+0x108e>
 8016478:	3408      	adds	r4, #8
 801647a:	9b07      	ldr	r3, [sp, #28]
 801647c:	781e      	ldrb	r6, [r3, #0]
 801647e:	9b04      	ldr	r3, [sp, #16]
 8016480:	2b00      	cmp	r3, #0
 8016482:	bfa8      	it	ge
 8016484:	1af6      	subge	r6, r6, r3
 8016486:	2e00      	cmp	r6, #0
 8016488:	dd18      	ble.n	80164bc <_svfprintf_r+0x1064>
 801648a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 801648e:	482f      	ldr	r0, [pc, #188]	@ (801654c <_svfprintf_r+0x10f4>)
 8016490:	6020      	str	r0, [r4, #0]
 8016492:	2e10      	cmp	r6, #16
 8016494:	f103 0301 	add.w	r3, r3, #1
 8016498:	f104 0108 	add.w	r1, r4, #8
 801649c:	dc2d      	bgt.n	80164fa <_svfprintf_r+0x10a2>
 801649e:	6066      	str	r6, [r4, #4]
 80164a0:	2b07      	cmp	r3, #7
 80164a2:	4416      	add	r6, r2
 80164a4:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 80164a8:	dd3a      	ble.n	8016520 <_svfprintf_r+0x10c8>
 80164aa:	9802      	ldr	r0, [sp, #8]
 80164ac:	aa1e      	add	r2, sp, #120	@ 0x78
 80164ae:	4659      	mov	r1, fp
 80164b0:	f001 fb8d 	bl	8017bce <__ssprint_r>
 80164b4:	2800      	cmp	r0, #0
 80164b6:	f040 80f6 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80164ba:	ac21      	add	r4, sp, #132	@ 0x84
 80164bc:	9b07      	ldr	r3, [sp, #28]
 80164be:	781b      	ldrb	r3, [r3, #0]
 80164c0:	441f      	add	r7, r3
 80164c2:	e72b      	b.n	801631c <_svfprintf_r+0xec4>
 80164c4:	9b07      	ldr	r3, [sp, #28]
 80164c6:	3b01      	subs	r3, #1
 80164c8:	9307      	str	r3, [sp, #28]
 80164ca:	9b06      	ldr	r3, [sp, #24]
 80164cc:	3b01      	subs	r3, #1
 80164ce:	9306      	str	r3, [sp, #24]
 80164d0:	e7af      	b.n	8016432 <_svfprintf_r+0xfda>
 80164d2:	9802      	ldr	r0, [sp, #8]
 80164d4:	aa1e      	add	r2, sp, #120	@ 0x78
 80164d6:	4659      	mov	r1, fp
 80164d8:	f001 fb79 	bl	8017bce <__ssprint_r>
 80164dc:	2800      	cmp	r0, #0
 80164de:	f040 80e2 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80164e2:	ac21      	add	r4, sp, #132	@ 0x84
 80164e4:	e7b3      	b.n	801644e <_svfprintf_r+0xff6>
 80164e6:	9802      	ldr	r0, [sp, #8]
 80164e8:	aa1e      	add	r2, sp, #120	@ 0x78
 80164ea:	4659      	mov	r1, fp
 80164ec:	f001 fb6f 	bl	8017bce <__ssprint_r>
 80164f0:	2800      	cmp	r0, #0
 80164f2:	f040 80d8 	bne.w	80166a6 <_svfprintf_r+0x124e>
 80164f6:	ac21      	add	r4, sp, #132	@ 0x84
 80164f8:	e7bf      	b.n	801647a <_svfprintf_r+0x1022>
 80164fa:	2010      	movs	r0, #16
 80164fc:	4402      	add	r2, r0
 80164fe:	2b07      	cmp	r3, #7
 8016500:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8016504:	6060      	str	r0, [r4, #4]
 8016506:	dd08      	ble.n	801651a <_svfprintf_r+0x10c2>
 8016508:	9802      	ldr	r0, [sp, #8]
 801650a:	aa1e      	add	r2, sp, #120	@ 0x78
 801650c:	4659      	mov	r1, fp
 801650e:	f001 fb5e 	bl	8017bce <__ssprint_r>
 8016512:	2800      	cmp	r0, #0
 8016514:	f040 80c7 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016518:	a921      	add	r1, sp, #132	@ 0x84
 801651a:	3e10      	subs	r6, #16
 801651c:	460c      	mov	r4, r1
 801651e:	e7b4      	b.n	801648a <_svfprintf_r+0x1032>
 8016520:	460c      	mov	r4, r1
 8016522:	e7cb      	b.n	80164bc <_svfprintf_r+0x1064>
 8016524:	9802      	ldr	r0, [sp, #8]
 8016526:	aa1e      	add	r2, sp, #120	@ 0x78
 8016528:	4659      	mov	r1, fp
 801652a:	f001 fb50 	bl	8017bce <__ssprint_r>
 801652e:	2800      	cmp	r0, #0
 8016530:	f040 80b9 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016534:	ac21      	add	r4, sp, #132	@ 0x84
 8016536:	e713      	b.n	8016360 <_svfprintf_r+0xf08>
 8016538:	9802      	ldr	r0, [sp, #8]
 801653a:	aa1e      	add	r2, sp, #120	@ 0x78
 801653c:	4659      	mov	r1, fp
 801653e:	f001 fb46 	bl	8017bce <__ssprint_r>
 8016542:	2800      	cmp	r0, #0
 8016544:	f040 80af 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016548:	ac21      	add	r4, sp, #132	@ 0x84
 801654a:	e722      	b.n	8016392 <_svfprintf_r+0xf3a>
 801654c:	0801abbb 	.word	0x0801abbb
 8016550:	9803      	ldr	r0, [sp, #12]
 8016552:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8016554:	2801      	cmp	r0, #1
 8016556:	f103 0201 	add.w	r2, r3, #1
 801655a:	f101 0101 	add.w	r1, r1, #1
 801655e:	f104 0308 	add.w	r3, r4, #8
 8016562:	dc01      	bgt.n	8016568 <_svfprintf_r+0x1110>
 8016564:	07e8      	lsls	r0, r5, #31
 8016566:	d572      	bpl.n	801664e <_svfprintf_r+0x11f6>
 8016568:	2001      	movs	r0, #1
 801656a:	2907      	cmp	r1, #7
 801656c:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8016570:	f8c4 a000 	str.w	sl, [r4]
 8016574:	6060      	str	r0, [r4, #4]
 8016576:	dd08      	ble.n	801658a <_svfprintf_r+0x1132>
 8016578:	9802      	ldr	r0, [sp, #8]
 801657a:	aa1e      	add	r2, sp, #120	@ 0x78
 801657c:	4659      	mov	r1, fp
 801657e:	f001 fb26 	bl	8017bce <__ssprint_r>
 8016582:	2800      	cmp	r0, #0
 8016584:	f040 808f 	bne.w	80166a6 <_svfprintf_r+0x124e>
 8016588:	ab21      	add	r3, sp, #132	@ 0x84
 801658a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801658c:	601a      	str	r2, [r3, #0]
 801658e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016590:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016592:	605a      	str	r2, [r3, #4]
 8016594:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016596:	440a      	add	r2, r1
 8016598:	9220      	str	r2, [sp, #128]	@ 0x80
 801659a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801659c:	3201      	adds	r2, #1
 801659e:	2a07      	cmp	r2, #7
 80165a0:	921f      	str	r2, [sp, #124]	@ 0x7c
 80165a2:	dc25      	bgt.n	80165f0 <_svfprintf_r+0x1198>
 80165a4:	3308      	adds	r3, #8
 80165a6:	9803      	ldr	r0, [sp, #12]
 80165a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80165ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165b0:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 80165b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80165b8:	d023      	beq.n	8016602 <_svfprintf_r+0x11aa>
 80165ba:	f10a 0001 	add.w	r0, sl, #1
 80165be:	e9c3 0400 	strd	r0, r4, [r3]
 80165c2:	9803      	ldr	r0, [sp, #12]
 80165c4:	3101      	adds	r1, #1
 80165c6:	3a01      	subs	r2, #1
 80165c8:	4402      	add	r2, r0
 80165ca:	2907      	cmp	r1, #7
 80165cc:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 80165d0:	dd46      	ble.n	8016660 <_svfprintf_r+0x1208>
 80165d2:	9802      	ldr	r0, [sp, #8]
 80165d4:	aa1e      	add	r2, sp, #120	@ 0x78
 80165d6:	4659      	mov	r1, fp
 80165d8:	f001 faf9 	bl	8017bce <__ssprint_r>
 80165dc:	2800      	cmp	r0, #0
 80165de:	d162      	bne.n	80166a6 <_svfprintf_r+0x124e>
 80165e0:	ab21      	add	r3, sp, #132	@ 0x84
 80165e2:	aa1a      	add	r2, sp, #104	@ 0x68
 80165e4:	601a      	str	r2, [r3, #0]
 80165e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80165e8:	605a      	str	r2, [r3, #4]
 80165ea:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80165ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80165ee:	e62a      	b.n	8016246 <_svfprintf_r+0xdee>
 80165f0:	9802      	ldr	r0, [sp, #8]
 80165f2:	aa1e      	add	r2, sp, #120	@ 0x78
 80165f4:	4659      	mov	r1, fp
 80165f6:	f001 faea 	bl	8017bce <__ssprint_r>
 80165fa:	2800      	cmp	r0, #0
 80165fc:	d153      	bne.n	80166a6 <_svfprintf_r+0x124e>
 80165fe:	ab21      	add	r3, sp, #132	@ 0x84
 8016600:	e7d1      	b.n	80165a6 <_svfprintf_r+0x114e>
 8016602:	9a03      	ldr	r2, [sp, #12]
 8016604:	2a01      	cmp	r2, #1
 8016606:	ddec      	ble.n	80165e2 <_svfprintf_r+0x118a>
 8016608:	4e56      	ldr	r6, [pc, #344]	@ (8016764 <_svfprintf_r+0x130c>)
 801660a:	2710      	movs	r7, #16
 801660c:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 8016610:	2c10      	cmp	r4, #16
 8016612:	f102 0201 	add.w	r2, r2, #1
 8016616:	f103 0008 	add.w	r0, r3, #8
 801661a:	601e      	str	r6, [r3, #0]
 801661c:	dc07      	bgt.n	801662e <_svfprintf_r+0x11d6>
 801661e:	605c      	str	r4, [r3, #4]
 8016620:	2a07      	cmp	r2, #7
 8016622:	440c      	add	r4, r1
 8016624:	e9cd 241f 	strd	r2, r4, [sp, #124]	@ 0x7c
 8016628:	dcd3      	bgt.n	80165d2 <_svfprintf_r+0x117a>
 801662a:	4603      	mov	r3, r0
 801662c:	e7d9      	b.n	80165e2 <_svfprintf_r+0x118a>
 801662e:	3110      	adds	r1, #16
 8016630:	2a07      	cmp	r2, #7
 8016632:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8016636:	605f      	str	r7, [r3, #4]
 8016638:	dd06      	ble.n	8016648 <_svfprintf_r+0x11f0>
 801663a:	9802      	ldr	r0, [sp, #8]
 801663c:	aa1e      	add	r2, sp, #120	@ 0x78
 801663e:	4659      	mov	r1, fp
 8016640:	f001 fac5 	bl	8017bce <__ssprint_r>
 8016644:	bb78      	cbnz	r0, 80166a6 <_svfprintf_r+0x124e>
 8016646:	a821      	add	r0, sp, #132	@ 0x84
 8016648:	3c10      	subs	r4, #16
 801664a:	4603      	mov	r3, r0
 801664c:	e7de      	b.n	801660c <_svfprintf_r+0x11b4>
 801664e:	2001      	movs	r0, #1
 8016650:	2907      	cmp	r1, #7
 8016652:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8016656:	f8c4 a000 	str.w	sl, [r4]
 801665a:	6060      	str	r0, [r4, #4]
 801665c:	ddc1      	ble.n	80165e2 <_svfprintf_r+0x118a>
 801665e:	e7b8      	b.n	80165d2 <_svfprintf_r+0x117a>
 8016660:	3308      	adds	r3, #8
 8016662:	e7be      	b.n	80165e2 <_svfprintf_r+0x118a>
 8016664:	460c      	mov	r4, r1
 8016666:	f7ff bab2 	b.w	8015bce <_svfprintf_r+0x776>
 801666a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801666c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801666e:	1a9d      	subs	r5, r3, r2
 8016670:	2d00      	cmp	r5, #0
 8016672:	f77f aaaf 	ble.w	8015bd4 <_svfprintf_r+0x77c>
 8016676:	4e3c      	ldr	r6, [pc, #240]	@ (8016768 <_svfprintf_r+0x1310>)
 8016678:	2710      	movs	r7, #16
 801667a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 801667e:	2d10      	cmp	r5, #16
 8016680:	f103 0301 	add.w	r3, r3, #1
 8016684:	6026      	str	r6, [r4, #0]
 8016686:	dc18      	bgt.n	80166ba <_svfprintf_r+0x1262>
 8016688:	6065      	str	r5, [r4, #4]
 801668a:	2b07      	cmp	r3, #7
 801668c:	4415      	add	r5, r2
 801668e:	e9cd 351f 	strd	r3, r5, [sp, #124]	@ 0x7c
 8016692:	f77f aa9f 	ble.w	8015bd4 <_svfprintf_r+0x77c>
 8016696:	9802      	ldr	r0, [sp, #8]
 8016698:	aa1e      	add	r2, sp, #120	@ 0x78
 801669a:	4659      	mov	r1, fp
 801669c:	f001 fa97 	bl	8017bce <__ssprint_r>
 80166a0:	2800      	cmp	r0, #0
 80166a2:	f43f aa97 	beq.w	8015bd4 <_svfprintf_r+0x77c>
 80166a6:	f1b9 0f00 	cmp.w	r9, #0
 80166aa:	f43f a8db 	beq.w	8015864 <_svfprintf_r+0x40c>
 80166ae:	9802      	ldr	r0, [sp, #8]
 80166b0:	4649      	mov	r1, r9
 80166b2:	f7fe fc67 	bl	8014f84 <_free_r>
 80166b6:	f7ff b8d5 	b.w	8015864 <_svfprintf_r+0x40c>
 80166ba:	3210      	adds	r2, #16
 80166bc:	2b07      	cmp	r3, #7
 80166be:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80166c2:	6067      	str	r7, [r4, #4]
 80166c4:	dc02      	bgt.n	80166cc <_svfprintf_r+0x1274>
 80166c6:	3408      	adds	r4, #8
 80166c8:	3d10      	subs	r5, #16
 80166ca:	e7d6      	b.n	801667a <_svfprintf_r+0x1222>
 80166cc:	9802      	ldr	r0, [sp, #8]
 80166ce:	aa1e      	add	r2, sp, #120	@ 0x78
 80166d0:	4659      	mov	r1, fp
 80166d2:	f001 fa7c 	bl	8017bce <__ssprint_r>
 80166d6:	2800      	cmp	r0, #0
 80166d8:	d1e5      	bne.n	80166a6 <_svfprintf_r+0x124e>
 80166da:	ac21      	add	r4, sp, #132	@ 0x84
 80166dc:	e7f4      	b.n	80166c8 <_svfprintf_r+0x1270>
 80166de:	9802      	ldr	r0, [sp, #8]
 80166e0:	4649      	mov	r1, r9
 80166e2:	f7fe fc4f 	bl	8014f84 <_free_r>
 80166e6:	f7ff ba8d 	b.w	8015c04 <_svfprintf_r+0x7ac>
 80166ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	f43f a8b9 	beq.w	8015864 <_svfprintf_r+0x40c>
 80166f2:	9802      	ldr	r0, [sp, #8]
 80166f4:	aa1e      	add	r2, sp, #120	@ 0x78
 80166f6:	4659      	mov	r1, fp
 80166f8:	f001 fa69 	bl	8017bce <__ssprint_r>
 80166fc:	f7ff b8b2 	b.w	8015864 <_svfprintf_r+0x40c>
 8016700:	ea57 0208 	orrs.w	r2, r7, r8
 8016704:	9506      	str	r5, [sp, #24]
 8016706:	f43f ab92 	beq.w	8015e2e <_svfprintf_r+0x9d6>
 801670a:	2b01      	cmp	r3, #1
 801670c:	f43f ac13 	beq.w	8015f36 <_svfprintf_r+0xade>
 8016710:	2b02      	cmp	r3, #2
 8016712:	f50d 7a94 	add.w	sl, sp, #296	@ 0x128
 8016716:	f43f ac59 	beq.w	8015fcc <_svfprintf_r+0xb74>
 801671a:	f007 0307 	and.w	r3, r7, #7
 801671e:	08ff      	lsrs	r7, r7, #3
 8016720:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 8016724:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8016728:	3330      	adds	r3, #48	@ 0x30
 801672a:	ea57 0108 	orrs.w	r1, r7, r8
 801672e:	4652      	mov	r2, sl
 8016730:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8016734:	d1f1      	bne.n	801671a <_svfprintf_r+0x12c2>
 8016736:	9906      	ldr	r1, [sp, #24]
 8016738:	07cd      	lsls	r5, r1, #31
 801673a:	d506      	bpl.n	801674a <_svfprintf_r+0x12f2>
 801673c:	2b30      	cmp	r3, #48	@ 0x30
 801673e:	d004      	beq.n	801674a <_svfprintf_r+0x12f2>
 8016740:	2330      	movs	r3, #48	@ 0x30
 8016742:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8016746:	f1a2 0a02 	sub.w	sl, r2, #2
 801674a:	ab4a      	add	r3, sp, #296	@ 0x128
 801674c:	9d06      	ldr	r5, [sp, #24]
 801674e:	960c      	str	r6, [sp, #48]	@ 0x30
 8016750:	f04f 0900 	mov.w	r9, #0
 8016754:	eba3 060a 	sub.w	r6, r3, sl
 8016758:	46c8      	mov	r8, r9
 801675a:	f8cd 9018 	str.w	r9, [sp, #24]
 801675e:	464f      	mov	r7, r9
 8016760:	f7ff b987 	b.w	8015a72 <_svfprintf_r+0x61a>
 8016764:	0801abbb 	.word	0x0801abbb
 8016768:	0801abcb 	.word	0x0801abcb
 801676c:	00000000 	.word	0x00000000

08016770 <_vfprintf_r>:
 8016770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016774:	ed2d 8b04 	vpush	{d8-d9}
 8016778:	b0cb      	sub	sp, #300	@ 0x12c
 801677a:	468b      	mov	fp, r1
 801677c:	4692      	mov	sl, r2
 801677e:	461c      	mov	r4, r3
 8016780:	461f      	mov	r7, r3
 8016782:	9002      	str	r0, [sp, #8]
 8016784:	f001 fbc4 	bl	8017f10 <_localeconv_r>
 8016788:	6803      	ldr	r3, [r0, #0]
 801678a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801678c:	4618      	mov	r0, r3
 801678e:	f7e9 fda7 	bl	80002e0 <strlen>
 8016792:	9b02      	ldr	r3, [sp, #8]
 8016794:	9009      	str	r0, [sp, #36]	@ 0x24
 8016796:	b123      	cbz	r3, 80167a2 <_vfprintf_r+0x32>
 8016798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801679a:	b913      	cbnz	r3, 80167a2 <_vfprintf_r+0x32>
 801679c:	9802      	ldr	r0, [sp, #8]
 801679e:	f7fd ff4b 	bl	8014638 <__sinit>
 80167a2:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80167a6:	07dd      	lsls	r5, r3, #31
 80167a8:	d407      	bmi.n	80167ba <_vfprintf_r+0x4a>
 80167aa:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80167ae:	0598      	lsls	r0, r3, #22
 80167b0:	d403      	bmi.n	80167ba <_vfprintf_r+0x4a>
 80167b2:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 80167b6:	f7fe fb5b 	bl	8014e70 <__retarget_lock_acquire_recursive>
 80167ba:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 80167be:	0499      	lsls	r1, r3, #18
 80167c0:	d409      	bmi.n	80167d6 <_vfprintf_r+0x66>
 80167c2:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 80167c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80167ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80167ce:	f8ab 300c 	strh.w	r3, [fp, #12]
 80167d2:	f8cb 2064 	str.w	r2, [fp, #100]	@ 0x64
 80167d6:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 80167da:	049a      	lsls	r2, r3, #18
 80167dc:	d50a      	bpl.n	80167f4 <_vfprintf_r+0x84>
 80167de:	07de      	lsls	r6, r3, #31
 80167e0:	d517      	bpl.n	8016812 <_vfprintf_r+0xa2>
 80167e2:	f04f 33ff 	mov.w	r3, #4294967295
 80167e6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80167e8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80167ea:	b04b      	add	sp, #300	@ 0x12c
 80167ec:	ecbd 8b04 	vpop	{d8-d9}
 80167f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80167f4:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80167f8:	071d      	lsls	r5, r3, #28
 80167fa:	d502      	bpl.n	8016802 <_vfprintf_r+0x92>
 80167fc:	f8db 3010 	ldr.w	r3, [fp, #16]
 8016800:	b983      	cbnz	r3, 8016824 <_vfprintf_r+0xb4>
 8016802:	9802      	ldr	r0, [sp, #8]
 8016804:	4659      	mov	r1, fp
 8016806:	f7fe f9bd 	bl	8014b84 <__swsetup_r>
 801680a:	b158      	cbz	r0, 8016824 <_vfprintf_r+0xb4>
 801680c:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8016810:	e7e5      	b.n	80167de <_vfprintf_r+0x6e>
 8016812:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8016816:	0598      	lsls	r0, r3, #22
 8016818:	d4e3      	bmi.n	80167e2 <_vfprintf_r+0x72>
 801681a:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 801681e:	f7fe fb28 	bl	8014e72 <__retarget_lock_release_recursive>
 8016822:	e7de      	b.n	80167e2 <_vfprintf_r+0x72>
 8016824:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8016828:	f003 021a 	and.w	r2, r3, #26
 801682c:	2a0a      	cmp	r2, #10
 801682e:	d118      	bne.n	8016862 <_vfprintf_r+0xf2>
 8016830:	f9bb 200e 	ldrsh.w	r2, [fp, #14]
 8016834:	2a00      	cmp	r2, #0
 8016836:	db14      	blt.n	8016862 <_vfprintf_r+0xf2>
 8016838:	f8db 2064 	ldr.w	r2, [fp, #100]	@ 0x64
 801683c:	07d1      	lsls	r1, r2, #31
 801683e:	d405      	bmi.n	801684c <_vfprintf_r+0xdc>
 8016840:	059a      	lsls	r2, r3, #22
 8016842:	d403      	bmi.n	801684c <_vfprintf_r+0xdc>
 8016844:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8016848:	f7fe fb13 	bl	8014e72 <__retarget_lock_release_recursive>
 801684c:	9802      	ldr	r0, [sp, #8]
 801684e:	4623      	mov	r3, r4
 8016850:	4652      	mov	r2, sl
 8016852:	4659      	mov	r1, fp
 8016854:	b04b      	add	sp, #300	@ 0x12c
 8016856:	ecbd 8b04 	vpop	{d8-d9}
 801685a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801685e:	f001 b969 	b.w	8017b34 <__sbprintf>
 8016862:	2300      	movs	r3, #0
 8016864:	e9cd 331f 	strd	r3, r3, [sp, #124]	@ 0x7c
 8016868:	ed9f 8b97 	vldr	d8, [pc, #604]	@ 8016ac8 <_vfprintf_r+0x358>
 801686c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
 8016870:	ac21      	add	r4, sp, #132	@ 0x84
 8016872:	941e      	str	r4, [sp, #120]	@ 0x78
 8016874:	9303      	str	r3, [sp, #12]
 8016876:	9307      	str	r3, [sp, #28]
 8016878:	930e      	str	r3, [sp, #56]	@ 0x38
 801687a:	9310      	str	r3, [sp, #64]	@ 0x40
 801687c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801687e:	4653      	mov	r3, sl
 8016880:	461d      	mov	r5, r3
 8016882:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016886:	b10a      	cbz	r2, 801688c <_vfprintf_r+0x11c>
 8016888:	2a25      	cmp	r2, #37	@ 0x25
 801688a:	d1f9      	bne.n	8016880 <_vfprintf_r+0x110>
 801688c:	ebb5 060a 	subs.w	r6, r5, sl
 8016890:	d00d      	beq.n	80168ae <_vfprintf_r+0x13e>
 8016892:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016894:	4433      	add	r3, r6
 8016896:	9320      	str	r3, [sp, #128]	@ 0x80
 8016898:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801689a:	3301      	adds	r3, #1
 801689c:	2b07      	cmp	r3, #7
 801689e:	e9c4 a600 	strd	sl, r6, [r4]
 80168a2:	931f      	str	r3, [sp, #124]	@ 0x7c
 80168a4:	dc75      	bgt.n	8016992 <_vfprintf_r+0x222>
 80168a6:	3408      	adds	r4, #8
 80168a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80168aa:	4433      	add	r3, r6
 80168ac:	930b      	str	r3, [sp, #44]	@ 0x2c
 80168ae:	782b      	ldrb	r3, [r5, #0]
 80168b0:	2b00      	cmp	r3, #0
 80168b2:	f001 80fa 	beq.w	8017aaa <_vfprintf_r+0x133a>
 80168b6:	2200      	movs	r2, #0
 80168b8:	1c6b      	adds	r3, r5, #1
 80168ba:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 80168be:	f04f 36ff 	mov.w	r6, #4294967295
 80168c2:	920a      	str	r2, [sp, #40]	@ 0x28
 80168c4:	4615      	mov	r5, r2
 80168c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80168ca:	9204      	str	r2, [sp, #16]
 80168cc:	9308      	str	r3, [sp, #32]
 80168ce:	9b04      	ldr	r3, [sp, #16]
 80168d0:	3b20      	subs	r3, #32
 80168d2:	2b5a      	cmp	r3, #90	@ 0x5a
 80168d4:	f200 8571 	bhi.w	80173ba <_vfprintf_r+0xc4a>
 80168d8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80168dc:	056f009d 	.word	0x056f009d
 80168e0:	00a5056f 	.word	0x00a5056f
 80168e4:	056f056f 	.word	0x056f056f
 80168e8:	0085056f 	.word	0x0085056f
 80168ec:	056f056f 	.word	0x056f056f
 80168f0:	00b200a8 	.word	0x00b200a8
 80168f4:	00af056f 	.word	0x00af056f
 80168f8:	056f00b4 	.word	0x056f00b4
 80168fc:	00d200cf 	.word	0x00d200cf
 8016900:	00d200d2 	.word	0x00d200d2
 8016904:	00d200d2 	.word	0x00d200d2
 8016908:	00d200d2 	.word	0x00d200d2
 801690c:	00d200d2 	.word	0x00d200d2
 8016910:	056f056f 	.word	0x056f056f
 8016914:	056f056f 	.word	0x056f056f
 8016918:	056f056f 	.word	0x056f056f
 801691c:	014a056f 	.word	0x014a056f
 8016920:	0109056f 	.word	0x0109056f
 8016924:	014a011b 	.word	0x014a011b
 8016928:	014a014a 	.word	0x014a014a
 801692c:	056f056f 	.word	0x056f056f
 8016930:	056f056f 	.word	0x056f056f
 8016934:	056f00e5 	.word	0x056f00e5
 8016938:	0467056f 	.word	0x0467056f
 801693c:	056f056f 	.word	0x056f056f
 8016940:	04b1056f 	.word	0x04b1056f
 8016944:	04d0056f 	.word	0x04d0056f
 8016948:	056f056f 	.word	0x056f056f
 801694c:	056f04f3 	.word	0x056f04f3
 8016950:	056f056f 	.word	0x056f056f
 8016954:	056f056f 	.word	0x056f056f
 8016958:	056f056f 	.word	0x056f056f
 801695c:	014a056f 	.word	0x014a056f
 8016960:	0109056f 	.word	0x0109056f
 8016964:	014a011d 	.word	0x014a011d
 8016968:	014a014a 	.word	0x014a014a
 801696c:	011d00e8 	.word	0x011d00e8
 8016970:	056f0103 	.word	0x056f0103
 8016974:	056f00fc 	.word	0x056f00fc
 8016978:	0469044b 	.word	0x0469044b
 801697c:	0103049f 	.word	0x0103049f
 8016980:	04b1056f 	.word	0x04b1056f
 8016984:	04d2009b 	.word	0x04d2009b
 8016988:	056f056f 	.word	0x056f056f
 801698c:	056f0065 	.word	0x056f0065
 8016990:	009b      	.short	0x009b
 8016992:	9802      	ldr	r0, [sp, #8]
 8016994:	aa1e      	add	r2, sp, #120	@ 0x78
 8016996:	4659      	mov	r1, fp
 8016998:	f001 f90c 	bl	8017bb4 <__sprint_r>
 801699c:	2800      	cmp	r0, #0
 801699e:	f040 8139 	bne.w	8016c14 <_vfprintf_r+0x4a4>
 80169a2:	ac21      	add	r4, sp, #132	@ 0x84
 80169a4:	e780      	b.n	80168a8 <_vfprintf_r+0x138>
 80169a6:	4b4a      	ldr	r3, [pc, #296]	@ (8016ad0 <_vfprintf_r+0x360>)
 80169a8:	9312      	str	r3, [sp, #72]	@ 0x48
 80169aa:	f015 0320 	ands.w	r3, r5, #32
 80169ae:	f000 848b 	beq.w	80172c8 <_vfprintf_r+0xb58>
 80169b2:	3707      	adds	r7, #7
 80169b4:	f027 0307 	bic.w	r3, r7, #7
 80169b8:	461a      	mov	r2, r3
 80169ba:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80169be:	f852 7b08 	ldr.w	r7, [r2], #8
 80169c2:	9205      	str	r2, [sp, #20]
 80169c4:	07eb      	lsls	r3, r5, #31
 80169c6:	d50a      	bpl.n	80169de <_vfprintf_r+0x26e>
 80169c8:	ea57 0308 	orrs.w	r3, r7, r8
 80169cc:	d007      	beq.n	80169de <_vfprintf_r+0x26e>
 80169ce:	2330      	movs	r3, #48	@ 0x30
 80169d0:	f88d 305c 	strb.w	r3, [sp, #92]	@ 0x5c
 80169d4:	9b04      	ldr	r3, [sp, #16]
 80169d6:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 80169da:	f045 0502 	orr.w	r5, r5, #2
 80169de:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80169e2:	2302      	movs	r3, #2
 80169e4:	e3f2      	b.n	80171cc <_vfprintf_r+0xa5c>
 80169e6:	9802      	ldr	r0, [sp, #8]
 80169e8:	f001 fa92 	bl	8017f10 <_localeconv_r>
 80169ec:	6843      	ldr	r3, [r0, #4]
 80169ee:	9310      	str	r3, [sp, #64]	@ 0x40
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7e9 fc75 	bl	80002e0 <strlen>
 80169f6:	900e      	str	r0, [sp, #56]	@ 0x38
 80169f8:	9802      	ldr	r0, [sp, #8]
 80169fa:	f001 fa89 	bl	8017f10 <_localeconv_r>
 80169fe:	6883      	ldr	r3, [r0, #8]
 8016a00:	9307      	str	r3, [sp, #28]
 8016a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a04:	b12b      	cbz	r3, 8016a12 <_vfprintf_r+0x2a2>
 8016a06:	9b07      	ldr	r3, [sp, #28]
 8016a08:	b11b      	cbz	r3, 8016a12 <_vfprintf_r+0x2a2>
 8016a0a:	781b      	ldrb	r3, [r3, #0]
 8016a0c:	b10b      	cbz	r3, 8016a12 <_vfprintf_r+0x2a2>
 8016a0e:	f445 6580 	orr.w	r5, r5, #1024	@ 0x400
 8016a12:	9b08      	ldr	r3, [sp, #32]
 8016a14:	e757      	b.n	80168c6 <_vfprintf_r+0x156>
 8016a16:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8016a1a:	2b00      	cmp	r3, #0
 8016a1c:	d1f9      	bne.n	8016a12 <_vfprintf_r+0x2a2>
 8016a1e:	2320      	movs	r3, #32
 8016a20:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8016a24:	e7f5      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016a26:	f045 0501 	orr.w	r5, r5, #1
 8016a2a:	e7f2      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016a2c:	f857 3b04 	ldr.w	r3, [r7], #4
 8016a30:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a32:	2b00      	cmp	r3, #0
 8016a34:	daed      	bge.n	8016a12 <_vfprintf_r+0x2a2>
 8016a36:	425b      	negs	r3, r3
 8016a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a3a:	f045 0504 	orr.w	r5, r5, #4
 8016a3e:	e7e8      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016a40:	232b      	movs	r3, #43	@ 0x2b
 8016a42:	e7ed      	b.n	8016a20 <_vfprintf_r+0x2b0>
 8016a44:	9b08      	ldr	r3, [sp, #32]
 8016a46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a4a:	9204      	str	r2, [sp, #16]
 8016a4c:	2a2a      	cmp	r2, #42	@ 0x2a
 8016a4e:	d111      	bne.n	8016a74 <_vfprintf_r+0x304>
 8016a50:	f857 6b04 	ldr.w	r6, [r7], #4
 8016a54:	9308      	str	r3, [sp, #32]
 8016a56:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8016a5a:	e7da      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016a5c:	fb01 2606 	mla	r6, r1, r6, r2
 8016a60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a64:	9204      	str	r2, [sp, #16]
 8016a66:	9a04      	ldr	r2, [sp, #16]
 8016a68:	3a30      	subs	r2, #48	@ 0x30
 8016a6a:	2a09      	cmp	r2, #9
 8016a6c:	d9f6      	bls.n	8016a5c <_vfprintf_r+0x2ec>
 8016a6e:	ea46 76e6 	orr.w	r6, r6, r6, asr #31
 8016a72:	e72b      	b.n	80168cc <_vfprintf_r+0x15c>
 8016a74:	2600      	movs	r6, #0
 8016a76:	210a      	movs	r1, #10
 8016a78:	e7f5      	b.n	8016a66 <_vfprintf_r+0x2f6>
 8016a7a:	f045 0580 	orr.w	r5, r5, #128	@ 0x80
 8016a7e:	e7c8      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016a80:	2300      	movs	r3, #0
 8016a82:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a84:	220a      	movs	r2, #10
 8016a86:	9b04      	ldr	r3, [sp, #16]
 8016a88:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8016a8a:	3b30      	subs	r3, #48	@ 0x30
 8016a8c:	fb02 3301 	mla	r3, r2, r1, r3
 8016a90:	930a      	str	r3, [sp, #40]	@ 0x28
 8016a92:	9b08      	ldr	r3, [sp, #32]
 8016a94:	f813 1b01 	ldrb.w	r1, [r3], #1
 8016a98:	9308      	str	r3, [sp, #32]
 8016a9a:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8016a9e:	2b09      	cmp	r3, #9
 8016aa0:	9104      	str	r1, [sp, #16]
 8016aa2:	d9f0      	bls.n	8016a86 <_vfprintf_r+0x316>
 8016aa4:	e713      	b.n	80168ce <_vfprintf_r+0x15e>
 8016aa6:	f045 0508 	orr.w	r5, r5, #8
 8016aaa:	e7b2      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016aac:	9b08      	ldr	r3, [sp, #32]
 8016aae:	781b      	ldrb	r3, [r3, #0]
 8016ab0:	2b68      	cmp	r3, #104	@ 0x68
 8016ab2:	bf01      	itttt	eq
 8016ab4:	9b08      	ldreq	r3, [sp, #32]
 8016ab6:	3301      	addeq	r3, #1
 8016ab8:	9308      	streq	r3, [sp, #32]
 8016aba:	f445 7500 	orreq.w	r5, r5, #512	@ 0x200
 8016abe:	bf18      	it	ne
 8016ac0:	f045 0540 	orrne.w	r5, r5, #64	@ 0x40
 8016ac4:	e7a5      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016ac6:	bf00      	nop
	...
 8016ad0:	0801aa82 	.word	0x0801aa82
 8016ad4:	9b08      	ldr	r3, [sp, #32]
 8016ad6:	781b      	ldrb	r3, [r3, #0]
 8016ad8:	2b6c      	cmp	r3, #108	@ 0x6c
 8016ada:	d105      	bne.n	8016ae8 <_vfprintf_r+0x378>
 8016adc:	9b08      	ldr	r3, [sp, #32]
 8016ade:	3301      	adds	r3, #1
 8016ae0:	9308      	str	r3, [sp, #32]
 8016ae2:	f045 0520 	orr.w	r5, r5, #32
 8016ae6:	e794      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016ae8:	f045 0510 	orr.w	r5, r5, #16
 8016aec:	e791      	b.n	8016a12 <_vfprintf_r+0x2a2>
 8016aee:	463a      	mov	r2, r7
 8016af0:	f852 3b04 	ldr.w	r3, [r2], #4
 8016af4:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 8016af8:	2300      	movs	r3, #0
 8016afa:	9205      	str	r2, [sp, #20]
 8016afc:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8016b00:	4699      	mov	r9, r3
 8016b02:	2601      	movs	r6, #1
 8016b04:	930c      	str	r3, [sp, #48]	@ 0x30
 8016b06:	4698      	mov	r8, r3
 8016b08:	9306      	str	r3, [sp, #24]
 8016b0a:	461f      	mov	r7, r3
 8016b0c:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8016b10:	e18f      	b.n	8016e32 <_vfprintf_r+0x6c2>
 8016b12:	f045 0510 	orr.w	r5, r5, #16
 8016b16:	06ab      	lsls	r3, r5, #26
 8016b18:	d514      	bpl.n	8016b44 <_vfprintf_r+0x3d4>
 8016b1a:	3707      	adds	r7, #7
 8016b1c:	f027 0307 	bic.w	r3, r7, #7
 8016b20:	461a      	mov	r2, r3
 8016b22:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8016b26:	f852 7b08 	ldr.w	r7, [r2], #8
 8016b2a:	9205      	str	r2, [sp, #20]
 8016b2c:	f1b8 0f00 	cmp.w	r8, #0
 8016b30:	da06      	bge.n	8016b40 <_vfprintf_r+0x3d0>
 8016b32:	427f      	negs	r7, r7
 8016b34:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8016b38:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
 8016b3c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8016b40:	2301      	movs	r3, #1
 8016b42:	e346      	b.n	80171d2 <_vfprintf_r+0xa62>
 8016b44:	463a      	mov	r2, r7
 8016b46:	06e8      	lsls	r0, r5, #27
 8016b48:	f852 3b04 	ldr.w	r3, [r2], #4
 8016b4c:	9205      	str	r2, [sp, #20]
 8016b4e:	d503      	bpl.n	8016b58 <_vfprintf_r+0x3e8>
 8016b50:	461f      	mov	r7, r3
 8016b52:	ea4f 78e3 	mov.w	r8, r3, asr #31
 8016b56:	e7e9      	b.n	8016b2c <_vfprintf_r+0x3bc>
 8016b58:	0669      	lsls	r1, r5, #25
 8016b5a:	d503      	bpl.n	8016b64 <_vfprintf_r+0x3f4>
 8016b5c:	b21f      	sxth	r7, r3
 8016b5e:	f343 38c0 	sbfx	r8, r3, #15, #1
 8016b62:	e7e3      	b.n	8016b2c <_vfprintf_r+0x3bc>
 8016b64:	05aa      	lsls	r2, r5, #22
 8016b66:	d5f3      	bpl.n	8016b50 <_vfprintf_r+0x3e0>
 8016b68:	b25f      	sxtb	r7, r3
 8016b6a:	f343 18c0 	sbfx	r8, r3, #7, #1
 8016b6e:	e7dd      	b.n	8016b2c <_vfprintf_r+0x3bc>
 8016b70:	3707      	adds	r7, #7
 8016b72:	f027 0307 	bic.w	r3, r7, #7
 8016b76:	ecb3 8b02 	vldmia	r3!, {d8}
 8016b7a:	ed9f 7b63 	vldr	d7, [pc, #396]	@ 8016d08 <_vfprintf_r+0x598>
 8016b7e:	eeb0 6bc8 	vabs.f64	d6, d8
 8016b82:	eeb4 6b47 	vcmp.f64	d6, d7
 8016b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b8a:	9305      	str	r3, [sp, #20]
 8016b8c:	dd17      	ble.n	8016bbe <_vfprintf_r+0x44e>
 8016b8e:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8016b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016b96:	d502      	bpl.n	8016b9e <_vfprintf_r+0x42e>
 8016b98:	232d      	movs	r3, #45	@ 0x2d
 8016b9a:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8016b9e:	4a5c      	ldr	r2, [pc, #368]	@ (8016d10 <_vfprintf_r+0x5a0>)
 8016ba0:	4b5c      	ldr	r3, [pc, #368]	@ (8016d14 <_vfprintf_r+0x5a4>)
 8016ba2:	9904      	ldr	r1, [sp, #16]
 8016ba4:	f025 0580 	bic.w	r5, r5, #128	@ 0x80
 8016ba8:	2947      	cmp	r1, #71	@ 0x47
 8016baa:	bfcc      	ite	gt
 8016bac:	4692      	movgt	sl, r2
 8016bae:	469a      	movle	sl, r3
 8016bb0:	f04f 0900 	mov.w	r9, #0
 8016bb4:	2603      	movs	r6, #3
 8016bb6:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8016bba:	f000 bfb1 	b.w	8017b20 <_vfprintf_r+0x13b0>
 8016bbe:	eeb4 8b48 	vcmp.f64	d8, d8
 8016bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016bc6:	d709      	bvc.n	8016bdc <_vfprintf_r+0x46c>
 8016bc8:	ee18 3a90 	vmov	r3, s17
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	bfbc      	itt	lt
 8016bd0:	232d      	movlt	r3, #45	@ 0x2d
 8016bd2:	f88d 305b 	strblt.w	r3, [sp, #91]	@ 0x5b
 8016bd6:	4a50      	ldr	r2, [pc, #320]	@ (8016d18 <_vfprintf_r+0x5a8>)
 8016bd8:	4b50      	ldr	r3, [pc, #320]	@ (8016d1c <_vfprintf_r+0x5ac>)
 8016bda:	e7e2      	b.n	8016ba2 <_vfprintf_r+0x432>
 8016bdc:	9b04      	ldr	r3, [sp, #16]
 8016bde:	2b61      	cmp	r3, #97	@ 0x61
 8016be0:	d02a      	beq.n	8016c38 <_vfprintf_r+0x4c8>
 8016be2:	2b41      	cmp	r3, #65	@ 0x41
 8016be4:	d12a      	bne.n	8016c3c <_vfprintf_r+0x4cc>
 8016be6:	2358      	movs	r3, #88	@ 0x58
 8016be8:	2230      	movs	r2, #48	@ 0x30
 8016bea:	2e63      	cmp	r6, #99	@ 0x63
 8016bec:	f88d 205c 	strb.w	r2, [sp, #92]	@ 0x5c
 8016bf0:	f88d 305d 	strb.w	r3, [sp, #93]	@ 0x5d
 8016bf4:	f045 0502 	orr.w	r5, r5, #2
 8016bf8:	dd2c      	ble.n	8016c54 <_vfprintf_r+0x4e4>
 8016bfa:	9802      	ldr	r0, [sp, #8]
 8016bfc:	1c71      	adds	r1, r6, #1
 8016bfe:	f7fd f9d1 	bl	8013fa4 <_malloc_r>
 8016c02:	4682      	mov	sl, r0
 8016c04:	2800      	cmp	r0, #0
 8016c06:	d16f      	bne.n	8016ce8 <_vfprintf_r+0x578>
 8016c08:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8016c0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c10:	f8ab 300c 	strh.w	r3, [fp, #12]
 8016c14:	f8db 3064 	ldr.w	r3, [fp, #100]	@ 0x64
 8016c18:	07d9      	lsls	r1, r3, #31
 8016c1a:	d407      	bmi.n	8016c2c <_vfprintf_r+0x4bc>
 8016c1c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8016c20:	059a      	lsls	r2, r3, #22
 8016c22:	d403      	bmi.n	8016c2c <_vfprintf_r+0x4bc>
 8016c24:	f8db 0058 	ldr.w	r0, [fp, #88]	@ 0x58
 8016c28:	f7fe f923 	bl	8014e72 <__retarget_lock_release_recursive>
 8016c2c:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8016c30:	065b      	lsls	r3, r3, #25
 8016c32:	f57f add9 	bpl.w	80167e8 <_vfprintf_r+0x78>
 8016c36:	e5d4      	b.n	80167e2 <_vfprintf_r+0x72>
 8016c38:	2378      	movs	r3, #120	@ 0x78
 8016c3a:	e7d5      	b.n	8016be8 <_vfprintf_r+0x478>
 8016c3c:	1c77      	adds	r7, r6, #1
 8016c3e:	d055      	beq.n	8016cec <_vfprintf_r+0x57c>
 8016c40:	9b04      	ldr	r3, [sp, #16]
 8016c42:	f023 0320 	bic.w	r3, r3, #32
 8016c46:	2b47      	cmp	r3, #71	@ 0x47
 8016c48:	d101      	bne.n	8016c4e <_vfprintf_r+0x4de>
 8016c4a:	2e00      	cmp	r6, #0
 8016c4c:	d052      	beq.n	8016cf4 <_vfprintf_r+0x584>
 8016c4e:	f04f 0900 	mov.w	r9, #0
 8016c52:	e003      	b.n	8016c5c <_vfprintf_r+0x4ec>
 8016c54:	f04f 0900 	mov.w	r9, #0
 8016c58:	f10d 0ac4 	add.w	sl, sp, #196	@ 0xc4
 8016c5c:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8016c60:	930c      	str	r3, [sp, #48]	@ 0x30
 8016c62:	ee18 3a90 	vmov	r3, s17
 8016c66:	2b00      	cmp	r3, #0
 8016c68:	da47      	bge.n	8016cfa <_vfprintf_r+0x58a>
 8016c6a:	eeb1 9b48 	vneg.f64	d9, d8
 8016c6e:	232d      	movs	r3, #45	@ 0x2d
 8016c70:	930d      	str	r3, [sp, #52]	@ 0x34
 8016c72:	9b04      	ldr	r3, [sp, #16]
 8016c74:	f023 0820 	bic.w	r8, r3, #32
 8016c78:	f1b8 0f41 	cmp.w	r8, #65	@ 0x41
 8016c7c:	f040 81b5 	bne.w	8016fea <_vfprintf_r+0x87a>
 8016c80:	eeb0 0b49 	vmov.f64	d0, d9
 8016c84:	a818      	add	r0, sp, #96	@ 0x60
 8016c86:	f001 f983 	bl	8017f90 <frexp>
 8016c8a:	eeb4 7b00 	vmov.f64	d7, #64	@ 0x3e000000  0.125
 8016c8e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016c92:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c9a:	bf04      	itt	eq
 8016c9c:	2301      	moveq	r3, #1
 8016c9e:	9318      	streq	r3, [sp, #96]	@ 0x60
 8016ca0:	491f      	ldr	r1, [pc, #124]	@ (8016d20 <_vfprintf_r+0x5b0>)
 8016ca2:	4b20      	ldr	r3, [pc, #128]	@ (8016d24 <_vfprintf_r+0x5b4>)
 8016ca4:	9a04      	ldr	r2, [sp, #16]
 8016ca6:	eeb3 7b00 	vmov.f64	d7, #48	@ 0x41800000  16.0
 8016caa:	2a61      	cmp	r2, #97	@ 0x61
 8016cac:	bf08      	it	eq
 8016cae:	4619      	moveq	r1, r3
 8016cb0:	3e01      	subs	r6, #1
 8016cb2:	4653      	mov	r3, sl
 8016cb4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8016cb8:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 8016cbc:	ee16 2a90 	vmov	r2, s13
 8016cc0:	5c88      	ldrb	r0, [r1, r2]
 8016cc2:	f803 0b01 	strb.w	r0, [r3], #1
 8016cc6:	1c70      	adds	r0, r6, #1
 8016cc8:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8016ccc:	ee30 0b46 	vsub.f64	d0, d0, d6
 8016cd0:	d02a      	beq.n	8016d28 <_vfprintf_r+0x5b8>
 8016cd2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8016cd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016cda:	f106 32ff 	add.w	r2, r6, #4294967295
 8016cde:	d110      	bne.n	8016d02 <_vfprintf_r+0x592>
 8016ce0:	461a      	mov	r2, r3
 8016ce2:	1998      	adds	r0, r3, r6
 8016ce4:	2730      	movs	r7, #48	@ 0x30
 8016ce6:	e177      	b.n	8016fd8 <_vfprintf_r+0x868>
 8016ce8:	4681      	mov	r9, r0
 8016cea:	e7b7      	b.n	8016c5c <_vfprintf_r+0x4ec>
 8016cec:	f04f 0900 	mov.w	r9, #0
 8016cf0:	2606      	movs	r6, #6
 8016cf2:	e7b3      	b.n	8016c5c <_vfprintf_r+0x4ec>
 8016cf4:	46b1      	mov	r9, r6
 8016cf6:	2601      	movs	r6, #1
 8016cf8:	e7b0      	b.n	8016c5c <_vfprintf_r+0x4ec>
 8016cfa:	2300      	movs	r3, #0
 8016cfc:	eeb0 9b48 	vmov.f64	d9, d8
 8016d00:	e7b6      	b.n	8016c70 <_vfprintf_r+0x500>
 8016d02:	4616      	mov	r6, r2
 8016d04:	e7d6      	b.n	8016cb4 <_vfprintf_r+0x544>
 8016d06:	bf00      	nop
 8016d08:	ffffffff 	.word	0xffffffff
 8016d0c:	7fefffff 	.word	0x7fefffff
 8016d10:	0801aa76 	.word	0x0801aa76
 8016d14:	0801aa72 	.word	0x0801aa72
 8016d18:	0801aa7e 	.word	0x0801aa7e
 8016d1c:	0801aa7a 	.word	0x0801aa7a
 8016d20:	0801aa93 	.word	0x0801aa93
 8016d24:	0801aa82 	.word	0x0801aa82
 8016d28:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 8016d2c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8016d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d34:	dc06      	bgt.n	8016d44 <_vfprintf_r+0x5d4>
 8016d36:	eeb4 0b47 	vcmp.f64	d0, d7
 8016d3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d3e:	d1cf      	bne.n	8016ce0 <_vfprintf_r+0x570>
 8016d40:	07d7      	lsls	r7, r2, #31
 8016d42:	d5cd      	bpl.n	8016ce0 <_vfprintf_r+0x570>
 8016d44:	7bce      	ldrb	r6, [r1, #15]
 8016d46:	931c      	str	r3, [sp, #112]	@ 0x70
 8016d48:	2730      	movs	r7, #48	@ 0x30
 8016d4a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8016d4c:	1e42      	subs	r2, r0, #1
 8016d4e:	921c      	str	r2, [sp, #112]	@ 0x70
 8016d50:	f810 2c01 	ldrb.w	r2, [r0, #-1]
 8016d54:	42b2      	cmp	r2, r6
 8016d56:	f000 813a 	beq.w	8016fce <_vfprintf_r+0x85e>
 8016d5a:	2a39      	cmp	r2, #57	@ 0x39
 8016d5c:	bf16      	itet	ne
 8016d5e:	3201      	addne	r2, #1
 8016d60:	7a8a      	ldrbeq	r2, [r1, #10]
 8016d62:	b2d2      	uxtbne	r2, r2
 8016d64:	f800 2c01 	strb.w	r2, [r0, #-1]
 8016d68:	eba3 030a 	sub.w	r3, r3, sl
 8016d6c:	9303      	str	r3, [sp, #12]
 8016d6e:	9904      	ldr	r1, [sp, #16]
 8016d70:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8016d74:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8016d76:	f021 0120 	bic.w	r1, r1, #32
 8016d7a:	2941      	cmp	r1, #65	@ 0x41
 8016d7c:	bf08      	it	eq
 8016d7e:	320f      	addeq	r2, #15
 8016d80:	f100 33ff 	add.w	r3, r0, #4294967295
 8016d84:	bf06      	itte	eq
 8016d86:	b2d2      	uxtbeq	r2, r2
 8016d88:	2101      	moveq	r1, #1
 8016d8a:	2100      	movne	r1, #0
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	9318      	str	r3, [sp, #96]	@ 0x60
 8016d90:	bfb8      	it	lt
 8016d92:	f1c0 0301 	rsblt	r3, r0, #1
 8016d96:	f88d 2068 	strb.w	r2, [sp, #104]	@ 0x68
 8016d9a:	bfb4      	ite	lt
 8016d9c:	222d      	movlt	r2, #45	@ 0x2d
 8016d9e:	222b      	movge	r2, #43	@ 0x2b
 8016da0:	2b09      	cmp	r3, #9
 8016da2:	f88d 2069 	strb.w	r2, [sp, #105]	@ 0x69
 8016da6:	f340 8188 	ble.w	80170ba <_vfprintf_r+0x94a>
 8016daa:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8016dae:	270a      	movs	r7, #10
 8016db0:	4602      	mov	r2, r0
 8016db2:	fbb3 f6f7 	udiv	r6, r3, r7
 8016db6:	fb07 3116 	mls	r1, r7, r6, r3
 8016dba:	3130      	adds	r1, #48	@ 0x30
 8016dbc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016dc0:	4619      	mov	r1, r3
 8016dc2:	2963      	cmp	r1, #99	@ 0x63
 8016dc4:	f100 30ff 	add.w	r0, r0, #4294967295
 8016dc8:	4633      	mov	r3, r6
 8016dca:	dcf1      	bgt.n	8016db0 <_vfprintf_r+0x640>
 8016dcc:	3330      	adds	r3, #48	@ 0x30
 8016dce:	1e91      	subs	r1, r2, #2
 8016dd0:	f800 3c01 	strb.w	r3, [r0, #-1]
 8016dd4:	f10d 0669 	add.w	r6, sp, #105	@ 0x69
 8016dd8:	460b      	mov	r3, r1
 8016dda:	f10d 0077 	add.w	r0, sp, #119	@ 0x77
 8016dde:	4283      	cmp	r3, r0
 8016de0:	f0c0 8166 	bcc.w	80170b0 <_vfprintf_r+0x940>
 8016de4:	f10d 0379 	add.w	r3, sp, #121	@ 0x79
 8016de8:	1a9b      	subs	r3, r3, r2
 8016dea:	4281      	cmp	r1, r0
 8016dec:	bf88      	it	hi
 8016dee:	2300      	movhi	r3, #0
 8016df0:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 8016df4:	441a      	add	r2, r3
 8016df6:	ab1a      	add	r3, sp, #104	@ 0x68
 8016df8:	1ad3      	subs	r3, r2, r3
 8016dfa:	9311      	str	r3, [sp, #68]	@ 0x44
 8016dfc:	9b03      	ldr	r3, [sp, #12]
 8016dfe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016e00:	2b01      	cmp	r3, #1
 8016e02:	eb03 0602 	add.w	r6, r3, r2
 8016e06:	dc01      	bgt.n	8016e0c <_vfprintf_r+0x69c>
 8016e08:	07ea      	lsls	r2, r5, #31
 8016e0a:	d501      	bpl.n	8016e10 <_vfprintf_r+0x6a0>
 8016e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016e0e:	441e      	add	r6, r3
 8016e10:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 8016e14:	f04f 0800 	mov.w	r8, #0
 8016e18:	f445 7380 	orr.w	r3, r5, #256	@ 0x100
 8016e1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8016e1e:	f8cd 8018 	str.w	r8, [sp, #24]
 8016e22:	4647      	mov	r7, r8
 8016e24:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	f040 819f 	bne.w	801716a <_vfprintf_r+0x9fa>
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8016e30:	930c      	str	r3, [sp, #48]	@ 0x30
 8016e32:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016e34:	42b3      	cmp	r3, r6
 8016e36:	bfb8      	it	lt
 8016e38:	4633      	movlt	r3, r6
 8016e3a:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e3c:	f89d 305b 	ldrb.w	r3, [sp, #91]	@ 0x5b
 8016e40:	b113      	cbz	r3, 8016e48 <_vfprintf_r+0x6d8>
 8016e42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8016e44:	3301      	adds	r3, #1
 8016e46:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e48:	f015 0302 	ands.w	r3, r5, #2
 8016e4c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8016e4e:	bf1e      	ittt	ne
 8016e50:	9b0d      	ldrne	r3, [sp, #52]	@ 0x34
 8016e52:	3302      	addne	r3, #2
 8016e54:	930d      	strne	r3, [sp, #52]	@ 0x34
 8016e56:	f015 0384 	ands.w	r3, r5, #132	@ 0x84
 8016e5a:	9314      	str	r3, [sp, #80]	@ 0x50
 8016e5c:	d120      	bne.n	8016ea0 <_vfprintf_r+0x730>
 8016e5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016e60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016e62:	1a9b      	subs	r3, r3, r2
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	dd1b      	ble.n	8016ea0 <_vfprintf_r+0x730>
 8016e68:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8016e6c:	49a6      	ldr	r1, [pc, #664]	@ (8017108 <_vfprintf_r+0x998>)
 8016e6e:	6021      	str	r1, [r4, #0]
 8016e70:	2b10      	cmp	r3, #16
 8016e72:	f102 0201 	add.w	r2, r2, #1
 8016e76:	f104 0008 	add.w	r0, r4, #8
 8016e7a:	f300 82aa 	bgt.w	80173d2 <_vfprintf_r+0xc62>
 8016e7e:	eb0c 0103 	add.w	r1, ip, r3
 8016e82:	2a07      	cmp	r2, #7
 8016e84:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8016e88:	6063      	str	r3, [r4, #4]
 8016e8a:	f340 82b7 	ble.w	80173fc <_vfprintf_r+0xc8c>
 8016e8e:	9802      	ldr	r0, [sp, #8]
 8016e90:	aa1e      	add	r2, sp, #120	@ 0x78
 8016e92:	4659      	mov	r1, fp
 8016e94:	f000 fe8e 	bl	8017bb4 <__sprint_r>
 8016e98:	2800      	cmp	r0, #0
 8016e9a:	f040 85e4 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8016e9e:	ac21      	add	r4, sp, #132	@ 0x84
 8016ea0:	f89d 205b 	ldrb.w	r2, [sp, #91]	@ 0x5b
 8016ea4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016ea6:	b16a      	cbz	r2, 8016ec4 <_vfprintf_r+0x754>
 8016ea8:	f10d 025b 	add.w	r2, sp, #91	@ 0x5b
 8016eac:	6022      	str	r2, [r4, #0]
 8016eae:	2201      	movs	r2, #1
 8016eb0:	4413      	add	r3, r2
 8016eb2:	9320      	str	r3, [sp, #128]	@ 0x80
 8016eb4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016eb6:	6062      	str	r2, [r4, #4]
 8016eb8:	4413      	add	r3, r2
 8016eba:	2b07      	cmp	r3, #7
 8016ebc:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016ebe:	f300 829f 	bgt.w	8017400 <_vfprintf_r+0xc90>
 8016ec2:	3408      	adds	r4, #8
 8016ec4:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016ec6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016ec8:	b162      	cbz	r2, 8016ee4 <_vfprintf_r+0x774>
 8016eca:	aa17      	add	r2, sp, #92	@ 0x5c
 8016ecc:	6022      	str	r2, [r4, #0]
 8016ece:	2202      	movs	r2, #2
 8016ed0:	4413      	add	r3, r2
 8016ed2:	9320      	str	r3, [sp, #128]	@ 0x80
 8016ed4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016ed6:	6062      	str	r2, [r4, #4]
 8016ed8:	3301      	adds	r3, #1
 8016eda:	2b07      	cmp	r3, #7
 8016edc:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016ede:	f300 8299 	bgt.w	8017414 <_vfprintf_r+0xca4>
 8016ee2:	3408      	adds	r4, #8
 8016ee4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016ee6:	2b80      	cmp	r3, #128	@ 0x80
 8016ee8:	d120      	bne.n	8016f2c <_vfprintf_r+0x7bc>
 8016eea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016eec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016eee:	1a9b      	subs	r3, r3, r2
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	dd1b      	ble.n	8016f2c <_vfprintf_r+0x7bc>
 8016ef4:	e9dd 2c1f 	ldrd	r2, ip, [sp, #124]	@ 0x7c
 8016ef8:	4984      	ldr	r1, [pc, #528]	@ (801710c <_vfprintf_r+0x99c>)
 8016efa:	6021      	str	r1, [r4, #0]
 8016efc:	2b10      	cmp	r3, #16
 8016efe:	f102 0201 	add.w	r2, r2, #1
 8016f02:	f104 0008 	add.w	r0, r4, #8
 8016f06:	f300 828f 	bgt.w	8017428 <_vfprintf_r+0xcb8>
 8016f0a:	eb0c 0103 	add.w	r1, ip, r3
 8016f0e:	2a07      	cmp	r2, #7
 8016f10:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8016f14:	6063      	str	r3, [r4, #4]
 8016f16:	f340 829c 	ble.w	8017452 <_vfprintf_r+0xce2>
 8016f1a:	9802      	ldr	r0, [sp, #8]
 8016f1c:	aa1e      	add	r2, sp, #120	@ 0x78
 8016f1e:	4659      	mov	r1, fp
 8016f20:	f000 fe48 	bl	8017bb4 <__sprint_r>
 8016f24:	2800      	cmp	r0, #0
 8016f26:	f040 859e 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8016f2a:	ac21      	add	r4, sp, #132	@ 0x84
 8016f2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016f2e:	1b9b      	subs	r3, r3, r6
 8016f30:	2b00      	cmp	r3, #0
 8016f32:	930c      	str	r3, [sp, #48]	@ 0x30
 8016f34:	dd1c      	ble.n	8016f70 <_vfprintf_r+0x800>
 8016f36:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8016f38:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8016f3c:	2810      	cmp	r0, #16
 8016f3e:	4873      	ldr	r0, [pc, #460]	@ (801710c <_vfprintf_r+0x99c>)
 8016f40:	6020      	str	r0, [r4, #0]
 8016f42:	f102 0201 	add.w	r2, r2, #1
 8016f46:	f104 0108 	add.w	r1, r4, #8
 8016f4a:	f300 8284 	bgt.w	8017456 <_vfprintf_r+0xce6>
 8016f4e:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8016f50:	6060      	str	r0, [r4, #4]
 8016f52:	4403      	add	r3, r0
 8016f54:	2a07      	cmp	r2, #7
 8016f56:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8016f5a:	f340 8291 	ble.w	8017480 <_vfprintf_r+0xd10>
 8016f5e:	9802      	ldr	r0, [sp, #8]
 8016f60:	aa1e      	add	r2, sp, #120	@ 0x78
 8016f62:	4659      	mov	r1, fp
 8016f64:	f000 fe26 	bl	8017bb4 <__sprint_r>
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	f040 857c 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8016f6e:	ac21      	add	r4, sp, #132	@ 0x84
 8016f70:	05e8      	lsls	r0, r5, #23
 8016f72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016f74:	f100 828a 	bmi.w	801748c <_vfprintf_r+0xd1c>
 8016f78:	4433      	add	r3, r6
 8016f7a:	9320      	str	r3, [sp, #128]	@ 0x80
 8016f7c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8016f7e:	3301      	adds	r3, #1
 8016f80:	2b07      	cmp	r3, #7
 8016f82:	e9c4 a600 	strd	sl, r6, [r4]
 8016f86:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016f88:	f300 82c2 	bgt.w	8017510 <_vfprintf_r+0xda0>
 8016f8c:	3408      	adds	r4, #8
 8016f8e:	0768      	lsls	r0, r5, #29
 8016f90:	f100 854b 	bmi.w	8017a2a <_vfprintf_r+0x12ba>
 8016f94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8016f98:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8016f9a:	428a      	cmp	r2, r1
 8016f9c:	bfac      	ite	ge
 8016f9e:	189b      	addge	r3, r3, r2
 8016fa0:	185b      	addlt	r3, r3, r1
 8016fa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8016fa4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8016fa6:	b13b      	cbz	r3, 8016fb8 <_vfprintf_r+0x848>
 8016fa8:	9802      	ldr	r0, [sp, #8]
 8016faa:	aa1e      	add	r2, sp, #120	@ 0x78
 8016fac:	4659      	mov	r1, fp
 8016fae:	f000 fe01 	bl	8017bb4 <__sprint_r>
 8016fb2:	2800      	cmp	r0, #0
 8016fb4:	f040 8557 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8016fb8:	2300      	movs	r3, #0
 8016fba:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016fbc:	f1b9 0f00 	cmp.w	r9, #0
 8016fc0:	f040 856d 	bne.w	8017a9e <_vfprintf_r+0x132e>
 8016fc4:	9f05      	ldr	r7, [sp, #20]
 8016fc6:	ac21      	add	r4, sp, #132	@ 0x84
 8016fc8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8016fcc:	e457      	b.n	801687e <_vfprintf_r+0x10e>
 8016fce:	f800 7c01 	strb.w	r7, [r0, #-1]
 8016fd2:	e6ba      	b.n	8016d4a <_vfprintf_r+0x5da>
 8016fd4:	f802 7b01 	strb.w	r7, [r2], #1
 8016fd8:	1a81      	subs	r1, r0, r2
 8016fda:	2900      	cmp	r1, #0
 8016fdc:	dafa      	bge.n	8016fd4 <_vfprintf_r+0x864>
 8016fde:	1c72      	adds	r2, r6, #1
 8016fe0:	3601      	adds	r6, #1
 8016fe2:	bfb8      	it	lt
 8016fe4:	2200      	movlt	r2, #0
 8016fe6:	4413      	add	r3, r2
 8016fe8:	e6be      	b.n	8016d68 <_vfprintf_r+0x5f8>
 8016fea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8016fee:	d005      	beq.n	8016ffc <_vfprintf_r+0x88c>
 8016ff0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8016ff4:	d12f      	bne.n	8017056 <_vfprintf_r+0x8e6>
 8016ff6:	1c77      	adds	r7, r6, #1
 8016ff8:	2102      	movs	r1, #2
 8016ffa:	e001      	b.n	8017000 <_vfprintf_r+0x890>
 8016ffc:	4637      	mov	r7, r6
 8016ffe:	2103      	movs	r1, #3
 8017000:	ab1c      	add	r3, sp, #112	@ 0x70
 8017002:	9301      	str	r3, [sp, #4]
 8017004:	ab19      	add	r3, sp, #100	@ 0x64
 8017006:	9300      	str	r3, [sp, #0]
 8017008:	9802      	ldr	r0, [sp, #8]
 801700a:	eeb0 0b49 	vmov.f64	d0, d9
 801700e:	ab18      	add	r3, sp, #96	@ 0x60
 8017010:	463a      	mov	r2, r7
 8017012:	f001 f8b9 	bl	8018188 <_dtoa_r>
 8017016:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801701a:	4682      	mov	sl, r0
 801701c:	d12d      	bne.n	801707a <_vfprintf_r+0x90a>
 801701e:	07e8      	lsls	r0, r5, #31
 8017020:	d41b      	bmi.n	801705a <_vfprintf_r+0x8ea>
 8017022:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8017024:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8017026:	eba3 030a 	sub.w	r3, r3, sl
 801702a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801702e:	9303      	str	r3, [sp, #12]
 8017030:	d036      	beq.n	80170a0 <_vfprintf_r+0x930>
 8017032:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8017036:	f47f ae9a 	bne.w	8016d6e <_vfprintf_r+0x5fe>
 801703a:	f005 0301 	and.w	r3, r5, #1
 801703e:	2f00      	cmp	r7, #0
 8017040:	ea43 0306 	orr.w	r3, r3, r6
 8017044:	dd53      	ble.n	80170ee <_vfprintf_r+0x97e>
 8017046:	2b00      	cmp	r3, #0
 8017048:	d05b      	beq.n	8017102 <_vfprintf_r+0x992>
 801704a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801704c:	18fb      	adds	r3, r7, r3
 801704e:	441e      	add	r6, r3
 8017050:	2366      	movs	r3, #102	@ 0x66
 8017052:	9304      	str	r3, [sp, #16]
 8017054:	e05f      	b.n	8017116 <_vfprintf_r+0x9a6>
 8017056:	4637      	mov	r7, r6
 8017058:	e7ce      	b.n	8016ff8 <_vfprintf_r+0x888>
 801705a:	eb0a 0307 	add.w	r3, sl, r7
 801705e:	eeb5 9b40 	vcmp.f64	d9, #0.0
 8017062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017066:	bf08      	it	eq
 8017068:	931c      	streq	r3, [sp, #112]	@ 0x70
 801706a:	2130      	movs	r1, #48	@ 0x30
 801706c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801706e:	4293      	cmp	r3, r2
 8017070:	d9d7      	bls.n	8017022 <_vfprintf_r+0x8b2>
 8017072:	1c50      	adds	r0, r2, #1
 8017074:	901c      	str	r0, [sp, #112]	@ 0x70
 8017076:	7011      	strb	r1, [r2, #0]
 8017078:	e7f8      	b.n	801706c <_vfprintf_r+0x8fc>
 801707a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801707e:	eb00 0307 	add.w	r3, r0, r7
 8017082:	d1ec      	bne.n	801705e <_vfprintf_r+0x8ee>
 8017084:	7802      	ldrb	r2, [r0, #0]
 8017086:	2a30      	cmp	r2, #48	@ 0x30
 8017088:	d107      	bne.n	801709a <_vfprintf_r+0x92a>
 801708a:	eeb5 9b40 	vcmp.f64	d9, #0.0
 801708e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017092:	bf1c      	itt	ne
 8017094:	f1c7 0701 	rsbne	r7, r7, #1
 8017098:	9718      	strne	r7, [sp, #96]	@ 0x60
 801709a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801709c:	4413      	add	r3, r2
 801709e:	e7de      	b.n	801705e <_vfprintf_r+0x8ee>
 80170a0:	1cf9      	adds	r1, r7, #3
 80170a2:	db01      	blt.n	80170a8 <_vfprintf_r+0x938>
 80170a4:	42be      	cmp	r6, r7
 80170a6:	da15      	bge.n	80170d4 <_vfprintf_r+0x964>
 80170a8:	9b04      	ldr	r3, [sp, #16]
 80170aa:	3b02      	subs	r3, #2
 80170ac:	9304      	str	r3, [sp, #16]
 80170ae:	e65e      	b.n	8016d6e <_vfprintf_r+0x5fe>
 80170b0:	f813 7b01 	ldrb.w	r7, [r3], #1
 80170b4:	f806 7f01 	strb.w	r7, [r6, #1]!
 80170b8:	e691      	b.n	8016dde <_vfprintf_r+0x66e>
 80170ba:	b941      	cbnz	r1, 80170ce <_vfprintf_r+0x95e>
 80170bc:	2230      	movs	r2, #48	@ 0x30
 80170be:	f88d 206a 	strb.w	r2, [sp, #106]	@ 0x6a
 80170c2:	f10d 026b 	add.w	r2, sp, #107	@ 0x6b
 80170c6:	3330      	adds	r3, #48	@ 0x30
 80170c8:	f802 3b01 	strb.w	r3, [r2], #1
 80170cc:	e693      	b.n	8016df6 <_vfprintf_r+0x686>
 80170ce:	f10d 026a 	add.w	r2, sp, #106	@ 0x6a
 80170d2:	e7f8      	b.n	80170c6 <_vfprintf_r+0x956>
 80170d4:	9b03      	ldr	r3, [sp, #12]
 80170d6:	42bb      	cmp	r3, r7
 80170d8:	dd0d      	ble.n	80170f6 <_vfprintf_r+0x986>
 80170da:	9b03      	ldr	r3, [sp, #12]
 80170dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80170de:	2f00      	cmp	r7, #0
 80170e0:	eb03 0602 	add.w	r6, r3, r2
 80170e4:	dc0b      	bgt.n	80170fe <_vfprintf_r+0x98e>
 80170e6:	f1c7 0301 	rsb	r3, r7, #1
 80170ea:	441e      	add	r6, r3
 80170ec:	e007      	b.n	80170fe <_vfprintf_r+0x98e>
 80170ee:	b17b      	cbz	r3, 8017110 <_vfprintf_r+0x9a0>
 80170f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170f2:	3301      	adds	r3, #1
 80170f4:	e7ab      	b.n	801704e <_vfprintf_r+0x8de>
 80170f6:	07eb      	lsls	r3, r5, #31
 80170f8:	d522      	bpl.n	8017140 <_vfprintf_r+0x9d0>
 80170fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80170fc:	18fe      	adds	r6, r7, r3
 80170fe:	2367      	movs	r3, #103	@ 0x67
 8017100:	e7a7      	b.n	8017052 <_vfprintf_r+0x8e2>
 8017102:	463e      	mov	r6, r7
 8017104:	e7a4      	b.n	8017050 <_vfprintf_r+0x8e0>
 8017106:	bf00      	nop
 8017108:	0801abeb 	.word	0x0801abeb
 801710c:	0801abdb 	.word	0x0801abdb
 8017110:	2366      	movs	r3, #102	@ 0x66
 8017112:	9304      	str	r3, [sp, #16]
 8017114:	2601      	movs	r6, #1
 8017116:	f415 6380 	ands.w	r3, r5, #1024	@ 0x400
 801711a:	9306      	str	r3, [sp, #24]
 801711c:	d022      	beq.n	8017164 <_vfprintf_r+0x9f4>
 801711e:	f04f 0800 	mov.w	r8, #0
 8017122:	2f00      	cmp	r7, #0
 8017124:	f8cd 8018 	str.w	r8, [sp, #24]
 8017128:	f77f ae7c 	ble.w	8016e24 <_vfprintf_r+0x6b4>
 801712c:	9b07      	ldr	r3, [sp, #28]
 801712e:	781b      	ldrb	r3, [r3, #0]
 8017130:	2bff      	cmp	r3, #255	@ 0xff
 8017132:	d107      	bne.n	8017144 <_vfprintf_r+0x9d4>
 8017134:	9b06      	ldr	r3, [sp, #24]
 8017136:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017138:	4443      	add	r3, r8
 801713a:	fb02 6603 	mla	r6, r2, r3, r6
 801713e:	e671      	b.n	8016e24 <_vfprintf_r+0x6b4>
 8017140:	463e      	mov	r6, r7
 8017142:	e7dc      	b.n	80170fe <_vfprintf_r+0x98e>
 8017144:	42bb      	cmp	r3, r7
 8017146:	daf5      	bge.n	8017134 <_vfprintf_r+0x9c4>
 8017148:	1aff      	subs	r7, r7, r3
 801714a:	9b07      	ldr	r3, [sp, #28]
 801714c:	785b      	ldrb	r3, [r3, #1]
 801714e:	b133      	cbz	r3, 801715e <_vfprintf_r+0x9ee>
 8017150:	9b06      	ldr	r3, [sp, #24]
 8017152:	3301      	adds	r3, #1
 8017154:	9306      	str	r3, [sp, #24]
 8017156:	9b07      	ldr	r3, [sp, #28]
 8017158:	3301      	adds	r3, #1
 801715a:	9307      	str	r3, [sp, #28]
 801715c:	e7e6      	b.n	801712c <_vfprintf_r+0x9bc>
 801715e:	f108 0801 	add.w	r8, r8, #1
 8017162:	e7e3      	b.n	801712c <_vfprintf_r+0x9bc>
 8017164:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8017168:	e65c      	b.n	8016e24 <_vfprintf_r+0x6b4>
 801716a:	232d      	movs	r3, #45	@ 0x2d
 801716c:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 8017170:	e65c      	b.n	8016e2c <_vfprintf_r+0x6bc>
 8017172:	06ae      	lsls	r6, r5, #26
 8017174:	d507      	bpl.n	8017186 <_vfprintf_r+0xa16>
 8017176:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8017178:	683b      	ldr	r3, [r7, #0]
 801717a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801717c:	17d2      	asrs	r2, r2, #31
 801717e:	e9c3 1200 	strd	r1, r2, [r3]
 8017182:	3704      	adds	r7, #4
 8017184:	e720      	b.n	8016fc8 <_vfprintf_r+0x858>
 8017186:	06e8      	lsls	r0, r5, #27
 8017188:	d503      	bpl.n	8017192 <_vfprintf_r+0xa22>
 801718a:	683b      	ldr	r3, [r7, #0]
 801718c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801718e:	601a      	str	r2, [r3, #0]
 8017190:	e7f7      	b.n	8017182 <_vfprintf_r+0xa12>
 8017192:	0669      	lsls	r1, r5, #25
 8017194:	d503      	bpl.n	801719e <_vfprintf_r+0xa2e>
 8017196:	683b      	ldr	r3, [r7, #0]
 8017198:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801719a:	801a      	strh	r2, [r3, #0]
 801719c:	e7f1      	b.n	8017182 <_vfprintf_r+0xa12>
 801719e:	05aa      	lsls	r2, r5, #22
 80171a0:	d5f3      	bpl.n	801718a <_vfprintf_r+0xa1a>
 80171a2:	683b      	ldr	r3, [r7, #0]
 80171a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80171a6:	701a      	strb	r2, [r3, #0]
 80171a8:	e7eb      	b.n	8017182 <_vfprintf_r+0xa12>
 80171aa:	f045 0510 	orr.w	r5, r5, #16
 80171ae:	f015 0320 	ands.w	r3, r5, #32
 80171b2:	d01f      	beq.n	80171f4 <_vfprintf_r+0xa84>
 80171b4:	3707      	adds	r7, #7
 80171b6:	f027 0307 	bic.w	r3, r7, #7
 80171ba:	461a      	mov	r2, r3
 80171bc:	f8d3 8004 	ldr.w	r8, [r3, #4]
 80171c0:	f852 7b08 	ldr.w	r7, [r2], #8
 80171c4:	9205      	str	r2, [sp, #20]
 80171c6:	f425 6580 	bic.w	r5, r5, #1024	@ 0x400
 80171ca:	2300      	movs	r3, #0
 80171cc:	2200      	movs	r2, #0
 80171ce:	f88d 205b 	strb.w	r2, [sp, #91]	@ 0x5b
 80171d2:	2e00      	cmp	r6, #0
 80171d4:	f2c0 8478 	blt.w	8017ac8 <_vfprintf_r+0x1358>
 80171d8:	f025 0280 	bic.w	r2, r5, #128	@ 0x80
 80171dc:	9206      	str	r2, [sp, #24]
 80171de:	ea57 0208 	orrs.w	r2, r7, r8
 80171e2:	f040 8476 	bne.w	8017ad2 <_vfprintf_r+0x1362>
 80171e6:	2e00      	cmp	r6, #0
 80171e8:	f000 80df 	beq.w	80173aa <_vfprintf_r+0xc3a>
 80171ec:	2b01      	cmp	r3, #1
 80171ee:	f040 8473 	bne.w	8017ad8 <_vfprintf_r+0x1368>
 80171f2:	e083      	b.n	80172fc <_vfprintf_r+0xb8c>
 80171f4:	463a      	mov	r2, r7
 80171f6:	f015 0810 	ands.w	r8, r5, #16
 80171fa:	f852 7b04 	ldr.w	r7, [r2], #4
 80171fe:	9205      	str	r2, [sp, #20]
 8017200:	d001      	beq.n	8017206 <_vfprintf_r+0xa96>
 8017202:	4698      	mov	r8, r3
 8017204:	e7df      	b.n	80171c6 <_vfprintf_r+0xa56>
 8017206:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 801720a:	d001      	beq.n	8017210 <_vfprintf_r+0xaa0>
 801720c:	b2bf      	uxth	r7, r7
 801720e:	e7da      	b.n	80171c6 <_vfprintf_r+0xa56>
 8017210:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 8017214:	d0d7      	beq.n	80171c6 <_vfprintf_r+0xa56>
 8017216:	b2ff      	uxtb	r7, r7
 8017218:	e7f3      	b.n	8017202 <_vfprintf_r+0xa92>
 801721a:	463b      	mov	r3, r7
 801721c:	2278      	movs	r2, #120	@ 0x78
 801721e:	f853 7b04 	ldr.w	r7, [r3], #4
 8017222:	9305      	str	r3, [sp, #20]
 8017224:	f647 0330 	movw	r3, #30768	@ 0x7830
 8017228:	f8ad 305c 	strh.w	r3, [sp, #92]	@ 0x5c
 801722c:	4b95      	ldr	r3, [pc, #596]	@ (8017484 <_vfprintf_r+0xd14>)
 801722e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017230:	f04f 0800 	mov.w	r8, #0
 8017234:	f045 0502 	orr.w	r5, r5, #2
 8017238:	2302      	movs	r3, #2
 801723a:	9204      	str	r2, [sp, #16]
 801723c:	e7c6      	b.n	80171cc <_vfprintf_r+0xa5c>
 801723e:	463b      	mov	r3, r7
 8017240:	2700      	movs	r7, #0
 8017242:	f853 ab04 	ldr.w	sl, [r3], #4
 8017246:	9305      	str	r3, [sp, #20]
 8017248:	42be      	cmp	r6, r7
 801724a:	f88d 705b 	strb.w	r7, [sp, #91]	@ 0x5b
 801724e:	db0f      	blt.n	8017270 <_vfprintf_r+0xb00>
 8017250:	4632      	mov	r2, r6
 8017252:	4639      	mov	r1, r7
 8017254:	4650      	mov	r0, sl
 8017256:	f7e8 fff3 	bl	8000240 <memchr>
 801725a:	4681      	mov	r9, r0
 801725c:	2800      	cmp	r0, #0
 801725e:	f43f acaa 	beq.w	8016bb6 <_vfprintf_r+0x446>
 8017262:	eba0 060a 	sub.w	r6, r0, sl
 8017266:	46b9      	mov	r9, r7
 8017268:	970c      	str	r7, [sp, #48]	@ 0x30
 801726a:	46b8      	mov	r8, r7
 801726c:	9706      	str	r7, [sp, #24]
 801726e:	e5e0      	b.n	8016e32 <_vfprintf_r+0x6c2>
 8017270:	4650      	mov	r0, sl
 8017272:	f7e9 f835 	bl	80002e0 <strlen>
 8017276:	46b9      	mov	r9, r7
 8017278:	4606      	mov	r6, r0
 801727a:	e49c      	b.n	8016bb6 <_vfprintf_r+0x446>
 801727c:	f045 0510 	orr.w	r5, r5, #16
 8017280:	f015 0320 	ands.w	r3, r5, #32
 8017284:	d00a      	beq.n	801729c <_vfprintf_r+0xb2c>
 8017286:	3707      	adds	r7, #7
 8017288:	f027 0307 	bic.w	r3, r7, #7
 801728c:	461a      	mov	r2, r3
 801728e:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8017292:	f852 7b08 	ldr.w	r7, [r2], #8
 8017296:	9205      	str	r2, [sp, #20]
 8017298:	2301      	movs	r3, #1
 801729a:	e797      	b.n	80171cc <_vfprintf_r+0xa5c>
 801729c:	463a      	mov	r2, r7
 801729e:	f015 0810 	ands.w	r8, r5, #16
 80172a2:	f852 7b04 	ldr.w	r7, [r2], #4
 80172a6:	9205      	str	r2, [sp, #20]
 80172a8:	d001      	beq.n	80172ae <_vfprintf_r+0xb3e>
 80172aa:	4698      	mov	r8, r3
 80172ac:	e7f4      	b.n	8017298 <_vfprintf_r+0xb28>
 80172ae:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80172b2:	d001      	beq.n	80172b8 <_vfprintf_r+0xb48>
 80172b4:	b2bf      	uxth	r7, r7
 80172b6:	e7ef      	b.n	8017298 <_vfprintf_r+0xb28>
 80172b8:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 80172bc:	d0ec      	beq.n	8017298 <_vfprintf_r+0xb28>
 80172be:	b2ff      	uxtb	r7, r7
 80172c0:	e7f3      	b.n	80172aa <_vfprintf_r+0xb3a>
 80172c2:	4b71      	ldr	r3, [pc, #452]	@ (8017488 <_vfprintf_r+0xd18>)
 80172c4:	f7ff bb70 	b.w	80169a8 <_vfprintf_r+0x238>
 80172c8:	463a      	mov	r2, r7
 80172ca:	f015 0810 	ands.w	r8, r5, #16
 80172ce:	f852 7b04 	ldr.w	r7, [r2], #4
 80172d2:	9205      	str	r2, [sp, #20]
 80172d4:	d002      	beq.n	80172dc <_vfprintf_r+0xb6c>
 80172d6:	4698      	mov	r8, r3
 80172d8:	f7ff bb74 	b.w	80169c4 <_vfprintf_r+0x254>
 80172dc:	f015 0340 	ands.w	r3, r5, #64	@ 0x40
 80172e0:	d002      	beq.n	80172e8 <_vfprintf_r+0xb78>
 80172e2:	b2bf      	uxth	r7, r7
 80172e4:	f7ff bb6e 	b.w	80169c4 <_vfprintf_r+0x254>
 80172e8:	f415 7800 	ands.w	r8, r5, #512	@ 0x200
 80172ec:	f43f ab6a 	beq.w	80169c4 <_vfprintf_r+0x254>
 80172f0:	b2ff      	uxtb	r7, r7
 80172f2:	e7f0      	b.n	80172d6 <_vfprintf_r+0xb66>
 80172f4:	2f0a      	cmp	r7, #10
 80172f6:	f178 0300 	sbcs.w	r3, r8, #0
 80172fa:	d207      	bcs.n	801730c <_vfprintf_r+0xb9c>
 80172fc:	3730      	adds	r7, #48	@ 0x30
 80172fe:	b2ff      	uxtb	r7, r7
 8017300:	f88d 7127 	strb.w	r7, [sp, #295]	@ 0x127
 8017304:	f20d 1a27 	addw	sl, sp, #295	@ 0x127
 8017308:	f000 bc03 	b.w	8017b12 <_vfprintf_r+0x13a2>
 801730c:	2300      	movs	r3, #0
 801730e:	9303      	str	r3, [sp, #12]
 8017310:	9b06      	ldr	r3, [sp, #24]
 8017312:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017316:	ad4a      	add	r5, sp, #296	@ 0x128
 8017318:	930c      	str	r3, [sp, #48]	@ 0x30
 801731a:	220a      	movs	r2, #10
 801731c:	2300      	movs	r3, #0
 801731e:	4638      	mov	r0, r7
 8017320:	4641      	mov	r1, r8
 8017322:	f7e8 ffe5 	bl	80002f0 <__aeabi_uldivmod>
 8017326:	3230      	adds	r2, #48	@ 0x30
 8017328:	f805 2c01 	strb.w	r2, [r5, #-1]
 801732c:	9a03      	ldr	r2, [sp, #12]
 801732e:	3201      	adds	r2, #1
 8017330:	9203      	str	r2, [sp, #12]
 8017332:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017334:	4603      	mov	r3, r0
 8017336:	4689      	mov	r9, r1
 8017338:	f105 3aff 	add.w	sl, r5, #4294967295
 801733c:	b30a      	cbz	r2, 8017382 <_vfprintf_r+0xc12>
 801733e:	9a07      	ldr	r2, [sp, #28]
 8017340:	9903      	ldr	r1, [sp, #12]
 8017342:	7812      	ldrb	r2, [r2, #0]
 8017344:	4291      	cmp	r1, r2
 8017346:	d11c      	bne.n	8017382 <_vfprintf_r+0xc12>
 8017348:	29ff      	cmp	r1, #255	@ 0xff
 801734a:	d01a      	beq.n	8017382 <_vfprintf_r+0xc12>
 801734c:	2f0a      	cmp	r7, #10
 801734e:	f178 0800 	sbcs.w	r8, r8, #0
 8017352:	f0c0 83de 	bcc.w	8017b12 <_vfprintf_r+0x13a2>
 8017356:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017358:	9003      	str	r0, [sp, #12]
 801735a:	ebaa 0a03 	sub.w	sl, sl, r3
 801735e:	461a      	mov	r2, r3
 8017360:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017362:	4650      	mov	r0, sl
 8017364:	f000 fdc1 	bl	8017eea <strncpy>
 8017368:	9b07      	ldr	r3, [sp, #28]
 801736a:	785a      	ldrb	r2, [r3, #1]
 801736c:	9b03      	ldr	r3, [sp, #12]
 801736e:	b11a      	cbz	r2, 8017378 <_vfprintf_r+0xc08>
 8017370:	9a07      	ldr	r2, [sp, #28]
 8017372:	3201      	adds	r2, #1
 8017374:	9207      	str	r2, [sp, #28]
 8017376:	2200      	movs	r2, #0
 8017378:	9203      	str	r2, [sp, #12]
 801737a:	461f      	mov	r7, r3
 801737c:	46c8      	mov	r8, r9
 801737e:	4655      	mov	r5, sl
 8017380:	e7cb      	b.n	801731a <_vfprintf_r+0xbaa>
 8017382:	2f0a      	cmp	r7, #10
 8017384:	f178 0800 	sbcs.w	r8, r8, #0
 8017388:	d2f7      	bcs.n	801737a <_vfprintf_r+0xc0a>
 801738a:	e3c2      	b.n	8017b12 <_vfprintf_r+0x13a2>
 801738c:	f007 030f 	and.w	r3, r7, #15
 8017390:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017392:	093f      	lsrs	r7, r7, #4
 8017394:	5cd3      	ldrb	r3, [r2, r3]
 8017396:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 801739a:	ea47 7708 	orr.w	r7, r7, r8, lsl #28
 801739e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80173a2:	ea57 0308 	orrs.w	r3, r7, r8
 80173a6:	d1f1      	bne.n	801738c <_vfprintf_r+0xc1c>
 80173a8:	e3b3      	b.n	8017b12 <_vfprintf_r+0x13a2>
 80173aa:	b91b      	cbnz	r3, 80173b4 <_vfprintf_r+0xc44>
 80173ac:	07ed      	lsls	r5, r5, #31
 80173ae:	d501      	bpl.n	80173b4 <_vfprintf_r+0xc44>
 80173b0:	2730      	movs	r7, #48	@ 0x30
 80173b2:	e7a5      	b.n	8017300 <_vfprintf_r+0xb90>
 80173b4:	f50d 7a94 	add.w	sl, sp, #296	@ 0x128
 80173b8:	e3ab      	b.n	8017b12 <_vfprintf_r+0x13a2>
 80173ba:	9b04      	ldr	r3, [sp, #16]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	f000 8374 	beq.w	8017aaa <_vfprintf_r+0x133a>
 80173c2:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
 80173c6:	2300      	movs	r3, #0
 80173c8:	f88d 305b 	strb.w	r3, [sp, #91]	@ 0x5b
 80173cc:	9705      	str	r7, [sp, #20]
 80173ce:	f7ff bb97 	b.w	8016b00 <_vfprintf_r+0x390>
 80173d2:	2110      	movs	r1, #16
 80173d4:	6061      	str	r1, [r4, #4]
 80173d6:	2a07      	cmp	r2, #7
 80173d8:	4461      	add	r1, ip
 80173da:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80173de:	dd0a      	ble.n	80173f6 <_vfprintf_r+0xc86>
 80173e0:	9802      	ldr	r0, [sp, #8]
 80173e2:	9315      	str	r3, [sp, #84]	@ 0x54
 80173e4:	aa1e      	add	r2, sp, #120	@ 0x78
 80173e6:	4659      	mov	r1, fp
 80173e8:	f000 fbe4 	bl	8017bb4 <__sprint_r>
 80173ec:	2800      	cmp	r0, #0
 80173ee:	f040 833a 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80173f2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80173f4:	a821      	add	r0, sp, #132	@ 0x84
 80173f6:	3b10      	subs	r3, #16
 80173f8:	4604      	mov	r4, r0
 80173fa:	e535      	b.n	8016e68 <_vfprintf_r+0x6f8>
 80173fc:	4604      	mov	r4, r0
 80173fe:	e54f      	b.n	8016ea0 <_vfprintf_r+0x730>
 8017400:	9802      	ldr	r0, [sp, #8]
 8017402:	aa1e      	add	r2, sp, #120	@ 0x78
 8017404:	4659      	mov	r1, fp
 8017406:	f000 fbd5 	bl	8017bb4 <__sprint_r>
 801740a:	2800      	cmp	r0, #0
 801740c:	f040 832b 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017410:	ac21      	add	r4, sp, #132	@ 0x84
 8017412:	e557      	b.n	8016ec4 <_vfprintf_r+0x754>
 8017414:	9802      	ldr	r0, [sp, #8]
 8017416:	aa1e      	add	r2, sp, #120	@ 0x78
 8017418:	4659      	mov	r1, fp
 801741a:	f000 fbcb 	bl	8017bb4 <__sprint_r>
 801741e:	2800      	cmp	r0, #0
 8017420:	f040 8321 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017424:	ac21      	add	r4, sp, #132	@ 0x84
 8017426:	e55d      	b.n	8016ee4 <_vfprintf_r+0x774>
 8017428:	2110      	movs	r1, #16
 801742a:	6061      	str	r1, [r4, #4]
 801742c:	2a07      	cmp	r2, #7
 801742e:	4461      	add	r1, ip
 8017430:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 8017434:	dd0a      	ble.n	801744c <_vfprintf_r+0xcdc>
 8017436:	9802      	ldr	r0, [sp, #8]
 8017438:	9313      	str	r3, [sp, #76]	@ 0x4c
 801743a:	aa1e      	add	r2, sp, #120	@ 0x78
 801743c:	4659      	mov	r1, fp
 801743e:	f000 fbb9 	bl	8017bb4 <__sprint_r>
 8017442:	2800      	cmp	r0, #0
 8017444:	f040 830f 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017448:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801744a:	a821      	add	r0, sp, #132	@ 0x84
 801744c:	3b10      	subs	r3, #16
 801744e:	4604      	mov	r4, r0
 8017450:	e550      	b.n	8016ef4 <_vfprintf_r+0x784>
 8017452:	4604      	mov	r4, r0
 8017454:	e56a      	b.n	8016f2c <_vfprintf_r+0x7bc>
 8017456:	2010      	movs	r0, #16
 8017458:	4403      	add	r3, r0
 801745a:	2a07      	cmp	r2, #7
 801745c:	e9cd 231f 	strd	r2, r3, [sp, #124]	@ 0x7c
 8017460:	6060      	str	r0, [r4, #4]
 8017462:	dd08      	ble.n	8017476 <_vfprintf_r+0xd06>
 8017464:	9802      	ldr	r0, [sp, #8]
 8017466:	aa1e      	add	r2, sp, #120	@ 0x78
 8017468:	4659      	mov	r1, fp
 801746a:	f000 fba3 	bl	8017bb4 <__sprint_r>
 801746e:	2800      	cmp	r0, #0
 8017470:	f040 82f9 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017474:	a921      	add	r1, sp, #132	@ 0x84
 8017476:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017478:	3b10      	subs	r3, #16
 801747a:	930c      	str	r3, [sp, #48]	@ 0x30
 801747c:	460c      	mov	r4, r1
 801747e:	e55a      	b.n	8016f36 <_vfprintf_r+0x7c6>
 8017480:	460c      	mov	r4, r1
 8017482:	e575      	b.n	8016f70 <_vfprintf_r+0x800>
 8017484:	0801aa82 	.word	0x0801aa82
 8017488:	0801aa93 	.word	0x0801aa93
 801748c:	9a04      	ldr	r2, [sp, #16]
 801748e:	2a65      	cmp	r2, #101	@ 0x65
 8017490:	f340 823e 	ble.w	8017910 <_vfprintf_r+0x11a0>
 8017494:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8017498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801749c:	d169      	bne.n	8017572 <_vfprintf_r+0xe02>
 801749e:	4a72      	ldr	r2, [pc, #456]	@ (8017668 <_vfprintf_r+0xef8>)
 80174a0:	6022      	str	r2, [r4, #0]
 80174a2:	2201      	movs	r2, #1
 80174a4:	4413      	add	r3, r2
 80174a6:	9320      	str	r3, [sp, #128]	@ 0x80
 80174a8:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80174aa:	6062      	str	r2, [r4, #4]
 80174ac:	4413      	add	r3, r2
 80174ae:	2b07      	cmp	r3, #7
 80174b0:	931f      	str	r3, [sp, #124]	@ 0x7c
 80174b2:	dc37      	bgt.n	8017524 <_vfprintf_r+0xdb4>
 80174b4:	3408      	adds	r4, #8
 80174b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80174b8:	9a03      	ldr	r2, [sp, #12]
 80174ba:	4293      	cmp	r3, r2
 80174bc:	db02      	blt.n	80174c4 <_vfprintf_r+0xd54>
 80174be:	07e9      	lsls	r1, r5, #31
 80174c0:	f57f ad65 	bpl.w	8016f8e <_vfprintf_r+0x81e>
 80174c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80174c6:	6023      	str	r3, [r4, #0]
 80174c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80174ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80174cc:	6063      	str	r3, [r4, #4]
 80174ce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80174d0:	4413      	add	r3, r2
 80174d2:	9320      	str	r3, [sp, #128]	@ 0x80
 80174d4:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80174d6:	3301      	adds	r3, #1
 80174d8:	2b07      	cmp	r3, #7
 80174da:	931f      	str	r3, [sp, #124]	@ 0x7c
 80174dc:	dc2c      	bgt.n	8017538 <_vfprintf_r+0xdc8>
 80174de:	3408      	adds	r4, #8
 80174e0:	9b03      	ldr	r3, [sp, #12]
 80174e2:	1e5e      	subs	r6, r3, #1
 80174e4:	2e00      	cmp	r6, #0
 80174e6:	f77f ad52 	ble.w	8016f8e <_vfprintf_r+0x81e>
 80174ea:	4f60      	ldr	r7, [pc, #384]	@ (801766c <_vfprintf_r+0xefc>)
 80174ec:	f04f 0810 	mov.w	r8, #16
 80174f0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80174f4:	2e10      	cmp	r6, #16
 80174f6:	f103 0301 	add.w	r3, r3, #1
 80174fa:	f104 0108 	add.w	r1, r4, #8
 80174fe:	6027      	str	r7, [r4, #0]
 8017500:	dc24      	bgt.n	801754c <_vfprintf_r+0xddc>
 8017502:	6066      	str	r6, [r4, #4]
 8017504:	2b07      	cmp	r3, #7
 8017506:	4416      	add	r6, r2
 8017508:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 801750c:	f340 828a 	ble.w	8017a24 <_vfprintf_r+0x12b4>
 8017510:	9802      	ldr	r0, [sp, #8]
 8017512:	aa1e      	add	r2, sp, #120	@ 0x78
 8017514:	4659      	mov	r1, fp
 8017516:	f000 fb4d 	bl	8017bb4 <__sprint_r>
 801751a:	2800      	cmp	r0, #0
 801751c:	f040 82a3 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017520:	ac21      	add	r4, sp, #132	@ 0x84
 8017522:	e534      	b.n	8016f8e <_vfprintf_r+0x81e>
 8017524:	9802      	ldr	r0, [sp, #8]
 8017526:	aa1e      	add	r2, sp, #120	@ 0x78
 8017528:	4659      	mov	r1, fp
 801752a:	f000 fb43 	bl	8017bb4 <__sprint_r>
 801752e:	2800      	cmp	r0, #0
 8017530:	f040 8299 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017534:	ac21      	add	r4, sp, #132	@ 0x84
 8017536:	e7be      	b.n	80174b6 <_vfprintf_r+0xd46>
 8017538:	9802      	ldr	r0, [sp, #8]
 801753a:	aa1e      	add	r2, sp, #120	@ 0x78
 801753c:	4659      	mov	r1, fp
 801753e:	f000 fb39 	bl	8017bb4 <__sprint_r>
 8017542:	2800      	cmp	r0, #0
 8017544:	f040 828f 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017548:	ac21      	add	r4, sp, #132	@ 0x84
 801754a:	e7c9      	b.n	80174e0 <_vfprintf_r+0xd70>
 801754c:	3210      	adds	r2, #16
 801754e:	2b07      	cmp	r3, #7
 8017550:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8017554:	f8c4 8004 	str.w	r8, [r4, #4]
 8017558:	dd08      	ble.n	801756c <_vfprintf_r+0xdfc>
 801755a:	9802      	ldr	r0, [sp, #8]
 801755c:	aa1e      	add	r2, sp, #120	@ 0x78
 801755e:	4659      	mov	r1, fp
 8017560:	f000 fb28 	bl	8017bb4 <__sprint_r>
 8017564:	2800      	cmp	r0, #0
 8017566:	f040 827e 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 801756a:	a921      	add	r1, sp, #132	@ 0x84
 801756c:	3e10      	subs	r6, #16
 801756e:	460c      	mov	r4, r1
 8017570:	e7be      	b.n	80174f0 <_vfprintf_r+0xd80>
 8017572:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8017574:	2a00      	cmp	r2, #0
 8017576:	dc7b      	bgt.n	8017670 <_vfprintf_r+0xf00>
 8017578:	4a3b      	ldr	r2, [pc, #236]	@ (8017668 <_vfprintf_r+0xef8>)
 801757a:	6022      	str	r2, [r4, #0]
 801757c:	2201      	movs	r2, #1
 801757e:	4413      	add	r3, r2
 8017580:	9320      	str	r3, [sp, #128]	@ 0x80
 8017582:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017584:	6062      	str	r2, [r4, #4]
 8017586:	4413      	add	r3, r2
 8017588:	2b07      	cmp	r3, #7
 801758a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801758c:	dc46      	bgt.n	801761c <_vfprintf_r+0xeac>
 801758e:	3408      	adds	r4, #8
 8017590:	9903      	ldr	r1, [sp, #12]
 8017592:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017594:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017596:	430b      	orrs	r3, r1
 8017598:	f005 0101 	and.w	r1, r5, #1
 801759c:	430b      	orrs	r3, r1
 801759e:	f43f acf6 	beq.w	8016f8e <_vfprintf_r+0x81e>
 80175a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175a4:	6023      	str	r3, [r4, #0]
 80175a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80175a8:	6063      	str	r3, [r4, #4]
 80175aa:	441a      	add	r2, r3
 80175ac:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80175ae:	9220      	str	r2, [sp, #128]	@ 0x80
 80175b0:	3301      	adds	r3, #1
 80175b2:	2b07      	cmp	r3, #7
 80175b4:	931f      	str	r3, [sp, #124]	@ 0x7c
 80175b6:	dc3b      	bgt.n	8017630 <_vfprintf_r+0xec0>
 80175b8:	f104 0308 	add.w	r3, r4, #8
 80175bc:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 80175be:	2e00      	cmp	r6, #0
 80175c0:	da1b      	bge.n	80175fa <_vfprintf_r+0xe8a>
 80175c2:	4f2a      	ldr	r7, [pc, #168]	@ (801766c <_vfprintf_r+0xefc>)
 80175c4:	4276      	negs	r6, r6
 80175c6:	461a      	mov	r2, r3
 80175c8:	2410      	movs	r4, #16
 80175ca:	e9dd 101f 	ldrd	r1, r0, [sp, #124]	@ 0x7c
 80175ce:	2e10      	cmp	r6, #16
 80175d0:	f101 0101 	add.w	r1, r1, #1
 80175d4:	f103 0308 	add.w	r3, r3, #8
 80175d8:	6017      	str	r7, [r2, #0]
 80175da:	dc33      	bgt.n	8017644 <_vfprintf_r+0xed4>
 80175dc:	6056      	str	r6, [r2, #4]
 80175de:	2907      	cmp	r1, #7
 80175e0:	4406      	add	r6, r0
 80175e2:	e9cd 161f 	strd	r1, r6, [sp, #124]	@ 0x7c
 80175e6:	dd08      	ble.n	80175fa <_vfprintf_r+0xe8a>
 80175e8:	9802      	ldr	r0, [sp, #8]
 80175ea:	aa1e      	add	r2, sp, #120	@ 0x78
 80175ec:	4659      	mov	r1, fp
 80175ee:	f000 fae1 	bl	8017bb4 <__sprint_r>
 80175f2:	2800      	cmp	r0, #0
 80175f4:	f040 8237 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80175f8:	ab21      	add	r3, sp, #132	@ 0x84
 80175fa:	9a03      	ldr	r2, [sp, #12]
 80175fc:	605a      	str	r2, [r3, #4]
 80175fe:	9903      	ldr	r1, [sp, #12]
 8017600:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017602:	f8c3 a000 	str.w	sl, [r3]
 8017606:	440a      	add	r2, r1
 8017608:	9220      	str	r2, [sp, #128]	@ 0x80
 801760a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801760c:	3201      	adds	r2, #1
 801760e:	2a07      	cmp	r2, #7
 8017610:	921f      	str	r2, [sp, #124]	@ 0x7c
 8017612:	f73f af7d 	bgt.w	8017510 <_vfprintf_r+0xda0>
 8017616:	f103 0408 	add.w	r4, r3, #8
 801761a:	e4b8      	b.n	8016f8e <_vfprintf_r+0x81e>
 801761c:	9802      	ldr	r0, [sp, #8]
 801761e:	aa1e      	add	r2, sp, #120	@ 0x78
 8017620:	4659      	mov	r1, fp
 8017622:	f000 fac7 	bl	8017bb4 <__sprint_r>
 8017626:	2800      	cmp	r0, #0
 8017628:	f040 821d 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 801762c:	ac21      	add	r4, sp, #132	@ 0x84
 801762e:	e7af      	b.n	8017590 <_vfprintf_r+0xe20>
 8017630:	9802      	ldr	r0, [sp, #8]
 8017632:	aa1e      	add	r2, sp, #120	@ 0x78
 8017634:	4659      	mov	r1, fp
 8017636:	f000 fabd 	bl	8017bb4 <__sprint_r>
 801763a:	2800      	cmp	r0, #0
 801763c:	f040 8213 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017640:	ab21      	add	r3, sp, #132	@ 0x84
 8017642:	e7bb      	b.n	80175bc <_vfprintf_r+0xe4c>
 8017644:	3010      	adds	r0, #16
 8017646:	2907      	cmp	r1, #7
 8017648:	e9cd 101f 	strd	r1, r0, [sp, #124]	@ 0x7c
 801764c:	6054      	str	r4, [r2, #4]
 801764e:	dd08      	ble.n	8017662 <_vfprintf_r+0xef2>
 8017650:	9802      	ldr	r0, [sp, #8]
 8017652:	aa1e      	add	r2, sp, #120	@ 0x78
 8017654:	4659      	mov	r1, fp
 8017656:	f000 faad 	bl	8017bb4 <__sprint_r>
 801765a:	2800      	cmp	r0, #0
 801765c:	f040 8203 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017660:	ab21      	add	r3, sp, #132	@ 0x84
 8017662:	3e10      	subs	r6, #16
 8017664:	461a      	mov	r2, r3
 8017666:	e7b0      	b.n	80175ca <_vfprintf_r+0xe5a>
 8017668:	0801aaa4 	.word	0x0801aaa4
 801766c:	0801abdb 	.word	0x0801abdb
 8017670:	9a03      	ldr	r2, [sp, #12]
 8017672:	42ba      	cmp	r2, r7
 8017674:	bfa8      	it	ge
 8017676:	463a      	movge	r2, r7
 8017678:	2a00      	cmp	r2, #0
 801767a:	4616      	mov	r6, r2
 801767c:	dd0a      	ble.n	8017694 <_vfprintf_r+0xf24>
 801767e:	4413      	add	r3, r2
 8017680:	9320      	str	r3, [sp, #128]	@ 0x80
 8017682:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017684:	3301      	adds	r3, #1
 8017686:	2b07      	cmp	r3, #7
 8017688:	e9c4 a200 	strd	sl, r2, [r4]
 801768c:	931f      	str	r3, [sp, #124]	@ 0x7c
 801768e:	f300 808c 	bgt.w	80177aa <_vfprintf_r+0x103a>
 8017692:	3408      	adds	r4, #8
 8017694:	2e00      	cmp	r6, #0
 8017696:	bfac      	ite	ge
 8017698:	1bbe      	subge	r6, r7, r6
 801769a:	463e      	movlt	r6, r7
 801769c:	2e00      	cmp	r6, #0
 801769e:	dd1a      	ble.n	80176d6 <_vfprintf_r+0xf66>
 80176a0:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 80176a4:	4899      	ldr	r0, [pc, #612]	@ (801790c <_vfprintf_r+0x119c>)
 80176a6:	6020      	str	r0, [r4, #0]
 80176a8:	2e10      	cmp	r6, #16
 80176aa:	f103 0301 	add.w	r3, r3, #1
 80176ae:	f104 0108 	add.w	r1, r4, #8
 80176b2:	f300 8084 	bgt.w	80177be <_vfprintf_r+0x104e>
 80176b6:	6066      	str	r6, [r4, #4]
 80176b8:	2b07      	cmp	r3, #7
 80176ba:	4416      	add	r6, r2
 80176bc:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 80176c0:	f340 8090 	ble.w	80177e4 <_vfprintf_r+0x1074>
 80176c4:	9802      	ldr	r0, [sp, #8]
 80176c6:	aa1e      	add	r2, sp, #120	@ 0x78
 80176c8:	4659      	mov	r1, fp
 80176ca:	f000 fa73 	bl	8017bb4 <__sprint_r>
 80176ce:	2800      	cmp	r0, #0
 80176d0:	f040 81c9 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80176d4:	ac21      	add	r4, sp, #132	@ 0x84
 80176d6:	056a      	lsls	r2, r5, #21
 80176d8:	4457      	add	r7, sl
 80176da:	d50c      	bpl.n	80176f6 <_vfprintf_r+0xf86>
 80176dc:	9b06      	ldr	r3, [sp, #24]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	f300 8082 	bgt.w	80177e8 <_vfprintf_r+0x1078>
 80176e4:	f1b8 0f00 	cmp.w	r8, #0
 80176e8:	f300 8081 	bgt.w	80177ee <_vfprintf_r+0x107e>
 80176ec:	9b03      	ldr	r3, [sp, #12]
 80176ee:	4453      	add	r3, sl
 80176f0:	429f      	cmp	r7, r3
 80176f2:	bf28      	it	cs
 80176f4:	461f      	movcs	r7, r3
 80176f6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80176f8:	9a03      	ldr	r2, [sp, #12]
 80176fa:	4293      	cmp	r3, r2
 80176fc:	db01      	blt.n	8017702 <_vfprintf_r+0xf92>
 80176fe:	07eb      	lsls	r3, r5, #31
 8017700:	d50e      	bpl.n	8017720 <_vfprintf_r+0xfb0>
 8017702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017704:	6023      	str	r3, [r4, #0]
 8017706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017708:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801770a:	6063      	str	r3, [r4, #4]
 801770c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801770e:	4413      	add	r3, r2
 8017710:	9320      	str	r3, [sp, #128]	@ 0x80
 8017712:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017714:	3301      	adds	r3, #1
 8017716:	2b07      	cmp	r3, #7
 8017718:	931f      	str	r3, [sp, #124]	@ 0x7c
 801771a:	f300 80e3 	bgt.w	80178e4 <_vfprintf_r+0x1174>
 801771e:	3408      	adds	r4, #8
 8017720:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017722:	9a03      	ldr	r2, [sp, #12]
 8017724:	eba2 0803 	sub.w	r8, r2, r3
 8017728:	eb0a 0302 	add.w	r3, sl, r2
 801772c:	1bdb      	subs	r3, r3, r7
 801772e:	4598      	cmp	r8, r3
 8017730:	bfa8      	it	ge
 8017732:	4698      	movge	r8, r3
 8017734:	f1b8 0f00 	cmp.w	r8, #0
 8017738:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801773a:	dd0a      	ble.n	8017752 <_vfprintf_r+0xfe2>
 801773c:	4443      	add	r3, r8
 801773e:	9320      	str	r3, [sp, #128]	@ 0x80
 8017740:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017742:	3301      	adds	r3, #1
 8017744:	2b07      	cmp	r3, #7
 8017746:	e9c4 7800 	strd	r7, r8, [r4]
 801774a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801774c:	f300 80d4 	bgt.w	80178f8 <_vfprintf_r+0x1188>
 8017750:	3408      	adds	r4, #8
 8017752:	9e18      	ldr	r6, [sp, #96]	@ 0x60
 8017754:	9b03      	ldr	r3, [sp, #12]
 8017756:	f1b8 0f00 	cmp.w	r8, #0
 801775a:	eba3 0606 	sub.w	r6, r3, r6
 801775e:	bfa8      	it	ge
 8017760:	eba6 0608 	subge.w	r6, r6, r8
 8017764:	2e00      	cmp	r6, #0
 8017766:	f77f ac12 	ble.w	8016f8e <_vfprintf_r+0x81e>
 801776a:	4f68      	ldr	r7, [pc, #416]	@ (801790c <_vfprintf_r+0x119c>)
 801776c:	f04f 0810 	mov.w	r8, #16
 8017770:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8017774:	2e10      	cmp	r6, #16
 8017776:	f103 0301 	add.w	r3, r3, #1
 801777a:	f104 0108 	add.w	r1, r4, #8
 801777e:	6027      	str	r7, [r4, #0]
 8017780:	f77f aebf 	ble.w	8017502 <_vfprintf_r+0xd92>
 8017784:	3210      	adds	r2, #16
 8017786:	2b07      	cmp	r3, #7
 8017788:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 801778c:	f8c4 8004 	str.w	r8, [r4, #4]
 8017790:	dd08      	ble.n	80177a4 <_vfprintf_r+0x1034>
 8017792:	9802      	ldr	r0, [sp, #8]
 8017794:	aa1e      	add	r2, sp, #120	@ 0x78
 8017796:	4659      	mov	r1, fp
 8017798:	f000 fa0c 	bl	8017bb4 <__sprint_r>
 801779c:	2800      	cmp	r0, #0
 801779e:	f040 8162 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80177a2:	a921      	add	r1, sp, #132	@ 0x84
 80177a4:	3e10      	subs	r6, #16
 80177a6:	460c      	mov	r4, r1
 80177a8:	e7e2      	b.n	8017770 <_vfprintf_r+0x1000>
 80177aa:	9802      	ldr	r0, [sp, #8]
 80177ac:	aa1e      	add	r2, sp, #120	@ 0x78
 80177ae:	4659      	mov	r1, fp
 80177b0:	f000 fa00 	bl	8017bb4 <__sprint_r>
 80177b4:	2800      	cmp	r0, #0
 80177b6:	f040 8156 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80177ba:	ac21      	add	r4, sp, #132	@ 0x84
 80177bc:	e76a      	b.n	8017694 <_vfprintf_r+0xf24>
 80177be:	2010      	movs	r0, #16
 80177c0:	4402      	add	r2, r0
 80177c2:	2b07      	cmp	r3, #7
 80177c4:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80177c8:	6060      	str	r0, [r4, #4]
 80177ca:	dd08      	ble.n	80177de <_vfprintf_r+0x106e>
 80177cc:	9802      	ldr	r0, [sp, #8]
 80177ce:	aa1e      	add	r2, sp, #120	@ 0x78
 80177d0:	4659      	mov	r1, fp
 80177d2:	f000 f9ef 	bl	8017bb4 <__sprint_r>
 80177d6:	2800      	cmp	r0, #0
 80177d8:	f040 8145 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80177dc:	a921      	add	r1, sp, #132	@ 0x84
 80177de:	3e10      	subs	r6, #16
 80177e0:	460c      	mov	r4, r1
 80177e2:	e75d      	b.n	80176a0 <_vfprintf_r+0xf30>
 80177e4:	460c      	mov	r4, r1
 80177e6:	e776      	b.n	80176d6 <_vfprintf_r+0xf66>
 80177e8:	f1b8 0f00 	cmp.w	r8, #0
 80177ec:	dd4a      	ble.n	8017884 <_vfprintf_r+0x1114>
 80177ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80177f2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80177f4:	6023      	str	r3, [r4, #0]
 80177f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80177fa:	6063      	str	r3, [r4, #4]
 80177fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80177fe:	4413      	add	r3, r2
 8017800:	9320      	str	r3, [sp, #128]	@ 0x80
 8017802:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8017804:	3301      	adds	r3, #1
 8017806:	2b07      	cmp	r3, #7
 8017808:	931f      	str	r3, [sp, #124]	@ 0x7c
 801780a:	dc42      	bgt.n	8017892 <_vfprintf_r+0x1122>
 801780c:	3408      	adds	r4, #8
 801780e:	9b03      	ldr	r3, [sp, #12]
 8017810:	4453      	add	r3, sl
 8017812:	1bda      	subs	r2, r3, r7
 8017814:	9b07      	ldr	r3, [sp, #28]
 8017816:	781b      	ldrb	r3, [r3, #0]
 8017818:	429a      	cmp	r2, r3
 801781a:	bfa8      	it	ge
 801781c:	461a      	movge	r2, r3
 801781e:	2a00      	cmp	r2, #0
 8017820:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017822:	9204      	str	r2, [sp, #16]
 8017824:	dd09      	ble.n	801783a <_vfprintf_r+0x10ca>
 8017826:	4413      	add	r3, r2
 8017828:	9320      	str	r3, [sp, #128]	@ 0x80
 801782a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801782c:	3301      	adds	r3, #1
 801782e:	2b07      	cmp	r3, #7
 8017830:	e9c4 7200 	strd	r7, r2, [r4]
 8017834:	931f      	str	r3, [sp, #124]	@ 0x7c
 8017836:	dc36      	bgt.n	80178a6 <_vfprintf_r+0x1136>
 8017838:	3408      	adds	r4, #8
 801783a:	9b07      	ldr	r3, [sp, #28]
 801783c:	781e      	ldrb	r6, [r3, #0]
 801783e:	9b04      	ldr	r3, [sp, #16]
 8017840:	2b00      	cmp	r3, #0
 8017842:	bfa8      	it	ge
 8017844:	1af6      	subge	r6, r6, r3
 8017846:	2e00      	cmp	r6, #0
 8017848:	dd18      	ble.n	801787c <_vfprintf_r+0x110c>
 801784a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 801784e:	482f      	ldr	r0, [pc, #188]	@ (801790c <_vfprintf_r+0x119c>)
 8017850:	6020      	str	r0, [r4, #0]
 8017852:	2e10      	cmp	r6, #16
 8017854:	f103 0301 	add.w	r3, r3, #1
 8017858:	f104 0108 	add.w	r1, r4, #8
 801785c:	dc2d      	bgt.n	80178ba <_vfprintf_r+0x114a>
 801785e:	6066      	str	r6, [r4, #4]
 8017860:	2b07      	cmp	r3, #7
 8017862:	4416      	add	r6, r2
 8017864:	e9cd 361f 	strd	r3, r6, [sp, #124]	@ 0x7c
 8017868:	dd3a      	ble.n	80178e0 <_vfprintf_r+0x1170>
 801786a:	9802      	ldr	r0, [sp, #8]
 801786c:	aa1e      	add	r2, sp, #120	@ 0x78
 801786e:	4659      	mov	r1, fp
 8017870:	f000 f9a0 	bl	8017bb4 <__sprint_r>
 8017874:	2800      	cmp	r0, #0
 8017876:	f040 80f6 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 801787a:	ac21      	add	r4, sp, #132	@ 0x84
 801787c:	9b07      	ldr	r3, [sp, #28]
 801787e:	781b      	ldrb	r3, [r3, #0]
 8017880:	441f      	add	r7, r3
 8017882:	e72b      	b.n	80176dc <_vfprintf_r+0xf6c>
 8017884:	9b07      	ldr	r3, [sp, #28]
 8017886:	3b01      	subs	r3, #1
 8017888:	9307      	str	r3, [sp, #28]
 801788a:	9b06      	ldr	r3, [sp, #24]
 801788c:	3b01      	subs	r3, #1
 801788e:	9306      	str	r3, [sp, #24]
 8017890:	e7af      	b.n	80177f2 <_vfprintf_r+0x1082>
 8017892:	9802      	ldr	r0, [sp, #8]
 8017894:	aa1e      	add	r2, sp, #120	@ 0x78
 8017896:	4659      	mov	r1, fp
 8017898:	f000 f98c 	bl	8017bb4 <__sprint_r>
 801789c:	2800      	cmp	r0, #0
 801789e:	f040 80e2 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80178a2:	ac21      	add	r4, sp, #132	@ 0x84
 80178a4:	e7b3      	b.n	801780e <_vfprintf_r+0x109e>
 80178a6:	9802      	ldr	r0, [sp, #8]
 80178a8:	aa1e      	add	r2, sp, #120	@ 0x78
 80178aa:	4659      	mov	r1, fp
 80178ac:	f000 f982 	bl	8017bb4 <__sprint_r>
 80178b0:	2800      	cmp	r0, #0
 80178b2:	f040 80d8 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80178b6:	ac21      	add	r4, sp, #132	@ 0x84
 80178b8:	e7bf      	b.n	801783a <_vfprintf_r+0x10ca>
 80178ba:	2010      	movs	r0, #16
 80178bc:	4402      	add	r2, r0
 80178be:	2b07      	cmp	r3, #7
 80178c0:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 80178c4:	6060      	str	r0, [r4, #4]
 80178c6:	dd08      	ble.n	80178da <_vfprintf_r+0x116a>
 80178c8:	9802      	ldr	r0, [sp, #8]
 80178ca:	aa1e      	add	r2, sp, #120	@ 0x78
 80178cc:	4659      	mov	r1, fp
 80178ce:	f000 f971 	bl	8017bb4 <__sprint_r>
 80178d2:	2800      	cmp	r0, #0
 80178d4:	f040 80c7 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80178d8:	a921      	add	r1, sp, #132	@ 0x84
 80178da:	3e10      	subs	r6, #16
 80178dc:	460c      	mov	r4, r1
 80178de:	e7b4      	b.n	801784a <_vfprintf_r+0x10da>
 80178e0:	460c      	mov	r4, r1
 80178e2:	e7cb      	b.n	801787c <_vfprintf_r+0x110c>
 80178e4:	9802      	ldr	r0, [sp, #8]
 80178e6:	aa1e      	add	r2, sp, #120	@ 0x78
 80178e8:	4659      	mov	r1, fp
 80178ea:	f000 f963 	bl	8017bb4 <__sprint_r>
 80178ee:	2800      	cmp	r0, #0
 80178f0:	f040 80b9 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 80178f4:	ac21      	add	r4, sp, #132	@ 0x84
 80178f6:	e713      	b.n	8017720 <_vfprintf_r+0xfb0>
 80178f8:	9802      	ldr	r0, [sp, #8]
 80178fa:	aa1e      	add	r2, sp, #120	@ 0x78
 80178fc:	4659      	mov	r1, fp
 80178fe:	f000 f959 	bl	8017bb4 <__sprint_r>
 8017902:	2800      	cmp	r0, #0
 8017904:	f040 80af 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017908:	ac21      	add	r4, sp, #132	@ 0x84
 801790a:	e722      	b.n	8017752 <_vfprintf_r+0xfe2>
 801790c:	0801abdb 	.word	0x0801abdb
 8017910:	9803      	ldr	r0, [sp, #12]
 8017912:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8017914:	2801      	cmp	r0, #1
 8017916:	f103 0201 	add.w	r2, r3, #1
 801791a:	f101 0101 	add.w	r1, r1, #1
 801791e:	f104 0308 	add.w	r3, r4, #8
 8017922:	dc01      	bgt.n	8017928 <_vfprintf_r+0x11b8>
 8017924:	07ee      	lsls	r6, r5, #31
 8017926:	d572      	bpl.n	8017a0e <_vfprintf_r+0x129e>
 8017928:	2001      	movs	r0, #1
 801792a:	2907      	cmp	r1, #7
 801792c:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8017930:	f8c4 a000 	str.w	sl, [r4]
 8017934:	6060      	str	r0, [r4, #4]
 8017936:	dd08      	ble.n	801794a <_vfprintf_r+0x11da>
 8017938:	9802      	ldr	r0, [sp, #8]
 801793a:	aa1e      	add	r2, sp, #120	@ 0x78
 801793c:	4659      	mov	r1, fp
 801793e:	f000 f939 	bl	8017bb4 <__sprint_r>
 8017942:	2800      	cmp	r0, #0
 8017944:	f040 808f 	bne.w	8017a66 <_vfprintf_r+0x12f6>
 8017948:	ab21      	add	r3, sp, #132	@ 0x84
 801794a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801794c:	601a      	str	r2, [r3, #0]
 801794e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017950:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8017952:	605a      	str	r2, [r3, #4]
 8017954:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017956:	440a      	add	r2, r1
 8017958:	9220      	str	r2, [sp, #128]	@ 0x80
 801795a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801795c:	3201      	adds	r2, #1
 801795e:	2a07      	cmp	r2, #7
 8017960:	921f      	str	r2, [sp, #124]	@ 0x7c
 8017962:	dc25      	bgt.n	80179b0 <_vfprintf_r+0x1240>
 8017964:	3308      	adds	r3, #8
 8017966:	9803      	ldr	r0, [sp, #12]
 8017968:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801796c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017970:	e9dd 121f 	ldrd	r1, r2, [sp, #124]	@ 0x7c
 8017974:	f100 34ff 	add.w	r4, r0, #4294967295
 8017978:	d023      	beq.n	80179c2 <_vfprintf_r+0x1252>
 801797a:	f10a 0001 	add.w	r0, sl, #1
 801797e:	e9c3 0400 	strd	r0, r4, [r3]
 8017982:	9803      	ldr	r0, [sp, #12]
 8017984:	3101      	adds	r1, #1
 8017986:	3a01      	subs	r2, #1
 8017988:	4402      	add	r2, r0
 801798a:	2907      	cmp	r1, #7
 801798c:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8017990:	dd46      	ble.n	8017a20 <_vfprintf_r+0x12b0>
 8017992:	9802      	ldr	r0, [sp, #8]
 8017994:	aa1e      	add	r2, sp, #120	@ 0x78
 8017996:	4659      	mov	r1, fp
 8017998:	f000 f90c 	bl	8017bb4 <__sprint_r>
 801799c:	2800      	cmp	r0, #0
 801799e:	d162      	bne.n	8017a66 <_vfprintf_r+0x12f6>
 80179a0:	ab21      	add	r3, sp, #132	@ 0x84
 80179a2:	aa1a      	add	r2, sp, #104	@ 0x68
 80179a4:	601a      	str	r2, [r3, #0]
 80179a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80179a8:	605a      	str	r2, [r3, #4]
 80179aa:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80179ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80179ae:	e62a      	b.n	8017606 <_vfprintf_r+0xe96>
 80179b0:	9802      	ldr	r0, [sp, #8]
 80179b2:	aa1e      	add	r2, sp, #120	@ 0x78
 80179b4:	4659      	mov	r1, fp
 80179b6:	f000 f8fd 	bl	8017bb4 <__sprint_r>
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d153      	bne.n	8017a66 <_vfprintf_r+0x12f6>
 80179be:	ab21      	add	r3, sp, #132	@ 0x84
 80179c0:	e7d1      	b.n	8017966 <_vfprintf_r+0x11f6>
 80179c2:	9a03      	ldr	r2, [sp, #12]
 80179c4:	2a01      	cmp	r2, #1
 80179c6:	ddec      	ble.n	80179a2 <_vfprintf_r+0x1232>
 80179c8:	4e58      	ldr	r6, [pc, #352]	@ (8017b2c <_vfprintf_r+0x13bc>)
 80179ca:	2710      	movs	r7, #16
 80179cc:	e9dd 211f 	ldrd	r2, r1, [sp, #124]	@ 0x7c
 80179d0:	2c10      	cmp	r4, #16
 80179d2:	f102 0201 	add.w	r2, r2, #1
 80179d6:	f103 0008 	add.w	r0, r3, #8
 80179da:	601e      	str	r6, [r3, #0]
 80179dc:	dc07      	bgt.n	80179ee <_vfprintf_r+0x127e>
 80179de:	4421      	add	r1, r4
 80179e0:	2a07      	cmp	r2, #7
 80179e2:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80179e6:	605c      	str	r4, [r3, #4]
 80179e8:	dcd3      	bgt.n	8017992 <_vfprintf_r+0x1222>
 80179ea:	4603      	mov	r3, r0
 80179ec:	e7d9      	b.n	80179a2 <_vfprintf_r+0x1232>
 80179ee:	3110      	adds	r1, #16
 80179f0:	2a07      	cmp	r2, #7
 80179f2:	e9cd 211f 	strd	r2, r1, [sp, #124]	@ 0x7c
 80179f6:	605f      	str	r7, [r3, #4]
 80179f8:	dd06      	ble.n	8017a08 <_vfprintf_r+0x1298>
 80179fa:	9802      	ldr	r0, [sp, #8]
 80179fc:	aa1e      	add	r2, sp, #120	@ 0x78
 80179fe:	4659      	mov	r1, fp
 8017a00:	f000 f8d8 	bl	8017bb4 <__sprint_r>
 8017a04:	bb78      	cbnz	r0, 8017a66 <_vfprintf_r+0x12f6>
 8017a06:	a821      	add	r0, sp, #132	@ 0x84
 8017a08:	3c10      	subs	r4, #16
 8017a0a:	4603      	mov	r3, r0
 8017a0c:	e7de      	b.n	80179cc <_vfprintf_r+0x125c>
 8017a0e:	2001      	movs	r0, #1
 8017a10:	2907      	cmp	r1, #7
 8017a12:	e9cd 121f 	strd	r1, r2, [sp, #124]	@ 0x7c
 8017a16:	f8c4 a000 	str.w	sl, [r4]
 8017a1a:	6060      	str	r0, [r4, #4]
 8017a1c:	ddc1      	ble.n	80179a2 <_vfprintf_r+0x1232>
 8017a1e:	e7b8      	b.n	8017992 <_vfprintf_r+0x1222>
 8017a20:	3308      	adds	r3, #8
 8017a22:	e7be      	b.n	80179a2 <_vfprintf_r+0x1232>
 8017a24:	460c      	mov	r4, r1
 8017a26:	f7ff bab2 	b.w	8016f8e <_vfprintf_r+0x81e>
 8017a2a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8017a2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017a2e:	1a9d      	subs	r5, r3, r2
 8017a30:	2d00      	cmp	r5, #0
 8017a32:	f77f aaaf 	ble.w	8016f94 <_vfprintf_r+0x824>
 8017a36:	4e3e      	ldr	r6, [pc, #248]	@ (8017b30 <_vfprintf_r+0x13c0>)
 8017a38:	2710      	movs	r7, #16
 8017a3a:	e9dd 321f 	ldrd	r3, r2, [sp, #124]	@ 0x7c
 8017a3e:	2d10      	cmp	r5, #16
 8017a40:	f103 0301 	add.w	r3, r3, #1
 8017a44:	6026      	str	r6, [r4, #0]
 8017a46:	dc18      	bgt.n	8017a7a <_vfprintf_r+0x130a>
 8017a48:	6065      	str	r5, [r4, #4]
 8017a4a:	2b07      	cmp	r3, #7
 8017a4c:	4415      	add	r5, r2
 8017a4e:	e9cd 351f 	strd	r3, r5, [sp, #124]	@ 0x7c
 8017a52:	f77f aa9f 	ble.w	8016f94 <_vfprintf_r+0x824>
 8017a56:	9802      	ldr	r0, [sp, #8]
 8017a58:	aa1e      	add	r2, sp, #120	@ 0x78
 8017a5a:	4659      	mov	r1, fp
 8017a5c:	f000 f8aa 	bl	8017bb4 <__sprint_r>
 8017a60:	2800      	cmp	r0, #0
 8017a62:	f43f aa97 	beq.w	8016f94 <_vfprintf_r+0x824>
 8017a66:	f1b9 0f00 	cmp.w	r9, #0
 8017a6a:	f43f a8d3 	beq.w	8016c14 <_vfprintf_r+0x4a4>
 8017a6e:	9802      	ldr	r0, [sp, #8]
 8017a70:	4649      	mov	r1, r9
 8017a72:	f7fd fa87 	bl	8014f84 <_free_r>
 8017a76:	f7ff b8cd 	b.w	8016c14 <_vfprintf_r+0x4a4>
 8017a7a:	3210      	adds	r2, #16
 8017a7c:	2b07      	cmp	r3, #7
 8017a7e:	e9cd 321f 	strd	r3, r2, [sp, #124]	@ 0x7c
 8017a82:	6067      	str	r7, [r4, #4]
 8017a84:	dc02      	bgt.n	8017a8c <_vfprintf_r+0x131c>
 8017a86:	3408      	adds	r4, #8
 8017a88:	3d10      	subs	r5, #16
 8017a8a:	e7d6      	b.n	8017a3a <_vfprintf_r+0x12ca>
 8017a8c:	9802      	ldr	r0, [sp, #8]
 8017a8e:	aa1e      	add	r2, sp, #120	@ 0x78
 8017a90:	4659      	mov	r1, fp
 8017a92:	f000 f88f 	bl	8017bb4 <__sprint_r>
 8017a96:	2800      	cmp	r0, #0
 8017a98:	d1e5      	bne.n	8017a66 <_vfprintf_r+0x12f6>
 8017a9a:	ac21      	add	r4, sp, #132	@ 0x84
 8017a9c:	e7f4      	b.n	8017a88 <_vfprintf_r+0x1318>
 8017a9e:	9802      	ldr	r0, [sp, #8]
 8017aa0:	4649      	mov	r1, r9
 8017aa2:	f7fd fa6f 	bl	8014f84 <_free_r>
 8017aa6:	f7ff ba8d 	b.w	8016fc4 <_vfprintf_r+0x854>
 8017aaa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8017aac:	b91b      	cbnz	r3, 8017ab6 <_vfprintf_r+0x1346>
 8017aae:	2300      	movs	r3, #0
 8017ab0:	931f      	str	r3, [sp, #124]	@ 0x7c
 8017ab2:	f7ff b8af 	b.w	8016c14 <_vfprintf_r+0x4a4>
 8017ab6:	9802      	ldr	r0, [sp, #8]
 8017ab8:	aa1e      	add	r2, sp, #120	@ 0x78
 8017aba:	4659      	mov	r1, fp
 8017abc:	f000 f87a 	bl	8017bb4 <__sprint_r>
 8017ac0:	2800      	cmp	r0, #0
 8017ac2:	d0f4      	beq.n	8017aae <_vfprintf_r+0x133e>
 8017ac4:	f7ff b8a6 	b.w	8016c14 <_vfprintf_r+0x4a4>
 8017ac8:	ea57 0208 	orrs.w	r2, r7, r8
 8017acc:	9506      	str	r5, [sp, #24]
 8017ace:	f43f ab8d 	beq.w	80171ec <_vfprintf_r+0xa7c>
 8017ad2:	2b01      	cmp	r3, #1
 8017ad4:	f43f ac0e 	beq.w	80172f4 <_vfprintf_r+0xb84>
 8017ad8:	2b02      	cmp	r3, #2
 8017ada:	f50d 7a94 	add.w	sl, sp, #296	@ 0x128
 8017ade:	f43f ac55 	beq.w	801738c <_vfprintf_r+0xc1c>
 8017ae2:	f007 0307 	and.w	r3, r7, #7
 8017ae6:	08ff      	lsrs	r7, r7, #3
 8017ae8:	ea47 7748 	orr.w	r7, r7, r8, lsl #29
 8017aec:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8017af0:	3330      	adds	r3, #48	@ 0x30
 8017af2:	ea57 0108 	orrs.w	r1, r7, r8
 8017af6:	4652      	mov	r2, sl
 8017af8:	f80a 3d01 	strb.w	r3, [sl, #-1]!
 8017afc:	d1f1      	bne.n	8017ae2 <_vfprintf_r+0x1372>
 8017afe:	9906      	ldr	r1, [sp, #24]
 8017b00:	07cf      	lsls	r7, r1, #31
 8017b02:	d506      	bpl.n	8017b12 <_vfprintf_r+0x13a2>
 8017b04:	2b30      	cmp	r3, #48	@ 0x30
 8017b06:	d004      	beq.n	8017b12 <_vfprintf_r+0x13a2>
 8017b08:	2330      	movs	r3, #48	@ 0x30
 8017b0a:	f80a 3c01 	strb.w	r3, [sl, #-1]
 8017b0e:	f1a2 0a02 	sub.w	sl, r2, #2
 8017b12:	ab4a      	add	r3, sp, #296	@ 0x128
 8017b14:	9d06      	ldr	r5, [sp, #24]
 8017b16:	960c      	str	r6, [sp, #48]	@ 0x30
 8017b18:	f04f 0900 	mov.w	r9, #0
 8017b1c:	eba3 060a 	sub.w	r6, r3, sl
 8017b20:	46c8      	mov	r8, r9
 8017b22:	f8cd 9018 	str.w	r9, [sp, #24]
 8017b26:	464f      	mov	r7, r9
 8017b28:	f7ff b983 	b.w	8016e32 <_vfprintf_r+0x6c2>
 8017b2c:	0801abdb 	.word	0x0801abdb
 8017b30:	0801abeb 	.word	0x0801abeb

08017b34 <__sbprintf>:
 8017b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b36:	461f      	mov	r7, r3
 8017b38:	898b      	ldrh	r3, [r1, #12]
 8017b3a:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8017b3e:	f023 0302 	bic.w	r3, r3, #2
 8017b42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017b46:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8017b48:	9319      	str	r3, [sp, #100]	@ 0x64
 8017b4a:	89cb      	ldrh	r3, [r1, #14]
 8017b4c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017b50:	69cb      	ldr	r3, [r1, #28]
 8017b52:	9307      	str	r3, [sp, #28]
 8017b54:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8017b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8017b58:	ab1a      	add	r3, sp, #104	@ 0x68
 8017b5a:	9300      	str	r3, [sp, #0]
 8017b5c:	9304      	str	r3, [sp, #16]
 8017b5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017b62:	4615      	mov	r5, r2
 8017b64:	4606      	mov	r6, r0
 8017b66:	9302      	str	r3, [sp, #8]
 8017b68:	9305      	str	r3, [sp, #20]
 8017b6a:	a816      	add	r0, sp, #88	@ 0x58
 8017b6c:	2300      	movs	r3, #0
 8017b6e:	460c      	mov	r4, r1
 8017b70:	9306      	str	r3, [sp, #24]
 8017b72:	f7fd f97b 	bl	8014e6c <__retarget_lock_init_recursive>
 8017b76:	462a      	mov	r2, r5
 8017b78:	463b      	mov	r3, r7
 8017b7a:	4669      	mov	r1, sp
 8017b7c:	4630      	mov	r0, r6
 8017b7e:	f7fe fdf7 	bl	8016770 <_vfprintf_r>
 8017b82:	1e05      	subs	r5, r0, #0
 8017b84:	db07      	blt.n	8017b96 <__sbprintf+0x62>
 8017b86:	4669      	mov	r1, sp
 8017b88:	4630      	mov	r0, r6
 8017b8a:	f000 f925 	bl	8017dd8 <_fflush_r>
 8017b8e:	2800      	cmp	r0, #0
 8017b90:	bf18      	it	ne
 8017b92:	f04f 35ff 	movne.w	r5, #4294967295
 8017b96:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8017b9a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8017b9c:	065b      	lsls	r3, r3, #25
 8017b9e:	bf42      	ittt	mi
 8017ba0:	89a3      	ldrhmi	r3, [r4, #12]
 8017ba2:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8017ba6:	81a3      	strhmi	r3, [r4, #12]
 8017ba8:	f7fd f961 	bl	8014e6e <__retarget_lock_close_recursive>
 8017bac:	4628      	mov	r0, r5
 8017bae:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8017bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08017bb4 <__sprint_r>:
 8017bb4:	6893      	ldr	r3, [r2, #8]
 8017bb6:	b510      	push	{r4, lr}
 8017bb8:	4614      	mov	r4, r2
 8017bba:	b133      	cbz	r3, 8017bca <__sprint_r+0x16>
 8017bbc:	f7fc fdae 	bl	801471c <__sfvwrite_r>
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	60a3      	str	r3, [r4, #8]
 8017bc4:	2300      	movs	r3, #0
 8017bc6:	6063      	str	r3, [r4, #4]
 8017bc8:	bd10      	pop	{r4, pc}
 8017bca:	4618      	mov	r0, r3
 8017bcc:	e7fa      	b.n	8017bc4 <__sprint_r+0x10>

08017bce <__ssprint_r>:
 8017bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017bd2:	6815      	ldr	r5, [r2, #0]
 8017bd4:	4606      	mov	r6, r0
 8017bd6:	460f      	mov	r7, r1
 8017bd8:	4614      	mov	r4, r2
 8017bda:	68a3      	ldr	r3, [r4, #8]
 8017bdc:	3508      	adds	r5, #8
 8017bde:	b92b      	cbnz	r3, 8017bec <__ssprint_r+0x1e>
 8017be0:	2000      	movs	r0, #0
 8017be2:	2300      	movs	r3, #0
 8017be4:	e9c4 3301 	strd	r3, r3, [r4, #4]
 8017be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bec:	6863      	ldr	r3, [r4, #4]
 8017bee:	1e5a      	subs	r2, r3, #1
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	6062      	str	r2, [r4, #4]
 8017bf4:	ddf4      	ble.n	8017be0 <__ssprint_r+0x12>
 8017bf6:	f855 8c04 	ldr.w	r8, [r5, #-4]
 8017bfa:	f1b8 0f00 	cmp.w	r8, #0
 8017bfe:	d0ec      	beq.n	8017bda <__ssprint_r+0xc>
 8017c00:	4643      	mov	r3, r8
 8017c02:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8017c06:	4639      	mov	r1, r7
 8017c08:	4630      	mov	r0, r6
 8017c0a:	f001 fb2d 	bl	8019268 <__ssputs_r>
 8017c0e:	1c43      	adds	r3, r0, #1
 8017c10:	d0e7      	beq.n	8017be2 <__ssprint_r+0x14>
 8017c12:	68a2      	ldr	r2, [r4, #8]
 8017c14:	eba2 0208 	sub.w	r2, r2, r8
 8017c18:	60a2      	str	r2, [r4, #8]
 8017c1a:	e7de      	b.n	8017bda <__ssprint_r+0xc>

08017c1c <_fclose_r>:
 8017c1c:	b570      	push	{r4, r5, r6, lr}
 8017c1e:	4605      	mov	r5, r0
 8017c20:	460c      	mov	r4, r1
 8017c22:	b1b9      	cbz	r1, 8017c54 <_fclose_r+0x38>
 8017c24:	b118      	cbz	r0, 8017c2e <_fclose_r+0x12>
 8017c26:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017c28:	b90b      	cbnz	r3, 8017c2e <_fclose_r+0x12>
 8017c2a:	f7fc fd05 	bl	8014638 <__sinit>
 8017c2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8017c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c34:	07d6      	lsls	r6, r2, #31
 8017c36:	d404      	bmi.n	8017c42 <_fclose_r+0x26>
 8017c38:	0598      	lsls	r0, r3, #22
 8017c3a:	d40e      	bmi.n	8017c5a <_fclose_r+0x3e>
 8017c3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c3e:	f7fd f917 	bl	8014e70 <__retarget_lock_acquire_recursive>
 8017c42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c46:	b943      	cbnz	r3, 8017c5a <_fclose_r+0x3e>
 8017c48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017c4a:	07d9      	lsls	r1, r3, #31
 8017c4c:	d402      	bmi.n	8017c54 <_fclose_r+0x38>
 8017c4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017c50:	f7fd f90f 	bl	8014e72 <__retarget_lock_release_recursive>
 8017c54:	2600      	movs	r6, #0
 8017c56:	4630      	mov	r0, r6
 8017c58:	bd70      	pop	{r4, r5, r6, pc}
 8017c5a:	4621      	mov	r1, r4
 8017c5c:	4628      	mov	r0, r5
 8017c5e:	f000 f833 	bl	8017cc8 <__sflush_r>
 8017c62:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8017c64:	4606      	mov	r6, r0
 8017c66:	b133      	cbz	r3, 8017c76 <_fclose_r+0x5a>
 8017c68:	69e1      	ldr	r1, [r4, #28]
 8017c6a:	4628      	mov	r0, r5
 8017c6c:	4798      	blx	r3
 8017c6e:	2800      	cmp	r0, #0
 8017c70:	bfb8      	it	lt
 8017c72:	f04f 36ff 	movlt.w	r6, #4294967295
 8017c76:	89a3      	ldrh	r3, [r4, #12]
 8017c78:	061a      	lsls	r2, r3, #24
 8017c7a:	d503      	bpl.n	8017c84 <_fclose_r+0x68>
 8017c7c:	6921      	ldr	r1, [r4, #16]
 8017c7e:	4628      	mov	r0, r5
 8017c80:	f7fd f980 	bl	8014f84 <_free_r>
 8017c84:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017c86:	b141      	cbz	r1, 8017c9a <_fclose_r+0x7e>
 8017c88:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8017c8c:	4299      	cmp	r1, r3
 8017c8e:	d002      	beq.n	8017c96 <_fclose_r+0x7a>
 8017c90:	4628      	mov	r0, r5
 8017c92:	f7fd f977 	bl	8014f84 <_free_r>
 8017c96:	2300      	movs	r3, #0
 8017c98:	6323      	str	r3, [r4, #48]	@ 0x30
 8017c9a:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8017c9c:	b121      	cbz	r1, 8017ca8 <_fclose_r+0x8c>
 8017c9e:	4628      	mov	r0, r5
 8017ca0:	f7fd f970 	bl	8014f84 <_free_r>
 8017ca4:	2300      	movs	r3, #0
 8017ca6:	6463      	str	r3, [r4, #68]	@ 0x44
 8017ca8:	f7fc fcba 	bl	8014620 <__sfp_lock_acquire>
 8017cac:	2300      	movs	r3, #0
 8017cae:	81a3      	strh	r3, [r4, #12]
 8017cb0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017cb2:	07db      	lsls	r3, r3, #31
 8017cb4:	d402      	bmi.n	8017cbc <_fclose_r+0xa0>
 8017cb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cb8:	f7fd f8db 	bl	8014e72 <__retarget_lock_release_recursive>
 8017cbc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017cbe:	f7fd f8d6 	bl	8014e6e <__retarget_lock_close_recursive>
 8017cc2:	f7fc fcb3 	bl	801462c <__sfp_lock_release>
 8017cc6:	e7c6      	b.n	8017c56 <_fclose_r+0x3a>

08017cc8 <__sflush_r>:
 8017cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ccc:	4605      	mov	r5, r0
 8017cce:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
 8017cd2:	0706      	lsls	r6, r0, #28
 8017cd4:	460c      	mov	r4, r1
 8017cd6:	d457      	bmi.n	8017d88 <__sflush_r+0xc0>
 8017cd8:	f440 6300 	orr.w	r3, r0, #2048	@ 0x800
 8017cdc:	818b      	strh	r3, [r1, #12]
 8017cde:	684b      	ldr	r3, [r1, #4]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	dc02      	bgt.n	8017cea <__sflush_r+0x22>
 8017ce4:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8017ce6:	2b00      	cmp	r3, #0
 8017ce8:	dd4c      	ble.n	8017d84 <__sflush_r+0xbc>
 8017cea:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017cec:	2e00      	cmp	r6, #0
 8017cee:	d049      	beq.n	8017d84 <__sflush_r+0xbc>
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	f410 5280 	ands.w	r2, r0, #4096	@ 0x1000
 8017cf6:	682f      	ldr	r7, [r5, #0]
 8017cf8:	69e1      	ldr	r1, [r4, #28]
 8017cfa:	602b      	str	r3, [r5, #0]
 8017cfc:	d034      	beq.n	8017d68 <__sflush_r+0xa0>
 8017cfe:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8017d00:	89a3      	ldrh	r3, [r4, #12]
 8017d02:	0759      	lsls	r1, r3, #29
 8017d04:	d505      	bpl.n	8017d12 <__sflush_r+0x4a>
 8017d06:	6863      	ldr	r3, [r4, #4]
 8017d08:	1ad2      	subs	r2, r2, r3
 8017d0a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017d0c:	b10b      	cbz	r3, 8017d12 <__sflush_r+0x4a>
 8017d0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8017d10:	1ad2      	subs	r2, r2, r3
 8017d12:	2300      	movs	r3, #0
 8017d14:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8017d16:	69e1      	ldr	r1, [r4, #28]
 8017d18:	4628      	mov	r0, r5
 8017d1a:	47b0      	blx	r6
 8017d1c:	1c43      	adds	r3, r0, #1
 8017d1e:	d106      	bne.n	8017d2e <__sflush_r+0x66>
 8017d20:	682a      	ldr	r2, [r5, #0]
 8017d22:	2a1d      	cmp	r2, #29
 8017d24:	d848      	bhi.n	8017db8 <__sflush_r+0xf0>
 8017d26:	4b2b      	ldr	r3, [pc, #172]	@ (8017dd4 <__sflush_r+0x10c>)
 8017d28:	40d3      	lsrs	r3, r2
 8017d2a:	07de      	lsls	r6, r3, #31
 8017d2c:	d544      	bpl.n	8017db8 <__sflush_r+0xf0>
 8017d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017d32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8017d36:	81a2      	strh	r2, [r4, #12]
 8017d38:	2200      	movs	r2, #0
 8017d3a:	6062      	str	r2, [r4, #4]
 8017d3c:	04d9      	lsls	r1, r3, #19
 8017d3e:	6922      	ldr	r2, [r4, #16]
 8017d40:	6022      	str	r2, [r4, #0]
 8017d42:	d504      	bpl.n	8017d4e <__sflush_r+0x86>
 8017d44:	1c42      	adds	r2, r0, #1
 8017d46:	d101      	bne.n	8017d4c <__sflush_r+0x84>
 8017d48:	682b      	ldr	r3, [r5, #0]
 8017d4a:	b903      	cbnz	r3, 8017d4e <__sflush_r+0x86>
 8017d4c:	6520      	str	r0, [r4, #80]	@ 0x50
 8017d4e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8017d50:	602f      	str	r7, [r5, #0]
 8017d52:	b1b9      	cbz	r1, 8017d84 <__sflush_r+0xbc>
 8017d54:	f104 0340 	add.w	r3, r4, #64	@ 0x40
 8017d58:	4299      	cmp	r1, r3
 8017d5a:	d002      	beq.n	8017d62 <__sflush_r+0x9a>
 8017d5c:	4628      	mov	r0, r5
 8017d5e:	f7fd f911 	bl	8014f84 <_free_r>
 8017d62:	2300      	movs	r3, #0
 8017d64:	6323      	str	r3, [r4, #48]	@ 0x30
 8017d66:	e00d      	b.n	8017d84 <__sflush_r+0xbc>
 8017d68:	2301      	movs	r3, #1
 8017d6a:	4628      	mov	r0, r5
 8017d6c:	47b0      	blx	r6
 8017d6e:	4602      	mov	r2, r0
 8017d70:	1c50      	adds	r0, r2, #1
 8017d72:	d1c5      	bne.n	8017d00 <__sflush_r+0x38>
 8017d74:	682b      	ldr	r3, [r5, #0]
 8017d76:	2b00      	cmp	r3, #0
 8017d78:	d0c2      	beq.n	8017d00 <__sflush_r+0x38>
 8017d7a:	2b1d      	cmp	r3, #29
 8017d7c:	d001      	beq.n	8017d82 <__sflush_r+0xba>
 8017d7e:	2b16      	cmp	r3, #22
 8017d80:	d11a      	bne.n	8017db8 <__sflush_r+0xf0>
 8017d82:	602f      	str	r7, [r5, #0]
 8017d84:	2000      	movs	r0, #0
 8017d86:	e01e      	b.n	8017dc6 <__sflush_r+0xfe>
 8017d88:	690f      	ldr	r7, [r1, #16]
 8017d8a:	2f00      	cmp	r7, #0
 8017d8c:	d0fa      	beq.n	8017d84 <__sflush_r+0xbc>
 8017d8e:	0783      	lsls	r3, r0, #30
 8017d90:	680e      	ldr	r6, [r1, #0]
 8017d92:	bf08      	it	eq
 8017d94:	694b      	ldreq	r3, [r1, #20]
 8017d96:	600f      	str	r7, [r1, #0]
 8017d98:	bf18      	it	ne
 8017d9a:	2300      	movne	r3, #0
 8017d9c:	eba6 0807 	sub.w	r8, r6, r7
 8017da0:	608b      	str	r3, [r1, #8]
 8017da2:	f1b8 0f00 	cmp.w	r8, #0
 8017da6:	dded      	ble.n	8017d84 <__sflush_r+0xbc>
 8017da8:	69e1      	ldr	r1, [r4, #28]
 8017daa:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 8017dac:	4643      	mov	r3, r8
 8017dae:	463a      	mov	r2, r7
 8017db0:	4628      	mov	r0, r5
 8017db2:	47b0      	blx	r6
 8017db4:	2800      	cmp	r0, #0
 8017db6:	dc08      	bgt.n	8017dca <__sflush_r+0x102>
 8017db8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017dbc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017dc0:	81a3      	strh	r3, [r4, #12]
 8017dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017dca:	4407      	add	r7, r0
 8017dcc:	eba8 0800 	sub.w	r8, r8, r0
 8017dd0:	e7e7      	b.n	8017da2 <__sflush_r+0xda>
 8017dd2:	bf00      	nop
 8017dd4:	20400001 	.word	0x20400001

08017dd8 <_fflush_r>:
 8017dd8:	b538      	push	{r3, r4, r5, lr}
 8017dda:	460c      	mov	r4, r1
 8017ddc:	4605      	mov	r5, r0
 8017dde:	b118      	cbz	r0, 8017de8 <_fflush_r+0x10>
 8017de0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8017de2:	b90b      	cbnz	r3, 8017de8 <_fflush_r+0x10>
 8017de4:	f7fc fc28 	bl	8014638 <__sinit>
 8017de8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 8017dec:	b1b8      	cbz	r0, 8017e1e <_fflush_r+0x46>
 8017dee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017df0:	07db      	lsls	r3, r3, #31
 8017df2:	d404      	bmi.n	8017dfe <_fflush_r+0x26>
 8017df4:	0581      	lsls	r1, r0, #22
 8017df6:	d402      	bmi.n	8017dfe <_fflush_r+0x26>
 8017df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017dfa:	f7fd f839 	bl	8014e70 <__retarget_lock_acquire_recursive>
 8017dfe:	4628      	mov	r0, r5
 8017e00:	4621      	mov	r1, r4
 8017e02:	f7ff ff61 	bl	8017cc8 <__sflush_r>
 8017e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8017e08:	07da      	lsls	r2, r3, #31
 8017e0a:	4605      	mov	r5, r0
 8017e0c:	d405      	bmi.n	8017e1a <_fflush_r+0x42>
 8017e0e:	89a3      	ldrh	r3, [r4, #12]
 8017e10:	059b      	lsls	r3, r3, #22
 8017e12:	d402      	bmi.n	8017e1a <_fflush_r+0x42>
 8017e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8017e16:	f7fd f82c 	bl	8014e72 <__retarget_lock_release_recursive>
 8017e1a:	4628      	mov	r0, r5
 8017e1c:	bd38      	pop	{r3, r4, r5, pc}
 8017e1e:	4605      	mov	r5, r0
 8017e20:	e7fb      	b.n	8017e1a <_fflush_r+0x42>

08017e22 <__swhatbuf_r>:
 8017e22:	b570      	push	{r4, r5, r6, lr}
 8017e24:	460c      	mov	r4, r1
 8017e26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e2a:	2900      	cmp	r1, #0
 8017e2c:	b096      	sub	sp, #88	@ 0x58
 8017e2e:	4615      	mov	r5, r2
 8017e30:	461e      	mov	r6, r3
 8017e32:	da07      	bge.n	8017e44 <__swhatbuf_r+0x22>
 8017e34:	89a1      	ldrh	r1, [r4, #12]
 8017e36:	f011 0180 	ands.w	r1, r1, #128	@ 0x80
 8017e3a:	d117      	bne.n	8017e6c <__swhatbuf_r+0x4a>
 8017e3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e40:	4608      	mov	r0, r1
 8017e42:	e00f      	b.n	8017e64 <__swhatbuf_r+0x42>
 8017e44:	466a      	mov	r2, sp
 8017e46:	f000 f867 	bl	8017f18 <_fstat_r>
 8017e4a:	2800      	cmp	r0, #0
 8017e4c:	dbf2      	blt.n	8017e34 <__swhatbuf_r+0x12>
 8017e4e:	9901      	ldr	r1, [sp, #4]
 8017e50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8017e54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8017e58:	4259      	negs	r1, r3
 8017e5a:	4159      	adcs	r1, r3
 8017e5c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8017e60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8017e64:	6031      	str	r1, [r6, #0]
 8017e66:	602b      	str	r3, [r5, #0]
 8017e68:	b016      	add	sp, #88	@ 0x58
 8017e6a:	bd70      	pop	{r4, r5, r6, pc}
 8017e6c:	2100      	movs	r1, #0
 8017e6e:	2340      	movs	r3, #64	@ 0x40
 8017e70:	e7e6      	b.n	8017e40 <__swhatbuf_r+0x1e>

08017e72 <__smakebuf_r>:
 8017e72:	898b      	ldrh	r3, [r1, #12]
 8017e74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017e76:	079d      	lsls	r5, r3, #30
 8017e78:	4606      	mov	r6, r0
 8017e7a:	460c      	mov	r4, r1
 8017e7c:	d507      	bpl.n	8017e8e <__smakebuf_r+0x1c>
 8017e7e:	f104 0343 	add.w	r3, r4, #67	@ 0x43
 8017e82:	6023      	str	r3, [r4, #0]
 8017e84:	6123      	str	r3, [r4, #16]
 8017e86:	2301      	movs	r3, #1
 8017e88:	6163      	str	r3, [r4, #20]
 8017e8a:	b003      	add	sp, #12
 8017e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017e8e:	ab01      	add	r3, sp, #4
 8017e90:	466a      	mov	r2, sp
 8017e92:	f7ff ffc6 	bl	8017e22 <__swhatbuf_r>
 8017e96:	9f00      	ldr	r7, [sp, #0]
 8017e98:	4605      	mov	r5, r0
 8017e9a:	4639      	mov	r1, r7
 8017e9c:	4630      	mov	r0, r6
 8017e9e:	f7fc f881 	bl	8013fa4 <_malloc_r>
 8017ea2:	b948      	cbnz	r0, 8017eb8 <__smakebuf_r+0x46>
 8017ea4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ea8:	059a      	lsls	r2, r3, #22
 8017eaa:	d4ee      	bmi.n	8017e8a <__smakebuf_r+0x18>
 8017eac:	f023 0303 	bic.w	r3, r3, #3
 8017eb0:	f043 0302 	orr.w	r3, r3, #2
 8017eb4:	81a3      	strh	r3, [r4, #12]
 8017eb6:	e7e2      	b.n	8017e7e <__smakebuf_r+0xc>
 8017eb8:	89a3      	ldrh	r3, [r4, #12]
 8017eba:	6020      	str	r0, [r4, #0]
 8017ebc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017ec0:	81a3      	strh	r3, [r4, #12]
 8017ec2:	9b01      	ldr	r3, [sp, #4]
 8017ec4:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8017ec8:	b15b      	cbz	r3, 8017ee2 <__smakebuf_r+0x70>
 8017eca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017ece:	4630      	mov	r0, r6
 8017ed0:	f000 f834 	bl	8017f3c <_isatty_r>
 8017ed4:	b128      	cbz	r0, 8017ee2 <__smakebuf_r+0x70>
 8017ed6:	89a3      	ldrh	r3, [r4, #12]
 8017ed8:	f023 0303 	bic.w	r3, r3, #3
 8017edc:	f043 0301 	orr.w	r3, r3, #1
 8017ee0:	81a3      	strh	r3, [r4, #12]
 8017ee2:	89a3      	ldrh	r3, [r4, #12]
 8017ee4:	431d      	orrs	r5, r3
 8017ee6:	81a5      	strh	r5, [r4, #12]
 8017ee8:	e7cf      	b.n	8017e8a <__smakebuf_r+0x18>

08017eea <strncpy>:
 8017eea:	b510      	push	{r4, lr}
 8017eec:	3901      	subs	r1, #1
 8017eee:	4603      	mov	r3, r0
 8017ef0:	b132      	cbz	r2, 8017f00 <strncpy+0x16>
 8017ef2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017ef6:	f803 4b01 	strb.w	r4, [r3], #1
 8017efa:	3a01      	subs	r2, #1
 8017efc:	2c00      	cmp	r4, #0
 8017efe:	d1f7      	bne.n	8017ef0 <strncpy+0x6>
 8017f00:	441a      	add	r2, r3
 8017f02:	2100      	movs	r1, #0
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d100      	bne.n	8017f0a <strncpy+0x20>
 8017f08:	bd10      	pop	{r4, pc}
 8017f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8017f0e:	e7f9      	b.n	8017f04 <strncpy+0x1a>

08017f10 <_localeconv_r>:
 8017f10:	4800      	ldr	r0, [pc, #0]	@ (8017f14 <_localeconv_r+0x4>)
 8017f12:	4770      	bx	lr
 8017f14:	2000067c 	.word	0x2000067c

08017f18 <_fstat_r>:
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4d07      	ldr	r5, [pc, #28]	@ (8017f38 <_fstat_r+0x20>)
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	4604      	mov	r4, r0
 8017f20:	4608      	mov	r0, r1
 8017f22:	4611      	mov	r1, r2
 8017f24:	602b      	str	r3, [r5, #0]
 8017f26:	f7fc f81e 	bl	8013f66 <_fstat>
 8017f2a:	1c43      	adds	r3, r0, #1
 8017f2c:	d102      	bne.n	8017f34 <_fstat_r+0x1c>
 8017f2e:	682b      	ldr	r3, [r5, #0]
 8017f30:	b103      	cbz	r3, 8017f34 <_fstat_r+0x1c>
 8017f32:	6023      	str	r3, [r4, #0]
 8017f34:	bd38      	pop	{r3, r4, r5, pc}
 8017f36:	bf00      	nop
 8017f38:	20003e08 	.word	0x20003e08

08017f3c <_isatty_r>:
 8017f3c:	b538      	push	{r3, r4, r5, lr}
 8017f3e:	4d06      	ldr	r5, [pc, #24]	@ (8017f58 <_isatty_r+0x1c>)
 8017f40:	2300      	movs	r3, #0
 8017f42:	4604      	mov	r4, r0
 8017f44:	4608      	mov	r0, r1
 8017f46:	602b      	str	r3, [r5, #0]
 8017f48:	f7fc f812 	bl	8013f70 <_isatty>
 8017f4c:	1c43      	adds	r3, r0, #1
 8017f4e:	d102      	bne.n	8017f56 <_isatty_r+0x1a>
 8017f50:	682b      	ldr	r3, [r5, #0]
 8017f52:	b103      	cbz	r3, 8017f56 <_isatty_r+0x1a>
 8017f54:	6023      	str	r3, [r4, #0]
 8017f56:	bd38      	pop	{r3, r4, r5, pc}
 8017f58:	20003e08 	.word	0x20003e08

08017f5c <__errno>:
 8017f5c:	4b01      	ldr	r3, [pc, #4]	@ (8017f64 <__errno+0x8>)
 8017f5e:	6818      	ldr	r0, [r3, #0]
 8017f60:	4770      	bx	lr
 8017f62:	bf00      	nop
 8017f64:	20000440 	.word	0x20000440

08017f68 <__libc_fini_array>:
 8017f68:	b538      	push	{r3, r4, r5, lr}
 8017f6a:	4d07      	ldr	r5, [pc, #28]	@ (8017f88 <__libc_fini_array+0x20>)
 8017f6c:	4c07      	ldr	r4, [pc, #28]	@ (8017f8c <__libc_fini_array+0x24>)
 8017f6e:	1b64      	subs	r4, r4, r5
 8017f70:	10a4      	asrs	r4, r4, #2
 8017f72:	b91c      	cbnz	r4, 8017f7c <__libc_fini_array+0x14>
 8017f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f78:	f001 bf70 	b.w	8019e5c <_fini>
 8017f7c:	3c01      	subs	r4, #1
 8017f7e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8017f82:	4798      	blx	r3
 8017f84:	e7f5      	b.n	8017f72 <__libc_fini_array+0xa>
 8017f86:	bf00      	nop
 8017f88:	0801ad28 	.word	0x0801ad28
 8017f8c:	0801ad2c 	.word	0x0801ad2c

08017f90 <frexp>:
 8017f90:	2200      	movs	r2, #0
 8017f92:	ee10 1a90 	vmov	r1, s1
 8017f96:	6002      	str	r2, [r0, #0]
 8017f98:	4a15      	ldr	r2, [pc, #84]	@ (8017ff0 <frexp+0x60>)
 8017f9a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	d821      	bhi.n	8017fe6 <frexp+0x56>
 8017fa2:	ee10 2a10 	vmov	r2, s0
 8017fa6:	431a      	orrs	r2, r3
 8017fa8:	d01d      	beq.n	8017fe6 <frexp+0x56>
 8017faa:	4a12      	ldr	r2, [pc, #72]	@ (8017ff4 <frexp+0x64>)
 8017fac:	400a      	ands	r2, r1
 8017fae:	b952      	cbnz	r2, 8017fc6 <frexp+0x36>
 8017fb0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8017fe8 <frexp+0x58>
 8017fb4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8017fb8:	ee10 1a90 	vmov	r1, s1
 8017fbc:	f06f 0235 	mvn.w	r2, #53	@ 0x35
 8017fc0:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8017fc4:	6002      	str	r2, [r0, #0]
 8017fc6:	6802      	ldr	r2, [r0, #0]
 8017fc8:	151b      	asrs	r3, r3, #20
 8017fca:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8017fce:	441a      	add	r2, r3
 8017fd0:	f36f 511e 	bfc	r1, #20, #11
 8017fd4:	6002      	str	r2, [r0, #0]
 8017fd6:	ec53 2b10 	vmov	r2, r3, d0
 8017fda:	f041 537f 	orr.w	r3, r1, #1069547520	@ 0x3fc00000
 8017fde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8017fe2:	ec43 2b10 	vmov	d0, r2, r3
 8017fe6:	4770      	bx	lr
 8017fe8:	00000000 	.word	0x00000000
 8017fec:	43500000 	.word	0x43500000
 8017ff0:	7fefffff 	.word	0x7fefffff
 8017ff4:	7ff00000 	.word	0x7ff00000

08017ff8 <__register_exitproc>:
 8017ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ffc:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8018074 <__register_exitproc+0x7c>
 8018000:	4606      	mov	r6, r0
 8018002:	f8da 0000 	ldr.w	r0, [sl]
 8018006:	4698      	mov	r8, r3
 8018008:	460f      	mov	r7, r1
 801800a:	4691      	mov	r9, r2
 801800c:	f7fc ff30 	bl	8014e70 <__retarget_lock_acquire_recursive>
 8018010:	4b16      	ldr	r3, [pc, #88]	@ (801806c <__register_exitproc+0x74>)
 8018012:	681c      	ldr	r4, [r3, #0]
 8018014:	b90c      	cbnz	r4, 801801a <__register_exitproc+0x22>
 8018016:	4c16      	ldr	r4, [pc, #88]	@ (8018070 <__register_exitproc+0x78>)
 8018018:	601c      	str	r4, [r3, #0]
 801801a:	6865      	ldr	r5, [r4, #4]
 801801c:	f8da 0000 	ldr.w	r0, [sl]
 8018020:	2d1f      	cmp	r5, #31
 8018022:	dd05      	ble.n	8018030 <__register_exitproc+0x38>
 8018024:	f7fc ff25 	bl	8014e72 <__retarget_lock_release_recursive>
 8018028:	f04f 30ff 	mov.w	r0, #4294967295
 801802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018030:	b19e      	cbz	r6, 801805a <__register_exitproc+0x62>
 8018032:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8018036:	2201      	movs	r2, #1
 8018038:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 801803c:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8018040:	40aa      	lsls	r2, r5
 8018042:	4313      	orrs	r3, r2
 8018044:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8018048:	2e02      	cmp	r6, #2
 801804a:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 801804e:	bf02      	ittt	eq
 8018050:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8018054:	4313      	orreq	r3, r2
 8018056:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 801805a:	1c6b      	adds	r3, r5, #1
 801805c:	3502      	adds	r5, #2
 801805e:	6063      	str	r3, [r4, #4]
 8018060:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8018064:	f7fc ff05 	bl	8014e72 <__retarget_lock_release_recursive>
 8018068:	2000      	movs	r0, #0
 801806a:	e7df      	b.n	801802c <__register_exitproc+0x34>
 801806c:	20003e10 	.word	0x20003e10
 8018070:	20003e14 	.word	0x20003e14
 8018074:	20000588 	.word	0x20000588

08018078 <quorem>:
 8018078:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801807c:	6903      	ldr	r3, [r0, #16]
 801807e:	690c      	ldr	r4, [r1, #16]
 8018080:	42a3      	cmp	r3, r4
 8018082:	4607      	mov	r7, r0
 8018084:	db7e      	blt.n	8018184 <quorem+0x10c>
 8018086:	3c01      	subs	r4, #1
 8018088:	f101 0814 	add.w	r8, r1, #20
 801808c:	00a3      	lsls	r3, r4, #2
 801808e:	f100 0514 	add.w	r5, r0, #20
 8018092:	9300      	str	r3, [sp, #0]
 8018094:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018098:	9301      	str	r3, [sp, #4]
 801809a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801809e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80180a2:	3301      	adds	r3, #1
 80180a4:	429a      	cmp	r2, r3
 80180a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80180aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80180ae:	d32e      	bcc.n	801810e <quorem+0x96>
 80180b0:	f04f 0a00 	mov.w	sl, #0
 80180b4:	46c4      	mov	ip, r8
 80180b6:	46ae      	mov	lr, r5
 80180b8:	46d3      	mov	fp, sl
 80180ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80180be:	b298      	uxth	r0, r3
 80180c0:	fb06 a000 	mla	r0, r6, r0, sl
 80180c4:	0c02      	lsrs	r2, r0, #16
 80180c6:	0c1b      	lsrs	r3, r3, #16
 80180c8:	fb06 2303 	mla	r3, r6, r3, r2
 80180cc:	f8de 2000 	ldr.w	r2, [lr]
 80180d0:	b280      	uxth	r0, r0
 80180d2:	b292      	uxth	r2, r2
 80180d4:	1a12      	subs	r2, r2, r0
 80180d6:	445a      	add	r2, fp
 80180d8:	f8de 0000 	ldr.w	r0, [lr]
 80180dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80180e0:	b29b      	uxth	r3, r3
 80180e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80180e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80180ea:	b292      	uxth	r2, r2
 80180ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80180f0:	45e1      	cmp	r9, ip
 80180f2:	f84e 2b04 	str.w	r2, [lr], #4
 80180f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80180fa:	d2de      	bcs.n	80180ba <quorem+0x42>
 80180fc:	9b00      	ldr	r3, [sp, #0]
 80180fe:	58eb      	ldr	r3, [r5, r3]
 8018100:	b92b      	cbnz	r3, 801810e <quorem+0x96>
 8018102:	9b01      	ldr	r3, [sp, #4]
 8018104:	3b04      	subs	r3, #4
 8018106:	429d      	cmp	r5, r3
 8018108:	461a      	mov	r2, r3
 801810a:	d32f      	bcc.n	801816c <quorem+0xf4>
 801810c:	613c      	str	r4, [r7, #16]
 801810e:	4638      	mov	r0, r7
 8018110:	f000 ffa2 	bl	8019058 <__mcmp>
 8018114:	2800      	cmp	r0, #0
 8018116:	db25      	blt.n	8018164 <quorem+0xec>
 8018118:	4629      	mov	r1, r5
 801811a:	2000      	movs	r0, #0
 801811c:	f858 2b04 	ldr.w	r2, [r8], #4
 8018120:	f8d1 c000 	ldr.w	ip, [r1]
 8018124:	fa1f fe82 	uxth.w	lr, r2
 8018128:	fa1f f38c 	uxth.w	r3, ip
 801812c:	eba3 030e 	sub.w	r3, r3, lr
 8018130:	4403      	add	r3, r0
 8018132:	0c12      	lsrs	r2, r2, #16
 8018134:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8018138:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801813c:	b29b      	uxth	r3, r3
 801813e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018142:	45c1      	cmp	r9, r8
 8018144:	f841 3b04 	str.w	r3, [r1], #4
 8018148:	ea4f 4022 	mov.w	r0, r2, asr #16
 801814c:	d2e6      	bcs.n	801811c <quorem+0xa4>
 801814e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018156:	b922      	cbnz	r2, 8018162 <quorem+0xea>
 8018158:	3b04      	subs	r3, #4
 801815a:	429d      	cmp	r5, r3
 801815c:	461a      	mov	r2, r3
 801815e:	d30b      	bcc.n	8018178 <quorem+0x100>
 8018160:	613c      	str	r4, [r7, #16]
 8018162:	3601      	adds	r6, #1
 8018164:	4630      	mov	r0, r6
 8018166:	b003      	add	sp, #12
 8018168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801816c:	6812      	ldr	r2, [r2, #0]
 801816e:	3b04      	subs	r3, #4
 8018170:	2a00      	cmp	r2, #0
 8018172:	d1cb      	bne.n	801810c <quorem+0x94>
 8018174:	3c01      	subs	r4, #1
 8018176:	e7c6      	b.n	8018106 <quorem+0x8e>
 8018178:	6812      	ldr	r2, [r2, #0]
 801817a:	3b04      	subs	r3, #4
 801817c:	2a00      	cmp	r2, #0
 801817e:	d1ef      	bne.n	8018160 <quorem+0xe8>
 8018180:	3c01      	subs	r4, #1
 8018182:	e7ea      	b.n	801815a <quorem+0xe2>
 8018184:	2000      	movs	r0, #0
 8018186:	e7ee      	b.n	8018166 <quorem+0xee>

08018188 <_dtoa_r>:
 8018188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801818c:	ed2d 8b02 	vpush	{d8}
 8018190:	b091      	sub	sp, #68	@ 0x44
 8018192:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018196:	9107      	str	r1, [sp, #28]
 8018198:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 801819a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801819c:	9209      	str	r2, [sp, #36]	@ 0x24
 801819e:	ec55 4b10 	vmov	r4, r5, d0
 80181a2:	4681      	mov	r9, r0
 80181a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80181a6:	b149      	cbz	r1, 80181bc <_dtoa_r+0x34>
 80181a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80181aa:	604a      	str	r2, [r1, #4]
 80181ac:	2301      	movs	r3, #1
 80181ae:	4093      	lsls	r3, r2
 80181b0:	608b      	str	r3, [r1, #8]
 80181b2:	f000 fd52 	bl	8018c5a <_Bfree>
 80181b6:	2300      	movs	r3, #0
 80181b8:	f8c9 3038 	str.w	r3, [r9, #56]	@ 0x38
 80181bc:	1e2b      	subs	r3, r5, #0
 80181be:	bfbb      	ittet	lt
 80181c0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80181c4:	9303      	strlt	r3, [sp, #12]
 80181c6:	2300      	movge	r3, #0
 80181c8:	2201      	movlt	r2, #1
 80181ca:	bfac      	ite	ge
 80181cc:	6033      	strge	r3, [r6, #0]
 80181ce:	6032      	strlt	r2, [r6, #0]
 80181d0:	4b8f      	ldr	r3, [pc, #572]	@ (8018410 <_dtoa_r+0x288>)
 80181d2:	9e03      	ldr	r6, [sp, #12]
 80181d4:	43b3      	bics	r3, r6
 80181d6:	d114      	bne.n	8018202 <_dtoa_r+0x7a>
 80181d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80181da:	f242 730f 	movw	r3, #9999	@ 0x270f
 80181de:	6013      	str	r3, [r2, #0]
 80181e0:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80181e4:	4323      	orrs	r3, r4
 80181e6:	f000 84e5 	beq.w	8018bb4 <_dtoa_r+0xa2c>
 80181ea:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80181ec:	4f89      	ldr	r7, [pc, #548]	@ (8018414 <_dtoa_r+0x28c>)
 80181ee:	b113      	cbz	r3, 80181f6 <_dtoa_r+0x6e>
 80181f0:	1cfb      	adds	r3, r7, #3
 80181f2:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80181f4:	6013      	str	r3, [r2, #0]
 80181f6:	4638      	mov	r0, r7
 80181f8:	b011      	add	sp, #68	@ 0x44
 80181fa:	ecbd 8b02 	vpop	{d8}
 80181fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018202:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018206:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801820e:	d109      	bne.n	8018224 <_dtoa_r+0x9c>
 8018210:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018212:	2301      	movs	r3, #1
 8018214:	6013      	str	r3, [r2, #0]
 8018216:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018218:	b113      	cbz	r3, 8018220 <_dtoa_r+0x98>
 801821a:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801821c:	4b7e      	ldr	r3, [pc, #504]	@ (8018418 <_dtoa_r+0x290>)
 801821e:	6013      	str	r3, [r2, #0]
 8018220:	4f7e      	ldr	r7, [pc, #504]	@ (801841c <_dtoa_r+0x294>)
 8018222:	e7e8      	b.n	80181f6 <_dtoa_r+0x6e>
 8018224:	aa0e      	add	r2, sp, #56	@ 0x38
 8018226:	a90f      	add	r1, sp, #60	@ 0x3c
 8018228:	4648      	mov	r0, r9
 801822a:	eeb0 0b48 	vmov.f64	d0, d8
 801822e:	f000 ffc3 	bl	80191b8 <__d2b>
 8018232:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8018236:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018238:	9001      	str	r0, [sp, #4]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d045      	beq.n	80182ca <_dtoa_r+0x142>
 801823e:	eeb0 7b48 	vmov.f64	d7, d8
 8018242:	ee18 1a90 	vmov	r1, s17
 8018246:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801824a:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 801824e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8018252:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8018256:	2500      	movs	r5, #0
 8018258:	ee07 1a90 	vmov	s15, r1
 801825c:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8018260:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 80183f8 <_dtoa_r+0x270>
 8018264:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018268:	ed9f 6b65 	vldr	d6, [pc, #404]	@ 8018400 <_dtoa_r+0x278>
 801826c:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018270:	ed9f 5b65 	vldr	d5, [pc, #404]	@ 8018408 <_dtoa_r+0x280>
 8018274:	ee07 3a90 	vmov	s15, r3
 8018278:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801827c:	eeb0 7b46 	vmov.f64	d7, d6
 8018280:	eea4 7b05 	vfma.f64	d7, d4, d5
 8018284:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8018288:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801828c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018290:	ee16 8a90 	vmov	r8, s13
 8018294:	d508      	bpl.n	80182a8 <_dtoa_r+0x120>
 8018296:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801829a:	eeb4 6b47 	vcmp.f64	d6, d7
 801829e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182a2:	bf18      	it	ne
 80182a4:	f108 38ff 	addne.w	r8, r8, #4294967295
 80182a8:	f1b8 0f16 	cmp.w	r8, #22
 80182ac:	d82b      	bhi.n	8018306 <_dtoa_r+0x17e>
 80182ae:	495c      	ldr	r1, [pc, #368]	@ (8018420 <_dtoa_r+0x298>)
 80182b0:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80182b4:	ed91 7b00 	vldr	d7, [r1]
 80182b8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80182bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80182c0:	d501      	bpl.n	80182c6 <_dtoa_r+0x13e>
 80182c2:	f108 38ff 	add.w	r8, r8, #4294967295
 80182c6:	2100      	movs	r1, #0
 80182c8:	e01e      	b.n	8018308 <_dtoa_r+0x180>
 80182ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80182cc:	4413      	add	r3, r2
 80182ce:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80182d2:	2920      	cmp	r1, #32
 80182d4:	bfc1      	itttt	gt
 80182d6:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 80182da:	408e      	lslgt	r6, r1
 80182dc:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 80182e0:	fa24 f101 	lsrgt.w	r1, r4, r1
 80182e4:	bfd6      	itet	le
 80182e6:	f1c1 0120 	rsble	r1, r1, #32
 80182ea:	4331      	orrgt	r1, r6
 80182ec:	fa04 f101 	lslle.w	r1, r4, r1
 80182f0:	ee07 1a90 	vmov	s15, r1
 80182f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80182f8:	3b01      	subs	r3, #1
 80182fa:	ee17 1a90 	vmov	r1, s15
 80182fe:	2501      	movs	r5, #1
 8018300:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8018304:	e7a8      	b.n	8018258 <_dtoa_r+0xd0>
 8018306:	2101      	movs	r1, #1
 8018308:	1ad2      	subs	r2, r2, r3
 801830a:	1e53      	subs	r3, r2, #1
 801830c:	9306      	str	r3, [sp, #24]
 801830e:	bf45      	ittet	mi
 8018310:	f1c2 0301 	rsbmi	r3, r2, #1
 8018314:	9304      	strmi	r3, [sp, #16]
 8018316:	2300      	movpl	r3, #0
 8018318:	2300      	movmi	r3, #0
 801831a:	bf4c      	ite	mi
 801831c:	9306      	strmi	r3, [sp, #24]
 801831e:	9304      	strpl	r3, [sp, #16]
 8018320:	f1b8 0f00 	cmp.w	r8, #0
 8018324:	910c      	str	r1, [sp, #48]	@ 0x30
 8018326:	db18      	blt.n	801835a <_dtoa_r+0x1d2>
 8018328:	9b06      	ldr	r3, [sp, #24]
 801832a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 801832e:	4443      	add	r3, r8
 8018330:	9306      	str	r3, [sp, #24]
 8018332:	2300      	movs	r3, #0
 8018334:	9a07      	ldr	r2, [sp, #28]
 8018336:	2a09      	cmp	r2, #9
 8018338:	d846      	bhi.n	80183c8 <_dtoa_r+0x240>
 801833a:	2a05      	cmp	r2, #5
 801833c:	bfc4      	itt	gt
 801833e:	3a04      	subgt	r2, #4
 8018340:	9207      	strgt	r2, [sp, #28]
 8018342:	9a07      	ldr	r2, [sp, #28]
 8018344:	f1a2 0202 	sub.w	r2, r2, #2
 8018348:	bfcc      	ite	gt
 801834a:	2400      	movgt	r4, #0
 801834c:	2401      	movle	r4, #1
 801834e:	2a03      	cmp	r2, #3
 8018350:	d845      	bhi.n	80183de <_dtoa_r+0x256>
 8018352:	e8df f002 	tbb	[pc, r2]
 8018356:	3735      	.short	0x3735
 8018358:	0b17      	.short	0x0b17
 801835a:	9b04      	ldr	r3, [sp, #16]
 801835c:	2200      	movs	r2, #0
 801835e:	eba3 0308 	sub.w	r3, r3, r8
 8018362:	9304      	str	r3, [sp, #16]
 8018364:	920a      	str	r2, [sp, #40]	@ 0x28
 8018366:	f1c8 0300 	rsb	r3, r8, #0
 801836a:	e7e3      	b.n	8018334 <_dtoa_r+0x1ac>
 801836c:	2201      	movs	r2, #1
 801836e:	9208      	str	r2, [sp, #32]
 8018370:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018372:	eb08 0b02 	add.w	fp, r8, r2
 8018376:	f10b 0a01 	add.w	sl, fp, #1
 801837a:	4652      	mov	r2, sl
 801837c:	2a01      	cmp	r2, #1
 801837e:	bfb8      	it	lt
 8018380:	2201      	movlt	r2, #1
 8018382:	e006      	b.n	8018392 <_dtoa_r+0x20a>
 8018384:	2201      	movs	r2, #1
 8018386:	9208      	str	r2, [sp, #32]
 8018388:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801838a:	2a00      	cmp	r2, #0
 801838c:	dd2a      	ble.n	80183e4 <_dtoa_r+0x25c>
 801838e:	4693      	mov	fp, r2
 8018390:	4692      	mov	sl, r2
 8018392:	2100      	movs	r1, #0
 8018394:	2004      	movs	r0, #4
 8018396:	f100 0614 	add.w	r6, r0, #20
 801839a:	4296      	cmp	r6, r2
 801839c:	d929      	bls.n	80183f2 <_dtoa_r+0x26a>
 801839e:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
 80183a2:	4648      	mov	r0, r9
 80183a4:	9305      	str	r3, [sp, #20]
 80183a6:	f000 fc33 	bl	8018c10 <_Balloc>
 80183aa:	9b05      	ldr	r3, [sp, #20]
 80183ac:	4607      	mov	r7, r0
 80183ae:	2800      	cmp	r0, #0
 80183b0:	d13c      	bne.n	801842c <_dtoa_r+0x2a4>
 80183b2:	4b1c      	ldr	r3, [pc, #112]	@ (8018424 <_dtoa_r+0x29c>)
 80183b4:	4602      	mov	r2, r0
 80183b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80183ba:	481b      	ldr	r0, [pc, #108]	@ (8018428 <_dtoa_r+0x2a0>)
 80183bc:	f000 ffb0 	bl	8019320 <__assert_func>
 80183c0:	2200      	movs	r2, #0
 80183c2:	e7e0      	b.n	8018386 <_dtoa_r+0x1fe>
 80183c4:	2200      	movs	r2, #0
 80183c6:	e7d2      	b.n	801836e <_dtoa_r+0x1e6>
 80183c8:	2401      	movs	r4, #1
 80183ca:	2200      	movs	r2, #0
 80183cc:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80183d0:	f04f 3bff 	mov.w	fp, #4294967295
 80183d4:	2100      	movs	r1, #0
 80183d6:	46da      	mov	sl, fp
 80183d8:	2212      	movs	r2, #18
 80183da:	9109      	str	r1, [sp, #36]	@ 0x24
 80183dc:	e7d9      	b.n	8018392 <_dtoa_r+0x20a>
 80183de:	2201      	movs	r2, #1
 80183e0:	9208      	str	r2, [sp, #32]
 80183e2:	e7f5      	b.n	80183d0 <_dtoa_r+0x248>
 80183e4:	f04f 0b01 	mov.w	fp, #1
 80183e8:	46da      	mov	sl, fp
 80183ea:	465a      	mov	r2, fp
 80183ec:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80183f0:	e7cf      	b.n	8018392 <_dtoa_r+0x20a>
 80183f2:	3101      	adds	r1, #1
 80183f4:	0040      	lsls	r0, r0, #1
 80183f6:	e7ce      	b.n	8018396 <_dtoa_r+0x20e>
 80183f8:	636f4361 	.word	0x636f4361
 80183fc:	3fd287a7 	.word	0x3fd287a7
 8018400:	8b60c8b3 	.word	0x8b60c8b3
 8018404:	3fc68a28 	.word	0x3fc68a28
 8018408:	509f79fb 	.word	0x509f79fb
 801840c:	3fd34413 	.word	0x3fd34413
 8018410:	7ff00000 	.word	0x7ff00000
 8018414:	0801aaaf 	.word	0x0801aaaf
 8018418:	0801aaa5 	.word	0x0801aaa5
 801841c:	0801aaa4 	.word	0x0801aaa4
 8018420:	0801ac30 	.word	0x0801ac30
 8018424:	0801aab3 	.word	0x0801aab3
 8018428:	0801aac4 	.word	0x0801aac4
 801842c:	f1ba 0f0e 	cmp.w	sl, #14
 8018430:	f8c9 0038 	str.w	r0, [r9, #56]	@ 0x38
 8018434:	d86e      	bhi.n	8018514 <_dtoa_r+0x38c>
 8018436:	2c00      	cmp	r4, #0
 8018438:	d06c      	beq.n	8018514 <_dtoa_r+0x38c>
 801843a:	f1b8 0f00 	cmp.w	r8, #0
 801843e:	f340 80b4 	ble.w	80185aa <_dtoa_r+0x422>
 8018442:	4ac9      	ldr	r2, [pc, #804]	@ (8018768 <_dtoa_r+0x5e0>)
 8018444:	f008 010f 	and.w	r1, r8, #15
 8018448:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801844c:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8018450:	ed92 7b00 	vldr	d7, [r2]
 8018454:	ea4f 1128 	mov.w	r1, r8, asr #4
 8018458:	f000 809b 	beq.w	8018592 <_dtoa_r+0x40a>
 801845c:	4ac3      	ldr	r2, [pc, #780]	@ (801876c <_dtoa_r+0x5e4>)
 801845e:	ed92 6b08 	vldr	d6, [r2, #32]
 8018462:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8018466:	ed8d 6b02 	vstr	d6, [sp, #8]
 801846a:	f001 010f 	and.w	r1, r1, #15
 801846e:	2203      	movs	r2, #3
 8018470:	48be      	ldr	r0, [pc, #760]	@ (801876c <_dtoa_r+0x5e4>)
 8018472:	2900      	cmp	r1, #0
 8018474:	f040 808f 	bne.w	8018596 <_dtoa_r+0x40e>
 8018478:	ed9d 6b02 	vldr	d6, [sp, #8]
 801847c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8018480:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018484:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018486:	ed9d 7b02 	vldr	d7, [sp, #8]
 801848a:	2900      	cmp	r1, #0
 801848c:	f000 80b3 	beq.w	80185f6 <_dtoa_r+0x46e>
 8018490:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8018494:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8018498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801849c:	f140 80ab 	bpl.w	80185f6 <_dtoa_r+0x46e>
 80184a0:	f1ba 0f00 	cmp.w	sl, #0
 80184a4:	f000 80a7 	beq.w	80185f6 <_dtoa_r+0x46e>
 80184a8:	f1bb 0f00 	cmp.w	fp, #0
 80184ac:	dd30      	ble.n	8018510 <_dtoa_r+0x388>
 80184ae:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80184b2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80184b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80184ba:	f108 31ff 	add.w	r1, r8, #4294967295
 80184be:	9105      	str	r1, [sp, #20]
 80184c0:	3201      	adds	r2, #1
 80184c2:	465c      	mov	r4, fp
 80184c4:	ed9d 6b02 	vldr	d6, [sp, #8]
 80184c8:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80184cc:	ee07 2a90 	vmov	s15, r2
 80184d0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80184d4:	eea7 5b06 	vfma.f64	d5, d7, d6
 80184d8:	ee15 2a90 	vmov	r2, s11
 80184dc:	ec51 0b15 	vmov	r0, r1, d5
 80184e0:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80184e4:	2c00      	cmp	r4, #0
 80184e6:	f040 808a 	bne.w	80185fe <_dtoa_r+0x476>
 80184ea:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80184ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80184f2:	ec41 0b17 	vmov	d7, r0, r1
 80184f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80184fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184fe:	f300 826b 	bgt.w	80189d8 <_dtoa_r+0x850>
 8018502:	eeb1 7b47 	vneg.f64	d7, d7
 8018506:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801850a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801850e:	d423      	bmi.n	8018558 <_dtoa_r+0x3d0>
 8018510:	ed8d 8b02 	vstr	d8, [sp, #8]
 8018514:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018516:	2a00      	cmp	r2, #0
 8018518:	f2c0 812a 	blt.w	8018770 <_dtoa_r+0x5e8>
 801851c:	f1b8 0f0e 	cmp.w	r8, #14
 8018520:	f300 8126 	bgt.w	8018770 <_dtoa_r+0x5e8>
 8018524:	4b90      	ldr	r3, [pc, #576]	@ (8018768 <_dtoa_r+0x5e0>)
 8018526:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801852a:	ed93 6b00 	vldr	d6, [r3]
 801852e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018530:	2b00      	cmp	r3, #0
 8018532:	f280 80c8 	bge.w	80186c6 <_dtoa_r+0x53e>
 8018536:	f1ba 0f00 	cmp.w	sl, #0
 801853a:	f300 80c4 	bgt.w	80186c6 <_dtoa_r+0x53e>
 801853e:	d10b      	bne.n	8018558 <_dtoa_r+0x3d0>
 8018540:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8018544:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018548:	ed9d 7b02 	vldr	d7, [sp, #8]
 801854c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8018550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018554:	f2c0 823d 	blt.w	80189d2 <_dtoa_r+0x84a>
 8018558:	2400      	movs	r4, #0
 801855a:	4625      	mov	r5, r4
 801855c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801855e:	43db      	mvns	r3, r3
 8018560:	9305      	str	r3, [sp, #20]
 8018562:	463e      	mov	r6, r7
 8018564:	f04f 0800 	mov.w	r8, #0
 8018568:	4621      	mov	r1, r4
 801856a:	4648      	mov	r0, r9
 801856c:	f000 fb75 	bl	8018c5a <_Bfree>
 8018570:	2d00      	cmp	r5, #0
 8018572:	f000 80a2 	beq.w	80186ba <_dtoa_r+0x532>
 8018576:	f1b8 0f00 	cmp.w	r8, #0
 801857a:	d005      	beq.n	8018588 <_dtoa_r+0x400>
 801857c:	45a8      	cmp	r8, r5
 801857e:	d003      	beq.n	8018588 <_dtoa_r+0x400>
 8018580:	4641      	mov	r1, r8
 8018582:	4648      	mov	r0, r9
 8018584:	f000 fb69 	bl	8018c5a <_Bfree>
 8018588:	4629      	mov	r1, r5
 801858a:	4648      	mov	r0, r9
 801858c:	f000 fb65 	bl	8018c5a <_Bfree>
 8018590:	e093      	b.n	80186ba <_dtoa_r+0x532>
 8018592:	2202      	movs	r2, #2
 8018594:	e76c      	b.n	8018470 <_dtoa_r+0x2e8>
 8018596:	07cc      	lsls	r4, r1, #31
 8018598:	d504      	bpl.n	80185a4 <_dtoa_r+0x41c>
 801859a:	ed90 6b00 	vldr	d6, [r0]
 801859e:	3201      	adds	r2, #1
 80185a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80185a4:	1049      	asrs	r1, r1, #1
 80185a6:	3008      	adds	r0, #8
 80185a8:	e763      	b.n	8018472 <_dtoa_r+0x2ea>
 80185aa:	d022      	beq.n	80185f2 <_dtoa_r+0x46a>
 80185ac:	f1c8 0100 	rsb	r1, r8, #0
 80185b0:	4a6d      	ldr	r2, [pc, #436]	@ (8018768 <_dtoa_r+0x5e0>)
 80185b2:	f001 000f 	and.w	r0, r1, #15
 80185b6:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80185ba:	ed92 7b00 	vldr	d7, [r2]
 80185be:	ee28 7b07 	vmul.f64	d7, d8, d7
 80185c2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80185c6:	4869      	ldr	r0, [pc, #420]	@ (801876c <_dtoa_r+0x5e4>)
 80185c8:	1109      	asrs	r1, r1, #4
 80185ca:	2400      	movs	r4, #0
 80185cc:	2202      	movs	r2, #2
 80185ce:	b929      	cbnz	r1, 80185dc <_dtoa_r+0x454>
 80185d0:	2c00      	cmp	r4, #0
 80185d2:	f43f af57 	beq.w	8018484 <_dtoa_r+0x2fc>
 80185d6:	ed8d 7b02 	vstr	d7, [sp, #8]
 80185da:	e753      	b.n	8018484 <_dtoa_r+0x2fc>
 80185dc:	07ce      	lsls	r6, r1, #31
 80185de:	d505      	bpl.n	80185ec <_dtoa_r+0x464>
 80185e0:	ed90 6b00 	vldr	d6, [r0]
 80185e4:	3201      	adds	r2, #1
 80185e6:	2401      	movs	r4, #1
 80185e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80185ec:	1049      	asrs	r1, r1, #1
 80185ee:	3008      	adds	r0, #8
 80185f0:	e7ed      	b.n	80185ce <_dtoa_r+0x446>
 80185f2:	2202      	movs	r2, #2
 80185f4:	e746      	b.n	8018484 <_dtoa_r+0x2fc>
 80185f6:	f8cd 8014 	str.w	r8, [sp, #20]
 80185fa:	4654      	mov	r4, sl
 80185fc:	e762      	b.n	80184c4 <_dtoa_r+0x33c>
 80185fe:	4a5a      	ldr	r2, [pc, #360]	@ (8018768 <_dtoa_r+0x5e0>)
 8018600:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8018604:	ed12 4b02 	vldr	d4, [r2, #-8]
 8018608:	9a08      	ldr	r2, [sp, #32]
 801860a:	ec41 0b17 	vmov	d7, r0, r1
 801860e:	443c      	add	r4, r7
 8018610:	b34a      	cbz	r2, 8018666 <_dtoa_r+0x4de>
 8018612:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8018616:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 801861a:	463e      	mov	r6, r7
 801861c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8018620:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018624:	ee35 7b47 	vsub.f64	d7, d5, d7
 8018628:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801862c:	ee14 2a90 	vmov	r2, s9
 8018630:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018634:	3230      	adds	r2, #48	@ 0x30
 8018636:	ee36 6b45 	vsub.f64	d6, d6, d5
 801863a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801863e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018642:	f806 2b01 	strb.w	r2, [r6], #1
 8018646:	d438      	bmi.n	80186ba <_dtoa_r+0x532>
 8018648:	ee32 5b46 	vsub.f64	d5, d2, d6
 801864c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8018650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018654:	d46e      	bmi.n	8018734 <_dtoa_r+0x5ac>
 8018656:	42a6      	cmp	r6, r4
 8018658:	f43f af5a 	beq.w	8018510 <_dtoa_r+0x388>
 801865c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8018660:	ee26 6b03 	vmul.f64	d6, d6, d3
 8018664:	e7e0      	b.n	8018628 <_dtoa_r+0x4a0>
 8018666:	4621      	mov	r1, r4
 8018668:	463e      	mov	r6, r7
 801866a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801866e:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8018672:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8018676:	ee14 2a90 	vmov	r2, s9
 801867a:	3230      	adds	r2, #48	@ 0x30
 801867c:	f806 2b01 	strb.w	r2, [r6], #1
 8018680:	42a6      	cmp	r6, r4
 8018682:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8018686:	ee36 6b45 	vsub.f64	d6, d6, d5
 801868a:	d119      	bne.n	80186c0 <_dtoa_r+0x538>
 801868c:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8018690:	ee37 4b05 	vadd.f64	d4, d7, d5
 8018694:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8018698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801869c:	dc4a      	bgt.n	8018734 <_dtoa_r+0x5ac>
 801869e:	ee35 5b47 	vsub.f64	d5, d5, d7
 80186a2:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80186a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186aa:	f57f af31 	bpl.w	8018510 <_dtoa_r+0x388>
 80186ae:	460e      	mov	r6, r1
 80186b0:	3901      	subs	r1, #1
 80186b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80186b6:	2b30      	cmp	r3, #48	@ 0x30
 80186b8:	d0f9      	beq.n	80186ae <_dtoa_r+0x526>
 80186ba:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80186be:	e027      	b.n	8018710 <_dtoa_r+0x588>
 80186c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80186c4:	e7d5      	b.n	8018672 <_dtoa_r+0x4ea>
 80186c6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80186ca:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80186ce:	463e      	mov	r6, r7
 80186d0:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80186d4:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80186d8:	ee15 3a10 	vmov	r3, s10
 80186dc:	3330      	adds	r3, #48	@ 0x30
 80186de:	f806 3b01 	strb.w	r3, [r6], #1
 80186e2:	1bf3      	subs	r3, r6, r7
 80186e4:	459a      	cmp	sl, r3
 80186e6:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80186ea:	eea3 7b46 	vfms.f64	d7, d3, d6
 80186ee:	d132      	bne.n	8018756 <_dtoa_r+0x5ce>
 80186f0:	ee37 7b07 	vadd.f64	d7, d7, d7
 80186f4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80186f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186fc:	dc18      	bgt.n	8018730 <_dtoa_r+0x5a8>
 80186fe:	eeb4 7b46 	vcmp.f64	d7, d6
 8018702:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018706:	d103      	bne.n	8018710 <_dtoa_r+0x588>
 8018708:	ee15 3a10 	vmov	r3, s10
 801870c:	07db      	lsls	r3, r3, #31
 801870e:	d40f      	bmi.n	8018730 <_dtoa_r+0x5a8>
 8018710:	9901      	ldr	r1, [sp, #4]
 8018712:	4648      	mov	r0, r9
 8018714:	f000 faa1 	bl	8018c5a <_Bfree>
 8018718:	2300      	movs	r3, #0
 801871a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801871c:	7033      	strb	r3, [r6, #0]
 801871e:	f108 0301 	add.w	r3, r8, #1
 8018722:	6013      	str	r3, [r2, #0]
 8018724:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018726:	2b00      	cmp	r3, #0
 8018728:	f43f ad65 	beq.w	80181f6 <_dtoa_r+0x6e>
 801872c:	601e      	str	r6, [r3, #0]
 801872e:	e562      	b.n	80181f6 <_dtoa_r+0x6e>
 8018730:	f8cd 8014 	str.w	r8, [sp, #20]
 8018734:	4633      	mov	r3, r6
 8018736:	461e      	mov	r6, r3
 8018738:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801873c:	2a39      	cmp	r2, #57	@ 0x39
 801873e:	d106      	bne.n	801874e <_dtoa_r+0x5c6>
 8018740:	429f      	cmp	r7, r3
 8018742:	d1f8      	bne.n	8018736 <_dtoa_r+0x5ae>
 8018744:	9a05      	ldr	r2, [sp, #20]
 8018746:	3201      	adds	r2, #1
 8018748:	9205      	str	r2, [sp, #20]
 801874a:	2230      	movs	r2, #48	@ 0x30
 801874c:	703a      	strb	r2, [r7, #0]
 801874e:	781a      	ldrb	r2, [r3, #0]
 8018750:	3201      	adds	r2, #1
 8018752:	701a      	strb	r2, [r3, #0]
 8018754:	e7b1      	b.n	80186ba <_dtoa_r+0x532>
 8018756:	ee27 7b04 	vmul.f64	d7, d7, d4
 801875a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801875e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018762:	d1b5      	bne.n	80186d0 <_dtoa_r+0x548>
 8018764:	e7d4      	b.n	8018710 <_dtoa_r+0x588>
 8018766:	bf00      	nop
 8018768:	0801ac30 	.word	0x0801ac30
 801876c:	0801ac08 	.word	0x0801ac08
 8018770:	9908      	ldr	r1, [sp, #32]
 8018772:	2900      	cmp	r1, #0
 8018774:	f000 80e9 	beq.w	801894a <_dtoa_r+0x7c2>
 8018778:	9907      	ldr	r1, [sp, #28]
 801877a:	2901      	cmp	r1, #1
 801877c:	f300 80cb 	bgt.w	8018916 <_dtoa_r+0x78e>
 8018780:	2d00      	cmp	r5, #0
 8018782:	f000 80c4 	beq.w	801890e <_dtoa_r+0x786>
 8018786:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801878a:	9e04      	ldr	r6, [sp, #16]
 801878c:	461c      	mov	r4, r3
 801878e:	9305      	str	r3, [sp, #20]
 8018790:	9b04      	ldr	r3, [sp, #16]
 8018792:	4413      	add	r3, r2
 8018794:	9304      	str	r3, [sp, #16]
 8018796:	9b06      	ldr	r3, [sp, #24]
 8018798:	2101      	movs	r1, #1
 801879a:	4413      	add	r3, r2
 801879c:	4648      	mov	r0, r9
 801879e:	9306      	str	r3, [sp, #24]
 80187a0:	f000 faf6 	bl	8018d90 <__i2b>
 80187a4:	9b05      	ldr	r3, [sp, #20]
 80187a6:	4605      	mov	r5, r0
 80187a8:	b166      	cbz	r6, 80187c4 <_dtoa_r+0x63c>
 80187aa:	9a06      	ldr	r2, [sp, #24]
 80187ac:	2a00      	cmp	r2, #0
 80187ae:	dd09      	ble.n	80187c4 <_dtoa_r+0x63c>
 80187b0:	42b2      	cmp	r2, r6
 80187b2:	9904      	ldr	r1, [sp, #16]
 80187b4:	bfa8      	it	ge
 80187b6:	4632      	movge	r2, r6
 80187b8:	1a89      	subs	r1, r1, r2
 80187ba:	9104      	str	r1, [sp, #16]
 80187bc:	9906      	ldr	r1, [sp, #24]
 80187be:	1ab6      	subs	r6, r6, r2
 80187c0:	1a8a      	subs	r2, r1, r2
 80187c2:	9206      	str	r2, [sp, #24]
 80187c4:	b30b      	cbz	r3, 801880a <_dtoa_r+0x682>
 80187c6:	9a08      	ldr	r2, [sp, #32]
 80187c8:	2a00      	cmp	r2, #0
 80187ca:	f000 80c5 	beq.w	8018958 <_dtoa_r+0x7d0>
 80187ce:	2c00      	cmp	r4, #0
 80187d0:	f000 80bf 	beq.w	8018952 <_dtoa_r+0x7ca>
 80187d4:	4629      	mov	r1, r5
 80187d6:	4622      	mov	r2, r4
 80187d8:	4648      	mov	r0, r9
 80187da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80187dc:	f000 fb90 	bl	8018f00 <__pow5mult>
 80187e0:	9a01      	ldr	r2, [sp, #4]
 80187e2:	4601      	mov	r1, r0
 80187e4:	4605      	mov	r5, r0
 80187e6:	4648      	mov	r0, r9
 80187e8:	f000 fae8 	bl	8018dbc <__multiply>
 80187ec:	9901      	ldr	r1, [sp, #4]
 80187ee:	9005      	str	r0, [sp, #20]
 80187f0:	4648      	mov	r0, r9
 80187f2:	f000 fa32 	bl	8018c5a <_Bfree>
 80187f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80187f8:	1b1b      	subs	r3, r3, r4
 80187fa:	f000 80b0 	beq.w	801895e <_dtoa_r+0x7d6>
 80187fe:	9905      	ldr	r1, [sp, #20]
 8018800:	461a      	mov	r2, r3
 8018802:	4648      	mov	r0, r9
 8018804:	f000 fb7c 	bl	8018f00 <__pow5mult>
 8018808:	9001      	str	r0, [sp, #4]
 801880a:	2101      	movs	r1, #1
 801880c:	4648      	mov	r0, r9
 801880e:	f000 fabf 	bl	8018d90 <__i2b>
 8018812:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018814:	4604      	mov	r4, r0
 8018816:	2b00      	cmp	r3, #0
 8018818:	f000 81d5 	beq.w	8018bc6 <_dtoa_r+0xa3e>
 801881c:	461a      	mov	r2, r3
 801881e:	4601      	mov	r1, r0
 8018820:	4648      	mov	r0, r9
 8018822:	f000 fb6d 	bl	8018f00 <__pow5mult>
 8018826:	9b07      	ldr	r3, [sp, #28]
 8018828:	2b01      	cmp	r3, #1
 801882a:	4604      	mov	r4, r0
 801882c:	f300 80a0 	bgt.w	8018970 <_dtoa_r+0x7e8>
 8018830:	9b02      	ldr	r3, [sp, #8]
 8018832:	2b00      	cmp	r3, #0
 8018834:	f040 8096 	bne.w	8018964 <_dtoa_r+0x7dc>
 8018838:	9b03      	ldr	r3, [sp, #12]
 801883a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801883e:	2a00      	cmp	r2, #0
 8018840:	f040 8092 	bne.w	8018968 <_dtoa_r+0x7e0>
 8018844:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018848:	0d12      	lsrs	r2, r2, #20
 801884a:	0512      	lsls	r2, r2, #20
 801884c:	2a00      	cmp	r2, #0
 801884e:	f000 808d 	beq.w	801896c <_dtoa_r+0x7e4>
 8018852:	9b04      	ldr	r3, [sp, #16]
 8018854:	3301      	adds	r3, #1
 8018856:	9304      	str	r3, [sp, #16]
 8018858:	9b06      	ldr	r3, [sp, #24]
 801885a:	3301      	adds	r3, #1
 801885c:	9306      	str	r3, [sp, #24]
 801885e:	2301      	movs	r3, #1
 8018860:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018864:	2b00      	cmp	r3, #0
 8018866:	f000 81b4 	beq.w	8018bd2 <_dtoa_r+0xa4a>
 801886a:	6922      	ldr	r2, [r4, #16]
 801886c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018870:	6910      	ldr	r0, [r2, #16]
 8018872:	f000 fa41 	bl	8018cf8 <__hi0bits>
 8018876:	f1c0 0020 	rsb	r0, r0, #32
 801887a:	9b06      	ldr	r3, [sp, #24]
 801887c:	4418      	add	r0, r3
 801887e:	f010 001f 	ands.w	r0, r0, #31
 8018882:	f000 8081 	beq.w	8018988 <_dtoa_r+0x800>
 8018886:	f1c0 0220 	rsb	r2, r0, #32
 801888a:	2a04      	cmp	r2, #4
 801888c:	dd73      	ble.n	8018976 <_dtoa_r+0x7ee>
 801888e:	9b04      	ldr	r3, [sp, #16]
 8018890:	f1c0 001c 	rsb	r0, r0, #28
 8018894:	4403      	add	r3, r0
 8018896:	9304      	str	r3, [sp, #16]
 8018898:	9b06      	ldr	r3, [sp, #24]
 801889a:	4406      	add	r6, r0
 801889c:	4403      	add	r3, r0
 801889e:	9306      	str	r3, [sp, #24]
 80188a0:	9b04      	ldr	r3, [sp, #16]
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	dd05      	ble.n	80188b2 <_dtoa_r+0x72a>
 80188a6:	9901      	ldr	r1, [sp, #4]
 80188a8:	461a      	mov	r2, r3
 80188aa:	4648      	mov	r0, r9
 80188ac:	f000 fb68 	bl	8018f80 <__lshift>
 80188b0:	9001      	str	r0, [sp, #4]
 80188b2:	9b06      	ldr	r3, [sp, #24]
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	dd05      	ble.n	80188c4 <_dtoa_r+0x73c>
 80188b8:	4621      	mov	r1, r4
 80188ba:	461a      	mov	r2, r3
 80188bc:	4648      	mov	r0, r9
 80188be:	f000 fb5f 	bl	8018f80 <__lshift>
 80188c2:	4604      	mov	r4, r0
 80188c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d060      	beq.n	801898c <_dtoa_r+0x804>
 80188ca:	9801      	ldr	r0, [sp, #4]
 80188cc:	4621      	mov	r1, r4
 80188ce:	f000 fbc3 	bl	8019058 <__mcmp>
 80188d2:	2800      	cmp	r0, #0
 80188d4:	da5a      	bge.n	801898c <_dtoa_r+0x804>
 80188d6:	f108 33ff 	add.w	r3, r8, #4294967295
 80188da:	9305      	str	r3, [sp, #20]
 80188dc:	9901      	ldr	r1, [sp, #4]
 80188de:	2300      	movs	r3, #0
 80188e0:	220a      	movs	r2, #10
 80188e2:	4648      	mov	r0, r9
 80188e4:	f000 f9c2 	bl	8018c6c <__multadd>
 80188e8:	9b08      	ldr	r3, [sp, #32]
 80188ea:	9001      	str	r0, [sp, #4]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	f000 8172 	beq.w	8018bd6 <_dtoa_r+0xa4e>
 80188f2:	4629      	mov	r1, r5
 80188f4:	2300      	movs	r3, #0
 80188f6:	220a      	movs	r2, #10
 80188f8:	4648      	mov	r0, r9
 80188fa:	f000 f9b7 	bl	8018c6c <__multadd>
 80188fe:	f1bb 0f00 	cmp.w	fp, #0
 8018902:	4605      	mov	r5, r0
 8018904:	dc6e      	bgt.n	80189e4 <_dtoa_r+0x85c>
 8018906:	9b07      	ldr	r3, [sp, #28]
 8018908:	2b02      	cmp	r3, #2
 801890a:	dc48      	bgt.n	801899e <_dtoa_r+0x816>
 801890c:	e06a      	b.n	80189e4 <_dtoa_r+0x85c>
 801890e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018910:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8018914:	e739      	b.n	801878a <_dtoa_r+0x602>
 8018916:	f10a 34ff 	add.w	r4, sl, #4294967295
 801891a:	42a3      	cmp	r3, r4
 801891c:	db07      	blt.n	801892e <_dtoa_r+0x7a6>
 801891e:	f1ba 0f00 	cmp.w	sl, #0
 8018922:	eba3 0404 	sub.w	r4, r3, r4
 8018926:	db0b      	blt.n	8018940 <_dtoa_r+0x7b8>
 8018928:	9e04      	ldr	r6, [sp, #16]
 801892a:	4652      	mov	r2, sl
 801892c:	e72f      	b.n	801878e <_dtoa_r+0x606>
 801892e:	1ae2      	subs	r2, r4, r3
 8018930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018932:	9e04      	ldr	r6, [sp, #16]
 8018934:	4413      	add	r3, r2
 8018936:	930a      	str	r3, [sp, #40]	@ 0x28
 8018938:	4652      	mov	r2, sl
 801893a:	4623      	mov	r3, r4
 801893c:	2400      	movs	r4, #0
 801893e:	e726      	b.n	801878e <_dtoa_r+0x606>
 8018940:	9a04      	ldr	r2, [sp, #16]
 8018942:	eba2 060a 	sub.w	r6, r2, sl
 8018946:	2200      	movs	r2, #0
 8018948:	e721      	b.n	801878e <_dtoa_r+0x606>
 801894a:	9e04      	ldr	r6, [sp, #16]
 801894c:	9d08      	ldr	r5, [sp, #32]
 801894e:	461c      	mov	r4, r3
 8018950:	e72a      	b.n	80187a8 <_dtoa_r+0x620>
 8018952:	9a01      	ldr	r2, [sp, #4]
 8018954:	9205      	str	r2, [sp, #20]
 8018956:	e752      	b.n	80187fe <_dtoa_r+0x676>
 8018958:	9901      	ldr	r1, [sp, #4]
 801895a:	461a      	mov	r2, r3
 801895c:	e751      	b.n	8018802 <_dtoa_r+0x67a>
 801895e:	9b05      	ldr	r3, [sp, #20]
 8018960:	9301      	str	r3, [sp, #4]
 8018962:	e752      	b.n	801880a <_dtoa_r+0x682>
 8018964:	2300      	movs	r3, #0
 8018966:	e77b      	b.n	8018860 <_dtoa_r+0x6d8>
 8018968:	9b02      	ldr	r3, [sp, #8]
 801896a:	e779      	b.n	8018860 <_dtoa_r+0x6d8>
 801896c:	920b      	str	r2, [sp, #44]	@ 0x2c
 801896e:	e778      	b.n	8018862 <_dtoa_r+0x6da>
 8018970:	2300      	movs	r3, #0
 8018972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018974:	e779      	b.n	801886a <_dtoa_r+0x6e2>
 8018976:	d093      	beq.n	80188a0 <_dtoa_r+0x718>
 8018978:	9b04      	ldr	r3, [sp, #16]
 801897a:	321c      	adds	r2, #28
 801897c:	4413      	add	r3, r2
 801897e:	9304      	str	r3, [sp, #16]
 8018980:	9b06      	ldr	r3, [sp, #24]
 8018982:	4416      	add	r6, r2
 8018984:	4413      	add	r3, r2
 8018986:	e78a      	b.n	801889e <_dtoa_r+0x716>
 8018988:	4602      	mov	r2, r0
 801898a:	e7f5      	b.n	8018978 <_dtoa_r+0x7f0>
 801898c:	f1ba 0f00 	cmp.w	sl, #0
 8018990:	f8cd 8014 	str.w	r8, [sp, #20]
 8018994:	46d3      	mov	fp, sl
 8018996:	dc21      	bgt.n	80189dc <_dtoa_r+0x854>
 8018998:	9b07      	ldr	r3, [sp, #28]
 801899a:	2b02      	cmp	r3, #2
 801899c:	dd1e      	ble.n	80189dc <_dtoa_r+0x854>
 801899e:	f1bb 0f00 	cmp.w	fp, #0
 80189a2:	f47f addb 	bne.w	801855c <_dtoa_r+0x3d4>
 80189a6:	4621      	mov	r1, r4
 80189a8:	465b      	mov	r3, fp
 80189aa:	2205      	movs	r2, #5
 80189ac:	4648      	mov	r0, r9
 80189ae:	f000 f95d 	bl	8018c6c <__multadd>
 80189b2:	4601      	mov	r1, r0
 80189b4:	4604      	mov	r4, r0
 80189b6:	9801      	ldr	r0, [sp, #4]
 80189b8:	f000 fb4e 	bl	8019058 <__mcmp>
 80189bc:	2800      	cmp	r0, #0
 80189be:	f77f adcd 	ble.w	801855c <_dtoa_r+0x3d4>
 80189c2:	463e      	mov	r6, r7
 80189c4:	2331      	movs	r3, #49	@ 0x31
 80189c6:	f806 3b01 	strb.w	r3, [r6], #1
 80189ca:	9b05      	ldr	r3, [sp, #20]
 80189cc:	3301      	adds	r3, #1
 80189ce:	9305      	str	r3, [sp, #20]
 80189d0:	e5c8      	b.n	8018564 <_dtoa_r+0x3dc>
 80189d2:	f8cd 8014 	str.w	r8, [sp, #20]
 80189d6:	4654      	mov	r4, sl
 80189d8:	4625      	mov	r5, r4
 80189da:	e7f2      	b.n	80189c2 <_dtoa_r+0x83a>
 80189dc:	9b08      	ldr	r3, [sp, #32]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	f000 80fd 	beq.w	8018bde <_dtoa_r+0xa56>
 80189e4:	2e00      	cmp	r6, #0
 80189e6:	dd05      	ble.n	80189f4 <_dtoa_r+0x86c>
 80189e8:	4629      	mov	r1, r5
 80189ea:	4632      	mov	r2, r6
 80189ec:	4648      	mov	r0, r9
 80189ee:	f000 fac7 	bl	8018f80 <__lshift>
 80189f2:	4605      	mov	r5, r0
 80189f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80189f6:	2b00      	cmp	r3, #0
 80189f8:	d057      	beq.n	8018aaa <_dtoa_r+0x922>
 80189fa:	6869      	ldr	r1, [r5, #4]
 80189fc:	4648      	mov	r0, r9
 80189fe:	f000 f907 	bl	8018c10 <_Balloc>
 8018a02:	4606      	mov	r6, r0
 8018a04:	b920      	cbnz	r0, 8018a10 <_dtoa_r+0x888>
 8018a06:	4b80      	ldr	r3, [pc, #512]	@ (8018c08 <_dtoa_r+0xa80>)
 8018a08:	4602      	mov	r2, r0
 8018a0a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8018a0e:	e4d4      	b.n	80183ba <_dtoa_r+0x232>
 8018a10:	692a      	ldr	r2, [r5, #16]
 8018a12:	3202      	adds	r2, #2
 8018a14:	0092      	lsls	r2, r2, #2
 8018a16:	f105 010c 	add.w	r1, r5, #12
 8018a1a:	300c      	adds	r0, #12
 8018a1c:	f7fc fa3e 	bl	8014e9c <memcpy>
 8018a20:	2201      	movs	r2, #1
 8018a22:	4631      	mov	r1, r6
 8018a24:	4648      	mov	r0, r9
 8018a26:	f000 faab 	bl	8018f80 <__lshift>
 8018a2a:	1c7b      	adds	r3, r7, #1
 8018a2c:	9304      	str	r3, [sp, #16]
 8018a2e:	eb07 030b 	add.w	r3, r7, fp
 8018a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a34:	9b02      	ldr	r3, [sp, #8]
 8018a36:	f003 0301 	and.w	r3, r3, #1
 8018a3a:	46a8      	mov	r8, r5
 8018a3c:	9308      	str	r3, [sp, #32]
 8018a3e:	4605      	mov	r5, r0
 8018a40:	9b04      	ldr	r3, [sp, #16]
 8018a42:	9801      	ldr	r0, [sp, #4]
 8018a44:	4621      	mov	r1, r4
 8018a46:	f103 3bff 	add.w	fp, r3, #4294967295
 8018a4a:	f7ff fb15 	bl	8018078 <quorem>
 8018a4e:	4641      	mov	r1, r8
 8018a50:	9002      	str	r0, [sp, #8]
 8018a52:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8018a56:	9801      	ldr	r0, [sp, #4]
 8018a58:	f000 fafe 	bl	8019058 <__mcmp>
 8018a5c:	462a      	mov	r2, r5
 8018a5e:	9006      	str	r0, [sp, #24]
 8018a60:	4621      	mov	r1, r4
 8018a62:	4648      	mov	r0, r9
 8018a64:	f000 fb14 	bl	8019090 <__mdiff>
 8018a68:	68c2      	ldr	r2, [r0, #12]
 8018a6a:	4606      	mov	r6, r0
 8018a6c:	b9fa      	cbnz	r2, 8018aae <_dtoa_r+0x926>
 8018a6e:	4601      	mov	r1, r0
 8018a70:	9801      	ldr	r0, [sp, #4]
 8018a72:	f000 faf1 	bl	8019058 <__mcmp>
 8018a76:	4602      	mov	r2, r0
 8018a78:	4631      	mov	r1, r6
 8018a7a:	4648      	mov	r0, r9
 8018a7c:	920a      	str	r2, [sp, #40]	@ 0x28
 8018a7e:	f000 f8ec 	bl	8018c5a <_Bfree>
 8018a82:	9b07      	ldr	r3, [sp, #28]
 8018a84:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018a86:	9e04      	ldr	r6, [sp, #16]
 8018a88:	ea42 0103 	orr.w	r1, r2, r3
 8018a8c:	9b08      	ldr	r3, [sp, #32]
 8018a8e:	4319      	orrs	r1, r3
 8018a90:	d10f      	bne.n	8018ab2 <_dtoa_r+0x92a>
 8018a92:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018a96:	d028      	beq.n	8018aea <_dtoa_r+0x962>
 8018a98:	9b06      	ldr	r3, [sp, #24]
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	dd02      	ble.n	8018aa4 <_dtoa_r+0x91c>
 8018a9e:	9b02      	ldr	r3, [sp, #8]
 8018aa0:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8018aa4:	f88b a000 	strb.w	sl, [fp]
 8018aa8:	e55e      	b.n	8018568 <_dtoa_r+0x3e0>
 8018aaa:	4628      	mov	r0, r5
 8018aac:	e7bd      	b.n	8018a2a <_dtoa_r+0x8a2>
 8018aae:	2201      	movs	r2, #1
 8018ab0:	e7e2      	b.n	8018a78 <_dtoa_r+0x8f0>
 8018ab2:	9b06      	ldr	r3, [sp, #24]
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	db04      	blt.n	8018ac2 <_dtoa_r+0x93a>
 8018ab8:	9907      	ldr	r1, [sp, #28]
 8018aba:	430b      	orrs	r3, r1
 8018abc:	9908      	ldr	r1, [sp, #32]
 8018abe:	430b      	orrs	r3, r1
 8018ac0:	d120      	bne.n	8018b04 <_dtoa_r+0x97c>
 8018ac2:	2a00      	cmp	r2, #0
 8018ac4:	ddee      	ble.n	8018aa4 <_dtoa_r+0x91c>
 8018ac6:	9901      	ldr	r1, [sp, #4]
 8018ac8:	2201      	movs	r2, #1
 8018aca:	4648      	mov	r0, r9
 8018acc:	f000 fa58 	bl	8018f80 <__lshift>
 8018ad0:	4621      	mov	r1, r4
 8018ad2:	9001      	str	r0, [sp, #4]
 8018ad4:	f000 fac0 	bl	8019058 <__mcmp>
 8018ad8:	2800      	cmp	r0, #0
 8018ada:	dc03      	bgt.n	8018ae4 <_dtoa_r+0x95c>
 8018adc:	d1e2      	bne.n	8018aa4 <_dtoa_r+0x91c>
 8018ade:	f01a 0f01 	tst.w	sl, #1
 8018ae2:	d0df      	beq.n	8018aa4 <_dtoa_r+0x91c>
 8018ae4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018ae8:	d1d9      	bne.n	8018a9e <_dtoa_r+0x916>
 8018aea:	2339      	movs	r3, #57	@ 0x39
 8018aec:	f88b 3000 	strb.w	r3, [fp]
 8018af0:	4633      	mov	r3, r6
 8018af2:	461e      	mov	r6, r3
 8018af4:	3b01      	subs	r3, #1
 8018af6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8018afa:	2a39      	cmp	r2, #57	@ 0x39
 8018afc:	d052      	beq.n	8018ba4 <_dtoa_r+0xa1c>
 8018afe:	3201      	adds	r2, #1
 8018b00:	701a      	strb	r2, [r3, #0]
 8018b02:	e531      	b.n	8018568 <_dtoa_r+0x3e0>
 8018b04:	2a00      	cmp	r2, #0
 8018b06:	dd07      	ble.n	8018b18 <_dtoa_r+0x990>
 8018b08:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8018b0c:	d0ed      	beq.n	8018aea <_dtoa_r+0x962>
 8018b0e:	f10a 0301 	add.w	r3, sl, #1
 8018b12:	f88b 3000 	strb.w	r3, [fp]
 8018b16:	e527      	b.n	8018568 <_dtoa_r+0x3e0>
 8018b18:	9b04      	ldr	r3, [sp, #16]
 8018b1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018b1c:	f803 ac01 	strb.w	sl, [r3, #-1]
 8018b20:	4293      	cmp	r3, r2
 8018b22:	d029      	beq.n	8018b78 <_dtoa_r+0x9f0>
 8018b24:	9901      	ldr	r1, [sp, #4]
 8018b26:	2300      	movs	r3, #0
 8018b28:	220a      	movs	r2, #10
 8018b2a:	4648      	mov	r0, r9
 8018b2c:	f000 f89e 	bl	8018c6c <__multadd>
 8018b30:	45a8      	cmp	r8, r5
 8018b32:	9001      	str	r0, [sp, #4]
 8018b34:	f04f 0300 	mov.w	r3, #0
 8018b38:	f04f 020a 	mov.w	r2, #10
 8018b3c:	4641      	mov	r1, r8
 8018b3e:	4648      	mov	r0, r9
 8018b40:	d107      	bne.n	8018b52 <_dtoa_r+0x9ca>
 8018b42:	f000 f893 	bl	8018c6c <__multadd>
 8018b46:	4680      	mov	r8, r0
 8018b48:	4605      	mov	r5, r0
 8018b4a:	9b04      	ldr	r3, [sp, #16]
 8018b4c:	3301      	adds	r3, #1
 8018b4e:	9304      	str	r3, [sp, #16]
 8018b50:	e776      	b.n	8018a40 <_dtoa_r+0x8b8>
 8018b52:	f000 f88b 	bl	8018c6c <__multadd>
 8018b56:	4629      	mov	r1, r5
 8018b58:	4680      	mov	r8, r0
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	220a      	movs	r2, #10
 8018b5e:	4648      	mov	r0, r9
 8018b60:	f000 f884 	bl	8018c6c <__multadd>
 8018b64:	4605      	mov	r5, r0
 8018b66:	e7f0      	b.n	8018b4a <_dtoa_r+0x9c2>
 8018b68:	f1bb 0f00 	cmp.w	fp, #0
 8018b6c:	bfcc      	ite	gt
 8018b6e:	465e      	movgt	r6, fp
 8018b70:	2601      	movle	r6, #1
 8018b72:	443e      	add	r6, r7
 8018b74:	f04f 0800 	mov.w	r8, #0
 8018b78:	9901      	ldr	r1, [sp, #4]
 8018b7a:	2201      	movs	r2, #1
 8018b7c:	4648      	mov	r0, r9
 8018b7e:	f000 f9ff 	bl	8018f80 <__lshift>
 8018b82:	4621      	mov	r1, r4
 8018b84:	9001      	str	r0, [sp, #4]
 8018b86:	f000 fa67 	bl	8019058 <__mcmp>
 8018b8a:	2800      	cmp	r0, #0
 8018b8c:	dcb0      	bgt.n	8018af0 <_dtoa_r+0x968>
 8018b8e:	d102      	bne.n	8018b96 <_dtoa_r+0xa0e>
 8018b90:	f01a 0f01 	tst.w	sl, #1
 8018b94:	d1ac      	bne.n	8018af0 <_dtoa_r+0x968>
 8018b96:	4633      	mov	r3, r6
 8018b98:	461e      	mov	r6, r3
 8018b9a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018b9e:	2a30      	cmp	r2, #48	@ 0x30
 8018ba0:	d0fa      	beq.n	8018b98 <_dtoa_r+0xa10>
 8018ba2:	e4e1      	b.n	8018568 <_dtoa_r+0x3e0>
 8018ba4:	429f      	cmp	r7, r3
 8018ba6:	d1a4      	bne.n	8018af2 <_dtoa_r+0x96a>
 8018ba8:	9b05      	ldr	r3, [sp, #20]
 8018baa:	3301      	adds	r3, #1
 8018bac:	9305      	str	r3, [sp, #20]
 8018bae:	2331      	movs	r3, #49	@ 0x31
 8018bb0:	703b      	strb	r3, [r7, #0]
 8018bb2:	e4d9      	b.n	8018568 <_dtoa_r+0x3e0>
 8018bb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018bb6:	4f15      	ldr	r7, [pc, #84]	@ (8018c0c <_dtoa_r+0xa84>)
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	f43f ab1c 	beq.w	80181f6 <_dtoa_r+0x6e>
 8018bbe:	f107 0308 	add.w	r3, r7, #8
 8018bc2:	f7ff bb16 	b.w	80181f2 <_dtoa_r+0x6a>
 8018bc6:	9b07      	ldr	r3, [sp, #28]
 8018bc8:	2b01      	cmp	r3, #1
 8018bca:	f77f ae31 	ble.w	8018830 <_dtoa_r+0x6a8>
 8018bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018bd0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018bd2:	2001      	movs	r0, #1
 8018bd4:	e651      	b.n	801887a <_dtoa_r+0x6f2>
 8018bd6:	f1bb 0f00 	cmp.w	fp, #0
 8018bda:	f77f aedd 	ble.w	8018998 <_dtoa_r+0x810>
 8018bde:	463e      	mov	r6, r7
 8018be0:	9801      	ldr	r0, [sp, #4]
 8018be2:	4621      	mov	r1, r4
 8018be4:	f7ff fa48 	bl	8018078 <quorem>
 8018be8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8018bec:	f806 ab01 	strb.w	sl, [r6], #1
 8018bf0:	1bf2      	subs	r2, r6, r7
 8018bf2:	4593      	cmp	fp, r2
 8018bf4:	ddb8      	ble.n	8018b68 <_dtoa_r+0x9e0>
 8018bf6:	9901      	ldr	r1, [sp, #4]
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	220a      	movs	r2, #10
 8018bfc:	4648      	mov	r0, r9
 8018bfe:	f000 f835 	bl	8018c6c <__multadd>
 8018c02:	9001      	str	r0, [sp, #4]
 8018c04:	e7ec      	b.n	8018be0 <_dtoa_r+0xa58>
 8018c06:	bf00      	nop
 8018c08:	0801aab3 	.word	0x0801aab3
 8018c0c:	0801aaa6 	.word	0x0801aaa6

08018c10 <_Balloc>:
 8018c10:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8018c12:	b570      	push	{r4, r5, r6, lr}
 8018c14:	4605      	mov	r5, r0
 8018c16:	460c      	mov	r4, r1
 8018c18:	b17b      	cbz	r3, 8018c3a <_Balloc+0x2a>
 8018c1a:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8018c1c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8018c20:	b9a0      	cbnz	r0, 8018c4c <_Balloc+0x3c>
 8018c22:	2101      	movs	r1, #1
 8018c24:	fa01 f604 	lsl.w	r6, r1, r4
 8018c28:	1d72      	adds	r2, r6, #5
 8018c2a:	0092      	lsls	r2, r2, #2
 8018c2c:	4628      	mov	r0, r5
 8018c2e:	f000 fb95 	bl	801935c <_calloc_r>
 8018c32:	b148      	cbz	r0, 8018c48 <_Balloc+0x38>
 8018c34:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8018c38:	e00b      	b.n	8018c52 <_Balloc+0x42>
 8018c3a:	2221      	movs	r2, #33	@ 0x21
 8018c3c:	2104      	movs	r1, #4
 8018c3e:	f000 fb8d 	bl	801935c <_calloc_r>
 8018c42:	6468      	str	r0, [r5, #68]	@ 0x44
 8018c44:	2800      	cmp	r0, #0
 8018c46:	d1e8      	bne.n	8018c1a <_Balloc+0xa>
 8018c48:	2000      	movs	r0, #0
 8018c4a:	bd70      	pop	{r4, r5, r6, pc}
 8018c4c:	6802      	ldr	r2, [r0, #0]
 8018c4e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8018c52:	2300      	movs	r3, #0
 8018c54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018c58:	e7f7      	b.n	8018c4a <_Balloc+0x3a>

08018c5a <_Bfree>:
 8018c5a:	b131      	cbz	r1, 8018c6a <_Bfree+0x10>
 8018c5c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8018c5e:	684a      	ldr	r2, [r1, #4]
 8018c60:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8018c64:	6008      	str	r0, [r1, #0]
 8018c66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8018c6a:	4770      	bx	lr

08018c6c <__multadd>:
 8018c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c70:	690d      	ldr	r5, [r1, #16]
 8018c72:	4607      	mov	r7, r0
 8018c74:	460c      	mov	r4, r1
 8018c76:	461e      	mov	r6, r3
 8018c78:	f101 0c14 	add.w	ip, r1, #20
 8018c7c:	2000      	movs	r0, #0
 8018c7e:	f8dc 3000 	ldr.w	r3, [ip]
 8018c82:	b299      	uxth	r1, r3
 8018c84:	fb02 6101 	mla	r1, r2, r1, r6
 8018c88:	0c1e      	lsrs	r6, r3, #16
 8018c8a:	0c0b      	lsrs	r3, r1, #16
 8018c8c:	fb02 3306 	mla	r3, r2, r6, r3
 8018c90:	b289      	uxth	r1, r1
 8018c92:	3001      	adds	r0, #1
 8018c94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8018c98:	4285      	cmp	r5, r0
 8018c9a:	f84c 1b04 	str.w	r1, [ip], #4
 8018c9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8018ca2:	dcec      	bgt.n	8018c7e <__multadd+0x12>
 8018ca4:	b30e      	cbz	r6, 8018cea <__multadd+0x7e>
 8018ca6:	68a3      	ldr	r3, [r4, #8]
 8018ca8:	42ab      	cmp	r3, r5
 8018caa:	dc19      	bgt.n	8018ce0 <__multadd+0x74>
 8018cac:	6861      	ldr	r1, [r4, #4]
 8018cae:	4638      	mov	r0, r7
 8018cb0:	3101      	adds	r1, #1
 8018cb2:	f7ff ffad 	bl	8018c10 <_Balloc>
 8018cb6:	4680      	mov	r8, r0
 8018cb8:	b928      	cbnz	r0, 8018cc6 <__multadd+0x5a>
 8018cba:	4602      	mov	r2, r0
 8018cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8018cf0 <__multadd+0x84>)
 8018cbe:	480d      	ldr	r0, [pc, #52]	@ (8018cf4 <__multadd+0x88>)
 8018cc0:	21ba      	movs	r1, #186	@ 0xba
 8018cc2:	f000 fb2d 	bl	8019320 <__assert_func>
 8018cc6:	6922      	ldr	r2, [r4, #16]
 8018cc8:	3202      	adds	r2, #2
 8018cca:	f104 010c 	add.w	r1, r4, #12
 8018cce:	0092      	lsls	r2, r2, #2
 8018cd0:	300c      	adds	r0, #12
 8018cd2:	f7fc f8e3 	bl	8014e9c <memcpy>
 8018cd6:	4621      	mov	r1, r4
 8018cd8:	4638      	mov	r0, r7
 8018cda:	f7ff ffbe 	bl	8018c5a <_Bfree>
 8018cde:	4644      	mov	r4, r8
 8018ce0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018ce4:	3501      	adds	r5, #1
 8018ce6:	615e      	str	r6, [r3, #20]
 8018ce8:	6125      	str	r5, [r4, #16]
 8018cea:	4620      	mov	r0, r4
 8018cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018cf0:	0801aab3 	.word	0x0801aab3
 8018cf4:	0801ab1c 	.word	0x0801ab1c

08018cf8 <__hi0bits>:
 8018cf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	bf36      	itet	cc
 8018d00:	0403      	lslcc	r3, r0, #16
 8018d02:	2000      	movcs	r0, #0
 8018d04:	2010      	movcc	r0, #16
 8018d06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8018d0a:	bf3c      	itt	cc
 8018d0c:	021b      	lslcc	r3, r3, #8
 8018d0e:	3008      	addcc	r0, #8
 8018d10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8018d14:	bf3c      	itt	cc
 8018d16:	011b      	lslcc	r3, r3, #4
 8018d18:	3004      	addcc	r0, #4
 8018d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018d1e:	bf3c      	itt	cc
 8018d20:	009b      	lslcc	r3, r3, #2
 8018d22:	3002      	addcc	r0, #2
 8018d24:	2b00      	cmp	r3, #0
 8018d26:	db05      	blt.n	8018d34 <__hi0bits+0x3c>
 8018d28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8018d2c:	f100 0001 	add.w	r0, r0, #1
 8018d30:	bf08      	it	eq
 8018d32:	2020      	moveq	r0, #32
 8018d34:	4770      	bx	lr

08018d36 <__lo0bits>:
 8018d36:	6803      	ldr	r3, [r0, #0]
 8018d38:	4602      	mov	r2, r0
 8018d3a:	f013 0007 	ands.w	r0, r3, #7
 8018d3e:	d00b      	beq.n	8018d58 <__lo0bits+0x22>
 8018d40:	07d9      	lsls	r1, r3, #31
 8018d42:	d421      	bmi.n	8018d88 <__lo0bits+0x52>
 8018d44:	0798      	lsls	r0, r3, #30
 8018d46:	bf49      	itett	mi
 8018d48:	085b      	lsrmi	r3, r3, #1
 8018d4a:	089b      	lsrpl	r3, r3, #2
 8018d4c:	2001      	movmi	r0, #1
 8018d4e:	6013      	strmi	r3, [r2, #0]
 8018d50:	bf5c      	itt	pl
 8018d52:	6013      	strpl	r3, [r2, #0]
 8018d54:	2002      	movpl	r0, #2
 8018d56:	4770      	bx	lr
 8018d58:	b299      	uxth	r1, r3
 8018d5a:	b909      	cbnz	r1, 8018d60 <__lo0bits+0x2a>
 8018d5c:	0c1b      	lsrs	r3, r3, #16
 8018d5e:	2010      	movs	r0, #16
 8018d60:	b2d9      	uxtb	r1, r3
 8018d62:	b909      	cbnz	r1, 8018d68 <__lo0bits+0x32>
 8018d64:	3008      	adds	r0, #8
 8018d66:	0a1b      	lsrs	r3, r3, #8
 8018d68:	0719      	lsls	r1, r3, #28
 8018d6a:	bf04      	itt	eq
 8018d6c:	091b      	lsreq	r3, r3, #4
 8018d6e:	3004      	addeq	r0, #4
 8018d70:	0799      	lsls	r1, r3, #30
 8018d72:	bf04      	itt	eq
 8018d74:	089b      	lsreq	r3, r3, #2
 8018d76:	3002      	addeq	r0, #2
 8018d78:	07d9      	lsls	r1, r3, #31
 8018d7a:	d403      	bmi.n	8018d84 <__lo0bits+0x4e>
 8018d7c:	085b      	lsrs	r3, r3, #1
 8018d7e:	f100 0001 	add.w	r0, r0, #1
 8018d82:	d003      	beq.n	8018d8c <__lo0bits+0x56>
 8018d84:	6013      	str	r3, [r2, #0]
 8018d86:	4770      	bx	lr
 8018d88:	2000      	movs	r0, #0
 8018d8a:	4770      	bx	lr
 8018d8c:	2020      	movs	r0, #32
 8018d8e:	4770      	bx	lr

08018d90 <__i2b>:
 8018d90:	b510      	push	{r4, lr}
 8018d92:	460c      	mov	r4, r1
 8018d94:	2101      	movs	r1, #1
 8018d96:	f7ff ff3b 	bl	8018c10 <_Balloc>
 8018d9a:	4602      	mov	r2, r0
 8018d9c:	b928      	cbnz	r0, 8018daa <__i2b+0x1a>
 8018d9e:	4b05      	ldr	r3, [pc, #20]	@ (8018db4 <__i2b+0x24>)
 8018da0:	4805      	ldr	r0, [pc, #20]	@ (8018db8 <__i2b+0x28>)
 8018da2:	f240 1145 	movw	r1, #325	@ 0x145
 8018da6:	f000 fabb 	bl	8019320 <__assert_func>
 8018daa:	2301      	movs	r3, #1
 8018dac:	6144      	str	r4, [r0, #20]
 8018dae:	6103      	str	r3, [r0, #16]
 8018db0:	bd10      	pop	{r4, pc}
 8018db2:	bf00      	nop
 8018db4:	0801aab3 	.word	0x0801aab3
 8018db8:	0801ab1c 	.word	0x0801ab1c

08018dbc <__multiply>:
 8018dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018dc0:	4617      	mov	r7, r2
 8018dc2:	690a      	ldr	r2, [r1, #16]
 8018dc4:	693b      	ldr	r3, [r7, #16]
 8018dc6:	429a      	cmp	r2, r3
 8018dc8:	bfa8      	it	ge
 8018dca:	463b      	movge	r3, r7
 8018dcc:	4689      	mov	r9, r1
 8018dce:	bfa4      	itt	ge
 8018dd0:	460f      	movge	r7, r1
 8018dd2:	4699      	movge	r9, r3
 8018dd4:	693d      	ldr	r5, [r7, #16]
 8018dd6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8018dda:	68bb      	ldr	r3, [r7, #8]
 8018ddc:	6879      	ldr	r1, [r7, #4]
 8018dde:	eb05 060a 	add.w	r6, r5, sl
 8018de2:	42b3      	cmp	r3, r6
 8018de4:	b085      	sub	sp, #20
 8018de6:	bfb8      	it	lt
 8018de8:	3101      	addlt	r1, #1
 8018dea:	f7ff ff11 	bl	8018c10 <_Balloc>
 8018dee:	b930      	cbnz	r0, 8018dfe <__multiply+0x42>
 8018df0:	4602      	mov	r2, r0
 8018df2:	4b41      	ldr	r3, [pc, #260]	@ (8018ef8 <__multiply+0x13c>)
 8018df4:	4841      	ldr	r0, [pc, #260]	@ (8018efc <__multiply+0x140>)
 8018df6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8018dfa:	f000 fa91 	bl	8019320 <__assert_func>
 8018dfe:	f100 0414 	add.w	r4, r0, #20
 8018e02:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8018e06:	4623      	mov	r3, r4
 8018e08:	2200      	movs	r2, #0
 8018e0a:	4573      	cmp	r3, lr
 8018e0c:	d320      	bcc.n	8018e50 <__multiply+0x94>
 8018e0e:	f107 0814 	add.w	r8, r7, #20
 8018e12:	f109 0114 	add.w	r1, r9, #20
 8018e16:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8018e1a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8018e1e:	9302      	str	r3, [sp, #8]
 8018e20:	1beb      	subs	r3, r5, r7
 8018e22:	3b15      	subs	r3, #21
 8018e24:	f023 0303 	bic.w	r3, r3, #3
 8018e28:	3304      	adds	r3, #4
 8018e2a:	3715      	adds	r7, #21
 8018e2c:	42bd      	cmp	r5, r7
 8018e2e:	bf38      	it	cc
 8018e30:	2304      	movcc	r3, #4
 8018e32:	9301      	str	r3, [sp, #4]
 8018e34:	9b02      	ldr	r3, [sp, #8]
 8018e36:	9103      	str	r1, [sp, #12]
 8018e38:	428b      	cmp	r3, r1
 8018e3a:	d80c      	bhi.n	8018e56 <__multiply+0x9a>
 8018e3c:	2e00      	cmp	r6, #0
 8018e3e:	dd03      	ble.n	8018e48 <__multiply+0x8c>
 8018e40:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8018e44:	2b00      	cmp	r3, #0
 8018e46:	d055      	beq.n	8018ef4 <__multiply+0x138>
 8018e48:	6106      	str	r6, [r0, #16]
 8018e4a:	b005      	add	sp, #20
 8018e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e50:	f843 2b04 	str.w	r2, [r3], #4
 8018e54:	e7d9      	b.n	8018e0a <__multiply+0x4e>
 8018e56:	f8b1 a000 	ldrh.w	sl, [r1]
 8018e5a:	f1ba 0f00 	cmp.w	sl, #0
 8018e5e:	d01f      	beq.n	8018ea0 <__multiply+0xe4>
 8018e60:	46c4      	mov	ip, r8
 8018e62:	46a1      	mov	r9, r4
 8018e64:	2700      	movs	r7, #0
 8018e66:	f85c 2b04 	ldr.w	r2, [ip], #4
 8018e6a:	f8d9 3000 	ldr.w	r3, [r9]
 8018e6e:	fa1f fb82 	uxth.w	fp, r2
 8018e72:	b29b      	uxth	r3, r3
 8018e74:	fb0a 330b 	mla	r3, sl, fp, r3
 8018e78:	443b      	add	r3, r7
 8018e7a:	f8d9 7000 	ldr.w	r7, [r9]
 8018e7e:	0c12      	lsrs	r2, r2, #16
 8018e80:	0c3f      	lsrs	r7, r7, #16
 8018e82:	fb0a 7202 	mla	r2, sl, r2, r7
 8018e86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8018e8a:	b29b      	uxth	r3, r3
 8018e8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e90:	4565      	cmp	r5, ip
 8018e92:	f849 3b04 	str.w	r3, [r9], #4
 8018e96:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8018e9a:	d8e4      	bhi.n	8018e66 <__multiply+0xaa>
 8018e9c:	9b01      	ldr	r3, [sp, #4]
 8018e9e:	50e7      	str	r7, [r4, r3]
 8018ea0:	9b03      	ldr	r3, [sp, #12]
 8018ea2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8018ea6:	3104      	adds	r1, #4
 8018ea8:	f1b9 0f00 	cmp.w	r9, #0
 8018eac:	d020      	beq.n	8018ef0 <__multiply+0x134>
 8018eae:	6823      	ldr	r3, [r4, #0]
 8018eb0:	4647      	mov	r7, r8
 8018eb2:	46a4      	mov	ip, r4
 8018eb4:	f04f 0a00 	mov.w	sl, #0
 8018eb8:	f8b7 b000 	ldrh.w	fp, [r7]
 8018ebc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8018ec0:	fb09 220b 	mla	r2, r9, fp, r2
 8018ec4:	4452      	add	r2, sl
 8018ec6:	b29b      	uxth	r3, r3
 8018ec8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ecc:	f84c 3b04 	str.w	r3, [ip], #4
 8018ed0:	f857 3b04 	ldr.w	r3, [r7], #4
 8018ed4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018ed8:	f8bc 3000 	ldrh.w	r3, [ip]
 8018edc:	fb09 330a 	mla	r3, r9, sl, r3
 8018ee0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8018ee4:	42bd      	cmp	r5, r7
 8018ee6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8018eea:	d8e5      	bhi.n	8018eb8 <__multiply+0xfc>
 8018eec:	9a01      	ldr	r2, [sp, #4]
 8018eee:	50a3      	str	r3, [r4, r2]
 8018ef0:	3404      	adds	r4, #4
 8018ef2:	e79f      	b.n	8018e34 <__multiply+0x78>
 8018ef4:	3e01      	subs	r6, #1
 8018ef6:	e7a1      	b.n	8018e3c <__multiply+0x80>
 8018ef8:	0801aab3 	.word	0x0801aab3
 8018efc:	0801ab1c 	.word	0x0801ab1c

08018f00 <__pow5mult>:
 8018f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018f04:	4615      	mov	r5, r2
 8018f06:	f012 0203 	ands.w	r2, r2, #3
 8018f0a:	4607      	mov	r7, r0
 8018f0c:	460e      	mov	r6, r1
 8018f0e:	d007      	beq.n	8018f20 <__pow5mult+0x20>
 8018f10:	4c1a      	ldr	r4, [pc, #104]	@ (8018f7c <__pow5mult+0x7c>)
 8018f12:	3a01      	subs	r2, #1
 8018f14:	2300      	movs	r3, #0
 8018f16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018f1a:	f7ff fea7 	bl	8018c6c <__multadd>
 8018f1e:	4606      	mov	r6, r0
 8018f20:	10ad      	asrs	r5, r5, #2
 8018f22:	d027      	beq.n	8018f74 <__pow5mult+0x74>
 8018f24:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8018f26:	b944      	cbnz	r4, 8018f3a <__pow5mult+0x3a>
 8018f28:	f240 2171 	movw	r1, #625	@ 0x271
 8018f2c:	4638      	mov	r0, r7
 8018f2e:	f7ff ff2f 	bl	8018d90 <__i2b>
 8018f32:	2300      	movs	r3, #0
 8018f34:	6438      	str	r0, [r7, #64]	@ 0x40
 8018f36:	4604      	mov	r4, r0
 8018f38:	6003      	str	r3, [r0, #0]
 8018f3a:	f04f 0900 	mov.w	r9, #0
 8018f3e:	07eb      	lsls	r3, r5, #31
 8018f40:	d50a      	bpl.n	8018f58 <__pow5mult+0x58>
 8018f42:	4631      	mov	r1, r6
 8018f44:	4622      	mov	r2, r4
 8018f46:	4638      	mov	r0, r7
 8018f48:	f7ff ff38 	bl	8018dbc <__multiply>
 8018f4c:	4631      	mov	r1, r6
 8018f4e:	4680      	mov	r8, r0
 8018f50:	4638      	mov	r0, r7
 8018f52:	f7ff fe82 	bl	8018c5a <_Bfree>
 8018f56:	4646      	mov	r6, r8
 8018f58:	106d      	asrs	r5, r5, #1
 8018f5a:	d00b      	beq.n	8018f74 <__pow5mult+0x74>
 8018f5c:	6820      	ldr	r0, [r4, #0]
 8018f5e:	b938      	cbnz	r0, 8018f70 <__pow5mult+0x70>
 8018f60:	4622      	mov	r2, r4
 8018f62:	4621      	mov	r1, r4
 8018f64:	4638      	mov	r0, r7
 8018f66:	f7ff ff29 	bl	8018dbc <__multiply>
 8018f6a:	6020      	str	r0, [r4, #0]
 8018f6c:	f8c0 9000 	str.w	r9, [r0]
 8018f70:	4604      	mov	r4, r0
 8018f72:	e7e4      	b.n	8018f3e <__pow5mult+0x3e>
 8018f74:	4630      	mov	r0, r6
 8018f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018f7a:	bf00      	nop
 8018f7c:	0801abfc 	.word	0x0801abfc

08018f80 <__lshift>:
 8018f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f84:	460c      	mov	r4, r1
 8018f86:	6849      	ldr	r1, [r1, #4]
 8018f88:	6923      	ldr	r3, [r4, #16]
 8018f8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8018f8e:	68a3      	ldr	r3, [r4, #8]
 8018f90:	4607      	mov	r7, r0
 8018f92:	4691      	mov	r9, r2
 8018f94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8018f98:	f108 0601 	add.w	r6, r8, #1
 8018f9c:	42b3      	cmp	r3, r6
 8018f9e:	db0b      	blt.n	8018fb8 <__lshift+0x38>
 8018fa0:	4638      	mov	r0, r7
 8018fa2:	f7ff fe35 	bl	8018c10 <_Balloc>
 8018fa6:	4605      	mov	r5, r0
 8018fa8:	b948      	cbnz	r0, 8018fbe <__lshift+0x3e>
 8018faa:	4602      	mov	r2, r0
 8018fac:	4b28      	ldr	r3, [pc, #160]	@ (8019050 <__lshift+0xd0>)
 8018fae:	4829      	ldr	r0, [pc, #164]	@ (8019054 <__lshift+0xd4>)
 8018fb0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8018fb4:	f000 f9b4 	bl	8019320 <__assert_func>
 8018fb8:	3101      	adds	r1, #1
 8018fba:	005b      	lsls	r3, r3, #1
 8018fbc:	e7ee      	b.n	8018f9c <__lshift+0x1c>
 8018fbe:	2300      	movs	r3, #0
 8018fc0:	f100 0114 	add.w	r1, r0, #20
 8018fc4:	f100 0210 	add.w	r2, r0, #16
 8018fc8:	4618      	mov	r0, r3
 8018fca:	4553      	cmp	r3, sl
 8018fcc:	db33      	blt.n	8019036 <__lshift+0xb6>
 8018fce:	6920      	ldr	r0, [r4, #16]
 8018fd0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018fd4:	f104 0314 	add.w	r3, r4, #20
 8018fd8:	f019 091f 	ands.w	r9, r9, #31
 8018fdc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018fe0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018fe4:	d02b      	beq.n	801903e <__lshift+0xbe>
 8018fe6:	f1c9 0e20 	rsb	lr, r9, #32
 8018fea:	468a      	mov	sl, r1
 8018fec:	2200      	movs	r2, #0
 8018fee:	6818      	ldr	r0, [r3, #0]
 8018ff0:	fa00 f009 	lsl.w	r0, r0, r9
 8018ff4:	4310      	orrs	r0, r2
 8018ff6:	f84a 0b04 	str.w	r0, [sl], #4
 8018ffa:	f853 2b04 	ldr.w	r2, [r3], #4
 8018ffe:	459c      	cmp	ip, r3
 8019000:	fa22 f20e 	lsr.w	r2, r2, lr
 8019004:	d8f3      	bhi.n	8018fee <__lshift+0x6e>
 8019006:	ebac 0304 	sub.w	r3, ip, r4
 801900a:	3b15      	subs	r3, #21
 801900c:	f023 0303 	bic.w	r3, r3, #3
 8019010:	3304      	adds	r3, #4
 8019012:	f104 0015 	add.w	r0, r4, #21
 8019016:	4560      	cmp	r0, ip
 8019018:	bf88      	it	hi
 801901a:	2304      	movhi	r3, #4
 801901c:	50ca      	str	r2, [r1, r3]
 801901e:	b10a      	cbz	r2, 8019024 <__lshift+0xa4>
 8019020:	f108 0602 	add.w	r6, r8, #2
 8019024:	3e01      	subs	r6, #1
 8019026:	4638      	mov	r0, r7
 8019028:	612e      	str	r6, [r5, #16]
 801902a:	4621      	mov	r1, r4
 801902c:	f7ff fe15 	bl	8018c5a <_Bfree>
 8019030:	4628      	mov	r0, r5
 8019032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019036:	f842 0f04 	str.w	r0, [r2, #4]!
 801903a:	3301      	adds	r3, #1
 801903c:	e7c5      	b.n	8018fca <__lshift+0x4a>
 801903e:	3904      	subs	r1, #4
 8019040:	f853 2b04 	ldr.w	r2, [r3], #4
 8019044:	f841 2f04 	str.w	r2, [r1, #4]!
 8019048:	459c      	cmp	ip, r3
 801904a:	d8f9      	bhi.n	8019040 <__lshift+0xc0>
 801904c:	e7ea      	b.n	8019024 <__lshift+0xa4>
 801904e:	bf00      	nop
 8019050:	0801aab3 	.word	0x0801aab3
 8019054:	0801ab1c 	.word	0x0801ab1c

08019058 <__mcmp>:
 8019058:	690a      	ldr	r2, [r1, #16]
 801905a:	4603      	mov	r3, r0
 801905c:	6900      	ldr	r0, [r0, #16]
 801905e:	1a80      	subs	r0, r0, r2
 8019060:	b530      	push	{r4, r5, lr}
 8019062:	d10e      	bne.n	8019082 <__mcmp+0x2a>
 8019064:	3314      	adds	r3, #20
 8019066:	3114      	adds	r1, #20
 8019068:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801906c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8019070:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8019074:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8019078:	4295      	cmp	r5, r2
 801907a:	d003      	beq.n	8019084 <__mcmp+0x2c>
 801907c:	d205      	bcs.n	801908a <__mcmp+0x32>
 801907e:	f04f 30ff 	mov.w	r0, #4294967295
 8019082:	bd30      	pop	{r4, r5, pc}
 8019084:	42a3      	cmp	r3, r4
 8019086:	d3f3      	bcc.n	8019070 <__mcmp+0x18>
 8019088:	e7fb      	b.n	8019082 <__mcmp+0x2a>
 801908a:	2001      	movs	r0, #1
 801908c:	e7f9      	b.n	8019082 <__mcmp+0x2a>
	...

08019090 <__mdiff>:
 8019090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019094:	4689      	mov	r9, r1
 8019096:	4606      	mov	r6, r0
 8019098:	4611      	mov	r1, r2
 801909a:	4648      	mov	r0, r9
 801909c:	4614      	mov	r4, r2
 801909e:	f7ff ffdb 	bl	8019058 <__mcmp>
 80190a2:	1e05      	subs	r5, r0, #0
 80190a4:	d112      	bne.n	80190cc <__mdiff+0x3c>
 80190a6:	4629      	mov	r1, r5
 80190a8:	4630      	mov	r0, r6
 80190aa:	f7ff fdb1 	bl	8018c10 <_Balloc>
 80190ae:	4602      	mov	r2, r0
 80190b0:	b928      	cbnz	r0, 80190be <__mdiff+0x2e>
 80190b2:	4b3f      	ldr	r3, [pc, #252]	@ (80191b0 <__mdiff+0x120>)
 80190b4:	f240 2137 	movw	r1, #567	@ 0x237
 80190b8:	483e      	ldr	r0, [pc, #248]	@ (80191b4 <__mdiff+0x124>)
 80190ba:	f000 f931 	bl	8019320 <__assert_func>
 80190be:	2301      	movs	r3, #1
 80190c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80190c4:	4610      	mov	r0, r2
 80190c6:	b003      	add	sp, #12
 80190c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80190cc:	bfbc      	itt	lt
 80190ce:	464b      	movlt	r3, r9
 80190d0:	46a1      	movlt	r9, r4
 80190d2:	4630      	mov	r0, r6
 80190d4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80190d8:	bfba      	itte	lt
 80190da:	461c      	movlt	r4, r3
 80190dc:	2501      	movlt	r5, #1
 80190de:	2500      	movge	r5, #0
 80190e0:	f7ff fd96 	bl	8018c10 <_Balloc>
 80190e4:	4602      	mov	r2, r0
 80190e6:	b918      	cbnz	r0, 80190f0 <__mdiff+0x60>
 80190e8:	4b31      	ldr	r3, [pc, #196]	@ (80191b0 <__mdiff+0x120>)
 80190ea:	f240 2145 	movw	r1, #581	@ 0x245
 80190ee:	e7e3      	b.n	80190b8 <__mdiff+0x28>
 80190f0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80190f4:	6926      	ldr	r6, [r4, #16]
 80190f6:	60c5      	str	r5, [r0, #12]
 80190f8:	f109 0310 	add.w	r3, r9, #16
 80190fc:	f109 0514 	add.w	r5, r9, #20
 8019100:	f104 0e14 	add.w	lr, r4, #20
 8019104:	f100 0b14 	add.w	fp, r0, #20
 8019108:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801910c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8019110:	9301      	str	r3, [sp, #4]
 8019112:	46d9      	mov	r9, fp
 8019114:	f04f 0c00 	mov.w	ip, #0
 8019118:	9b01      	ldr	r3, [sp, #4]
 801911a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801911e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8019122:	9301      	str	r3, [sp, #4]
 8019124:	fa1f f38a 	uxth.w	r3, sl
 8019128:	4619      	mov	r1, r3
 801912a:	b283      	uxth	r3, r0
 801912c:	1acb      	subs	r3, r1, r3
 801912e:	0c00      	lsrs	r0, r0, #16
 8019130:	4463      	add	r3, ip
 8019132:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8019136:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801913a:	b29b      	uxth	r3, r3
 801913c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8019140:	4576      	cmp	r6, lr
 8019142:	f849 3b04 	str.w	r3, [r9], #4
 8019146:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801914a:	d8e5      	bhi.n	8019118 <__mdiff+0x88>
 801914c:	1b33      	subs	r3, r6, r4
 801914e:	3b15      	subs	r3, #21
 8019150:	f023 0303 	bic.w	r3, r3, #3
 8019154:	3415      	adds	r4, #21
 8019156:	3304      	adds	r3, #4
 8019158:	42a6      	cmp	r6, r4
 801915a:	bf38      	it	cc
 801915c:	2304      	movcc	r3, #4
 801915e:	441d      	add	r5, r3
 8019160:	445b      	add	r3, fp
 8019162:	461e      	mov	r6, r3
 8019164:	462c      	mov	r4, r5
 8019166:	4544      	cmp	r4, r8
 8019168:	d30e      	bcc.n	8019188 <__mdiff+0xf8>
 801916a:	f108 0103 	add.w	r1, r8, #3
 801916e:	1b49      	subs	r1, r1, r5
 8019170:	f021 0103 	bic.w	r1, r1, #3
 8019174:	3d03      	subs	r5, #3
 8019176:	45a8      	cmp	r8, r5
 8019178:	bf38      	it	cc
 801917a:	2100      	movcc	r1, #0
 801917c:	440b      	add	r3, r1
 801917e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8019182:	b191      	cbz	r1, 80191aa <__mdiff+0x11a>
 8019184:	6117      	str	r7, [r2, #16]
 8019186:	e79d      	b.n	80190c4 <__mdiff+0x34>
 8019188:	f854 1b04 	ldr.w	r1, [r4], #4
 801918c:	46e6      	mov	lr, ip
 801918e:	0c08      	lsrs	r0, r1, #16
 8019190:	fa1c fc81 	uxtah	ip, ip, r1
 8019194:	4471      	add	r1, lr
 8019196:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801919a:	b289      	uxth	r1, r1
 801919c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80191a0:	f846 1b04 	str.w	r1, [r6], #4
 80191a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80191a8:	e7dd      	b.n	8019166 <__mdiff+0xd6>
 80191aa:	3f01      	subs	r7, #1
 80191ac:	e7e7      	b.n	801917e <__mdiff+0xee>
 80191ae:	bf00      	nop
 80191b0:	0801aab3 	.word	0x0801aab3
 80191b4:	0801ab1c 	.word	0x0801ab1c

080191b8 <__d2b>:
 80191b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80191bc:	460f      	mov	r7, r1
 80191be:	2101      	movs	r1, #1
 80191c0:	ec59 8b10 	vmov	r8, r9, d0
 80191c4:	4616      	mov	r6, r2
 80191c6:	f7ff fd23 	bl	8018c10 <_Balloc>
 80191ca:	4604      	mov	r4, r0
 80191cc:	b930      	cbnz	r0, 80191dc <__d2b+0x24>
 80191ce:	4602      	mov	r2, r0
 80191d0:	4b23      	ldr	r3, [pc, #140]	@ (8019260 <__d2b+0xa8>)
 80191d2:	4824      	ldr	r0, [pc, #144]	@ (8019264 <__d2b+0xac>)
 80191d4:	f240 310f 	movw	r1, #783	@ 0x30f
 80191d8:	f000 f8a2 	bl	8019320 <__assert_func>
 80191dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80191e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80191e4:	b10d      	cbz	r5, 80191ea <__d2b+0x32>
 80191e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80191ea:	9301      	str	r3, [sp, #4]
 80191ec:	f1b8 0300 	subs.w	r3, r8, #0
 80191f0:	d023      	beq.n	801923a <__d2b+0x82>
 80191f2:	4668      	mov	r0, sp
 80191f4:	9300      	str	r3, [sp, #0]
 80191f6:	f7ff fd9e 	bl	8018d36 <__lo0bits>
 80191fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80191fe:	b1d0      	cbz	r0, 8019236 <__d2b+0x7e>
 8019200:	f1c0 0320 	rsb	r3, r0, #32
 8019204:	fa02 f303 	lsl.w	r3, r2, r3
 8019208:	430b      	orrs	r3, r1
 801920a:	40c2      	lsrs	r2, r0
 801920c:	6163      	str	r3, [r4, #20]
 801920e:	9201      	str	r2, [sp, #4]
 8019210:	9b01      	ldr	r3, [sp, #4]
 8019212:	61a3      	str	r3, [r4, #24]
 8019214:	2b00      	cmp	r3, #0
 8019216:	bf0c      	ite	eq
 8019218:	2201      	moveq	r2, #1
 801921a:	2202      	movne	r2, #2
 801921c:	6122      	str	r2, [r4, #16]
 801921e:	b1a5      	cbz	r5, 801924a <__d2b+0x92>
 8019220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8019224:	4405      	add	r5, r0
 8019226:	603d      	str	r5, [r7, #0]
 8019228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801922c:	6030      	str	r0, [r6, #0]
 801922e:	4620      	mov	r0, r4
 8019230:	b003      	add	sp, #12
 8019232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019236:	6161      	str	r1, [r4, #20]
 8019238:	e7ea      	b.n	8019210 <__d2b+0x58>
 801923a:	a801      	add	r0, sp, #4
 801923c:	f7ff fd7b 	bl	8018d36 <__lo0bits>
 8019240:	9b01      	ldr	r3, [sp, #4]
 8019242:	6163      	str	r3, [r4, #20]
 8019244:	3020      	adds	r0, #32
 8019246:	2201      	movs	r2, #1
 8019248:	e7e8      	b.n	801921c <__d2b+0x64>
 801924a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801924e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8019252:	6038      	str	r0, [r7, #0]
 8019254:	6918      	ldr	r0, [r3, #16]
 8019256:	f7ff fd4f 	bl	8018cf8 <__hi0bits>
 801925a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801925e:	e7e5      	b.n	801922c <__d2b+0x74>
 8019260:	0801aab3 	.word	0x0801aab3
 8019264:	0801ab1c 	.word	0x0801ab1c

08019268 <__ssputs_r>:
 8019268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801926c:	688e      	ldr	r6, [r1, #8]
 801926e:	461f      	mov	r7, r3
 8019270:	42be      	cmp	r6, r7
 8019272:	680b      	ldr	r3, [r1, #0]
 8019274:	4682      	mov	sl, r0
 8019276:	460c      	mov	r4, r1
 8019278:	4690      	mov	r8, r2
 801927a:	d82d      	bhi.n	80192d8 <__ssputs_r+0x70>
 801927c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8019280:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8019284:	d026      	beq.n	80192d4 <__ssputs_r+0x6c>
 8019286:	6965      	ldr	r5, [r4, #20]
 8019288:	6909      	ldr	r1, [r1, #16]
 801928a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801928e:	eba3 0901 	sub.w	r9, r3, r1
 8019292:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019296:	1c7b      	adds	r3, r7, #1
 8019298:	444b      	add	r3, r9
 801929a:	106d      	asrs	r5, r5, #1
 801929c:	429d      	cmp	r5, r3
 801929e:	bf38      	it	cc
 80192a0:	461d      	movcc	r5, r3
 80192a2:	0553      	lsls	r3, r2, #21
 80192a4:	d527      	bpl.n	80192f6 <__ssputs_r+0x8e>
 80192a6:	4629      	mov	r1, r5
 80192a8:	f7fa fe7c 	bl	8013fa4 <_malloc_r>
 80192ac:	4606      	mov	r6, r0
 80192ae:	b360      	cbz	r0, 801930a <__ssputs_r+0xa2>
 80192b0:	6921      	ldr	r1, [r4, #16]
 80192b2:	464a      	mov	r2, r9
 80192b4:	f7fb fdf2 	bl	8014e9c <memcpy>
 80192b8:	89a3      	ldrh	r3, [r4, #12]
 80192ba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80192be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80192c2:	81a3      	strh	r3, [r4, #12]
 80192c4:	6126      	str	r6, [r4, #16]
 80192c6:	6165      	str	r5, [r4, #20]
 80192c8:	444e      	add	r6, r9
 80192ca:	eba5 0509 	sub.w	r5, r5, r9
 80192ce:	6026      	str	r6, [r4, #0]
 80192d0:	60a5      	str	r5, [r4, #8]
 80192d2:	463e      	mov	r6, r7
 80192d4:	42be      	cmp	r6, r7
 80192d6:	d900      	bls.n	80192da <__ssputs_r+0x72>
 80192d8:	463e      	mov	r6, r7
 80192da:	6820      	ldr	r0, [r4, #0]
 80192dc:	4632      	mov	r2, r6
 80192de:	4641      	mov	r1, r8
 80192e0:	f7fb fcb6 	bl	8014c50 <memmove>
 80192e4:	68a3      	ldr	r3, [r4, #8]
 80192e6:	1b9b      	subs	r3, r3, r6
 80192e8:	60a3      	str	r3, [r4, #8]
 80192ea:	6823      	ldr	r3, [r4, #0]
 80192ec:	4433      	add	r3, r6
 80192ee:	6023      	str	r3, [r4, #0]
 80192f0:	2000      	movs	r0, #0
 80192f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80192f6:	462a      	mov	r2, r5
 80192f8:	f7fb ff04 	bl	8015104 <_realloc_r>
 80192fc:	4606      	mov	r6, r0
 80192fe:	2800      	cmp	r0, #0
 8019300:	d1e0      	bne.n	80192c4 <__ssputs_r+0x5c>
 8019302:	6921      	ldr	r1, [r4, #16]
 8019304:	4650      	mov	r0, sl
 8019306:	f7fb fe3d 	bl	8014f84 <_free_r>
 801930a:	230c      	movs	r3, #12
 801930c:	f8ca 3000 	str.w	r3, [sl]
 8019310:	89a3      	ldrh	r3, [r4, #12]
 8019312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019316:	81a3      	strh	r3, [r4, #12]
 8019318:	f04f 30ff 	mov.w	r0, #4294967295
 801931c:	e7e9      	b.n	80192f2 <__ssputs_r+0x8a>
	...

08019320 <__assert_func>:
 8019320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019322:	4614      	mov	r4, r2
 8019324:	461a      	mov	r2, r3
 8019326:	4b09      	ldr	r3, [pc, #36]	@ (801934c <__assert_func+0x2c>)
 8019328:	681b      	ldr	r3, [r3, #0]
 801932a:	4605      	mov	r5, r0
 801932c:	68d8      	ldr	r0, [r3, #12]
 801932e:	b14c      	cbz	r4, 8019344 <__assert_func+0x24>
 8019330:	4b07      	ldr	r3, [pc, #28]	@ (8019350 <__assert_func+0x30>)
 8019332:	9100      	str	r1, [sp, #0]
 8019334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019338:	4906      	ldr	r1, [pc, #24]	@ (8019354 <__assert_func+0x34>)
 801933a:	462b      	mov	r3, r5
 801933c:	f000 f862 	bl	8019404 <fiprintf>
 8019340:	f000 fd3a 	bl	8019db8 <abort>
 8019344:	4b04      	ldr	r3, [pc, #16]	@ (8019358 <__assert_func+0x38>)
 8019346:	461c      	mov	r4, r3
 8019348:	e7f3      	b.n	8019332 <__assert_func+0x12>
 801934a:	bf00      	nop
 801934c:	20000440 	.word	0x20000440
 8019350:	0801ab7f 	.word	0x0801ab7f
 8019354:	0801ab8c 	.word	0x0801ab8c
 8019358:	0801abba 	.word	0x0801abba

0801935c <_calloc_r>:
 801935c:	b538      	push	{r3, r4, r5, lr}
 801935e:	fba1 1502 	umull	r1, r5, r1, r2
 8019362:	b935      	cbnz	r5, 8019372 <_calloc_r+0x16>
 8019364:	f7fa fe1e 	bl	8013fa4 <_malloc_r>
 8019368:	4604      	mov	r4, r0
 801936a:	b938      	cbnz	r0, 801937c <_calloc_r+0x20>
 801936c:	2400      	movs	r4, #0
 801936e:	4620      	mov	r0, r4
 8019370:	bd38      	pop	{r3, r4, r5, pc}
 8019372:	f7fe fdf3 	bl	8017f5c <__errno>
 8019376:	230c      	movs	r3, #12
 8019378:	6003      	str	r3, [r0, #0]
 801937a:	e7f7      	b.n	801936c <_calloc_r+0x10>
 801937c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8019380:	f022 0203 	bic.w	r2, r2, #3
 8019384:	3a04      	subs	r2, #4
 8019386:	2a24      	cmp	r2, #36	@ 0x24
 8019388:	d819      	bhi.n	80193be <_calloc_r+0x62>
 801938a:	2a13      	cmp	r2, #19
 801938c:	d915      	bls.n	80193ba <_calloc_r+0x5e>
 801938e:	2a1b      	cmp	r2, #27
 8019390:	e9c0 5500 	strd	r5, r5, [r0]
 8019394:	d806      	bhi.n	80193a4 <_calloc_r+0x48>
 8019396:	f100 0308 	add.w	r3, r0, #8
 801939a:	2200      	movs	r2, #0
 801939c:	e9c3 2200 	strd	r2, r2, [r3]
 80193a0:	609a      	str	r2, [r3, #8]
 80193a2:	e7e4      	b.n	801936e <_calloc_r+0x12>
 80193a4:	2a24      	cmp	r2, #36	@ 0x24
 80193a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
 80193aa:	bf11      	iteee	ne
 80193ac:	f100 0310 	addne.w	r3, r0, #16
 80193b0:	6105      	streq	r5, [r0, #16]
 80193b2:	f100 0318 	addeq.w	r3, r0, #24
 80193b6:	6145      	streq	r5, [r0, #20]
 80193b8:	e7ef      	b.n	801939a <_calloc_r+0x3e>
 80193ba:	4603      	mov	r3, r0
 80193bc:	e7ed      	b.n	801939a <_calloc_r+0x3e>
 80193be:	4629      	mov	r1, r5
 80193c0:	f7fb fc60 	bl	8014c84 <memset>
 80193c4:	e7d3      	b.n	801936e <_calloc_r+0x12>

080193c6 <__ascii_mbtowc>:
 80193c6:	b082      	sub	sp, #8
 80193c8:	b901      	cbnz	r1, 80193cc <__ascii_mbtowc+0x6>
 80193ca:	a901      	add	r1, sp, #4
 80193cc:	b142      	cbz	r2, 80193e0 <__ascii_mbtowc+0x1a>
 80193ce:	b14b      	cbz	r3, 80193e4 <__ascii_mbtowc+0x1e>
 80193d0:	7813      	ldrb	r3, [r2, #0]
 80193d2:	600b      	str	r3, [r1, #0]
 80193d4:	7812      	ldrb	r2, [r2, #0]
 80193d6:	1e10      	subs	r0, r2, #0
 80193d8:	bf18      	it	ne
 80193da:	2001      	movne	r0, #1
 80193dc:	b002      	add	sp, #8
 80193de:	4770      	bx	lr
 80193e0:	4610      	mov	r0, r2
 80193e2:	e7fb      	b.n	80193dc <__ascii_mbtowc+0x16>
 80193e4:	f06f 0001 	mvn.w	r0, #1
 80193e8:	e7f8      	b.n	80193dc <__ascii_mbtowc+0x16>

080193ea <__ascii_wctomb>:
 80193ea:	4603      	mov	r3, r0
 80193ec:	4608      	mov	r0, r1
 80193ee:	b141      	cbz	r1, 8019402 <__ascii_wctomb+0x18>
 80193f0:	2aff      	cmp	r2, #255	@ 0xff
 80193f2:	d904      	bls.n	80193fe <__ascii_wctomb+0x14>
 80193f4:	228a      	movs	r2, #138	@ 0x8a
 80193f6:	601a      	str	r2, [r3, #0]
 80193f8:	f04f 30ff 	mov.w	r0, #4294967295
 80193fc:	4770      	bx	lr
 80193fe:	700a      	strb	r2, [r1, #0]
 8019400:	2001      	movs	r0, #1
 8019402:	4770      	bx	lr

08019404 <fiprintf>:
 8019404:	b40e      	push	{r1, r2, r3}
 8019406:	b503      	push	{r0, r1, lr}
 8019408:	4601      	mov	r1, r0
 801940a:	ab03      	add	r3, sp, #12
 801940c:	4805      	ldr	r0, [pc, #20]	@ (8019424 <fiprintf+0x20>)
 801940e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019412:	6800      	ldr	r0, [r0, #0]
 8019414:	9301      	str	r3, [sp, #4]
 8019416:	f000 f807 	bl	8019428 <_vfiprintf_r>
 801941a:	b002      	add	sp, #8
 801941c:	f85d eb04 	ldr.w	lr, [sp], #4
 8019420:	b003      	add	sp, #12
 8019422:	4770      	bx	lr
 8019424:	20000440 	.word	0x20000440

08019428 <_vfiprintf_r>:
 8019428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801942c:	b0bb      	sub	sp, #236	@ 0xec
 801942e:	460f      	mov	r7, r1
 8019430:	4693      	mov	fp, r2
 8019432:	461c      	mov	r4, r3
 8019434:	461d      	mov	r5, r3
 8019436:	9000      	str	r0, [sp, #0]
 8019438:	b118      	cbz	r0, 8019442 <_vfiprintf_r+0x1a>
 801943a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801943c:	b90b      	cbnz	r3, 8019442 <_vfiprintf_r+0x1a>
 801943e:	f7fb f8fb 	bl	8014638 <__sinit>
 8019442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019444:	07da      	lsls	r2, r3, #31
 8019446:	d405      	bmi.n	8019454 <_vfiprintf_r+0x2c>
 8019448:	89bb      	ldrh	r3, [r7, #12]
 801944a:	059b      	lsls	r3, r3, #22
 801944c:	d402      	bmi.n	8019454 <_vfiprintf_r+0x2c>
 801944e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019450:	f7fb fd0e 	bl	8014e70 <__retarget_lock_acquire_recursive>
 8019454:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8019458:	049e      	lsls	r6, r3, #18
 801945a:	d406      	bmi.n	801946a <_vfiprintf_r+0x42>
 801945c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801945e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8019462:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8019466:	81bb      	strh	r3, [r7, #12]
 8019468:	667a      	str	r2, [r7, #100]	@ 0x64
 801946a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801946c:	0498      	lsls	r0, r3, #18
 801946e:	d508      	bpl.n	8019482 <_vfiprintf_r+0x5a>
 8019470:	07d9      	lsls	r1, r3, #31
 8019472:	d512      	bpl.n	801949a <_vfiprintf_r+0x72>
 8019474:	f04f 33ff 	mov.w	r3, #4294967295
 8019478:	9303      	str	r3, [sp, #12]
 801947a:	9803      	ldr	r0, [sp, #12]
 801947c:	b03b      	add	sp, #236	@ 0xec
 801947e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019482:	89bb      	ldrh	r3, [r7, #12]
 8019484:	071a      	lsls	r2, r3, #28
 8019486:	d501      	bpl.n	801948c <_vfiprintf_r+0x64>
 8019488:	693b      	ldr	r3, [r7, #16]
 801948a:	b96b      	cbnz	r3, 80194a8 <_vfiprintf_r+0x80>
 801948c:	9800      	ldr	r0, [sp, #0]
 801948e:	4639      	mov	r1, r7
 8019490:	f7fb fb78 	bl	8014b84 <__swsetup_r>
 8019494:	b140      	cbz	r0, 80194a8 <_vfiprintf_r+0x80>
 8019496:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019498:	e7ea      	b.n	8019470 <_vfiprintf_r+0x48>
 801949a:	89bb      	ldrh	r3, [r7, #12]
 801949c:	059b      	lsls	r3, r3, #22
 801949e:	d4e9      	bmi.n	8019474 <_vfiprintf_r+0x4c>
 80194a0:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80194a2:	f7fb fce6 	bl	8014e72 <__retarget_lock_release_recursive>
 80194a6:	e7e5      	b.n	8019474 <_vfiprintf_r+0x4c>
 80194a8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80194ac:	f003 021a 	and.w	r2, r3, #26
 80194b0:	2a0a      	cmp	r2, #10
 80194b2:	d114      	bne.n	80194de <_vfiprintf_r+0xb6>
 80194b4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80194b8:	2a00      	cmp	r2, #0
 80194ba:	db10      	blt.n	80194de <_vfiprintf_r+0xb6>
 80194bc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80194be:	07d6      	lsls	r6, r2, #31
 80194c0:	d404      	bmi.n	80194cc <_vfiprintf_r+0xa4>
 80194c2:	059d      	lsls	r5, r3, #22
 80194c4:	d402      	bmi.n	80194cc <_vfiprintf_r+0xa4>
 80194c6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80194c8:	f7fb fcd3 	bl	8014e72 <__retarget_lock_release_recursive>
 80194cc:	9800      	ldr	r0, [sp, #0]
 80194ce:	4623      	mov	r3, r4
 80194d0:	465a      	mov	r2, fp
 80194d2:	4639      	mov	r1, r7
 80194d4:	b03b      	add	sp, #236	@ 0xec
 80194d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194da:	f000 bc2d 	b.w	8019d38 <__sbprintf>
 80194de:	2300      	movs	r3, #0
 80194e0:	e9cd 330f 	strd	r3, r3, [sp, #60]	@ 0x3c
 80194e4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80194e8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80194ec:	ae11      	add	r6, sp, #68	@ 0x44
 80194ee:	960e      	str	r6, [sp, #56]	@ 0x38
 80194f0:	9303      	str	r3, [sp, #12]
 80194f2:	465b      	mov	r3, fp
 80194f4:	461c      	mov	r4, r3
 80194f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194fa:	b10a      	cbz	r2, 8019500 <_vfiprintf_r+0xd8>
 80194fc:	2a25      	cmp	r2, #37	@ 0x25
 80194fe:	d1f9      	bne.n	80194f4 <_vfiprintf_r+0xcc>
 8019500:	ebb4 080b 	subs.w	r8, r4, fp
 8019504:	d00d      	beq.n	8019522 <_vfiprintf_r+0xfa>
 8019506:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019508:	4443      	add	r3, r8
 801950a:	9310      	str	r3, [sp, #64]	@ 0x40
 801950c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801950e:	3301      	adds	r3, #1
 8019510:	2b07      	cmp	r3, #7
 8019512:	e9c6 b800 	strd	fp, r8, [r6]
 8019516:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019518:	dc75      	bgt.n	8019606 <_vfiprintf_r+0x1de>
 801951a:	3608      	adds	r6, #8
 801951c:	9b03      	ldr	r3, [sp, #12]
 801951e:	4443      	add	r3, r8
 8019520:	9303      	str	r3, [sp, #12]
 8019522:	7823      	ldrb	r3, [r4, #0]
 8019524:	2b00      	cmp	r3, #0
 8019526:	f000 83c9 	beq.w	8019cbc <_vfiprintf_r+0x894>
 801952a:	2300      	movs	r3, #0
 801952c:	f04f 32ff 	mov.w	r2, #4294967295
 8019530:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8019534:	3401      	adds	r4, #1
 8019536:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 801953a:	469a      	mov	sl, r3
 801953c:	46a3      	mov	fp, r4
 801953e:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8019542:	f1a3 0220 	sub.w	r2, r3, #32
 8019546:	2a5a      	cmp	r2, #90	@ 0x5a
 8019548:	f200 8312 	bhi.w	8019b70 <_vfiprintf_r+0x748>
 801954c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8019550:	0310009a 	.word	0x0310009a
 8019554:	00a20310 	.word	0x00a20310
 8019558:	03100310 	.word	0x03100310
 801955c:	00820310 	.word	0x00820310
 8019560:	03100310 	.word	0x03100310
 8019564:	00af00a5 	.word	0x00af00a5
 8019568:	00ac0310 	.word	0x00ac0310
 801956c:	031000b1 	.word	0x031000b1
 8019570:	00d000cd 	.word	0x00d000cd
 8019574:	00d000d0 	.word	0x00d000d0
 8019578:	00d000d0 	.word	0x00d000d0
 801957c:	00d000d0 	.word	0x00d000d0
 8019580:	00d000d0 	.word	0x00d000d0
 8019584:	03100310 	.word	0x03100310
 8019588:	03100310 	.word	0x03100310
 801958c:	03100310 	.word	0x03100310
 8019590:	03100310 	.word	0x03100310
 8019594:	00f60310 	.word	0x00f60310
 8019598:	03100103 	.word	0x03100103
 801959c:	03100310 	.word	0x03100310
 80195a0:	03100310 	.word	0x03100310
 80195a4:	03100310 	.word	0x03100310
 80195a8:	03100310 	.word	0x03100310
 80195ac:	01510310 	.word	0x01510310
 80195b0:	03100310 	.word	0x03100310
 80195b4:	01980310 	.word	0x01980310
 80195b8:	02770310 	.word	0x02770310
 80195bc:	03100310 	.word	0x03100310
 80195c0:	03100297 	.word	0x03100297
 80195c4:	03100310 	.word	0x03100310
 80195c8:	03100310 	.word	0x03100310
 80195cc:	03100310 	.word	0x03100310
 80195d0:	03100310 	.word	0x03100310
 80195d4:	00f60310 	.word	0x00f60310
 80195d8:	03100105 	.word	0x03100105
 80195dc:	03100310 	.word	0x03100310
 80195e0:	010500df 	.word	0x010500df
 80195e4:	031000f0 	.word	0x031000f0
 80195e8:	031000ea 	.word	0x031000ea
 80195ec:	01530131 	.word	0x01530131
 80195f0:	00f00188 	.word	0x00f00188
 80195f4:	01980310 	.word	0x01980310
 80195f8:	02790098 	.word	0x02790098
 80195fc:	03100310 	.word	0x03100310
 8019600:	03100065 	.word	0x03100065
 8019604:	0098      	.short	0x0098
 8019606:	9800      	ldr	r0, [sp, #0]
 8019608:	aa0e      	add	r2, sp, #56	@ 0x38
 801960a:	4639      	mov	r1, r7
 801960c:	f7fe fad2 	bl	8017bb4 <__sprint_r>
 8019610:	2800      	cmp	r0, #0
 8019612:	f040 8332 	bne.w	8019c7a <_vfiprintf_r+0x852>
 8019616:	ae11      	add	r6, sp, #68	@ 0x44
 8019618:	e780      	b.n	801951c <_vfiprintf_r+0xf4>
 801961a:	4a98      	ldr	r2, [pc, #608]	@ (801987c <_vfiprintf_r+0x454>)
 801961c:	9205      	str	r2, [sp, #20]
 801961e:	f01a 0220 	ands.w	r2, sl, #32
 8019622:	f000 822e 	beq.w	8019a82 <_vfiprintf_r+0x65a>
 8019626:	3507      	adds	r5, #7
 8019628:	f025 0507 	bic.w	r5, r5, #7
 801962c:	46a8      	mov	r8, r5
 801962e:	686d      	ldr	r5, [r5, #4]
 8019630:	f858 4b08 	ldr.w	r4, [r8], #8
 8019634:	f01a 0f01 	tst.w	sl, #1
 8019638:	d009      	beq.n	801964e <_vfiprintf_r+0x226>
 801963a:	ea54 0205 	orrs.w	r2, r4, r5
 801963e:	bf1f      	itttt	ne
 8019640:	2230      	movne	r2, #48	@ 0x30
 8019642:	f88d 2034 	strbne.w	r2, [sp, #52]	@ 0x34
 8019646:	f88d 3035 	strbne.w	r3, [sp, #53]	@ 0x35
 801964a:	f04a 0a02 	orrne.w	sl, sl, #2
 801964e:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 8019652:	e111      	b.n	8019878 <_vfiprintf_r+0x450>
 8019654:	9800      	ldr	r0, [sp, #0]
 8019656:	f7fe fc5b 	bl	8017f10 <_localeconv_r>
 801965a:	6843      	ldr	r3, [r0, #4]
 801965c:	9308      	str	r3, [sp, #32]
 801965e:	4618      	mov	r0, r3
 8019660:	f7e6 fe3e 	bl	80002e0 <strlen>
 8019664:	9007      	str	r0, [sp, #28]
 8019666:	9800      	ldr	r0, [sp, #0]
 8019668:	f7fe fc52 	bl	8017f10 <_localeconv_r>
 801966c:	6883      	ldr	r3, [r0, #8]
 801966e:	9306      	str	r3, [sp, #24]
 8019670:	9b07      	ldr	r3, [sp, #28]
 8019672:	b12b      	cbz	r3, 8019680 <_vfiprintf_r+0x258>
 8019674:	9b06      	ldr	r3, [sp, #24]
 8019676:	b11b      	cbz	r3, 8019680 <_vfiprintf_r+0x258>
 8019678:	781b      	ldrb	r3, [r3, #0]
 801967a:	b10b      	cbz	r3, 8019680 <_vfiprintf_r+0x258>
 801967c:	f44a 6a80 	orr.w	sl, sl, #1024	@ 0x400
 8019680:	465c      	mov	r4, fp
 8019682:	e75b      	b.n	801953c <_vfiprintf_r+0x114>
 8019684:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8019688:	2b00      	cmp	r3, #0
 801968a:	d1f9      	bne.n	8019680 <_vfiprintf_r+0x258>
 801968c:	2320      	movs	r3, #32
 801968e:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8019692:	e7f5      	b.n	8019680 <_vfiprintf_r+0x258>
 8019694:	f04a 0a01 	orr.w	sl, sl, #1
 8019698:	e7f2      	b.n	8019680 <_vfiprintf_r+0x258>
 801969a:	f855 3b04 	ldr.w	r3, [r5], #4
 801969e:	9302      	str	r3, [sp, #8]
 80196a0:	2b00      	cmp	r3, #0
 80196a2:	daed      	bge.n	8019680 <_vfiprintf_r+0x258>
 80196a4:	425b      	negs	r3, r3
 80196a6:	9302      	str	r3, [sp, #8]
 80196a8:	f04a 0a04 	orr.w	sl, sl, #4
 80196ac:	e7e8      	b.n	8019680 <_vfiprintf_r+0x258>
 80196ae:	232b      	movs	r3, #43	@ 0x2b
 80196b0:	e7ed      	b.n	801968e <_vfiprintf_r+0x266>
 80196b2:	465a      	mov	r2, fp
 80196b4:	f812 3b01 	ldrb.w	r3, [r2], #1
 80196b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80196ba:	d113      	bne.n	80196e4 <_vfiprintf_r+0x2bc>
 80196bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80196c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80196c4:	9301      	str	r3, [sp, #4]
 80196c6:	4693      	mov	fp, r2
 80196c8:	e7da      	b.n	8019680 <_vfiprintf_r+0x258>
 80196ca:	f812 3b01 	ldrb.w	r3, [r2], #1
 80196ce:	fb04 0101 	mla	r1, r4, r1, r0
 80196d2:	f1a3 0030 	sub.w	r0, r3, #48	@ 0x30
 80196d6:	2809      	cmp	r0, #9
 80196d8:	d9f7      	bls.n	80196ca <_vfiprintf_r+0x2a2>
 80196da:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
 80196de:	9101      	str	r1, [sp, #4]
 80196e0:	4693      	mov	fp, r2
 80196e2:	e72e      	b.n	8019542 <_vfiprintf_r+0x11a>
 80196e4:	2100      	movs	r1, #0
 80196e6:	240a      	movs	r4, #10
 80196e8:	e7f3      	b.n	80196d2 <_vfiprintf_r+0x2aa>
 80196ea:	f04a 0a80 	orr.w	sl, sl, #128	@ 0x80
 80196ee:	e7c7      	b.n	8019680 <_vfiprintf_r+0x258>
 80196f0:	2200      	movs	r2, #0
 80196f2:	9202      	str	r2, [sp, #8]
 80196f4:	210a      	movs	r1, #10
 80196f6:	9a02      	ldr	r2, [sp, #8]
 80196f8:	3b30      	subs	r3, #48	@ 0x30
 80196fa:	fb01 3302 	mla	r3, r1, r2, r3
 80196fe:	9302      	str	r3, [sp, #8]
 8019700:	f81b 3b01 	ldrb.w	r3, [fp], #1
 8019704:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8019708:	2a09      	cmp	r2, #9
 801970a:	d9f4      	bls.n	80196f6 <_vfiprintf_r+0x2ce>
 801970c:	e719      	b.n	8019542 <_vfiprintf_r+0x11a>
 801970e:	f89b 3000 	ldrb.w	r3, [fp]
 8019712:	2b68      	cmp	r3, #104	@ 0x68
 8019714:	bf06      	itte	eq
 8019716:	f10b 0b01 	addeq.w	fp, fp, #1
 801971a:	f44a 7a00 	orreq.w	sl, sl, #512	@ 0x200
 801971e:	f04a 0a40 	orrne.w	sl, sl, #64	@ 0x40
 8019722:	e7ad      	b.n	8019680 <_vfiprintf_r+0x258>
 8019724:	f89b 3000 	ldrb.w	r3, [fp]
 8019728:	2b6c      	cmp	r3, #108	@ 0x6c
 801972a:	d104      	bne.n	8019736 <_vfiprintf_r+0x30e>
 801972c:	f10b 0b01 	add.w	fp, fp, #1
 8019730:	f04a 0a20 	orr.w	sl, sl, #32
 8019734:	e7a4      	b.n	8019680 <_vfiprintf_r+0x258>
 8019736:	f04a 0a10 	orr.w	sl, sl, #16
 801973a:	e7a1      	b.n	8019680 <_vfiprintf_r+0x258>
 801973c:	46a8      	mov	r8, r5
 801973e:	2400      	movs	r4, #0
 8019740:	f858 3b04 	ldr.w	r3, [r8], #4
 8019744:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8019748:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 801974c:	2301      	movs	r3, #1
 801974e:	9301      	str	r3, [sp, #4]
 8019750:	f10d 0984 	add.w	r9, sp, #132	@ 0x84
 8019754:	e0a9      	b.n	80198aa <_vfiprintf_r+0x482>
 8019756:	f04a 0a10 	orr.w	sl, sl, #16
 801975a:	f01a 0f20 	tst.w	sl, #32
 801975e:	d011      	beq.n	8019784 <_vfiprintf_r+0x35c>
 8019760:	3507      	adds	r5, #7
 8019762:	f025 0507 	bic.w	r5, r5, #7
 8019766:	46a8      	mov	r8, r5
 8019768:	686d      	ldr	r5, [r5, #4]
 801976a:	f858 4b08 	ldr.w	r4, [r8], #8
 801976e:	2d00      	cmp	r5, #0
 8019770:	da06      	bge.n	8019780 <_vfiprintf_r+0x358>
 8019772:	4264      	negs	r4, r4
 8019774:	f04f 032d 	mov.w	r3, #45	@ 0x2d
 8019778:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 801977c:	f88d 3033 	strb.w	r3, [sp, #51]	@ 0x33
 8019780:	2301      	movs	r3, #1
 8019782:	e048      	b.n	8019816 <_vfiprintf_r+0x3ee>
 8019784:	46a8      	mov	r8, r5
 8019786:	f01a 0f10 	tst.w	sl, #16
 801978a:	f858 5b04 	ldr.w	r5, [r8], #4
 801978e:	d002      	beq.n	8019796 <_vfiprintf_r+0x36e>
 8019790:	462c      	mov	r4, r5
 8019792:	17ed      	asrs	r5, r5, #31
 8019794:	e7eb      	b.n	801976e <_vfiprintf_r+0x346>
 8019796:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 801979a:	d003      	beq.n	80197a4 <_vfiprintf_r+0x37c>
 801979c:	b22c      	sxth	r4, r5
 801979e:	f345 35c0 	sbfx	r5, r5, #15, #1
 80197a2:	e7e4      	b.n	801976e <_vfiprintf_r+0x346>
 80197a4:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80197a8:	d0f2      	beq.n	8019790 <_vfiprintf_r+0x368>
 80197aa:	b26c      	sxtb	r4, r5
 80197ac:	f345 15c0 	sbfx	r5, r5, #7, #1
 80197b0:	e7dd      	b.n	801976e <_vfiprintf_r+0x346>
 80197b2:	f01a 0f20 	tst.w	sl, #32
 80197b6:	d007      	beq.n	80197c8 <_vfiprintf_r+0x3a0>
 80197b8:	9a03      	ldr	r2, [sp, #12]
 80197ba:	682b      	ldr	r3, [r5, #0]
 80197bc:	9903      	ldr	r1, [sp, #12]
 80197be:	17d2      	asrs	r2, r2, #31
 80197c0:	e9c3 1200 	strd	r1, r2, [r3]
 80197c4:	3504      	adds	r5, #4
 80197c6:	e694      	b.n	80194f2 <_vfiprintf_r+0xca>
 80197c8:	f01a 0f10 	tst.w	sl, #16
 80197cc:	d003      	beq.n	80197d6 <_vfiprintf_r+0x3ae>
 80197ce:	682b      	ldr	r3, [r5, #0]
 80197d0:	9a03      	ldr	r2, [sp, #12]
 80197d2:	601a      	str	r2, [r3, #0]
 80197d4:	e7f6      	b.n	80197c4 <_vfiprintf_r+0x39c>
 80197d6:	f01a 0f40 	tst.w	sl, #64	@ 0x40
 80197da:	d003      	beq.n	80197e4 <_vfiprintf_r+0x3bc>
 80197dc:	682b      	ldr	r3, [r5, #0]
 80197de:	9a03      	ldr	r2, [sp, #12]
 80197e0:	801a      	strh	r2, [r3, #0]
 80197e2:	e7ef      	b.n	80197c4 <_vfiprintf_r+0x39c>
 80197e4:	f41a 7f00 	tst.w	sl, #512	@ 0x200
 80197e8:	d0f1      	beq.n	80197ce <_vfiprintf_r+0x3a6>
 80197ea:	682b      	ldr	r3, [r5, #0]
 80197ec:	9a03      	ldr	r2, [sp, #12]
 80197ee:	701a      	strb	r2, [r3, #0]
 80197f0:	e7e8      	b.n	80197c4 <_vfiprintf_r+0x39c>
 80197f2:	f04a 0a10 	orr.w	sl, sl, #16
 80197f6:	f01a 0320 	ands.w	r3, sl, #32
 80197fa:	d01f      	beq.n	801983c <_vfiprintf_r+0x414>
 80197fc:	3507      	adds	r5, #7
 80197fe:	f025 0507 	bic.w	r5, r5, #7
 8019802:	46a8      	mov	r8, r5
 8019804:	686d      	ldr	r5, [r5, #4]
 8019806:	f858 4b08 	ldr.w	r4, [r8], #8
 801980a:	f42a 6a80 	bic.w	sl, sl, #1024	@ 0x400
 801980e:	2300      	movs	r3, #0
 8019810:	2200      	movs	r2, #0
 8019812:	f88d 2033 	strb.w	r2, [sp, #51]	@ 0x33
 8019816:	9a01      	ldr	r2, [sp, #4]
 8019818:	2a00      	cmp	r2, #0
 801981a:	f2c0 825c 	blt.w	8019cd6 <_vfiprintf_r+0x8ae>
 801981e:	f02a 0280 	bic.w	r2, sl, #128	@ 0x80
 8019822:	9204      	str	r2, [sp, #16]
 8019824:	ea54 0205 	orrs.w	r2, r4, r5
 8019828:	f040 825b 	bne.w	8019ce2 <_vfiprintf_r+0x8ba>
 801982c:	9a01      	ldr	r2, [sp, #4]
 801982e:	2a00      	cmp	r2, #0
 8019830:	f000 8195 	beq.w	8019b5e <_vfiprintf_r+0x736>
 8019834:	2b01      	cmp	r3, #1
 8019836:	f040 8257 	bne.w	8019ce8 <_vfiprintf_r+0x8c0>
 801983a:	e139      	b.n	8019ab0 <_vfiprintf_r+0x688>
 801983c:	46a8      	mov	r8, r5
 801983e:	f01a 0510 	ands.w	r5, sl, #16
 8019842:	f858 4b04 	ldr.w	r4, [r8], #4
 8019846:	d001      	beq.n	801984c <_vfiprintf_r+0x424>
 8019848:	461d      	mov	r5, r3
 801984a:	e7de      	b.n	801980a <_vfiprintf_r+0x3e2>
 801984c:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8019850:	d001      	beq.n	8019856 <_vfiprintf_r+0x42e>
 8019852:	b2a4      	uxth	r4, r4
 8019854:	e7d9      	b.n	801980a <_vfiprintf_r+0x3e2>
 8019856:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 801985a:	d0d6      	beq.n	801980a <_vfiprintf_r+0x3e2>
 801985c:	b2e4      	uxtb	r4, r4
 801985e:	e7f3      	b.n	8019848 <_vfiprintf_r+0x420>
 8019860:	46a8      	mov	r8, r5
 8019862:	f647 0330 	movw	r3, #30768	@ 0x7830
 8019866:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801986a:	f858 4b04 	ldr.w	r4, [r8], #4
 801986e:	4b03      	ldr	r3, [pc, #12]	@ (801987c <_vfiprintf_r+0x454>)
 8019870:	9305      	str	r3, [sp, #20]
 8019872:	2500      	movs	r5, #0
 8019874:	f04a 0a02 	orr.w	sl, sl, #2
 8019878:	2302      	movs	r3, #2
 801987a:	e7c9      	b.n	8019810 <_vfiprintf_r+0x3e8>
 801987c:	0801aa82 	.word	0x0801aa82
 8019880:	9b01      	ldr	r3, [sp, #4]
 8019882:	46a8      	mov	r8, r5
 8019884:	2500      	movs	r5, #0
 8019886:	42ab      	cmp	r3, r5
 8019888:	f858 9b04 	ldr.w	r9, [r8], #4
 801988c:	f88d 5033 	strb.w	r5, [sp, #51]	@ 0x33
 8019890:	f2c0 80d0 	blt.w	8019a34 <_vfiprintf_r+0x60c>
 8019894:	461a      	mov	r2, r3
 8019896:	4629      	mov	r1, r5
 8019898:	4648      	mov	r0, r9
 801989a:	f7e6 fcd1 	bl	8000240 <memchr>
 801989e:	4604      	mov	r4, r0
 80198a0:	b118      	cbz	r0, 80198aa <_vfiprintf_r+0x482>
 80198a2:	eba0 0309 	sub.w	r3, r0, r9
 80198a6:	9301      	str	r3, [sp, #4]
 80198a8:	462c      	mov	r4, r5
 80198aa:	9b01      	ldr	r3, [sp, #4]
 80198ac:	42a3      	cmp	r3, r4
 80198ae:	bfb8      	it	lt
 80198b0:	4623      	movlt	r3, r4
 80198b2:	9304      	str	r3, [sp, #16]
 80198b4:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80198b8:	b113      	cbz	r3, 80198c0 <_vfiprintf_r+0x498>
 80198ba:	9b04      	ldr	r3, [sp, #16]
 80198bc:	3301      	adds	r3, #1
 80198be:	9304      	str	r3, [sp, #16]
 80198c0:	f01a 0302 	ands.w	r3, sl, #2
 80198c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80198c6:	bf1e      	ittt	ne
 80198c8:	9b04      	ldrne	r3, [sp, #16]
 80198ca:	3302      	addne	r3, #2
 80198cc:	9304      	strne	r3, [sp, #16]
 80198ce:	f01a 0384 	ands.w	r3, sl, #132	@ 0x84
 80198d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80198d4:	d11f      	bne.n	8019916 <_vfiprintf_r+0x4ee>
 80198d6:	9b02      	ldr	r3, [sp, #8]
 80198d8:	9a04      	ldr	r2, [sp, #16]
 80198da:	1a9d      	subs	r5, r3, r2
 80198dc:	2d00      	cmp	r5, #0
 80198de:	dd1a      	ble.n	8019916 <_vfiprintf_r+0x4ee>
 80198e0:	4ba8      	ldr	r3, [pc, #672]	@ (8019b84 <_vfiprintf_r+0x75c>)
 80198e2:	6033      	str	r3, [r6, #0]
 80198e4:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 80198e8:	2d10      	cmp	r5, #16
 80198ea:	f102 0201 	add.w	r2, r2, #1
 80198ee:	f106 0008 	add.w	r0, r6, #8
 80198f2:	f300 814d 	bgt.w	8019b90 <_vfiprintf_r+0x768>
 80198f6:	6075      	str	r5, [r6, #4]
 80198f8:	2a07      	cmp	r2, #7
 80198fa:	4465      	add	r5, ip
 80198fc:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 8019900:	f340 8159 	ble.w	8019bb6 <_vfiprintf_r+0x78e>
 8019904:	9800      	ldr	r0, [sp, #0]
 8019906:	aa0e      	add	r2, sp, #56	@ 0x38
 8019908:	4639      	mov	r1, r7
 801990a:	f7fe f953 	bl	8017bb4 <__sprint_r>
 801990e:	2800      	cmp	r0, #0
 8019910:	f040 81b3 	bne.w	8019c7a <_vfiprintf_r+0x852>
 8019914:	ae11      	add	r6, sp, #68	@ 0x44
 8019916:	f89d 1033 	ldrb.w	r1, [sp, #51]	@ 0x33
 801991a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801991e:	b161      	cbz	r1, 801993a <_vfiprintf_r+0x512>
 8019920:	f10d 0133 	add.w	r1, sp, #51	@ 0x33
 8019924:	3301      	adds	r3, #1
 8019926:	6031      	str	r1, [r6, #0]
 8019928:	2101      	movs	r1, #1
 801992a:	440a      	add	r2, r1
 801992c:	2b07      	cmp	r3, #7
 801992e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8019932:	6071      	str	r1, [r6, #4]
 8019934:	f300 8141 	bgt.w	8019bba <_vfiprintf_r+0x792>
 8019938:	3608      	adds	r6, #8
 801993a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801993c:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 8019940:	b159      	cbz	r1, 801995a <_vfiprintf_r+0x532>
 8019942:	a90d      	add	r1, sp, #52	@ 0x34
 8019944:	3301      	adds	r3, #1
 8019946:	6031      	str	r1, [r6, #0]
 8019948:	2102      	movs	r1, #2
 801994a:	440a      	add	r2, r1
 801994c:	2b07      	cmp	r3, #7
 801994e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8019952:	6071      	str	r1, [r6, #4]
 8019954:	f300 813a 	bgt.w	8019bcc <_vfiprintf_r+0x7a4>
 8019958:	3608      	adds	r6, #8
 801995a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801995c:	2b80      	cmp	r3, #128	@ 0x80
 801995e:	d11f      	bne.n	80199a0 <_vfiprintf_r+0x578>
 8019960:	9b02      	ldr	r3, [sp, #8]
 8019962:	9a04      	ldr	r2, [sp, #16]
 8019964:	1a9d      	subs	r5, r3, r2
 8019966:	2d00      	cmp	r5, #0
 8019968:	dd1a      	ble.n	80199a0 <_vfiprintf_r+0x578>
 801996a:	4b87      	ldr	r3, [pc, #540]	@ (8019b88 <_vfiprintf_r+0x760>)
 801996c:	6033      	str	r3, [r6, #0]
 801996e:	e9dd 2c0f 	ldrd	r2, ip, [sp, #60]	@ 0x3c
 8019972:	2d10      	cmp	r5, #16
 8019974:	f102 0201 	add.w	r2, r2, #1
 8019978:	f106 0008 	add.w	r0, r6, #8
 801997c:	f300 812f 	bgt.w	8019bde <_vfiprintf_r+0x7b6>
 8019980:	6075      	str	r5, [r6, #4]
 8019982:	2a07      	cmp	r2, #7
 8019984:	4465      	add	r5, ip
 8019986:	e9cd 250f 	strd	r2, r5, [sp, #60]	@ 0x3c
 801998a:	f340 813b 	ble.w	8019c04 <_vfiprintf_r+0x7dc>
 801998e:	9800      	ldr	r0, [sp, #0]
 8019990:	aa0e      	add	r2, sp, #56	@ 0x38
 8019992:	4639      	mov	r1, r7
 8019994:	f7fe f90e 	bl	8017bb4 <__sprint_r>
 8019998:	2800      	cmp	r0, #0
 801999a:	f040 816e 	bne.w	8019c7a <_vfiprintf_r+0x852>
 801999e:	ae11      	add	r6, sp, #68	@ 0x44
 80199a0:	9b01      	ldr	r3, [sp, #4]
 80199a2:	1ae4      	subs	r4, r4, r3
 80199a4:	2c00      	cmp	r4, #0
 80199a6:	dd1a      	ble.n	80199de <_vfiprintf_r+0x5b6>
 80199a8:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 80199ac:	4876      	ldr	r0, [pc, #472]	@ (8019b88 <_vfiprintf_r+0x760>)
 80199ae:	6030      	str	r0, [r6, #0]
 80199b0:	2c10      	cmp	r4, #16
 80199b2:	f103 0301 	add.w	r3, r3, #1
 80199b6:	f106 0108 	add.w	r1, r6, #8
 80199ba:	f300 8125 	bgt.w	8019c08 <_vfiprintf_r+0x7e0>
 80199be:	6074      	str	r4, [r6, #4]
 80199c0:	2b07      	cmp	r3, #7
 80199c2:	4414      	add	r4, r2
 80199c4:	e9cd 340f 	strd	r3, r4, [sp, #60]	@ 0x3c
 80199c8:	f340 812f 	ble.w	8019c2a <_vfiprintf_r+0x802>
 80199cc:	9800      	ldr	r0, [sp, #0]
 80199ce:	aa0e      	add	r2, sp, #56	@ 0x38
 80199d0:	4639      	mov	r1, r7
 80199d2:	f7fe f8ef 	bl	8017bb4 <__sprint_r>
 80199d6:	2800      	cmp	r0, #0
 80199d8:	f040 814f 	bne.w	8019c7a <_vfiprintf_r+0x852>
 80199dc:	ae11      	add	r6, sp, #68	@ 0x44
 80199de:	9b01      	ldr	r3, [sp, #4]
 80199e0:	9a01      	ldr	r2, [sp, #4]
 80199e2:	6073      	str	r3, [r6, #4]
 80199e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80199e6:	f8c6 9000 	str.w	r9, [r6]
 80199ea:	4413      	add	r3, r2
 80199ec:	9310      	str	r3, [sp, #64]	@ 0x40
 80199ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80199f0:	3301      	adds	r3, #1
 80199f2:	2b07      	cmp	r3, #7
 80199f4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80199f6:	f300 811a 	bgt.w	8019c2e <_vfiprintf_r+0x806>
 80199fa:	f106 0308 	add.w	r3, r6, #8
 80199fe:	f01a 0f04 	tst.w	sl, #4
 8019a02:	f040 811c 	bne.w	8019c3e <_vfiprintf_r+0x816>
 8019a06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8019a0a:	9904      	ldr	r1, [sp, #16]
 8019a0c:	428a      	cmp	r2, r1
 8019a0e:	bfac      	ite	ge
 8019a10:	189b      	addge	r3, r3, r2
 8019a12:	185b      	addlt	r3, r3, r1
 8019a14:	9303      	str	r3, [sp, #12]
 8019a16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019a18:	b13b      	cbz	r3, 8019a2a <_vfiprintf_r+0x602>
 8019a1a:	9800      	ldr	r0, [sp, #0]
 8019a1c:	aa0e      	add	r2, sp, #56	@ 0x38
 8019a1e:	4639      	mov	r1, r7
 8019a20:	f7fe f8c8 	bl	8017bb4 <__sprint_r>
 8019a24:	2800      	cmp	r0, #0
 8019a26:	f040 8128 	bne.w	8019c7a <_vfiprintf_r+0x852>
 8019a2a:	2300      	movs	r3, #0
 8019a2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019a2e:	4645      	mov	r5, r8
 8019a30:	ae11      	add	r6, sp, #68	@ 0x44
 8019a32:	e55e      	b.n	80194f2 <_vfiprintf_r+0xca>
 8019a34:	4648      	mov	r0, r9
 8019a36:	f7e6 fc53 	bl	80002e0 <strlen>
 8019a3a:	9001      	str	r0, [sp, #4]
 8019a3c:	e734      	b.n	80198a8 <_vfiprintf_r+0x480>
 8019a3e:	f04a 0a10 	orr.w	sl, sl, #16
 8019a42:	f01a 0320 	ands.w	r3, sl, #32
 8019a46:	d008      	beq.n	8019a5a <_vfiprintf_r+0x632>
 8019a48:	3507      	adds	r5, #7
 8019a4a:	f025 0507 	bic.w	r5, r5, #7
 8019a4e:	46a8      	mov	r8, r5
 8019a50:	686d      	ldr	r5, [r5, #4]
 8019a52:	f858 4b08 	ldr.w	r4, [r8], #8
 8019a56:	2301      	movs	r3, #1
 8019a58:	e6da      	b.n	8019810 <_vfiprintf_r+0x3e8>
 8019a5a:	46a8      	mov	r8, r5
 8019a5c:	f01a 0510 	ands.w	r5, sl, #16
 8019a60:	f858 4b04 	ldr.w	r4, [r8], #4
 8019a64:	d001      	beq.n	8019a6a <_vfiprintf_r+0x642>
 8019a66:	461d      	mov	r5, r3
 8019a68:	e7f5      	b.n	8019a56 <_vfiprintf_r+0x62e>
 8019a6a:	f01a 0340 	ands.w	r3, sl, #64	@ 0x40
 8019a6e:	d001      	beq.n	8019a74 <_vfiprintf_r+0x64c>
 8019a70:	b2a4      	uxth	r4, r4
 8019a72:	e7f0      	b.n	8019a56 <_vfiprintf_r+0x62e>
 8019a74:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8019a78:	d0ed      	beq.n	8019a56 <_vfiprintf_r+0x62e>
 8019a7a:	b2e4      	uxtb	r4, r4
 8019a7c:	e7f3      	b.n	8019a66 <_vfiprintf_r+0x63e>
 8019a7e:	4a43      	ldr	r2, [pc, #268]	@ (8019b8c <_vfiprintf_r+0x764>)
 8019a80:	e5cc      	b.n	801961c <_vfiprintf_r+0x1f4>
 8019a82:	46a8      	mov	r8, r5
 8019a84:	f01a 0510 	ands.w	r5, sl, #16
 8019a88:	f858 4b04 	ldr.w	r4, [r8], #4
 8019a8c:	d001      	beq.n	8019a92 <_vfiprintf_r+0x66a>
 8019a8e:	4615      	mov	r5, r2
 8019a90:	e5d0      	b.n	8019634 <_vfiprintf_r+0x20c>
 8019a92:	f01a 0240 	ands.w	r2, sl, #64	@ 0x40
 8019a96:	d001      	beq.n	8019a9c <_vfiprintf_r+0x674>
 8019a98:	b2a4      	uxth	r4, r4
 8019a9a:	e5cb      	b.n	8019634 <_vfiprintf_r+0x20c>
 8019a9c:	f41a 7500 	ands.w	r5, sl, #512	@ 0x200
 8019aa0:	f43f adc8 	beq.w	8019634 <_vfiprintf_r+0x20c>
 8019aa4:	b2e4      	uxtb	r4, r4
 8019aa6:	e7f2      	b.n	8019a8e <_vfiprintf_r+0x666>
 8019aa8:	2c0a      	cmp	r4, #10
 8019aaa:	f175 0300 	sbcs.w	r3, r5, #0
 8019aae:	d206      	bcs.n	8019abe <_vfiprintf_r+0x696>
 8019ab0:	3430      	adds	r4, #48	@ 0x30
 8019ab2:	b2e4      	uxtb	r4, r4
 8019ab4:	f88d 40e7 	strb.w	r4, [sp, #231]	@ 0xe7
 8019ab8:	f10d 09e7 	add.w	r9, sp, #231	@ 0xe7
 8019abc:	e130      	b.n	8019d20 <_vfiprintf_r+0x8f8>
 8019abe:	ab3a      	add	r3, sp, #232	@ 0xe8
 8019ac0:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ac2:	9b04      	ldr	r3, [sp, #16]
 8019ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8019ac8:	f04f 0a00 	mov.w	sl, #0
 8019acc:	930a      	str	r3, [sp, #40]	@ 0x28
 8019ace:	220a      	movs	r2, #10
 8019ad0:	2300      	movs	r3, #0
 8019ad2:	4620      	mov	r0, r4
 8019ad4:	4629      	mov	r1, r5
 8019ad6:	f7e6 fc0b 	bl	80002f0 <__aeabi_uldivmod>
 8019ada:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019adc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019ade:	3230      	adds	r2, #48	@ 0x30
 8019ae0:	f801 2c01 	strb.w	r2, [r1, #-1]
 8019ae4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019ae6:	4603      	mov	r3, r0
 8019ae8:	f101 39ff 	add.w	r9, r1, #4294967295
 8019aec:	f10a 0a01 	add.w	sl, sl, #1
 8019af0:	b312      	cbz	r2, 8019b38 <_vfiprintf_r+0x710>
 8019af2:	9a06      	ldr	r2, [sp, #24]
 8019af4:	7812      	ldrb	r2, [r2, #0]
 8019af6:	4552      	cmp	r2, sl
 8019af8:	d11e      	bne.n	8019b38 <_vfiprintf_r+0x710>
 8019afa:	f1ba 0fff 	cmp.w	sl, #255	@ 0xff
 8019afe:	d01b      	beq.n	8019b38 <_vfiprintf_r+0x710>
 8019b00:	2c0a      	cmp	r4, #10
 8019b02:	f175 0500 	sbcs.w	r5, r5, #0
 8019b06:	f0c0 810b 	bcc.w	8019d20 <_vfiprintf_r+0x8f8>
 8019b0a:	9b07      	ldr	r3, [sp, #28]
 8019b0c:	9009      	str	r0, [sp, #36]	@ 0x24
 8019b0e:	eba9 0903 	sub.w	r9, r9, r3
 8019b12:	461a      	mov	r2, r3
 8019b14:	9908      	ldr	r1, [sp, #32]
 8019b16:	4648      	mov	r0, r9
 8019b18:	f7fe f9e7 	bl	8017eea <strncpy>
 8019b1c:	9b06      	ldr	r3, [sp, #24]
 8019b1e:	785a      	ldrb	r2, [r3, #1]
 8019b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019b22:	b112      	cbz	r2, 8019b2a <_vfiprintf_r+0x702>
 8019b24:	9a06      	ldr	r2, [sp, #24]
 8019b26:	3201      	adds	r2, #1
 8019b28:	9206      	str	r2, [sp, #24]
 8019b2a:	f04f 0a00 	mov.w	sl, #0
 8019b2e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8019b30:	f8cd 9024 	str.w	r9, [sp, #36]	@ 0x24
 8019b34:	461c      	mov	r4, r3
 8019b36:	e7ca      	b.n	8019ace <_vfiprintf_r+0x6a6>
 8019b38:	2c0a      	cmp	r4, #10
 8019b3a:	f175 0500 	sbcs.w	r5, r5, #0
 8019b3e:	d2f6      	bcs.n	8019b2e <_vfiprintf_r+0x706>
 8019b40:	e0ee      	b.n	8019d20 <_vfiprintf_r+0x8f8>
 8019b42:	f004 030f 	and.w	r3, r4, #15
 8019b46:	9a05      	ldr	r2, [sp, #20]
 8019b48:	0924      	lsrs	r4, r4, #4
 8019b4a:	5cd3      	ldrb	r3, [r2, r3]
 8019b4c:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8019b50:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
 8019b54:	092d      	lsrs	r5, r5, #4
 8019b56:	ea54 0305 	orrs.w	r3, r4, r5
 8019b5a:	d1f2      	bne.n	8019b42 <_vfiprintf_r+0x71a>
 8019b5c:	e0e0      	b.n	8019d20 <_vfiprintf_r+0x8f8>
 8019b5e:	b923      	cbnz	r3, 8019b6a <_vfiprintf_r+0x742>
 8019b60:	f01a 0f01 	tst.w	sl, #1
 8019b64:	d001      	beq.n	8019b6a <_vfiprintf_r+0x742>
 8019b66:	2430      	movs	r4, #48	@ 0x30
 8019b68:	e7a4      	b.n	8019ab4 <_vfiprintf_r+0x68c>
 8019b6a:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8019b6e:	e0d7      	b.n	8019d20 <_vfiprintf_r+0x8f8>
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	f000 80a3 	beq.w	8019cbc <_vfiprintf_r+0x894>
 8019b76:	2400      	movs	r4, #0
 8019b78:	f88d 3084 	strb.w	r3, [sp, #132]	@ 0x84
 8019b7c:	f88d 4033 	strb.w	r4, [sp, #51]	@ 0x33
 8019b80:	46a8      	mov	r8, r5
 8019b82:	e5e3      	b.n	801974c <_vfiprintf_r+0x324>
 8019b84:	0801ad08 	.word	0x0801ad08
 8019b88:	0801acf8 	.word	0x0801acf8
 8019b8c:	0801aa93 	.word	0x0801aa93
 8019b90:	2110      	movs	r1, #16
 8019b92:	6071      	str	r1, [r6, #4]
 8019b94:	2a07      	cmp	r2, #7
 8019b96:	4461      	add	r1, ip
 8019b98:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8019b9c:	dd08      	ble.n	8019bb0 <_vfiprintf_r+0x788>
 8019b9e:	9800      	ldr	r0, [sp, #0]
 8019ba0:	aa0e      	add	r2, sp, #56	@ 0x38
 8019ba2:	4639      	mov	r1, r7
 8019ba4:	f7fe f806 	bl	8017bb4 <__sprint_r>
 8019ba8:	2800      	cmp	r0, #0
 8019baa:	d166      	bne.n	8019c7a <_vfiprintf_r+0x852>
 8019bac:	4b60      	ldr	r3, [pc, #384]	@ (8019d30 <_vfiprintf_r+0x908>)
 8019bae:	a811      	add	r0, sp, #68	@ 0x44
 8019bb0:	3d10      	subs	r5, #16
 8019bb2:	4606      	mov	r6, r0
 8019bb4:	e695      	b.n	80198e2 <_vfiprintf_r+0x4ba>
 8019bb6:	4606      	mov	r6, r0
 8019bb8:	e6ad      	b.n	8019916 <_vfiprintf_r+0x4ee>
 8019bba:	9800      	ldr	r0, [sp, #0]
 8019bbc:	aa0e      	add	r2, sp, #56	@ 0x38
 8019bbe:	4639      	mov	r1, r7
 8019bc0:	f7fd fff8 	bl	8017bb4 <__sprint_r>
 8019bc4:	2800      	cmp	r0, #0
 8019bc6:	d158      	bne.n	8019c7a <_vfiprintf_r+0x852>
 8019bc8:	ae11      	add	r6, sp, #68	@ 0x44
 8019bca:	e6b6      	b.n	801993a <_vfiprintf_r+0x512>
 8019bcc:	9800      	ldr	r0, [sp, #0]
 8019bce:	aa0e      	add	r2, sp, #56	@ 0x38
 8019bd0:	4639      	mov	r1, r7
 8019bd2:	f7fd ffef 	bl	8017bb4 <__sprint_r>
 8019bd6:	2800      	cmp	r0, #0
 8019bd8:	d14f      	bne.n	8019c7a <_vfiprintf_r+0x852>
 8019bda:	ae11      	add	r6, sp, #68	@ 0x44
 8019bdc:	e6bd      	b.n	801995a <_vfiprintf_r+0x532>
 8019bde:	2110      	movs	r1, #16
 8019be0:	6071      	str	r1, [r6, #4]
 8019be2:	2a07      	cmp	r2, #7
 8019be4:	4461      	add	r1, ip
 8019be6:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8019bea:	dd08      	ble.n	8019bfe <_vfiprintf_r+0x7d6>
 8019bec:	9800      	ldr	r0, [sp, #0]
 8019bee:	aa0e      	add	r2, sp, #56	@ 0x38
 8019bf0:	4639      	mov	r1, r7
 8019bf2:	f7fd ffdf 	bl	8017bb4 <__sprint_r>
 8019bf6:	2800      	cmp	r0, #0
 8019bf8:	d13f      	bne.n	8019c7a <_vfiprintf_r+0x852>
 8019bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8019d34 <_vfiprintf_r+0x90c>)
 8019bfc:	a811      	add	r0, sp, #68	@ 0x44
 8019bfe:	3d10      	subs	r5, #16
 8019c00:	4606      	mov	r6, r0
 8019c02:	e6b3      	b.n	801996c <_vfiprintf_r+0x544>
 8019c04:	4606      	mov	r6, r0
 8019c06:	e6cb      	b.n	80199a0 <_vfiprintf_r+0x578>
 8019c08:	2010      	movs	r0, #16
 8019c0a:	4402      	add	r2, r0
 8019c0c:	2b07      	cmp	r3, #7
 8019c0e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
 8019c12:	6070      	str	r0, [r6, #4]
 8019c14:	dd06      	ble.n	8019c24 <_vfiprintf_r+0x7fc>
 8019c16:	9800      	ldr	r0, [sp, #0]
 8019c18:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c1a:	4639      	mov	r1, r7
 8019c1c:	f7fd ffca 	bl	8017bb4 <__sprint_r>
 8019c20:	bb58      	cbnz	r0, 8019c7a <_vfiprintf_r+0x852>
 8019c22:	a911      	add	r1, sp, #68	@ 0x44
 8019c24:	3c10      	subs	r4, #16
 8019c26:	460e      	mov	r6, r1
 8019c28:	e6be      	b.n	80199a8 <_vfiprintf_r+0x580>
 8019c2a:	460e      	mov	r6, r1
 8019c2c:	e6d7      	b.n	80199de <_vfiprintf_r+0x5b6>
 8019c2e:	9800      	ldr	r0, [sp, #0]
 8019c30:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c32:	4639      	mov	r1, r7
 8019c34:	f7fd ffbe 	bl	8017bb4 <__sprint_r>
 8019c38:	b9f8      	cbnz	r0, 8019c7a <_vfiprintf_r+0x852>
 8019c3a:	ab11      	add	r3, sp, #68	@ 0x44
 8019c3c:	e6df      	b.n	80199fe <_vfiprintf_r+0x5d6>
 8019c3e:	9a02      	ldr	r2, [sp, #8]
 8019c40:	9904      	ldr	r1, [sp, #16]
 8019c42:	1a54      	subs	r4, r2, r1
 8019c44:	2c00      	cmp	r4, #0
 8019c46:	f77f aede 	ble.w	8019a06 <_vfiprintf_r+0x5de>
 8019c4a:	4d39      	ldr	r5, [pc, #228]	@ (8019d30 <_vfiprintf_r+0x908>)
 8019c4c:	2610      	movs	r6, #16
 8019c4e:	e9dd 210f 	ldrd	r2, r1, [sp, #60]	@ 0x3c
 8019c52:	2c10      	cmp	r4, #16
 8019c54:	f102 0201 	add.w	r2, r2, #1
 8019c58:	601d      	str	r5, [r3, #0]
 8019c5a:	dc1d      	bgt.n	8019c98 <_vfiprintf_r+0x870>
 8019c5c:	605c      	str	r4, [r3, #4]
 8019c5e:	2a07      	cmp	r2, #7
 8019c60:	440c      	add	r4, r1
 8019c62:	e9cd 240f 	strd	r2, r4, [sp, #60]	@ 0x3c
 8019c66:	f77f aece 	ble.w	8019a06 <_vfiprintf_r+0x5de>
 8019c6a:	9800      	ldr	r0, [sp, #0]
 8019c6c:	aa0e      	add	r2, sp, #56	@ 0x38
 8019c6e:	4639      	mov	r1, r7
 8019c70:	f7fd ffa0 	bl	8017bb4 <__sprint_r>
 8019c74:	2800      	cmp	r0, #0
 8019c76:	f43f aec6 	beq.w	8019a06 <_vfiprintf_r+0x5de>
 8019c7a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019c7c:	07d9      	lsls	r1, r3, #31
 8019c7e:	d405      	bmi.n	8019c8c <_vfiprintf_r+0x864>
 8019c80:	89bb      	ldrh	r3, [r7, #12]
 8019c82:	059a      	lsls	r2, r3, #22
 8019c84:	d402      	bmi.n	8019c8c <_vfiprintf_r+0x864>
 8019c86:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019c88:	f7fb f8f3 	bl	8014e72 <__retarget_lock_release_recursive>
 8019c8c:	89bb      	ldrh	r3, [r7, #12]
 8019c8e:	065b      	lsls	r3, r3, #25
 8019c90:	f57f abf3 	bpl.w	801947a <_vfiprintf_r+0x52>
 8019c94:	f7ff bbee 	b.w	8019474 <_vfiprintf_r+0x4c>
 8019c98:	3110      	adds	r1, #16
 8019c9a:	2a07      	cmp	r2, #7
 8019c9c:	e9cd 210f 	strd	r2, r1, [sp, #60]	@ 0x3c
 8019ca0:	605e      	str	r6, [r3, #4]
 8019ca2:	dc02      	bgt.n	8019caa <_vfiprintf_r+0x882>
 8019ca4:	3308      	adds	r3, #8
 8019ca6:	3c10      	subs	r4, #16
 8019ca8:	e7d1      	b.n	8019c4e <_vfiprintf_r+0x826>
 8019caa:	9800      	ldr	r0, [sp, #0]
 8019cac:	aa0e      	add	r2, sp, #56	@ 0x38
 8019cae:	4639      	mov	r1, r7
 8019cb0:	f7fd ff80 	bl	8017bb4 <__sprint_r>
 8019cb4:	2800      	cmp	r0, #0
 8019cb6:	d1e0      	bne.n	8019c7a <_vfiprintf_r+0x852>
 8019cb8:	ab11      	add	r3, sp, #68	@ 0x44
 8019cba:	e7f4      	b.n	8019ca6 <_vfiprintf_r+0x87e>
 8019cbc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019cbe:	b913      	cbnz	r3, 8019cc6 <_vfiprintf_r+0x89e>
 8019cc0:	2300      	movs	r3, #0
 8019cc2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019cc4:	e7d9      	b.n	8019c7a <_vfiprintf_r+0x852>
 8019cc6:	9800      	ldr	r0, [sp, #0]
 8019cc8:	aa0e      	add	r2, sp, #56	@ 0x38
 8019cca:	4639      	mov	r1, r7
 8019ccc:	f7fd ff72 	bl	8017bb4 <__sprint_r>
 8019cd0:	2800      	cmp	r0, #0
 8019cd2:	d0f5      	beq.n	8019cc0 <_vfiprintf_r+0x898>
 8019cd4:	e7d1      	b.n	8019c7a <_vfiprintf_r+0x852>
 8019cd6:	ea54 0205 	orrs.w	r2, r4, r5
 8019cda:	f8cd a010 	str.w	sl, [sp, #16]
 8019cde:	f43f ada9 	beq.w	8019834 <_vfiprintf_r+0x40c>
 8019ce2:	2b01      	cmp	r3, #1
 8019ce4:	f43f aee0 	beq.w	8019aa8 <_vfiprintf_r+0x680>
 8019ce8:	2b02      	cmp	r3, #2
 8019cea:	f10d 09e8 	add.w	r9, sp, #232	@ 0xe8
 8019cee:	f43f af28 	beq.w	8019b42 <_vfiprintf_r+0x71a>
 8019cf2:	f004 0307 	and.w	r3, r4, #7
 8019cf6:	08e4      	lsrs	r4, r4, #3
 8019cf8:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
 8019cfc:	08ed      	lsrs	r5, r5, #3
 8019cfe:	3330      	adds	r3, #48	@ 0x30
 8019d00:	ea54 0105 	orrs.w	r1, r4, r5
 8019d04:	464a      	mov	r2, r9
 8019d06:	f809 3d01 	strb.w	r3, [r9, #-1]!
 8019d0a:	d1f2      	bne.n	8019cf2 <_vfiprintf_r+0x8ca>
 8019d0c:	9904      	ldr	r1, [sp, #16]
 8019d0e:	07c8      	lsls	r0, r1, #31
 8019d10:	d506      	bpl.n	8019d20 <_vfiprintf_r+0x8f8>
 8019d12:	2b30      	cmp	r3, #48	@ 0x30
 8019d14:	d004      	beq.n	8019d20 <_vfiprintf_r+0x8f8>
 8019d16:	2330      	movs	r3, #48	@ 0x30
 8019d18:	f809 3c01 	strb.w	r3, [r9, #-1]
 8019d1c:	f1a2 0902 	sub.w	r9, r2, #2
 8019d20:	ab3a      	add	r3, sp, #232	@ 0xe8
 8019d22:	eba3 0309 	sub.w	r3, r3, r9
 8019d26:	9c01      	ldr	r4, [sp, #4]
 8019d28:	f8dd a010 	ldr.w	sl, [sp, #16]
 8019d2c:	9301      	str	r3, [sp, #4]
 8019d2e:	e5bc      	b.n	80198aa <_vfiprintf_r+0x482>
 8019d30:	0801ad08 	.word	0x0801ad08
 8019d34:	0801acf8 	.word	0x0801acf8

08019d38 <__sbprintf>:
 8019d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d3a:	461f      	mov	r7, r3
 8019d3c:	898b      	ldrh	r3, [r1, #12]
 8019d3e:	f2ad 4d6c 	subw	sp, sp, #1132	@ 0x46c
 8019d42:	f023 0302 	bic.w	r3, r3, #2
 8019d46:	f8ad 300c 	strh.w	r3, [sp, #12]
 8019d4a:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8019d4c:	9319      	str	r3, [sp, #100]	@ 0x64
 8019d4e:	89cb      	ldrh	r3, [r1, #14]
 8019d50:	f8ad 300e 	strh.w	r3, [sp, #14]
 8019d54:	69cb      	ldr	r3, [r1, #28]
 8019d56:	9307      	str	r3, [sp, #28]
 8019d58:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
 8019d5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d5c:	ab1a      	add	r3, sp, #104	@ 0x68
 8019d5e:	9300      	str	r3, [sp, #0]
 8019d60:	9304      	str	r3, [sp, #16]
 8019d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019d66:	4615      	mov	r5, r2
 8019d68:	4606      	mov	r6, r0
 8019d6a:	9302      	str	r3, [sp, #8]
 8019d6c:	9305      	str	r3, [sp, #20]
 8019d6e:	a816      	add	r0, sp, #88	@ 0x58
 8019d70:	2300      	movs	r3, #0
 8019d72:	460c      	mov	r4, r1
 8019d74:	9306      	str	r3, [sp, #24]
 8019d76:	f7fb f879 	bl	8014e6c <__retarget_lock_init_recursive>
 8019d7a:	462a      	mov	r2, r5
 8019d7c:	463b      	mov	r3, r7
 8019d7e:	4669      	mov	r1, sp
 8019d80:	4630      	mov	r0, r6
 8019d82:	f7ff fb51 	bl	8019428 <_vfiprintf_r>
 8019d86:	1e05      	subs	r5, r0, #0
 8019d88:	db07      	blt.n	8019d9a <__sbprintf+0x62>
 8019d8a:	4669      	mov	r1, sp
 8019d8c:	4630      	mov	r0, r6
 8019d8e:	f7fe f823 	bl	8017dd8 <_fflush_r>
 8019d92:	2800      	cmp	r0, #0
 8019d94:	bf18      	it	ne
 8019d96:	f04f 35ff 	movne.w	r5, #4294967295
 8019d9a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8019d9e:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8019da0:	065b      	lsls	r3, r3, #25
 8019da2:	bf42      	ittt	mi
 8019da4:	89a3      	ldrhmi	r3, [r4, #12]
 8019da6:	f043 0340 	orrmi.w	r3, r3, #64	@ 0x40
 8019daa:	81a3      	strhmi	r3, [r4, #12]
 8019dac:	f7fb f85f 	bl	8014e6e <__retarget_lock_close_recursive>
 8019db0:	4628      	mov	r0, r5
 8019db2:	f20d 4d6c 	addw	sp, sp, #1132	@ 0x46c
 8019db6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019db8 <abort>:
 8019db8:	b508      	push	{r3, lr}
 8019dba:	2006      	movs	r0, #6
 8019dbc:	f000 f82c 	bl	8019e18 <raise>
 8019dc0:	2001      	movs	r0, #1
 8019dc2:	f7fa f8d9 	bl	8013f78 <_exit>

08019dc6 <_raise_r>:
 8019dc6:	291f      	cmp	r1, #31
 8019dc8:	b538      	push	{r3, r4, r5, lr}
 8019dca:	4605      	mov	r5, r0
 8019dcc:	460c      	mov	r4, r1
 8019dce:	d904      	bls.n	8019dda <_raise_r+0x14>
 8019dd0:	2316      	movs	r3, #22
 8019dd2:	6003      	str	r3, [r0, #0]
 8019dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8019dd8:	bd38      	pop	{r3, r4, r5, pc}
 8019dda:	f8d0 2138 	ldr.w	r2, [r0, #312]	@ 0x138
 8019dde:	b112      	cbz	r2, 8019de6 <_raise_r+0x20>
 8019de0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019de4:	b94b      	cbnz	r3, 8019dfa <_raise_r+0x34>
 8019de6:	4628      	mov	r0, r5
 8019de8:	f000 f830 	bl	8019e4c <_getpid_r>
 8019dec:	4622      	mov	r2, r4
 8019dee:	4601      	mov	r1, r0
 8019df0:	4628      	mov	r0, r5
 8019df2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019df6:	f000 b817 	b.w	8019e28 <_kill_r>
 8019dfa:	2b01      	cmp	r3, #1
 8019dfc:	d00a      	beq.n	8019e14 <_raise_r+0x4e>
 8019dfe:	1c59      	adds	r1, r3, #1
 8019e00:	d103      	bne.n	8019e0a <_raise_r+0x44>
 8019e02:	2316      	movs	r3, #22
 8019e04:	6003      	str	r3, [r0, #0]
 8019e06:	2001      	movs	r0, #1
 8019e08:	e7e6      	b.n	8019dd8 <_raise_r+0x12>
 8019e0a:	2100      	movs	r1, #0
 8019e0c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8019e10:	4620      	mov	r0, r4
 8019e12:	4798      	blx	r3
 8019e14:	2000      	movs	r0, #0
 8019e16:	e7df      	b.n	8019dd8 <_raise_r+0x12>

08019e18 <raise>:
 8019e18:	4b02      	ldr	r3, [pc, #8]	@ (8019e24 <raise+0xc>)
 8019e1a:	4601      	mov	r1, r0
 8019e1c:	6818      	ldr	r0, [r3, #0]
 8019e1e:	f7ff bfd2 	b.w	8019dc6 <_raise_r>
 8019e22:	bf00      	nop
 8019e24:	20000440 	.word	0x20000440

08019e28 <_kill_r>:
 8019e28:	b538      	push	{r3, r4, r5, lr}
 8019e2a:	4d07      	ldr	r5, [pc, #28]	@ (8019e48 <_kill_r+0x20>)
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	4604      	mov	r4, r0
 8019e30:	4608      	mov	r0, r1
 8019e32:	4611      	mov	r1, r2
 8019e34:	602b      	str	r3, [r5, #0]
 8019e36:	f7fa f8a0 	bl	8013f7a <_kill>
 8019e3a:	1c43      	adds	r3, r0, #1
 8019e3c:	d102      	bne.n	8019e44 <_kill_r+0x1c>
 8019e3e:	682b      	ldr	r3, [r5, #0]
 8019e40:	b103      	cbz	r3, 8019e44 <_kill_r+0x1c>
 8019e42:	6023      	str	r3, [r4, #0]
 8019e44:	bd38      	pop	{r3, r4, r5, pc}
 8019e46:	bf00      	nop
 8019e48:	20003e08 	.word	0x20003e08

08019e4c <_getpid_r>:
 8019e4c:	f7fa b896 	b.w	8013f7c <_getpid>

08019e50 <_init>:
 8019e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e52:	bf00      	nop
 8019e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e56:	bc08      	pop	{r3}
 8019e58:	469e      	mov	lr, r3
 8019e5a:	4770      	bx	lr

08019e5c <_fini>:
 8019e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019e5e:	bf00      	nop
 8019e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019e62:	bc08      	pop	{r3}
 8019e64:	469e      	mov	lr, r3
 8019e66:	4770      	bx	lr
